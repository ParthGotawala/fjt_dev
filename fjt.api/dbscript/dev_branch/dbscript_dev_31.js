(function (maxBuildNumber, userid, requiredDet) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 5980:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-03-2022 *********************************** */

                /* **************************** Add Script Version ->  02-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5981,'2.00','V1','Sample Entry- Shweta'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5981:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-03-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasPartsSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasPartsSearch`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(500),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pMountingType VARCHAR(50),  \n" +
                "	IN pMountingTypeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pRohsMainCategoryID INT,  \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "    IN pAlternatePartFilter TINYINT,  \n" +
                "    IN pPackagingAliasFilter TINYINT,  \n" +
                "    IN pRoHReplacementPartFilter TINYINT,  \n" +
                "    IN pDriveToolsPartFilter TINYINT,  \n" +
                "    IN pProcessMaterialPartFilter TINYINT,  \n" +
                "    IN pRequireMatingPartFilter TINYINT,  \n" +
                "    IN pPickupPadPartFilter TINYINT,  \n" +
                "    IN pRequireFunctionalPartFilter TINYINT,  \n" +
                "	IN pCurrentPartId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vRohsMainCategoryID INT;  \n" +
                "	DECLARE vPackaginggroupID INT;  \n" +
                "	SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                "	/*===>this logic is added to compare invert rohs category*/  \n" +
                "	IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                "		IF pRohsMainCategoryID = -1 THEN  \n" +
                "			SET vRohsMainCategoryID = -2;  \n" +
                "		ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                "			SET vRohsMainCategoryID = -1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	/*<===this logic is added to compare invert rohs category*/  \n" +
                "	IF(pCurrentPartId is not null)  \n" +
                "	THEN  \n" +
                "		select packaginggroupID INTO vPackaginggroupID from component where id = pCurrentPartId;  \n" +
                "	END IF;  \n" +
                "	select *  \n" +
                "		from  \n" +
                "		(  \n" +
                "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,					c.mfgPN orgMfgPN,			c.packaginggroupID,		c.PIDCode,  	c.partStatus,	c.partPackageID,  \n" +
                "					c.isGoodPart,				c.RoHSStatusID,						c.mfgcodeID,				c.mfgType,  				c.partType,				c.isCustom,  	c.uom,		c.uomClassID,  \n" +
                "					c.category,					c.functionalCategoryID,				c.mountingTypeID,			c.connecterTypeID ,			r.rohsIcon,				r.name AS rohsName, c.minOperatingTemp,  \n" +
                "                    c.maxOperatingTemp,			c.temperatureCoefficientValue,		c.temperatureCoefficientUnit,	c.noOfPosition,			c.noOfRows,				c.pitch,		c.pitchMating,		c.length,  \n" +
                "                    c.width,					c.height,							c.tolerance,					c.voltage,				c.value,				powerRating,	c.weight,		c.feature,  \n" +
                "                    c.color,					c.packageQty,						c.umidSPQ,						c.restrictPackagingUsePermanently,	c.restrictPackagingUseWithpermission,  \n" +
                "                    c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.partPackage,				c.isNoClean,				c.isWaterSoluble,		c.isFluxNotApplicable,	c.mfgPNDescription,  \n" +
                "                    c.detailDescription,		c.isHazmatMaterial,					c.isReceiveBulkItem,		c.isEpoxyMount  \n" +
                "  \n" +
                "			from component c  \n" +
                "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID  \n" +
                "            JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND  mt.name = IFNULL(pMountingType, mt.name)  \n" +
                "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "            AND 	c.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "            AND     (CASE WHEN pCurrentPartId is not null THEN c.id != pCurrentPartId  ELSE 1 = 1 END)  \n" +
                "		 	AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)  \n" +
                "            and 	(CASE WHEN pPackagingAliasFilter = 1 THEN  (not exists (select 1 from component_packagingalias cp where cp.componentID = c.id and cp.aliasgroupID = vPackaginggroupID and cp.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pAlternatePartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 1 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pPickupPadPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 2 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pRequireFunctionalPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 4 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pProcessMaterialPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 5 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pRoHReplacementPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 6 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pDriveToolsPartFilter = 1 THEN  (not exists (select 1 from component_drivetools cd where cd.isDeleted = 0 and cd.componentID = c.id and cd.refComponentID = pCurrentPartId )) ELSE 1= 1 END)  \n" +
                "            and ((pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND  \n" +
                "					(  \n" +
                "						c.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
                "						EXISTS( SELECT  1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = c.id  \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                "					)  \n" +
                "				) )  \n" +
                "		) AS a  \n" +
                "		/*WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND  \n" +
                "					(  \n" +
                "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
                "						EXISTS( SELECT  1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = a.id  \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                "					)  \n" +
                "				)  \n" +
                "			)  */  \n" +
                "		ORDER BY mfgPN;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetKitAllocationForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitAllocationForElastic`(  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE pWhereClause VARCHAR(1000);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    SET pWhereClause = '1 = 1';  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount\");  \n" +
                "		SET pWhereClause = CONCAT('sd.isDeleted = 0');  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			  k.id  \n" +
                "				,k.refSalesOrderDetID  \n" +
                "                ,sd.refSalesOrderID  \n" +
                "				,s.poNumber  \n" +
                "				,s.salesOrderNumber  \n" +
                "				,k.assyId  \n" +
                "                ,assy.mfgcodeID  \n" +
                "                ,assy_mcm.mfgType assyMfgType  \n" +
                "				,assy.PIDCode AssyPIdCode  \n" +
                "				,assy.mfgPN assyMfgPN  \n" +
                "				,k.partId  \n" +
                "                ,c_mcm.mfgType partMfgType  \n" +
                "				,c.PIDCode partCode  \n" +
                "				,assy.mfgPN partMfgPn  \n" +
                "				,c.assyCode part  \n" +
                "				,k.UID  \n" +
                "				,k.refUIDId  \n" +
                "                ,k.allocatedQty  \n" +
                "                ,k.consumeQty  \n" +
                "                ,k.scrapExpiredQty  \n" +
                "                ,CASE WHEN k.STATUS = 'A' THEN 'Allocated'  \n" +
                "					WHEN k.STATUS = 'R' THEN 'Return'  \n" +
                "					WHEN k.STATUS = 'D' THEN 'Deallocated'  \n" +
                "					ELSE 'Consumed' END KitStatus  \n" +
                "                ,k.returnQty  \n" +
                "                ,sd.isDeleted  \n" +
                "				,k.createdAt  \n" +
                "				,k.updatedAt  \n" +
                "                ,sd.kitNumber\");  \n" +
                "			IF((SELECT COUNT(1) from tempKitAllocation) > 0) THEN  \n" +
                "				SET pWhereClause = CONCAT(\"k.id IN (select pId from tempKitAllocation)\");  \n" +
                "			END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(@temp_Sproc_GetKitAllocationForElastic, \"  \n" +
                "			from kit_allocation k  \n" +
                "			inner join salesorderdet sd on k.refSalesOrderDetID = sd.id and sd.partCategory=3  \n" +
                "			left JOIN salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			left join component assy on k.assyId = assy.Id  \n" +
                "			left join component c on k.partId = c.Id  \n" +
                "            left join mfgcodemst assy_mcm on assy.mfgcodeId = assy_mcm.id  \n" +
                "            left join mfgcodemst c_mcm on c.mfgcodeId = c_mcm.id  \n" +
                "            where  \n" +
                "	\");  \n" +
                "  \n" +
                "    IF (pFromdate IS NOT NULL OR pTodate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause,\"  AND (((DATE(fun_CovnertDateTimeByTimezoneValue(k.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(k.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"'))  \n" +
                "        OR ((DATE(fun_CovnertDateTimeByTimezoneValue(sd.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(sd.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"')));\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@temp_Sproc_GetKitAllocationForElastic, pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempKitAllocation;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pNewEpicorType varchar(50),  \n" +
                "    IN pNewAssemblyType INT,  \n" +
                "    IN pNewMfgcodeID INT,  \n" +
                "    IN pNewCustAssyPN varchar(500),  \n" +
                "    IN pNewPartRev varchar(50),  \n" +
                "    IN pNewMfgPN varchar(100),  \n" +
                "    IN pNewAssyCode varchar(50),  \n" +
                "    IN pNewNickName varchar(50),  \n" +
                "    IN pNewPIDCode varchar(109),  \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pUserRoleId Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsComments tinyInt,  \n" +
                "    IN pIsCopyImages tinyInt,  \n" +
                "    IN pIsCopyDatasheet tinyInt,  \n" +
                "    IN pIsCopyDocument tinyInt,  \n" +
                "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                "    IN pIsTrackSNumber tinyInt,  \n" +
                "    IN pMfgPNDescription varchar(2000),  \n" +
                "    IN pDetailDescription varchar(2000),  \n" +
                "    IN pInternalReference varchar(50),  \n" +
                "    IN pRoHSStatusID int,  \n" +
                "    IN pIsFluxNotApplicable tinyInt,  \n" +
                "    IN pIsWaterSoluble tinyInt,  \n" +
                "    IN pIsNoClean tinyInt,  \n" +
                "    IN pSpecialNote varchar(2000),  \n" +
                "    IN pRohsDeviation int,  \n" +
                "    IN pFunctionalTypeID int,  \n" +
                "    IN pMountingTypeID int  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vIsCPN tinyint;  \n" +
                "DECLARE vCount INT;  \n" +
                "DECLARE vToPartID INT;  \n" +
                "DECLARE vUserRoleId INT;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE vMessage varchar(200);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  	set vCount = 0;  \n" +
                "    select co.category, m.mfgType, count(co.id), co.isCPN  \n" +
                "      into vFromPartCategory, vFromMfgType, vCount, vIsCPN  \n" +
                "	  from component co  \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                "	 where co.id = pFromPartID and co.isDeleted = 0  \n" +
                "     group by co.category, m.mfgType, co.id, co.isCPN  ;  \n" +
                "  \n" +
                "	if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "		select 'PART_NOT_FOUND' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                "		set pIsAttribute = 1;  \n" +
                "        set pIsAdditionalAttibute = 1;  \n" +
                "    end if;  \n" +
                "  \n" +
                "	set vCount = 0;  \n" +
                "    if (vFromPartCategory = 3) then # check category  \n" +
                "	   select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "          and co.category = 3  \n" +
                "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                "		  and co.rev = pNewPartRev  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null  \n" +
                "	  group by co.mfgcodeID,co.category,co.custAssyPN,co.rev;  \n" +
                "		if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "            select 'DUPLICATE_REV' as message;  \n" +
                "        end if;  \n" +
                "  \n" +
                "         set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName != pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN = pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null  \n" +
                "              group by co.category,co.custAssyPN,co.mfgcodeID;  \n" +
                "		  if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "				where co.nickName != pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null ;  \n" +
                "				 -- limit 1;  \n" +
                "		  end if;  \n" +
                "  \n" +
                "		set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName = pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN != pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null  \n" +
                "			group by co.nickName,co.category,co.mfgcodeID;  \n" +
                "		 if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "				where co.nickName = pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  ;  \n" +
                "		  end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "		  and co.mfgPN = pNewMfgPN  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null  \n" +
                "	  group by co.mfgcodeID,co.mfgPN;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_MFGPN' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.PIDCode = pNewPIDCode  \n" +
                "		  and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null  \n" +
                "          group by co.PIDCode;  \n" +
                "    if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_PID' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                "													'MPNSystemID'  \n" +
                "												else 'SPNSystemID' end,  \n" +
                "											 true);  \n" +
                "		  select systemID, message into vSerialNumber, vMessage  \n" +
                "		  from temp_serialNumber;  \n" +
                "        if vMessage is not null and vMessage != '' then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			select vMessage as message;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                "		-- START TRANSACTION;  \n" +
                "		insert into component(  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart,replacementPartID, partType, category, epicorType, mfgcodeID,  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                operatingTemp,				minOperatingTemp,				maxOperatingTemp,  \n" +
                "				temperatureCoefficient,				temperatureCoefficientValue,				temperatureCoefficientUnit,				connecterTypeID,  \n" +
                "				noOfPosition,				noOfRows,  \n" +
                "				pitch,				pitchMating,				sizeDimension,				length,				width,				heightText,				height,  \n" +
                "				partStatus, leadTime, serialNumber, RoHSStatusID,  \n" +
                "				rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType, isEpoxyMount,  \n" +
                "                scrapValuePerBuild,				scrapRatePercentagePerBuild,				plannedValuePerBuild,				plannedOverRunPercentagePerBuild,				selfLifeDays,  \n" +
                "				shelfLifeAcceptanceDays,				shelfListDaysThresholdPercentage,				maxShelfLifeAcceptanceDays,				maxShelfListDaysThresholdPercentage,  \n" +
                "				shelfLifeDateType,				maxPriceLimit,				maxQtyonHand,				saftyStock,				eau,				businessRisk,				programingRequired,  \n" +
                "                restrictUSEwithpermission,                bomLock,                restrictUsePermanently,  \n" +
                "                tolerance,				voltage,				value,				powerRating,  \n" +
                "				weight,				feature,				color,  \n" +
                "                deviceMarking,				packagingID,  \n" +
                "				minimum,				mult,				packageQty,				umidSPQ,  \n" +
                "                pcbPerArray,                IsReceiveBulkItem)  \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart,replacementPartID, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				pMfgPNDescription, pSpecialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                pFunctionalTypeID,  \n" +
                "                pMountingTypeID,  \n" +
                "                /* Copy in case Attribute  checked*/  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  operatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  minOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  maxOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficient ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientValue ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientUnit ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  connecterTypeID ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfPosition ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfRows ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitch ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitchMating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  sizeDimension ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  length ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  width ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  heightText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  height ELSE null END),  \n" +
                "  \n" +
                "				partStatus,  leadTime, vSerialNumber/*serialNumber*/, pRoHSStatusID,  \n" +
                "				pRohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "                pIsFluxNotApplicable,  \n" +
                "                pIsWaterSoluble,  \n" +
                "                pIsNoClean,  \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1  and pIsCPN = 0) THEN requiredTestTime ELSE null END),  \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsDriveTool = 1 and pIsCPN = 0) THEN driverToolRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1  and pIsCPN = 0) THEN matingPartRquired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsPickupPad = 1  and pIsCPN = 0) THEN pickupPadRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1  and pIsCPN = 0) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                pInternalReference,  \n" +
                "                mfgType,isEpoxyMount,  \n" +
                "  \n" +
                "                /* Copy in case Settings checked*/  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapRatePercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedOverRunPercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  selfLifeDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeDateType ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxPriceLimit ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxQtyonHand ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  saftyStock ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  eau ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  businessRisk ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  programingRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUSEwithpermission ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  bomLock ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUsePermanently ELSE 0 END),  \n" +
                "  \n" +
                "                /* Copy in case Additional Attribute checked*/  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  tolerance ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  voltage ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  `value` ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  powerRating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  weight ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  feature ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  color ELSE null END),  \n" +
                "  \n" +
                "                /* Copy in case Packaging Detail checked*/  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  deviceMarking ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packagingID ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  minimum ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  mult ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packageQty ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  umidSPQ ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  pcbPerArray ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  IsReceiveBulkItem ELSE null END)  \n" +
                "		 from component  \n" +
                "		where id = pFromPartID;  \n" +
                "		set vToPartID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF(vValidationPassed = 1)  \n" +
                "		THEN  \n" +
                "			 set vMessage = '';  \n" +
                "			 CALL Sproc_CopyPartDetailOnCopyAndDuplicatePart(pFromPartID,vToPartID,pUserID,vIsCPN,pIsCPN,vFromPartCategory,pIsStandards,pIsRequiredFunctionalType,pIsRequiredMountingType,pIsPackagingAliasPart,pIsOtherPartName  \n" +
                "				,pIsAlternatePart,pIsRoHSReplacementPart,pIsDriveTool,pIsProcessMaterial,pIsRequiredMattingParts,pIsPickupPad,pIsFunctionalTesingTool,pIsFinctionalRestingEquipment, vMisMatchFields, vMessage);  \n" +
                "  \n" +
                "            IF(vMessage != '')  \n" +
                "			THEN  \n" +
                "				select vMessage as message,vMisMatchFields as misMatchFields;  \n" +
                "			ELSE  \n" +
                "				IF pIsSettings then  \n" +
                "					INSERT INTO `component_temperature_sensitive_data`  \n" +
                "					(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				IF pIsAcceptableShippinCountry then  \n" +
                "					INSERT INTO component_acceptable_shipping_countries  \n" +
                "						(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "						component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				if (vFromPartCategory = 3) then  \n" +
                "					if pIsBOM then  \n" +
                "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                "					end if;  \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                "				end if;  \n" +
                "				if(pIsComments = 1) THEN  \n" +
                "						INSERT INTO componenet_inspection_requirement_det  \n" +
                "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "						INSERT INTO assembly_revision_comments  \n" +
                "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                "							partID = pFromPartID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                "				IF pIsCopyImages  then  \n" +
                "					insert into component_images  \n" +
                "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                "					 from component_images  \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDatasheet  then  \n" +
                "					insert into component_datasheets  \n" +
                "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                "					from component_datasheets  \n" +
                "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsOperationalAttirbutes  then  \n" +
                "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDocument then  \n" +
                "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                "					INSERT INTO generic_folder  \n" +
                "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM generic_folder a  \n" +
                "					WHERE a.refTransID = pFromPartID  \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE generic_folder gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                "  \n" +
                "					INSERT INTO genericfiles  \n" +
                "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE genericfiles gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                "				IF(@documentPathOfFromPart is null)  \n" +
                "				THEN  \n" +
                "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                "				END IF;  \n" +
                "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	end if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-03-2022 *********************************** */
                'INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) ' +
                "VALUES (5982,'2.00','V1',' Main branch changes - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5982:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-03-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_updatePurchaseOrderStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_updatePurchaseOrderStatus`(  \n" +
                "	IN pPOID INT,  \n" +
                "	IN pupdatedBy VARCHAR(100),  \n" +
                "	IN pupdatedRoleID VARCHAR(100),  \n" +
                "	IN pcompleteReason VARCHAR(1000),  \n" +
                "	IN pcompleteType VARCHAR(20),  \n" +
                "	IN pcancellationReason VARCHAR(1000),  \n" +
                "	IN ptype VARCHAR(5),  \n" +
                "	IN pCancellationConfirmed TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF pcompleteReason IS NOT NULL THEN  \n" +
                "		IF ptype = 'C' THEN /* for complete po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='C',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType,lockStatus='RL',updatedAt=fun_DatetimetoUTCDateTime() WHERE id=pPOID;  \n" +
                "			UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='C',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=IFNULL(poLineCompleteReason,pcompleteReason),poLineCompleteType=IFNULL(poLineCompleteType,pcompleteType),updatedAt=fun_DatetimetoUTCDateTime() WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);  \n" +
                "		ELSEIF ptype = 'P' THEN /* for open po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='P',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType,lockStatus='NA',updatedAt=fun_DatetimetoUTCDateTime() WHERE id=pPOID;  \n" +
                "			UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='P',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=IFNULL(poLineCompleteReason,pcompleteReason),poLineCompleteType=IFNULL(poLineCompleteType,pcompleteType),updatedAt=fun_DatetimetoUTCDateTime() WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);  \n" +
                "		END IF;  \n" +
                "	ELSEIF pcancellationReason IS NOT NULL THEN  \n" +
                "		IF ptype = 'C' THEN /* for cancellation po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='CA',CancellationConfirmed=pCancellationConfirmed,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,updatedAt=fun_DatetimetoUTCDateTime(),cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;  \n" +
                "		ELSEIF ptype = 'R' THEN /* for revoke cancellation po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='P',CancellationConfirmed=0,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,updatedAt=fun_DatetimetoUTCDateTime(),cancleReason=pcancellationReason,lockStatus='NA',poCompleteType=pcompleteType WHERE id=pPOID;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5983,'2.00','V1',' Bug 41802: Purchase order: Lock status is not updated while performing undo cancellation operation in PO - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5983:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-03-2022 *********************************** */
                "ALTER TABLE external_partverificationrequest_log MODIFY COLUMN partStatus INT COMMENT '0- Pending,1- Error,2- Sucess';  \n" +
                /* **************************** New Script -> 04-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5984,'2.00','V1',' Alter table external_partverificationrequest_log-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5984:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-03-2022 *********************************** */
                "create table component_bomsetting  \n" +
                "( refComponentID int not null,  \n" +
                "liveVersion varchar(50),  \n" +
                "liveInternalVersion int,  \n" +
                "bomLock	tinyint,  \n" +
                "isActivityStart tinyint(1),  \n" +
                "activityStartBy int,  \n" +
                "activityStartAt datetime,  \n" +
                "activityStopAt datetime,  \n" +
                "isBOMVerified tinyint(1),  \n" +
                "exteranalAPICallStatus int,  \n" +
                "isDeleted tinyint(1) default 0 not null,  \n" +
                "createdBy varchar(255) not null,  \n" +
                "createdAt datetime not null,  \n" +
                "createByRoleId int not null,  \n" +
                "updatedBy varchar(10) ,  \n" +
                "updatedAt datetime,  \n" +
                "updateByRoleId int ,  \n" +
                "deletedBy varchar(255),  \n" +
                "deletedAt datetime,  \n" +
                "deleteByRoleId int,  \n" +
                "constraint PK_component_BOMsetting Primary key(refComponentID),  \n" +
                "constraint fk_component_bomsetting_refcomponentid foreign key (refComponentID) REFERENCES component (id));  \n" +
                "CREATE TRIGGER `Trg_AU_component_Update_Bomsetting` AFTER UPDATE ON `component` FOR EACH ROW  \n" +
                "BEGIN  \n" +
                "declare vCount int;  \n" +
                "	if   ((new.category = 2 and new.iscpn = 1) or (new.category = 3 and  new.iscustom  = 1 )) then  \n" +
                "			if ( Old.liveVersion != new.liveVersion or  \n" +
                "				old.liveInternalVersion != new.liveInternalVersion or  \n" +
                "				old.bomLock != new.bomlock or  \n" +
                "				old.isActivityStart != new.isActivityStart or  \n" +
                "				old.activityStartBy !=  new.activityStartBy or  \n" +
                "				old.activityStartAt != new.activityStartAt or  \n" +
                "				old.activityStopAt != new.activityStopAt or  \n" +
                "				old.isBOMVerified != new.isBOMVerified or  \n" +
                "				old.exteranalAPICallStatus  != new.exteranalAPICallStatus ) then  \n" +
                "  \n" +
                "					select count(1) into vCount from component_bomsetting where refcomponentid  = new.id;  \n" +
                "						if ( vCount = 0 )then  \n" +
                "								insert into  Component_BOMSetting  \n" +
                "											(RefComponentID, 	liveVersion,			liveInternalVersion,  \n" +
                "											bomLock,			isActivityStart,	activityStartBy,  \n" +
                "											activityStartAt,	activityStopAt,isBOMVerified,  \n" +
                "											exteranalAPICallStatus,		isDeleted,  \n" +
                "											createdBy,			createdAt,			createByRoleId  \n" +
                "											)  \n" +
                "									values(new.id, 					new.liveVersion,	new.liveInternalVersion,  \n" +
                "											new.bomLock,			new.isActivityStart,new.activityStartBy,  \n" +
                "											new.activityStartAt,	new.activityStopAt,	new.isBOMVerified,  \n" +
                "											new.exteranalAPICallStatus,new.isDeleted,  \n" +
                "											new.createdBy,			new.createdAt,		new.createByRoleId);  \n" +
                "  \n" +
                "						else  \n" +
                "								update Component_BOMSetting  \n" +
                "									set	liveVersion = new.liveVersion,  \n" +
                "										liveInternalVersion = new.liveInternalVersion,  \n" +
                "										bomLock = new.bomlock,  \n" +
                "										isActivityStart = new.isActivityStart,  \n" +
                "										activityStartBy =  new.activityStartBy,  \n" +
                "										activityStartAt = new.activityStartAt,  \n" +
                "										activityStopAt = new.activityStopAt,  \n" +
                "										isBOMVerified = new.isBOMVerified,  \n" +
                "										exteranalAPICallStatus  = new.exteranalAPICallStatus  \n" +
                "									where refcomponentid = new.id;  \n" +
                "						end if;  \n" +
                "			end if;  \n" +
                "		end if;  \n" +
                "	END ; \n" +
                /* **************************** Add Script Version -> 04-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5985,'2.00','V1',' Create Table component_bomsetting, Trg_AU_component_Update_Bomsetting - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5985:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-03-2022 ******************************************* */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
                "    IN pIsNonCofc TINYINT,  \n" +
                "    IN pEmployeeIDs VARCHAR(16383)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;  \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "	DECLARE attributeSearchChip  VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "    SET v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
                "		SET pInnerQueryWhereClause = ' ';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsNonCofc = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* Non COFc records filter */  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pEmployeeIDs IS NOT NULL AND pEmployeeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND createdBy in (', pEmployeeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "			AND partId IN (SELECT id FROM component WHERE isDeleted = 0 AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		  id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "          uomClassID int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "          cpnMFGCodeID INT DEFAULT NULL,  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,  \n" +
                "          packingSlipNumber VARCHAR(100) DEFAULT NULL,  \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null,  \n" +
                "          isReservedStock TINYINT DEFAULT FALSE,  \n" +
                "          reservedStock VARCHAR(10),  \n" +
                "          custAssyPN varchar(100) DEFAULT NULL  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(		id, 				scanlabel, 			umidPrefix, 			uid,					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType, 					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "                            parentUID, 			mfgcodeID, 			mfg, 					refcompid, 				mfgPN, 					PIDCode,  \n" +
                "                            packageQty, 		mslLevel, 			RoHSStatusID, 			rohsIcon, 				rohsName, 				mfgPNDescription,  \n" +
                "                            spq, 				pkgQty, 			pkgUnit, 				uom, 					uomClassID, 			uomName,  \n" +
                "                            orgPkgUnit, 		orgQty, 			packaginggroupID, 		packaging, 				packagingName, 			printStatus,  \n" +
                "                            tentativePrice, 	costScrapQty, 		costCategoryID, 		costCategory, 			lotCode, 				dateCode,  \n" +
                "                            UMIDrohsStatusID, 	UMIDrohsStatus, 	binID, 					location, 				side, 					warehouseID,  \n" +
                "                            warehouse, 			warehouseType, 		department, 			departmentID, 			fromBin, 				fromBinName,  \n" +
                "                            fromSide, 			fromWarehouse, 		fromWHName, 			fromDepartment, 		fromDepartmentName, 	orgRecBin,  \n" +
                "                            orgRecBinName, 		orgRecWarehouse, 	orgRecWHName, 			orgRecDepartment, 		orgRecDepartmentName, 	expiryDate,  \n" +
                "                            expiredStatus, 		pcbPerArray, 		nickName, 				specialNote, 			isinStk, 				woNumber,  \n" +
                "                            refRestrictUMIDId, 	isUMIDRestrict, 	UMIDRestricted, 		restrictUsePermanently, restrictUSEwithpermission,  \n" +
                "                            restrictPackagingUsePermanently, 		restrictPackagingUseWithpermission, 			reasonUMIDRestricted, 	countOfRestrictUMID,  \n" +
                "                            mountingTypeID, 	mountingTypeName, 	externalPartPackage, 	partPackage, 			internalPartPackage, 	isCustom,  \n" +
                "                            detailDescription, 	pictureCount, 		customerID, 			customer, 				assyID,					assembly,  \n" +
                "                            cpn, 				mfgAvailable, 		customerConsign, 		cpnMFGCodeID, 			cpnMFGCode, 			refCPNMFGPNID,  \n" +
                "                            cpnMFGPN, 			refSupplierPartId, 	supplierMFGCode, 		supplieMFGPN, 			totalScrapUnit, 		perScrapQty,  \n" +
                "                            isTransit, 			searchUser, 		mfrDateCodeFormatID, 	mfrDateCode, 			mfrDateCodeFormat, 		createdAt,  \n" +
                "                            createdBy, 			createdByName, 		createdbyRole, 			createdUserCode, 		createByRoleId, 		updatedAt,  \n" +
                "                            updatedBy, 			umidModifiedBy, 	updatedbyRole, 			updateByRoleId, 		allocatedToKit, 		packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId, 		packingSlipSupplierId, 	packingSlipNumber,		isReservedStock,		reservedStock,  \n" +
                "                            custAssyPN)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
                "                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
                "                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCodeID,			cpnMFGCode, 		 	refCPNMFGPNID,  \n" +
                "                            cpnMFGPN,  			refSupplierPartId,	supplierMFGCode,		supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId,	packingSlipNumber,		isReservedStock,		reservedStock,  \n" +
                "                            custAssyPN  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
                "										WHEN css.receiveMaterialType = 'CP' THEN 'Customer Consigned Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,  \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Incoming Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Move Non-Q2C to Q2C Stock'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Non-UMID Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayStockInventoryType,  \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
                "								fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat ,\") AS mfg,			css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
                "								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
                "                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
                "                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * IFNULL(c.price, 0)), 2) costScrapQty,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * 100), 2) perScrapQty,  \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,  \n" +
                "								fun_GetFormattedMfgCode(cust.mfgCode, cust.mfgName,\", vMfgCodeFormat ,\") AS customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
                "								css.refCPNMFGPNID,	 m_cpn.id cpnMFGCodeID,  \n" +
                "                                fun_GetFormattedMfgCode(m_cpn.mfgCode, m_cpn.mfgName,\", vMfgCodeFormat ,\") AS cpnMFGCode,  \n" +
                "                                cpn_comp.mfgPN cpnMFGPN,  \n" +
                "                                css.refSupplierPartId,  \n" +
                "								fun_GetFormattedMfgCode(m_supp.mfgCode, m_supp.mfgName,\", vMfgCodeFormat ,\") AS supplierMFGCode,  \n" +
                "                                supp_comp.mfgPN supplieMFGPN,  \n" +
                "								(IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0)) totalScrapUnit,  \n" +
                "								null isTransit,  \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,  \n" +
                "								null packingSupplierName,  \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId,  \n" +
                "                                NULL packingSlipNumber,  \n" +
                "                                css.isReservedStock,  \n" +
                "                                IF(css.isReservedStock = 0,'No','Yes') AS reservedStock,		c.custAssyPN  \n" +
                "					FROM 		component_sid_stock css  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)  \n" +
                "						' else '' end),  \n" +
                "					\"  \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case  \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
                "								FROM 		component_sid_stock_history cssh  \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "                   left join (  \n" +
                "								SELECT 		vu.umidid,	SUM((IFNULL(vu.scrappedunit,0) - IFNULL(vu.scrapExpiredUnit,0))) AS kitScrappepUnit  \n" +
                "								FROM 		vu_material_consumption_scrapped_det vu  \n" +
                "                                LEFT JOIN  component_sid_stock_history cssh ON cssh.id = vu.componentSIDStockHistoryID AND cssh.isDeleted = 0  \n" +
                "								WHERE 		vu.scrappedunit > 0  \n" +
                "								GROUP BY 	vu.umidid  \n" +
                "					) vuu on vuu.umidid = css.id  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,  \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "						INNER JOIN	component c ON k.assyID = c.id  \n" +
                "						WHERE 		k.status = 'A'  \n" +
                "						GROUP BY 	k.refUIDId  \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate = fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate BETWEEN fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") AND (fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") + INTERVAL ', pExpiredDay,' DAY ) ')  \n" +
                "									END)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for parent documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
                "										else null  \n" +
                "								  end),  \n" +
                "			t.packingSupplierName = fun_GetFormattedMfgCode(ps.mfgCode, ps.mfgName, vMfgCodeFormat),  \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId,  \n" +
                "            t.packingSlipNumber = ps.packingSlipNumber  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
                "  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t  \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null  \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join date_code_format d on d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data  \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',  \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end);  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \" AND warehouseID) as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT DISTINCT mfgcodeID AS id, mfg AS mfgCodeName from ( \", @vFromSQLQuery, \" AND mfgcodeID ) as mfrDetail\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT DISTINCT packingSlipSupplierId AS id, packingSupplierName AS  mfgCodeName from ( \", @vFromSQLQuery, \" AND packingSlipSupplierId ) as supplierDetail\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5986,'2.00','V1','Bug 42084: [Main Branch] Supplier showing blank in section once applied filters at UMID list page - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5986:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-03-2022 *********************************** */
                "DROP VIEW IF EXISTS `vu_umid_creation_pending`;  \n" +
                "CREATE VIEW `vu_umid_creation_pending` AS  \n" +
                "SELECT  \n" +
                "  `p`.`id`                        AS `packingSlipID`,  \n" +
                "  `p`.`packingSlipNumber`         AS `packingSlipNumber`,  \n" +
                "  `p`.`packingSlipDate`           AS `packingSlipDate`,  \n" +
                "  `p`.`poNumber`                  AS `poNumber`,  \n" +
                "  `p`.`refPurchaseOrderID`        AS `refPurchaseOrderID`,  \n" +
                "  `p`.`mfgCodeID`                 AS `mfgCodeID`,  \n" +
                "  `p`.`packingSlipModeStatus`     AS `packingSlipModeStatus`,  \n" +
                "  `p`.`isNonUMIDStock`            AS `isPackingSlipNonUMIDStock`,  \n" +
                "  `psd`.`umidCreated`             AS `umidCreated`,  \n" +
                "  `psd`.`id`                      AS `packingSlipDetID`,  \n" +
                "  `psd`.`packingSlipSerialNumber` AS `packingSlipSerialNumber`,  \n" +
                "  `psd`.`packagingID`             AS `packagingID`,  \n" +
                "  `psd`.`binID`                   AS `BinID`,  \n" +
                "  `psd`.`warehouseID`             AS `warehouseID`,  \n" +
                "  `psd`.`parentWarehouseID`       AS `parentWarehouseID`,  \n" +
                "  `psd`.`partID`                  AS `PartId`,  \n" +
                "  `psd`.`nickname`                AS `nickname`,  \n" +
                "  `psd`.`receivedQty`             AS `InQty`,  \n" +
                "  `psd`.`umidCreatedQty`          AS `UMIDCreatedQty`,  \n" +
                "  `psd`.`rmaCreatedQty`           AS `returnQty`,  \n" +
                "  ((IFNULL(`psd`.`receivedQty`,0) - IFNULL(`psd`.`umidCreatedQty`,0)) - IFNULL(`psd`.`rmaCreatedQty`,0)) AS `BalanceQty`,  \n" +
                "  `psd`.`receivedStatus`          AS `receivedStatus`,  \n" +
                "  `psd`.`isNonUMIDStock`          AS `isNonUMIDStock`  \n" +
                "FROM (`packing_slip_material_receive` `p`  \n" +
                "   JOIN `packing_slip_material_receive_det` `psd`  \n" +
                "     ON ((`p`.`id` = `psd`.`refPackingSlipMaterialRecID`)))  \n" +
                "WHERE ((`p`.`receiptType` = 'P')  \n" +
                "       AND (`p`.`isDeleted` = 0)  \n" +
                "       AND (`psd`.`binID` IS NOT NULL)  \n" +
                "       AND (`psd`.`isDeleted` = 0)  \n" +
                "       AND (`psd`.`isNonUMIDStock` = 0)  \n" +
                "       AND (`psd`.`umidcreated` = 0));  \n" +
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveDetStock`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveDetStock`(  \n" +
                "	IN pRMADetailLineId INT,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pPackingSlipDetailId INT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pPackagingId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "			SELECT 	MAX(pds.id) stockId,  \n" +
                "					'PU' AS `type`,  \n" +
                "					'Pending UMID' AS `typeValue`,  \n" +
                "					NULL umidId,  \n" +
                "					NULL umid,  \n" +
                "					vu.PartId partId,  \n" +
                "					vu.packagingID packagingId,  \n" +
                "					NULL receiveMaterialType,  \n" +
                "					vu.inQty receivedQty,  \n" +
                "                    vu.balanceQty availableQty,  \n" +
                "					IFNULL(pds.qty,0) shipmentQty,  \n" +
                "					vu.BinID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(vu.BinID) parentWarehouseName,  \n" +
                "					0 availableQtyAtRMA,  \n" +
                "					0 availableUnitAtRMA,  \n" +
                "					vu.receivedStatus,  \n" +
                "					vu.packingSlipSerialNumber  \n" +
                "			FROM (SELECT `p`.`id`                        AS `packingSlipID`,  \n" +
                "						 `psd`.`id`                      AS `packingSlipDetID`,  \n" +
                "						  `p`.`packingSlipNumber`         AS `packingSlipNumber`,  \n" +
                "						  `psd`.`packingSlipSerialNumber` AS `packingSlipSerialNumber`,  \n" +
                "						  `psd`.`packagingID`             AS `packagingID`,  \n" +
                "						  `psd`.`binID`                   AS `BinID`,  \n" +
                "						  `psd`.`partID`                  AS `PartId`,  \n" +
                "						  `psd`.`receivedQty`             AS `InQty`,  \n" +
                "						  ((IFNULL(`psd`.`receivedQty`,0) - IFNULL(`psd`.`umidCreatedQty`,0)) - IFNULL(`psd`.`rmaCreatedQty`,0)) AS `BalanceQty`,  \n" +
                "						  `psd`.`receivedStatus`          AS `receivedStatus`,  \n" +
                "						  `psd`.`isNonUMIDStock`          AS `isNonUMIDStock`  \n" +
                "						FROM `packing_slip_material_receive` `p`  \n" +
                "						JOIN `packing_slip_material_receive_det` `psd` ON `p`.`id` = `psd`.`refPackingSlipMaterialRecID`  \n" +
                "						WHERE `p`.`receiptType` = 'P'  \n" +
                "							AND `p`.`isDeleted` = 0  \n" +
                "							AND `psd`.`binID` IS NOT NULL  \n" +
                "							AND `psd`.`isDeleted` = 0  \n" +
                "							AND `psd`.`isNonUMIDStock` = 0) vu  \n" +
                "			LEFT JOIN 	packing_slip_material_receive_det_stock pds ON pds.refPackingSlipId = vu.packingSlipID  \n" +
                "								AND pds.packagingId = vu.packagingID  \n" +
                "								AND pds.partId = vu.PartId  \n" +
                "								AND pds.isDeleted = 0  \n" +
                "								AND pds.type = 'PU'  \n" +
                "								AND (CASE WHEN pRMADetailLineId IS NOT NULL THEN pds.refRMADetailId = pRMADetailLineId ELSE pds.refRMADetailId IS NULL END)  \n" +
                "			LEFT JOIN 	binmst b ON b.id = vu.BinID  \n" +
                "			WHERE 		vu.packingSlipID = pPackingSlipId  \n" +
                "						AND vu.packagingID = pPackagingId  \n" +
                "						AND vu.partID = pPartId  \n" +
                "                        AND b.isDeleted = 0  \n" +
                "						AND (CASE WHEN pPackingSlipDetailId IS NOT NULL THEN vu.packingSlipDetID = pPackingSlipDetailId ELSE 1 = 1 END)  \n" +
                "			GROUP BY vu.PartId, vu.packagingID, vu.inQty, vu.balanceQty, IFNULL(pds.qty,0), vu.BinID, b.name, b.WarehouseID, vu.receivedStatus, vu.packingSlipSerialNumber  \n" +
                "			having sum(vu.balanceQty) > 0 or MAX(pds.id) is not null  \n" +
                "			UNION  ALL  \n" +
                "	SELECT a.* FROM (  \n" +
                "			SELECT 		cp.id stockId,  \n" +
                "					cp.type AS `type`,  \n" +
                "					'UMID' AS `typeValue`,  \n" +
                "					c.id umidId,  \n" +
                "					c.uid umid,  \n" +
                "					c.refcompid partId,  \n" +
                "					c.packaging packagingId,  \n" +
                "					c.receiveMaterialType,  \n" +
                "					pd.receivedQty receivedQty,  \n" +
                "					c.pkgQty availableQty,  \n" +
                "					cp.qty shipmentQty,  \n" +
                "					c.binID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "					cp.availableQtyAtRMA,  \n" +
                "					cp.availableUnitAtRMA,  \n" +
                "					pd.receivedStatus,  \n" +
                "					pd.packingSlipSerialNumber  \n" +
                "			FROM 		packing_slip_material_receive_det_stock cp  \n" +
                "			INNER JOIN 	component_sid_stock c ON c.id = cp.refSidId  \n" +
                "			INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetId  \n" +
                "			INNER JOIN 	binmst b ON b.id = c.binId  \n" +
                "			WHERE 		cp.refPackingSlipDetId = pPackingSlipDetailId AND cp.refRMADetailid = pRMADetailLineId  \n" +
                "						AND cp.type = 'U'  \n" +
                "						AND cp.isDeleted = 0  \n" +
                "						AND c.isDeleted = 0  \n" +
                "						AND pd.isDeleted = 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "			/*GROUP BY cp.refSidId  removed because refSidID means umidid and records are unique for refSidId */  \n" +
                "			UNION  ALL  \n" +
                "			SELECT 		NULL stockId,  \n" +
                "					'U' AS `type`,  \n" +
                "					'UMID' AS `typeValue`,  \n" +
                "					c.id umidId,  \n" +
                "					c.uid umid,  \n" +
                "					c.refcompid partId,  \n" +
                "					c.packaging packagingId,  \n" +
                "					c.receiveMaterialType,  \n" +
                "					pd.receivedQty receivedQty,  \n" +
                "					c.pkgQty availableQty,  \n" +
                "					0 shipmentQty,  \n" +
                "					c.binID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "					c.pkgQty availableQtyAtRMA,  \n" +
                "					c.pkgUnit availableUnitAtRMA,  \n" +
                "					pd.receivedStatus,  \n" +
                "					pd.packingSlipSerialNumber  \n" +
                "			FROM 		component_sid_stock_packing_detail cp  \n" +
                "			INNER JOIN 	component_sid_stock c ON c.id = cp.refComponentSidStockID  \n" +
                "			INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID  \n" +
                "			INNER JOIN 	binmst b ON b.id = c.binID  \n" +
                "			WHERE 		c.pkgQty > 0  \n" +
                "						AND cp.refPackingSlipDetailID = pPackingSlipDetailId  \n" +
                "						AND cp.isDeleted = 0  \n" +
                "						AND c.isDeleted = 0  \n" +
                "						AND pd.isDeleted = 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "			/*GROUP BY cp.refComponentSidStockID  */  \n" +
                "		) as a /*GROUP BY umidId*/  \n" +
                "        ;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5987,'2.00','V1','code refactor of vu_umid_creation_pending and Sproc_RetrivePackingSlipMaterialReceiveDetStock - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5987:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-03-2022 *********************************** */
                "CREATE or replace VIEW `vu_component_mpn` AS  \n" +
                "    SELECT  \n" +
                "        `c`.`id` AS `id`,  \n" +
                "        `c`.`imageURL` AS `imageURL`,  \n" +
                "        `c`.`mfgPN` AS `mfgPN`,  \n" +
                "        `c`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `c`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "        `c`.`packageQty` AS `packageQty`,  \n" +
                "        `c`.`partStatus` AS `partStatus`,  \n" +
                "        `c`.`ltbDate` AS `ltbDate`,  \n" +
                "        `c`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `c`.`packaginggroupID` AS `packaginggroupID`,  \n" +
                "        `c`.`isDeleted` AS `isDeleted`,  \n" +
                "        `c`.`createdBy` AS `createdBy`,  \n" +
                "        `c`.`createdAt` AS `createdAt`,  \n" +
                "        `c`.`updatedBy` AS `updatedBy`,  \n" +
                "        `c`.`updatedAt` AS `updatedAt`,  \n" +
                "        `c`.`deletedBy` AS `deletedBy`,  \n" +
                "        `c`.`deletedAt` AS `deletedAt`,  \n" +
                "        `c`.`PIDCode` AS `PIDCode`,  \n" +
                "        `c`.`isGoodPart` AS `isGoodPart`,  \n" +
                "        `c`.`rohsgroupID` AS `rohsgroupID`,  \n" +
                "        `c`.`leadTime` AS `leadTime`,  \n" +
                "        `c`.`packaging` AS `packaging`,  \n" +
                "        `c`.`noOfPosition` AS `noOfPosition`,  \n" +
                "        `c`.`countryOfOrigin` AS `countryOfOrigin`,  \n" +
                "        `c`.`uom` AS `uom`,  \n" +
                "        `c`.`mountingTypeID` AS `mountingTypeID`,  \n" +
                "        `c`.`partPackage` AS `partPackage`,  \n" +
                "        `c`.`deviceMarking` AS `deviceMarking`,  \n" +
                "        `c`.`minimum` AS `minimum`,  \n" +
                "        `c`.`mult` AS `mult`,  \n" +
                "        `c`.`uomText` AS `uomText`,  \n" +
                "        `c`.`htsCode` AS `htsCode`,  \n" +
                "        `c`.`category` AS `category`,  \n" +
                "        `c`.`rohsText` AS `rohsText`,  \n" +
                "        `c`.`dataSheetLink` AS `dataSheetLink`,  \n" +
                "        `c`.`replacementPartID` AS `replacementPartID`,  \n" +
                "        `c`.`eolDate` AS `eolDate`,  \n" +
                "        `c`.`value` AS `value`,  \n" +
                "        `c`.`tolerance` AS `tolerance`,  \n" +
                "        `c`.`minOperatingTemp` AS `minOperatingTemp`,  \n" +
                "        `c`.`maxOperatingTemp` AS `maxOperatingTemp`,  \n" +
                "        `c`.`functionalCategoryID` AS `functionalCategoryID`,  \n" +
                "        `c`.`weight` AS `weight`,  \n" +
                "        `c`.`length` AS `length`,  \n" +
                "        `c`.`width` AS `width`,  \n" +
                "        `c`.`height` AS `height`,  \n" +
                "        `c`.`saftyStock` AS `saftyStock`,  \n" +
                "        `c`.`specialNote` AS `specialNote`,  \n" +
                "        `c`.`heightText` AS `heightText`,  \n" +
                "        `c`.`partStatusText` AS `partStatusText`,  \n" +
                "        `c`.`isPIDManual` AS `isPIDManual`,  \n" +
                "        `c`.`feature` AS `feature`,  \n" +
                "        `c`.`functionalCategoryText` AS `functionalCategoryText`,  \n" +
                "        `c`.`mountingTypeText` AS `mountingTypeText`,  \n" +
                "        `c`.`maxPriceLimit` AS `maxPriceLimit`,  \n" +
                "        `c`.`selfLifeDays` AS `selfLifeDays`,  \n" +
                "        `c`.`isCustom` AS `isCustom`,  \n" +
                "        `c`.`rev` AS `rev`,  \n" +
                "        `c`.`mslID` AS `mslID`,  \n" +
                "        `c`.`connecterTypeID` AS `connecterTypeID`,  \n" +
                "        `c`.`connectorTypeText` AS `connectorTypeText`,  \n" +
                "        `c`.`costCategoryID` AS `costCategoryID`,  \n" +
                "        `c`.`maxQtyonHand` AS `maxQtyonHand`,  \n" +
                "        `c`.`noOfRows` AS `noOfRows`,  \n" +
                "        `c`.`powerRating` AS `powerRating`,  \n" +
                "        `c`.`pitch` AS `pitch`,  \n" +
                "        `c`.`pitchMating` AS `pitchMating`,  \n" +
                "        `c`.`scrapRatePercentagePerBuild` AS `scrapRatePercentagePerBuild`,  \n" +
                "        `c`.`plannedOverRunPercentagePerBuild` AS `plannedOverRunPercentagePerBuild`,  \n" +
                "        `c`.`nickName` AS `nickName`,  \n" +
                "        `c`.`restrictUSEwithpermission` AS `restrictUSEwithpermission`,  \n" +
                "        `c`.`operatingTemp` AS `operatingTemp`,  \n" +
                "        `c`.`voltage` AS `voltage`,  \n" +
                "        `c`.`bookValue` AS `bookValue`,  \n" +
                "        `c`.`sizeDimension` AS `sizeDimension`,  \n" +
                "        `c`.`plannedValuePerBuild` AS `plannedValuePerBuild`,  \n" +
                "        `c`.`scrapValuePerBuild` AS `scrapValuePerBuild`,  \n" +
                "        `c`.`restrictUsePermanently` AS `restrictUsePermanently`,  \n" +
                "        `c`.`rfqOnly` AS `rfqOnly`,  \n" +
                "        `c`.`customerID` AS `customerID`,  \n" +
                "        `c`.`eau` AS `eau`,  \n" +
                "        `c`.`assyCode` AS `assyCode`,  \n" +
                "        `c`.`pcbPerArray` AS `pcbPerArray`,  \n" +
                "        `c`.`temperatureCoefficient` AS `temperatureCoefficient`,  \n" +
                "        `c`.`temperatureCoefficientValue` AS `temperatureCoefficientValue`,  \n" +
                "        `c`.`temperatureCoefficientUnit` AS `temperatureCoefficientUnit`,  \n" +
                "        `c`.`isCPN` AS `isCPN`,  \n" +
                "        `c`.`matingPartRquired` AS `matingPartRquired`,  \n" +
                "        `c`.`driverToolRequired` AS `driverToolRequired`,  \n" +
                "        `c`.`pickupPadRequired` AS `pickupPadRequired`,  \n" +
                "        `c`.`programingRequired` AS `programingRequired`,  \n" +
                "        `c`.`functionalTestingRequired` AS `functionalTestingRequired`,  \n" +
                "        `c`.`custAssyPN` AS `custAssyPN`,  \n" +
                "        `c`.`partType` AS `partType`,  \n" +
                "        `c`.`functionalTypePartRequired` AS `functionalTypePartRequired`,  \n" +
                "        `c`.`mountingTypePartRequired` AS `mountingTypePartRequired`,  \n" +
                "        `c`.`shelfListDaysThresholdPercentage` AS `shelfListDaysThresholdPercentage`,  \n" +
                "        `c`.`color` AS `color`,  \n" +
                "        `c`.`refSupplierMfgpnComponentID` AS `refSupplierMfgpnComponentID`,  \n" +
                "        `c`.`businessRisk` AS `businessRisk`,  \n" +
                "        `c`.`packagingID` AS `packagingID`,  \n" +
                "        `c`.`isTemperatureSensitive` AS `isTemperatureSensitive`,  \n" +
                "        `c`.`unit` AS `unit`,  \n" +
                "        `c`.`grossWeight` AS `grossWeight`,  \n" +
                "        `c`.`packagingWeight` AS `packagingWeight`,  \n" +
                "        `c`.`isCloudApiUpdateAttribute` AS `isCloudApiUpdateAttribute`,  \n" +
                "        `c`.`epicorType` AS `epicorType`,  \n" +
                "        `c`.`grossWeightUom` AS `grossWeightUom`,  \n" +
                "        `c`.`packagingWeightUom` AS `packagingWeightUom`,  \n" +
                "        `c`.`price` AS `price`,  \n" +
                "        `c`.`noOfPositionText` AS `noOfPositionText`,  \n" +
                "        `c`.`uomClassID` AS `uomClassID`,  \n" +
                "        `c`.`noOfRowsText` AS `noOfRowsText`,  \n" +
                "        `c`.`rohsDeviation` AS `rohsDeviation`,  \n" +
                "        `c`.`alertExpiryDays` AS `alertExpiryDays`,  \n" +
                "        `c`.`umidVerificationRequire` AS `umidVerificationRequire`,  \n" +
                "        `c`.`totalSolderPoints` AS `totalSolderPoints`,  \n" +
                "        `c`.`trackSerialNumber` AS `trackSerialNumber`,  \n" +
                "        `c`.`restrictPackagingUsePermanently` AS `restrictPackagingUsePermanently`,  \n" +
                "        `c`.`restrictPackagingUseWithpermission` AS `restrictPackagingUseWithpermission`,  \n" +
                "        `c`.`isAutoVerificationOfAllAssemblyParts` AS `isAutoVerificationOfAllAssemblyParts`,  \n" +
                "        `c`.`reversalDate` AS `reversalDate`,  \n" +
                "        `c`.`serialNumber` AS `serialNumber`,  \n" +
                "        `cb`.`bomLock` AS `bomLock`,  \n" +
                "        `cb`.`liveInternalVersion` AS `liveInternalVersion`,  \n" +
                "        `cb`.`exteranalAPICallStatus` AS `exteranalAPICallStatus`,  \n" +
                "        `cb`.`isBOMVerified` AS `isBOMVerified`,  \n" +
                "        `cb`.`liveVersion` AS `liveVersion`,  \n" +
                "        `cb`.`isActivityStart` AS `isActivityStart`,  \n" +
                "        `cb`.`activityStartBy` AS `activityStartBy`,  \n" +
                "        `cb`.`activityStartAt` AS `activityStartAt`,  \n" +
                "        `cb`.`activityStopAt` AS `activityStopAt`,  \n" +
                "        `c`.`systemGenerated` AS `systemGenerated`,  \n" +
                "        `c`.`purchasingComment` AS `purchasingComment`,  \n" +
                "        `c`.`isReversal` AS `isReversal`,  \n" +
                "        `c`.`createByRoleId` AS `createByRoleId`,  \n" +
                "        `c`.`updateByRoleId` AS `updateByRoleId`,  \n" +
                "        `c`.`deleteByRoleId` AS `deleteByRoleId`,  \n" +
                "        `c`.`predictedObsolescenceYear` AS `predictedObsolescenceYear`,  \n" +
                "        `c`.`requiredTestTime` AS `requiredTestTime`,  \n" +
                "        `c`.`partPackageID` AS `partPackageID`,  \n" +
                "        `c`.`detailDescription` AS `detailDescription`,  \n" +
                "        `c`.`documentPath` AS `documentPath`,  \n" +
                "        `c`.`obsoleteDate` AS `obsoleteDate`,  \n" +
                "        `c`.`assemblyType` AS `assemblyType`,  \n" +
                "        `c`.`refMfgPNMfgCodeId` AS `refMfgPNMfgCodeId`,  \n" +
                "        `c`.`productionPN` AS `productionPN`,  \n" +
                "        `c`.`frequency` AS `frequency`,  \n" +
                "        `c`.`isWaterSoluble` AS `isWaterSoluble`,  \n" +
                "        `c`.`isNoClean` AS `isNoClean`,  \n" +
                "        `c`.`mfrNameText` AS `mfrNameText`,  \n" +
                "        `c`.`isFluxNotApplicable` AS `isFluxNotApplicable`,  \n" +
                "        `c`.`isHazmatMaterial` AS `isHazmatMaterial`,  \n" +
                "        `c`.`rfqNumber` AS `rfqNumber`,  \n" +
                "        `c`.`salesacctId` AS `salesacctId`,  \n" +
                "        `c`.`purchaseacctId` AS `purchaseacctId`,  \n" +
                "        `c`.`umidSPQ` AS `umidSPQ`,  \n" +
                "        `c`.`internalReference` AS `internalReference`,  \n" +
                "        `c`.`unqDate` AS `unqDate`,  \n" +
                "        `c`.`shelfLifeAcceptanceDays` AS `shelfLifeAcceptanceDays`,  \n" +
                "        `c`.`maxShelfLifeAcceptanceDays` AS `maxShelfLifeAcceptanceDays`,  \n" +
                "        `c`.`maxShelfListDaysThresholdPercentage` AS `maxShelfListDaysThresholdPercentage`,  \n" +
                "        `c`.`quoteValidTillDate` AS `quoteValidTillDate`,  \n" +
                "        `c`.`shelfLifeDateType` AS `shelfLifeDateType`,  \n" +
                "        `c`.`frequencyType` AS `frequencyType`,  \n" +
                "        `c`.`isReceiveBulkItem` AS `isReceiveBulkItem`,  \n" +
                "        `c`.`mfgType` AS `mfgType`,  \n" +
                "        `c`.`isEpoxyMount` AS `isEpoxyMount`  \n" +
                "    FROM  \n" +
                "        (`component` `c`  \n" +
                "        LEFT JOIN `component_bomsetting` `cb` ON ((`c`.`id` = `cb`.`refComponentID`)))  \n" +
                "    WHERE  \n" +
                "        ((`c`.`mfgType` = 'MFG')  \n" +
                "            AND (`c`.`isDeleted` = 0));  \n" +
                "CREATE or replace VIEW `vu_component` AS  \n" +
                "    SELECT  \n" +
                "        `c`.`id` AS `id`,  \n" +
                "        `c`.`imageURL` AS `imageURL`,  \n" +
                "        `c`.`mfgPN` AS `mfgPN`,  \n" +
                "        `c`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `c`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "        `c`.`packageQty` AS `packageQty`,  \n" +
                "        `c`.`partStatus` AS `partStatus`,  \n" +
                "        `c`.`ltbDate` AS `ltbDate`,  \n" +
                "        `c`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `c`.`packaginggroupID` AS `packaginggroupID`,  \n" +
                "        `c`.`isDeleted` AS `isDeleted`,  \n" +
                "        `c`.`createdBy` AS `createdBy`,  \n" +
                "        `c`.`createdAt` AS `createdAt`,  \n" +
                "        `c`.`updatedBy` AS `updatedBy`,  \n" +
                "        `c`.`updatedAt` AS `updatedAt`,  \n" +
                "        `c`.`deletedBy` AS `deletedBy`,  \n" +
                "        `c`.`deletedAt` AS `deletedAt`,  \n" +
                "        `c`.`PIDCode` AS `PIDCode`,  \n" +
                "        `c`.`isGoodPart` AS `isGoodPart`,  \n" +
                "        `c`.`rohsgroupID` AS `rohsgroupID`,  \n" +
                "        `c`.`leadTime` AS `leadTime`,  \n" +
                "        `c`.`packaging` AS `packaging`,  \n" +
                "        `c`.`noOfPosition` AS `noOfPosition`,  \n" +
                "        `c`.`countryOfOrigin` AS `countryOfOrigin`,  \n" +
                "        `c`.`uom` AS `uom`,  \n" +
                "        `c`.`mountingTypeID` AS `mountingTypeID`,  \n" +
                "        `c`.`partPackage` AS `partPackage`,  \n" +
                "        `c`.`deviceMarking` AS `deviceMarking`,  \n" +
                "        `c`.`minimum` AS `minimum`,  \n" +
                "        `c`.`mult` AS `mult`,  \n" +
                "        `c`.`uomText` AS `uomText`,  \n" +
                "        `c`.`htsCode` AS `htsCode`,  \n" +
                "        `c`.`category` AS `category`,  \n" +
                "        `c`.`rohsText` AS `rohsText`,  \n" +
                "        `c`.`dataSheetLink` AS `dataSheetLink`,  \n" +
                "        `c`.`replacementPartID` AS `replacementPartID`,  \n" +
                "        `c`.`eolDate` AS `eolDate`,  \n" +
                "        `c`.`value` AS `value`,  \n" +
                "        `c`.`tolerance` AS `tolerance`,  \n" +
                "        `c`.`minOperatingTemp` AS `minOperatingTemp`,  \n" +
                "        `c`.`maxOperatingTemp` AS `maxOperatingTemp`,  \n" +
                "        `c`.`functionalCategoryID` AS `functionalCategoryID`,  \n" +
                "        `c`.`weight` AS `weight`,  \n" +
                "        `c`.`length` AS `length`,  \n" +
                "        `c`.`width` AS `width`,  \n" +
                "        `c`.`height` AS `height`,  \n" +
                "        `c`.`saftyStock` AS `saftyStock`,  \n" +
                "        `c`.`specialNote` AS `specialNote`,  \n" +
                "        `c`.`heightText` AS `heightText`,  \n" +
                "        `c`.`partStatusText` AS `partStatusText`,  \n" +
                "        `c`.`isPIDManual` AS `isPIDManual`,  \n" +
                "        `c`.`feature` AS `feature`,  \n" +
                "        `c`.`functionalCategoryText` AS `functionalCategoryText`,  \n" +
                "        `c`.`mountingTypeText` AS `mountingTypeText`,  \n" +
                "        `c`.`maxPriceLimit` AS `maxPriceLimit`,  \n" +
                "        `c`.`selfLifeDays` AS `selfLifeDays`,  \n" +
                "        `c`.`isCustom` AS `isCustom`,  \n" +
                "        `c`.`rev` AS `rev`,  \n" +
                "        `c`.`mslID` AS `mslID`,  \n" +
                "        `c`.`connecterTypeID` AS `connecterTypeID`,  \n" +
                "        `c`.`connectorTypeText` AS `connectorTypeText`,  \n" +
                "        `c`.`costCategoryID` AS `costCategoryID`,  \n" +
                "        `c`.`maxQtyonHand` AS `maxQtyonHand`,  \n" +
                "        `c`.`noOfRows` AS `noOfRows`,  \n" +
                "        `c`.`powerRating` AS `powerRating`,  \n" +
                "        `c`.`pitch` AS `pitch`,  \n" +
                "        `c`.`pitchMating` AS `pitchMating`,  \n" +
                "        `c`.`scrapRatePercentagePerBuild` AS `scrapRatePercentagePerBuild`,  \n" +
                "        `c`.`plannedOverRunPercentagePerBuild` AS `plannedOverRunPercentagePerBuild`,  \n" +
                "        `c`.`nickName` AS `nickName`,  \n" +
                "        `c`.`restrictUSEwithpermission` AS `restrictUSEwithpermission`,  \n" +
                "        `c`.`operatingTemp` AS `operatingTemp`,  \n" +
                "        `c`.`voltage` AS `voltage`,  \n" +
                "        `c`.`bookValue` AS `bookValue`,  \n" +
                "        `c`.`sizeDimension` AS `sizeDimension`,  \n" +
                "        `c`.`plannedValuePerBuild` AS `plannedValuePerBuild`,  \n" +
                "        `c`.`scrapValuePerBuild` AS `scrapValuePerBuild`,  \n" +
                "        `c`.`restrictUsePermanently` AS `restrictUsePermanently`,  \n" +
                "        `c`.`rfqOnly` AS `rfqOnly`,  \n" +
                "        `c`.`customerID` AS `customerID`,  \n" +
                "        `c`.`eau` AS `eau`,  \n" +
                "        `c`.`assyCode` AS `assyCode`,  \n" +
                "        `c`.`pcbPerArray` AS `pcbPerArray`,  \n" +
                "        `c`.`temperatureCoefficient` AS `temperatureCoefficient`,  \n" +
                "        `c`.`temperatureCoefficientValue` AS `temperatureCoefficientValue`,  \n" +
                "        `c`.`temperatureCoefficientUnit` AS `temperatureCoefficientUnit`,  \n" +
                "        `c`.`isCPN` AS `isCPN`,  \n" +
                "        `c`.`matingPartRquired` AS `matingPartRquired`,  \n" +
                "        `c`.`driverToolRequired` AS `driverToolRequired`,  \n" +
                "        `c`.`pickupPadRequired` AS `pickupPadRequired`,  \n" +
                "        `c`.`programingRequired` AS `programingRequired`,  \n" +
                "        `c`.`functionalTestingRequired` AS `functionalTestingRequired`,  \n" +
                "        `c`.`custAssyPN` AS `custAssyPN`,  \n" +
                "        `c`.`partType` AS `partType`,  \n" +
                "        `c`.`functionalTypePartRequired` AS `functionalTypePartRequired`,  \n" +
                "        `c`.`mountingTypePartRequired` AS `mountingTypePartRequired`,  \n" +
                "        `c`.`shelfListDaysThresholdPercentage` AS `shelfListDaysThresholdPercentage`,  \n" +
                "        `c`.`color` AS `color`,  \n" +
                "        `c`.`refSupplierMfgpnComponentID` AS `refSupplierMfgpnComponentID`,  \n" +
                "        `c`.`businessRisk` AS `businessRisk`,  \n" +
                "        `c`.`packagingID` AS `packagingID`,  \n" +
                "        `c`.`isTemperatureSensitive` AS `isTemperatureSensitive`,  \n" +
                "        `c`.`unit` AS `unit`,  \n" +
                "        `c`.`grossWeight` AS `grossWeight`,  \n" +
                "        `c`.`packagingWeight` AS `packagingWeight`,  \n" +
                "        `c`.`isCloudApiUpdateAttribute` AS `isCloudApiUpdateAttribute`,  \n" +
                "        `c`.`epicorType` AS `epicorType`,  \n" +
                "        `c`.`grossWeightUom` AS `grossWeightUom`,  \n" +
                "        `c`.`packagingWeightUom` AS `packagingWeightUom`,  \n" +
                "        `c`.`price` AS `price`,  \n" +
                "        `c`.`noOfPositionText` AS `noOfPositionText`,  \n" +
                "        `c`.`uomClassID` AS `uomClassID`,  \n" +
                "        `c`.`noOfRowsText` AS `noOfRowsText`,  \n" +
                "        `c`.`rohsDeviation` AS `rohsDeviation`,  \n" +
                "        `c`.`alertExpiryDays` AS `alertExpiryDays`,  \n" +
                "        `c`.`umidVerificationRequire` AS `umidVerificationRequire`,  \n" +
                "        `c`.`totalSolderPoints` AS `totalSolderPoints`,  \n" +
                "        `c`.`trackSerialNumber` AS `trackSerialNumber`,  \n" +
                "        `c`.`restrictPackagingUsePermanently` AS `restrictPackagingUsePermanently`,  \n" +
                "        `c`.`restrictPackagingUseWithpermission` AS `restrictPackagingUseWithpermission`,  \n" +
                "        `c`.`isAutoVerificationOfAllAssemblyParts` AS `isAutoVerificationOfAllAssemblyParts`,  \n" +
                "        `c`.`reversalDate` AS `reversalDate`,  \n" +
                "        `c`.`serialNumber` AS `serialNumber`,  \n" +
                "        `cb`.`bomLock` AS `bomLock`,  \n" +
                "        `cb`.`liveInternalVersion` AS `liveInternalVersion`,  \n" +
                "        `cb`.`exteranalAPICallStatus` AS `exteranalAPICallStatus`,  \n" +
                "        `cb`.`isBOMVerified` AS `isBOMVerified`,  \n" +
                "        `cb`.`liveVersion` AS `liveVersion`,  \n" +
                "        `cb`.`isActivityStart` AS `isActivityStart`,  \n" +
                "        `cb`.`activityStartBy` AS `activityStartBy`,  \n" +
                "        `cb`.`activityStartAt` AS `activityStartAt`,  \n" +
                "        `cb`.`activityStopAt` AS `activityStopAt`,  \n" +
                "        `c`.`systemGenerated` AS `systemGenerated`,  \n" +
                "        `c`.`purchasingComment` AS `purchasingComment`,  \n" +
                "        `c`.`isReversal` AS `isReversal`,  \n" +
                "        `c`.`createByRoleId` AS `createByRoleId`,  \n" +
                "        `c`.`updateByRoleId` AS `updateByRoleId`,  \n" +
                "        `c`.`deleteByRoleId` AS `deleteByRoleId`,  \n" +
                "        `c`.`predictedObsolescenceYear` AS `predictedObsolescenceYear`,  \n" +
                "        `c`.`requiredTestTime` AS `requiredTestTime`,  \n" +
                "        `c`.`partPackageID` AS `partPackageID`,  \n" +
                "        `c`.`detailDescription` AS `detailDescription`,  \n" +
                "        `c`.`documentPath` AS `documentPath`,  \n" +
                "        `c`.`obsoleteDate` AS `obsoleteDate`,  \n" +
                "        `c`.`assemblyType` AS `assemblyType`,  \n" +
                "        `c`.`refMfgPNMfgCodeId` AS `refMfgPNMfgCodeId`,  \n" +
                "        `c`.`productionPN` AS `productionPN`,  \n" +
                "        `c`.`frequency` AS `frequency`,  \n" +
                "        `c`.`isWaterSoluble` AS `isWaterSoluble`,  \n" +
                "        `c`.`isNoClean` AS `isNoClean`,  \n" +
                "        `c`.`mfrNameText` AS `mfrNameText`,  \n" +
                "        `c`.`isFluxNotApplicable` AS `isFluxNotApplicable`,  \n" +
                "        `c`.`isHazmatMaterial` AS `isHazmatMaterial`,  \n" +
                "        `c`.`rfqNumber` AS `rfqNumber`,  \n" +
                "        `c`.`salesacctId` AS `salesacctId`,  \n" +
                "        `c`.`purchaseacctId` AS `purchaseacctId`,  \n" +
                "        `c`.`umidSPQ` AS `umidSPQ`,  \n" +
                "        `c`.`internalReference` AS `internalReference`,  \n" +
                "        `c`.`unqDate` AS `unqDate`,  \n" +
                "        `c`.`shelfLifeAcceptanceDays` AS `shelfLifeAcceptanceDays`,  \n" +
                "        `c`.`maxShelfLifeAcceptanceDays` AS `maxShelfLifeAcceptanceDays`,  \n" +
                "        `c`.`maxShelfListDaysThresholdPercentage` AS `maxShelfListDaysThresholdPercentage`,  \n" +
                "        `c`.`quoteValidTillDate` AS `quoteValidTillDate`,  \n" +
                "        `c`.`shelfLifeDateType` AS `shelfLifeDateType`,  \n" +
                "        `c`.`frequencyType` AS `frequencyType`,  \n" +
                "        `c`.`isReceiveBulkItem` AS `isReceiveBulkItem`,  \n" +
                "        `c`.`mfgType` AS `mfgType`,  \n" +
                "        `c`.`isEpoxyMount` AS `isEpoxyMount`  \n" +
                "    FROM  \n" +
                "        (`component` `c`  \n" +
                "        LEFT JOIN `component_bomsetting` `cb` ON ((`c`.`id` = `cb`.`refComponentID`)));  \n" +
                /* **************************** Add Script Version -> 04-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5988,'2.00','V1',' created view vu_component,vu_component_mpn - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5988:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-03-2022 ******************************************* */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
                "    IN pIsNonCofc TINYINT,  \n" +
                "    IN pEmployeeIDs VARCHAR(16383)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;  \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "	DECLARE attributeSearchChip  VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "    SET v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
                "		SET pInnerQueryWhereClause = ' ';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsNonCofc = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* Non COFc records filter */  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pEmployeeIDs IS NOT NULL AND pEmployeeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND createdBy in (', pEmployeeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "			AND partId IN (SELECT id FROM component WHERE isDeleted = 0 AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		  id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "          uomClassID int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "          cpnMFGCodeID INT DEFAULT NULL,  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,  \n" +
                "          packingSlipNumber VARCHAR(100) DEFAULT NULL,  \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null,  \n" +
                "          isReservedStock TINYINT DEFAULT FALSE,  \n" +
                "          reservedStock VARCHAR(10),  \n" +
                "          custAssyPN varchar(100) DEFAULT NULL  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(		id, 				scanlabel, 			umidPrefix, 			uid,					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType, 					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "                            parentUID, 			mfgcodeID, 			mfg, 					refcompid, 				mfgPN, 					PIDCode,  \n" +
                "                            packageQty, 		mslLevel, 			RoHSStatusID, 			rohsIcon, 				rohsName, 				mfgPNDescription,  \n" +
                "                            spq, 				pkgQty, 			pkgUnit, 				uom, 					uomClassID, 			uomName,  \n" +
                "                            orgPkgUnit, 		orgQty, 			packaginggroupID, 		packaging, 				packagingName, 			printStatus,  \n" +
                "                            tentativePrice, 	costScrapQty, 		costCategoryID, 		costCategory, 			lotCode, 				dateCode,  \n" +
                "                            UMIDrohsStatusID, 	UMIDrohsStatus, 	binID, 					location, 				side, 					warehouseID,  \n" +
                "                            warehouse, 			warehouseType, 		department, 			departmentID, 			fromBin, 				fromBinName,  \n" +
                "                            fromSide, 			fromWarehouse, 		fromWHName, 			fromDepartment, 		fromDepartmentName, 	orgRecBin,  \n" +
                "                            orgRecBinName, 		orgRecWarehouse, 	orgRecWHName, 			orgRecDepartment, 		orgRecDepartmentName, 	expiryDate,  \n" +
                "                            expiredStatus, 		pcbPerArray, 		nickName, 				specialNote, 			isinStk, 				woNumber,  \n" +
                "                            refRestrictUMIDId, 	isUMIDRestrict, 	UMIDRestricted, 		restrictUsePermanently, restrictUSEwithpermission,  \n" +
                "                            restrictPackagingUsePermanently, 		restrictPackagingUseWithpermission, 			reasonUMIDRestricted, 	countOfRestrictUMID,  \n" +
                "                            mountingTypeID, 	mountingTypeName, 	externalPartPackage, 	partPackage, 			internalPartPackage, 	isCustom,  \n" +
                "                            detailDescription, 	pictureCount, 		customerID, 			customer, 				assyID,					assembly,  \n" +
                "                            cpn, 				mfgAvailable, 		customerConsign, 		cpnMFGCodeID, 			cpnMFGCode, 			refCPNMFGPNID,  \n" +
                "                            cpnMFGPN, 			refSupplierPartId, 	supplierMFGCode, 		supplieMFGPN, 			totalScrapUnit, 		perScrapQty,  \n" +
                "                            isTransit, 			searchUser, 		mfrDateCodeFormatID, 	mfrDateCode, 			mfrDateCodeFormat, 		createdAt,  \n" +
                "                            createdBy, 			createdByName, 		createdbyRole, 			createdUserCode, 		createByRoleId, 		updatedAt,  \n" +
                "                            updatedBy, 			umidModifiedBy, 	updatedbyRole, 			updateByRoleId, 		allocatedToKit, 		packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId, 		packingSlipSupplierId, 	packingSlipNumber,		isReservedStock,		reservedStock,  \n" +
                "                            custAssyPN)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
                "                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
                "                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCodeID,			cpnMFGCode, 		 	refCPNMFGPNID,  \n" +
                "                            cpnMFGPN,  			refSupplierPartId,	supplierMFGCode,		supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId,	packingSlipNumber,		isReservedStock,		reservedStock,  \n" +
                "                            custAssyPN  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
                "										WHEN css.receiveMaterialType = 'CP' THEN 'Customer Consigned Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,  \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Incoming Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Move Non-Q2C to Q2C Stock'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Non-UMID Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayStockInventoryType,  \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
                "								fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat ,\") AS mfg,			css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
                "								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
                "                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
                "                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * IFNULL(c.price, 0)), 2) costScrapQty,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * 100), 2) perScrapQty,  \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,  \n" +
                "								fun_GetFormattedMfgCode(cust.mfgCode, cust.mfgName,\", vMfgCodeFormat ,\") AS customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
                "								css.refCPNMFGPNID,	 m_cpn.id cpnMFGCodeID,  \n" +
                "                                fun_GetFormattedMfgCode(m_cpn.mfgCode, m_cpn.mfgName,\", vMfgCodeFormat ,\") AS cpnMFGCode,  \n" +
                "                                cpn_comp.mfgPN cpnMFGPN,  \n" +
                "                                css.refSupplierPartId,  \n" +
                "								fun_GetFormattedMfgCode(m_supp.mfgCode, m_supp.mfgName,\", vMfgCodeFormat ,\") AS supplierMFGCode,  \n" +
                "                                supp_comp.mfgPN supplieMFGPN,  \n" +
                "								(IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0)) totalScrapUnit,  \n" +
                "								null isTransit,  \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,  \n" +
                "								null packingSupplierName,  \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId,  \n" +
                "                                NULL packingSlipNumber,  \n" +
                "                                css.isReservedStock,  \n" +
                "                                IF(css.isReservedStock = 0,'No','Yes') AS reservedStock,		c.custAssyPN  \n" +
                "					FROM 		component_sid_stock css  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)  \n" +
                "						' else '' end),  \n" +
                "					\"  \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case  \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
                "								FROM 		component_sid_stock_history cssh  \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "                   left join (  \n" +
                "								SELECT 		vu.umidid,	SUM((IFNULL(vu.scrappedunit,0) - IFNULL(vu.scrapExpiredUnit,0))) AS kitScrappepUnit  \n" +
                "								FROM 		vu_material_consumption_scrapped_det vu  \n" +
                "                                LEFT JOIN  component_sid_stock_history cssh ON cssh.id = vu.componentSIDStockHistoryID AND cssh.isDeleted = 0  \n" +
                "								WHERE 		vu.scrappedunit > 0  \n" +
                "								GROUP BY 	vu.umidid  \n" +
                "					) vuu on vuu.umidid = css.id  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,  \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "						INNER JOIN	component c ON k.assyID = c.id  \n" +
                "						WHERE 		k.status = 'A'  \n" +
                "						GROUP BY 	k.refUIDId  \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate = fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate BETWEEN fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") AND (fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") + INTERVAL ', pExpiredDay,' DAY ) ')  \n" +
                "									END)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for parent documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
                "										else null  \n" +
                "								  end),  \n" +
                "			t.packingSupplierName = fun_GetFormattedMfgCode(ps.mfgCode, ps.mfgName, vMfgCodeFormat),  \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId,  \n" +
                "            t.packingSlipNumber = ps.packingSlipNumber  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
                "  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t  \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null  \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join datecodeformatmst d on d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data  \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',  \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end);  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \" AND warehouseID) as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT DISTINCT mfgcodeID AS id, mfg AS mfgCodeName from ( \", @vFromSQLQuery, \" AND mfgcodeID ) as mfrDetail\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT DISTINCT packingSlipSupplierId AS id, packingSupplierName AS  mfgCodeName from ( \", @vFromSQLQuery, \" AND packingSlipSupplierId ) as supplierDetail\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5989,'2.00','V1','Bug 42084: [Main Branch] Supplier showing blank in section once applied filters at UMID list page - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5989:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-03-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pSupplierIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "    IN pRefPaymentMode VARCHAR(2),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10),  \n" +
                "    IN pPaymentComments VARCHAR(1000),  \n" +
                "    IN pInvoiceAmount VARCHAR(50),  \n" +
                "    IN pExactInvoiceAmountSearch TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPaymentComments IS NOT NULL AND pPaymentComments != '')THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" AND remark LIKE '%\",pPaymentComments,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" AND lockStatus = '\", pLockStatusFilter ,\"'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "			EXISTS (select 1  \n" +
                "					   from packing_slip_material_receive psd  \n" +
                "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "					  where psd.isDeleted = 0  \n" +
                "						and pdet.refPayementid = inv.id  \n" +
                "						AND (', CASE WHEN pRefPaymentMode = 'P' THEN  CONCAT(\"psd.invoiceNumber = '\",pInvoiceNumber,\"'\") ELSE  CONCAT(\"psd.creditMemoNumber = '\",pInvoiceNumber,\"' or psd.debitMemoNumber= '\",pInvoiceNumber,\"'\") END, ')  \n" +
                "				)'  \n" +
                "		);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL OR pAmount = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pInvoiceAmount IS NOT NULL OR pInvoiceAmount = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceAmount ',CASE WHEN pExactInvoiceAmountSearch = TRUE THEN CONCAT(\" = '\", pInvoiceAmount ,\"' \") ELSE CONCAT(\" like '%\", pInvoiceAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pFromDate IS NOT NULL AND pToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.poDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.receiptDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.packingSlipDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.poDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.receiptDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.packingSlipDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.invoiceDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate = '\",pFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"  \n" +
                "		SELECT		inv.id,  \n" +
                "				inv.systemId,  \n" +
                "				inv.mfgcodeID,  \n" +
                "				m.mfgCode supplier,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') supplierCodeName,  \n" +
                "				inv.isPaymentVoided,  \n" +
                "				case 	when inv.isPaymentVoided = 0 then  \n" +
                "						'Paid'  \n" +
                "					else  \n" +
                "						'Voided'  \n" +
                "				end isPaymentVoidedConvertedValue,  \n" +
                "				inv.voidPaymentReason,  \n" +
                "				inv.refVoidedPaymentNumber,  \n" +
                "                inv.refVoidedPaymentId,  \n" +
                "                (select c.lockStatus from packingslip_invoice_payment c  \n" +
                "					where c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,  \n" +
                "				inv.paymentNumber,  \n" +
                "				inv.bankName,  \n" +
                "				inv.bankAccountNo,  \n" +
                "				inv.paymentType,  \n" +
                "				inv.bankAccountMasID,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				inv.paymentDate,  \n" +
                "				invdet.invoiceAmount,  \n" +
                "				inv.paymentAmount,  \n" +
                "				inv.payToName,  \n" +
                "                fun_getAddressbyIDForCheckPrint(inv.payToAddressID, inv.payToContactPersonID) payToAddress,  \n" +
                "                fun_getAddressbyIDForCheckPrint(inv.billToAddressID, inv.billToContactPersonID) billToAddress,  \n" +
                "                inv.refGencTransModeID,  \n" +
                "                gtm.modeName transactionModeName,  \n" +
                "                gtm.systemGenerated systemGeneratedTransactionMode,  \n" +
                "				inv.accountReference,  \n" +
                "				inv.remark,  \n" +
                "                inv.depositBatchNumber,  \n" +
                "                inv.offsetAmount,  \n" +
                "                inv.acctId,  \n" +
                "                fun_getChartOfAccountsCodeNameByID(inv.acctId) coaName,  \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,  \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,  \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
                "				inv.lockStatus,  \n" +
                "				(case when inv.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when inv.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when inv.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(inv.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM	packingslip_invoice_payment inv  \n" +
                "        join mfgcodemst m ON m.id = inv.mfgcodeID  \n" +
                "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID  \n" +
                "        left join generic_transmode_mst gtm ON gtm.id = inv.refGencTransModeID  \n" +
                "		left JOIN (  \n" +
                "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount  \n" +
                "					FROM 		packingslip_invoice_payment_det pid  \n" +
                "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0  \n" +
                "					WHERE 		pid.isDeleted = 0  \n" +
                "                       and		pid.isPaymentVoided = 0  \n" +
                "					GROUP BY 	pid.refPayementid  \n" +
                "				) invdet ON invdet.refPayementid = inv.id  \n" +
                "		WHERE 		inv.isDeleted = 0  \n" +
                "					AND inv.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	-- select @SQLStatement2;  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5990,'2.00','V1',' User Story 41825: [Main Branch] Add Invoice Amount Filter on Supplier Payment List Page - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5990:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-03-2022 *********************************** */
                "CREATE TABLE `component_attributes` (  \n" +
                "  `refComponentID` int NOT NULL,  \n" +
                "  `packaginggroupID` int DEFAULT NULL,  \n" +
                "  `isCloudApiUpdateAttribute` tinyint(1) DEFAULT NULL,  \n" +
                "  `functionalCategoryID` int DEFAULT NULL,  \n" +
                "  `functionalCategoryText` varchar(255) DEFAULT NULL,  \n" +
                "  `mountingTypeID` int DEFAULT NULL,  \n" +
                "  `mountingTypeText` varchar(255) DEFAULT NULL,  \n" +
                "  `isEpoxyMount` tinyint DEFAULT NULL,  \n" +
                "  `partPackageID` int DEFAULT NULL,  \n" +
                "  `partPackage` varchar(200) DEFAULT NULL,  \n" +
                "  `connecterTypeID` int DEFAULT NULL,  \n" +
                "  `connectorTypeText` varchar(100) DEFAULT NULL,  \n" +
                "  `feature` varchar(255) DEFAULT NULL,  \n" +
                "  `noOfPosition` int DEFAULT NULL,  \n" +
                "  `noOfPositionText` varchar(100) DEFAULT NULL,  \n" +
                "  `noOfRows` int DEFAULT NULL,  \n" +
                "  `noOfRowsText` varchar(100) DEFAULT NULL,  \n" +
                "  `operatingTemp` varchar(50) DEFAULT NULL,  \n" +
                "  `minOperatingTemp` decimal(18,6) DEFAULT NULL,  \n" +
                "  `maxOperatingTemp` decimal(18,6) DEFAULT NULL,  \n" +
                "  `temperatureCoefficient` varchar(100) DEFAULT NULL,  \n" +
                "  `temperatureCoefficientValue` decimal(10,2) DEFAULT NULL,  \n" +
                "  `temperatureCoefficientUnit` varchar(50) DEFAULT NULL,  \n" +
                "  `pitch` varchar(50) DEFAULT NULL,  \n" +
                "  `pitchMating` varchar(50) DEFAULT NULL,  \n" +
                "  `sizeDimension` varchar(150) DEFAULT NULL,  \n" +
                "  `length` decimal(10,5) DEFAULT NULL,  \n" +
                "  `width` decimal(10,5) DEFAULT NULL,  \n" +
                "  `height` decimal(10,5) DEFAULT NULL,  \n" +
                "  `heightText` varchar(50) DEFAULT NULL,  \n" +
                "  `tolerance` varchar(50) DEFAULT NULL,  \n" +
                "  `voltage` varchar(50) DEFAULT NULL,  \n" +
                "  `value` varchar(50) DEFAULT NULL,  \n" +
                "  `powerRating` varchar(50) DEFAULT NULL,  \n" +
                "  `weight` varchar(50) DEFAULT NULL,  \n" +
                "  `color` varchar(100) DEFAULT NULL,  \n" +
                "  `isTemperatureSensitive` tinyint(1) DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL,  \n" +
                "  `createByRoleId` int NOT NULL,  \n" +
                "  `updatedBy` varchar(10) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT NULL,  \n" +
                "  `updateByRoleId` int DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`refComponentID`),  \n" +
                "  KEY `fk_component_attribute_functionalCategoryID` (`functionalCategoryID`),  \n" +
                "  KEY `fk_component_attribute_mountingTypeID` (`mountingTypeID`),  \n" +
                "  KEY `fk_component_attribute_partPackageID` (`partPackageID`),  \n" +
                "  KEY `fk_component_attribute_connecterTypeID` (`connecterTypeID`),  \n" +
                "  CONSTRAINT `fk_component_attribute_connecterTypeID` FOREIGN KEY (`connecterTypeID`) REFERENCES `rfq_connectertypemst` (`id`),  \n" +
                "  CONSTRAINT `fk_component_attribute_functionalCategoryID` FOREIGN KEY (`functionalCategoryID`) REFERENCES `rfq_parttypemst` (`id`),  \n" +
                "  CONSTRAINT `fk_component_attribute_mountingTypeID` FOREIGN KEY (`mountingTypeID`) REFERENCES `rfq_mountingtypemst` (`id`),  \n" +
                "  CONSTRAINT `fk_component_attribute_partPackageID` FOREIGN KEY (`partPackageID`) REFERENCES `component_packagingmst` (`id`),  \n" +
                "  CONSTRAINT `fk_component_attribute_refcomponentid` FOREIGN KEY (`refComponentID`) REFERENCES `component` (`id`)  \n" +
                ");  \n" +
                "CREATE TRIGGER Trg_AU_component_Update_attribute AFTER UPDATE ON `component` FOR EACH ROW BEGIN  \n" +
                "declare vCount int ;  \n" +
                "	if   (new.mfgtype = 'MFG' ) then  \n" +
                "  \n" +
                "			if ( old.packaginggroupID  != new.packaginggroupID or			old.isCloudApiUpdateAttribute != new.isCloudApiUpdateAttribute or  \n" +
                "				old.functionalCategoryID != new.functionalCategoryID or		old.functionalCategoryText != new.functionalCategoryText or  \n" +
                "                old.mountingTypeID != new.mountingTypeID or 				old.mountingTypeText != new.mountingTypeText or  \n" +
                "				old.isEpoxyMount != new.isEpoxyMount 	or					old.partPackageID != new.partPackageID or  \n" +
                "				old.partPackage  != new.partPackage  or						old.connecterTypeID != new.connecterTypeID or  \n" +
                "				old.connectorTypeText != new.connectorTypeText or			old.feature != new.feature or  \n" +
                "				old.noOfPosition !=new.noOfPosition or						old.noOfPositionText != new.noOfPositionText or  \n" +
                "				old.noOfRows != new.noOfRows or								old.noOfRowsText != new.noOfRowsText or  \n" +
                "				old.operatingTemp != new.operatingTemp  or					old.minOperatingTemp != new.minOperatingTemp or  \n" +
                "				old.maxOperatingTemp != new.maxOperatingTemp or 			old.temperatureCoefficient != new.temperatureCoefficient or  \n" +
                "				old.temperatureCoefficientValue != new.temperatureCoefficientValue or	old.temperatureCoefficientUnit != new.temperatureCoefficientUnit or  \n" +
                "				old.pitch  != new.pitch  or				old.pitchMating != new.pitchMating  or  old.sizeDimension  != new.sizeDimension  or  \n" +
                "				old.length  != new.length or 			old.width  != new.width or 				old.height  != new.height or  \n" +
                "				old.heightText  != new.heightText  or 	old.tolerance != new.tolerance or 		old.voltage != new.voltage or  \n" +
                "				old.`value`  != new.`value` or 			old.powerRating != new.powerRating or 	old.weight  != new.weight or  \n" +
                "				old.color  != new.color  or 			old.isTemperatureSensitive != new.isTemperatureSensitive ) then  \n" +
                "  \n" +
                "					select count(1) into vCount from component_attributes where refcomponentid  = new.id ;  \n" +
                "						if ( vCount = 0 )then  \n" +
                "								insert into  component_attributes  \n" +
                "											(refComponentID,		packaginggroupID,				isCloudApiUpdateAttribute,	functionalCategoryID,  \n" +
                "                                            functionalCategoryText,	mountingTypeID,					mountingTypeText,			isEpoxyMount,  \n" +
                "                                            partPackageID,			partPackage,					connecterTypeID,			connectorTypeText,  \n" +
                "                                            feature,				noOfPosition,					noOfPositionText,			noOfRows,  \n" +
                "                                            noOfRowsText,			operatingTemp,					minOperatingTemp,			maxOperatingTemp,  \n" +
                "                                            temperatureCoefficient,	temperatureCoefficientValue,	temperatureCoefficientUnit,	pitch,  \n" +
                "                                            pitchMating,			sizeDimension,					length,						width,  \n" +
                "                                            height,					heightText,						tolerance,					voltage,  \n" +
                "                                            `value`,					powerRating,					weight,						color,  \n" +
                "                                            isTemperatureSensitive,	isDeleted,						createdBy,					createdAt,  \n" +
                "                                            createByRoleId  \n" +
                "											)  \n" +
                "									values(new.id, 					new.packaginggroupID,				new.isCloudApiUpdateAttribute,	new.functionalCategoryID,  \n" +
                "                                            new.functionalCategoryText,	new.mountingTypeID,					new.mountingTypeText,			new.isEpoxyMount,  \n" +
                "                                            new.partPackageID,			new.partPackage,					new.connecterTypeID,			new.connectorTypeText,  \n" +
                "                                            new.feature,				new.noOfPosition,					new.noOfPositionText,			new.noOfRows,  \n" +
                "                                            new.noOfRowsText,			new.operatingTemp,					new.minOperatingTemp,			new.maxOperatingTemp,  \n" +
                "                                            new.temperatureCoefficient,	new.temperatureCoefficientValue,	new.temperatureCoefficientUnit,	new.pitch,  \n" +
                "                                            new.pitchMating,			new.sizeDimension,					new.length,						new.width,  \n" +
                "                                            new.height,					new.heightText,						new.tolerance,					new.voltage,  \n" +
                "                                            new.value,					new.powerRating,					new.weight,						new.color,  \n" +
                "                                            new.isTemperatureSensitive,	new.isDeleted,  				new.createdBy,						new.createdAt,  \n" +
                "                                            new.createByRoleId);  \n" +
                "  \n" +
                "						else  \n" +
                "								update component_attributes  \n" +
                "									set	 packaginggroupID  = new.packaginggroupID,			isCloudApiUpdateAttribute = new.isCloudApiUpdateAttribute,  \n" +
                "										functionalCategoryID = new.functionalCategoryID,			functionalCategoryText = new.functionalCategoryText,  \n" +
                "										mountingTypeID = new.mountingTypeID,				mountingTypeText = new.mountingTypeText ,  \n" +
                "										isEpoxyMount = new.isEpoxyMount, 				partPackageID = new.partPackageID,  \n" +
                "										partPackage  = new.partPackage ,			connecterTypeID = new.connecterTypeID ,  \n" +
                "										connectorTypeText = new.connectorTypeText,			feature = new.feature ,  \n" +
                "										noOfPosition =new.noOfPosition,			noOfPositionText = new.noOfPositionText ,  \n" +
                "										noOfRows = new.noOfRows,			noOfRowsText = new.noOfRowsText ,  \n" +
                "										operatingTemp = new.operatingTemp ,			minOperatingTemp = new.minOperatingTemp ,  \n" +
                "										maxOperatingTemp = new.maxOperatingTemp,				temperatureCoefficient = new.temperatureCoefficient ,  \n" +
                "										temperatureCoefficientValue = new.temperatureCoefficientValue,temperatureCoefficientUnit = new.temperatureCoefficientUnit ,  \n" +
                "										pitch  = new.pitch ,pitchMating = new.pitchMating , sizeDimension  = new.sizeDimension ,  \n" +
                "										length  = new.length,width  = new.width,height  = new.height,  \n" +
                "										heightText  = new.heightText ,tolerance = new.tolerance,  \n" +
                "                                        voltage = new.voltage,  \n" +
                "										`value`  = new.`value`,powerRating = new.powerRating,weight  = new.weight ,  \n" +
                "										color  = new.color,  \n" +
                "										isTemperatureSensitive = new.isTemperatureSensitive  \n" +
                "										where refcomponentid = new.id;  \n" +
                "						end if;  \n" +
                "			end if;  \n" +
                "  \n" +
                "		end if;  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 08-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5991,'2.00','V1',' Create Table component_attributes , and trigger Trg_AU_component_Update_attribute   - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5991:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-03-2022 *********************************** */
                "ALTER TABLE `component_attributes` DROP FOREIGN KEY `fk_component_attribute_partPackageID`;  \n" +
                "ALTER TABLE `component_attributes` ;  \n" +
                "ALTER TABLE `component_attributes` RENAME INDEX `fk_component_attribute_partPackageID` TO `fk_component_attribute_partPackageID_idx`;  \n" +
                "ALTER TABLE `component_attributes` ALTER INDEX `fk_component_attribute_partPackageID_idx` VISIBLE;  \n" +
                "ALTER TABLE `component_attributes`  \n" +
                "ADD CONSTRAINT `fk_component_attribute_partPackageID`  \n" +
                "  FOREIGN KEY (`partPackageID`)  \n" +
                "  REFERENCES `rfq_packagecasetypemst` (`id`);  \n" +
                /* **************************** Add Script Version -> 08-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5992,'2.00','V1',' Correct fk in component_attributes table - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5992:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-03-2022 *********************************** */
                "CREATE or replace VIEW `vu_component_mpn` AS  \n" +
                "    SELECT  \n" +
                "        `c`.`id` AS `id`,  \n" +
                "        `c`.`imageURL` AS `imageURL`,  \n" +
                "        `c`.`mfgPN` AS `mfgPN`,  \n" +
                "        `c`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `c`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "        `c`.`packageQty` AS `packageQty`,  \n" +
                "        `c`.`partStatus` AS `partStatus`,  \n" +
                "        `c`.`ltbDate` AS `ltbDate`,  \n" +
                "        `c`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `c`.`isDeleted` AS `isDeleted`,  \n" +
                "        `c`.`createdBy` AS `createdBy`,  \n" +
                "        `c`.`createdAt` AS `createdAt`,  \n" +
                "         `c`.`createByRoleId` AS `createByRoleId`,  \n" +
                "        `c`.`updatedBy` AS `updatedBy`,  \n" +
                "        `c`.`updatedAt` AS `updatedAt`,  \n" +
                "        `c`.`updateByRoleId` AS `updateByRoleId`,  \n" +
                "		`c`.`deletedBy` AS `deletedBy`,  \n" +
                "        `c`.`deletedAt` AS `deletedAt`,  \n" +
                "        `c`.`deleteByRoleId` AS `deleteByRoleId`,  \n" +
                "		`c`.`PIDCode` AS `PIDCode`,  \n" +
                "        `c`.`isGoodPart` AS `isGoodPart`,  \n" +
                "        `c`.`leadTime` AS `leadTime`,  \n" +
                "        `c`.`packaging` AS `packaging`,  \n" +
                "        `c`.`countryOfOrigin` AS `countryOfOrigin`,  \n" +
                "        `c`.`uom` AS `uom`,  \n" +
                "        `c`.`deviceMarking` AS `deviceMarking`,  \n" +
                "        `c`.`minimum` AS `minimum`,  \n" +
                "        `c`.`mult` AS `mult`,  \n" +
                "        `c`.`uomText` AS `uomText`,  \n" +
                "        `c`.`htsCode` AS `htsCode`,  \n" +
                "        `c`.`category` AS `category`,  \n" +
                "        `c`.`rohsText` AS `rohsText`,  \n" +
                "        `c`.`dataSheetLink` AS `dataSheetLink`,  \n" +
                "        `c`.`replacementPartID` AS `replacementPartID`,  \n" +
                "        `c`.`eolDate` AS `eolDate`,  \n" +
                "        `c`.`saftyStock` AS `saftyStock`,  \n" +
                "        `c`.`specialNote` AS `specialNote`,  \n" +
                "        `c`.`partStatusText` AS `partStatusText`,  \n" +
                "        `c`.`isPIDManual` AS `isPIDManual`,  \n" +
                "        `c`.`maxPriceLimit` AS `maxPriceLimit`,  \n" +
                "        `c`.`selfLifeDays` AS `selfLifeDays`,  \n" +
                "        `c`.`isCustom` AS `isCustom`,  \n" +
                "        `c`.`rev` AS `rev`,  \n" +
                "        `c`.`mslID` AS `mslID`,  \n" +
                "        `c`.`costCategoryID` AS `costCategoryID`,  \n" +
                "        `c`.`maxQtyonHand` AS `maxQtyonHand`,  \n" +
                "        `c`.`scrapRatePercentagePerBuild` AS `scrapRatePercentagePerBuild`,  \n" +
                "        `c`.`plannedOverRunPercentagePerBuild` AS `plannedOverRunPercentagePerBuild`,  \n" +
                "        `c`.`nickName` AS `nickName`,  \n" +
                "        `c`.`restrictUSEwithpermission` AS `restrictUSEwithpermission`,  \n" +
                "       `c`.`plannedValuePerBuild` AS `plannedValuePerBuild`,  \n" +
                "        `c`.`scrapValuePerBuild` AS `scrapValuePerBuild`,  \n" +
                "        `c`.`restrictUsePermanently` AS `restrictUsePermanently`,  \n" +
                "        `c`.`rfqOnly` AS `rfqOnly`,  \n" +
                "         `c`.`eau` AS `eau`,  \n" +
                "        `c`.`assyCode` AS `assyCode`,  \n" +
                "        `c`.`pcbPerArray` AS `pcbPerArray`,  \n" +
                "         `c`.`isCPN` AS `isCPN`,  \n" +
                "        `c`.`matingPartRquired` AS `matingPartRquired`,  \n" +
                "        `c`.`driverToolRequired` AS `driverToolRequired`,  \n" +
                "        `c`.`pickupPadRequired` AS `pickupPadRequired`,  \n" +
                "        `c`.`programingRequired` AS `programingRequired`,  \n" +
                "        `c`.`functionalTestingRequired` AS `functionalTestingRequired`,  \n" +
                "        `c`.`custAssyPN` AS `custAssyPN`,  \n" +
                "        `c`.`partType` AS `partType`,  \n" +
                "        `c`.`functionalTypePartRequired` AS `functionalTypePartRequired`,  \n" +
                "        `c`.`mountingTypePartRequired` AS `mountingTypePartRequired`,  \n" +
                "        `c`.`shelfListDaysThresholdPercentage` AS `shelfListDaysThresholdPercentage`,  \n" +
                "        `c`.`refSupplierMfgpnComponentID` AS `refSupplierMfgpnComponentID`,  \n" +
                "        `c`.`businessRisk` AS `businessRisk`,  \n" +
                "        `c`.`packagingID` AS `packagingID`,  \n" +
                "        `c`.`unit` AS `unit`,  \n" +
                "        `c`.`grossWeight` AS `grossWeight`,  \n" +
                "        `c`.`packagingWeight` AS `packagingWeight`,  \n" +
                "        `c`.`epicorType` AS `epicorType`,  \n" +
                "        `c`.`grossWeightUom` AS `grossWeightUom`,  \n" +
                "        `c`.`packagingWeightUom` AS `packagingWeightUom`,  \n" +
                "        `c`.`price` AS `price`,  \n" +
                "        `c`.`uomClassID` AS `uomClassID`,  \n" +
                "        `c`.`rohsDeviation` AS `rohsDeviation`,  \n" +
                "        `c`.`alertExpiryDays` AS `alertExpiryDays`,  \n" +
                "        `c`.`umidVerificationRequire` AS `umidVerificationRequire`,  \n" +
                "        `c`.`totalSolderPoints` AS `totalSolderPoints`,  \n" +
                "        `c`.`trackSerialNumber` AS `trackSerialNumber`,  \n" +
                "        `c`.`restrictPackagingUsePermanently` AS `restrictPackagingUsePermanently`,  \n" +
                "        `c`.`restrictPackagingUseWithpermission` AS `restrictPackagingUseWithpermission`,  \n" +
                "        `c`.`isAutoVerificationOfAllAssemblyParts` AS `isAutoVerificationOfAllAssemblyParts`,  \n" +
                "        `c`.`reversalDate` AS `reversalDate`,  \n" +
                "        `c`.`serialNumber` AS `serialNumber`,  \n" +
                "        ca.packaginggroupID,  \n" +
                "        ca.isCloudApiUpdateAttribute,  \n" +
                "        ca.functionalCategoryID,  \n" +
                "        ca.functionalCategoryText,  \n" +
                "        ca.mountingTypeID,  \n" +
                "        ca.mountingTypeText,  \n" +
                "        ca.isEpoxyMount,  \n" +
                "        ca.partPackageID,  \n" +
                "        ca.partPackage,  \n" +
                "        ca.connecterTypeID,  \n" +
                "        ca.connectorTypeText,  \n" +
                "        ca.feature,  \n" +
                "        ca.noOfPosition,  \n" +
                "        ca.noOfPositionText,  \n" +
                "        ca.noOfRows,  \n" +
                "        ca.noOfRowsText,  \n" +
                "        ca.operatingTemp,  \n" +
                "        ca.minOperatingTemp,  \n" +
                "        ca.maxOperatingTemp,  \n" +
                "        ca.temperatureCoefficient,  \n" +
                "        ca.temperatureCoefficientValue,  \n" +
                "        ca.temperatureCoefficientUnit,  \n" +
                "        ca.pitch,  \n" +
                "        ca.pitchMating,  \n" +
                "        ca.sizeDimension,  \n" +
                "        ca.length,  \n" +
                "        ca.width,  \n" +
                "        ca.height,  \n" +
                "        ca.heightText,  \n" +
                "        ca.tolerance,  \n" +
                "        ca.voltage,  \n" +
                "        ca.`value`,  \n" +
                "        ca.powerRating,  \n" +
                "        ca.weight,  \n" +
                "        ca.color,  \n" +
                "        ca.isTemperatureSensitive,  \n" +
                "        `cb`.`bomLock` AS `bomLock`,  \n" +
                "        `cb`.`liveInternalVersion` AS `liveInternalVersion`,  \n" +
                "        `cb`.`exteranalAPICallStatus` AS `exteranalAPICallStatus`,  \n" +
                "        `cb`.`isBOMVerified` AS `isBOMVerified`,  \n" +
                "        `cb`.`liveVersion` AS `liveVersion`,  \n" +
                "        `cb`.`isActivityStart` AS `isActivityStart`,  \n" +
                "        `cb`.`activityStartBy` AS `activityStartBy`,  \n" +
                "        `cb`.`activityStartAt` AS `activityStartAt`,  \n" +
                "        `cb`.`activityStopAt` AS `activityStopAt`,  \n" +
                "        `c`.`systemGenerated` AS `systemGenerated`,  \n" +
                "        `c`.`purchasingComment` AS `purchasingComment`,  \n" +
                "        `c`.`isReversal` AS `isReversal`,  \n" +
                "         `c`.`predictedObsolescenceYear` AS `predictedObsolescenceYear`,  \n" +
                "        `c`.`requiredTestTime` AS `requiredTestTime`,  \n" +
                "        `c`.`detailDescription` AS `detailDescription`,  \n" +
                "        `c`.`documentPath` AS `documentPath`,  \n" +
                "        `c`.`obsoleteDate` AS `obsoleteDate`,  \n" +
                "        `c`.`assemblyType` AS `assemblyType`,  \n" +
                "        `c`.`refMfgPNMfgCodeId` AS `refMfgPNMfgCodeId`,  \n" +
                "        `c`.`productionPN` AS `productionPN`,  \n" +
                "        `c`.`frequency` AS `frequency`,  \n" +
                "        `c`.`isWaterSoluble` AS `isWaterSoluble`,  \n" +
                "        `c`.`isNoClean` AS `isNoClean`,  \n" +
                "        `c`.`mfrNameText` AS `mfrNameText`,  \n" +
                "        `c`.`isFluxNotApplicable` AS `isFluxNotApplicable`,  \n" +
                "        `c`.`isHazmatMaterial` AS `isHazmatMaterial`,  \n" +
                "        `c`.`rfqNumber` AS `rfqNumber`,  \n" +
                "        `c`.`salesacctId` AS `salesacctId`,  \n" +
                "        `c`.`purchaseacctId` AS `purchaseacctId`,  \n" +
                "        `c`.`umidSPQ` AS `umidSPQ`,  \n" +
                "        `c`.`internalReference` AS `internalReference`,  \n" +
                "        `c`.`unqDate` AS `unqDate`,  \n" +
                "        `c`.`shelfLifeAcceptanceDays` AS `shelfLifeAcceptanceDays`,  \n" +
                "        `c`.`maxShelfLifeAcceptanceDays` AS `maxShelfLifeAcceptanceDays`,  \n" +
                "        `c`.`maxShelfListDaysThresholdPercentage` AS `maxShelfListDaysThresholdPercentage`,  \n" +
                "        `c`.`quoteValidTillDate` AS `quoteValidTillDate`,  \n" +
                "        `c`.`shelfLifeDateType` AS `shelfLifeDateType`,  \n" +
                "        `c`.`frequencyType` AS `frequencyType`,  \n" +
                "        `c`.`isReceiveBulkItem` AS `isReceiveBulkItem`,  \n" +
                "        `c`.`mfgType` AS `mfgType`  \n" +
                "    FROM  \n" +
                "        ( `component` `c`  \n" +
                "        inner join component_attributes ca  on c.id = ca.refcomponentid  \n" +
                "        LEFT JOIN `component_bomsetting` `cb` ON ((`c`.`id` = `cb`.`refComponentID`)))  \n" +
                "   WHERE c.mfgtype = 'MFG' and `ca`.`isDeleted` = 0 ; \n" +
                "CREATE or replace VIEW `vu_component` AS  \n" +
                "   SELECT  \n" +
                "        `c`.`id` AS `id`,  \n" +
                "        `c`.`imageURL` AS `imageURL`,  \n" +
                "        `c`.`mfgPN` AS `mfgPN`,  \n" +
                "        `c`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `c`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "        `c`.`packageQty` AS `packageQty`,  \n" +
                "        `c`.`partStatus` AS `partStatus`,  \n" +
                "        `c`.`ltbDate` AS `ltbDate`,  \n" +
                "        `c`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `c`.`isDeleted` AS `isDeleted`,  \n" +
                "        `c`.`createdBy` AS `createdBy`,  \n" +
                "        `c`.`createdAt` AS `createdAt`,  \n" +
                "         `c`.`createByRoleId` AS `createByRoleId`,  \n" +
                "        `c`.`updatedBy` AS `updatedBy`,  \n" +
                "        `c`.`updatedAt` AS `updatedAt`,  \n" +
                "        `c`.`updateByRoleId` AS `updateByRoleId`,  \n" +
                "		`c`.`deletedBy` AS `deletedBy`,  \n" +
                "        `c`.`deletedAt` AS `deletedAt`,  \n" +
                "        `c`.`deleteByRoleId` AS `deleteByRoleId`,  \n" +
                "		`c`.`PIDCode` AS `PIDCode`,  \n" +
                "        `c`.`isGoodPart` AS `isGoodPart`,  \n" +
                "        `c`.`leadTime` AS `leadTime`,  \n" +
                "        `c`.`packaging` AS `packaging`,  \n" +
                "        `c`.`countryOfOrigin` AS `countryOfOrigin`,  \n" +
                "        `c`.`uom` AS `uom`,  \n" +
                "        `c`.`deviceMarking` AS `deviceMarking`,  \n" +
                "        `c`.`minimum` AS `minimum`,  \n" +
                "        `c`.`mult` AS `mult`,  \n" +
                "        `c`.`uomText` AS `uomText`,  \n" +
                "        `c`.`htsCode` AS `htsCode`,  \n" +
                "        `c`.`category` AS `category`,  \n" +
                "        `c`.`rohsText` AS `rohsText`,  \n" +
                "        `c`.`dataSheetLink` AS `dataSheetLink`,  \n" +
                "        `c`.`replacementPartID` AS `replacementPartID`,  \n" +
                "        `c`.`eolDate` AS `eolDate`,  \n" +
                "        `c`.`saftyStock` AS `saftyStock`,  \n" +
                "        `c`.`specialNote` AS `specialNote`,  \n" +
                "        `c`.`partStatusText` AS `partStatusText`,  \n" +
                "        `c`.`isPIDManual` AS `isPIDManual`,  \n" +
                "        `c`.`maxPriceLimit` AS `maxPriceLimit`,  \n" +
                "        `c`.`selfLifeDays` AS `selfLifeDays`,  \n" +
                "        `c`.`isCustom` AS `isCustom`,  \n" +
                "        `c`.`rev` AS `rev`,  \n" +
                "        `c`.`mslID` AS `mslID`,  \n" +
                "        `c`.`costCategoryID` AS `costCategoryID`,  \n" +
                "        `c`.`maxQtyonHand` AS `maxQtyonHand`,  \n" +
                "        `c`.`scrapRatePercentagePerBuild` AS `scrapRatePercentagePerBuild`,  \n" +
                "        `c`.`plannedOverRunPercentagePerBuild` AS `plannedOverRunPercentagePerBuild`,  \n" +
                "        `c`.`nickName` AS `nickName`,  \n" +
                "        `c`.`restrictUSEwithpermission` AS `restrictUSEwithpermission`,  \n" +
                "       `c`.`plannedValuePerBuild` AS `plannedValuePerBuild`,  \n" +
                "        `c`.`scrapValuePerBuild` AS `scrapValuePerBuild`,  \n" +
                "        `c`.`restrictUsePermanently` AS `restrictUsePermanently`,  \n" +
                "        `c`.`rfqOnly` AS `rfqOnly`,  \n" +
                "         `c`.`eau` AS `eau`,  \n" +
                "        `c`.`assyCode` AS `assyCode`,  \n" +
                "        `c`.`pcbPerArray` AS `pcbPerArray`,  \n" +
                "         `c`.`isCPN` AS `isCPN`,  \n" +
                "        `c`.`matingPartRquired` AS `matingPartRquired`,  \n" +
                "        `c`.`driverToolRequired` AS `driverToolRequired`,  \n" +
                "        `c`.`pickupPadRequired` AS `pickupPadRequired`,  \n" +
                "        `c`.`programingRequired` AS `programingRequired`,  \n" +
                "        `c`.`functionalTestingRequired` AS `functionalTestingRequired`,  \n" +
                "        `c`.`custAssyPN` AS `custAssyPN`,  \n" +
                "        `c`.`partType` AS `partType`,  \n" +
                "        `c`.`functionalTypePartRequired` AS `functionalTypePartRequired`,  \n" +
                "        `c`.`mountingTypePartRequired` AS `mountingTypePartRequired`,  \n" +
                "        `c`.`shelfListDaysThresholdPercentage` AS `shelfListDaysThresholdPercentage`,  \n" +
                "        `c`.`refSupplierMfgpnComponentID` AS `refSupplierMfgpnComponentID`,  \n" +
                "        `c`.`businessRisk` AS `businessRisk`,  \n" +
                "        `c`.`packagingID` AS `packagingID`,  \n" +
                "        `c`.`unit` AS `unit`,  \n" +
                "        `c`.`grossWeight` AS `grossWeight`,  \n" +
                "        `c`.`packagingWeight` AS `packagingWeight`,  \n" +
                "        `c`.`epicorType` AS `epicorType`,  \n" +
                "        `c`.`grossWeightUom` AS `grossWeightUom`,  \n" +
                "        `c`.`packagingWeightUom` AS `packagingWeightUom`,  \n" +
                "        `c`.`price` AS `price`,  \n" +
                "        `c`.`uomClassID` AS `uomClassID`,  \n" +
                "        `c`.`rohsDeviation` AS `rohsDeviation`,  \n" +
                "        `c`.`alertExpiryDays` AS `alertExpiryDays`,  \n" +
                "        `c`.`umidVerificationRequire` AS `umidVerificationRequire`,  \n" +
                "        `c`.`totalSolderPoints` AS `totalSolderPoints`,  \n" +
                "        `c`.`trackSerialNumber` AS `trackSerialNumber`,  \n" +
                "        `c`.`restrictPackagingUsePermanently` AS `restrictPackagingUsePermanently`,  \n" +
                "        `c`.`restrictPackagingUseWithpermission` AS `restrictPackagingUseWithpermission`,  \n" +
                "        `c`.`isAutoVerificationOfAllAssemblyParts` AS `isAutoVerificationOfAllAssemblyParts`,  \n" +
                "        `c`.`reversalDate` AS `reversalDate`,  \n" +
                "        `c`.`serialNumber` AS `serialNumber`,  \n" +
                "        ca.packaginggroupID,  \n" +
                "        ca.isCloudApiUpdateAttribute,  \n" +
                "        ca.functionalCategoryID,  \n" +
                "        ca.functionalCategoryText,  \n" +
                "        ca.mountingTypeID,  \n" +
                "        ca.mountingTypeText,  \n" +
                "        ca.isEpoxyMount,  \n" +
                "        ca.partPackageID,  \n" +
                "        ca.partPackage,  \n" +
                "        ca.connecterTypeID,  \n" +
                "        ca.connectorTypeText,  \n" +
                "        ca.feature,  \n" +
                "        ca.noOfPosition,  \n" +
                "        ca.noOfPositionText,  \n" +
                "        ca.noOfRows,  \n" +
                "        ca.noOfRowsText,  \n" +
                "        ca.operatingTemp,  \n" +
                "        ca.minOperatingTemp,  \n" +
                "        ca.maxOperatingTemp,  \n" +
                "        ca.temperatureCoefficient,  \n" +
                "        ca.temperatureCoefficientValue,  \n" +
                "        ca.temperatureCoefficientUnit,  \n" +
                "        ca.pitch,  \n" +
                "        ca.pitchMating,  \n" +
                "        ca.sizeDimension,  \n" +
                "        ca.length,  \n" +
                "        ca.width,  \n" +
                "        ca.height,  \n" +
                "        ca.heightText,  \n" +
                "        ca.tolerance,  \n" +
                "        ca.voltage,  \n" +
                "        ca.`value`,  \n" +
                "        ca.powerRating,  \n" +
                "        ca.weight,  \n" +
                "        ca.color,  \n" +
                "        ca.isTemperatureSensitive,  \n" +
                "        `cb`.`bomLock` AS `bomLock`,  \n" +
                "        `cb`.`liveInternalVersion` AS `liveInternalVersion`,  \n" +
                "        `cb`.`exteranalAPICallStatus` AS `exteranalAPICallStatus`,  \n" +
                "        `cb`.`isBOMVerified` AS `isBOMVerified`,  \n" +
                "        `cb`.`liveVersion` AS `liveVersion`,  \n" +
                "        `cb`.`isActivityStart` AS `isActivityStart`,  \n" +
                "        `cb`.`activityStartBy` AS `activityStartBy`,  \n" +
                "        `cb`.`activityStartAt` AS `activityStartAt`,  \n" +
                "        `cb`.`activityStopAt` AS `activityStopAt`,  \n" +
                "        `c`.`systemGenerated` AS `systemGenerated`,  \n" +
                "        `c`.`purchasingComment` AS `purchasingComment`,  \n" +
                "        `c`.`isReversal` AS `isReversal`,  \n" +
                "         `c`.`predictedObsolescenceYear` AS `predictedObsolescenceYear`,  \n" +
                "        `c`.`requiredTestTime` AS `requiredTestTime`,  \n" +
                "        `c`.`detailDescription` AS `detailDescription`,  \n" +
                "        `c`.`documentPath` AS `documentPath`,  \n" +
                "        `c`.`obsoleteDate` AS `obsoleteDate`,  \n" +
                "        `c`.`assemblyType` AS `assemblyType`,  \n" +
                "        `c`.`refMfgPNMfgCodeId` AS `refMfgPNMfgCodeId`,  \n" +
                "        `c`.`productionPN` AS `productionPN`,  \n" +
                "        `c`.`frequency` AS `frequency`,  \n" +
                "        `c`.`isWaterSoluble` AS `isWaterSoluble`,  \n" +
                "        `c`.`isNoClean` AS `isNoClean`,  \n" +
                "        `c`.`mfrNameText` AS `mfrNameText`,  \n" +
                "        `c`.`isFluxNotApplicable` AS `isFluxNotApplicable`,  \n" +
                "        `c`.`isHazmatMaterial` AS `isHazmatMaterial`,  \n" +
                "        `c`.`rfqNumber` AS `rfqNumber`,  \n" +
                "        `c`.`salesacctId` AS `salesacctId`,  \n" +
                "        `c`.`purchaseacctId` AS `purchaseacctId`,  \n" +
                "        `c`.`umidSPQ` AS `umidSPQ`,  \n" +
                "        `c`.`internalReference` AS `internalReference`,  \n" +
                "        `c`.`unqDate` AS `unqDate`,  \n" +
                "        `c`.`shelfLifeAcceptanceDays` AS `shelfLifeAcceptanceDays`,  \n" +
                "        `c`.`maxShelfLifeAcceptanceDays` AS `maxShelfLifeAcceptanceDays`,  \n" +
                "        `c`.`maxShelfListDaysThresholdPercentage` AS `maxShelfListDaysThresholdPercentage`,  \n" +
                "        `c`.`quoteValidTillDate` AS `quoteValidTillDate`,  \n" +
                "        `c`.`shelfLifeDateType` AS `shelfLifeDateType`,  \n" +
                "        `c`.`frequencyType` AS `frequencyType`,  \n" +
                "        `c`.`isReceiveBulkItem` AS `isReceiveBulkItem`,  \n" +
                "        `c`.`mfgType` AS `mfgType`  \n" +
                "    FROM  \n" +
                "        ( `component` `c`  \n" +
                "        inner join component_attributes ca on `ca`.`refComponentID`  = case when mfgtype = 'MFG' then `c`.`id` else  c.refSupplierMfgpnComponentID end  \n" +
                "        LEFT JOIN `component_bomsetting` `cb` ON  `cb`.`refComponentID` =  case when mfgtype = 'MFG' then `c`.`id` else  c.refSupplierMfgpnComponentID end )  \n" +
                "   WHERE `ca`.`isDeleted` = 0  ;  \n" +
                "CREATE or replace VIEW `vu_component_spn` AS  \n" +
                "    SELECT  \n" +
                "        `c`.`id` AS `id`,  \n" +
                "        `c`.`imageURL` AS `imageURL`,  \n" +
                "        `c`.`mfgPN` AS `mfgPN`,  \n" +
                "        `c`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `c`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "        `c`.`packageQty` AS `packageQty`,  \n" +
                "        `c`.`partStatus` AS `partStatus`,  \n" +
                "        `c`.`ltbDate` AS `ltbDate`,  \n" +
                "        `c`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `c`.`isDeleted` AS `isDeleted`,  \n" +
                "        `c`.`createdBy` AS `createdBy`,  \n" +
                "        `c`.`createdAt` AS `createdAt`,  \n" +
                "         `c`.`createByRoleId` AS `createByRoleId`,  \n" +
                "        `c`.`updatedBy` AS `updatedBy`,  \n" +
                "        `c`.`updatedAt` AS `updatedAt`,  \n" +
                "        `c`.`updateByRoleId` AS `updateByRoleId`,  \n" +
                "		`c`.`deletedBy` AS `deletedBy`,  \n" +
                "        `c`.`deletedAt` AS `deletedAt`,  \n" +
                "        `c`.`deleteByRoleId` AS `deleteByRoleId`,  \n" +
                "		`c`.`PIDCode` AS `PIDCode`,  \n" +
                "        `c`.`isGoodPart` AS `isGoodPart`,  \n" +
                "        `c`.`leadTime` AS `leadTime`,  \n" +
                "        `c`.`packaging` AS `packaging`,  \n" +
                "        `c`.`countryOfOrigin` AS `countryOfOrigin`,  \n" +
                "        `c`.`uom` AS `uom`,  \n" +
                "        `c`.`deviceMarking` AS `deviceMarking`,  \n" +
                "        `c`.`minimum` AS `minimum`,  \n" +
                "        `c`.`mult` AS `mult`,  \n" +
                "        `c`.`uomText` AS `uomText`,  \n" +
                "        `c`.`htsCode` AS `htsCode`,  \n" +
                "        `c`.`category` AS `category`,  \n" +
                "        `c`.`rohsText` AS `rohsText`,  \n" +
                "        `c`.`dataSheetLink` AS `dataSheetLink`,  \n" +
                "        `c`.`replacementPartID` AS `replacementPartID`,  \n" +
                "        `c`.`eolDate` AS `eolDate`,  \n" +
                "        `c`.`saftyStock` AS `saftyStock`,  \n" +
                "        `c`.`specialNote` AS `specialNote`,  \n" +
                "        `c`.`partStatusText` AS `partStatusText`,  \n" +
                "        `c`.`isPIDManual` AS `isPIDManual`,  \n" +
                "        `c`.`maxPriceLimit` AS `maxPriceLimit`,  \n" +
                "        `c`.`selfLifeDays` AS `selfLifeDays`,  \n" +
                "        `c`.`isCustom` AS `isCustom`,  \n" +
                "        `c`.`rev` AS `rev`,  \n" +
                "        `c`.`mslID` AS `mslID`,  \n" +
                "        `c`.`costCategoryID` AS `costCategoryID`,  \n" +
                "        `c`.`maxQtyonHand` AS `maxQtyonHand`,  \n" +
                "        `c`.`scrapRatePercentagePerBuild` AS `scrapRatePercentagePerBuild`,  \n" +
                "        `c`.`plannedOverRunPercentagePerBuild` AS `plannedOverRunPercentagePerBuild`,  \n" +
                "        `c`.`nickName` AS `nickName`,  \n" +
                "        `c`.`restrictUSEwithpermission` AS `restrictUSEwithpermission`,  \n" +
                "       `c`.`plannedValuePerBuild` AS `plannedValuePerBuild`,  \n" +
                "        `c`.`scrapValuePerBuild` AS `scrapValuePerBuild`,  \n" +
                "        `c`.`restrictUsePermanently` AS `restrictUsePermanently`,  \n" +
                "        `c`.`rfqOnly` AS `rfqOnly`,  \n" +
                "         `c`.`eau` AS `eau`,  \n" +
                "        `c`.`assyCode` AS `assyCode`,  \n" +
                "        `c`.`pcbPerArray` AS `pcbPerArray`,  \n" +
                "         `c`.`isCPN` AS `isCPN`,  \n" +
                "        `c`.`matingPartRquired` AS `matingPartRquired`,  \n" +
                "        `c`.`driverToolRequired` AS `driverToolRequired`,  \n" +
                "        `c`.`pickupPadRequired` AS `pickupPadRequired`,  \n" +
                "        `c`.`programingRequired` AS `programingRequired`,  \n" +
                "        `c`.`functionalTestingRequired` AS `functionalTestingRequired`,  \n" +
                "        `c`.`custAssyPN` AS `custAssyPN`,  \n" +
                "        `c`.`partType` AS `partType`,  \n" +
                "        `c`.`functionalTypePartRequired` AS `functionalTypePartRequired`,  \n" +
                "        `c`.`mountingTypePartRequired` AS `mountingTypePartRequired`,  \n" +
                "        `c`.`shelfListDaysThresholdPercentage` AS `shelfListDaysThresholdPercentage`,  \n" +
                "        `c`.`refSupplierMfgpnComponentID` AS `refSupplierMfgpnComponentID`,  \n" +
                "        `c`.`businessRisk` AS `businessRisk`,  \n" +
                "        `c`.`packagingID` AS `packagingID`,  \n" +
                "        `c`.`unit` AS `unit`,  \n" +
                "        `c`.`grossWeight` AS `grossWeight`,  \n" +
                "        `c`.`packagingWeight` AS `packagingWeight`,  \n" +
                "        `c`.`epicorType` AS `epicorType`,  \n" +
                "        `c`.`grossWeightUom` AS `grossWeightUom`,  \n" +
                "        `c`.`packagingWeightUom` AS `packagingWeightUom`,  \n" +
                "        `c`.`price` AS `price`,  \n" +
                "        `c`.`uomClassID` AS `uomClassID`,  \n" +
                "        `c`.`rohsDeviation` AS `rohsDeviation`,  \n" +
                "        `c`.`alertExpiryDays` AS `alertExpiryDays`,  \n" +
                "        `c`.`umidVerificationRequire` AS `umidVerificationRequire`,  \n" +
                "        `c`.`totalSolderPoints` AS `totalSolderPoints`,  \n" +
                "        `c`.`trackSerialNumber` AS `trackSerialNumber`,  \n" +
                "        `c`.`restrictPackagingUsePermanently` AS `restrictPackagingUsePermanently`,  \n" +
                "        `c`.`restrictPackagingUseWithpermission` AS `restrictPackagingUseWithpermission`,  \n" +
                "        `c`.`isAutoVerificationOfAllAssemblyParts` AS `isAutoVerificationOfAllAssemblyParts`,  \n" +
                "        `c`.`reversalDate` AS `reversalDate`,  \n" +
                "        `c`.`serialNumber` AS `serialNumber`,  \n" +
                "        ca.packaginggroupID,  \n" +
                "        ca.isCloudApiUpdateAttribute,  \n" +
                "        ca.functionalCategoryID,  \n" +
                "        ca.functionalCategoryText,  \n" +
                "        ca.mountingTypeID,  \n" +
                "        ca.mountingTypeText,  \n" +
                "        ca.isEpoxyMount,  \n" +
                "        ca.partPackageID,  \n" +
                "        ca.partPackage,  \n" +
                "        ca.connecterTypeID,  \n" +
                "        ca.connectorTypeText,  \n" +
                "        ca.feature,  \n" +
                "        ca.noOfPosition,  \n" +
                "        ca.noOfPositionText,  \n" +
                "        ca.noOfRows,  \n" +
                "        ca.noOfRowsText,  \n" +
                "        ca.operatingTemp,  \n" +
                "        ca.minOperatingTemp,  \n" +
                "        ca.maxOperatingTemp,  \n" +
                "        ca.temperatureCoefficient,  \n" +
                "        ca.temperatureCoefficientValue,  \n" +
                "        ca.temperatureCoefficientUnit,  \n" +
                "        ca.pitch,  \n" +
                "        ca.pitchMating,  \n" +
                "        ca.sizeDimension,  \n" +
                "        ca.length,  \n" +
                "        ca.width,  \n" +
                "        ca.height,  \n" +
                "        ca.heightText,  \n" +
                "        ca.tolerance,  \n" +
                "        ca.voltage,  \n" +
                "        ca.`value`,  \n" +
                "        ca.powerRating,  \n" +
                "        ca.weight,  \n" +
                "        ca.color,  \n" +
                "        ca.isTemperatureSensitive,  \n" +
                "        `c`.`systemGenerated` AS `systemGenerated`,  \n" +
                "        `c`.`purchasingComment` AS `purchasingComment`,  \n" +
                "        `c`.`isReversal` AS `isReversal`,  \n" +
                "         `c`.`predictedObsolescenceYear` AS `predictedObsolescenceYear`,  \n" +
                "        `c`.`requiredTestTime` AS `requiredTestTime`,  \n" +
                "        `c`.`detailDescription` AS `detailDescription`,  \n" +
                "        `c`.`documentPath` AS `documentPath`,  \n" +
                "        `c`.`obsoleteDate` AS `obsoleteDate`,  \n" +
                "        `c`.`assemblyType` AS `assemblyType`,  \n" +
                "        `c`.`refMfgPNMfgCodeId` AS `refMfgPNMfgCodeId`,  \n" +
                "        `c`.`productionPN` AS `productionPN`,  \n" +
                "        `c`.`frequency` AS `frequency`,  \n" +
                "        `c`.`isWaterSoluble` AS `isWaterSoluble`,  \n" +
                "        `c`.`isNoClean` AS `isNoClean`,  \n" +
                "        `c`.`mfrNameText` AS `mfrNameText`,  \n" +
                "        `c`.`isFluxNotApplicable` AS `isFluxNotApplicable`,  \n" +
                "        `c`.`isHazmatMaterial` AS `isHazmatMaterial`,  \n" +
                "        `c`.`rfqNumber` AS `rfqNumber`,  \n" +
                "        `c`.`salesacctId` AS `salesacctId`,  \n" +
                "        `c`.`purchaseacctId` AS `purchaseacctId`,  \n" +
                "        `c`.`umidSPQ` AS `umidSPQ`,  \n" +
                "        `c`.`internalReference` AS `internalReference`,  \n" +
                "        `c`.`unqDate` AS `unqDate`,  \n" +
                "        `c`.`shelfLifeAcceptanceDays` AS `shelfLifeAcceptanceDays`,  \n" +
                "        `c`.`maxShelfLifeAcceptanceDays` AS `maxShelfLifeAcceptanceDays`,  \n" +
                "        `c`.`maxShelfListDaysThresholdPercentage` AS `maxShelfListDaysThresholdPercentage`,  \n" +
                "        `c`.`quoteValidTillDate` AS `quoteValidTillDate`,  \n" +
                "        `c`.`shelfLifeDateType` AS `shelfLifeDateType`,  \n" +
                "        `c`.`frequencyType` AS `frequencyType`,  \n" +
                "        `c`.`isReceiveBulkItem` AS `isReceiveBulkItem`,  \n" +
                "        `c`.`mfgType` AS `mfgType`  \n" +
                "    FROM  \n" +
                "        ( `component` `c`  \n" +
                "        inner join component_attributes ca  on  ca.refcomponentid =c.refSupplierMfgpnComponentID )  \n" +
                "   WHERE c.mfgtype = 'DIST' and `c`.`isDeleted` = 0 ;  \n" +
                /* **************************** Add Script Version -> 08-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5993,'2.00','V1',' Change view vu_component_mpn,vu_component_spn,vu_component  - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5993:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-03-2022 *********************************** */
                "ALTER TABLE `component`  \n" +
                "ADD INDEX `FK_component_refSupplierMfgpnComponentID_idx` (`refSupplierMfgpnComponentID` ASC) VISIBLE;  \n" +
                "ALTER TABLE `component`  \n" +
                "ADD CONSTRAINT `FK_component_refSupplierMfgpnComponentID`  \n" +
                "  FOREIGN KEY (`refSupplierMfgpnComponentID`)  \n" +
                "  REFERENCES `component` (`id`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version -> 09-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5994,'2.00','V1','add new fk in component - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5994:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-03-2022 *********************************** */
                "update systemconfigrations  \n" +
                "set `description` = 'For Accounting purposes, one of the following formats needs to select in the value field. 1) \"Calendar Year\" or \"Financial Year\". Accordingly system will maintain the financial transactions'  \n" +
                "WHERE `key` = 'AccountingYear' and isdeleted=0;  \n" +
                /* **************************** Add Script Version -> 09-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5995,'2.00','V1',' User Story 41268: Demo Improvement points for Accounting Year related changes in DataKeys given on 01-02-2022 - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5995:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentBalanceAndPastDue` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentBalanceAndPastDue`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pRequestType VARCHAR(5),  \n" +
                "	IN pAgedReceivablesDueAsOfDate DATE ,  \n" +
                "	IN pDueDate DATE ,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT  ,  \n" +
                "	IN pIsIncludeZeroValueInvoices TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	/* pRequestType Aged Receivable - 'AR' , Past Due - 'PD'  */  \n" +
                "	DECLARE vDueDate DATE;  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "  \n" +
                "	IF (pRequestType = 'AR') THEN	/* pRequestType Aged Receivable - 'AR' */  \n" +
                "		SET vDueDate = pAgedReceivablesDueAsOfDate;  \n" +
                "  \n" +
                "	ELSEIF (pRequestType = 'PD') THEN /* Past Due - 'PD' */  \n" +
                "		IF (pTermsAndAboveDays IS NOT NULL) THEN  \n" +
                "			SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;  \n" +
                "			SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "			SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;  \n" +
                "			SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);  \n" +
                "		ELSE  \n" +
                "			SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_balanceDue = CONCAT(\"  \n" +
                "	SELECT  \n" +
                "		temp_aged_details.customerID,  \n" +
                "		fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') AS customerCodeName,  \n" +
                "		temp_aged_details.custCurrTermDays,  \n" +
                "		(SUM(temp_aged_details.invoiceCount) - SUM(temp_aged_details.paidInvoiceCount)) totalInvCount,  \n" +
                "		(SUM(temp_aged_details.unInvoiceCount)) totalUnInvCount,  \n" +
                "		(SUM(temp_aged_details.dratftCreditMemoCount)) totalDraftCreditMemoCount,  \n" +
                "		(SELECT count(1) FROM customer_packingslip WHERE transType='P' AND refCustInvoiceID IS NULL AND isDeleted=0 and customerID=temp_aged_details.customerID) packingSlipNotInvoicedCount,  \n" +
                "		SUM(temp_aged_details.totalDueAmount) totalAmountOfAgedDueReceivable,  \n" +
                "		SUM(temp_aged_details.currentAmount) totalAmountWithinTerms,  \n" +
                "		SUM(temp_aged_details.agedAmountAs0To30) agedAmountAs0To30,  \n" +
                "		SUM(temp_aged_details.agedAmountAs31To60) agedAmountAs31To60,  \n" +
                "		SUM(temp_aged_details.agedAmountAs61To90) agedAmountAs61To90,  \n" +
                "		SUM(temp_aged_details.agedAmountAs91To120) agedAmountAs91To120,  \n" +
                "		SUM(temp_aged_details.agedAmountAs121more) agedAmountAs121More,  \n" +
                "		SUM(temp_aged_details.totalOutstandingAmount) totalOutstandingAmount,  \n" +
                "		SUM(temp_aged_details.totalCreditMemoAmount) totalCreditMemoAmount,  \n" +
                "		SUM(temp_aged_details.totalUnappliedAmount) totalAdjustmentPendingAmount,  \n" +
                "		SUM(temp_aged_details.totalCreditAmount) totalCreditAmount,  \n" +
                "		(SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) totalOutStandingWithoutCreditMemo,  \n" +
                "		SUM(temp_aged_details.totalDraftAmount) totalNotInvoicedAmount,  \n" +
                "		SUM(temp_aged_details.totalRecievedAmount) totalRecievedAmount FROM (  \n" +
                "		SELECT  \n" +
                "				  `cid`.`customerID`                  AS `customerID`,  \n" +
                "				  `cid`.`refCustPackingslipInvoiceID` AS `refCustPackingslipInvoiceID`,  \n" +
                "				  SUM(`cid`.`invoiceCount`)           AS `invoiceCount`,  \n" +
                "				  SUM(`cid`.`unInvoiceCount`)         AS `unInvoiceCount`,  \n" +
                "				  SUM(`cid`.`dratftCreditMemoCount`)  AS `dratftCreditMemoCount`,  \n" +
                "				  -- `cid`.`DocDate`                  AS `DocDate`,  \n" +
                "				  -- `cpt`.`paymentTermsID`           AS `paymentTermsID`,  \n" +
                "				  `cid`.`termsDays`                   AS `termsDays`,  \n" +
                "				  `cpt`.`termsDays`                   AS `custCurrTermDays`,  \n" +
                "				  (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) AS `DueDaysDiff`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 30)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs0To30`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 31) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 60)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs31To60`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 61) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 90)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs61To90`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 91) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 120)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs91To120`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 121) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs121more`,  \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`) , SUM(`cid`.`totalRecievedAmount`) , SUM(`cid`.`totalUnappliedCreditMemoAmount`) , SUM(`cid`.`totalCreditMemoAppliedAmount`),  \n" +
                "				  (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) AS `totalOutstandingAmount`,  \n" +
                "				  -- (CASE WHEN (`cid`.`refCustPackingslipInvoiceID`) IS NOT NULL THEN SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalCreditMemoAmount`) ELSE 0 END) AS `totalOutstandingAmount`,  \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`))  AS `totalCreditMemoAmount`,  \n" +
                "				  SUM(`cid`.`totalUnappliedAmount`)   AS `totalUnappliedAmount`,  \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`) + SUM(`cid`.`totalUnappliedAmount`)) AS `totalCreditAmount`,  \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`)    AS `totalCustomerInvoicedAmount`,  \n" +
                "				  SUM(`cid`.`totalDraftAmount`)       AS `totalDraftAmount`,  \n" +
                "				  SUM(`cid`.`totalRecievedAmount`)    AS `totalRecievedAmount`,  \n" +
                "				  (CASE WHEN ((SUM(`cid`.`totalInvoicedAmount`) <> 0) AND (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`)) = 0) THEN 1 ELSE 0 END) paidInvoiceCount  \n" +
                "                  FROM  \n" +
                "(  \n" +
                "	SELECT  \n" +
                "					 `a`.`customerID`                     AS `customerID`,  \n" +
                "					 `a`.termsDays			      AS `termsDays`,  \n" +
                "					 `a`.`id`                             AS `refCustPackingslipInvoiceID`,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),1,0) AS `invoiceCount`,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),1,0) AS `unInvoiceCount`,  \n" +
                "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '1')),1,0) AS `dratftCreditMemoCount`,  \n" +
                "					IF((`a`.`transType` = 'I'),`a`.`invoiceDate`,`a`.`creditMemoDate`) AS `DocDate`,  \n" +
                "					IFNULL(b.totalCustomerInvoiceReceivedAmount,0)  AS `totalRecievedAmount`,  \n" +
                "					0                                    AS `totalUnappliedAmount`,  \n" +
                "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '2')),(IFNULL(`a`.`totalAmount`,0) + (IFNULL(c.totalCreditMemoAppliedAmount,0) + IFNULL(d.totRefundIssuedAgainstCreditMemo,0))),0) AS `totalUnappliedCreditMemoAmount`,  \n" +
                "					IFNULL(c.totalCreditMemoAppliedAmount, 0) AS totalCreditMemoAppliedAmount,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalInvoicedAmount`,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalDraftAmount`  \n" +
                "                       FROM `customer_packingslip` `a`  \n" +
                "						LEFT JOIN 	(SELECT     `b`.`refCustPackingslipInvoiceID`     					AS `refCustPackingslipInvoiceID`,  \n" +
                "										      SUM(IF(a.refPaymentMode='R',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalRecievedAmount`,  \n" +
                "										      0									  	AS `totalCreditMemoAppliedAmount`,  \n" +
                "											SUM(IFNULL(`b`.`paymentAmount`,0))    					AS `totalCustomerInvoiceReceivedAmount`  \n" +
                "										    FROM (`packingslip_invoice_payment` `a`  \n" +
                "										       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "											 ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "										    WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "											   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "											   AND (`a`.`refPaymentMode` IN ('R','CA','WOFF')))  \n" +
                "										    GROUP BY `b`.`refCustPackingslipInvoiceID` ) b  \n" +
                "										ON a.id = b.refCustPackingslipInvoiceID  \n" +
                "  \n" +
                "						LEFT JOIN 	(  \n" +
                "									SELECT  \n" +
                "											a.`refCustCreditMemoID` AS refCustCreditMemoID,  \n" +
                "											SUM(IF(a.refPaymentMode='CA',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalCreditMemoAppliedAmount`  \n" +
                "									FROM `packingslip_invoice_payment` `a`  \n" +
                "										       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "											 ON (`b`.`refPayementid` = `a`.`id`)  \n" +
                "										    WHERE (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "											   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "											   AND (`a`.`refPaymentMode` IN ('R','CA'))  \n" +
                "										    GROUP BY `a`.`refCustCreditMemoID`  \n" +
                "										    ) c  ON a.id = c.refCustCreditMemoID  \n" +
                "						LEFT JOIN (  \n" +
                "									SELECT SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo , refRefundCustCreditMemoID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										GROUP BY refRefundCustCreditMemoID  \n" +
                "									) d  ON a.id = d.refRefundCustCreditMemoID  \n" +
                "					WHERE ((`a`.`transType` IN('I','C'))  \n" +
                "                -- AND a.paymentStatus <> 'RE'  \n" +
                "					      AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND a.transType = 'I' THEN IFNULL(a.totalAmount,0) > 0 ELSE 1=1 END)  \n" +
                "					      AND (`a`.`isDeleted` = 0))  \n" +
                "	UNION  \n" +
                "      SELECT  \n" +
                "			`a`.`mfgcodeID`                       					AS `customerID`,  \n" +
                "			NULL									AS `termsDays`,  \n" +
                "			NULL									AS `refCustPackingslipInvoiceID`,  \n" +
                "			0                                     					AS `invoiceCount`,  \n" +
                "			0                                     					AS `unInvoiceCount`,  \n" +
                "			0                                     					AS `dratftCreditMemoCount`,  \n" +
                "			`a`.`paymentDate`                     					AS `DocDate`,  \n" +
                "			0  									AS `totalRecievedAmount`,  \n" +
                "			((IFNULL(`a`.`paymentAmount`,0) - (SUM(IFNULL(`b`.`paymentAmount`,0)) + IFNULL(c.totRefundIssuedOfPayment,0))) * -(1)) 	AS `totalUnappliedAmount`,  \n" +
                "			0                                     					AS `totalUnappliedCreditMemoAmount`,  \n" +
                "			0									AS `totalCreditMemoAppliedAmount`,  \n" +
                "			0                                     					AS `totalInvoicedAmount`,  \n" +
                "			0                                     					AS `totalDraftAmount`  \n" +
                "			FROM (`packingslip_invoice_payment` `a`  \n" +
                "				LEFT JOIN `packingslip_invoice_payment_det` `b` ON ((`b`.`refPayementid` = `a`.`id`) AND (IFNULL(`b`.`isDeleted`,0) = 0) ))  \n" +
                "				LEFT JOIN (  \n" +
                "						SELECT SUM(paymentAmount) AS totRefundIssuedOfPayment , refRefundPaymentID  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID  \n" +
                "					     ) c  ON a.id = c.refRefundPaymentID  \n" +
                "			WHERE ((`a`.`isDeleted` = 0)  \n" +
                "			AND (`a`.`isPaymentVoided` = 0)  \n" +
                "			AND (`a`.`refPaymentMode` = 'R'))  \n" +
                "			GROUP BY `a`.`mfgcodeID`,a.id  ,`a`.`paymentDate`,`a`.`paymentAmount` , c.totRefundIssuedOfPayment  \n" +
                "                   HAVING  ((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1))  != 0  \n" +
                "                ) AS  cid  \n" +
                "                     INNER JOIN `vu_customer_payment_terms` `cpt` ON (`cid`.`customerID` = `cpt`.`mfgCodeID`)  \n" +
                "                  GROUP BY `cid`.`customerID`,`cid`.`refCustPackingslipInvoiceID`, `cid`.`termsDays` , `cpt`.`termsDays`,  \n" +
                "				`cid`.`DocDate` ,  \n" +
                "			(TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY)))  \n" +
                "                ) AS temp_aged_details  \n" +
                "  \n" +
                "		JOIN mfgcodemst mcm ON mcm.id = temp_aged_details.customerID AND mcm.isDeleted = 0  \n" +
                "		GROUP BY temp_aged_details.customerID, temp_aged_details.custCurrTermDays  \n" +
                "		 HAVING ((SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) <> 0)  \n" +
                "		 OR SUM(temp_aged_details.totalDraftAmount) <> 0  OR totalCreditAmount <> 0  \n" +
                "	\");  \n" +
                "  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY totalOutstandingAmount desc, customerCodeName asc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*  \n" +
                "			FROM 	(\", @temp_balanceDue ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "	-- SELECT @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5996,'2.00','V1',' #41709 Aged Receivable: Show Advance Payment and Open Credit Memo - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5996:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-03-2022 *********************************** */
                "update page_detail set isReadOnlyDeveloped=1 where pageName in (  \n" +
                "'Manage Supplier Refund Detail',  \n" +
                "'Manage Supplier Refund Document'  \n" +
                ") and isReadOnlyDeveloped=0 and isdeleted=0;  \n" +
                /* **************************** New Script -> 11-03-2022 *********************************** */
                "update feature_mst  \n" +
                "set featureName = 'Allow to Lock/Unlock Supplier Refund'  \n" +
                "where featureName = 'Allow to Lock Supplier Refund' and isdeleted=0;  \n" +
                /* **************************** New Script -> 11-03-2022 *********************************** */
                "update feature_mst  \n" +
                "set featureName = 'Allow to Lock/Unlock Supplier Payment'  \n" +
                "where featureName = 'Allow to Lock Supplier Payment' and isdeleted=0;  \n" +
                /* **************************** Add Script Version -> 11-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5997,'2.00','V1',' User Story 39339: Give Provision to Lock and Unlock and maintain History of the same on Supplier Payment and Refund pages - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5997:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-03-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BU_packingslip_invoice_payment`;  \n" +
                "CREATE TRIGGER `Trg_BU_packingslip_invoice_payment` BEFORE UPDATE ON `packingslip_invoice_payment` FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	/* if parent-master record available then only insert child record otherwise throw error */  \n" +
                "    /* added condition for OLD.refPaymentMode != 'P' bacause we allowed to update remark in case of supplier payment even it is in voided state*/  \n" +
                "	IF OLD.refPaymentMode != 'RR' AND OLD.refPaymentMode != 'P' and (OLD.isDeleted = 1 OR OLD.isPaymentVoided = 1) THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 11-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5998,'2.00','V1',' User Story 39339: Give Provision to Lock and Unlock and maintain History of the same on Supplier Payment and Refund pages - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5998:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-03-2022  *********************************** */
                // Already added in Main branch dbscript
                // "ALTER TABLE `dataentrychange_auditlog`  \n" +
                // "ADD COLUMN `revision` VARCHAR(10) NULL AFTER `opVersion`;  \n" +
                /* **************************** Add Script Version -> 10-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5999,'2.00','V1',' User Story 41827: [Main Branch] Purchase Order Allow to add a new line in Completed PO - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5999:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-03-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_PurchaseOrderChangeHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_PurchaseOrderChangeHistory`(  \n" +
                "	IN ppurchaseOrderID INT,  \n" +
                "	IN ppurchaseOrderDetId INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_PurchaseOrderChangeHistory = CONCAT(\"  \n" +
                "			SELECT  \n" +
                "				da.ID,  \n" +
                "				da.Tablename,  \n" +
                "				da.RefTransID,  \n" +
                "				NULL AS poLineNumber,  \n" +
                "				NULL AS lineReleaseNumber,  \n" +
                "				FUN_GETPURCHASEORDERFIELDLABEL(da.Colname) Colname,  \n" +
                "				da.Oldval,  \n" +
                "				da.Newval,  \n" +
                "				da.valueDataType,  \n" +
                "				FUN_GETUSERNAMEBYID(da.updatedBy) updatedby,  \n" +
                "				FUN_GETUSERNAMEBYID(da.createdBy) createdby,  \n" +
                "				FUN_GETROLEBYID(da.createByRoleId) createdbyRole,  \n" +
                "				FUN_GETROLEBYID(da.updateByRoleId) updatedbyRole,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.createdAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.UpdatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                da.revision  \n" +
                "			FROM  \n" +
                "				dataentrychange_auditlog da  \n" +
                "			WHERE  \n" +
                "				da.RefTransID = \",ppurchaseOrderID,\" AND da.Tablename = 'PURCHASEORDERMST'  \n" +
                "			UNION ALL  \n" +
                "            SELECT  \n" +
                "				da.ID,  \n" +
                "				da.Tablename,  \n" +
                "				da.RefTransID,  \n" +
                "				pod.lineID AS poLineNumber,  \n" +
                "				NULL AS lineReleaseNumber,  \n" +
                "				FUN_GETPURCHASEORDERFIELDLABEL(da.Colname) Colname,  \n" +
                "				da.Oldval,  \n" +
                "				da.Newval,  \n" +
                "				da.valueDataType,  \n" +
                "				FUN_GETUSERNAMEBYID(da.updatedBy) updatedby,  \n" +
                "				FUN_GETUSERNAMEBYID(da.createdBy) createdby,  \n" +
                "				FUN_GETROLEBYID(da.createByRoleId) createdbyRole,  \n" +
                "				FUN_GETROLEBYID(da.updateByRoleId) updatedbyRole,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.createdAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.UpdatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                da.revision  \n" +
                "			FROM  \n" +
                "				dataentrychange_auditlog da  \n" +
                "					INNER JOIN  \n" +
                "				purchase_order_det pod ON pod.id = da.RefTransID AND da.Tablename = 'PURCHASE_ORDER_DET'  \n" +
                "			WHERE  \n" +
                "				da.RefTransID IN (SELECT id FROM purchase_order_det WHERE \",  \n" +
                "                CASE WHEN ppurchaseOrderDetId IS NOT NULL THEN CONCAT(\"id=\",ppurchaseOrderDetId,\" AND\")  ELSE '' END ,\" refpurchaseorderid = \",ppurchaseOrderID,\")  \n" +
                "			UNION ALL  \n" +
                "			SELECT  \n" +
                "				da.ID,  \n" +
                "				da.Tablename,  \n" +
                "				da.RefTransID,  \n" +
                "				pod.lineID AS poLineNumber,  \n" +
                "				pol.releaseNumber AS lineReleaseNumber,  \n" +
                "				FUN_GETPURCHASEORDERFIELDLABEL(da.Colname) Colname,  \n" +
                "				da.Oldval,  \n" +
                "				da.Newval,  \n" +
                "				da.valueDataType,  \n" +
                "				FUN_GETUSERNAMEBYID(da.updatedBy) updatedby,  \n" +
                "				FUN_GETUSERNAMEBYID(da.createdBy) createdby,  \n" +
                "				FUN_GETROLEBYID(da.createByRoleId) createdbyRole,  \n" +
                "				FUN_GETROLEBYID(da.updateByRoleId) updatedbyRole,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.createdAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.UpdatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                da.revision  \n" +
                "			FROM  \n" +
                "				dataentrychange_auditlog da  \n" +
                "					INNER JOIN  \n" +
                "				purchase_order_line_release_det pol ON pol.id = da.RefTransID  \n" +
                "					INNER JOIN  \n" +
                "				purchase_order_det pod ON pod.id = pol.refpurchaseorderdetid  \n" +
                "			WHERE  \n" +
                "				da.RefTransID IN (  \n" +
                "					SELECT id FROM purchase_order_line_release_det WHERE refPurchaseOrderDetID IN (  \n" +
                "						SELECT id FROM purchase_order_det WHERE \",  \n" +
                "                CASE WHEN ppurchaseOrderDetId IS NOT NULL THEN CONCAT(\"id=\",ppurchaseOrderDetId,\" AND\")  ELSE '' END ,\" refpurchaseorderid = \",ppurchaseOrderID,\"  \n" +
                "					)) AND da.Tablename = 'PURCHASEORDERLINERELEASEDET'  \n" +
                "			UNION ALL  \n" +
                "			SELECT  \n" +
                "				da.ID,  \n" +
                "				da.Tablename,  \n" +
                "				da.RefTransID,  \n" +
                "				pod.lineID AS poLineNumber,  \n" +
                "				NULL AS lineReleaseNumber,  \n" +
                "				FUN_GETPURCHASEORDERFIELDLABEL(da.Colname) Colname,  \n" +
                "				da.Oldval,  \n" +
                "				da.Newval,  \n" +
                "				da.valueDataType,  \n" +
                "				FUN_GETUSERNAMEBYID(da.updatedBy) updatedby,  \n" +
                "				FUN_GETUSERNAMEBYID(da.createdBy) createdby,  \n" +
                "				FUN_GETROLEBYID(da.createByRoleId) createdbyRole,  \n" +
                "				FUN_GETROLEBYID(da.updateByRoleId) updatedbyRole,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.createdAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.UpdatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                da.revision  \n" +
                "			FROM  \n" +
                "				dataentrychange_auditlog da  \n" +
                "					INNER JOIN  \n" +
                "				purchase_order_line_othercharges pol ON pol.id = da.RefTransID  \n" +
                "					INNER JOIN  \n" +
                "				purchase_order_det pod ON pod.id = pol.refPurchaseOrderDetID  \n" +
                "			WHERE  \n" +
                "				da.RefTransID IN (  \n" +
                "					SELECT id FROM purchase_order_line_othercharges WHERE refPurchaseOrderDetID IN (  \n" +
                "						SELECT id FROM purchase_order_det WHERE \",  \n" +
                "                CASE WHEN ppurchaseOrderDetId IS NOT NULL THEN CONCAT(\"id=\",ppurchaseOrderDetId,\" AND\")  ELSE '' END ,\" refpurchaseorderid = \",ppurchaseOrderID,\"  \n" +
                "					)) AND da.Tablename = 'PURCHASEORDERLINEOTHERCHARGES'  \n" +
                "         \");  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) AS TotalRecord FROM ( \",@temp_Sproc_PurchaseOrderChangeHistory,\" ) c WHERE 1=1 AND \", pWhereClause);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_PurchaseOrderChangeHistory,\" ) c  WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-03-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_UpdatePoWorkingLineStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_UpdatePoWorkingLineStatus`(  \n" +
                "	IN pPOID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vStatus VARCHAR(50);  \n" +
                "    DECLARE vPOTotalLinesWithOtherPart INT;  \n" +
                "	DECLARE vIsManualCompleted INT;  \n" +
                "    SELECT count(1) INTO vPOTotalLinesWithOtherPart FROM purchase_order_det WHERE refPurchaseOrderID=pPOID AND isDeleted=0;  \n" +
                "	IF vPOTotalLinesWithOtherPart > 0 THEN -- check po have any lines  \n" +
                "		SELECT poLineWorkingStatus INTO vStatus FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineWorkingStatus='P' LIMIT 1;  \n" +
                "		SET vStatus=IFNULL(vStatus,'C');  \n" +
                "	ELSE  \n" +
                "		SET vStatus='P';  \n" +
                "	END IF;  \n" +
                "	IF(vStatus='P') THEN  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(CASE WHEN poWorkingStatus='CA' THEN poWorkingStatus ELSE vStatus END),lockStatus='NA',lockedAt=NULL,lockedBy=NULL,lockedByRoleId=NULL WHERE id=pPOID;  \n" +
                "	ELSE  \n" +
                "		SELECT count(1) INTO vIsManualCompleted FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineCompleteType='M';  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(CASE WHEN poWorkingStatus='CA' THEN poWorkingStatus ELSE vStatus END),poCompleteType=(CASE WHEN vIsManualCompleted > 0 THEN 'M' ELSE 'A' END),lockStatus='RL' WHERE id=pPOID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-03-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_updatePurchaseOrderStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_updatePurchaseOrderStatus`(  \n" +
                "	IN pPOID INT,  \n" +
                "	IN pupdatedBy VARCHAR(100),  \n" +
                "	IN pupdatedRoleID VARCHAR(100),  \n" +
                "	IN pcompleteReason VARCHAR(1000),  \n" +
                "	IN pcompleteType VARCHAR(20),  \n" +
                "	IN pcancellationReason VARCHAR(1000),  \n" +
                "	IN ptype VARCHAR(5),  \n" +
                "	IN pCancellationConfirmed TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF pcompleteReason IS NOT NULL THEN  \n" +
                "		IF ptype = 'C' THEN /* for complete po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='C',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType,lockStatus='RL',updatedAt=fun_DatetimetoUTCDateTime() WHERE id=pPOID;  \n" +
                "			UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='C',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=pcompleteReason,poLineCompleteType=pcompleteType,updatedAt=fun_DatetimetoUTCDateTime() WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);  \n" +
                "		ELSEIF ptype = 'P' THEN /* for open po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='P',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType,lockStatus='NA',updatedAt=fun_DatetimetoUTCDateTime() WHERE id=pPOID;  \n" +
                "			UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='P',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=pcompleteReason,poLineCompleteType=pcompleteType,updatedAt=fun_DatetimetoUTCDateTime() WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);  \n" +
                "		END IF;  \n" +
                "	ELSEIF pcancellationReason IS NOT NULL THEN  \n" +
                "		IF ptype = 'C' THEN /* for cancellation po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='CA',CancellationConfirmed=pCancellationConfirmed,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,updatedAt=fun_DatetimetoUTCDateTime(),cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;  \n" +
                "		ELSEIF ptype = 'R' THEN /* for revoke cancellation po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='P',CancellationConfirmed=0,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,updatedAt=fun_DatetimetoUTCDateTime(),cancleReason=pcancellationReason,lockStatus='NA',poCompleteType=pcompleteType WHERE id=pPOID;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6000,'2.00','V1',' User Story 41827: [Main Branch] Purchase Order Allow to add a new line in Completed PO - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6000:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-03-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_mst`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_mst` AFTER UPDATE ON `purchase_order_mst` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "    DECLARE vOldSupplier VARCHAR(100);  \n" +
                "    DECLARE vNewSupplier VARCHAR(100);  \n" +
                "    DECLARE vLockUnlockFieldPTText VARCHAR(10) DEFAULT 'Locked';  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PONUMBER',CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poNumber'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SONUMBER',CAST(OLD.soNumber AS CHAR), CAST(new.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','soNumber'),NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PODATE',CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poDate'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SODATE',CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','soDate'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.supplierID,0) != IFNULL(NEW.supplierID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldSupplier FROM mfgcodemst WHERE id=OLD.supplierID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewSupplier FROM mfgcodemst WHERE id=NEW.supplierID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SUPPLIER', CAST(vOldSupplier AS CHAR), CAST(vNewSupplier AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'TERMS', CAST(fun_getGenericCategoryCodeNameByID(OLD.termsID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.termsID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGMETHOD', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POREVISION', CAST(OLD.poRevision AS CHAR), CAST(new.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poRevision'),NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'INTERNALNOTES', CAST(OLD.shippingComment AS CHAR), CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','shippingComment'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poComment ,0) != IFNULL(NEW.poComment ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCOMMENT', CAST(OLD.poComment AS CHAR), CAST(new.poComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poComment'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POSTATUS', CAST(CASE WHEN OLD.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), CAST(CASE WHEN NEW.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CARRIER', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CARRIERACCOUNT#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','carrierAccountNumber'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'DELETED', CAST(CASE WHEN OLD.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'BLANKETPO', CAST(CASE WHEN OLD.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGINSURANCE', CAST(CASE WHEN OLD.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.supplierAddressID ,0) != IFNULL(NEW.supplierAddressID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SUPPLIERADDRESS', CAST(OLD.supplierAddress AS CHAR), CAST(NEW.supplierAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddressID ,0) != IFNULL(NEW.shippingAddressID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGADDRESS', CAST(OLD.shippingAddress AS CHAR), CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.intermediateShipmentID ,0) != IFNULL(NEW.intermediateShipmentID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'INTERMEDIATEADDRESS', CAST(OLD.intermediateAddress AS CHAR), CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.freeOnBoardID ,0) != IFNULL(NEW.freeOnBoardID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'FOB', CAST(fun_getFOBById(OLD.freeOnBoardID) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar',NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poWorkingStatus ,0) != IFNULL(NEW.poWorkingStatus ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POWORKINGSTATUS', CAST(CASE WHEN IFNULL(OLD.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN OLD.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END  AS CHAR), CAST(CASE WHEN IFNULL(NEW.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN NEW.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poWorkingStatus'),NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.cancleReason ,0) != IFNULL(NEW.cancleReason ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CANCELREASON', CAST(OLD.cancleReason AS CHAR), CAST(NEW.cancleReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','cancleReason'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CancellationConfirmed ,0) != IFNULL(NEW.CancellationConfirmed ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CANCELLATIONCONFIRMED',  CAST(CASE WHEN OLD.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCUSTCONSIGNED',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerID, 0) != IFNULL(NEW.customerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.customerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.customerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCUSTOMER',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'NONSTOCKUMID',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lockStatus, 0) != IFNULL(NEW.lockStatus,0) THEN  \n" +
                "		IF (OLD.lockStatus = 'LC') THEN  \n" +
                "			SET vLockUnlockFieldPTText = \"Unlocked\";  \n" +
                "		END IF;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'LOCKSTATUS',  CAST(CASE WHEN OLD.lockStatus='RL' THEN 'Ready To Lock' WHEN OLD.lockStatus='LC' THEN 'Locked' ELSE 'Not Applicable' END AS CHAR), CAST(CASE WHEN NEW.lockStatus='RL' THEN 'Ready To Lock' WHEN NEW.lockStatus='LC' THEN 'Locked' ELSE 'Not Applicable' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','lockStatus'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lockedBy, 0) != IFNULL(NEW.lockedBy,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),CASE WHEN (OLD.lockStatus = 'LC') THEN 'UNLOCKEDBY' ELSE 'LOCKEDBY' END,  NULL, (CASE WHEN OLD.lockStatus = 'LC' THEN fun_getUserNameByID(NEW.updatedBy) ELSE fun_getUserNameByID(NEW.lockedBy) END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','lockedBy'),NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.lockedAt, 0) != IFNULL(NEW.lockedAt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),CASE WHEN (OLD.lockStatus = 'LC') THEN 'UNLOCKEDAT' ELSE 'LOCKEDAT' END,  NULL, (CASE WHEN OLD.lockStatus = 'LC' THEN fun_DatetimetoUTCDateTime() ELSE NEW.lockedAt END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','lockedAt'),NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.lockedByRoleId, 0) != IFNULL(NEW.lockedByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),CASE WHEN (OLD.lockStatus = 'LC') THEN 'UNLOCKEDBYROLE' ELSE 'LOCKEDBYROLE' END,  NULL, (CASE WHEN OLD.lockStatus = 'LC' THEN fun_getRoleByID(NEW.updateByRoleId) ELSE fun_getRoleByID(NEW.lockedByRoleId) END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poCompleteReason, 0) != IFNULL(NEW.poCompleteReason, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCOMPLETEREASON', CAST(OLD.poCompleteReason AS CHAR), CAST(NEW.poCompleteReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poCompleteReason'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.supplierContactPersonID ,0) != IFNULL(NEW.supplierContactPersonID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SUPPLIERCONTACTPERSON', CAST(OLD.supplierContactPerson AS CHAR), CAST(NEW.supplierContactPerson AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingContactPersonID ,0) != IFNULL(NEW.shippingContactPersonID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGCONTACTPERSON', CAST(OLD.shippingContactPerson AS CHAR), CAST(NEW.shippingContactPerson AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.intermediateContactPersonID ,0) != IFNULL(NEW.intermediateContactPersonID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'INTERMEDIATECONTACTPERSON', CAST(OLD.intermediateContactPerson AS CHAR), CAST(NEW.intermediateContactPerson AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-03-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_det` AFTER UPDATE ON `purchase_order_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "    DECLARE vPORevision VARCHAR(10);  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT poRevision INTO vPORevision FROM purchase_order_mst WHERE id = NEW.refPurchaseOrderID;  \n" +
                "    IF IFNULL(OLD.mfgPartID,0) != IFNULL(NEW.mfgPartID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'MFGPART',CAST(fun_getComponentNameByID(OLD.mfgPartID) AS CHAR),  \n" +
                "       CAST(fun_getComponentNameByID(new.mfgPartID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.supplierPartID,0) != IFNULL(NEW.supplierPartID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'SUPPLIERPART',CAST(fun_getComponentNameByID(OLD.supplierPartID) AS CHAR),  \n" +
                "       CAST(fun_getComponentNameByID(new.supplierPartID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "        IF IFNULL(OLD.partDescription,0) != IFNULL(NEW.partDescription,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PARTDESCRIPTION',CAST(OLD.partDescription AS CHAR),  \n" +
                "       CAST(new.partDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','partDescription'), vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.pcbPerArray,0) != IFNULL(NEW.pcbPerArray,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PCBPERARRAY',CAST(OLD.pcbPerArray AS CHAR),  \n" +
                "       CAST(new.pcbPerArray AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','pcbPerArray'), vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'INTERNALREF',CAST(OLD.internalRef AS CHAR),  \n" +
                "       CAST(new.internalRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','internalRef'), vPORevision);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.totalRelease,0) != IFNULL(NEW.totalRelease,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'TOTALRELEASE',CAST(OLD.totalRelease AS CHAR),  \n" +
                "       CAST(new.totalRelease AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','totalRelease'), vPORevision);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "                  UPDATE packing_slip_material_receive_det SET orderedQty=NEW.qty WHERE refPurchaseOrderDetID=NEW.id AND isdeleted=0;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'POQTY',CAST(OLD.qty AS CHAR),  \n" +
                "       CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PRICE',CAST(OLD.price AS CHAR),  \n" +
                "       CAST(NEW.price AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'unitprice', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lineComment,0) != IFNULL(NEW.lineComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINECOMMENT',CAST(OLD.lineComment AS CHAR),  \n" +
                "       CAST(NEW.lineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','lineComment'), vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.supplierQuoteNumber,0) != IFNULL(NEW.supplierQuoteNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'SUPPLIERQUOTE#',CAST(OLD.supplierQuoteNumber AS CHAR),  \n" +
                "       CAST(NEW.supplierQuoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','supplierQuoteNumber'), vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PACKAGING',CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR),  \n" +
                "		CAST(fun_getPackagingNameByID(NEW.packagingID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsStatusID,0) != IFNULL(NEW.rohsStatusID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'ROHSSTATUS',CAST(fun_getRoHSNameByID(OLD.rohsStatusID) AS CHAR),  \n" +
                "		CAST(fun_getRoHSNameByID(NEW.rohsStatusID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.internalLineComment,0) != IFNULL(NEW.internalLineComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'INTERNALLINECOMMENT',CAST(OLD.internalLineComment AS CHAR),  \n" +
                "		CAST(NEW.internalLineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','internalLineComment'), vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINECUSTCONSIGNED',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lineCustomerID,0) != IFNULL(NEW.lineCustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.lineCustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.lineCustomerID;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINECUSTOMER',CAST(vOldCustomer AS CHAR),  \n" +
                "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isNonUMIDStock,0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINENONUMIDSTOCK',CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\", CAST(new.id AS CHAR), 'DELETED', NULL,  \n" +
                "        CONCAT('PO Line ID ', CAST(OLD.lineID AS CHAR), ' is Deleted'),fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-03-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_line_othercharges`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_line_othercharges` AFTER UPDATE ON `purchase_order_line_othercharges` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vPORevision VARCHAR(10);  \n" +
                "    SELECT po.poRevision INTO vPORevision FROM purchase_order_mst po  \n" +
                "		JOIN purchase_order_det pod ON po.id = pod.refPurchaseOrderID  \n" +
                "    WHERE pod.id = NEW.refPurchaseOrderDetID;  \n" +
                "	IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),  \n" +
                "		CAST(NEW.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty', vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'PRICE',CAST(OLD.price AS CHAR),  \n" +
                "		CAST(NEW.price AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'unitprice', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lineComment,0) != IFNULL(NEW.lineComment,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'INTERNALNOTES',CAST(OLD.lineComment AS CHAR),  \n" +
                "		CAST(NEW.lineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lineInternalComment,0) != IFNULL(NEW.lineInternalComment,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'COMMENTS',CAST(OLD.lineInternalComment AS CHAR),  \n" +
                "		CAST(NEW.lineInternalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-03-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AU_purchase_order_line_release_det`;  \n" +
                "CREATE TRIGGER `TRG_AU_purchase_order_line_release_det` AFTER UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vPORevision VARCHAR(10);  \n" +
                "    SELECT po.poRevision INTO vPORevision FROM purchase_order_mst po  \n" +
                "		JOIN purchase_order_det pod ON po.id = pod.refPurchaseOrderID  \n" +
                "    WHERE pod.id = NEW.refPurchaseOrderDetID;  \n" +
                "	IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),  \n" +
                "		CAST(NEW.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingDate,0) != IFNULL(NEW.shippingDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'DUEDATE',CAST(OLD.shippingDate AS CHAR),  \n" +
                "		CAST(NEW.shippingDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','shippingDate'), vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.promisedShipDate,0) != IFNULL(NEW.promisedShipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'PROMISESHIPDATE',CAST(OLD.promisedShipDate AS CHAR),  \n" +
                "		CAST(NEW.promisedShipDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','promisedShipDate'), vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.releaseNumber,0) != IFNULL(NEW.releaseNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RELEASE#',CAST(OLD.releaseNumber AS CHAR),  \n" +
                "		CAST(NEW.releaseNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','releaseNumber'), vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'SHIPPINGMETHOD',CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR),  \n" +
                "		CAST(fun_getGenericCategoryCodeNameByID(NEW.shippingMethodID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddressID,0) != IFNULL(NEW.shippingAddressID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'SHIPPINGADDRESS',CAST(OLD.shippingAddress AS CHAR),  \n" +
                "		CAST(NEW.shippingAddress AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.releaseNotes,0) != IFNULL(NEW.releaseNotes,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RELEASENOTES',CAST(OLD.releaseNotes AS CHAR),  \n" +
                "		CAST(NEW.releaseNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','releaseNotes'), vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.additionalNotes,0) != IFNULL(NEW.additionalNotes,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'ADDITIONALNOTES',CAST(OLD.additionalNotes AS CHAR),  \n" +
                "		CAST(NEW.additionalNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','additionalNotes'), vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poLineWorkingStatus,0) != IFNULL(NEW.poLineWorkingStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'POLINEWORKINGSTATUS',CAST((CASE WHEN OLD.poLineWorkingStatus='C' THEN 'Close' ELSE 'Open' END) AS CHAR),  \n" +
                "		CAST((CASE WHEN NEW.poLineWorkingStatus='C' THEN 'Close' ELSE 'Open' END) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RECEIVEDQTY',CAST(OLD.receivedQty AS CHAR),  \n" +
                "		CAST(NEW.receivedQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poLineCompleteReason,0) != IFNULL(NEW.poLineCompleteReason,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'POLINECOMPLETEREASON',CAST(OLD.poLineCompleteReason AS CHAR),  \n" +
                "		CAST(NEW.poLineCompleteReason AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poLineCompleteType,0) != IFNULL(NEW.poLineCompleteType,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'POLINECOMPLETETYPE',CAST((CASE WHEN OLD.poLineCompleteType = 'M' THEN 'Manually Completed' WHEN OLD.poLineCompleteType = 'A' THEN 'Auto Completed' ELSE 'Open' END) AS CHAR),  \n" +
                "		CAST((CASE WHEN NEW.poLineCompleteType = 'M' THEN 'Manually Completed' WHEN NEW.poLineCompleteType = 'A' THEN 'Auto Completed' ELSE 'Open' END) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'CARRIERACCOUNT#',CAST(OLD.carrierAccountNumber AS CHAR),  \n" +
                "		CAST(NEW.carrierAccountNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'CARRIER',CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR),  \n" +
                "		CAST(fun_getGenericCategoryCodeNameByID(NEW.carrierID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingContactPersonID,0) != IFNULL(NEW.shippingContactPersonID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'CONTACTPERSON',CAST(OLD.shippingContactPerson AS CHAR),  \n" +
                "		CAST(NEW.shippingContactPerson AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-03-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_BU_purchase_order_line_release_det`;  \n" +
                "CREATE TRIGGER `TRG_BU_purchase_order_line_release_det` BEFORE UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
                "	IF(NEW.isdeleted = 0) THEN  \n" +
                "		IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "		END IF;  \n" +
                "		IF (NEW.qty = NEW.receivedQty AND NEW.poLineWorkingStatus='P' AND NEW.poLineCompleteType != 'M') THEN  \n" +
                "			SET NEW.poLineWorkingStatus='C';  \n" +
                "			SET NEW.poLineCompleteType='A';  \n" +
                "		ELSEIF ((NEW.qty > NEW.receivedQty AND NEW.poLineCompleteType != 'M') OR (NEW.qty != OLD.qty AND New.poLineCompleteType = 'M' AND NEW.poLineWorkingStatus='C')) THEN  \n" +
                "			SET NEW.poLineWorkingStatus='P';  \n" +
                "			SET NEW.poLineCompleteType='P';  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6001,'2.00','V1',' User Story 41827: [Main Branch] Purchase Order Allow to add a new line in Completed PO - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6001:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-03-2022  *********************************** */
                "DROP function IF EXISTS `fun_getPurchaseOrderFieldLabel`;  \n" +
                "CREATE FUNCTION `fun_getPurchaseOrderFieldLabel`(  \n" +
                "fieldName TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	SELECT (CASE  \n" +
                "		WHEN fieldName = 'QTY' THEN 'Qty'  \n" +
                "        WHEN fieldName = 'PRICE' THEN 'Price ($)'  \n" +
                "        WHEN fieldName = 'INTERNALNOTES' THEN 'Internal Notes'  \n" +
                "        WHEN fieldName = 'COMMENTS' THEN 'Comments'  \n" +
                "        WHEN fieldName = 'DUEDATE' THEN 'Due Date'  \n" +
                "        WHEN fieldName = 'PROMISESHIPDATE' THEN 'Supplier Promised Delivery Date'  \n" +
                "        WHEN fieldName = 'RELEASE#' THEN 'Release#'  \n" +
                "        WHEN fieldName = 'SHIPPINGMETHOD' THEN 'Shipping Method'  \n" +
                "        WHEN fieldName = 'SHIPPINGADDRESS' THEN 'Shipping Address'  \n" +
                "        WHEN fieldName = 'RELEASENOTES' THEN 'Release Notes'  \n" +
                "        WHEN fieldName = 'ADDITIONALNOTES' THEN 'Additional Notes'  \n" +
                "        WHEN fieldName = 'POLINEWORKINGSTATUS' THEN 'PO Release Working Status'  \n" +
                "        WHEN fieldName = 'RECEIVEDQTY' THEN 'Received Qty'  \n" +
                "        WHEN fieldName = 'POLINECOMPLETEREASON' THEN 'PO Release Complete Reason'  \n" +
                "        WHEN fieldName = 'POLINECOMPLETETYPE' THEN 'PO Release Complete Type'  \n" +
                "        WHEN fieldName = 'CARRIERACCOUNT#' THEN 'Carrier Account#'  \n" +
                "        WHEN fieldName = 'CARRIER' THEN 'Carrier'  \n" +
                "        WHEN fieldName = 'CONTACTPERSON' THEN 'Contact Person'  \n" +
                "        WHEN fieldName = 'MFGPART' THEN 'MPN'  \n" +
                "        WHEN fieldName = 'SUPPLIERPART' THEN 'SPN'  \n" +
                "        WHEN fieldName = 'PARTDESCRIPTION' THEN 'Description'  \n" +
                "        WHEN fieldName = 'PCBPERARRAY' THEN 'PCB Per Array'  \n" +
                "        WHEN fieldName = 'INTERNALREF' THEN 'Internal Ref#'  \n" +
                "        WHEN fieldName = 'TOTALRELEASE' THEN 'Total Release'  \n" +
                "        WHEN fieldName = 'POQTY' THEN 'PO Qty'  \n" +
                "        WHEN fieldName = 'LINECOMMENT' THEN 'Line Comment'  \n" +
                "        WHEN fieldName = 'SUPPLIERQUOTE#' THEN 'Supplier Quote#'  \n" +
                "        WHEN fieldName = 'PACKAGING' THEN 'Packaging'  \n" +
                "        WHEN fieldName = 'ROHSSTATUS' THEN 'RoHS Requirement'  \n" +
                "        WHEN fieldName = 'INTERNALLINECOMMENT' THEN 'Line Internal Notes'  \n" +
                "        WHEN fieldName = 'LINECUSTCONSIGNED' THEN 'PO Line Customer Consigned (No Charge)'  \n" +
                "        WHEN fieldName = 'LINECUSTOMER' THEN 'PO Line Customer'  \n" +
                "        WHEN fieldName = 'LINENONUMIDSTOCK' THEN 'PO Line Do Not Create UMID Stock'  \n" +
                "        WHEN fieldName = 'PONUMBER' THEN 'PO#'  \n" +
                "        WHEN fieldName = 'SONUMBER' THEN 'SO#'  \n" +
                "        WHEN fieldName = 'PODATE' THEN 'PO Date'  \n" +
                "        WHEN fieldName = 'SODATE' THEN 'SO Date'  \n" +
                "        WHEN fieldName = 'SUPPLIER' THEN 'Supplier'  \n" +
                "        WHEN fieldName = 'TERMS' THEN 'Terms'  \n" +
                "        WHEN fieldName = 'POREVISION' THEN 'PO Revision'  \n" +
                "        WHEN fieldName = 'POCOMMENT' THEN 'PO Comment'  \n" +
                "        WHEN fieldName = 'POSTATUS' THEN 'PO Status'  \n" +
                "        WHEN fieldName = 'BLANKETPO' THEN 'Blanket PO'  \n" +
                "        WHEN fieldName = 'SHIPPINGINSURANCE' THEN 'Shipping with Insurance'  \n" +
                "        WHEN fieldName = 'SUPPLIERADDRESS' THEN 'Supplier Address'  \n" +
                "        WHEN fieldName = 'SHIPPINGADDRESS' THEN 'Bill To / Ship To'  \n" +
                "        WHEN fieldName = 'INTERMEDIATEADDRESS' THEN 'Mark For (Intermediate Ship to)'  \n" +
                "        WHEN fieldName = 'FOB' THEN 'FOB'  \n" +
                "        WHEN fieldName = 'POWORKINGSTATUS' THEN 'PO Working Status'  \n" +
                "        WHEN fieldName = 'CANCELREASON' THEN 'PO Cancellation / Undo Reason'  \n" +
                "        WHEN fieldName = 'CANCELLATIONCONFIRMED' THEN 'Cancellation Confirmed by Supplier'  \n" +
                "        WHEN fieldName = 'POCUSTCONSIGNED' THEN 'PO Customer Consigned (No Charge)'  \n" +
                "        WHEN fieldName = 'POCUSTOMER' THEN 'PO Customer'  \n" +
                "        WHEN fieldName = 'NONSTOCKUMID' THEN 'PO Do Not Create UMID Stock'  \n" +
                "        WHEN fieldName = 'LOCKSTATUS' THEN 'Lock Status'  \n" +
                "        WHEN fieldName = 'LOCKEDBY' THEN 'Locked By'  \n" +
                "        WHEN fieldName = 'UNLOCKEDBY' THEN 'Unlocked By'  \n" +
                "        WHEN fieldName = 'LOCKEDAT' THEN 'Locked Date'  \n" +
                "        WHEN fieldName = 'UNLOCKEDAT' THEN 'Unlocked Date'  \n" +
                "        WHEN fieldName = 'LOCKEDBYROLE' THEN 'Locked By Role'  \n" +
                "        WHEN fieldName = 'UNLOCKEDBYROLE' THEN 'Unlocked By Role'  \n" +
                "        WHEN fieldName = 'POCOMPLETEREASON' THEN 'PO Complete Reason'  \n" +
                "        WHEN fieldName = 'SUPPLIERCONTACTPERSON' THEN 'Supplier Address Contact Person'  \n" +
                "        WHEN fieldName = 'SHIPPINGCONTACTPERSON' THEN 'Bill To / Ship To Contact Person'  \n" +
                "        WHEN fieldName = 'INTERMEDIATECONTACTPERSON' THEN 'Mark For (Intermediate Ship to) Contact Person'  \n" +
                "        WHEN fieldName = 'DELETED' THEN 'Deleted'  \n" +
                "	END) INTO fieldName;  \n" +
                "	RETURN fieldName;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6002,'2.00','V1',' User Story 41827: [Main Branch] Purchase Order Allow to add a new line in Completed PO - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6002:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-03-2022 *********************************** */
                "drop function if exists `fun_generatPackingSlipNumberForRMA`;  \n" +
                "CREATE FUNCTION `fun_generatPackingSlipNumberForRMA`(  \n" +
                "	pPackingSlipDate DATE  \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE v_PackingSlipNumber VARCHAR(50);  \n" +
                "	DECLARE v_CompanyCode VARCHAR(50);  \n" +
                "	DECLARE v_PrefixString VARCHAR(50);  \n" +
                "	DECLARE v_LastId INT;  \n" +
                "	DECLARE v_LastPSNumber VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT CONCAT('RPS', DATE_FORMAT(pPackingSlipDate, '%y%m%d')) INTO v_PrefixString;  \n" +
                "  \n" +
                "	SELECT 	id, packingSlipNumber  \n" +
                "	INTO 	v_LastId, v_LastPSNumber  \n" +
                "	FROM 	packing_slip_material_receive  \n" +
                "	WHERE 	receiptType = 'R'  \n" +
                "			AND packingSlipNumber LIKE CONCAT(v_PrefixString, '%')  \n" +
                "			AND isDeleted = 0  \n" +
                "	ORDER BY id DESC  \n" +
                "	LIMIT 1;  \n" +
                "  \n" +
                "	IF (v_LastPSNumber IS NULL) THEN  \n" +
                "		SELECT  CONCAT(v_PrefixString, '01') INTO v_PackingSlipNumber;  \n" +
                "	ELSE  \n" +
                "		SELECT CONCAT(v_PrefixString, LPAD(CAST(RIGHT(v_LastPSNumber, 2) AS UNSIGNED) + 1, 2, '0' )) INTO v_PackingSlipNumber;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	RETURN v_PackingSlipNumber;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6003,'2.00','V1','Bug 42278: QA Testing Bugs for Task 42254: Changes to Generate RMA number on Save instead of page load - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6003:
            allDbChangesArray.push(
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_bom_stock_position` ;  \n" +
                "CREATE PROCEDURE `Sproc_bom_stock_position`(p_mainassyID INT, p_subassyID INT, p_feasibilityQty INT, p_consolidateview TINYINT, pCustomerId INT ,pPackagingAlias TINYINT )  \n" +
                "BEGIN  \n" +
                "DECLARE pKitQty INT DEFAULT 0;  \n" +
                "DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                " SELECT 1 INTO @pUserID;  \n" +
                " SELECT 1 INTO @pRoleID;  \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "		IF pCustomerId IS NULL THEN  \n" +
                "			SELECT mfgcodeid INTO pCustomerId FROM COMPONENT WHERE id = p_mainassyID;  \n" +
                "		END IF;  \n" +
                "	IF(p_consolidateview AND p_subassyID IS NOT NULL) THEN  \n" +
                "			SIGNAL SQLSTATE '45002'  \n" +
                "			SET MESSAGE_TEXT = ' Consolidate view alwayse for main assembly do not pass sub assembly detail';  \n" +
                "	END IF;  \n" +
                "    /*Generate Conosolidate Data */  \n" +
                "	/* Per assembly generate level wise data */  \n" +
                "    /*In case of multilevel assembly generate per level records*/  \n" +
                "    CALL Sproc_CreateConsolidateDataForPart(0, p_mainassyID);  \n" +
                "	/* select * from leveldata;  \n" +
                "		select * from temp_Sproc_CreateRfqConsolidateLineItem; */  \n" +
                "  \n" +
                "		/*Create Consolidate Data */  \n" +
                "        /*Ref from Sproc_CreateKitAllocationConsolidateLine*/  \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_GetKitConsolidateLine AS  \n" +
                "		SELECT 	rfqAssyIDORrefSalesOrderdetID AS refSalesOrderDetID, 					p_mainassyID AS refAssyId,				multiple,  \n" +
                "			consolidatedLineItemIDs, 		isInstall, 					isPurchaseWithDNP, 				uomID,  \n" +
                "			numOfPosition, 				custPNID, 					restrictCPNUseInBOMStep, 			restrictCPNUsePermanentlyStep,  \n" +
                "			restrictCPNUseWithpermissionStep,	consolidatedPartWithFlagDetail,			category,	 				mountingTypeID,  \n" +
                "			partType, 				connecterTypeID, 				uomMismatchedStep,				mismatchFunctionalCategoryStep,  \n" +
                "			mismatchMountingTypeStep,		rfqlineitemsid,					lineid,						isqpaMismatch,  \n" +
                "			qpa,					kitqpawithDNP,					kitdnpWithoutQPA, 				consolidatedrefDesig,  \n" +
                "			consolidatedmfgPNIDs,			isNotRequiredKitAllocation,			notRequiredKitAllocationReason,			consolidatedpartlineID,  \n" +
                "			consolidateRestrictPartDetail  \n" +
                "		FROM 	temp_Sproc_CreateRfqConsolidateLineItem  \n" +
                "		WHERE 	rfqAssyIDORrefSalesOrderdetID = 0;  \n" +
                "  \n" +
                "		# Insert Consolidated lineItems into temptable  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_bom_stockposition_consolidate_line;  \n" +
                "		CREATE TEMPORARY TABLE temp_bom_stockposition_consolidate_line AS  \n" +
                "        SELECT  (@cnt := @cnt + 1) AS id,	r.refSalesOrderDetID, 			r.refAssyId,			r.multiple,			r.consolidatedLineItemIDs, 		r.isInstall,  \n" +
                "			r.isPurchaseWithDNP, 			r.uomID,			r.numOfPosition, 		r.custPNID,  \n" +
                "			r.restrictCPNUseInBOMStep, 		r.restrictCPNUsePermanentlyStep,				r.restrictCPNUseWithpermissionStep,	r.consolidatedPartWithFlagDetail,  \n" +
                "			r.category,	 			r.mountingTypeID,		r.partType, 			r.connecterTypeID, 			r.uomMismatchedStep,  \n" +
                "			r.mismatchFunctionalCategoryStep,	r.mismatchMountingTypeStep,	r.rfqlineitemsid,		r.lineid,				r.isqpaMismatch,  \n" +
                "			r.qpa,					r.kitqpawithDNP,		r.kitDNPWithoutQPA, 		r.consolidatedrefDesig,			r.consolidatedMfgPNIDs,  \n" +
                "			r.isNotRequiredKitAllocation,		r.notRequiredKitAllocationReason,				r.consolidatedpartlineID,		r.consolidateRestrictPartDetail,  \n" +
                "			(CASE WHEN r.category = 3 THEN 1 ELSE 0 END) isAssembly,				@pUserID createdBy,			fun_DatetimetoUTCDateTime() createdAt,   		@pRoleID createdRole  \n" +
                "		FROM 	temp_Sproc_GetKitConsolidateLine r  \n" +
                "				CROSS JOIN (SELECT @cnt := 0) AS dummy;  \n" +
                "  \n" +
                "       # Insert  Consolidate Alternate part detail  \n" +
                "       DROP TEMPORARY TABLE IF EXISTS temp_bom_stockposition_consolidate_line_alternatepart;  \n" +
                "       CREATE TEMPORARY TABLE  temp_bom_stockposition_consolidate_line_alternatepart  \n" +
                "        SELECT ap.`mfgPN`, cl.id `kitConsolidateID`, 0 `refSalesOrderDetId`, ap.partID  `refAssyId`, ap.`mfgPNID`, 0 `isdeleted`, @pUserID `createdBy`,  \n" +
                "        @pUserID `updatedBy`,fun_DatetimetoUTCDateTime() `createdAt`,fun_DatetimetoUTCDateTime() `updatedAt`,  \n" +
                "        ap.`mfgCodeID`, fun_getAssyPIDCodeByID(ap.`mfgPNID`) AS `PIDCode`, MIN(ap.`customerApproval`) customerApproval, IFNULL(ap.restrictUseInBOMStep,0) AS restrictUseInBOMStep,  \n" +
                "		IFNULL(ap.restrictUseWithPermissionStep,1) AS restrictUseWithPermissionStep,IFNULL(ap.restrictUsePermanentlyStep,1) AS restrictUsePermanentlyStep,  IFNULL(ap.restrictUseInBOMWithPermissionStep,0) AS restrictUseInBOMWithPermissionStep,  \n" +
                "		IFNULL(ap.restrictUseExcludingAliasStep,1) AS restrictUseExcludingAliasStep, IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1) AS restrictUseExcludingAliasWithPermissionStep,IFNULL(ap.restrictUseInBOMExcludingAliasStep,0) AS restrictUseInBOMExcludingAliasStep,  \n" +
                "        IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0) AS restrictUseInBOMExcludingAliasWithPermissionStep,    @pRoleID `createByRoleId`,@pRoleID `updateByRoleId`,  \n" +
                "		IFNULL(ap.approvedMountingType,0) AS approvedMountingType, IFNULL(ap.mismatchMountingTypeStep,1) AS mismatchMountingTypeStep, IFNULL(ap.mismatchFunctionalCategoryStep,1)  AS mismatchFunctionalCategoryStep  \n" +
                "		FROM rfq_lineitems_alternatepart ap  \n" +
                "		JOIN (  \n" +
                "			SELECT  kcl.id, kcl.consolidatedLineItemIDs  \n" +
                "			FROM temp_bom_stockposition_consolidate_line kcl  \n" +
                "			JOIN rfq_lineitems rl ON rl.id = kcl.rfqLineItemsId AND rl.isdeleted = 0  \n" +
                "			WHERE kcl.refSalesOrderDetID = 0  \n" +
                "		) cl ON FIND_IN_SET(ap.rfqLineitemsID,cl.consolidatedLineItemIDs)  \n" +
                "		WHERE IFNULL(ap.mfgGoodPartMappingStep,1) = 1 AND IFNULL(ap.suggestedGoodPartStep,1) = 1 AND IFNULL(ap.distGoodPartMappingStep,1) = 1 AND IFNULL(ap.suggestedGoodDistPartStep,1) = 1 AND ap.isdeleted = 0  \n" +
                "		GROUP BY cl.id, ap.`mfgPN`, ap.`mfgPNID`, ap.`mfgCodeID`,  \n" +
                "				IFNULL(ap.restrictUseInBOMStep,0), IFNULL(ap.restrictUseInBOMWithPermissionStep,0),IFNULL(ap.restrictUseWithPermissionStep,1),IFNULL(ap.restrictUsePermanentlyStep,1),  \n" +
                "				IFNULL(ap.restrictUseExcludingAliasStep,1), IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1),IFNULL(ap.restrictUseInBOMExcludingAliasStep,0),IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0),  \n" +
                "				IFNULL(ap.approvedMountingType,0), IFNULL(ap.mismatchMountingTypeStep,1), IFNULL(ap.mismatchFunctionalCategoryStep,1);  \n" +
                "  \n" +
                "		SELECT * FROM temp_bom_stockposition_consolidate_line;  \n" +
                "		SELECT * FROM temp_bom_stockposition_consolidate_line_alternatepart;  \n" +
                "	/*Generate Subassembly Requirement based on feasibilityQty*/  \n" +
                "		#Ref Proceduew Sproc_CreateKitAllocationAssyDetail  \n" +
                "  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempSubAmmseblyData AS  \n" +
                "		SELECT 	ps.prPerPartID,  \n" +
                "				c.liveInternalVersion,  \n" +
                "				c.liveVersion,  \n" +
                "				MAX(ps.level) LEVEL  \n" +
                "		FROM 		part_sub_assy_relationship ps  \n" +
                "		JOIN		component_bomsetting c ON c.refComponentID = ps.prPerPartID  \n" +
                "		WHERE 		ps.PartID = p_mainassyID  \n" +
                "		AND 		c.liveInternalVersion IS NOT NULL  \n" +
                "		AND 		ps.isDeleted = 0  \n" +
                "		GROUP BY 	ps.prPerPartID, c.liveInternalVersion, c.liveVersion;  \n" +
                "  \n" +
                "		#select * From tempSubAmmseblyData;  \n" +
                "       /*Get Assembly lines from Conslidate line Details*/  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS tempAssyConsolidateDetail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempAssyConsolidateDetail AS  \n" +
                "        SELECT 	id, consolidatedLineItemIDs, kitQPAWithDNP AS qpa, refAssyId, refSalesOrderDetId  \n" +
                "		FROM 	temp_bom_stockposition_consolidate_line  \n" +
                "		WHERE 	refSalesOrderDetID = 0  \n" +
                "				AND isAssembly = 1;  \n" +
                "          /* Update Qty based on Feasibility of Kit & MRP*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_kit_allocation_assy_detail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_kit_allocation_assy_detail   AS  \n" +
                "		SELECT 		tsd.prPerPartID AS prPerPartID,  \n" +
                "					tsd.prPerPartID AS PartID,  \n" +
                "				0 AS salesOrderDetailID,  \n" +
                "				IFNULL(SUM(ld.qpa),1) perAssyBuildQty,  \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * p_feasibilityQty) totalAssyBuildQty,  \n" +
                "				p_feasibilityQty AS kitFeasibilityQty,  \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * p_feasibilityQty) totalAssyMrpQty,  \n" +
                "				p_feasibilityQty AS mrpFeasibilityQty,  \n" +
                "				tsd.liveInternalVersion AS liveInternalVersion,  \n" +
                "				tsd.liveVersion AS liveVersion,  \n" +
                "				IFNULL(tsd.level, 0) AS bomAssyLevel  \n" +
                "  \n" +
                "		FROM 		tempSubAmmseblyData tsd  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 		rla.mfgPNID, a.qpa  \n" +
                "					FROM 		tempAssyConsolidateDetail a  \n" +
                "					INNER JOIN	rfq_lineitems_alternatepart rla ON rla.partID = a.refAssyId AND rla.isDeleted = 0  \n" +
                "					WHERE 		FIND_IN_SET(rla.rfqLineitemsID, a.consolidatedLineItemIDs)  \n" +
                "				) ld ON ld.mfgPNID = tsd.prPerPartID  \n" +
                "		GROUP BY 	tsd.prPerPartID, tsd.liveInternalVersion, tsd.liveVersion, tsd.level  \n" +
                "		ORDER BY 	tsd.level, tsd.prPerPartID;  \n" +
                "	 SELECT * FROM temp_kit_allocation_assy_detail;  \n" +
                "SELECT 	IFNULL(totalAssyBuildQty, 0)  \n" +
                "		INTO 	pKitQty  \n" +
                "		FROM 	temp_kit_allocation_assy_detail  \n" +
                "		WHERE 	partId = IFNULL(p_subassyID,p_mainassyID)  ;  \n" +
                "/* Result Time based on Passing parameter*/  \n" +
                "IF (p_consolidateview) THEN  \n" +
                "	SELECT 'You are in Consolidate Section' AS a;  \n" +
                "ELSEIF(p_subassyID) THEN /*In dividual BOM view*/  \n" +
                "SET @vFromSQLQuery = CONCAT(' SELECT	* FROM	(  \n" +
                "				SELECT 		c.id, 			 		partID AssyID, 		lineID,  \n" +
                "							/*custPNID,          custPN,  					custPIDCode,        custIsCustom,      		*/  \n" +
                "                            qpa, 				dnpQty,						unitName,			/*uomID,  \n" +
                "                            uomClassID,*/  		isPurchase,                /* parttypeID,*/			partTypeName FunctionalType,  \n" +
                "                            /*c.mountingtypeID,*/  mountingTypeName as MountingType,	IF(isPurchase  = 1,\"No\" ,\"Yes\") AS isCustConsignValue,  \n" +
                "							isInstall,			isBuyDNPQty,  				requiredQtyBuild,  	requirePinsBuild,  \n" +
                "                            SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID =',pCustomerId,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID =',pCustomerId,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins  ,  \n" +
                "                             /* mfgCodeID,*/			mfgname,             /*        mfgpnid, */			mfgPN,  \n" +
                "							PIDCode /*,			mfgPNIdsWithPackaging,*/       description /* ,	  restrictCPNUseWithPermissionStep, 			                    restrictCPNUsePermanentlyStep,  \n" +
                "                            restrictCPNUseInBOMStep,        				restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,          	cpnRoHsIcon,							cpnRoHsName,  \n" +
                "                            uomMismatchedStep,      						isNotRequiredKitAllocation, 			isNotRequiredKitAllocationValue,  \n" +
                "                            notRequiredKitAllocationReason,                 rfqLineItemsID, 						rfqLineItemsId,  \n" +
                "                            c.numOfPosition,								mfgPart, 								c.connecterTypeID,  \n" +
                "							(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging */  \n" +
                "						FROM	( SELECT 		a.id, 						partID, 			qpa, 			dnpQty,  \n" +
                "										lineID,     	uomID,							unitName,			uomClassID,		parttypeID,  \n" +
                "										partTypeName, 	mountingtypeID,					mountingTypeName,  	isPurchase,  \n" +
                "										(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(',pKitQty,', 0)) END) requiredQtyBuild,  \n" +
                "										(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)  \n" +
                "											THEN 0  \n" +
                "											ELSE (qpa * IFNULL(',pKitQty,', 0) * IFNULL(numOfPosition, 0))  \n" +
                "										END) requirePinsBuild,  \n" +
                "                                         mfgcodeid,                                        mfgpartdetail.mfgname,  \n" +
                "                                        mfgpnid,										mfgPN AS mfgPN,  \n" +
                "                                        pidcode,  \n" +
                "										mfgPNIdsWithPackaging AS mfgPNIdsWithPackaging    ,  \n" +
                "									isInstall,  \n" +
                "									isBuyDNPQty,				description,		custPNID,         custPN,  			custPIDCode,  \n" +
                "                                    custIsCustom,              	restrictCPNUseWithPermissionStep, 	  restrictCPNUsePermanentlyStep,  \n" +
                "									restrictCPNUseInBOMStep,    restrictPackagingUsePermanently, 	  restrictPackagingUseWithpermission,  \n" +
                "									cpnRoHsIcon,				cpnRoHsName,		uomMismatchedStep,                   isNotRequiredKitAllocation,  \n" +
                "									isNotRequiredKitAllocationValue, 			/*	notRequiredKitAllocationReason,  */  \n" +
                "									/*a.rfqLineItemsID,*/ 			a.rfqLineItemsId, 	numOfPosition,	  mfgPart, 			connecterTypeID  \n" +
                "						FROM  \n" +
                "						(  	SELECT 	k.id,									k.partID,  k.isPurchase,  \n" +
                "										(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "												THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "												ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "										END) AS qpa,  		IFNULL(k.dnpQty, 0) dnpQty,          	k.lineID,  \n" +
                "										k.uomID,			u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "										kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,  \n" +
                "										kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,  \n" +
                "										k.id AS rfqLineItemsId,   	k.numOfPosition,  \n" +
                "										k.isInstall,		k.isBuyDNPQty,          				CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,  \n" +
                "										k.restrictCPNUseWithPermissionStep,	                        k.restrictCPNUsePermanentlyStep,  \n" +
                "                                        k.restrictCPNUseInBOMStep,				                  k.isNotRequiredKitAllocation,  \n" +
                "                                        (CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "															k.custPNID, 					k.custPN,  \n" +
                "										FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,				cpnCom.isCustom custIsCustom,	cpnCom.restrictPackagingUsePermanently,  \n" +
                "										cpnCom.restrictPackagingUseWithpermission,					FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
                "										FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,		kl.uomMismatchedStep,			kl.connecterTypeID,  \n" +
                "										(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart  \n" +
                "								FROM 	(  \n" +
                "										SELECT 		 kal.partID, 	kal.rfqLineItemsID, 	group_concat(c.id) mfgPart,  \n" +
                "												max(c.connecterTypeID) connecterTypeID,  \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
                "														then min(c.functionalCategoryID)  \n" +
                "                                                        when min(c.functionalCategoryID) !=  max(c.functionalCategoryID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.functionalCategoryID ELSE null END))  \n" +
                "														else -1 /* MisMatched */  \n" +
                "												end) parttypeID,  \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "															then  min(c.mountingTypeID)  \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
                "														else  -1  \n" +
                "												end) mountingTypeID,  \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "												group_concat(kal.description) AS description  \n" +
                "										FROM 	rfq_lineitems_alternatepart kal  \n" +
                "										JOIN 	vu_component c on kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "										WHERE	 	kal.partID =  ',IFNULL(p_subassyID,p_mainassyID),'  \n" +
                "												AND 	kal.isDeleted = 0  \n" +
                "												AND		c.isDeleted = 0  \n" +
                "										GROUP BY  kal.partID, kal.rfqLineItemsID  \n" +
                "									) AS kl  \n" +
                "							inner join 	rfq_lineitems k on  k.partID = kl.partID AND k.id = kl.rfqLineItemsID  AND 1 = 1  \n" +
                "							INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "							left join 	vu_component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
                "							where 		 k.isDeleted = 0  \n" +
                "						) AS a      inner join  \n" +
                "									( SELECT        a.id, a.rfqLineItemsID ,a.mfgCodeID,a.mfgname,a.mfgpnid ,a.mfgPN,  a.PIDCode,  \n" +
                "													GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging        ,  \n" +
                "													GROUP_CONCAT(  \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
                "				a.RoHSStatusID,''@@@'',  \n" +
                "				IFNULL(a.name,\"\"),''@@@'',  \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
                "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
                "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
                "				a.mfgCode,''@@@'',  \n" +
                "				a.mfgPNID,''@@@'',  \n" +
                "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
                "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
                "                IFNULL(a.mismatchFunctionalCategoryStep,0) ,''@@@'' ,  \n" +
                "                IFNULL(a.leadTime,0)  \n" +
                "                SEPARATOR \"', v_GroupConcatSeparator ,'\")   mfgpn_otherdetail  \n" +
                "			FROM  \n" +
                "			(  select z.id,z.rfqLineItemsID,z.mfgPNID, z.mfgCodeID, m.mfgname,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
                "                        approvedMountingType,  \n" +
                "                        mismatchMountingTypeStep,  \n" +
                "                        mismatchFunctionalCategoryStep,  \n" +
                "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
                "                        z.feature, z.mfgpn,z.isDocumentUpload,  z.leadTime,  \n" +
                "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
                "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
                "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
                "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
                "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
                "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
                "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
                "						  from  \n" +
                "							(SELECT l.id, l.id as rfqLineItemsID ,  \n" +
                "									IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
                "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
                "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
                "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
                "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
                "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
                "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
                "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
                "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
                "									ELSE    /*Packaging Alias*/  \n" +
                "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                "									END AS restrictUsePermanentlyStep,  \n" +
                "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
                "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
                "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
                "									ELSE     /*Packaging Alias*/  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
                "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
                "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
                "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
                "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
                "									IFNULL(d.leadTime,c.leadTime) AS leadTime,  \n" +
                "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
                "									FROM rfq_lineitems_alternatepart  al  \n" +
                "									JOIN rfq_lineitems l ON  l.id = al.rfqlineitemsid  \n" +
                "									JOIN vu_component c ON al.mfgPNID = c.id  \n" +
                "									LEFT JOIN vu_component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                "									and  not exists ( select 1  from  rfq_lineitems_alternatepart x  \n" +
                "													where  x.rfqlineitemsid  =  al.rfqlineitemsid  \n" +
                "															 and x.mfgpnid = d.id  \n" +
                "															 and d.id != c.id and x.isdeleted = 0)  \n" +
                "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =', pCustomerId ,' AND ccl.isDeleted = 0  \n" +
                "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID =', pCustomerId ,' AND ccld.isDeleted = 0  \n" +
                "									WHERE  l.partid = ',IFNULL(p_subassyID,p_mainassyID),'  \n" +
                "									 AND al.isDeleted = 0 and l.isdeleted  =0 AND c.isGoodPart = 1  ',  \n" +
                "									CASE WHEN (pPackagingAlias = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
                "							) z Left join  mfgcodemst m on m.id = mfgCodeID  \n" +
                "                             group by z.id,z.rfqLineItemsID  , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload, z.leadTime  \n" +
                "							) a group by   a.id, a.rfqLineItemsID ,a.mfgCode,a.mfgname,a.mfgpnid ,a.mfgPN,  a.PIDCode  \n" +
                "							) as mfgpartdetail   on a.id = mfgpartdetail.id  \n" +
                "					) AS c  \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))  \n" +
                "					GROUP BY 	c.id, 					partID, 				qpa, 					dnpQty,  \n" +
                "								lineID,     		uomID,						unitName,				parttypeID,				partTypeName,  \n" +
                "								c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,   	requirePinsBuild,		mfgPN,  \n" +
                "								mfgPNIdsWithPackaging,							isInstall,				isBuyDNPQty,  \n" +
                "                                description,		custPNID,                   custPN,  				custPIDCode, 			custIsCustom,  \n" +
                "                                restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 					restrictCPNUseInBOMStep,  \n" +
                "                                restrictPackagingUsePermanently, 		        restrictPackagingUseWithpermission,          	cpnRoHsIcon,  \n" +
                "                                cpnRoHsName,		uomMismatchedStep,          isNotRequiredKitAllocation, 					isNotRequiredKitAllocationValue,  \n" +
                "                                /*notRequiredKitAllocationReason,*/                 rfqLineItemsID, c.numOfPosition,  \n" +
                "                                mfgPart, 			c.connecterTypeID,			uomClassID  \n" +
                "		) As mainData  \n" +
                "			WHERE 1 = 1 ', IFNULL(vFilterWhereClause,\"and 1=1\") ,'  ORDER BY `lineID` ASC') ;  \n" +
                "END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_BomstockPositionResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_BomstockPositionResult AS \", @vFromSQLQuery);  \n" +
                "   #select 2, @vSQLMainQuery;  \n" +
                "   PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "    EXECUTE mainQuery;  \n" +
                "    SELECT  * FROM temp_BomstockPositionResult;  \n" +
                "  \n" +
                "/*Get BOM data  */  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CheckRFQAssemblyPriceGroupVersion` ;  \n" +
                "CREATE PROCEDURE `Sproc_CheckRFQAssemblyPriceGroupVersion`(  \n" +
                "	IN prfqAssyID INT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "SELECT c.liveVersion,c.liveInternalVersion,ra.partCostingBOMInternalVersion  \n" +
                "FROM rfq_assemblies ra  \n" +
                "JOIN vu_component c ON c.id = ra.partid  \n" +
                "WHERE ra.id = prfqAssyID  \n" +
                "AND IFNULL(c.liveVersion,0) != IFNULL(ra.partCostingBOMInternalVersion,0);  \n" +
                "SELECT COUNT(1)  \n" +
                "FROM rfq_assemblies ra  \n" +
                "JOIN vu_component c ON c.id = ra.partID  \n" +
                "WHERE ra.isdeleted = 0  \n" +
                "AND ra.rfqrefID = (SELECT rfqrefid FROM rfq_assemblies WHERE id = prfqAssyID)  \n" +
                "AND c.liveVersion != IFNULL(ra.priceGroupInternalVersion,0)  \n" +
                "GROUP BY ra.rfqrefid;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyComponent` ;  \n" +
                "CREATE PROCEDURE `Sproc_CopyComponent`(  \n" +
                "	IN BuyByID INT(1),  \n" +
                "	IN BuyToID INT(1),  \n" +
                "    IN UserID INT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "  \n" +
                "    /*START TRANSACTION;  \n" +
                "     As per discussion with Dixitbhai not require to copy component detail.(02-10-2018)  \n" +
                "				#SET @rank = (SELECT id FROM component ORDER BY id DESC LIMIT 1);  \n" +
                "		# Copy All record in component for selected BuyBy mfg from BuyTo mfg  \n" +
                "				INSERT INTO `component`  \n" +
                "				(`imageURL`, `mfgPN`, `mfgcodeID`, `mfgPNDescription`, `packageQty`, `partStatus`, `ltbDate`, `RoHSStatusID`, `aliasgroupID`,  \n" +
                "				`packaginggroupID`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `isGoodPart`,  \n" +
                "				`rohsgroupID`, `leadTime`, `packaging`, `noOfPosition`, `countryOfOrigin`, `uom`, `mountingTypeID`, `partPackage`, `deviceMarking`,  \n" +
                "				`minimum`, `mult`, `uomText`, `htsCode`, `category`, `rohsText`, `dataSheetLink`, `replacementPartID`, `eolDate`, `value`, `tolerance`,  \n" +
                "				`minOperatingTemp`, `maxOperatingTemp`, `functionalCategoryID`, `weight`, `length`, `width`, `height`, `saftyStock`,  \n" +
                "				`specialNote`, `heightText`, `partStatusText`, `isPIDManual`, `feature`, `functionalCategoryText`, `updatedAtApi`,  \n" +
                "				`supplier`, `mountingTypeText`, `maxPriceLimit`, `selfLifeDays`, `isCustom`, `rev`, `mslID`, `connecterTypeID`, `connectorTypeText`,  \n" +
                "				`costCategoryID`, `maxQtyonHand`, `noOfRows`, `bookValue`, `voltage`, `operatingTemp`, `powerRating`, `pitch`, `pitchMating`,  \n" +
                "				`scrapRatePercentagePerBuild`, `plannedOverRunPercentagePerBuild`, `nickName`, `bomLock`, `restrictUSEwithpermission`, `sizeDimension`,  \n" +
                "				`plannedValuePerBuild`, `scrapValuePerBuild`, `restrictUsePermanently`, `rfqOnly`, `customerID`, `eau`, `assyCode`, `pcbPerArray`,  \n" +
                "				`temperatureCoefficient`, `temperatureCoefficientValue`, `temperatureCoefficientUnit`, `isCPN`, `matingPartRquired`, `driverToolRequired`,  \n" +
                "				`pickupPadRequired`, `programingRequired`, `functionalTestingRequired`, `liveInternalVersion`, `custAssyPN`, `partType`, `functionalTypePartRequired`,  \n" +
                "				`mountingTypePartRequired`, `shelfListDaysThresholdPercentage`, `color`, `refSupplierMfgpnComponentID`, `businessRisk`, `exteranalAPICallStatus`,  \n" +
                "				`isBOMVerified`, `liveVersion`, `packagingID`, `isTemperatureSensitive`, `unit`, `PIDCode`,  \n" +
                "                `grossWeight`,`packagingWeight`,`isCloudApiUpdateAttribute`,`epicorType`,`grossWeightUom`,`packagingWeightUom`)  \n" +
                "				SELECT  \n" +
                "				com.`imageURL`, com.`mfgPN`, BuyByID `mfgcodeID`, com.`mfgPNDescription`, com.`packageQty`, com.`partStatus`, com.`ltbDate`, com.`RoHSStatusID`,  \n" +
                "				null `aliasgroupID`, null `packaginggroupID`, UserID `createdBy`, current_timestamp() `createdAt`, UserID `updatedBy`, current_timestamp() `updatedAt`,  \n" +
                "				com.`isGoodPart`, null `rohsgroupID`, com.`leadTime`, com.`packaging`, com.`noOfPosition`, com.`countryOfOrigin`, com.`uom`,  \n" +
                "				com.`mountingTypeID`, com.`partPackage`, com.`deviceMarking`, com.`minimum`, com.`mult`, com.`uomText`, com.`htsCode`, com.`category`, com.`rohsText`,  \n" +
                "				com.`dataSheetLink`, com.`replacementPartID`, com.`eolDate`, com.`value`, com.`tolerance`, com.`minOperatingTemp`, com.`maxOperatingTemp`,  \n" +
                "				com.`functionalCategoryID`, com.`weight`, com.`length`, com.`width`, com.`height`, com.`saftyStock`, com.`specialNote`, com.`heightText`,  \n" +
                "				com.`partStatusText`, com.`isPIDManual`, com.`feature`, com.`functionalCategoryText`, com.`updatedAtApi`, com.`supplier`, com.`mountingTypeText`,  \n" +
                "				com.`maxPriceLimit`, com.`selfLifeDays`, com.`isCustom`, com.`rev`, com.`mslID`, com.`connecterTypeID`, com.`connectorTypeText`, com.`costCategoryID`,  \n" +
                "				com.`maxQtyonHand`, com.`noOfRows`, com.`bookValue`, com.`voltage`, com.`operatingTemp`, com.`powerRating`, com.`pitch`, com.`pitchMating`,  \n" +
                "				com.`scrapRatePercentagePerBuild`, com.`plannedOverRunPercentagePerBuild`, com.`nickName`, com.`bomLock`, com.`restrictUSEwithpermission`,  \n" +
                "				com.`sizeDimension`, com.`plannedValuePerBuild`, com.`scrapValuePerBuild`, com.`restrictUsePermanently`, com.`rfqOnly`, com.`customerID`, com.`eau`,  \n" +
                "				com.`assyCode`, com.`pcbPerArray`, com.`temperatureCoefficient`, com.`temperatureCoefficientValue`, com.`temperatureCoefficientUnit`, com.`isCPN`,  \n" +
                "				com.`matingPartRquired`, com.`driverToolRequired`, com.`pickupPadRequired`, com.`programingRequired`, com.`functionalTestingRequired`,  \n" +
                "				com.`liveInternalVersion`, com.`custAssyPN`, com.`partType`, com.`functionalTypePartRequired`, com.`mountingTypePartRequired`,  \n" +
                "				com.`shelfListDaysThresholdPercentage`, com.`color`, com.`refSupplierMfgpnComponentID`, com.`businessRisk`, com.`exteranalAPICallStatus`,  \n" +
                "				com.`isBOMVerified`, com.`liveVersion`, com.`packagingID`, com.`isTemperatureSensitive`, com.`unit`,  \n" +
                "					(SELECT LEFT(CONCAT((SELECT mfgCode FROM mfgcodemst WHERE id = BuyByID),'+',c.mfgPN),30) `PIDCode`  \n" +
                "						FROM component c  \n" +
                "						JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "						WHERE c.mfgcodeID = BuyToID AND c.id = com.id AND IFNULL(c.isDeleted,0) = 0) `PIDCode`,  \n" +
                "				com.`grossWeight`,com.`packagingWeight`,com.`isCloudApiUpdateAttribute`,com.`epicorType`,com.`grossWeightUom`,com.`packagingWeightUom`  \n" +
                "				FROM component com  \n" +
                "				WHERE com.mfgcodeID = BuyToID AND IFNULL(com.isDeleted,0) = 0;  \n" +
                "  \n" +
                "                 As per discussion with Dixitbhai not require to insert alias, packeging alias, and alternate alias for component.(04-10-2018)  \n" +
                "		# Copy All record in component_alias for selected BuyBy mfg from BuyTo mfg  \n" +
                "				INSERT INTO `component_alias`  \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                "				select  \n" +
                "				ca.`aliasgroupID` ,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID` , ca.`isDeleted`,  \n" +
                "				fun_DatetimetoUTCDateTime() `createdAt`,UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`  \n" +
                "				from component_alias ca join component c on c.id = ca.componentID  \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                "  \n" +
                "        # Copy All record in component_alternatepn for selected BuyBy mfg from BuyTo mfg  \n" +
                "                INSERT INTO `component_alternatepn`  \n" +
                "				(`refComponentID`,`componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                "				select  \n" +
                "				ca.`refComponentID` ,(select id from component where mfgcodeID = BuyByID and mfgPN = c.mfgPN and IFNULL(isDeleted,0) = 0) `componentID` , ca.`isDeleted`,fun_DatetimetoUTCDateTime() `createdAt`,  \n" +
                "				UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`  \n" +
                "				from component_alternatepn ca join component c on c.id = ca.componentID  \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID and IFNULL(ca.isDeleted,0) = 0);  \n" +
                "  \n" +
                "        # Copy All record in component_packagingalias for selected BuyBy mfg from BuyTo mfg  \n" +
                "                INSERT INTO `component_packagingalias`  \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                "				select  \n" +
                "				ca.`aliasgroupID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID`, ca.`isDeleted`,fun_DatetimetoUTCDateTime() `createdAt`,  \n" +
                "				UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`  \n" +
                "				from component_packagingalias ca join component c on c.id = ca.componentID  \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                "  \n" +
                "     As per discussion with Dixitbhai not require to insert component_rohsalternatepn for component.(20-05-2019)  \n" +
                "		# Copy All record in component_rohsalternatepn for selected BuyBy mfg from BuyTo mfg  \n" +
                "				INSERT INTO `component_rohsalternatepn`  \n" +
                "				(`aliasgroupID`, `componentID`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`)  \n" +
                "				SELECT  \n" +
                "				ca.`aliasgroupID`,(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `componentID`,  \n" +
                "                current_timestamp() `createdAt`, UserID `createdBy`, current_timestamp() `updatedAt`, UserID `updatedBy`  \n" +
                "				FROM component_rohsalternatepn ca JOIN component c ON c.id = ca.componentID  \n" +
                "				WHERE ca.componentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;  \n" +
                "  \n" +
                "		# Copy All record in component_goodbadpartmapping for selected BuyBy mfg from BuyTo mfg  \n" +
                "				INSERT INTO `component_goodbadpartmapping`  \n" +
                "				(`goodComponentID`, `badComponentID`, `customerID`, `reason`, `rfqAssyID`, `createdBy`, `createdAt`, `deletedBy`,  `deletedAt`, `isDeleted`)  \n" +
                "				SELECT  \n" +
                "				(IFNULL((SELECT id FROM component WHERE mfgPN = cG.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0), ca.goodComponentID)) `goodComponentID`,  \n" +
                "				(IFNULL((SELECT id FROM component WHERE mfgPN = cB.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0), ca.badComponentID)) `badComponentID`,  \n" +
                "				 ca.`customerID`, ca.`reason`, ca.`rfqAssyID`,UserID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`, ca.`deletedBy`, ca.`deletedAt`, ca.`isDeleted`  \n" +
                "				FROM component_goodbadpartmapping ca JOIN component cB ON cB.id = ca.badComponentID  \n" +
                "				JOIN component cG ON cG.id	= ca.goodComponentID  \n" +
                "				WHERE ca.badComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) OR  \n" +
                "				ca.goodComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;  \n" +
                "  \n" +
                "  \n" +
                "		Copy All record in component_standard_details for selected BuyBy mfg from BuyTo mfg  \n" +
                "				INSERT INTO `component_standard_details`  \n" +
                "				(`componentID`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`, `certificateStandardID`, `ClassID`)  \n" +
                "				SELECT  \n" +
                "				(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `componentID`,  \n" +
                "                current_timestamp() `createdAt`, UserID `createdBy`, current_timestamp() `updatedAt`, UserID `updatedBy`,  \n" +
                "                ca.`certificateStandardID`, ca.`ClassID`  \n" +
                "				FROM component_standard_details ca JOIN component c ON c.id = ca.componentID  \n" +
                "				WHERE ca.componentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    As per discussion with Dixitbhai not require to insert component_drivetools for component.(20-05-2019)  \n" +
                "        # Copy All record in component_drivetools for selected BuyBy mfg from BuyTo mfg  \n" +
                "                 INSERT INTO `component_drivetools`  \n" +
                "				(`refComponentID`, `createdAt`, `createdBy`, `updatedAt`, `updatedBy`, `componentID`)  \n" +
                "				SELECT  \n" +
                "				(IFNULL((SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0), ca.`refComponentID`)) `refComponentID`,  \n" +
                "				current_timestamp() `createdAt`, UserID `createdBy`, current_timestamp() `updatedAt`, UserID `updatedBy`,  \n" +
                "				(IFNULL((SELECT id FROM component WHERE mfgPN = cG.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0), ca.`componentID`)) `componentID`  \n" +
                "				FROM component_drivetools ca  \n" +
                "				JOIN component c ON c.id = ca.refComponentID  \n" +
                "				JOIN component cG ON cG.id	= ca.componentID  \n" +
                "  \n" +
                "        table removed  \n" +
                "       # Copy All record in component_requiremapping_parts for selected BuyBy mfg from BuyTo mfg  \n" +
                "                INSERT INTO `component_requiremapping_parts`  \n" +
                "				(`requiredMatingPartgroupID`, `refComponentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                "				SELECT  \n" +
                "				ca.`requiredMatingPartgroupID`,(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(isDeleted,0) = 0) `refComponentID`, ca.`isDeleted`,  \n" +
                "				fun_DatetimetoUTCDateTime() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`  \n" +
                "				FROM component_requiremapping_parts ca JOIN component c ON c.id = ca.refComponentID  \n" +
                "				WHERE ca.refComponentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;  \n" +
                "  \n" +
                "        # Copy All record in component_dataelement for selected BuyBy mfg from BuyTo mfg  \n" +
                "               INSERT INTO `component_dataelement`  \n" +
                "				(`componentID`, `dataElementID`, `displayOrder`, `createdAt`, `updatedAt`, `createdBy`, `updatedBy`)  \n" +
                "				SELECT  \n" +
                "				(SELECT id FROM component WHERE mfgPN = c.mfgPN AND mfgcodeID = BuyByID AND IFNULL(ca.isDeleted,0) = 0) `componentID`,  \n" +
                "                ca.`dataElementID`, ca.`displayOrder`, current_timestamp() `createdAt`, current_timestamp() `updatedAt`,UserID `createdBy`, UserID `updatedBy`  \n" +
                "				FROM component_dataelement ca JOIN component c ON c.id = ca.componentID  \n" +
                "				WHERE ca.componentID IN (SELECT id FROM component WHERE mfgcodeID = BuyToID) AND IFNULL(ca.isDeleted,0) = 0;  \n" +
                "  COMMIT;  \n" +
                "  */  \n" +
                "SELECT * FROM vu_component WHERE mfgcodeID = BuyByID;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateCustPNAndMapWithMFGPN` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustPNAndMapWithMFGPN`(  \n" +
                "IN pcustPN VARCHAR(100),  \n" +
                "IN pcustPart VARCHAR(100),  \n" +
                "IN pcustPNRev VARCHAR(100),  \n" +
                "IN pcustomerID INT,  \n" +
                "IN prefComponentIDs VARCHAR(5000),  \n" +
                "IN puserID VARCHAR(10),  \n" +
                "IN pUserRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE mountingTypeID INT;  \n" +
                "	DECLARE functionalCategoryID INT;  \n" +
                "	DECLARE rohsStatusID INT;  \n" +
                "	DECLARE categoryID INT;  \n" +
                "	DECLARE partTypeID INT;  \n" +
                "	DECLARE statusID INT;  \n" +
                "	DECLARE mfgPNID INT;  \n" +
                "	DECLARE pEpicoreType VARCHAR(100);  \n" +
                "	DECLARE vSerialNumer VARCHAR(8);  \n" +
                "	DECLARE maxDisplayOrder DECIMAL;  \n" +
                "	DECLARE mfgPID VARCHAR(500);  \n" +
                "	DECLARE maxPartId INT;  \n" +
                "  \n" +
                "	SET categoryID = 2;  \n" +
                "	SET partTypeID = 2;  \n" +
                "	SET rohsStatusID = 1;  \n" +
                "  \n" +
                "	SELECT epicorType INTO pEpicoreType FROM rfq_partcategory WHERE id = categoryID;  \n" +
                "	SELECT mfgCode INTO @mfgCode FROM mfgcodemst WHERE id = pcustomerID;  \n" +
                "	SELECT id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;  \n" +
                "	SELECT id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;  \n" +
                "	SELECT id INTO statusID FROM component_partstatusmst WHERE `name`= 'Active';  \n" +
                "	IF functionalCategoryID IS NULL THEN  \n" +
                "		SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;  \n" +
                "		INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy, createByRoleId)  \n" +
                "		VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID,pUserRoleID);  \n" +
                "		SELECT LAST_INSERT_ID() INTO functionalCategoryID;  \n" +
                "	END IF;  \n" +
                "  	IF mountingTypeID IS NULL THEN  \n" +
                "		INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy,createByRoleId)VALUES('CPN', 1, pUserID,pUserRoleID);  \n" +
                "		SELECT LAST_INSERT_ID() INTO mountingTypeID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET mfgPID =CONCAT( @mfgCode , \"+\" , pcustPN);  \n" +
                "	SET mfgPNID = NULL;  \n" +
                "	SELECT d.id INTO mfgPNID FROM COMPONENT d WHERE d.PIDCode = mfgPID AND d.isDeleted = 0 LIMIT 1;  \n" +
                "	IF mfgPNID IS NULL THEN  \n" +
                "		-- Set vSerialNumer = null;  \n" +
                "		-- SET vSerialNumer = fun_getComponent_Serial_Number(pUserID);  \n" +
                "		INSERT INTO COMPONENT(custAssyPN, rev, mfgPN, PIDCode, partStatus,  \n" +
                "			isCPN, isCustom, mfgCodeID, createdBy, createByRoleId,  \n" +
                "			RoHSStatusID, mountingTypeID, functionalCategoryID, category,  \n" +
                "			createdAt, partType, uom, epicorType,unit,serialNumber, uomClassID, mfgPNDescription)  \n" +
                "		VALUES (pcustPart, pcustPNRev, pcustPN, mfgPID, statusID,  \n" +
                "			1,1,pcustomerID,pUserID, pUserRoleID,  \n" +
                "			rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,  \n" +
                "			fun_DatetimetoUTCDateTime(), partTypeID, -1, IFNULL(pEpicoreType,'Purchased'), 1, fun_getComponent_Serial_Number(pUserID), -1, '-');  \n" +
                "		SELECT LAST_INSERT_ID() INTO maxPartId;  \n" +
                "  \n" +
                "		CALL Sproc_SaveCustMFGPn(maxPartId,prefComponentIDs,puserID,pUserRoleID);  \n" +
                "	ELSE  \n" +
                "		CALL Sproc_SaveCustMFGPn(mfgPNID,prefComponentIDs,puserID,pUserRoleID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateKitAllocationAssyDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateKitAllocationAssyDetail`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pSalesOrderDetailID INT,  \n" +
                "	IN pKitQty INT,  \n" +
                "	IN pMrpQty INT,  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pActionStatus VARCHAR(50),  \n" +
                "	IN pRoleID INT,  \n" +
                "    IN pIsOnlyQtyChange TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_assyDataCount INT;  \n" +
                "	DECLARE v_KitAssyDetailPIDs VARCHAR(10000);  \n" +
                "	DECLARE v_RfqLineitemsIds VARCHAR(10000);  \n" +
                "	DECLARE v_RfqLineItemIdsForDeallocate VARCHAR(10000);  \n" +
                "	DECLARE v_AssyIdsForDeallocate VARCHAR(10000);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempSubAmmseblyData AS  \n" +
                "	SELECT 	ps.prPerPartID,  \n" +
                "			c.liveInternalVersion,  \n" +
                "			c.liveVersion,  \n" +
                "			MAX(ps.level) LEVEL  \n" +
                "	FROM 		part_sub_assy_relationship ps  \n" +
                "	JOIN		vu_component c ON c.id = ps.prPerPartID  \n" +
                "	WHERE 		ps.PartID = pPartID  \n" +
                "	AND 		c.liveInternalVersion IS NOT NULL  \n" +
                "	AND 		ps.isDeleted = 0  \n" +
                "	GROUP BY 	ps.prPerPartID, c.liveInternalVersion, c.liveVersion;  \n" +
                "  \n" +
                "	SELECT 	COUNT(1)  \n" +
                "	INTO 	v_assyDataCount  \n" +
                "	FROM 	tempSubAmmseblyData  \n" +
                "	WHERE 	prPerPartID = pPartID;  \n" +
                "  \n" +
                "	IF (v_assyDataCount > 0) THEN  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempAssyConsolidateDetail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempAssyConsolidateDetail AS  \n" +
                "		SELECT 	id, consolidatedLineItemIDs, kitQPAWithDNP AS qpa, refAssyId, refSalesOrderDetId, isDeleted  \n" +
                "		FROM 	kit_allocation_consolidate_Line_detail  \n" +
                "		WHERE 	refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "				AND isAssembly = 1  \n" +
                "				AND isDeleted = 0;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForUpdate;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForUpdate AS  \n" +
                "		SELECT 		tsd.prPerPartID AS prPerPartID,  \n" +
                "				pSalesOrderDetailID AS salesOrderDetailID,  \n" +
                "				IFNULL(SUM(ld.qpa),1) perAssyBuildQty,  \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * pKitQty) totalAssyBuildQty,  \n" +
                "				pKitQty AS kitQty,  \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * pMrpQty) totalAssyMrpQty,  \n" +
                "				pMrpQty AS mrpQty,  \n" +
                "				tsd.liveInternalVersion AS liveInternalVersion,  \n" +
                "				tsd.liveVersion AS liveVersion,  \n" +
                "				IFNULL(tsd.level, 0) AS bomAssyLevel,  \n" +
                "				pUserID AS updatedBy,  \n" +
                "				pUserID AS createdBy,  \n" +
                "				pRoleID AS createByRoleId,  \n" +
                "				pRoleID AS updateByRoleId  \n" +
                "		FROM 		tempSubAmmseblyData tsd  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 		rla.mfgPNID, a.qpa  \n" +
                "					FROM 		tempAssyConsolidateDetail a  \n" +
                "					INNER JOIN	rfq_lineitems_alternatepart rla ON rla.partID = a.refAssyId AND rla.isDeleted = 0  \n" +
                "					WHERE 		FIND_IN_SET(rla.rfqLineitemsID, a.consolidatedLineItemIDs) AND a.isDeleted = 0  \n" +
                "				) ld ON ld.mfgPNID = tsd.prPerPartID  \n" +
                "		GROUP BY 	tsd.prPerPartID, tsd.liveInternalVersion, tsd.liveVersion, tsd.level  \n" +
                "		ORDER BY 	tsd.level, tsd.prPerPartID;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForLineItem;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForLineItem AS  \n" +
                "		SELECT 		pSalesOrderDetailID AS refSalesOrderDetID,  		id,  \n" +
                "				lineID, 	qpa, 		dnpQty,		    	isInstall,  \n" +
                "				isPurchase,	isBuyDNPQty,	custPN,			custPNID,  \n" +
                "				uomID, 		partID,		numOfPosition, 		DESCRIPTION,  \n" +
                "				restrictCPNUseWithPermissionStep,	restrictCPNUsePermanentlyStep,  \n" +
                "				restrictCPNUseInBOMStep,		customerApprovalCPN,  \n" +
                "				isNotRequiredKitAllocation,  \n" +
                "				fun_getApprovalCommentOfBOMLine(19, rl.id) notRequiredKitAllocationReason,  \n" +
                "				isDeleted,      deleteByRoleId,		refDesig,	customerRev,  \n" +
                "                customerDescription,	dnpDesig,	programingStatus,  \n" +
                "                cust_lineID,	substitutesAllow,	numOfRows, customerPartDesc,  \n" +
                "                qpaDesignatorStep, mergeLines, lineMergeStep,  duplicateCPNStep,  \n" +
                "				requireMountingTypeStep, requireFunctionalTypeStep, refDesigCount, isObsoleteLine,  \n" +
                "				customerApprovalForQPAREFDESStep, customerApprovalForBuyStep, customerApprovalForPopulateStep,  \n" +
                "				customerApprovalCPNBy, customerApprovalCPNDate, dnpDesigCount,  \n" +
                "				requireMountingTypeError, requireFunctionalTypeError, dnpQPARefDesStep, customerApprovalForDNPQPAREFDESStep,  \n" +
                "				customerApprovalForDNPBuyStep, isSupplierToBuy  \n" +
                "		FROM 		rfq_lineitems rl  \n" +
                "		WHERE 	 	/*FIND_IN_SET(PartId, v_KitAssyDetailPIDs) */  \n" +
                "				EXISTS (SELECT 1  FROM tempSubAmmseblyData temp  \n" +
                "										WHERE temp.prPerPartid = partid)  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForLineItemAlternatePart;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForLineItemAlternatePart AS  \n" +
                "		SELECT 	pSalesOrderDetailID AS refSalesOrderDetID,		rfqLineItemsID, 		id,  \n" +
                "			distributor, 			distMfgCodeID, 		distPN, 	    		distMfgPNID,  \n" +
                "			mfgCode,			mfgCodeID, 		mfgPN, 				mfgPNID,  \n" +
                "			DESCRIPTION,		RoHSStatusID,  \n" +
                "			parttypeID, 		    	mountingtypeID,		partcategoryID, 	    	partID,  \n" +
                "			customerApproval,		customerApprovalBy,	customerApprovalDate,		restrictUsePermanentlyStep,  \n" +
                "			restrictUseWithPermissionStep, 	restrictUseInBOMStep,	restrictUseInBOMWithPermissionStep,  \n" +
                "			mismatchMountingTypeStep,	approvedMountingType, 	mismatchFunctionalCategoryStep,  \n" +
                "			uomMismatchedStep,		restrictUseInBOMExcludingAliasStep,	    		restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "			restrictUseExcludingAliasStep,	restrictUseExcludingAliasWithPermissionStep,		isDeleted,  \n" +
                "			deleteByRoleId,mfgVerificationStep, mfgDistMappingStep, mfgCodeStep, distVerificationStep, distCodeStep,  \n" +
                "			getMFGPNStep, obsoletePartStep, mfgGoodPartMappingStep, mfgPNStep, distPNStep,  \n" +
                "			badMfgPN, distGoodPartMappingStep, nonRohsStep, epoxyStep, invalidConnectorTypeStep, duplicateMPNInSameLineStep,  \n" +
                "			pickupPadRequiredStep, matingPartRquiredStep, driverToolsRequiredStep, functionalTestingRequiredStep,  \n" +
                "			mismatchValueStep, mismatchPackageStep, mismatchToleranceStep, mismatchTempratureStep, mismatchPowerStep,  \n" +
                "			programingRequiredStep, mismatchColorStep, isCustomerUnAppoval, customerUnAppovalBy,  \n" +
                "			customerUnAppovalDate, mismatchNumberOfRowsStep, partPinIsLessthenBOMPinStep,  \n" +
                "			tbdPartStep, exportControlledStep, isUnlockApprovedPart, unknownPartStep, defaultInvalidMFRStep,  \n" +
                "			suggestedGoodPartStep, suggestedGoodDistPartStep, mismatchRequiredProgrammingStep, mappingPartProgramStep,  \n" +
                "			mismatchCustomPartStep, suggestedByApplicationMsg, suggestedByApplicationStep, mismatchProgrammingStatusStep  \n" +
                "		FROM 	rfq_lineitems_alternatepart rla  \n" +
                "		WHERE 	EXISTS  ( SELECT 1 FROM rfq_LineItems rl  \n" +
                "									WHERE EXISTS (SELECT 1  FROM tempSubAmmseblyData temp  \n" +
                "															WHERE temp.prPerPartid = partid)  \n" +
                "									AND rl.id =  rla.rfqLineItemsID  \n" +
                "    AND rl.isdeleted = 0)  \n" +
                "				AND isDeleted = 0;  \n" +
                "  \n" +
                "		/* Delete any line detail (delete any kit) from sales order */  \n" +
                "		IF (pActionStatus = 'DELETE')  \n" +
                "        THEN  \n" +
                "			/* Delete from kit_allocation_assy_detail */  \n" +
                "			UPDATE 	kit_allocation_assy_detail kasd  \n" +
                "			SET 	kasd.updatedBy = pUserID,  \n" +
                "				kasd.isDeleted = 1,  \n" +
                "				kasd.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				kasd.deletedBy = pUserId,  \n" +
                "				kasd.updateByRoleId = pRoleID,  \n" +
                "				kasd.deleteByRoleId = pRoleID  \n" +
                "			WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "  \n" +
                "			/* Delete from kit_allocation_lineitems */  \n" +
                "			UPDATE 	kit_allocation_lineitems kal  \n" +
                "			SET 	kal.updatedBy = pUserID,  \n" +
                "				kal.isDeleted = 1,  \n" +
                "				kal.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				kal.deletedBy = pUserId,  \n" +
                "				kal.updateByRoleId = pRoleID,  \n" +
                "				kal.deleteByRoleId = pRoleID  \n" +
                "			WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "  \n" +
                "			/* Delete from kit_allocation_lineitems_alternatepart */  \n" +
                "			UPDATE 	kit_allocation_lineitems_alternatepart kala  \n" +
                "			SET 	kala.updatedBy = pUserID,  \n" +
                "				kala.isDeleted = 1,  \n" +
                "				kala.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				kala.deletedBy = pUserId,  \n" +
                "				kala.updateByRoleId = pRoleID,  \n" +
                "				kala.deleteByRoleId = pRoleID  \n" +
                "			WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "  \n" +
                "			-- Deallocate UMID from kit allocation when delete sales order detail (Any Kit) from sales order  \n" +
                "			UPDATE 	kit_allocation ka  \n" +
                "			SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "				ka.returnUnit = ka.allocatedUnit,  \n" +
                "				ka.returnUOM = ka.allocatedUOM,  \n" +
                "				ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "				ka.updatedBy = pUserID,  \n" +
                "				ka.updateByRoleId = pRoleID,  \n" +
                "				ka.`status` = 'D',  \n" +
                "				ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "			WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "					AND ka.`status` = 'A';  \n" +
                "  \n" +
                "			-- Delete release plan detail  \n" +
                "			UPDATE 	salesorder_plan_detailsmst  \n" +
                "			SET 	isDeleted = 1,  \n" +
                "				deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				deletedBy = pUserId  \n" +
                "			WHERE 	salesOrderDetID = pSalesOrderDetailID  \n" +
                "					AND isDeleted = 0;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* Insert data in kit allocation table when any new sales order line detail add in sales order */  \n" +
                "		IF (pActionStatus != 'DELETE') THEN  \n" +
                "			IF (pActionStatus = 'UPDATE')  \n" +
                "            THEN  \n" +
                "				/* Delete kit_allocation_assy_detail if sales order detail changed assy for particular line detail */  \n" +
                "				UPDATE 	kit_allocation_assy_detail kasd  \n" +
                "				SET 	kasd.updatedBy = pUserID,  \n" +
                "					kasd.isDeleted = 1,  \n" +
                "					kasd.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "					kasd.deletedBy = pUserId,  \n" +
                "					kasd.updateByRoleId = pRoleID,  \n" +
                "					kasd.deleteByRoleId = pRoleID  \n" +
                "				WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "						AND kasd.isDeleted = 0;  \n" +
                "  \n" +
                "				/* Delete kit_allocation_lineitems if sales order detail changed assy for particular line detail */  \n" +
                "				UPDATE 	kit_allocation_lineitems kal  \n" +
                "				SET 	kal.updatedBy = pUserID,  \n" +
                "					kal.isDeleted = 1,  \n" +
                "					kal.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "					kal.deletedBy = pUserId,  \n" +
                "					kal.updateByRoleId = pRoleID,  \n" +
                "					kal.deleteByRoleId = pRoleID  \n" +
                "				WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "						AND kal.isDeleted = 0;  \n" +
                "  \n" +
                "				/* Delete kit_allocation_lineitems_alternatepart if sales order detail changed assy for particular line detail */  \n" +
                "				UPDATE 	kit_allocation_lineitems_alternatepart kala  \n" +
                "				SET 	kala.updatedBy = pUserID,  \n" +
                "						kala.isDeleted = 1,  \n" +
                "						kala.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						kala.deletedBy = pUserId,  \n" +
                "						kala.updateByRoleId = pRoleID,  \n" +
                "						kala.deleteByRoleId = pRoleID  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "				-- Deallocate UMID from kit allocation when delete sales order detail (Any Kit) from sales order  \n" +
                "				-- In this case assembly was change on sales order line detail so internally we do deallocate UMID which contail old assembly (Old Kit)  \n" +
                "				IF(pIsOnlyQtyChange = 0) THEN  \n" +
                "					UPDATE 	kit_allocation ka  \n" +
                "					SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "						ka.returnUnit = ka.allocatedUnit,  \n" +
                "						ka.returnUOM = ka.allocatedUOM,  \n" +
                "						ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "						ka.updatedBy = pUserID,  \n" +
                "						ka.updateByRoleId = pRoleID,  \n" +
                "						ka.`status` = 'D',  \n" +
                "						ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "					WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND ka.`status` = 'A';  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (pActionStatus = 'UPDATE' OR pActionStatus = 'CALCULATEKITALLOCATION')  \n" +
                "            THEN  \n" +
                "  \n" +
                "				IF (pActionStatus = 'CALCULATEKITALLOCATION')  \n" +
                "                THEN  \n" +
                "  \n" +
                "					/* Delete from kit_allocation_assy_detail if any sub assembly line delete from BOM */  \n" +
                "					UPDATE 	kit_allocation_assy_detail kasd  \n" +
                "					SET 	kasd.updatedBy = pUserID,  \n" +
                "							kasd.isDeleted = 1,  \n" +
                "							kasd.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "							kasd.deletedBy = pUserId,  \n" +
                "							kasd.updateByRoleId = pRoleID,  \n" +
                "							kasd.deleteByRoleId = pRoleID  \n" +
                "						WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "								AND NOT EXISTS (SELECT 	1  \n" +
                "													FROM 	tempResultForUpdate r  \n" +
                "													WHERE 	r.salesOrderDetailID = kasd.refSalesOrderDetID  \n" +
                "															AND r.prPerPartID = kasd.partId)  \n" +
                "								AND kasd.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Delete from kit_allocation_lineitems if any sub assembly or any mfr pn line remove from BOM */  \n" +
                "					UPDATE 	kit_allocation_lineitems kal  \n" +
                "					SET 	kal.updatedBy = pUserID,  \n" +
                "						kal.isDeleted = 1,  \n" +
                "						kal.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						kal.deletedBy = pUserId,  \n" +
                "						kal.updateByRoleId = pRoleID,  \n" +
                "						kal.deleteByRoleId = pRoleID  \n" +
                "					WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							-- AND kal.partID = pPartID  \n" +
                "							AND NOT EXISTS ( 	SELECT 	1  \n" +
                "								FROM 	tempResultForLineItem r  \n" +
                "								WHERE 	r.refSalesOrderDetID = kal.refSalesOrderDetID  \n" +
                "										AND r.partID = kal.partID  \n" +
                "										AND r.id = kal.refRfqLineitem  	)  \n" +
                "							AND kal.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Get rfqLineItem and AssyID from kit_allocation_lineitems_alternatepart table from deallocated UMID because if any line delete from BOM*/  \n" +
                "					SELECT 	GROUP_CONCAT(refRfqLineitem), GROUP_CONCAT(partID)  \n" +
                "					INTO	v_RfqLineItemIdsForDeallocate, v_AssyIdsForDeallocate  \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart kala  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							-- AND kala.partID = pPartID  \n" +
                "							AND NOT EXISTS (  SELECT 	1  \n" +
                "												FROM 	tempResultForLineItemAlternatePart r  \n" +
                "												WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "														AND r.partID = kala.partID  \n" +
                "														AND r.mfgPNID = kala.mfgPNID  \n" +
                "														AND r.rfqLineitemsID = kala.refRfqLineitem)  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Delete from kit_allocation_lineitems_alternatepart if any sub assembly or any mfr pn line remove from BOM */  \n" +
                "					UPDATE 	kit_allocation_lineitems_alternatepart kala  \n" +
                "					SET 	kala.updatedBy = pUserID,  \n" +
                "						kala.isDeleted = 1,  \n" +
                "						kala.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						kala.deletedBy = pUserId,  \n" +
                "						kala.updateByRoleId = pRoleID,  \n" +
                "						kala.deleteByRoleId = pRoleID  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND NOT EXISTS (  SELECT 	1  \n" +
                "								FROM 	tempResultForLineItemAlternatePart r  \n" +
                "								WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "										AND r.rfqLineitemsID = kala.refRfqLineitem  \n" +
                "										AND r.partID = kala.partID  \n" +
                "										AND r.mfgPNID = kala.mfgPNID  )  \n" +
                "						AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Deallocate UMID if any line change the MFR PN and that line have any UMID allocate */  \n" +
                "					IF (v_RfqLineItemIdsForDeallocate IS NOT NULL AND v_AssyIdsForDeallocate IS NOT NULL) THEN  \n" +
                "						UPDATE 	kit_allocation ka  \n" +
                "						SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "							ka.returnUnit = ka.allocatedUnit,  \n" +
                "							ka.returnUOM = ka.allocatedUOM,  \n" +
                "							ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "							ka.updatedBy = pUserID,  \n" +
                "							ka.updateByRoleId = pRoleID,  \n" +
                "							ka.`status` = 'D',  \n" +
                "							ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "						WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "								AND FIND_IN_SET(ka.assyID, v_AssyIdsForDeallocate)  \n" +
                "								AND FIND_IN_SET(ka.refBOMLineID, v_RfqLineItemIdsForDeallocate)  \n" +
                "								AND ka.`status` = 'A';  \n" +
                "					END IF;  \n" +
                "  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				/* Update kit_allocation_assy_detail if any change in sales order detail line or any change in kit */  \n" +
                "				/* In case of pActionStatus = 'UPDATE' we have to update only kit_allocation_assy_detail table becuse we only update qty, mrpqty, kitqty and update assy case cover in above query*/  \n" +
                "				UPDATE 	kit_allocation_assy_detail ka, tempResultForUpdate tsd  \n" +
                "				SET 	ka.partId = tsd.prPerPartID,  \n" +
                "					ka.refSalesOrderDetID = tsd.salesOrderDetailID,  \n" +
                "					ka.perAssyBuildQty = tsd.perAssyBuildQty,  \n" +
                "					ka.totalAssyBuildQty = tsd.totalAssyBuildQty,  \n" +
                "					ka.kitQty = tsd.kitQty,  \n" +
                "					ka.totalAssyMrpQty = tsd.totalAssyMrpQty,  \n" +
                "					ka.mrpQty = tsd.mrpQty,  \n" +
                "					ka.bomInternalVersion = tsd.liveInternalVersion,  \n" +
                "					ka.bomInternalVersionString = tsd.liveVersion,  \n" +
                "					ka.bomAssyLevel = tsd.bomAssyLevel,  \n" +
                "					ka.updatedBy = tsd.updatedBy,  \n" +
                "					ka.updateByRoleId = tsd.updateByRoleId  \n" +
                "				WHERE	ka.id IS NOT NULL  \n" +
                "						AND ka.partId = tsd.prPerPartID  \n" +
                "						AND ka.refSalesOrderDetID = tsd.salesOrderDetailID  \n" +
                "						AND ka.isDeleted = 0;  \n" +
                "  \n" +
                "				IF (pActionStatus = 'CALCULATEKITALLOCATION')  \n" +
                " THEN  \n" +
                "  \n" +
                "					/* Update kit_allocation_lineitems table if any change in BOM line */  \n" +
                "					UPDATE 	kit_allocation_lineitems kal, tempResultForLineItem tlt  \n" +
                "					SET 	kal.refSalesOrderDetID = tlt.refSalesOrderDetID,  \n" +
                "						kal.refRfqLineitem = tlt.id,  \n" +
                "						kal.lineID = tlt.lineID,  \n" +
                "						kal.qpa = tlt.qpa,  \n" +
                "						kal.dnpQty = tlt.dnpQty,  \n" +
                "						kal.isInstall = tlt.isInstall,  \n" +
                "						/* kal.isPurchase = tlt.isPurchase,  - Commented by CP: 11-102021 Take permisssion before any modification  \n" +
                "							as this will be calculate seperately for Kit allocation */  \n" +
                "						kal.isBuyDNPQty = tlt.isBuyDNPQty,  \n" +
                "						kal.custPN = tlt.custPN,  \n" +
                "						kal.custPNID = tlt.custPNID,  \n" +
                "						kal.uomID = tlt.uomID,  \n" +
                "						kal.partID = tlt.partID,  \n" +
                "						kal.numOfPosition = tlt.numOfPosition,  \n" +
                "						kal.description = tlt.description,  \n" +
                "						kal.restrictCPNUseWithPermissionStep = tlt.restrictCPNUseWithPermissionStep,  \n" +
                "						kal.restrictCPNUsePermanentlyStep = tlt.restrictCPNUsePermanentlyStep,  \n" +
                "						kal.restrictCPNUseInBOMStep = tlt.restrictCPNUseInBOMStep,  \n" +
                "						kal.customerApprovalCPN = tlt.customerApprovalCPN,  \n" +
                "						kal.isNotRequiredKitAllocation = tlt.isNotRequiredKitAllocation,  \n" +
                "						kal.notRequiredKitAllocationReason = tlt.notRequiredKitAllocationReason,  \n" +
                "						kal.updatedBy = pUserID,  \n" +
                "						kal.updateByRoleId = pRoleID,  \n" +
                "                        kal.refDesig = tlt.refDesig,  \n" +
                "                        kal.customerRev = tlt.customerRev,  \n" +
                "                        kal.customerDescription = tlt.customerDescription,  \n" +
                "                        kal.dnpDesig = tlt.dnpDesig,  \n" +
                "                        kal.programingStatus = tlt.programingStatus,  \n" +
                "                        kal.cust_lineID = tlt.cust_lineID,  \n" +
                "                        kal.substitutesAllow = tlt.substitutesAllow,  \n" +
                "                        kal.numOfRows = tlt.numOfRows,  \n" +
                "                        kal.customerPartDesc = tlt.customerPartDesc,  \n" +
                "                        kal.qpaDesignatorStep = tlt.qpaDesignatorStep,  \n" +
                "						kal.mergeLines = tlt.mergeLines,  \n" +
                "						kal.lineMergeStep = tlt.lineMergeStep,  \n" +
                "						kal.duplicateCPNStep = tlt.duplicateCPNStep,  \n" +
                "						kal.requireMountingTypeStep = tlt.requireMountingTypeStep,  \n" +
                "						kal.requireFunctionalTypeStep = tlt.requireFunctionalTypeStep,  \n" +
                "						kal.refDesigCount = tlt.refDesigCount,  \n" +
                "						kal.isObsoleteLine = tlt.isObsoleteLine,  \n" +
                "						kal.customerApprovalForQPAREFDESStep = tlt.customerApprovalForQPAREFDESStep,  \n" +
                "						kal.customerApprovalForBuyStep = tlt.customerApprovalForBuyStep,  \n" +
                "						kal.customerApprovalForPopulateStep = tlt.customerApprovalForPopulateStep,  \n" +
                "						kal.customerApprovalCPNBy = tlt.customerApprovalCPNBy,  \n" +
                "						kal.customerApprovalCPNDate = tlt.customerApprovalCPNDate,  \n" +
                "						kal.dnpDesigCount = tlt.dnpDesigCount,  \n" +
                "						kal.requireMountingTypeError = tlt.requireMountingTypeError,  \n" +
                "						kal.requireFunctionalTypeError = tlt.requireFunctionalTypeError,  \n" +
                "						kal.dnpQPARefDesStep = tlt.dnpQPARefDesStep,  \n" +
                "						kal.customerApprovalForDNPQPAREFDESStep = tlt.customerApprovalForDNPQPAREFDESStep,  \n" +
                "						kal.customerApprovalForDNPBuyStep = tlt.customerApprovalForDNPBuyStep,  \n" +
                "						kal.isSupplierToBuy = tlt.isSupplierToBuy  \n" +
                "					WHERE	kal.id IS NOT NULL  \n" +
                "							AND kal.refRfqLineitem = tlt.id  \n" +
                "							AND kal.refSalesOrderDetID = tlt.refSalesOrderDetID  \n" +
                "							AND kal.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Get rfqLineItem and AssyID from kit_allocation_lineitems_alternatepart table from deallocated UMID because if any change in MFR PN on particular line*/  \n" +
                "					SELECT 	GROUP_CONCAT(refRfqLineitem), GROUP_CONCAT(partID)  \n" +
                "					INTO	v_RfqLineItemIdsForDeallocate, v_AssyIdsForDeallocate  \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart kala  \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "							AND NOT EXISTS (  \n" +
                "								SELECT 	1  \n" +
                "								FROM 	tempResultForLineItemAlternatePart r  \n" +
                "								WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "										AND r.partID = kala.partID  \n" +
                "										AND r.mfgPNID = kala.mfgPNID  \n" +
                "										AND kala.id IS NOT NULL  \n" +
                "							)  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE 	kit_allocation_lineitems_alternatepart kala, tempResultForLineItemAlternatePart tlia  \n" +
                "					SET 	kala.refSalesOrderDetID = tlia.refSalesOrderDetID,  \n" +
                "						kala.refRfqLineitem = tlia.rfqLineItemsID,  \n" +
                "						kala.refRfqLineItemAlternatePartId = tlia.id,  \n" +
                "						kala.distributor = tlia.distributor,  \n" +
                "						kala.distMfgCodeID = tlia.distMfgCodeID,  \n" +
                "						kala.distPN = tlia.distPN,  \n" +
                "						kala.distMfgPNID = tlia.distMfgPNID,  \n" +
                "						kala.mfgCode = tlia.mfgCode,  \n" +
                "						kala.mfgCodeID = tlia.mfgCodeID,  \n" +
                "						kala.mfgPN = tlia.mfgPN,  \n" +
                "						kala.mfgPNID = tlia.mfgPNID,  \n" +
                "						kala.description = tlia.description,  \n" +
                "						kala.RoHSStatusID = tlia.RoHSStatusID,  \n" +
                "						kala.parttypeID = tlia.parttypeID,  \n" +
                "						kala.mountingtypeID = tlia.mountingtypeID,  \n" +
                "						kala.partcategoryID = tlia.partcategoryID,  \n" +
                "						kala.partID = tlia.partID,  \n" +
                "						kala.customerApproval = tlia.customerApproval,  \n" +
                "						kala.customerApprovalBy = tlia.customerApprovalBy,  \n" +
                "						kala.customerApprovalDate = tlia.customerApprovalDate,  \n" +
                "						kala.restrictUsePermanentlyStep = tlia.restrictUsePermanentlyStep,  \n" +
                "						kala.restrictUseWithPermissionStep = tlia.restrictUseWithPermissionStep,  \n" +
                "						kala.restrictUseInBOMStep = tlia.restrictUseInBOMStep,  \n" +
                "						kala.restrictUseInBOMWithPermissionStep = tlia.restrictUseInBOMWithPermissionStep,  \n" +
                "						kala.mismatchMountingTypeStep = tlia.mismatchMountingTypeStep,  \n" +
                "						kala.approvedMountingType = tlia.approvedMountingType,  \n" +
                "						kala.mismatchFunctionalCategoryStep = tlia.mismatchFunctionalCategoryStep,  \n" +
                "						kala.uomMismatchedStep = tlia.uomMismatchedStep,  \n" +
                "						kala.restrictUseInBOMExcludingAliasStep = tlia.restrictUseInBOMExcludingAliasStep,  \n" +
                "						kala.restrictUseInBOMExcludingAliasWithPermissionStep = tlia.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						kala.restrictUseExcludingAliasStep = tlia.restrictUseExcludingAliasStep,  \n" +
                "						kala.restrictUseExcludingAliasWithPermissionStep = tlia.restrictUseExcludingAliasWithPermissionStep,  \n" +
                "						kala.updatedBy = pUserID,  \n" +
                "						kala.updateByRoleId=pRoleID,  \n" +
                "						kala.deleteByRoleId=tlia.deleteByRoleId,  \n" +
                "                        kala.mfgVerificationStep = tlia.mfgVerificationStep,  \n" +
                "						kala.mfgDistMappingStep = tlia.mfgDistMappingStep,  \n" +
                "						kala.mfgCodeStep = tlia.mfgCodeStep,  \n" +
                "						kala.distVerificationStep = tlia.distVerificationStep,  \n" +
                "						kala.distCodeStep = tlia.distCodeStep,  \n" +
                "						kala.getMFGPNStep = tlia.getMFGPNStep,  \n" +
                "						kala.obsoletePartStep = tlia.obsoletePartStep,  \n" +
                "						kala.mfgGoodPartMappingStep = tlia.mfgGoodPartMappingStep,  \n" +
                "						kala.mfgPNStep = tlia.mfgPNStep,  \n" +
                "						kala.distPNStep = tlia.distPNStep,  \n" +
                "						kala.badMfgPN = tlia.badMfgPN,  \n" +
                "						kala.distGoodPartMappingStep = tlia.distGoodPartMappingStep,  \n" +
                "						kala.nonRohsStep = tlia.nonRohsStep,  \n" +
                "						kala.epoxyStep = tlia.epoxyStep,  \n" +
                "						kala.invalidConnectorTypeStep = tlia.invalidConnectorTypeStep,  \n" +
                "						kala.duplicateMPNInSameLineStep = tlia.duplicateMPNInSameLineStep,  \n" +
                "						kala.pickupPadRequiredStep = tlia.pickupPadRequiredStep,  \n" +
                "						kala.matingPartRquiredStep = tlia.matingPartRquiredStep,  \n" +
                "						kala.driverToolsRequiredStep = tlia.driverToolsRequiredStep,  \n" +
                "						kala.functionalTestingRequiredStep = tlia.functionalTestingRequiredStep,  \n" +
                "						kala.mismatchValueStep = tlia.mismatchValueStep,  \n" +
                "						kala.mismatchPackageStep = tlia.mismatchPackageStep,  \n" +
                "						kala.mismatchToleranceStep = tlia.mismatchToleranceStep,  \n" +
                "						kala.mismatchTempratureStep = tlia.mismatchTempratureStep,  \n" +
                "						kala.mismatchPowerStep = tlia.mismatchPowerStep,  \n" +
                "						kala.programingRequiredStep = tlia.programingRequiredStep,  \n" +
                "						kala.mismatchColorStep = tlia.mismatchColorStep,  \n" +
                "						kala.isCustomerUnAppoval = tlia.isCustomerUnAppoval,  \n" +
                "						kala.customerUnAppovalBy = tlia.customerUnAppovalBy,  \n" +
                "						kala.customerUnAppovalDate = tlia.customerUnAppovalDate,  \n" +
                "						kala.mismatchNumberOfRowsStep = tlia.mismatchNumberOfRowsStep,  \n" +
                "						kala.partPinIsLessthenBOMPinStep = tlia.partPinIsLessthenBOMPinStep,  \n" +
                "						kala.tbdPartStep = tlia.tbdPartStep,  \n" +
                "						kala.exportControlledStep = tlia.exportControlledStep,  \n" +
                "						kala.isUnlockApprovedPart = tlia.isUnlockApprovedPart,  \n" +
                "						kala.unknownPartStep = tlia.unknownPartStep,  \n" +
                "						kala.defaultInvalidMFRStep = tlia.defaultInvalidMFRStep,  \n" +
                "						kala.suggestedGoodPartStep = tlia.suggestedGoodPartStep,  \n" +
                "						kala.suggestedGoodDistPartStep = tlia.suggestedGoodDistPartStep,  \n" +
                "						kala.mismatchRequiredProgrammingStep = tlia.mismatchRequiredProgrammingStep,  \n" +
                "						kala.mappingPartProgramStep = tlia.mappingPartProgramStep,  \n" +
                "						kala.mismatchCustomPartStep = tlia.mismatchCustomPartStep,  \n" +
                "						kala.suggestedByApplicationMsg = tlia.suggestedByApplicationMsg,  \n" +
                "						kala.suggestedByApplicationStep = tlia.suggestedByApplicationStep,  \n" +
                "						kala.mismatchProgrammingStatusStep = tlia.mismatchProgrammingStatusStep  \n" +
                "					WHERE	kala.id IS NOT NULL  \n" +
                "							AND kala.refSalesOrderDetID = tlia.refSalesOrderDetID  \n" +
                "							AND kala.refRfqLineitem = tlia.rfqLineItemsID  \n" +
                "							AND kala.mfgPNID = tlia.mfgPNID  \n" +
                "							AND kala.isDeleted = 0;  \n" +
                "  \n" +
                "					/* Deallocate UMID if any line change the MFR PN and that line have any UMID allocate*/  \n" +
                "					IF (v_RfqLineItemIdsForDeallocate IS NOT NULL AND v_AssyIdsForDeallocate IS NOT NULL) THEN  \n" +
                "						UPDATE 	kit_allocation ka  \n" +
                "						SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "							ka.returnUnit = ka.allocatedUnit,  \n" +
                "							ka.returnUOM = ka.allocatedUOM,  \n" +
                "							ka.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
                "							ka.updatedBy = pUserID,  \n" +
                "							ka.updateByRoleId = pRoleID,  \n" +
                "							ka.`status` = 'D',  \n" +
                "							ka.remark = 'Auto Deallocated from ReCalculation'  \n" +
                "						WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID  \n" +
                "								AND FIND_IN_SET(ka.assyID, v_AssyIdsForDeallocate)  \n" +
                "								AND FIND_IN_SET(ka.refBOMLineID, v_RfqLineItemIdsForDeallocate)  \n" +
                "								AND ka.`status` = 'A';  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			/*SELECT * from tempResultForUpdate;  \n" +
                "			 SELECT 	ts.prPerPartID,		ts.salesOrderDetailID,		ts.perAssyBuildQty, 		ts.totalAssyBuildQty,  \n" +
                "				ts.kitQty,			ts.totalAssyMrpQty,		ts.mrpQty,			ts.liveInternalVersion,  \n" +
                "				ts.liveVersion,		ts.bomAssyLevel,		ts.updatedBy, 			ts.createdBy,  \n" +
                "				ts.createByRoleId, 		ts.updateByRoleId  \n" +
                "			FROM 	tempResultForUpdate ts  \n" +
                "			LEFT JOIN kit_allocation_assy_detail kaad ON kaad.partId = ts.prPerPartID  \n" +
                "						AND kaad.refSalesOrderDetID = ts.salesOrderDetailID  \n" +
                "						AND kaad.isDeleted = 0  \n" +
                "			WHERE 	kaad.id IS NULL; */  \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_assy_detail */  \n" +
                "			INSERT INTO kit_allocation_assy_detail (  \n" +
                "				partId, 		refSalesOrderDetID, 		perAssyBuildQty, 		totalAssyBuildQty,  \n" +
                "				kitQty,     		totalAssyMrpQty,     		mrpQty,     			bomInternalVersion,  \n" +
                "				bomInternalVersionString,     				bomAssyLevel,     		createdBy,  \n" +
                "				updatedBy,		createByRoleId,    		updateByRoleId  \n" +
                "			)  \n" +
                "			SELECT 	tsd.prPerPartID,		tsd.salesOrderDetailID,		tsd.perAssyBuildQty, 		tsd.totalAssyBuildQty,  \n" +
                "				tsd.kitQty,			tsd.totalAssyMrpQty,		tsd.mrpQty,			tsd.liveInternalVersion,  \n" +
                "				tsd.liveVersion,		tsd.bomAssyLevel,		tsd.updatedBy, 			tsd.createdBy,  \n" +
                "				tsd.createByRoleId, 		tsd.updateByRoleId  \n" +
                "			FROM 	tempResultForUpdate tsd  \n" +
                "			LEFT JOIN kit_allocation_assy_detail kaad ON kaad.partId = tsd.prPerPartID  \n" +
                "						AND kaad.refSalesOrderDetID = tsd.salesOrderDetailID  \n" +
                "						AND kaad.isDeleted = 0  \n" +
                "			WHERE 	kaad.id IS NULL;  \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_lineitems */  \n" +
                "			INSERT INTO kit_allocation_lineitems (  \n" +
                "				refSalesOrderDetID, 		refRfqLineitem, 		lineID, 		qpa,  \n" +
                "				dnpQty,     			isInstall,     			isPurchase,     	isBuyDNPQty,  \n" +
                "				custPN,     			custPNID,     			uomID,     		partID,  \n" +
                "				numOfPosition,  		DESCRIPTION,     		restrictCPNUseWithPermissionStep,  \n" +
                "				restrictCPNUsePermanentlyStep, 	restrictCPNUseInBOMStep,     	customerApprovalCPN,    isNotRequiredKitAllocation,  \n" +
                "				notRequiredKitAllocationReason, createdBy,     			updatedBy,    		createByRoleId,  \n" +
                "				updateByRoleId,		refDesig,	customerRev,	customerDescription,	dnpDesig,	programingStatus,  \n" +
                "                cust_lineID,	substitutesAllow,	numOfRows, customerPartDesc,  \n" +
                "                qpaDesignatorStep, mergeLines, lineMergeStep, duplicateCPNStep, requireMountingTypeStep, requireFunctionalTypeStep,  \n" +
                "				refDesigCount, isObsoleteLine, customerApprovalForQPAREFDESStep, customerApprovalForBuyStep, customerApprovalForPopulateStep,  \n" +
                "				customerApprovalCPNBy, customerApprovalCPNDate, dnpDesigCount, requireMountingTypeError, requireFunctionalTypeError,  \n" +
                "				dnpQPARefDesStep, customerApprovalForDNPQPAREFDESStep, customerApprovalForDNPBuyStep, isSupplierToBuy  \n" +
                "			)  \n" +
                "			SELECT 	tlt.refSalesOrderDetID,	    		tlt.id,			tlt.lineID,			tlt.qpa,  \n" +
                "				tlt.dnpQty,				tlt.isInstall,		tlt.isPurchase, 	    	tlt.isBuyDNPQty,  \n" +
                "				tlt.custPN, 	      	    		tlt.custPNID,	    	tlt.uomID, 		    	tlt.partID,  \n" +
                "				tlt.numOfPosition,			tlt.description,	tlt.restrictCPNUseWithPermissionStep,  \n" +
                "				tlt.restrictCPNUsePermanentlyStep,	tlt.restrictCPNUseInBOMStep,				tlt.customerApprovalCPN,  \n" +
                "				tlt.isNotRequiredKitAllocation,		tlt.notRequiredKitAllocationReason,    		pUserID,  \n" +
                "				pUserID,				pRoleID,     		pRoleID,	tlt.refDesig,	tlt.customerRev,	tlt.customerDescription,  \n" +
                "                tlt.dnpDesig,	tlt.programingStatus,	tlt.cust_lineID,	tlt.substitutesAllow,	tlt.numOfRows, tlt.customerPartDesc,  \n" +
                "                tlt.qpaDesignatorStep, 	tlt.mergeLines, 	tlt.lineMergeStep, 		tlt.duplicateCPNStep, 		tlt.requireMountingTypeStep,  \n" +
                "                tlt.requireFunctionalTypeStep, 	tlt.refDesigCount, 		tlt.isObsoleteLine, 	tlt.customerApprovalForQPAREFDESStep,  \n" +
                "                tlt.customerApprovalForBuyStep, 	tlt.customerApprovalForPopulateStep, 	tlt.customerApprovalCPNBy,  \n" +
                "                tlt.customerApprovalCPNDate, 	tlt.dnpDesigCount, 		tlt.requireMountingTypeError, 	tlt.requireFunctionalTypeError,  \n" +
                "				tlt.dnpQPARefDesStep, 		tlt.customerApprovalForDNPQPAREFDESStep, 		tlt.customerApprovalForDNPBuyStep, 	tlt.isSupplierToBuy  \n" +
                "			FROM 	tempResultForLineItem tlt  \n" +
                "			LEFT JOIN kit_allocation_lineitems kal ON kal.refSalesOrderDetID = tlt.refSalesOrderDetID  \n" +
                "							AND kal.partID = tlt.partID  \n" +
                "							AND kal.refRfqLineitem = tlt.id  \n" +
                "							AND kal.isDeleted = 0  \n" +
                "			WHERE 	kal.id IS NULL;  \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_lineitems_alternatepart */  \n" +
                "			INSERT INTO kit_allocation_lineitems_alternatepart (  \n" +
                "				refSalesOrderDetID,		refKitAllocationLineItemId,     	refRfqLineitem,     		refRfqLineItemAlternatePartId,  \n" +
                "				distributor,     		distMfgCodeID,     			distPN,     			distMfgPNID,  \n" +
                "				mfgCode,     			mfgCodeID,     				mfgPN,     			mfgPNID,  \n" +
                "				DESCRIPTION,    		RoHSStatusID,  \n" +
                "				parttypeID,     		mountingtypeID,     			partcategoryID,     		partID,  \n" +
                "				customerApproval,     		customerApprovalBy,     		customerApprovalDate,   	restrictUsePermanentlyStep,  \n" +
                "				restrictUseWithPermissionStep, 	restrictUseInBOMStep,     		restrictUseInBOMWithPermissionStep,  \n" +
                "				mismatchMountingTypeStep,     	approvedMountingType,     		mismatchFunctionalCategoryStep,	uomMismatchedStep,  \n" +
                "				restrictUseInBOMExcludingAliasStep,	    				restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "				restrictUseExcludingAliasStep,	restrictUseExcludingAliasWithPermissionStep,                          	createdBy,  \n" +
                "				updatedBy,    createByRoleId,    	updateByRoleId,   mfgVerificationStep, 	mfgDistMappingStep,  \n" +
                "				mfgCodeStep, distVerificationStep, distCodeStep, getMFGPNStep, obsoletePartStep, mfgGoodPartMappingStep,  \n" +
                "				mfgPNStep, distPNStep, badMfgPN, distGoodPartMappingStep, nonRohsStep, epoxyStep, invalidConnectorTypeStep,  \n" +
                "				duplicateMPNInSameLineStep, pickupPadRequiredStep, matingPartRquiredStep, driverToolsRequiredStep,  \n" +
                "				functionalTestingRequiredStep, mismatchValueStep, mismatchPackageStep, mismatchToleranceStep,  \n" +
                "				mismatchTempratureStep, mismatchPowerStep, programingRequiredStep, mismatchColorStep, isCustomerUnAppoval,  \n" +
                "				customerUnAppovalBy, customerUnAppovalDate, mismatchNumberOfRowsStep, partPinIsLessthenBOMPinStep, tbdPartStep,  \n" +
                "				exportControlledStep, isUnlockApprovedPart, unknownPartStep, defaultInvalidMFRStep, suggestedGoodPartStep,  \n" +
                "				suggestedGoodDistPartStep, mismatchRequiredProgrammingStep, mappingPartProgramStep, mismatchCustomPartStep,  \n" +
                "				suggestedByApplicationMsg, suggestedByApplicationStep, mismatchProgrammingStatusStep  \n" +
                "			)  \n" +
                "			SELECT 	tlia.refSalesOrderDetID, 	fun_getKitLineItemPKIdForKitAlternate(tlia.rfqLineItemsID, pSalesOrderDetailID) refKitAllocationLineItemId,  \n" +
                "				tlia.rfqLineItemsID,		tlia.id,			tlia.distributor,		tlia.distMfgCodeID,  \n" +
                "				tlia.distPN, 	    		tlia.distMfgPNID,		tlia.mfgCode,			tlia.mfgCodeID,  \n" +
                "				tlia.mfgPN,			tlia.mfgPNID,			tlia.description,  \n" +
                "                tlia.RoHSStatusID,		tlia.parttypeID, 		tlia.mountingtypeID,  \n" +
                "				tlia.partcategoryID,		tlia.partID,			tlia.customerApproval,		tlia.customerApprovalBy,  \n" +
                "				tlia.customerApprovalDate,	tlia.restrictUsePermanentlyStep,				tlia.restrictUseWithPermissionStep,  \n" +
                "				tlia.restrictUseInBOMStep,	tlia.restrictUseInBOMWithPermissionStep, 	    		tlia.mismatchMountingTypeStep,  \n" +
                "				tlia.approvedMountingType,	tlia.mismatchFunctionalCategoryStep,		    		tlia.uomMismatchedStep,  \n" +
                "				tlia.restrictUseInBOMExcludingAliasStep,	    		tlia.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "				tlia.restrictUseExcludingAliasStep,		    		tlia.restrictUseExcludingAliasWithPermissionStep,  \n" +
                "				pUserID, pUserID,    pRoleID,     pRoleID, tlia.mfgVerificationStep, 	tlia.mfgDistMappingStep,  \n" +
                "				tlia.mfgCodeStep, tlia.distVerificationStep, tlia.distCodeStep, tlia.getMFGPNStep, tlia.obsoletePartStep, tlia.mfgGoodPartMappingStep,  \n" +
                "				tlia.mfgPNStep, tlia.distPNStep, tlia.badMfgPN, tlia.distGoodPartMappingStep, tlia.nonRohsStep, tlia.epoxyStep, tlia.invalidConnectorTypeStep,  \n" +
                "				tlia.duplicateMPNInSameLineStep, tlia.pickupPadRequiredStep, tlia.matingPartRquiredStep, tlia.driverToolsRequiredStep,  \n" +
                "				tlia.functionalTestingRequiredStep, tlia.mismatchValueStep, tlia.mismatchPackageStep, tlia.mismatchToleranceStep,  \n" +
                "				tlia.mismatchTempratureStep, tlia.mismatchPowerStep, tlia.programingRequiredStep, tlia.mismatchColorStep, tlia.isCustomerUnAppoval,  \n" +
                "				tlia.customerUnAppovalBy, tlia.customerUnAppovalDate, tlia.mismatchNumberOfRowsStep, tlia.partPinIsLessthenBOMPinStep, tlia.tbdPartStep,  \n" +
                "				tlia.exportControlledStep, tlia.isUnlockApprovedPart, tlia.unknownPartStep, tlia.defaultInvalidMFRStep, tlia.suggestedGoodPartStep,  \n" +
                "				tlia.suggestedGoodDistPartStep, tlia.mismatchRequiredProgrammingStep, tlia.mappingPartProgramStep, tlia.mismatchCustomPartStep,  \n" +
                "				tlia.suggestedByApplicationMsg, tlia.suggestedByApplicationStep, tlia.mismatchProgrammingStatusStep  \n" +
                "			FROM 	tempResultForLineItemAlternatePart tlia  \n" +
                "			LEFT JOIN kit_allocation_lineitems_alternatepart kala ON tlia.refSalesOrderDetID = kala.refSalesOrderDetID  \n" +
                "							AND tlia.partID = kala.partID  \n" +
                "							AND tlia.rfqLineItemsID = kala.refRfqLineitem  \n" +
                "							AND tlia.mfgPNID = kala.mfgPNID  \n" +
                "							AND kala.isDeleted = 0  \n" +
                "			WHERE 	kala.id IS NULL;  \n" +
                "  \n" +
                "			CALL Sproc_GenerateWarehouseForKit(pSalesOrderDetailID, pUserID, pRoleID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SELECT 1 AS IsSuccess, NULL AS ErrorCode;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS IsSuccess, 'ERR_KIT01' AS ErrorCode;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForLineItemAlternatePart;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForLineItem;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForUpdate;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_DeleteRFQAssyDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_DeleteRFQAssyDetails`(  \n" +
                "	IN pRFQAssyID INT,  \n" +
                "	IN pPartID INT,  \n" +
                "    IN pDeleteOption INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE pCustShippingAddressID INT;  \n" +
                "DECLARE pCustBillingAddressID INT;  \n" +
                "DECLARE pCustTermsID INT;  \n" +
                "DECLARE pQuoteInDate DATETIME;  \n" +
                "DECLARE pQuoteDueDate DATETIME;  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                " BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "START TRANSACTION;  \n" +
                "  \n" +
                "		IF pDeleteOption IS NOT NULL AND pDeleteOption = 1 THEN  \n" +
                "				/* Update BOM Internal Version */  \n" +
                "				CALL Sproc_UpdatePartInternalVersion (pPartID);  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		/* delete BOM Alternate part detail */  \n" +
                "			UPDATE rfq_lineitems_alternatepart rla  \n" +
                "			SET  \n" +
                "				rla.isDeleted = 1,  \n" +
                "				rla.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				rla.deletedBy = pUserID,  \n" +
                "				rla.deleteByRoleId = pRoleID  \n" +
                "			WHERE rla.partID = pPartID AND rla.isDeleted = 0;  \n" +
                "		/* delete BOM line detail */  \n" +
                "			UPDATE rfq_lineitems rl  \n" +
                "            SET  \n" +
                "				rl.isDeleted = 1,  \n" +
                "                rl.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "                rl.deletedBy = pUserID,  \n" +
                "                rl.deleteByRoleId = pRoleID  \n" +
                "			WHERE rl.partID = pPartID AND rl.isDeleted = 0;  \n" +
                "  \n" +
                "		IF pDeleteOption IS NOT NULL AND pDeleteOption = 2 THEN  \n" +
                "        /* delete Version History detail */  \n" +
                "			UPDATE rfq_assembly_history  \n" +
                "			SET  \n" +
                "				isDeleted = 1,  \n" +
                "				deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				deletedBy = pUserID,  \n" +
                "				deleteByRoleId = pRoleID  \n" +
                "			WHERE partID = pPartID AND isDeleted = 0;  \n" +
                "  \n" +
                "            /* Update version to null for fresh version */  \n" +
                "            UPDATE component_bomsetting  \n" +
                "            SET  \n" +
                "				liveVersion = NULL,  \n" +
                "                liveInternalVersion = NULL,  \n" +
                "                updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "                updatedBy = pUserID,  \n" +
                "				updateByRoleId = pRoleID  \n" +
                "			WHERE refComponentID = pPartID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  -- UPDATE part_sub_assy_relationship ps SET ps.isDeleted = 1, ps.deletedAt = fun_DatetimetoUTCDateTime(), ps.deletedBy = pUserID WHERE ps.partID = pPartID AND ps.isDeleted = 0;  \n" +
                "  IF (pRFQAssyID IS NOT NULL AND pRFQAssyID <> 0) THEN  \n" +
                "		UPDATE rfq_assy_qtywise_bom_laborcosting_detail  \n" +
                "		SET  \n" +
                "			isDeleted = 1,  \n" +
                "			deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			deletedBy = pUserID,  \n" +
                "			deleteByRoleId = pRoleID  \n" +
                "		WHERE isDeleted = 0 AND rfqAssyBOMMountingID IN (SELECT id FROM rfq_assy_labor_bom_mountingtype_qpa_detail WHERE rfqAssyID = pRFQAssyID AND isDeleted = 0);  \n" +
                "  \n" +
                "		UPDATE rfq_assy_labor_bom_mountingtype_qpa_detail  \n" +
                "		SET  \n" +
                "			isDeleted = 1,  \n" +
                "			deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			deletedBy = pUserID,  \n" +
                "			deleteByRoleId = pRoleID  \n" +
                "		WHERE rfqAssyID = pRFQAssyID AND isDeleted = 0;  \n" +
                "  \n" +
                "		UPDATE rfq_labor_assy_qpa_detail  \n" +
                "		SET  \n" +
                "			isDeleted = 1,  \n" +
                "			deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			deletedBy = pUserID,  \n" +
                "			deleteByRoleId = pRoleID  \n" +
                "		WHERE rfqAssyID = pRFQAssyID AND isDeleted = 0;  \n" +
                "  \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity rcmlq  \n" +
                "		SET  \n" +
                "			rcmlq.isDeleted = 1,  \n" +
                "			rcmlq.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			rcmlq.deletedBy = pUserID,  \n" +
                "			rcmlq.deleteByRoleId = pRoleID  \n" +
                "		WHERE rcmlq.consolidateID IN (  \n" +
                "			SELECT rcml.id FROM rfq_consolidated_mfgpn_lineitem rcml WHERE rcml.rfqAssyID = pRFQAssyID AND rcml.isDeleted = 0 AND rcml.deletedAt IS NULL  \n" +
                "		);  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate rcmla  \n" +
                "		SET  \n" +
                "			rcmla.isDeleted = 1,  \n" +
                "			rcmla.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			rcmla.deletedBy = pUserID,  \n" +
                "			rcmla.deleteByRoleId = pRoleID  \n" +
                "		WHERE rcmla.consolidateID IN (  \n" +
                "			SELECT rcml.id FROM rfq_consolidated_mfgpn_lineitem rcml WHERE rcml.rfqAssyID = pRFQAssyID AND rcml.isDeleted = 0 AND rcml.deletedAt IS NULL  \n" +
                "		);  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem rcml  \n" +
                "		SET  \n" +
                "			rcml.isDeleted = 1,  \n" +
                "			rcml.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			rcml.deletedBy = pUserID,  \n" +
                "			rcml.deleteByRoleId = pRoleID  \n" +
                "		WHERE rcml.rfqAssyID = pRFQAssyID;  \n" +
                "  \n" +
                "		UPDATE rfq_assy_quote_submitted_assydetail rqsa  \n" +
                "		SET  \n" +
                "			rqsa.isDeleted = 1,  \n" +
                "			rqsa.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			rqsa.deletedBy = pUserID,  \n" +
                "			rqsa.deleteByRoleId = pRoleID  \n" +
                "		WHERE rqsa.rfqAssyID = pRFQAssyID AND rqsa.isDeleted = 0;  \n" +
                "  \n" +
                "		UPDATE rfq_assy_standard_class_detail rasc  \n" +
                "		SET  \n" +
                "			rasc.isDeleted = 1,  \n" +
                "			rasc.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			rasc.deletedBy = pUserID,  \n" +
                "			rasc.deleteByRoleId = pRoleID  \n" +
                "		WHERE rasc.refSubmittedQuoteID IN (  \n" +
                "			SELECT raqs.id FROM rfq_assemblies_quotation_submitted raqs WHERE raqs.rfqAssyID = pRFQAssyID AND raqs.isDeleted = 0 AND raqs.deletedAt IS NULL  \n" +
                "		);  \n" +
                "		UPDATE rfq_assy_quote_submitted_termsconditions raqstc  \n" +
                "		SET  \n" +
                "			raqstc.isDeleted = 1,  \n" +
                "			raqstc.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			raqstc.deletedBy = pUserID,  \n" +
                "			raqstc.deleteByRoleId = pRoleID  \n" +
                "		WHERE raqstc.refSubmittedQuoteID IN (  \n" +
                "			SELECT raqs.id FROM rfq_assemblies_quotation_submitted raqs WHERE raqs.rfqAssyID = pRFQAssyID AND raqs.isDeleted = 0 AND raqs.deletedAt IS NULL  \n" +
                "		);  \n" +
                "		SELECT quoteInDate, quoteDueDate INTO pQuoteInDate, pQuoteDueDate  \n" +
                "		FROM rfq_assemblies  \n" +
                "		WHERE id = pRFQAssyID;  \n" +
                "		SELECT custShippingAddressID, custBillingAddressID, custTermsID INTO pCustShippingAddressID, pCustBillingAddressID, pCustTermsID  \n" +
                "		FROM rfq_assemblies_quotation_submitted  \n" +
                "		WHERE rfqAssyID = pRFQAssyID AND isDeleted = 0 AND deletedAt IS NULL  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "  \n" +
                "		UPDATE rfq_assemblies_quotation_submitted raqs  \n" +
                "		SET  \n" +
                "			raqs.isDeleted = 1,  \n" +
                "			raqs.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			raqs.deletedBy = pUserID,  \n" +
                "			raqs.deleteByRoleId = pRoleID  \n" +
                "		WHERE raqs.rfqAssyID = pRFQAssyID AND raqs.isDeleted = 0;  \n" +
                "		INSERT INTO rfq_assemblies_quotation_submitted (rfqAssyID,	quoteNumber,	quoteInDate,	quoteDueDate,	quoteSubmitDate,  \n" +
                "							bomInternalVersion,	BOMIssues,	OtherNotes,	isDeleted,	createdBy,  \n" +
                "							createdAt, 	updatedBy, 	updatedAt, 	deletedBy, 	deletedAt,  \n" +
                "							custShippingAddressID, 	custBillingAddressID, 	custTermsID,	bomLastVersion,  \n" +
                "							promotions)  \n" +
                "						VALUES (pRFQAssyID,	NULL, 		pQuoteInDate,	pQuoteDueDate,	NULL,  \n" +
                "							NULL,			NULL,		NULL,		0,		pUserID,  \n" +
                "							fun_DatetimetoUTCDateTime(),pUserID,	fun_DatetimetoUTCDateTime(),NULL,		NULL,  \n" +
                "							pCustShippingAddressID,	pCustBillingAddressID,	pCustTermsID,	NULL,  \n" +
                "							NULL);  \n" +
                "		UPDATE rfq_assy_quotations_additionalcost raqac  \n" +
                "		SET  \n" +
                "			raqac.isDeleted = 1,  \n" +
                "			raqac.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			raqac.deletedBy = pUserID,  \n" +
                "			raqac.deleteByRoleId = pRoleID  \n" +
                "		WHERE raqac.rfqAssyQuoteID IN (  \n" +
                "			SELECT raq.id FROM rfq_assy_quotations raq WHERE raq.rfqAssyID = pRFQAssyID AND raq.isDeleted = 0 AND raq.deletedAt IS NULL  \n" +
                "		);  \n" +
                "		UPDATE rfq_assy_quotations raq  \n" +
                "		SET  \n" +
                "			raq.isDeleted = 1,  \n" +
                "			raq.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			raq.deletedBy = pUserID,  \n" +
                "			raq.deleteByRoleId = pRoleID  \n" +
                "		WHERE raq.rfqAssyID = pRFQAssyID AND raq.isDeleted = 0;  \n" +
                "		DELETE FROM rfq_assy_autopricingstatus WHERE rfqAssyID = pRFQAssyID AND isPurchaseApi=0;  \n" +
                "		DELETE FROM rfq_lineitem_autopricingstatus WHERE rfqAssyID = pRFQAssyID AND isPurchaseApi=0;  \n" +
                "  \n" +
                "		UPDATE rfq_assemblies ra  \n" +
                "		SET  \n" +
                "			ra.isReadyForPricing = FALSE,  \n" +
                "			ra.status = 1,  \n" +
                "			ra.isBOMVerified = FALSE,  \n" +
                "			ra.quoteFinalStatus = 1,  \n" +
                "			ra.partCostingBOMInternalVersion = NULL,  \n" +
                "			ra.partcostingBOMIssue = NULL  \n" +
                "		WHERE ra.id = pRFQAssyID;  \n" +
                "	END IF;  \n" +
                "    UPDATE component_bomsetting c  \n" +
                "	SET  \n" +
                "		c.isBOMVerified = NULL,  \n" +
                "        c.exteranalAPICallStatus = NULL  \n" +
                "	WHERE c.refComponentID = pPartID;  \n" +
                " 	CALL Sproc_CreatePartAssyBomRelationship(pPartID,pUserID);  \n" +
                " COMMIT;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_DeleteRFQ_LineItems_AlternatePart_CPN` ;  \n" +
                "CREATE PROCEDURE `Sproc_DeleteRFQ_LineItems_AlternatePart_CPN`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pUserID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE totalCount INT DEFAULT 0;  \n" +
                "	DECLARE totalCPNCount INT DEFAULT 0;  \n" +
                "	DECLARE currIndex INT DEFAULT 0;  \n" +
                "	DECLARE currCPNIndex INT DEFAULT 0;  \n" +
                "	DECLARE totalMFGPNCount INT DEFAULT 0;  \n" +
                "	DECLARE currMFGPNIndex INT DEFAULT 0;  \n" +
                "	DECLARE currLineID INT;  \n" +
                "	DECLARE currPartID INT;  \n" +
                "	DECLARE currMFGPNID INT;  \n" +
                "	DECLARE currCustPNID INT;  \n" +
                "	DECLARE countAlternatePart INT DEFAULT 0;  \n" +
                "	DECLARE totMFGPN INT DEFAULT 0;  \n" +
                "	DECLARE mfgPnIndex INT DEFAULT 0;  \n" +
                "	DECLARE currMFGPN TEXT;  \n" +
                "	DECLARE currCustMFGPNID INT;  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_update_bom_list;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_update_bom_list (partId INT);  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS existBOMCPNResult AS  \n" +
                "	SELECT  rl.id id,  rl.custPNID  \n" +
                "	FROM rfq_lineitems AS rl  \n" +
                "	WHERE partId = pPartID AND rl.isDeleted = 0 AND rl.custPNID IS NOT NULL;  \n" +
                "  \n" +
                "	-- SELECT * FROM existBOMCPNResult;  \n" +
                "	SELECT COUNT(1) INTO totalCPNCount FROM existBOMCPNResult;  \n" +
                "	IF totalCPNCount > 0 THEN  \n" +
                "		WHILE currCPNIndex < totalCPNCount DO  \n" +
                "		SELECT a.custPNID  \n" +
                "			INTO 	currCustPNID  \n" +
                "			FROM 	existBOMCPNResult a LIMIT currCPNIndex, 1;  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS existCPNResult AS  \n" +
                "		SELECT id , refComponentID FROM component_cust_alias_rev_pn  \n" +
                "		WHERE refCPNPartID = currCustPNID AND isDeleted = 0 AND  \n" +
                "		refComponentID NOT IN (  \n" +
                "			SELECT rla.mfgPNID FROM rfq_lineitems_alternatepart rla  \n" +
                "			WHERE rla.partId = pPartID AND rla.rfqLineItemsID IN (  \n" +
                "				SELECT id FROM rfq_lineitems  \n" +
                "				WHERE partId = pPartID AND custPNID = currCustPNID AND isDeleted = 0  \n" +
                "				)  \n" +
                "			AND rla.isDeleted = 0);  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS existBOMResult AS  \n" +
                "		SELECT  rl.id id,  rl.partID  \n" +
                "		FROM rfq_lineitems AS rl  \n" +
                "		WHERE partId != pPartID AND rl.custPNID =  currCustPNID AND rl.isDeleted = 0 ;  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO totalCount FROM existBOMResult;  \n" +
                "		IF totalCount > 0 THEN  \n" +
                "			WHILE currIndex < totalCount DO  \n" +
                "				SELECT  a.id,		a.partID  \n" +
                "				INTO 	currLineID	,currPartID  \n" +
                "				FROM 	existBOMResult a LIMIT currIndex, 1;  \n" +
                "  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS existAlternateResult AS  \n" +
                "				SELECT id, mfgPNID FROM rfq_lineitems_alternatepart rla  \n" +
                "				WHERE rfqLineItemsID IN (  \n" +
                "					SELECT id FROM rfq_lineitems  \n" +
                "					WHERE partId = currPartID AND custPNID = currCustPNID  \n" +
                "					AND isDeleted = 0  \n" +
                "					)  \n" +
                "				AND mfgPNID IN (SELECT refComponentID FROM existCPNResult) AND isDeleted = 0;  \n" +
                "  \n" +
                "				SET countAlternatePart = 0;  \n" +
                "				SELECT COUNT(1) INTO countAlternatePart FROM existAlternateResult;  \n" +
                "  \n" +
                "				-- IF (countAlternatePart > 0) THEN  \n" +
                "				-- 	CALL Sproc_UpdatePartInternalVersion (currPartID);  \n" +
                "				-- 	UPDATE rfq_lineitems_alternatepart SET isDeleted = 1 , deletedAt = fun_DatetimetoUTCDateTime(), deletedBy = pUserID WHERE id IN (SELECT id FROM existAlternateResult);  \n" +
                "				-- END IF;  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE existAlternateResult;  \n" +
                "				SET currIndex = currIndex + 1;  \n" +
                "  \n" +
                "			END WHILE;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET currCPNIndex = currCPNIndex + 1;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;  \n" +
                "		CREATE TEMPORARY TABLE t_CustMFGPn(cpnID INT,  txt TEXT );  \n" +
                "		INSERT INTO t_CustMFGPn(cpnID, txt)  \n" +
                "		SELECT cpn.refCPNPartID, GROUP_CONCAT(c.mfgPN SEPARATOR ', ') FROM component_cust_alias_rev_pn cpn  \n" +
                "		JOIN vu_component c ON c.id = cpn.refComponentID  \n" +
                "		WHERE cpn.deletedAt IS NULL AND cpn.id IN (SELECT id FROM existCPNResult) GROUP BY refCPNPartID;  \n" +
                "  \n" +
                "		/* add all mapping mfgPN history with internal version */  \n" +
                "		SELECT COUNT(*) FROM t_CustMFGPn INTO totMFGPN;  \n" +
                "  \n" +
                "		WHILE mfgPnIndex < totMFGPN DO  \n" +
                "  \n" +
                "		SELECT  a.txt,		a.cpnID  \n" +
                "		INTO 	currMFGPN	,currCustMFGPNID  \n" +
                "		FROM 	t_CustMFGPn a LIMIT mfgPnIndex, 1;  \n" +
                "  \n" +
                "		SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM vu_component WHERE id = currCustMFGPNID;  \n" +
                "		SET pLiveInternalVersion  = pLiveInternalVersion  + 1;  \n" +
                "  /*  \n" +
                "		INSERT INTO rfq_assembly_history (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "							oldValue,newValue,description, changeVersion,createdAt,createdBy)  \n" +
                "		VALUES 	(\"component\", currCustMFGPNID, NULL,NULL, currCustMFGPNID, \"MPN\",  \n" +
                "			NULL, NULL ,CONCAT(\"MFG PN \",currMFGPN, \" Deleted\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)) , fun_DatetimetoUTCDateTime(),puserID);  \n" +
                "  \n" +
                "		UPDATE component  \n" +
                "		SET liveInternalVersion = pLiveInternalVersion, liveVersion = CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)) WHERE id = currCustMFGPNID;  \n" +
                "  */  \n" +
                "		SET mfgPnIndex = mfgPnIndex + 1;  \n" +
                "		END WHILE;  \n" +
                "  \n" +
                "		-- UPDATE component_cust_alias_rev_pn SET isDeleted = 1 , deletedAt = fun_DatetimetoUTCDateTime(), deletedBy = pUserID WHERE id IN (SELECT id FROM existCPNResult);  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE t_CustMFGPn;  \n" +
                "		DROP TEMPORARY TABLE existBOMResult;  \n" +
                "		DROP TEMPORARY TABLE existCPNResult;  \n" +
                "  \n" +
                "		-- INSERT INTO temp_component_update_bom_list  \n" +
                "		-- values EXECUTE Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                "  \n" +
                "		CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID,FALSE);  \n" +
                "		INSERT INTO temp_component_update_bom_list(partId) SELECT partId FROM temp_component_update_bom;  \n" +
                "		END WHILE;  \n" +
                "		SELECT DISTINCT * FROM temp_component_update_bom_list;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMHeaderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMHeaderList`(  \n" +
                "	IN prfqAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vAssyLevel INT;  \n" +
                "DECLARE	vAssyCount INT;  \n" +
                "DECLARE vQuoteCount INT;  \n" +
                "		SELECT (MAX(psar.LEVEL)+1) INTO vAssyLevel  \n" +
                "        FROM rfq_assemblies ra  \n" +
                "        JOIN part_sub_assy_relationship psar ON psar.partID = ra.partID AND psar.isdeleted = 0  \n" +
                "        WHERE ra.id = prfqAssyID;  \n" +
                "  \n" +
                "        SELECT COUNT(1) INTO vAssyCount FROM rfq_assemblies  \n" +
                "        WHERE rfqrefID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = prfqAssyID AND isdeleted=0) AND isdeleted = 0;  \n" +
                "  \n" +
                "        SELECT COUNT(1) INTO vQuoteCount FROM rfq_assemblies_quotation_submitted raqs WHERE raqs.rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL AND isDeleted = 0;  \n" +
                "	   SELECT   ra.rfqrefID AS quoteGroupNumber,ra.quoteinDate,ra.quoteDueDate,ra.partID,ra.quoteFinalStatus, ra.isSummaryComplete, c.mfgpn AS assyNumber,c.rev AS revision,  \n" +
                "	   jt.name AS jobType, CASE WHEN c.bomLock=0 THEN '' ELSE 'BOM is locked' END bomlockStatus,  \n" +
                "	   c.PIDCode AS assyID,c.mfgPNDescription,c.specialNote,ra.assemblyTypeID,rat.name AS assyType,  \n" +
                "       fun_getSamplePicturesUploadCount(ra.partID) sampleImageCnt, mc.mfgType AS mfgType, vAssyLevel AS assyLevel, vAssyCount AS assyCount,  \n" +
                "       ra.quoteValidTillDate,  \n" +
                "	   c.liveVersion AS liveInternalVersion,rh.id,rh.name AS rohs,rh.rohsIcon,c.rev,c.nickname,c.businessRisk,  \n" +
                "	   vQuoteCount AS totalQuoteCount,  \n" +
                "	   rasq.quoteNumber AS quoteNumber, rasq.bomLastVersion AS bomLastVersion, rasq.quoteSubmitDate AS quoteSubmitDate, rasq.bomInternalVersion  AS bomInternalVersion, rasq.id lastQuoteID,  \n" +
                "	   (SELECT fun_getMfgCodeAndNameByID(rf.customerid) FROM rfqforms rf WHERE id=ra.rfqrefID LIMIT 1) AS customerName,  \n" +
                "	   (CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                "			  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                "			  WHEN ra.status = 3 THEN 'Won'  \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'  \n" +
                "		 WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "	   (CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'  \n" +
                "		 WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'  \n" +
                "	 	 WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'  \n" +
                "		 WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,  \n" +
                "         (  \n" +
                "			CASE  WHEN IFNULL(ra.isSummaryComplete,0)=0 THEN  \n" +
                "			(  \n" +
                "                SELECT GROUP_CONCAT(CONCAT(IFNULL(cs.fullName,''),' ',IFNULL(css.className,''), '######', IFNULL(css.colorCode,'')) ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')  \n" +
                "                FROM component_standard_details csd  \n" +
                "                LEFT JOIN certificate_standards cs ON csd.certificatestandardID=cs.certificatestandardid  \n" +
                "                LEFT JOIN standard_class css ON csd.classID=css.classID WHERE csd.componentid= ra.partID AND csd.isDeleted = 0  \n" +
                "			)  \n" +
                "            ELSE  \n" +
                "            (  \n" +
                "				SELECT GROUP_CONCAT(CONCAT(IFNULL(cs.fullName,''),' ',IFNULL(css.className,''), '######', IFNULL(css.colorCode,'')) ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')  \n" +
                "                FROM rfq_assy_standard_class_detail csd  \n" +
                "                LEFT JOIN certificate_standards cs ON csd.standardID=cs.certificatestandardid  \n" +
                "                LEFT JOIN standard_class css ON csd.standardClassIds=css.classID  \n" +
                "                WHERE csd.refSubmittedQuoteID=(SELECT id FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1)  \n" +
                "			)  \n" +
                "			END  \n" +
                "		)AS standards, ra.isActivityStart, ra.activityStartBy, c.isCustom,c.custAssyPN  \n" +
                "	   FROM rfq_assemblies ra  \n" +
                "       INNER JOIN vu_component c ON c.id=ra.partID  \n" +
                "       INNER JOIN mfgcodemst mc ON mc.id = c.mfgCodeID  \n" +
                "       INNER JOIN rfq_assy_typemst rat ON rat.id=ra.assemblyTypeID  \n" +
                "	   INNER JOIN rfq_rohsmst rh ON rh.id=c.RoHSStatusID  \n" +
                "	   INNER JOIN jobtype jt ON jt.id = ra.jobTypeID  \n" +
                "       LEFT JOIN (SELECT id,rfqAssyID,quoteNumber,bomLastVersion,bomInternalVersion,quoteSubmitDate  \n" +
                "					FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL ORDER BY id DESC LIMIT 1) rasq ON rasq.rfqAssyID = ra.id  \n" +
                "       WHERE ra.id= prfqAssyID AND ra.isdeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMAssyHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMAssyHistory`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pNarrative TINYINT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "  \n" +
                "    SET @temp_Sproc_GetBOMAssyHistory = CONCAT(\"SELECT 	h.id,h.tableName,h.rfqLineItemID,h.rfqAssyID,ia.mfgcode, h.mfgPN,h.columnName,h.isResearchStatus,  \n" +
                "	h.oldValue,h.newValue,h.changeVersion,  \n" +
                "    fun_ApplyCommonDateTimeFormatByParaValue(h.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "    h.description,fun_getTextAngularData(h.narrative,'\",vTextAngularKeyCode,\"') narrative,h.time,  \n" +
                "	fun_getUserNameByID(h.updatedBy) AS CreatedUser,i.lineID,a.assemblyNumber,a.assemblyRev,a.assemblyDescription,  \n" +
                "	a.assemblyVersion,c.liveInternalVersion, ro.name AS `rohsComplientConvertedValue`,  \n" +
                "	ro.rohsIcon AS `rohsIcon`, h.mfgCodeID, h.mfgPNID, mf.mfgCode AS mfgMasterCode,  \n" +
                "	co.restrictUsePermanently,co.restrictUSEwithpermission,co.restrictPackagingUsePermanently,co.restrictPackagingUseWithpermission, co.isCustom, co.custAssyPN  \n" +
                "	FROM rfq_assembly_history h  \n" +
                "	INNER JOIN vu_component c ON c.id = h.partId  \n" +
                "	LEFT OUTER JOIN rfq_lineitems i ON i.id = h.rfqLineItemID  \n" +
                "	LEFT OUTER JOIN rfq_lineitems_alternatepart ia ON ia.id = h.refTransID AND h.tableName = 'rfq_lineitems_alternatepart'  \n" +
                "	LEFT JOIN vu_component co ON co.id = h.mfgPNID  \n" +
                "	LEFT JOIN mfgcodemst mf ON h.mfgcodeID = mf.id  \n" +
                "	LEFT JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id  \n" +
                "	LEFT OUTER JOIN rfq_assemblies a ON a.id = h.rfqAssyID  \n" +
                "	WHERE h.partID = \",pPartID,\" and h.isDeleted = 0\");  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY ID DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pNarrative = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , \" AND isResearchStatus = 1\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\"SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetBOMAssyHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement3 = CONCAT(\"select * from ( \", @temp_Sproc_GetBOMAssyHistory,\" ) c  \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(  \n" +
                "	IN prfqAssyID INT,  \n" +
                "    IN pAssyQuoteSubmittedID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "  DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "   DECLARE v_mfrFormat INT;  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormat;  \n" +
                "		# select list for quote summary details of last submitted quote  \n" +
                "			SELECT unitPrice, qty, turnTime,priceGroup,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN CEILING(7*(turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "            WHEN qo.turnType = 'D' THEN turntime  \n" +
                "            WHEN qo.turnType = 'W' THEN (turntime*7) END) turntimedays,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN 'Business Days'  \n" +
                "            WHEN qo.turnType = 'D' THEN 'Week Days'  \n" +
                "            WHEN qo.turnType = 'W' THEN 'Week' END) turnType,  \n" +
                "            qo.excessMaterialCost, qo.extendedCost, (qo.nreCost + qo.toolingCost) nreCost ,(qo.nreDays + qo.toolingDays) nreDays, qo.nretoolingdescription,  \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime,  qo.allCost, qo.allDays  \n" +
                "			FROM rfq_assy_quote_submitted_assydetail qo  \n" +
                "			JOIN rfq_assemblies_quotation_submitted sb ON sb.id = qo.refSubmittedQuoteID  \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            ORDER BY qo.rfqPriceGroupId,qo.qty, qo.turnTime;  \n" +
                "  \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy  \n" +
                "			SELECT ra.id rfqAssyID, ra.partID, rf.id quoteID, part.PIDCode , part.isCustom , part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,  \n" +
                "            part.custAssyPN, fun_GetFormattedMfgCode(cu.mfgCode,cu.mfgName,v_mfrFormat) mfrCompanyName,  cu.mfgName,cu.mfgCode,rf.customerid,rqs.custBillingAddressID, IFNULL(rqs.custTermsID, cu.custTermsID) AS custTermsID, rqs.custShippingAddressID,  \n" +
                "            rqs.custShippingContactPersonID,rqs.custBillingContactPersonID,  \n" +
                "            (CASE WHEN rqs.quoteNumber IS NOT NULL THEN IFNULL(rqs.BOMIssues,'')  \n" +
                "            WHEN rqs.quoteNumber IS NULL THEN IFNULL(fun_getQuoteSubjectToFollowing(ra.id),'') END) AS BOMIssues,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN  \n" +
                "                    (  \n" +
                "						SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)  \n" +
                "					)  \n" +
                "                    ELSE  \n" +
                "                    (  \n" +
                "                    	SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID  \n" +
                "                    )  \n" +
                "                    END  \n" +
                "				)  \n" +
                "			)paymentTerm,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN  \n" +
                "                    (  \n" +
                "						SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)  \n" +
                "					)  \n" +
                "                    ELSE  \n" +
                "                    (  \n" +
                "                    	SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID  \n" +
                "                    )  \n" +
                "                    END  \n" +
                "				)  \n" +
                "			)termDays,  \n" +
                "            rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID, ra.assyNote,  \n" +
                "            fun_getTextAngularData(ra.additionalRequirement, vTextAngularKeyCode) additionalRequirement ,  \n" +
                "            rf.quoteNote, rt.name RFQType, jt.name JobType, rat.name AssyType,  \n" +
                "            fun_getTextAngularData(rqs.OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "            ra.isSummaryComplete, ra.isReadyForPricing, CONCAT(su.firstName,' ',su.lastName) `submittedBy`, su.emailAddress,  \n" +
                "            ra.quoteFinalStatus, ra.isCustomPartDetShowInReport,  \n" +
                "            fun_getTextAngularData(rqs.promotions, vTextAngularKeyCode) promotions,  \n" +
                "            ra.assyNote,    part.RoHSStatusID, ro.name AS rohsComplientConvertedValue, ro.rohsIcon AS rohsIconPath,  \n" +
                "            ro.rohsIcon AS rohsIcon,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN  \n" +
                "					(  \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "						FROM customer_addresses ca  \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "						WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'B'  \n" +
                "					)  \n" +
                "					ELSE  \n" +
                "					(  \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "						FROM customer_addresses ca  \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "						WHERE id = rqs.custBillingAddressID  \n" +
                "					)  \n" +
                "					END  \n" +
                "				)  \n" +
                "			) billingAddress,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN  \n" +
                "						(  \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "							FROM customer_addresses ca  \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "							WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "						)  \n" +
                "					ELSE  \n" +
                "						(  \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "							FROM customer_addresses ca  \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "							WHERE id = rqs.custShippingAddressID  \n" +
                "						)  \n" +
                "					END  \n" +
                "                )  \n" +
                "			) shippingAddress,  \n" +
                "            (  \n" +
                "				(  \n" +
                "				CASE WHEN ra.isSummaryComplete = 1 THEN  \n" +
                "					(  \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards  \n" +
                "						FROM rfq_assy_standard_class_detail csd  \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0  \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0  \n" +
                "						WHERE csd.refSubmittedQuoteID = rqs.id  \n" +
                "					)  \n" +
                "					ELSE  \n" +
                "					(  \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards  \n" +
                "						FROM component_standard_details  csd  \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0  \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0  \n" +
                "						WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = ra.id)  \n" +
                "					)  \n" +
                "                END  \n" +
                "				)  \n" +
                "			) standards,  \n" +
                "            (  \n" +
                "				(  \n" +
                "				CASE WHEN ra.isSummaryComplete = 0 AND (SELECT MAX(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyId = ra.id) = rqs.id THEN  \n" +
                "					(  \n" +
                "						(SELECT GROUP_CONCAT(dataelement SEPARATOR '<br/>') dataelementdata FROM (  \n" +
                "						SELECT CONCAT((CASE WHEN subFormName ='' THEN '' ELSE CONCAT('<b>',subFormName,'</b><br/>') END), GROUP_CONCAT(dataelement SEPARATOR '<br/>')) dataelement  \n" +
                "						FROM (SELECT (CASE WHEN refSubFormTransID IS NOT NULL THEN fun_getDataElementSubFormNameByID(refSubFormTransID) ELSE '' END) subFormName,  \n" +
                "						CONCAT(fun_getDataElementNameByID(dataElementID),': ',`value`) dataelement  \n" +
                "						FROM dataelement_transactionvalues WHERE entityID = -12 AND isDeleted = 0 AND refTransID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = ra.id)  \n" +
                "						)dataelementForms  \n" +
                "						GROUP BY subFormName  \n" +
                "						)a)  \n" +
                "					)  \n" +
                "					ELSE  \n" +
                "					(  \n" +
                "						   rqs.RFQMISCData  \n" +
                "					)  \n" +
                "                END  \n" +
                "				)  \n" +
                "			) dataelementdata,  \n" +
                "            (SELECT COUNT(1) > 0 FROM rfq_assemblies_quotation_submitted WHERE id>rqs.id AND rfqAssyID = ra.id AND isDeleted = 0) isQuoteHistory,  \n" +
                "            (CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                "			  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                "			  WHEN ra.status = 3 THEN 'Won'  \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'  \n" +
                "              WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "			ra.status rfq_statusID,  \n" +
                "            ra.winPrice, ra.isActivityStart,  \n" +
                "            TIMESTAMPDIFF(SECOND, ra.activityStartAt,fun_DatetimetoUTCDateTime()) activityStartAt, fun_getEmpployeeNameByUserID(ra.activityStartBy) userName,  \n" +
                "            ra.winQuantity,ra.activityStartBy,  \n" +
                "            fun_getTextAngularData(ra.reason,vTextAngularKeyCode) reason  \n" +
                "            FROM rfq_assemblies ra  \n" +
                "            JOIN rfq_assemblies_quotation_submitted rqs ON rqs.rfqAssyID = ra.id  \n" +
                "			JOIN rfqforms rf ON rf.id = ra.rfqrefID AND rf.isDeleted = 0  \n" +
                "            JOIN rfqtype rt ON rt.id = ra.rfqTypeID AND rt.isDeleted = 0  \n" +
                "            JOIN jobtype jt ON jt.id = ra.jobTypeID AND jt.isDeleted = 0  \n" +
                "            JOIN rfq_assy_typemst rat ON rat.id = ra.assemblyTypeID AND rat.isDeleted = 0  \n" +
                "			JOIN mfgcodemst cu ON cu.id = rf.customerid AND cu.isDeleted = 0  \n" +
                "			JOIN vu_component part ON part.id = ra.partID AND part.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_rohsmst ro ON ro.id = part.RoHSStatusID  \n" +
                "            LEFT JOIN users su ON su.id = ra.quoteSubmittedBy  \n" +
                "			WHERE ra.id= prfqAssyID AND rqs.id = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary  \n" +
                "			SELECT bomInternalVersion,BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID,  \n" +
                "			custShippingAddressID, custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "			fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate,  \n" +
                "			rfqAssyID, RFQMISCData, updateByRoleId, updatedAt, updatedBy  \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND id = pAssyQuoteSubmittedID ;  \n" +
                "  \n" +
                "   # select list select terms and conditions of submitted quote summary  \n" +
                "			SELECT qst.*, ec.name ecoTypeName, CONCAT('<ul><li>', GROUP_CONCAT(CONCAT(ecv.name, (CASE WHEN qst.note IS NOT NULL THEN CONCAT(' <b>Note:</b>', qst.note) ELSE '' END)) SEPARATOR '</li><li>'),'</li></ul>') ecoTypeValues  \n" +
                "            FROM rfq_assy_quote_submitted_termsconditions qst  \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID  \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID  \n" +
                "            WHERE qst.isDeleted = 0  \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            GROUP BY ecv.ecoTypeCatID;  \n" +
                "  \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote  \n" +
                "			SELECT csd.id, csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className stdclass  \n" +
                "            FROM rfq_assy_standard_class_detail csd  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0  \n" +
                "			WHERE csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "		# select letest submited quote summary detail  \n" +
                "			SELECT bomInternalVersion, BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID, custShippingAddressID,  \n" +
                "            custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "            fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate, rfqAssyID,  \n" +
                "            RFQMISCData, updateByRoleId, updatedAt, updatedBy  \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1;  \n" +
                "  \n" +
                "		#select list of Custom Part detail of assembly.  \n" +
                "  \n" +
                "			  SELECT *, (amount*requestedQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`,  com.mfgPn CustomPart,com.PIDCode,raqc.mfgPNID, com.custAssyPN,  \n" +
                "				qoa.id additi, qo.requestedQty, fun_getRoHSNameByID(com.RoHSStatusID) rohsName, fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon,  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'Material'  \n" +
                "				LEFT JOIN rfq_assy_quotations_customparts raqc ON raqc.rfqAssyQuoteID = qoa.rfqAssyQuoteID AND raqc.id = qoa.refCustomPartQuoteID AND qo.isDeleted = 0  \n" +
                "				LEFT JOIN vu_component com ON com.id = raqc.mfgPNID  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID AND qoa.refCustomPartQuoteID IS NOT NULL  \n" +
                "				#HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime,qdf.displayOrder  \n" +
                "			) a  \n" +
                "			GROUP BY requestedQty, turnTime,fieldName,amount,days;  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.  \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'NRE'  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "				HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime  \n" +
                "            ) a  \n" +
                "            GROUP BY fieldName,amount;  \n" +
                "  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.  \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'TooLing'  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "				HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime  \n" +
                "            ) a  \n" +
                "            GROUP BY fieldName,amount,toolingQty;  \n" +
                "  \n" +
                "		# Company detail  \n" +
                "		SELECT CONCAT(IFNULL(ci.street1, ', '),', ',IFNULL(ci.city,', '),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode,''))AS address,  \n" +
                "			ci.personName AS companyContactName,ci.registeredEmail AS companyEmail,ci.faxNumber,ci.contactNumber AS phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail AS email  \n" +
                "		FROM company_info ci  \n" +
                "		LEFT JOIN countrymst c ON ci.countryID=c.countryID AND c.isDeleted = 0  \n" +
                "		WHERE ci.isDeleted=0;  \n" +
                "		# select list of price Group detail  \n" +
                "            SELECT rpg.id priceGroupID, rpg.name priceGroup, rpg.qty, rpg.rfqAssyID,  \n" +
                "			com.mfgPN, com.PIDCode, ro.name rohsName, ro.rohsIcon, ra.partID ,com.isCustom, com.custAssyPN  \n" +
                "			FROM rfq_assy_submitted_price_group_detail rpg  \n" +
                "			JOIN rfq_assemblies ra ON ra.id = rpg.rfqAssyID  \n" +
                "			JOIN vu_component com ON com.id = ra.partID  \n" +
                "			JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID  \n" +
                "			WHERE rpg.refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            ORDER BY rpg.name;  \n" +
                "  \n" +
                "        # select list of price Group  \n" +
                "			SELECT DISTINCT `name` FROM rfq_assy_submitted_price_group_detail  \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            ORDER BY NAME;  \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary  \n" +
                "			SELECT qst.*, ec.name ecoTypeName, ecv.name ecoTypeValues FROM rfq_assy_quote_submitted_termsconditions qst  \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID  \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID  \n" +
                "            WHERE qst.isDeleted = 0  \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "  \n" +
                "		# total requote count  \n" +
                "			SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL AND isDeleted = 0;  \n" +
                "  \n" +
                "		#select list of standard certification detail of assembly for not submitted quote  \n" +
                "			SELECT csd.id, csd.certificateStandardID, csd.ClassID, cs.fullName standard,sc.className stdclass  \n" +
                "            FROM component_standard_details  csd  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0  \n" +
                "			WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID);  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails_report` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails_report`(  \n" +
                "	IN prfqAssyID INT(11),  \n" +
                "    IN pAssyQuoteSubmittedID INT(11)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "			# select list for quote summary details of last submitted quote  \n" +
                "			SELECT unitPrice, qty, turnTime,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN CEILING(7*(turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "            WHEN qo.turnType = 'D' THEN turntime  \n" +
                "            WHEN qo.turnType = 'W' THEN (turntime*7) END) turntimedays,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN 'Business Days'  \n" +
                "            WHEN qo.turnType = 'D' THEN 'Week Days'  \n" +
                "            WHEN qo.turnType = 'W' THEN 'Week' END) turnType  \n" +
                "            , qo.excessMaterialCost, qo.extendedCost, qo.nreCost,qo.nreDays,  \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime  \n" +
                "			FROM rfq_assy_quote_submitted_assydetail qo  \n" +
                "			JOIN rfq_assemblies_quotation_submitted sb ON sb.id = qo.refSubmittedQuoteID  \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy  \n" +
                "			SELECT ra.id rfqAssyID, ra.partID, rf.id quoteID, part.PIDCode, part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,  \n" +
                "            part.custAssyPN, cu.mfgName,cu.mfgCode,rf.customerid,rqs.custBillingAddressID, rqs.custTermsID AS custTermsID, rqs.custShippingAddressID,  \n" +
                "            IFNULL(rqs.BOMIssues,'') BOMIssues, (SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID) paymentTerm,  \n" +
                "            rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID, ra.assyNote, ra.additionalRequirement,rf.quoteNote, rt.name RFQType,  \n" +
                "            jt.name JobType, rat.name AssyType, rqs.OtherNotes,ra.isSummaryComplete, ra.isReadyForPricing, CONCAT(su.firstName,' ',su.lastName) `submittedBy`, su.emailAddress,  \n" +
                "            ra.quoteFinalStatus,rqs.promotions,ra.assyNote, ra.additionalRequirement,part.RoHSStatusID, ro.name AS rohsComplientConvertedValue, ro.rohsIcon,  \n" +
                "            fun_getAddressbyIDAndContactPersonID(rqs.custBillingAddressID,rqs.custBillingContactPersonID) billingAddress,  \n" +
                "            fun_getAddressbyIDAndContactPersonID(rqs.custShippingAddressID,rqs.custShippingContactPersonID) shippingAddress,  \n" +
                "            (  \n" +
                "				SELECT GROUP_CONCAT(CONCAT(cs.fullName,IFNULL(sc.className,'')) SEPARATOR ' | ') standards  \n" +
                "				FROM rfq_assy_standard_class_detail csd  \n" +
                "				JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0  \n" +
                "				LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0  \n" +
                "				WHERE csd.refSubmittedQuoteID = rqs.id  \n" +
                "			) standards  \n" +
                "            FROM rfq_assemblies ra  \n" +
                "            JOIN rfq_assemblies_quotation_submitted rqs ON rqs.rfqAssyID = ra.id  \n" +
                "			JOIN rfqforms rf ON rf.id = ra.rfqrefID AND rf.isDeleted = 0  \n" +
                "            JOIN rfqtype rt ON rt.id = ra.rfqTypeID AND rt.isDeleted = 0  \n" +
                "            JOIN jobtype jt ON jt.id = ra.jobTypeID AND jt.isDeleted = 0  \n" +
                "            JOIN rfq_assy_typemst rat ON rat.id = ra.assemblyTypeID AND rat.isDeleted = 0  \n" +
                "			JOIN mfgcodemst cu ON cu.id = rf.customerid AND cu.isDeleted = 0  \n" +
                "			JOIN vu_component part ON part.id = ra.partID AND part.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_rohsmst ro ON ro.id = part.RoHSStatusID  \n" +
                "            LEFT JOIN users su ON su.id = ra.quoteSubmittedBy  \n" +
                "			WHERE ra.id= prfqAssyID AND rqs.id = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary  \n" +
                "			SELECT * FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND id = pAssyQuoteSubmittedID ;  \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote  \n" +
                "			SELECT csd.id, csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className stdclass  \n" +
                "            FROM rfq_assy_standard_class_detail csd  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0  \n" +
                "			WHERE csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary  \n" +
                "			SELECT qst.*, ec.name ecoTypeName, CONCAT('<ul><li>', GROUP_CONCAT(ecv.name SEPARATOR '</li><li>'),'</li></ul>') ecoTypeValues  \n" +
                "            FROM rfq_assy_quote_submitted_termsconditions qst  \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID  \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID  \n" +
                "            WHERE qst.isDeleted = 0  \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            GROUP BY ecv.ecoTypeCatID;  \n" +
                "  \n" +
                "  \n" +
                "		# select letest submited quote summary detail  \n" +
                "			SELECT * FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1;  \n" +
                "  \n" +
                "		# total requote count  \n" +
                "			SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL AND isDeleted = 0;  \n" +
                "  \n" +
                "		#select list of standard certification detail of assembly for not submitted quote  \n" +
                "			SELECT GROUP_CONCAT(CONCAT(cs.fullName,IFNULL(sc.className,''), ' | ' ) SEPARATOR '') standards  \n" +
                "            FROM component_standard_details  csd  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0  \n" +
                "			WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID);  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pEmployeeID INT,  \n" +
                "	IN pCustomerIds VARCHAR(16383),  \n" +
                "	IN pAssyTypeIds VARCHAR(16383),  \n" +
                "	IN pRfqTypeIds VARCHAR(16383),  \n" +
                "	IN pJobTypeIds VARCHAR(16383),  \n" +
                "	IN pAssyIds VARCHAR(16383),  \n" +
                "	IN pAssyNicknameIds LONGTEXT,  \n" +
                "	IN pIsExportControlled TINYINT,  \n" +
                "	IN pIsQuoteOverdue TINYINT,  \n" +
                "	IN pIsSubAssemblyBOMs TINYINT,  \n" +
                "	IN pIsPriceGroupQuoteAssembly TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pOlderThenDays INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "        DECLARE vTimeZone VARCHAR(50);  \n" +
                "        DECLARE v_mfrFormatType INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormatType;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "        SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pCustomerIds IS NOT NULL AND pCustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (', pCustomerIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAssyTypeIds IS NOT NULL AND pAssyTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assemblyTypeID in (', pAssyTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pRfqTypeIds IS NOT NULL AND pRfqTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND RFQTypeID in (', pRfqTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pJobTypeIds IS NOT NULL AND pJobTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND jobTypeID in (', pJobTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAssyIds IS NOT NULL AND pAssyIds != '' AND pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( partID in (', pAssyIds, ') or partID in (select c.id from vu_component c where c.nickname in (', pAssyNicknameIds, ' )) )');  \n" +
                "	ELSEIF(pAssyIds IS NOT NULL AND pAssyIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND partID in (', pAssyIds, ') ');  \n" +
                "	ELSEIF(pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause,' and partID in (select c.id from vu_component c where c.nickname in (', pAssyNicknameIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                "		   (CASE  \n" +
                "			WHEN rfq_statusID = 1 THEN  \n" +
                "				DATE(quoteDueDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                "				DATE(quoteSubmitDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				DATE(quoteClosedDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "		    END)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pOlderThenDays IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                "		 (CASE  \n" +
                "			WHEN rfq_statusID = 1 THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteDueDate) > ',pOlderThenDays,'  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteSubmitDate) > ',pOlderThenDays,'  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteClosedDate) > ',pOlderThenDays,'  \n" +
                "		    END)  \n" +
                "		');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsQuoteOverdue = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  \n" +
                "        (CASE  \n" +
                "        WHEN rfq_statusID = 1 THEN  \n" +
                "				quoteDueDate < \"',@utcDatetime,'\"  \n" +
                "         WHEN (rfq_statusID = 2 OR rfq_statusID = 3 ) THEN  \n" +
                "				quoteSubmitDate > quoteDueDate  \n" +
                "		WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				quoteClosedDate	> quoteDueDate  \n" +
                "            END)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsSubAssemblyBOMs = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assyLevel > 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* IF pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "		SET pWhereClause = concat(pWhereClause, ' AND assyLevel > 1');  \n" +
                "	END IF; */  \n" +
                "  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "	/* DECLARE SQLStatement varchar(255); */  \n" +
                "   #DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "    SET @temp_Sproc_GetRFQList = CONCAT(\"SELECT (select COUNT(1) from rfq_lineitems rl where rl.partID = ra.partID and rl.isDeleted = 0) AS lineItemCount, rf.id, ra.partID,  \n" +
                "			count(1) over (partition by rf.id) AS quoteGroupAssyCount,  \n" +
                "            fun_getUserNameByEmployeID(rf.salesCommissionTo) salesCommissionTo,  \n" +
                "            (select count(1) from rfq_price_group rpg where refRFQID = rf.id and rpg.isDeleted = 0) priceGroupCount,  \n" +
                "            fun_getExportControlDetailFromPartID(ra.partID) as isExportControl,  \n" +
                "			#(SELECT COUNT(1) FROM rfq_assemblies WHERE rfqrefID = rf.id AND isDeleted = 0) AS quoteGroupAssyCount,  \n" +
                "			(SELECT MAX(pr.`level`)+1 FROM part_sub_assy_relationship pr WHERE pr.partID = ra.partID AND isDeleted = 0) AS assyLevel,  \n" +
                "			(SELECT COUNT(1) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id AND quoteNumber IS NOT NULL) AS revisedQuoteCount,  \n" +
                "			(SELECT max(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS lastQuoteID, ra.isSummaryComplete,  \n" +
                "			part.PIDCode,part.isCustom,part.RoHSStatusID, part.mfgPN, fun_replaceSpecialCharacters(part.mfgPN) mfgPNwithoutSpecialChar,  \n" +
                "            part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,  \n" +
                "			fun_getUserNameByEmployeID(rf.employeeID) AS rfqCreatedBy,  \n" +
                "			fun_getUserNameByID(ra.Updatedby) AS rfqModifiedBy,  \n" +
                "			part.liveVersion AS liveInternalVersion,  \n" +
                "			fun_getBomProgressBar(ra.partID) AS bomProgress,  \n" +
                "			fun_getMaterialProgress(ra.id) AS materialProgress,  \n" +
                "			fun_getCustomPartProgress(ra.id) AS customPartProgress,  \n" +
                "			(CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                "				  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                "				  WHEN ra.status = 3 THEN 'Won'  \n" +
                "				  WHEN ra.status = 4 THEN 'Lost'  \n" +
                "				  WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "			ra.status rfq_statusID,  \n" +
                "			(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'  \n" +
                "					WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'  \n" +
                "					WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'  \n" +
                "					WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,  \n" +
                "			ro.name AS `rohsComplientConvertedValue`,  \n" +
                "			(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'  \n" +
                "				WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,  \n" +
                "			(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'  \n" +
                "				WHEN (`ra`.`timePeriod` = 1) THEN 'W'  \n" +
                "				WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,ra.jobTypeID,ra.assemblyTypeID,ra.RFQTypeID,  \n" +
                "			fun_getAssyTypeByID(ra.assemblyTypeID) assyType,  \n" +
                "            fun_getjobTypeByID(ra.jobTypeID) AS JobType, fun_getrfqTypeByID(ra.RFQTypeID) AS OrderType,fun_GetFormattedMfgCode(cu.mfgCode,cu.mfgName,\",v_mfrFormatType,\") AS Customer, cu.id customerID,  \n" +
                "			fun_getUserNameByID(ra.quoteSubmittedBy) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,  \n" +
                "			ra.quoteInDate, cast(ra.quoteDueDate as DATE) as quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,  \n" +
                "            ra.isCustomPartDetShowInReport,  \n" +
                "            ra.quoteValidTillDate,  \n" +
                "			part.isActivityStart, fun_getMfgCodeByPartID(ra.partID) customerCode,  \n" +
                "			(CASE WHEN part.isActivityStart THEN concat(assyusr.firstName, ' ', assyusr.lastName) ELSE '' END )AS username, part.activityStartBy,  \n" +
                "			(CASE WHEN part.isActivityStart THEN TIMESTAMPDIFF(SECOND, part.activityStartAt,'\",@utcDatetime,\"') ELSE 0 END ) activityStartAt,  \n" +
                "			part.activityStartAt activityStartAtDateTime,  \n" +
                "            ra.isActivityStart as isCostingActivityStart,  \n" +
                "            (CASE WHEN ra.isActivityStart THEN concat(rfqusr.firstName, ' ', rfqusr.lastName) ELSE '' END )AS costingUserName, ra.activityStartBy as costingActivityBy,  \n" +
                "			(CASE WHEN ra.isActivityStart THEN TIMESTAMPDIFF(SECOND, ra.activityStartAt,'\",@utcDatetime,\"') ELSE 0 END ) costingActivityStartAt,  \n" +
                "			ra.isBOMVerified,fun_getTextAngularData(ra.reason,'\",vTextAngularKeyCode,\"') reason, fun_getUserNameByID(ra.quoteClosedBy) AS RFQ_ClosedBy,ra.quoteClosedDate,  \n" +
                "            fun_getUserNameByID(ra.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(ra.createdBy) createdby,  \n" +
                "			fun_getRoleByID(ra.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(ra.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRfqLabourPercentage(ra.id) laborPercentage,  \n" +
                "            ra.partCostingBOMInternalVersion  \n" +
                "		FROM rfqforms rf  \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND ra.isdeleted = 0  \n" +
                "        JOIN mfgcodemst cu ON cu.id = rf.customerId AND cu.isdeleted = 0  \n" +
                "		JOIN vu_component part ON part.id = ra.partID AND part.category = 3 AND part.isdeleted = 0  \n" +
                "		JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "        LEFT JOIN users rfqusr ON rfqusr.id = ra.activityStartBy  \n" +
                "        LEFT JOIN users assyusr ON assyusr.id = part.activityStartBy  \n" +
                "		WHERE rf.isdeleted = 0  \n" +
                "        and (case when (select count(1) from employee_mfg_mapping where employeeId = \",pEmployeeID,\" and isDeleted = 0) > 0 then  \n" +
                "		exists (select 1 from employee_mfg_mapping where mfgCodeId =  cu.id and employeeId = \",pEmployeeID,\" and isDeleted = 0)  \n" +
                "		else 1=1 end)  \n" +
                "        \");  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY quoteDueDate DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsExportControlled = 1  AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "		SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\" AND priceGroupCount > 1 ');  \n" +
                "	ELSEIF pIsExportControlled = 1 THEN  \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\"');  \n" +
                "	ELSEIF pIsExportControlled = 0 AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having priceGroupCount > 0 ');  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @RFQ_STATEMENT1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE RFQquery1 FROM @RFQ_STATEMENT1;  \n" +
                "	EXECUTE RFQquery1;  \n" +
                "	DEALLOCATE PREPARE RFQquery1;  \n" +
                "  \n" +
                "	SET @RFQ_STATEMENT2 = CONCAT(\"select * from ( \", @temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE RFQquery2 FROM @RFQ_STATEMENT2;  \n" +
                "	EXECUTE RFQquery2;  \n" +
                "	DEALLOCATE PREPARE RFQquery2;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ImportCPNData` ;  \n" +
                "CREATE PROCEDURE `Sproc_ImportCPNData`(  \n" +
                "	IN pcustomerID INT,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE mountingTypeID INT;  \n" +
                "	DECLARE functionalCategoryID INT;  \n" +
                "	DECLARE rohsStatusID INT;  \n" +
                "	DECLARE categoryID INT;  \n" +
                "	DECLARE partTypeID INT;  \n" +
                "	DECLARE statusID INT;  \n" +
                "	DECLARE mfgPNID INT;  \n" +
                "	DECLARE pEpicoreType VARCHAR(100);  \n" +
                "	DECLARE vSerialNumer VARCHAR(8);  \n" +
                "	DECLARE maxDisplayOrder DECIMAL;  \n" +
                "	DECLARE mfgPID VARCHAR(500);  \n" +
                "	DECLARE maxPartId INT;  \n" +
                "	DECLARE totCPN INT;  \n" +
                "	DECLARE pcustPN VARCHAR(100);  \n" +
                "	DECLARE pcustPart VARCHAR(100);  \n" +
                "	DECLARE pcustPNRev VARCHAR(100);  \n" +
                "	DECLARE prefCPNPartID INT;  \n" +
                "	DECLARE prefComponentIDs VARCHAR(5000);  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "    DECLARE v_serialNumber VARCHAR(20);  \n" +
                "    DECLARE v_message VARCHAR(20);  \n" +
                "  \n" +
                "	SET categoryID = 2;  \n" +
                "	SET partTypeID = 2;  \n" +
                "	SET rohsStatusID = 1;  \n" +
                "  \n" +
                "	SELECT epicorType INTO pEpicoreType FROM rfq_partcategory WHERE id = categoryID;  \n" +
                "	SELECT mfgCode, mfgType INTO @mfgCode, @mfgType FROM mfgcodemst WHERE id = pcustomerID;  \n" +
                "	SELECT id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;  \n" +
                "	SELECT id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;  \n" +
                "	SELECT id INTO statusID FROM component_partstatusmst WHERE `name`= 'Active';  \n" +
                "	IF functionalCategoryID IS NULL THEN  \n" +
                "		SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;  \n" +
                "		INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy,createByRoleId)  \n" +
                "		VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID,pUserRoleID);  \n" +
                "		SELECT LAST_INSERT_ID() INTO functionalCategoryID;  \n" +
                "	END IF;  \n" +
                "  	IF mountingTypeID IS NULL THEN  \n" +
                "		INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy,createByRoleId)VALUES('CPN', 1, pUserID,pUserRoleID);  \n" +
                "		SELECT LAST_INSERT_ID() INTO mountingTypeID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT COUNT(*) FROM t_CPNUploadDetails INTO totCPN;  \n" +
                "	-- select * from t_CPNUploadDetails;  \n" +
                "	WHILE i < totCPN DO  \n" +
                "		SET prefCPNPartID = NULL;  \n" +
                "		SET prefComponentIDs = NULL;  \n" +
                "		SET pcustPart = NULL;  \n" +
                "		SET pcustPN = NULL;  \n" +
                "		SET pcustPNRev = NULL;  \n" +
                "		SELECT refCPNPartID, refComponentIDs, custPN, custPart, custPNRev  \n" +
                "		INTO prefCPNPartID, prefComponentIDs, pcustPN, pcustPart, pcustPNRev FROM t_CPNUploadDetails LIMIT i,1;  \n" +
                "  \n" +
                "		IF prefCPNPartID IS NULL THEN  \n" +
                "			SET mfgPID =CONCAT( @mfgCode , \"+\" , pcustPN);  \n" +
                "			SET mfgPNID = NULL;  \n" +
                "			SELECT d.id INTO mfgPNID FROM COMPONENT d WHERE d.PIDCode = mfgPID AND d.isDeleted = 0 LIMIT 1;  \n" +
                "			IF mfgPNID IS NULL THEN  \n" +
                "				CALL Sproc_GenerateIncrementalNumber(CASE WHEN @mfgType = 'MFG' THEN  \n" +
                "																'MPNSystemID'  \n" +
                "															ELSE 'SPNSystemID' END,  \n" +
                "														TRUE);  \n" +
                "				  SELECT systemID, message INTO v_serialNumber, v_message  \n" +
                "				  FROM temp_serialNumber;  \n" +
                "				INSERT INTO COMPONENT(custAssyPN, rev, mfgPN, PIDCode, partStatus,  \n" +
                "					isCPN, isCustom, mfgCodeID, createdBy, createByRoleId,  \n" +
                "					RoHSStatusID, mountingTypeID, functionalCategoryID, category,  \n" +
                "					createdAt, partType, uom, epicorType,unit,serialNumber, uomClassID, mfgPNDescription,updatedBy,updatedAt,updateByRoleId,mfgType)  \n" +
                "				VALUES (pcustPart, pcustPNRev, pcustPN, mfgPID, statusID,  \n" +
                "					1,1,pcustomerID,pUserID, pUserRoleID,  \n" +
                "					rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,  \n" +
                "					fun_DatetimetoUTCDateTime(), partTypeID, -1, IFNULL(pEpicoreType,'Purchased'), 1, v_serialNumber, -1, '-',pUserID,fun_DatetimetoUTCDateTime(), pUserRoleID,@mfgType);  \n" +
                "				SELECT LAST_INSERT_ID() INTO maxPartId;  \n" +
                "  \n" +
                "				SELECT maxPartId;  \n" +
                "				CALL Sproc_SaveCustMFGPn(maxPartId,prefComponentIDs,puserID,pUserRoleID);  \n" +
                "			ELSE  \n" +
                "				CALL Sproc_SaveCustMFGPn(mfgPNID,prefComponentIDs,puserID,pUserRoleID);  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			CALL Sproc_SaveCustMFGPn(prefCPNPartID,prefComponentIDs,puserID,pUserRoleID);  \n" +
                "			CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(prefCPNPartID, puserID,FALSE);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET i = i + 1;  \n" +
                "	END WHILE;  \n" +
                "	SELECT pcustomerID;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ManageBOMCustPN` ;  \n" +
                "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(  \n" +
                "IN pPartID INT,  \n" +
                "IN pUserID INT,  \n" +
                "IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE totalCount INT DEFAULT 0;  \n" +
                "DECLARE currIndex INT DEFAULT 0;  \n" +
                "DECLARE prevLineID INT;  \n" +
                "DECLARE currCustPNID INT;  \n" +
                "DECLARE currMFGPNID INT;  \n" +
                "DECLARE currLineID INT;  \n" +
                "DECLARE mountingTypeID INT;  \n" +
                "DECLARE functionalCategoryID INT;  \n" +
                "DECLARE rohsStatusID INT;  \n" +
                "DECLARE categoryID INT;  \n" +
                "DECLARE partTypeID INT;  \n" +
                "DECLARE statusID INT;  \n" +
                "DECLARE mfgPNID INT;  \n" +
                "DECLARE pisMPNAddedinCPN TINYINT;  \n" +
                "DECLARE currCustRev VARCHAR(10);  \n" +
                "DECLARE currCustPN VARCHAR(500);  \n" +
                "DECLARE currCustomerPartDesc TEXT;  \n" +
                "DECLARE mfgPN VARCHAR(500);  \n" +
                "DECLARE mfgPID VARCHAR(500);  \n" +
                "DECLARE maxDisplayOrder DECIMAL;  \n" +
                "DECLARE pLiveInternalVersion INT;  \n" +
                "DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "DECLARE pCompanyName VARCHAR(100);  \n" +
                "DECLARE pMFGPN VARCHAR(100);  \n" +
                "DECLARE pEpicoreType VARCHAR(100);  \n" +
                "DECLARE vSerialNumer VARCHAR(20);  \n" +
                "DECLARE v_message VARCHAR(20);  \n" +
                "DECLARE maxPartId INT;  \n" +
                "SET categoryID = 2;  \n" +
                "SET partTypeID = 2;  \n" +
                "	SELECT  epicorType INTO pEpicoreType FROM rfq_partcategory WHERE id = categoryID;  \n" +
                "	SELECT  `values` INTO pLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_new_cpn_id;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_new_cpn_id (partId INT);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_vesrion_update (cpnID INT);  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (  \n" +
                "	SELECT   rla.id,     rla.rfqLineItemsID,     rl.custPNID,     rl.custPN,     rl.customerRev,     rl.customerPartDesc,  \n" +
                "		rla.mfgPNID,    c.RoHSStatusID , rla.isMPNAddedinCPN  \n" +
                "	FROM rfq_lineitems_alternatepart rla  \n" +
                "	JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id  \n" +
                "	JOIN COMPONENT c ON c.id = rla.mfgPNID  \n" +
                "	WHERE rl.custPN IS NOT NULL AND rl.custPN <> \"\" AND rla.mfgPNID IS NOT NULL  \n" +
                "	AND rl.partID = pPartID  \n" +
                "	AND rla.isdeleted = 0  \n" +
                "    );  \n" +
                "  \n" +
                "  \n" +
                "	SELECT  COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;  \n" +
                "    IF totalCount > 0 THEN  \n" +
                "		SELECT mfgCodeID INTO @mfgCodeID FROM COMPONENT WHERE id = pPartID;  \n" +
                "		SELECT  id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;  \n" +
                "		SELECT  id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;  \n" +
                "		SELECT  id INTO statusID FROM component_partstatusmst WHERE `name` = 'Active';  \n" +
                "		IF functionalCategoryID IS NULL THEN  \n" +
                "			SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;  \n" +
                "			INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "			VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO functionalCategoryID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF mountingTypeID IS NULL THEN  \n" +
                "			INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)VALUES('CPN', 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO mountingTypeID;  \n" +
                "		END IF;  \n" +
                "		SET prevLineID = 0;  \n" +
                "		WHILE currIndex < totalCount DO  \n" +
                "			SET currCustPN = NULL;  \n" +
                "			SET currCustRev = NULL;  \n" +
                "			SET currCustomerPartDesc = NULL;  \n" +
                "  \n" +
                "            SELECT  a.custPN, a.custPNID,    a.customerRev,    a.mfgPNID,    a.rfqLineItemsID,    a.customerPartDesc, a.isMPNAddedinCPN  \n" +
                "					INTO currCustPN , currCustPNID , currCustRev , currMFGPNID , currLineID , currCustomerPartDesc, pisMPNAddedinCPN  \n" +
                "            FROM temp_component_cust_alias_rev a LIMIT CURRINDEX , 1;  \n" +
                "  \n" +
                "			SET currIndex = currIndex + 1;  \n" +
                "  \n" +
                "            SET pLiveInternalVersion = 0;  \n" +
                "  \n" +
                "            IF((SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE custPN = currCustPN AND customerRev = currCustRev AND rfqLineItemsID != currLineID) = 0) THEN  \n" +
                "				IF (currCustPNID IS NOT NULL) THEN  \n" +
                "					IF (currMFGPNID > 0 AND pisMPNAddedinCPN = 1 AND currMFGPNID <> currCustPNID AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
                "						INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (currCustPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "  \n" +
                "                        SELECT  IFNULL(k.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component_bomsetting k WHERE k.refComponentID = currCustPNID;  \n" +
                "  \n" +
                "                        SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "  \n" +
                "                        INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( currCustPNID );  \n" +
                "  \n" +
                "                        SELECT  j.mfgPN INTO pMFGPN FROM COMPONENT j WHERE j.id = currMFGPNID;  \n" +
                "						INSERT INTO rfq_assembly_history  \n" +
                "                        (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                "						VALUES (\"component\", currCustPNID, NULL,NULL, currCustPNID, \"MPN\", NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);  \n" +
                "  \n" +
                "						-- Update All Assembly for CPN change  \n" +
                "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF (currCustPNID IS NULL) THEN  \n" +
                "					IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN  \n" +
                "						SET rohsStatusID = 0;  \n" +
                "					ELSE  \n" +
                "						SET rohsStatusID = 1;  \n" +
                "					END IF;  \n" +
                "					IF (currCustRev IS NULL OR currCustRev = \"\") THEN  \n" +
                "						SET currCustRev = \"-\";  \n" +
                "					END IF;  \n" +
                "					SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);  \n" +
                "					SELECT  mfgCode, mfgType INTO @mfgCode , @mfgType FROM mfgcodemst WHERE id = @mfgCodeID;  \n" +
                "					SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);  \n" +
                "					SET mfgPNID = NULL;  \n" +
                "  \n" +
                "                    SELECT  d.id INTO mfgPNID FROM COMPONENT d WHERE d.mfgPN = mfgPN AND mfgCodeID = (SELECT  mfgCodeID FROM COMPONENT WHERE id = pPartID) AND d.isDeleted = 0 LIMIT 1;  \n" +
                "					-- SELECT   mfgPNID;  \n" +
                "					IF mfgPNID IS NULL THEN  \n" +
                "					-- SELECT   mfgPNID;  \n" +
                "                        CALL Sproc_GenerateIncrementalNumber(CASE WHEN @mfgType = 'MFG' THEN   'MPNSystemID'   ELSE 'SPNSystemID' END,   TRUE);  \n" +
                "						SELECT  systemID, message INTO vSerialNumer , v_message FROM temp_serialNumber;  \n" +
                "                        INSERT INTO COMPONENT(custAssyPN, rev, mfgPN, PIDCode, partStatus,  \n" +
                "							isCPN, isCustom, mfgCodeID, createdBy,createByRoleId,updatedBy,updateByRoleId,updatedAt,  \n" +
                "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,  \n" +
                "							createdAt, partType, uom, epicorType,unit,serialNumber, uomClassID, mfgPNDescription,mfgType)  \n" +
                "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,  \n" +
                "							1,1,@mfgCodeID,pUserID,pRoleID,pUserID,pRoleID,fun_DatetimetoUTCDateTime(),  \n" +
                "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,  \n" +
                "							fun_DatetimetoUTCDateTime(), partTypeID, -1, IFNULL(pEpicoreType,'Purchased'), 1, vSerialNumer, -1, IFNULL(currCustomerPartDesc, '-'), @mfgType);  \n" +
                "						SELECT LAST_INSERT_ID() INTO maxPartId;  \n" +
                "						INSERT INTO COMPONENT(refComponentID  , liveInternalVersion ,  \n" +
                "							isDeleted ,createdBy ,createdAt ,  \n" +
                "							createByRoleId , updatedBy , updatedAt , updateByRoleId )  \n" +
                "						VALUES (maxPartId, 0,  \n" +
                "						0,pUserID,fun_DatetimetoUTCDateTime(),  \n" +
                "						pRoleID,pUserID,fun_DatetimetoUTCDateTime(),pRoleID);  \n" +
                "						IF(currMFGPNID > 0 AND pisMPNAddedinCPN = 1) THEN  \n" +
                "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (maxPartId , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "						END IF;  \n" +
                "                        SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component_bomsetting z WHERE z.refComponentID = maxPartId;  \n" +
                "						SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "						INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( maxPartId );  \n" +
                "						SELECT  t.mfgPN INTO pMFGPN FROM COMPONENT t WHERE t.id = maxPartId;  \n" +
                "						INSERT INTO rfq_assembly_history  \n" +
                "							(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "							oldValue,newValue,changeVersion,  \n" +
                "							createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "						VALUES (\"component\", maxPartId, NULL,NULL, maxPartId, \"MPN\",  \n" +
                "							NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "							fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "						UPDATE rfq_lineitems  SET  custPNID = maxPartId, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						INSERT INTO temp_new_cpn_id(partId) VALUES (maxPartId);  \n" +
                "					ELSE  \n" +
                "						IF (currMFGPNID > 0 AND pisMPNAddedinCPN = 1 AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = mfgPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
                "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy, createByRoleId,updatedBy,updateByRoleId) VALUES (mfgPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "							SET currCustPNID = mfgPNID;  \n" +
                "							SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component_bomsetting z WHERE z.refComponentID  = mfgPNID;  \n" +
                "							SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "							INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( mfgPNID );  \n" +
                "							SELECT  t.mfgPN INTO pMFGPN FROM COMPONENT t WHERE t.id = currMFGPNID;  \n" +
                "							INSERT INTO rfq_assembly_history  \n" +
                "								(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "								oldValue,newValue,changeVersion,  \n" +
                "								createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
                "							VALUES (\"component\", mfgPNID, NULL,NULL, currCustPNID, \"MPN\",  \n" +
                "								NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "								fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
                "							UPDATE rfq_lineitems  SET  custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						-- Update All Assembly for CPN change  \n" +
                "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
                "						ELSE  \n" +
                "							UPDATE rfq_lineitems SET custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "			UPDATE component_bomsetting  \n" +
                "			SET  liveInternalVersion = (liveInternalVersion + 1),  \n" +
                "				 liveVersion = CONCAT(pCompanyName, '-', CAST(liveInternalVersion AS CHAR))  \n" +
                "			 WHERE refComponentID  IN (SELECT  cpnID FROM temp_component_vesrion_update);  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
                "		SELECT  * FROM temp_new_cpn_id;  \n" +
                "			-- CALL Sproc_DeleteRFQ_LineItems_AlternatePart_CPN(pPartID,pUserID);  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RemoveMPNFromCPNMapping` ;  \n" +
                "CREATE PROCEDURE `Sproc_RemoveMPNFromCPNMapping`(  \n" +
                "	IN prefCompID INT,  \n" +
                "	IN prefCPNID INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pRoleID INT,  \n" +
                "    IN pDeleteRequest TINYINT,  \n" +
                "    IN pDeleteMPNFrom TINYINT,  \n" +
                "    IN preason VARCHAR(1200)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vLiveInternalVersion INT;  \n" +
                "DECLARE vLiveInternalVersionMethod VARCHAR(50);  \n" +
                "DECLARE vLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "DECLARE vInternalVersion VARCHAR(100);  \n" +
                "DECLARE vMFGPN VARCHAR(100);  \n" +
                "DECLARE subAssyType INT;  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	  BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "    SET  subAssyType = 3;  \n" +
                "	# get Internal version format  \n" +
                "		 SELECT  `values` INTO vLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "			IF vLiveInternalVersionMethod = \"P\" THEN  \n" +
                "				SELECT `values` INTO vInternalVersion FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "			ELSE  \n" +
                "				SELECT `values` INTO vLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "				IF vLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "					SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO vInternalVersion;  \n" +
                "				ELSE  \n" +
                "					SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO vInternalVersion;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		SELECT IFNULL(k.liveInternalVersion, 0) INTO vLiveInternalVersion FROM component_bomsetting k WHERE k.refComponentID = prefCPNID;  \n" +
                "        SET vLiveInternalVersion  = vLiveInternalVersion  + 1;  \n" +
                "  \n" +
                "  	DROP TEMPORARY TABLE IF EXISTS  tempRfqLineItems;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempRfqLineItems AS  \n" +
                "	SELECT  rl.partID  \n" +
                "	FROM rfq_lineitems AS rl  \n" +
                "	WHERE rl.custPNID = prefCPNID AND rl.isDeleted = 0  \n" +
                "	GROUP BY rl.partID;  \n" +
                "  \n" +
                "		UPDATE component_bomsetting  \n" +
                "		SET  \n" +
                "			liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) ,  \n" +
                "			liveVersion = CONCAT(fun_getInternalVersionTextforUpdatePartInternalVersion(refComponentID),'-',CAST(IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) AS CHAR))  \n" +
                "		WHERE refComponentID  IN(  \n" +
                "		WITH RECURSIVE cte AS  \n" +
                "		(  \n" +
                "		  SELECT  c.Id AS partId, c.id AS childPartId, cb.liveinternalversion AS liveinternalversion  \n" +
                "		  FROM COMPONENT c  \n" +
                "		  JOIN component_bomsetting cb ON cb.refComponentID=c.id  \n" +
                "		  JOIN tempRfqLineItems trla ON trla.partID = c.id  \n" +
                "		  WHERE c.category = subAssyType AND c.isdeleted = 0  \n" +
                "  \n" +
                "		  UNION ALL  \n" +
                "		  SELECT rlp.partId AS partId, child.partId AS childPartId,  cb.liveinternalversion AS liveinternalversion  \n" +
                "		  FROM rfq_lineitems rlp  \n" +
                "          INNER JOIN rfq_lineitems_alternatepart rlap ON rlap.rfqLineItemsID = rlp.id  \n" +
                "          INNER JOIN COMPONENT cp ON cp.id = rlap.mfgPNID  \n" +
                "          LEFT JOIN component_bomsetting cb ON cb.refComponentID=rlap.mfgPNID  \n" +
                "          INNER JOIN cte child ON child.partID = rlap.mfgPNID AND cp.category = subAssyType  \n" +
                "		  WHERE cp.isdeleted = 0 AND rlp.isdeleted = 0 AND rlap.isdeleted = 0  \n" +
                "		)  \n" +
                "		SELECT DISTINCT partId FROM cte);  \n" +
                "  \n" +
                "		SELECT  j.mfgPN INTO vMFGPN FROM COMPONENT j WHERE j.id = prefCompID;  \n" +
                "        INSERT INTO rfq_assembly_history  \n" +
                "		(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion,DESCRIPTION, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                "		VALUES (\"component\", prefCPNID, NULL,NULL, prefCPNID, \"MPN\",  vMFGPN ,NULL, CONCAT(vInternalVersion,'-',CAST(vLiveInternalVersion AS CHAR)),  \n" +
                "        CONCAT('Delete Request From: ',(CASE WHEN pDeleteRequest = 1 THEN 'Internal Error' WHEN pDeleteRequest = 2 THEN 'Customer Request' END), '<br/> Reason: ', preason),  \n" +
                "        fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);  \n" +
                "  \n" +
                "  \n" +
                "    UPDATE component_bomsetting  \n" +
                "	SET liveInternalVersion = vLiveInternalVersion, liveVersion = CONCAT(vInternalVersion,'-',CAST(vLiveInternalVersion AS CHAR))  \n" +
                "    WHERE id = prefCPNID;  \n" +
                "  \n" +
                "	# remove CPN entry from CPN mapping  \n" +
                "        UPDATE component_cust_alias_rev_pn  \n" +
                "        SET isdeleted = 1,  \n" +
                "			deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			deletedBy = pUserID,  \n" +
                "			deleteByRoleId = pRoleID  \n" +
                "        WHERE refComponentID = prefCompID AND refCPNPartID = prefCPNID AND isdeleted = 0;  \n" +
                "  \n" +
                "	# Manage History for Change  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF pDeleteMPNFrom = 1 THEN  \n" +
                "	 # Update CPNMPN Mapping flage value in BOM  \n" +
                "        UPDATE rfq_lineitems_alternatepart rla  \n" +
                "        JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                "        SET rla.isMPNAddedinCPN = 0,  \n" +
                "			rla.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "            rla.updatedBy = pUserID,  \n" +
                "            rla.updateByRoleId = pRoleID  \n" +
                "        WHERE rla.mfgPNID = prefCompID AND rl.custPNID = prefCPNID AND rla.isdeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "	ELSEIF pDeleteMPNFrom = 2 THEN  \n" +
                "	 # Update CPNMPN Mapping flage value in BOM  \n" +
                "        UPDATE rfq_lineitems_alternatepart rla  \n" +
                "        JOIN  ( SELECT COUNT(1) OVER(PARTITION BY rla.rfqLineItemsID) alternatepartCount, rla.* FROM rfq_lineitems_alternatepart rla WHERE  rla.isdeleted = 0 )a ON a.id = rla.id  \n" +
                "		JOIN rfq_lineitems rl ON rl.id = a.rfqLineItemsID AND a.isDeleted = 0  \n" +
                "        SET rla.isDeleted = 1,  \n" +
                "			rla.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "            rla.deletedBy = pUserID,  \n" +
                "            rla.deleteByRoleId = pRoleID  \n" +
                "        WHERE a.mfgPNID = prefCompID AND rl.custPNID = prefCPNID AND a.alternatepartCount>1 AND a.isdeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "		UPDATE rfq_lineitems_alternatepart rla  \n" +
                "        JOIN ( SELECT COUNT(1) OVER(PARTITION BY rla.rfqLineItemsID) alternatepartCount, rla.* FROM rfq_lineitems_alternatepart rla WHERE  rla.isdeleted = 0 ) a ON a.id = rla.id  \n" +
                "		JOIN rfq_lineitems rl ON rl.id = a.rfqLineItemsID AND a.isDeleted = 0  \n" +
                "        SET  \n" +
                "			rla.distributor = NULL, rla.distMfgCodeID = NULL, rla.distPN = NULL, rla.distMfgPNID = NULL, rla.mfgCode = NULL, rla.mfgCodeID = NULL,  \n" +
                "            rla.mfgPN = NULL, rla.mfgPNID = NULL, rla.description = NULL, rla.RoHSStatusID = NULL, rla.customerApproval = 'P',  \n" +
                "            rla.customerApprovalBy  = NULL, rla.customerApprovalDate = NULL, rla.badMfgPN = NULL, rla.userData1 = NULL, rla.userData2 = NULL,  \n" +
                "			rla.userData3 = NULL, rla.userData4 = NULL, rla.userData5 = NULL, rla.userData6 = NULL, rla.userData7 = NULL, rla.userData8 = NULL,  \n" +
                "            rla.userData9 = NULL, rla.userData10 = NULL, rla.updatedAt = fun_DatetimetoUTCDateTime(), rla.updatedBy  = pUserID, rla.updateByRoleId = pRoleID  \n" +
                "        WHERE a.mfgPNID = prefCompID AND rl.custPNID = prefCPNID AND a.alternatepartCount = 1 AND rla.isdeleted = 0;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "COMMIT;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveBOMInternalVersionHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveBOMInternalVersionHistory`(  \n" +
                "IN pPartID INT,  \n" +
                "IN pUserID INT,  \n" +
                "IN pIsVerify TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pColumnName VARCHAR(100);  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component_bomsetting WHERE refComponentID = pPartID;  \n" +
                "  \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET pColumnName = 'Save BOM';  \n" +
                "	IF pIsVerify THEN  \n" +
                "		SET pColumnName = 'Save BOM And Verify';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "	VALUES 	(\"component\", pPartID, NULL, NULL, pPartID,  pColumnName,  \n" +
                "			NULL, NULL, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),pUserID,pUserID);  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveCustMFGPn` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustMFGPn`(  \n" +
                "IN prefCPNPartID INT,  \n" +
                "IN prefComponentIDs VARCHAR(5000),  \n" +
                "IN puserID INT,  \n" +
                "IN pUserRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pMFGPN VARCHAR(100);  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE totMFGPN INT DEFAULT 0;  \n" +
                "    DECLARE vCount INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	/*DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	  BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;    */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_CustMFGPn;  \n" +
                "	/*Generate Dummy data from string to row */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;  \n" +
                "	CREATE TEMPORARY TABLE t_CustMFGPn( txt TEXT );  \n" +
                "	INSERT INTO t_CustMFGPn VALUES(prefComponentIDs);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_CustMFGPn;  \n" +
                "	CREATE TEMPORARY TABLE temp_CustMFGPn( val CHAR(255) );  \n" +
                "	SET @SQL = CONCAT(\"insert into temp_CustMFGPn (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t_CustMFGPn), \",\", \"'),('\"),\"');\");  \n" +
                "	PREPARE stmt1 FROM @SQL;  \n" +
                "	EXECUTE stmt1;  \n" +
                "	-- SELECT DISTINCT(val) FROM temp_CustMFGPn;  \n" +
                "	/*Generate Dummy data from string to row */  \n" +
                "  \n" +
                "	-- SELECT mfgPN INTO pMFGPN FROM component WHERE id = prefCPNPartID;  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO vCount  \n" +
                "		 FROM component_cust_alias_rev_pn co  \n" +
                "	WHERE co.isDeleted= 0  AND co.refComponentID = prefComponentIDs AND  co.refCPNPartID = prefCPNPartID  \n" +
                "	GROUP BY co.id;  \n" +
                "  \n" +
                "	IF vCount > 0 THEN  \n" +
                "            SELECT 'DUIPLICATE_MAPPING' AS message;  \n" +
                "	ELSE  \n" +
                "			SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component_bomsetting WHERE refComponentID = prefCPNPartID;  \n" +
                "			SET pLiveInternalVersion  = pLiveInternalVersion  + 1;  \n" +
                "  \n" +
                "			SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "			IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "				SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "			ELSE  \n" +
                "				SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "				IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "					SELECT DATE_FORMAT(UTC_DATE(), '%y%m%d') INTO pCompanyName ;  \n" +
                "				ELSE  \n" +
                "					SELECT DATE_FORMAT(UTC_DATE(), '%m%d%y') INTO pCompanyName ;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			/* add all mapping mfgPN history with internal version */  \n" +
                "			SELECT COUNT(*) FROM temp_CustMFGPn INTO totMFGPN;  \n" +
                "			WHILE i < totMFGPN DO  \n" +
                "			SET pMFGPN = NULL;  \n" +
                "			SELECT mfgPN INTO pMFGPN FROM COMPONENT WHERE deletedAt IS NULL  \n" +
                "			AND id = (SELECT val FROM temp_CustMFGPn LIMIT i,1);  \n" +
                "  \n" +
                "			INSERT INTO rfq_assembly_history (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "								oldValue,newValue,changeVersion,createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                "			VALUES 	(\"component\", prefCPNPartID, NULL,NULL, prefCPNPartID, \"MPN\",  \n" +
                "				NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)), fun_DatetimetoUTCDateTime(),puserID,pUserRoleID,fun_DatetimetoUTCDateTime(),puserID,pUserRoleID);  \n" +
                "			SET i = i + 1;  \n" +
                "			END WHILE;  \n" +
                "			/* update component live internal version */  \n" +
                "			UPDATE component_bomsetting  \n" +
                "			SET liveInternalVersion = pLiveInternalVersion, liveVersion = CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)) WHERE refComponentID = prefCPNPartID;  \n" +
                "			/* add all mapping mfgPN against custpn */  \n" +
                "			INSERT INTO component_cust_alias_rev_pn(refComponentID,refCPNPartID,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                "			SELECT DISTINCT(val) `refComponentID` , prefCPNPartID `refCPNPartID`, puserID `createdBy`,pUserRoleID , fun_DatetimetoUTCDateTime(),puserID,pUserRoleID  \n" +
                "			FROM temp_CustMFGPn ;  \n" +
                "	END IF;  \n" +
                "	-- COMMIT;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateAllParentPartInternalVersion` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateAllParentPartInternalVersion`(  \n" +
                "    IN pPartId INT,  \n" +
                "    IN pTableName VARCHAR(50),  \n" +
                "    IN pUpdatedBy VARCHAR(255)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE lastAssemblyHistoryId INT;  \n" +
                "	DECLARE subAssyType INT;  \n" +
                "	DECLARE parentPartsCount INT;  \n" +
                "	DECLARE currentPartId INT;  \n" +
                "	DECLARE parentPartId INT;  \n" +
                "	DECLARE DESCRIPTION VARCHAR(200);  \n" +
                "	DECLARE parentPartLiveInternalVersion INT;  \n" +
                "	DECLARE parentMfgPN VARCHAR(100);  \n" +
                "	DECLARE parentLiveVersion VARCHAR(100);  \n" +
                "	DECLARE parentLineItemId INT;  \n" +
                "	DECLARE currentPartLiveInternalVersion INT;  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "  \n" +
                "	SET  subAssyType = 3;  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS TempAllParentParts;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS TempAllParentParts AS  \n" +
                "  \n" +
                "	WITH RECURSIVE cte AS  \n" +
                "	(  \n" +
                "	  SELECT  0 AS rfqlineItemId, c.Id AS partId, c.id AS childPartId, cb.liveinternalversion AS liveinternalversion  \n" +
                "	  FROM COMPONENT c  \n" +
                "	  JOIN component_bomsetting cb ON cb.refComponentID=c.id  \n" +
                "	  WHERE   c.id = pPartId AND c.category=subAssyType AND c.deletedAt IS NULL  \n" +
                "  \n" +
                "	  UNION ALL  \n" +
                "	  SELECT rlp.id AS rfqlineItemId, rlp.partId AS partId, child.partId AS childPartId,  cb.liveinternalversion AS liveinternalversion  \n" +
                "	  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, COMPONENT cp , component_bomsetting cb, cte child  \n" +
                "	  WHERE   rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType  AND cb.refComponentID=cp.id  \n" +
                "	  AND cp.deletedAt IS NULL AND rlp.deletedAt IS NULL AND rlap.deletedAt IS NULL  \n" +
                "	)  \n" +
                "	SELECT  rfqlineItemId, partId, childPartId, liveinternalversion FROM cte;  \n" +
                "all_parent_part_loop: LOOP  \n" +
                "	SELECT COUNT(1) INTO parentPartsCount FROM TempAllParentParts;  \n" +
                "	IF parentPartsCount = 0 THEN  \n" +
                "		LEAVE all_parent_part_loop;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT rfqlineItemId, partId, childPartId, liveInternalVersion INTO parentLineItemId, parentPartId, currentPartId, parentPartLiveInternalVersion  FROM TempAllParentParts LIMIT 1;  \n" +
                "  \n" +
                "	IF currentPartId = parentPartId AND currentPartId = pPartId THEN  \n" +
                "		DELETE FROM TempAllParentParts LIMIT 1;  \n" +
                "		ITERATE  all_parent_part_loop;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT id INTO lastAssemblyHistoryId FROM rfq_assembly_history WHERE partId = currentPartId ORDER BY id DESC LIMIT 1;  \n" +
                "  \n" +
                "	SET DESCRIPTION = CONCAT(pCompanyName,'-',CAST((parentPartLiveInternalVersion-1) AS CHAR), ' to change ', pCompanyName,'-',CAST(parentPartLiveInternalVersion AS CHAR));  \n" +
                "  \n" +
                "	SELECT c.mfgPN, cb.liveinternalversion  INTO parentMfgPN, currentPartLiveInternalVersion FROM COMPONENT c JOIN component_bomsetting cb ON cb.refComponentID=c.id  WHERE c.id = currentPartId;  \n" +
                "	SELECT cb.liveVersion  INTO parentLiveVersion FROM component_bomsetting cb WHERE cb.refComponentID = parentPartId;  \n" +
                "  \n" +
                "	INSERT INTO rfq_assembly_history  \n" +
                "	 (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "	 oldValue,newValue,changeVersion, DESCRIPTION, refInternalHistoryID,  \n" +
                "	 createdAt, createdBy)  \n" +
                "	VALUES 	(pTableName, parentLineItemId, parentLineItemId, NULL, parentPartId, \"MPN\",  \n" +
                "	 CAST(parentMfgPN AS CHAR), CAST(parentMfgPN AS CHAR), parentLiveVersion, DESCRIPTION, lastAssemblyHistoryId,  \n" +
                "	 fun_DatetimetoUTCDateTime(),pUpdatedBy);  \n" +
                "	 DELETE FROM TempAllParentParts LIMIT 1;  \n" +
                "  \n" +
                "	END LOOP all_parent_part_loop;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdatePartInternalVersion` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdatePartInternalVersion`(  \n" +
                "    IN pPartId INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE subAssyType INT;  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "  \n" +
                "	SET  subAssyType = 3;  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(UTC_DATE(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	UPDATE component_bomsetting  \n" +
                "	SET liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) ,  \n" +
                "    liveVersion = CONCAT(pCompanyName,'-',CAST(IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) AS CHAR))  \n" +
                "	WHERE refComponentID IN(  \n" +
                "	WITH RECURSIVE cte AS  \n" +
                "	(  \n" +
                "	  SELECT  c.Id AS partId, c.id AS childPartId, cb.liveinternalversion AS liveinternalversion  \n" +
                "	  FROM COMPONENT c JOIN  \n" +
                "	  component_bomsetting cb ON cb.refComponentID=c.id  \n" +
                "	  WHERE   c.id = pPartId AND c.category=subAssyType AND c.deletedAt IS NULL  \n" +
                "  \n" +
                "	  UNION ALL  \n" +
                "	  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
                "	  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, COMPONENT cp ,component_bomsetting cb, cte child  \n" +
                "	  WHERE   rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType  AND cb.refComponentID = c.id  \n" +
                "	  AND cp.deletedAt IS NULL AND rlp.deletedAt IS NULL AND rlap.deletedAt IS NULL  \n" +
                "	)  \n" +
                "	SELECT DISTINCT partId FROM cte);  \n" +
                "    END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_Update_Assembly_On_Standard_Change` ;  \n" +
                "CREATE PROCEDURE `Sproc_Update_Assembly_On_Standard_Change`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pOldStandard TEXT,  \n" +
                "	IN pNewStandard TEXT,  \n" +
                "	IN pUserID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE subAssyType INT;  \n" +
                "	DECLARE pLiveInternalVersion VARCHAR(100);  \n" +
                "	DECLARE totalAssyCount INT DEFAULT 0;  \n" +
                "	DECLARE currAssyIndex INT DEFAULT 0;  \n" +
                "	DECLARE currAssyID INT;  \n" +
                "	SET  subAssyType = 3;  \n" +
                "  \n" +
                "	IF((SELECT COUNT(1) FROM COMPONENT c WHERE c.id = pPartID AND c.category=subAssyType AND c.deletedAt IS NULL) > 0) THEN  \n" +
                "		CALL Sproc_UpdatePartInternalVersion (pPartID);  \n" +
                "  \n" +
                "		SELECT liveVersion INTO pLiveInternalVersion FROM component_bomsetting WHERE refComponentID  = pPartID;  \n" +
                "  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			DESCRIPTION,createdAt,createdBy,updatedBy,updatedAt)  \n" +
                "		VALUES 	(\"component\", pPartID, NULL, NULL, pPartID, \"Standard\",  \n" +
                "			pOldStandard, pNewStandard, pLiveInternalVersion,  \n" +
                "			'Standard Updated', fun_DatetimetoUTCDateTime(), pUserID, pUserID, fun_DatetimetoUTCDateTime());  \n" +
                "  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(pPartID, 'component', pUserID);  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "	-- Start Update Assembly standard in case of standard is export control  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllAssemblyResult AS  \n" +
                "	SELECT partId FROM rfq_lineitems_alternatepart WHERE mfgPNID = pPartID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totalAssyCount FROM tempAllAssemblyResult;  \n" +
                "	IF totalAssyCount > 0 THEN  \n" +
                "  \n" +
                "		WHILE currAssyIndex < totalAssyCount DO  \n" +
                "			SELECT  a.partId  \n" +
                "			INTO 	currAssyID  \n" +
                "			FROM 	tempAllAssemblyResult a LIMIT currAssyIndex, 1;  \n" +
                "  \n" +
                "			CALL Sproc_UpdateExportControllAssembly(currAssyID, pUserID);  \n" +
                "  \n" +
                "			SET currAssyIndex = currAssyIndex + 1;  \n" +
                "		END WHILE;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE tempAllAssemblyResult;  \n" +
                "  \n" +
                "	-- End Update Assembly standard in case of standard is export control  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_Update_BOM_MountingType_FunctionalType_new` ;  \n" +
                "CREATE PROCEDURE `Sproc_Update_BOM_MountingType_FunctionalType_new`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN puserID INT,  \n" +
                "    IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE subAssyType INT;  \n" +
                " 	SET  subAssyType = 3;  \n" +
                "  	DROP TEMPORARY TABLE IF EXISTS  componentResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS componentResult AS  \n" +
                "	SELECT  rla.partID  \n" +
                "	FROM rfq_lineitems_alternatepart AS rla  \n" +
                "	WHERE rla.mfgPNID = pPartID AND rla.isDeleted = FALSE  \n" +
                "	GROUP BY  partID;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  tempRfqLineItems;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempRfqLineItems AS  \n" +
                "	SELECT  rla.partID  \n" +
                "	FROM rfq_lineitems_alternatepart AS rla  \n" +
                "	WHERE rla.mfgPNID = pPartID AND rla.isDeleted = 0  \n" +
                "	GROUP BY rla.partID;  \n" +
                "  \n" +
                "	/* Update BOM Detail where part is used where part is added */  \n" +
                "		UPDATE rfq_lineitems_alternatepart rla  \n" +
                "		JOIN (  \n" +
                "				SELECT (MIN(c.mountingTypeID) != MAX(c.mountingTypeID)) AS mismatchMount,  \n" +
                "						(MIN(c.functionalCategoryID)!=MAX(c.functionalCategoryID))AS mismatchFunctional, rla.rfqLineItemsID  \n" +
                "				FROM rfq_lineitems_alternatepart rla  \n" +
                "				JOIN COMPONENT c ON c.id = rla.mfgPNID  \n" +
                "				WHERE rla.mfgPNID IS NOT NULL AND rla.isDeleted = 0  \n" +
                "					AND rla.rfqLineItemsID IN(SELECT rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE mfgPNID IN (pPartID))  \n" +
                "				GROUP BY rla.rfqLineItemsID  \n" +
                "				HAVING COUNT(1) >1  \n" +
                "			) mmla ON rla.rfqLineItemsID = mmla.rfqLineItemsID AND rla.isDeleted = 0  \n" +
                "        SET  \n" +
                "		rla.mismatchMountingTypeStep = (CASE WHEN mmla.mismatchMount = 1 AND rla.mismatchMountingTypeStep = 1 THEN 0  \n" +
                "					WHEN mmla.mismatchMount = 1 AND rla.mismatchMountingTypeStep = 0 THEN 0 ELSE 1 END),  \n" +
                "		rla.approvedMountingType = (CASE WHEN (((mmla.mismatchMount = 1 AND rla.mismatchMountingTypeStep = 1)  \n" +
                "					OR mmla.mismatchFunctional = 1 AND rla.mismatchFunctionalCategoryStep = 1) AND rla.approvedMountingType = 1) THEN 0  \n" +
                "					WHEN mmla.mismatchMount = 0 AND mmla.mismatchFunctional = 0 THEN 0 ELSE 0 END),  \n" +
                "		rla.mismatchFunctionalCategoryStep = (CASE WHEN mmla.mismatchFunctional = 1 AND rla.mismatchFunctionalCategoryStep = 1 THEN 0  \n" +
                "					WHEN mmla.mismatchFunctional = 1 AND rla.mismatchFunctionalCategoryStep = 0 THEN 0 ELSE 1 END),  \n" +
                "		rla.description  = (CASE WHEN mmla.mismatchMount = 1 AND mmla.mismatchFunctional = 1 THEN  \n" +
                "						CONCAT(REPLACE(REPLACE(IFNULL(rla.description,''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id),''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id),''),'  \n" +
                "',  \n" +
                "							fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id), '  \n" +
                "', fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id))  \n" +
                "					WHEN mmla.mismatchMount = 0 AND mmla.mismatchFunctional = 0 THEN  \n" +
                "						REPLACE(REPLACE(IFNULL(rla.description,''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id),''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id),'')  \n" +
                "					ELSE  \n" +
                "						(CASE WHEN mmla.mismatchMount = 1 AND mmla.mismatchFunctional = 0 THEN  \n" +
                "								CONCAT(REPLACE(REPLACE(IFNULL(rla.description,''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id),''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id),''),'  \n" +
                "', fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id))  \n" +
                "							WHEN mmla.mismatchFunctional = 1 AND mmla.mismatchMount = 0 THEN  \n" +
                "								CONCAT(REPLACE(REPLACE(IFNULL(rla.description,''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHMOUNTINGTYPE',rla.id),''),fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id),''),'  \n" +
                "', fun_createBOMErrorMsgByErrorCodeandLineID('MISMATCHFUNCTIONALCATEGOR',rla.id))  \n" +
                "						 END)  \n" +
                "					END),  \n" +
                "		rla.customerApproval = 'P',  \n" +
                "		rla.isUnlockApprovedPart = 1,  \n" +
                "		rla.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "		rla.updatedBy = puserID,  \n" +
                "		rla.updateByRoleId = pRoleID  \n" +
                "        WHERE rla.isdeleted = 0;  \n" +
                "  \n" +
                "  /* Update Assembly Internal version with parent assembly where part is added */  \n" +
                "		UPDATE component_bomsetting  \n" +
                "		SET  \n" +
                "			liveinternalversion = IF(ISNULL(liveinternalversion),0, (liveinternalversion + 1)) ,  \n" +
                "			liveVersion = CONCAT(fun_getInternalVersionTextforUpdatePartInternalVersion(refComponentID),'-',CAST(IF(ISNULL(liveinternalversion),0, (liveinternalversion)) AS CHAR))  \n" +
                "		WHERE refComponentID IN(  \n" +
                "		WITH RECURSIVE cte AS  \n" +
                "		(  \n" +
                "		  SELECT  c.Id AS partId, c.id AS childPartId, cb.liveinternalversion AS liveinternalversion  \n" +
                "		  FROM COMPONENT c  \n" +
                "		  JOIN  component_bomsetting cb ON cb.refComponentID=c.id  \n" +
                "		  JOIN tempRfqLineItems trla ON trla.partID = c.id  \n" +
                "		  WHERE c.category = subAssyType AND c.isdeleted = 0  \n" +
                "  \n" +
                "		  UNION ALL  \n" +
                "		  SELECT rlp.partId AS partId, child.partId AS childPartId,  cb.liveinternalversion AS liveinternalversion  \n" +
                "		  FROM rfq_lineitems rlp  \n" +
                "          INNER JOIN rfq_lineitems_alternatepart rlap ON rlap.rfqLineItemsID = rlp.id  \n" +
                "          INNER JOIN COMPONENT cp ON cp.id = rlap.mfgPNID  \n" +
                "          INNER JOIN  component_bomsetting cb ON cb.refComponentID=cp.id  \n" +
                "          INNER JOIN cte child ON child.partID = rlap.mfgPNID AND cp.category = subAssyType  \n" +
                "		  WHERE cp.isdeleted = 0 AND rlp.isdeleted = 0 AND rlap.isdeleted = 0  \n" +
                "		)  \n" +
                "		SELECT DISTINCT partId FROM cte);  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyPartDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_CopyPartDetail`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pToPartID INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pIsAttribute TINYINT,  \n" +
                "    IN pIsSettings TINYINT,  \n" +
                "    IN pIsAdditionalAttibute TINYINT,  \n" +
                "    IN pIsPackagingDetail TINYINT,  \n" +
                "    IN pIsStandards TINYINT,  \n" +
                "    IN pIsRequiredFunctionalType TINYINT,  \n" +
                "    IN pIsRequiredMountingType TINYINT,  \n" +
                "    IN pIsPackagingAliasPart TINYINT,  \n" +
                "    IN pIsOtherPartName TINYINT,  \n" +
                "    IN pIsAlternatePart TINYINT,  \n" +
                "    IN pIsRoHSReplacementPart TINYINT,  \n" +
                "    IN pIsDriveTool TINYINT,  \n" +
                "    IN pIsProcessMaterial TINYINT,  \n" +
                "    IN pIsRequiredMattingParts TINYINT,  \n" +
                "    IN pIsPickupPad TINYINT,  \n" +
                "    IN pIsProgram TINYINT,  \n" +
                "    IN pIsFunctionalTesingTool TINYINT,  \n" +
                "    IN pIsFinctionalRestingEquipment TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vFromPartCategory TINYINT;  \n" +
                "DECLARE vFromMfgType VARCHAR(5);  \n" +
                "DECLARE vIsCPN TINYINT;  \n" +
                "DECLARE vToPartIsCPN TINYINT;  \n" +
                "DECLARE vValidationPassed TINYINT;  \n" +
                "DECLARE vMisMatchFields LONGTEXT;  \n" +
                "DECLARE vMessage VARCHAR(200);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    SELECT * FROM vu_component WHERE 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    SELECT * FROM vu_component WHERE 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    SELECT * FROM component_alternatepn_validations WHERE 1 = 2;  \n" +
                "  \n" +
                "	/* Get From Part Detail For apply Validation */  \n" +
                "	SELECT co.category, co.isCPN  \n" +
                "      INTO vFromPartCategory, vIsCPN  \n" +
                "	FROM vu_component co  \n" +
                "	WHERE co.id = pFromPartID AND co.isDeleted = 0;  \n" +
                "  \n" +
                "    /* Get To Part Detail For apply Validation */  \n" +
                "    SELECT co.isCPN  \n" +
                "      INTO  vToPartIsCPN  \n" +
                "	FROM vu_component co  \n" +
                "	WHERE co.id = pToPartID AND co.isDeleted = 0;  \n" +
                "  \n" +
                "	SET vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "	IF pIsAttribute  THEN  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(SELECT `id`,  \n" +
                "        /* Copy IsAttribute */  \n" +
                "        `functionalCategoryID`,`mountingTypeID`,`operatingTemp`,`minOperatingTemp`,  \n" +
                "		`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                "		`noOfPosition`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                "		`length`,`width`,`heightText`,`height`,  \n" +
                "        /* Copy IsSetting */  \n" +
                "        `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                "		`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                "		`shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,  \n" +
                "        `programingRequired`,`functionalTestingRequired`,`restrictUSEwithpermission`,`restrictUsePermanently`,  \n" +
                "        /* Copy Additional Attribute */  \n" +
                "        `tolerance`,`voltage`,`value`,`powerRating`,`weight`,`feature`,`color`,`isEpoxyMount`,  \n" +
                "        /* Copy Packaging Detail */  \n" +
                "         `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`unit`,`pcbPerArray`,  \n" +
                "		`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ`,`isReceiveBulkItem`,  \n" +
                "        /* Copy Standard Detail */  \n" +
                "        `countryOfOrigin`,`htsCode`,  \n" +
                "  \n" +
                "		`requiredTestTime`,`mountingTypePartRequired`,`functionalTypePartRequired`  \n" +
                "  \n" +
                "        FROM vu_component WHERE id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`functionalCategoryID` = (CASE WHEN pIsAttribute = 1 THEN fromPart.functionalCategoryID ELSE toPart.`functionalCategoryID` END),  \n" +
                "		toPart.`mountingTypeID` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.mountingTypeID ELSE toPart.`mountingTypeID` END),  \n" +
                "		toPart.`operatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.operatingTemp ELSE toPart.`operatingTemp` END),  \n" +
                "		toPart.`minOperatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.minOperatingTemp ELSE toPart.`minOperatingTemp` END),  \n" +
                "		toPart.`maxOperatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.maxOperatingTemp ELSE toPart.`maxOperatingTemp` END),  \n" +
                "		toPart.`temperatureCoefficient` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficient ELSE toPart.`temperatureCoefficient` END),  \n" +
                "		toPart.`temperatureCoefficientValue` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficientValue ELSE toPart.`temperatureCoefficientValue` END),  \n" +
                "		toPart.`temperatureCoefficientUnit` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficientUnit ELSE toPart.`temperatureCoefficientUnit` END),  \n" +
                "		toPart.`connecterTypeID` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.connecterTypeID ELSE toPart.`connecterTypeID` END),  \n" +
                "		toPart.`noOfPosition` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfPosition ELSE toPart.`noOfPosition` END),  \n" +
                "		toPart.`noOfRows` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfRows ELSE toPart.`noOfRows` END),  \n" +
                "		toPart.`pitch` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.pitch ELSE toPart.`pitch` END),  \n" +
                "		toPart.`pitchMating` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.pitchMating ELSE toPart.`pitchMating` END),  \n" +
                "		toPart.`sizeDimension` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.sizeDimension ELSE toPart.`sizeDimension` END),  \n" +
                "		toPart.`length` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.length ELSE toPart.`length` END),  \n" +
                "		toPart.`width` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.width ELSE toPart.`width` END),  \n" +
                "		toPart.`heightText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.heightText ELSE toPart.`heightText` END),  \n" +
                "		toPart.`height` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.height ELSE toPart.`height` END),  \n" +
                "        /* Copy IsSetting */  \n" +
                "        toPart.`scrapValuePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.scrapValuePerBuild ELSE toPart.`scrapValuePerBuild` END),  \n" +
                "		toPart.`scrapRatePercentagePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.scrapRatePercentagePerBuild ELSE toPart.`scrapRatePercentagePerBuild` END),  \n" +
                "		toPart.`plannedValuePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.plannedValuePerBuild ELSE toPart.`plannedValuePerBuild` END),  \n" +
                "		toPart.`plannedOverRunPercentagePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.plannedOverRunPercentagePerBuild ELSE toPart.`plannedOverRunPercentagePerBuild` END),  \n" +
                "		toPart.`selfLifeDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.selfLifeDays ELSE toPart.`selfLifeDays` END),  \n" +
                "		toPart.`shelfLifeAcceptanceDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.shelfLifeAcceptanceDays ELSE toPart.`shelfLifeAcceptanceDays` END),  \n" +
                "		toPart.`shelfListDaysThresholdPercentage` =(CASE WHEN pIsSettings = 1 THEN fromPart.shelfListDaysThresholdPercentage ELSE toPart.`shelfListDaysThresholdPercentage` END),  \n" +
                "        toPart.`maxShelfLifeAcceptanceDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxShelfLifeAcceptanceDays ELSE toPart.`maxShelfLifeAcceptanceDays` END),  \n" +
                "		toPart.`maxShelfListDaysThresholdPercentage` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxShelfListDaysThresholdPercentage ELSE toPart.`maxShelfListDaysThresholdPercentage` END),  \n" +
                "        toPart.`shelfLifeDateType` = (CASE WHEN pIsSettings = 1 THEN fromPart.shelfLifeDateType ELSE toPart.`shelfLifeDateType` END),  \n" +
                "		toPart.`maxPriceLimit` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxPriceLimit ELSE toPart.`maxPriceLimit` END),  \n" +
                "		toPart.`maxQtyonHand` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxQtyonHand ELSE toPart.`maxQtyonHand` END),  \n" +
                "		toPart.`saftyStock` = (CASE WHEN pIsSettings = 1 THEN fromPart.saftyStock ELSE toPart.`saftyStock` END),  \n" +
                "		toPart.`eau` = (CASE WHEN pIsSettings = 1 THEN fromPart.eau ELSE toPart.`eau` END),  \n" +
                "		toPart.`businessRisk` = (CASE WHEN pIsSettings = 1 THEN fromPart.businessRisk ELSE toPart.`businessRisk` END),  \n" +
                "		toPart.`programingRequired` = (CASE WHEN pIsSettings = 1 THEN fromPart.programingRequired ELSE toPart.`programingRequired` END),  \n" +
                "		toPart.`restrictUSEwithpermission` = (CASE WHEN pIsSettings = 1 THEN fromPart.restrictUSEwithpermission ELSE toPart.`restrictUSEwithpermission` END),  \n" +
                "		toPart.`restrictUsePermanently` = (CASE WHEN pIsSettings = 1 THEN fromPart.restrictUsePermanently ELSE toPart.`restrictUsePermanently` END),  \n" +
                "        /* Copy Additional Attribute */  \n" +
                "        toPart.`tolerance` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.tolerance ELSE toPart.`tolerance` END),  \n" +
                "		toPart.`voltage` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.voltage ELSE toPart.`voltage` END),  \n" +
                "		toPart.`value` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.value ELSE toPart.`value` END),  \n" +
                "		toPart.`powerRating` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.powerRating ELSE toPart.`powerRating` END),  \n" +
                "		toPart.`weight` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.weight ELSE toPart.`weight` END),  \n" +
                "		toPart.`feature` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.feature ELSE toPart.`feature` END),  \n" +
                "		toPart.`isEpoxyMount` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.isEpoxyMount ELSE toPart.`isEpoxyMount` END),  \n" +
                "		toPart.`color` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.color ELSE toPart.`color` END),  \n" +
                "        /* Copy Packaging Detail */  \n" +
                "        toPart.`deviceMarking` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.deviceMarking ELSE toPart.`deviceMarking` END),  \n" +
                "		toPart.`packagingID` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingID ELSE toPart.`packagingID` END),  \n" +
                "		toPart.`minimum` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.minimum ELSE toPart.`minimum` END),  \n" +
                "		toPart.`mult` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.mult ELSE toPart.`mult` END),  \n" +
                "		toPart.`packageQty` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packageQty ELSE toPart.`packageQty` END),  \n" +
                "        toPart.`umidSPQ` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.umidSPQ ELSE toPart.`umidSPQ` END),  \n" +
                "		toPart.`uomClassID` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uomClassID ELSE toPart.`uomClassID` END),  \n" +
                "		toPart.`uom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uom ELSE toPart.`uom` END),  \n" +
                "		toPart.`unit` =(CASE WHEN pIsPackagingDetail = 1 THEN fromPart.unit ELSE toPart.`unit` END),  \n" +
                "		toPart.`pcbPerArray` =(CASE WHEN pIsPackagingDetail = 1 THEN fromPart.pcbPerArray ELSE toPart.`pcbPerArray` END),  \n" +
                "		toPart.`grossWeight` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.grossWeight ELSE toPart.`grossWeight` END),  \n" +
                "		toPart.`grossWeightUom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.grossWeightUom ELSE toPart.`grossWeightUom` END),  \n" +
                "		toPart.`packagingWeight` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingWeight ELSE toPart.`packagingWeight` END),  \n" +
                "		toPart.`packagingWeightUom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingWeightUom ELSE toPart.`packagingWeightUom` END),  \n" +
                "        toPart.`isReceiveBulkItem` =  (CASE WHEN pIsPackagingDetail = 1 THEN ((CASE WHEN toPart.partType = 4 THEN fromPart.isReceiveBulkItem ELSE FALSE END))  \n" +
                "        ELSE toPart.`isReceiveBulkItem` END),  \n" +
                "		/* Copy Standard Detail */  \n" +
                "		toPart.`countryOfOrigin` = (CASE WHEN pIsStandards = 1 THEN fromPart.countryOfOrigin ELSE toPart.`countryOfOrigin` END),  \n" +
                "		toPart.`htsCode` = (CASE WHEN pIsStandards = 1 THEN fromPart.packagingWeightUom ELSE toPart.`htsCode` END),  \n" +
                "  \n" +
                "		toPart.`requiredTestTime` = (CASE WHEN (pIsFunctionalTesingTool = 1 AND vToPartIsCPN = 0) THEN fromPart.requiredTestTime ELSE toPart.`requiredTestTime` END),  \n" +
                "        toPart.`mountingTypePartRequired`= (CASE WHEN (pIsRequiredMountingType = 1  AND vToPartIsCPN = 0) THEN fromPart.mountingTypePartRequired ELSE  toPart.`mountingTypePartRequired` END),  \n" +
                "        toPart.`functionalTypePartRequired` = (CASE WHEN (pIsRequiredFunctionalType = 1  AND vToPartIsCPN = 0) THEN fromPart.functionalTypePartRequired ELSE toPart.`functionalTypePartRequired` END),  \n" +
                "        toPart.`driverToolRequired`= (CASE WHEN (pIsDriveTool = 1 AND vToPartIsCPN = 0  AND vToPartIsCPN = 0) THEN fromPart.driverToolRequired ELSE toPart.`driverToolRequired` END),  \n" +
                "        toPart.`matingPartRquired` = (CASE WHEN (pIsRequiredMattingParts = 1  AND vToPartIsCPN = 0  AND vToPartIsCPN = 0) THEN fromPart.matingPartRquired ELSE toPart.`matingPartRquired` END),  \n" +
                "        toPart.`pickupPadRequired` = (CASE WHEN (pIsPickupPad = 1  AND vToPartIsCPN = 0  AND vToPartIsCPN = 0) THEN fromPart.pickupPadRequired ELSE toPart.`pickupPadRequired` END),  \n" +
                "        toPart.`functionalTestingRequired`= (CASE WHEN (pIsFunctionalTesingTool = 1  AND vToPartIsCPN = 0) THEN fromPart.functionalTestingRequired ELSE toPart.`functionalTestingRequired` END),  \n" +
                "  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = CURRENT_TIMESTAMP()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "  \n" +
                "		UPDATE component_bomsetting toPart,  \n" +
                "		(SELECT `id`,  \n" +
                "        /* Copy IsSetting */  \n" +
                "        `bomLock`  \n" +
                "        FROM vu_component WHERE id = pFromPartID) fromPart  \n" +
                "        SET  \n" +
                "        toPart.`bomLock` = (CASE WHEN pIsSettings = 1 THEN fromPart.bomLock ELSE toPart.`bomLock` END),  \n" +
                "        toPart.`updatedBy` = pUserID,  \n" +
                "	toPart.`updatedAt` = CURRENT_TIMESTAMP()  \n" +
                "	WHERE toPart.`refComponentID` = pToPartID;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SET vMessage = '';  \n" +
                "			CALL Sproc_CopyPartDetailOnCopyAndDuplicatePart(pFromPartID,pToPartID,pUserID,vIsCPN,vToPartIsCPN,vFromPartCategory,pIsStandards,pIsRequiredFunctionalType,pIsRequiredMountingType,pIsPackagingAliasPart,pIsOtherPartName  \n" +
                "				,pIsAlternatePart,pIsRoHSReplacementPart,pIsDriveTool,pIsProcessMaterial,pIsRequiredMattingParts,pIsPickupPad,pIsFunctionalTesingTool,pIsFinctionalRestingEquipment, vMisMatchFields, vMessage);  \n" +
                "  \n" +
                "	IF(vMessage != '')  \n" +
                "	THEN  \n" +
                "		SELECT vMessage AS message,vMisMatchFields AS misMatchFields;  \n" +
                "	ELSE  \n" +
                "		SELECT * FROM COMPONENT WHERE id = pToPartID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateAssemblyRevision` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pNewEpicorType VARCHAR(50),  \n" +
                "    IN pNewAssemblyType INT,  \n" +
                "    IN pNewMfgcodeID INT,  \n" +
                "    IN pNewCustAssyPN VARCHAR(500),  \n" +
                "    IN pNewPartRev VARCHAR(50),  \n" +
                "    IN pNewMfgPN VARCHAR(100),  \n" +
                "    IN pNewAssyCode VARCHAR(50),  \n" +
                "    IN pNewNickName VARCHAR(50),  \n" +
                "    IN pNewPIDCode VARCHAR(109),  \n" +
                "    IN pIsCPN TINYINT,  \n" +
                "    IN pIsCustom TINYINT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pUserRoleId INT,  \n" +
                "    IN pIsAttribute TINYINT,  \n" +
                "    IN pIsSettings TINYINT,  \n" +
                "    IN pIsAdditionalAttibute TINYINT,  \n" +
                "    IN pIsPackagingDetail TINYINT,  \n" +
                "    IN pIsStandards TINYINT,  \n" +
                "    IN pIsRequiredFunctionalType TINYINT,  \n" +
                "    IN pIsRequiredMountingType TINYINT,  \n" +
                "    IN pIsPackagingAliasPart TINYINT,  \n" +
                "    IN pIsOtherPartName TINYINT,  \n" +
                "    IN pIsAlternatePart TINYINT,  \n" +
                "    IN pIsRoHSReplacementPart TINYINT,  \n" +
                "    IN pIsDriveTool TINYINT,  \n" +
                "    IN pIsProcessMaterial TINYINT,  \n" +
                "    IN pIsRequiredMattingParts TINYINT,  \n" +
                "    IN pIsPickupPad TINYINT,  \n" +
                "    IN pIsFunctionalTesingTool TINYINT,  \n" +
                "    IN pIsFinctionalRestingEquipment TINYINT,  \n" +
                "    IN pIsBOM TINYINT,  \n" +
                "    IN pIsComments TINYINT,  \n" +
                "    IN pIsCopyImages TINYINT,  \n" +
                "    IN pIsCopyDatasheet TINYINT,  \n" +
                "    IN pIsCopyDocument TINYINT,  \n" +
                "    IN pIsOperationalAttirbutes TINYINT,  \n" +
                "    IN pIsAcceptableShippinCountry TINYINT,  \n" +
                "    IN pIsTrackSNumber TINYINT,  \n" +
                "    IN pMfgPNDescription VARCHAR(2000),  \n" +
                "    IN pDetailDescription VARCHAR(2000),  \n" +
                "    IN pInternalReference VARCHAR(50),  \n" +
                "    IN pRoHSStatusID INT,  \n" +
                "    IN pIsFluxNotApplicable TINYINT,  \n" +
                "    IN pIsWaterSoluble TINYINT,  \n" +
                "    IN pIsNoClean TINYINT,  \n" +
                "    IN pSpecialNote VARCHAR(2000),  \n" +
                "    IN pRohsDeviation INT,  \n" +
                "    IN pFunctionalTypeID INT,  \n" +
                "    IN pMountingTypeID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed TINYINT;  \n" +
                "DECLARE vFromPartCategory TINYINT;  \n" +
                "DECLARE vFromMfgType VARCHAR(5);  \n" +
                "DECLARE vIsCPN TINYINT;  \n" +
                "DECLARE vCount INT;  \n" +
                "DECLARE vToPartID INT;  \n" +
                "DECLARE vUserRoleId INT;  \n" +
                "DECLARE vMisMatchFields LONGTEXT;  \n" +
                "DECLARE vSerialNumber VARCHAR(20);  \n" +
                "DECLARE vMessage VARCHAR(200);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    SELECT * FROM vu_component WHERE 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    SELECT * FROM vu_component WHERE 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    SELECT * FROM component_alternatepn_validations WHERE 1 = 2;  \n" +
                "  \n" +
                "	SET vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  	SET vCount = 0;  \n" +
                "    SELECT co.category, m.mfgType, COUNT(co.id), co.isCPN  \n" +
                "      INTO vFromPartCategory, vFromMfgType, vCount, vIsCPN  \n" +
                "	  FROM vu_component co  \n" +
                "	  JOIN mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "	 WHERE co.id = pFromPartID AND co.isDeleted = 0  \n" +
                "     GROUP BY co.category, m.mfgType, co.id, co.isCPN  ;  \n" +
                "  \n" +
                "	IF vCount = 0 THEN  \n" +
                "		SET vValidationPassed = 0;  \n" +
                "		SELECT 'PART_NOT_FOUND' AS message;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF vFromMfgType = 'DIST' THEN /*in case of supplier part must follow mfr part attributes*/  \n" +
                "		SET pIsAttribute = 1;  \n" +
                "        SET pIsAdditionalAttibute = 1;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET vCount = 0;  \n" +
                "    IF (vFromPartCategory = 3) THEN # check category  \n" +
                "	   SELECT COUNT(1) INTO vCount  \n" +
                "		 FROM vu_component co  \n" +
                "		WHERE co.mfgcodeID = pNewMfgcodeID  \n" +
                "          AND co.category = 3  \n" +
                "		  AND co.custAssyPN = pNewCustAssyPN  \n" +
                "		  AND co.rev = pNewPartRev  \n" +
                "          AND co.isDeleted = 0  \n" +
                "		  AND co.deletedAt IS NULL  \n" +
                "	  GROUP BY co.mfgcodeID,co.category,co.custAssyPN,co.rev;  \n" +
                "		IF vCount > 0 THEN  \n" +
                "			SET vValidationPassed = 0;  \n" +
                "            SELECT 'DUPLICATE_REV' AS message;  \n" +
                "        END IF;  \n" +
                "  \n" +
                "         SET vCount = 0;  \n" +
                "		 SELECT COUNT(1) INTO vCount  \n" +
                "			 FROM vu_component co  \n" +
                "			WHERE co.nickName != pNewNickName  \n" +
                "              AND co.category = 3  \n" +
                "              AND co.custAssyPN = pNewCustAssyPN  \n" +
                "              AND co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  AND co.isDeleted = 0  \n" +
                "			  AND co.deletedAt IS NULL  \n" +
                "              GROUP BY co.category,co.custAssyPN,co.mfgcodeID;  \n" +
                "		  IF vCount > 0 THEN  \n" +
                "			SET vValidationPassed = 0;  \n" +
                "				SELECT 'NICKNAME_MISMATCH_VALIDATION' AS message,  \n" +
                "						CONCAT('(',m.mfgCode,') ',m.mfgName) mfrName,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 FROM vu_component co  \n" +
                "                 JOIN mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "				WHERE co.nickName != pNewNickName  \n" +
                "				  AND co.category = 3  \n" +
                "				  AND co.custAssyPN = pNewCustAssyPN  \n" +
                "				  AND co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  AND co.isDeleted = 0  \n" +
                "				  AND co.deletedAt IS NULL ;  \n" +
                "				 -- limit 1;  \n" +
                "		  END IF;  \n" +
                "  \n" +
                "		SET vCount = 0;  \n" +
                "		 SELECT COUNT(1) INTO vCount  \n" +
                "			 FROM vu_component co  \n" +
                "			WHERE co.nickName = pNewNickName  \n" +
                "              AND co.category = 3  \n" +
                "              AND co.custAssyPN != pNewCustAssyPN  \n" +
                "              AND co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  AND co.isDeleted = 0  \n" +
                "			  AND co.deletedAt IS NULL  \n" +
                "			GROUP BY co.nickName,co.category,co.mfgcodeID;  \n" +
                "		 IF vCount > 0 THEN  \n" +
                "			SET vValidationPassed = 0;  \n" +
                "				SELECT 'DUPLICATE_NICKNAME' AS message,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 FROM vu_component co  \n" +
                "				WHERE co.nickName = pNewNickName  \n" +
                "				  AND co.category = 3  \n" +
                "				  AND co.custAssyPN != pNewCustAssyPN  \n" +
                "				  AND co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  AND co.isDeleted = 0  \n" +
                "				  AND co.deletedAt IS NULL  ;  \n" +
                "		  END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SET vCount = 0;  \n" +
                "		SELECT COUNT(1) INTO vCount  \n" +
                "		 FROM vu_component co  \n" +
                "		WHERE co.mfgcodeID = pNewMfgcodeID  \n" +
                "		  AND co.mfgPN = pNewMfgPN  \n" +
                "          AND co.isDeleted = 0  \n" +
                "		  AND co.deletedAt IS NULL  \n" +
                "	  GROUP BY co.mfgcodeID,co.mfgPN;  \n" +
                "	 IF vCount > 0 THEN  \n" +
                "		SET vValidationPassed = 0;  \n" +
                "        SELECT 'DUPLICATE_MFGPN' AS message;  \n" +
                "     END IF;  \n" +
                "  \n" +
                "    SET vCount = 0;  \n" +
                "		SELECT COUNT(1) INTO vCount  \n" +
                "		 FROM vu_component co  \n" +
                "		WHERE co.PIDCode = pNewPIDCode  \n" +
                "		  AND co.isDeleted = 0  \n" +
                "		  AND co.deletedAt IS NULL  \n" +
                "          GROUP BY co.PIDCode;  \n" +
                "    IF vCount > 0 THEN  \n" +
                "		SET vValidationPassed = 0;  \n" +
                "        SELECT 'DUPLICATE_PID' AS message;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF vValidationPassed = 1 THEN /*if above validations passed then only generate new serial number*/  \n" +
                "		CALL Sproc_GenerateIncrementalNumber(CASE WHEN vFromMfgType = 'MFG' THEN  \n" +
                "													'MPNSystemID'  \n" +
                "												ELSE 'SPNSystemID' END,  \n" +
                "											 TRUE);  \n" +
                "		  SELECT systemID, message INTO vSerialNumber, vMessage  \n" +
                "		  FROM temp_serialNumber;  \n" +
                "        IF vMessage IS NOT NULL AND vMessage != '' THEN  \n" +
                "			SET vValidationPassed = 0;  \n" +
                "			SELECT vMessage AS message;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF vValidationPassed = 1 THEN  #1 passed, 0 failed  \n" +
                "		-- START TRANSACTION;  \n" +
                "		INSERT INTO COMPONENT(  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart,replacementPartID, partType, category, epicorType, mfgcodeID,  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                operatingTemp,				minOperatingTemp,				maxOperatingTemp,  \n" +
                "				temperatureCoefficient,				temperatureCoefficientValue,				temperatureCoefficientUnit,				connecterTypeID,  \n" +
                "				noOfPosition,				noOfRows,  \n" +
                "				pitch,				pitchMating,				sizeDimension,				LENGTH,				width,				heightText,				height,  \n" +
                "				partStatus, leadTime, serialNumber, RoHSStatusID,  \n" +
                "				rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType, isEpoxyMount,  \n" +
                "                scrapValuePerBuild,				scrapRatePercentagePerBuild,				plannedValuePerBuild,				plannedOverRunPercentagePerBuild,				selfLifeDays,  \n" +
                "				shelfLifeAcceptanceDays,				shelfListDaysThresholdPercentage,				maxShelfLifeAcceptanceDays,				maxShelfListDaysThresholdPercentage,  \n" +
                "				shelfLifeDateType,				maxPriceLimit,				maxQtyonHand,				saftyStock,				eau,				businessRisk,				programingRequired,  \n" +
                "                restrictUSEwithpermission,                restrictUsePermanently,  \n" +
                "                tolerance,				voltage,				VALUE,				powerRating,  \n" +
                "				weight,				feature,				color,  \n" +
                "                deviceMarking,				packagingID,  \n" +
                "				minimum,				mult,				packageQty,				umidSPQ,  \n" +
                "                pcbPerArray,                IsReceiveBulkItem)  \n" +
                "		SELECT pIsCustom, pIsCPN, rfqOnly, isGoodPart,replacementPartID, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				pMfgPNDescription, pSpecialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                pFunctionalTypeID,  \n" +
                "                pMountingTypeID,  \n" +
                "                /* Copy in case Attribute  checked*/  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  operatingTemp ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  minOperatingTemp ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  maxOperatingTemp ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficient ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientValue ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientUnit ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  connecterTypeID ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfPosition ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfRows ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitch ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitchMating ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  sizeDimension ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  LENGTH ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  width ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  heightText ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  height ELSE NULL END),  \n" +
                "  \n" +
                "				partStatus,  leadTime, vSerialNumber/*serialNumber*/, pRoHSStatusID,  \n" +
                "				pRohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, FALSE /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "                pIsFluxNotApplicable,  \n" +
                "                pIsWaterSoluble,  \n" +
                "                pIsNoClean,  \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1  AND pIsCPN = 0) THEN requiredTestTime ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsDriveTool = 1 AND pIsCPN = 0) THEN driverToolRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1  AND pIsCPN = 0) THEN matingPartRquired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsPickupPad = 1  AND pIsCPN = 0) THEN pickupPadRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1  AND pIsCPN = 0) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                pInternalReference,  \n" +
                "                mfgType,isEpoxyMount,  \n" +
                "  \n" +
                "                /* Copy in case Settings checked*/  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapValuePerBuild ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapRatePercentagePerBuild ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedValuePerBuild ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedOverRunPercentagePerBuild ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  selfLifeDays ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeAcceptanceDays ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfListDaysThresholdPercentage ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfLifeAcceptanceDays ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfListDaysThresholdPercentage ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeDateType ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxPriceLimit ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxQtyonHand ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  saftyStock ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  eau ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  businessRisk ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  programingRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 AND pIsCPN = 0) THEN  restrictUSEwithpermission ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 AND pIsCPN = 0) THEN  restrictUsePermanently ELSE 0 END),  \n" +
                "  \n" +
                "                /* Copy in case Additional Attribute checked*/  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  tolerance ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  voltage ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  `value` ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  powerRating ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  weight ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  feature ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  color ELSE NULL END),  \n" +
                "  \n" +
                "                /* Copy in case Packaging Detail checked*/  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  deviceMarking ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packagingID ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  minimum ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  mult ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packageQty ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  umidSPQ ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  pcbPerArray ELSE NULL END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  IsReceiveBulkItem ELSE NULL END)  \n" +
                "		 FROM vu_component  \n" +
                "		WHERE id = pFromPartID;  \n" +
                "		SET vToPartID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF(vValidationPassed = 1)  \n" +
                "		THEN  \n" +
                "			 SET vMessage = '';  \n" +
                "			 CALL Sproc_CopyPartDetailOnCopyAndDuplicatePart(pFromPartID,vToPartID,pUserID,vIsCPN,pIsCPN,vFromPartCategory,pIsStandards,pIsRequiredFunctionalType,pIsRequiredMountingType,pIsPackagingAliasPart,pIsOtherPartName  \n" +
                "				,pIsAlternatePart,pIsRoHSReplacementPart,pIsDriveTool,pIsProcessMaterial,pIsRequiredMattingParts,pIsPickupPad,pIsFunctionalTesingTool,pIsFinctionalRestingEquipment, vMisMatchFields, vMessage);  \n" +
                "  \n" +
                "            IF(vMessage != '')  \n" +
                "			THEN  \n" +
                "				SELECT vMessage AS message,vMisMatchFields AS misMatchFields;  \n" +
                "			ELSE  \n" +
                "				IF pIsSettings THEN  \n" +
                "					INSERT INTO `component_temperature_sensitive_data`  \n" +
                "					(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					SELECT `pickTemperatureAbove`,`timeLiquidusSecond`, CURRENT_TIMESTAMP() `createdAt`, pUserID  `createdBy`, CURRENT_TIMESTAMP() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					FROM component_temperature_sensitive_data WHERE refComponentID = pFromPartID AND isDeleted = 0 AND deletedAt IS NULL;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF pIsAcceptableShippinCountry THEN  \n" +
                "					INSERT INTO component_acceptable_shipping_countries  \n" +
                "						(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,countryID,CURRENT_TIMESTAMP(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "						component_acceptable_shipping_countries WHERE refComponentID= pFromPartID AND isDeleted = 0;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF (vFromPartCategory = 3) THEN  \n" +
                "					IF pIsBOM THEN  \n" +
                "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, TRUE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, pUserRoleId);  \n" +
                "					END IF;  \n" +
                "					CALL Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                "				END IF;  \n" +
                "				IF(pIsComments = 1) THEN  \n" +
                "						INSERT INTO componenet_inspection_requirement_det  \n" +
                "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "						SELECT vToPartID,inspectionRequirementId,pUserID,CURRENT_TIMESTAMP(),  \n" +
                "						pUserRoleId,category FROM componenet_inspection_requirement_det WHERE partId = pFromPartID;  \n" +
                "						INSERT INTO assembly_revision_comments  \n" +
                "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                "						SELECT `commentBy`,`comment`,pUserID,CURRENT_TIMESTAMP(),vToPartID,pUserRoleId FROM assembly_revision_comments WHERE  \n" +
                "							partID = pFromPartID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,FALSE);  \n" +
                "				IF pIsCopyImages  THEN  \n" +
                "					INSERT INTO component_images  \n" +
                "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					SELECT imageURL, vToPartID,pUserID, CURRENT_TIMESTAMP(), pUserRoleId  \n" +
                "					 FROM component_images  \n" +
                "					WHERE refComponentID = pFromPartID AND isDeleted = FALSE;  \n" +
                "				END IF;  \n" +
                "				IF pIsCopyDatasheet  THEN  \n" +
                "					INSERT INTO component_datasheets  \n" +
                "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					SELECT datasheetURL, vToPartID,pUserID ,CURRENT_TIMESTAMP(), pUserRoleId  \n" +
                "					FROM component_datasheets  \n" +
                "						WHERE refComponentID = pFromPartID AND isDeleted = FALSE;  \n" +
                "				END IF;  \n" +
                "				IF pIsOperationalAttirbutes  THEN  \n" +
                "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,attributeID,attributeValue,CURRENT_TIMESTAMP(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "					component_dynamic_attribute_mapping_part WHERE mfgPNID= pFromPartID AND isDeleted = 0;  \n" +
                "				END IF;  \n" +
                "				IF pIsCopyDocument THEN  \n" +
                "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                "					INSERT INTO generic_folder  \n" +
                "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM generic_folder a  \n" +
                "					WHERE a.refTransID = pFromPartID  \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE generic_folder gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                "  \n" +
                "					INSERT INTO genericfiles  \n" +
                "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "					SELECT gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,CURRENT_TIMESTAMP(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM genericfiles WHERE refTransID = pFromPartID AND entityID = -9 AND isRecycle = 0 AND isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE genericfiles gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET @documentPathOfFromPart = (SELECT documentPath FROM vu_component WHERE id = pFromPartID);  \n" +
                "				IF(@documentPathOfFromPart IS NULL)  \n" +
                "				THEN  \n" +
                "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,FALSE);  \n" +
                "				END IF;  \n" +
                "				SELECT *,(SELECT documentPath FROM vu_component WHERE id = pFromPartID) documentPathOfFromPart FROM vu_component WHERE id = vToPartID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentMFGAliasSearch` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(500),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pRoHSStatusID VARCHAR(100),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pMountingType VARCHAR(50),  \n" +
                "	IN pMountingTypeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pIsContainCPN TINYINT,  \n" +
                "	IN pRohsMainCategoryID INT,  \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                "	IN prefSupplierMfgpnComponentID INT ,  \n" +
                "	IN ppackagingID INT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "    IN pStrictCPNPart TINYINT,  \n" +
                "	IN psupplierID INT,  \n" +
                "    IN pPartType INT,  \n" +
                "    IN pExcludeStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vRohsMainCategoryID INT;  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	 SET @SQLStatement1=CONCAT(\" SELECT *  \n" +
                "		FROM  \n" +
                "		(  \n" +
                "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
                "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          					c.rev,  \n" +
                "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
                "                    fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') mfgCodeName,  \n" +
                "					c.category,								c.imageURL,						c.documentPath,  \n" +
                "					c.mfgPNDescription,				c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
                "					c.value,								c.partPackage,					c.powerRating,  \n" +
                "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
                "					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
                "					c.pitchMating,							c.length,						c.width,  \n" +
                "					c.height,								c.voltage,						c.weight,  \n" +
                "					c.feature,								c.color,						c.partStatus,  \n" +
                "					c.uom,									c.uomClassID,					c.unit,  \n" +
                "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,								r.name AS rohsName,  \n" +
                "					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
                "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
                "					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
                "					c.heightText,							c.isCPN,						c.isCustom,  \n" +
                "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
                "					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
                "					c.plannedValuePerBuild,					c.programingRequired,  \n" +
                "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
                "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
                "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
                "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,					c.isReceiveBulkItem,			c.packagingID  \n" +
                "			FROM 	vu_component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \");  \n" +
                "  IF  pId IS NOT NULL THEN  \n" +
                "    		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND c.id = \" ,pId );  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF  pMfgType IS NOT NULL THEN  \n" +
                "    		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND m.mfgType = '\",pMfgType,\"' \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF  pRoHSStatusID IS NOT NULL THEN  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.RoHSStatusID = \", pRoHSStatusID );  \n" +
                "	 END IF;  \n" +
                "	IF  pMfgCodeId IS NOT NULL THEN  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.mfgcodeID = \",pMfgCodeId );  \n" +
                "	 END IF;  \n" +
                "	IF  pMountingType IS NOT NULL THEN  \n" +
                "    	SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND mt.name = '\",pMountingType,\"' \");  \n" +
                "	 END IF;  \n" +
                "	IF  pMountingTypeId IS NOT NULL THEN  \n" +
                "				SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mountingTypeID = \",pMountingTypeId );  \n" +
                "	 END IF;  \n" +
                "	IF  pCategoryID IS NOT NULL THEN  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.category = \", pCategoryID  );  \n" +
                "	 END IF;  \n" +
                "	/* Fetch EXCEPT CPN part */  \n" +
                "	IF  IFNULL(pIsContainCPN,FALSE) = FALSE  THEN  \n" +
                "      #(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.isCPN = FALSE \");  \n" +
                "	 END IF;  \n" +
                "     /* Fetch only CPN part */  \n" +
                "	IF  IFNULL(pStrictCPNPart,FALSE) != FALSE  THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.isCPN = TRUE \");  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	IF  pRohsMainCategoryID IS NOT NULL THEN  \n" +
                "		 SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                "		/*===>this logic is added to compare invert rohs category*/  \n" +
                "		IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                "			IF pRohsMainCategoryID = -1 THEN  \n" +
                "				SET vRohsMainCategoryID = -2;  \n" +
                "			ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                "				SET vRohsMainCategoryID = -1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "        /*<===this logic is added to compare invert rohs category*/  \n" +
                "		#AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "   		IF vRohsMainCategoryID IS NOT NULL THEN  \n" +
                "        SET @SQLStatement1=CONCAT(@SQLStatement1,\" and  r.refMainCategoryID  = \",vRohsMainCategoryID );  \n" +
                "        END IF;  \n" +
                "	 END IF;  \n" +
                "	IF  prefSupplierMfgpnComponentID IS NOT NULL THEN  \n" +
                "    	#AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" c.refSupplierMfgpnComponentID <=> IFNULL(\",prefSupplierMfgpnComponentID,\", c.refSupplierMfgpnComponentID)  \");  \n" +
                "	 END IF;  \n" +
                "	IF  pPartType IS NOT NULL THEN  \n" +
                "        #AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.partType = '\",pPartType,\"' \");  \n" +
                "	 END IF;  \n" +
                "	IF  ppackagingID IS NOT NULL THEN  \n" +
                "    	#AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.packagingID <=> IFNULL(\",ppackagingID,\",c.packagingID) \");  \n" +
                "	 END IF;  \n" +
                "	IF  pstrictCustomPart IS NOT NULL THEN  \n" +
                "			#AND c.category != 3  AND c.iscustom = 1  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.category != 3  AND c.iscustom = 1 \");  \n" +
                "	 END IF;  \n" +
                "	IF  psupplierID IS NOT NULL AND pstrictCustomPart  = 1 THEN  \n" +
                "		/* Old logic  \n" +
                "        (c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "									FROM supplier_mapping_mst smm  \n" +
                "									WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
                "			)  \n" +
                "        */  \n" +
                "        SET @SQLStatement1=CONCAT(@SQLStatement1,\"  AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "																			FROM supplier_mapping_mst smm  \n" +
                "																			WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(\",psupplierID,\",smm.supplierID)  \n" +
                "																		union all /*get mfg which set as company*/  \n" +
                "																		SELECT mc.id  \n" +
                "																				FROM mfgcodemst mc  \n" +
                "																				WHERE mc.iscompany = 1 AND mc.isdeleted = 0  \n" +
                "																		union all /* get All Customer code */  \n" +
                "																		SELECT mc.id  \n" +
                "																				FROM mfgcodemst mc  \n" +
                "																				WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0  \n" +
                "																		)  \");  \n" +
                "	 END IF;  \n" +
                "	IF  pExcludeStatus IS NOT NULL THEN  \n" +
                "    #AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.partStatus != '\",pExcludeStatus,\"' \");  \n" +
                "	 END IF;  \n" +
                "     /*Close Inner query section */  \n" +
                "     SET @SQLStatement1=CONCAT(@SQLStatement1,\" ) AS a  where 1= 1 \");  \n" +
                "  \n" +
                "     IF  pSearch IS NOT NULL THEN  \n" +
                "     /* old query(  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "     */  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and  exists ( select 1 from ( select a.id, a.mfgpn name from dual  \n" +
                "																					union all  \n" +
                "																					select opn.refcomponentid ,opn.name from component_otherpn opn where opn.refcomponentid = a.id  \n" +
                "																				) x where x.id  = a.id and x.name  LIKE CONCAT('%\", pSearch , \"%')  ) \");  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "     	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ORDER BY mfgPN For update\");  \n" +
                "     PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    /* this logic used in purchase order when supplier is strictly custom part */  \n" +
                "   /*  \n" +
                "	IF(pstrictCustomPart = 1)THEN  \n" +
                "		SELECT *  \n" +
                "		FROM  \n" +
                "		(  \n" +
                "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
                "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          					c.rev,  \n" +
                "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
                "					c.category,								c.imageURL,						c.documentPath,  \n" +
                "					c.mfgPNDescription,						c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
                "					c.value,								c.partPackage,					c.powerRating,  \n" +
                "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
                "					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
                "					c.pitchMating,							c.length,						c.width,  \n" +
                "					c.height,								c.voltage,						c.weight,  \n" +
                "					c.feature,								c.color,						c.partStatus,  \n" +
                "					c.uom,									c.uomClassID,					c.unit,  \n" +
                "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,								r.name AS rohsName,  \n" +
                "					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
                "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
                "					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
                "					c.heightText,							c.isCPN,						c.isCustom,  \n" +
                "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
                "					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
                "					c.plannedValuePerBuild,					c.programingRequired,  \n" +
                "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
                "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
                "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
                "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "			AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "									FROM supplier_mapping_mst smm  \n" +
                "									WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
                "			)  \n" +
                "			AND c.category != 3  \n" +
                "			AND c.iscustom = 1  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "  \n" +
                "	ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart = 0) THEN  */  \n" +
                "	/* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
                "    Reports, Price Break Update, Customer Part, Good-Bad Mapping Part, Supplier Quote, Supplier RMA */  \n" +
                "	/*	SELECT * FROM  \n" +
                "		(  \n" +
                "			 SELECT c.id,							CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN, 					c.packaginggroupID, 					c.PIDCode,  \n" +
                "					c.isGoodPart, 						c.RoHSStatusID, 						c.rohsgroupID,  \n" +
                "					c.mfgcodeID,					    c.rev,  \n" +
                "					m.mfgCode, 							m.mfgType,								m.mfgName,  \n" +
                "					c.category,							c.imageURL,								c.documentPath,  \n" +
                "					c.mfgPNDescription,					c.minOperatingTemp,        				c.maxOperatingTemp,  \n" +
                "					c.value,							c.partPackage,							c.powerRating,  \n" +
                "					c.functionalCategoryID,         	c.mountingTypeID,						c.connecterTypeID,  \n" +
                "					c.noOfPosition,        				c.noOfRows,								c.pitch,  \n" +
                "					c.pitchMating,        				c.length,								c.width,  \n" +
                "					c.height,        					c.voltage,								c.weight,  \n" +
                "					c.feature,        					c.color,								c.partStatus,  \n" +
                "					c.uom,					        	c.uomClassID,							c.unit,  \n" +
                "					c.restrictUsePermanently,			c.restrictUSEwithpermission,			c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,			u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,							r.name AS rohsName,  \n" +
                "					c.partPackageID,        			c.bomLock,								c.businessRisk,  \n" +
                "					c.costCategoryID,					c.deviceMarking,						c.driverToolRequired,  \n" +
                "					c.eau,								c.epicorType,							c.functionalTestingRequired,  \n" +
                "					c.heightText,						c.isCPN,								c.isCustom,  \n" +
                "					c.leadTime,							c.matingPartRquired,					c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,						c.minimum,								c.mult,  \n" +
                "					c.packageQty,						c.partType,								c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,				c.plannedOverRunPercentagePerBuild, 	c.plannedValuePerBuild,  \n" +
                "					c.programingRequired,				c.rfqOnly,								c.saftyStock,  \n" +
                "					c.scrapRatePercentagePerBuild, 		c.scrapValuePerBuild,					c.selfLifeDays,  \n" +
                "					c.shelfListDaysThresholdPercentage, c.temperatureCoefficient,				c.temperatureCoefficientUnit,  \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,					c.refSupplierMfgpnComponentID,  \n" +
                "					c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName, 	vu.mfgPN supplierPartMfgPn, 			vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,        			c.isNoClean,        					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 				c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND (m.isdeleted = 0 AND  m.mfgType = IFNULL(pMfgType, m.mfgType))  \n" +
                "			JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND mt.name = pMountingType  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND		c.id = IFNULL(pId, c.id) AND c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "  \n" +
                "	ELSE  */  \n" +
                "	  /* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
                "	  Reports,  Price Break Update,  Customer Part,  Good-Bad Mapping Part,  Supplier Quote,  Supplier RMAb*/  \n" +
                "  /*  \n" +
                "		select *  \n" +
                "		from  \n" +
                "		(  \n" +
                "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,			c.packaginggroupID,					c.PIDCode,  \n" +
                "					c.isGoodPart,				c.RoHSStatusID,						c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          		c.rev,  \n" +
                "					m.mfgCode,					m.mfgName,							m.mfgType,  \n" +
                "					c.tolerance,				c.category,							c.imageURL,  \n" +
                "					c.documentPath,				c.mfgPNDescription,					c.minOperatingTemp,  \n" +
                "					c.maxOperatingTemp,			c.value,							c.partPackage,  \n" +
                "					c.powerRating,				c.functionalCategoryID,				c.mountingTypeID,  \n" +
                "					c.connecterTypeID,			c.noOfPosition,           	 		c.noOfRows,  \n" +
                "					c.pitch,            		c.pitchMating,            			c.length,  \n" +
                "					c.width,            		c.height,							c.voltage,  \n" +
                "					c.weight,            		c.feature,            				c.color,  \n" +
                "					c.partStatus,            	c.uom,            					c.uomClassID,  \n" +
                "					c.unit,            			c.restrictUsePermanently,			c.restrictUSEwithpermission,  \n" +
                "					c.restrictPackagingUsePermanently,								c.restrictPackagingUseWithpermission,  \n" +
                "					c.packagingID,				c.packaging,  \n" +
                "					u.abbreviation AS uomName,	u.unitName AS unitName,  \n" +
                "					r.rohsIcon,					r.name AS rohsName,  \n" +
                "					c.partPackageID,			c.bomLock,							c.businessRisk,  \n" +
                "					c.costCategoryID,			c.deviceMarking,					c.driverToolRequired,  \n" +
                "					c.eau,						c.epicorType,						c.functionalTestingRequired,  \n" +
                "					c.heightText,				c.isCPN,							c.isCustom,  \n" +
                "					c.leadTime,            		c.matingPartRquired,				c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,           	c.minimum,							c.mult,  \n" +
                "					c.packageQty,            	c.partType,							c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,		c.plannedOverRunPercentagePerBuild, c.plannedValuePerBuild,  \n" +
                "					c.programingRequired,		c.rfqOnly,							c.saftyStock,  \n" +
                "					c.scrapRatePercentagePerBuild,		c.scrapValuePerBuild,		c.selfLifeDays,  \n" +
                "					c.shelfListDaysThresholdPercentage,	c.temperatureCoefficient,	c.temperatureCoefficientUnit,  \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,		c.refSupplierMfgpnComponentID,  \n" +
                "					c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,  \n" +
                "					vu.mfgPN supplierPartMfgPn,  \n" +
                "					vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,			c.isNoClean,						c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,		c.isHazmatMaterial, 				c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,		c.isReceiveBulkItem  \n" +
                "			from component c  \n" +
                "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "			INNER JOIN uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID = IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID, c.packagingID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN = c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND  \n" +
                "					(  \n" +
                "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
                "						EXISTS( SELECT  1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = a.id  \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                "					)  \n" +
                "				)  \n" +
                "			)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "	END IF;   */  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentMFGAliasSearchtest` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchtest`(  \n" +
                "IN pGoodPart VARCHAR(100),  \n" +
                "IN pSearch VARCHAR(100),  \n" +
                "IN pId INT,  \n" +
                "IN pMfgType VARCHAR(50),  \n" +
                "IN pRoHSStatusID VARCHAR(100),  \n" +
                "IN pMfgCodeId INT,  \n" +
                "IN pMountingType VARCHAR(50),  \n" +
                "IN pMountingTypeId INT,  \n" +
                "IN pCategoryID INT,  \n" +
                "IN pIsContainCPN TINYINT,  \n" +
                "IN pRohsMainCategoryID INT,  \n" +
                "IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                "IN prefSupplierMfgpnComponentID INT ,  \n" +
                "IN ppackagingID INT,  \n" +
                "IN pstrictCustomPart TINYINT,  \n" +
                "IN psupplierID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "   DECLARE vRohsMainCategoryID INT;  \n" +
                "   SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                "   /*===>this logic is added to compare invert rohs category*/  \n" +
                "   IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                "		IF pRohsMainCategoryID = -1 THEN  \n" +
                "			SET vRohsMainCategoryID = -2;  \n" +
                "		ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                "			SET vRohsMainCategoryID = -1;  \n" +
                "        END IF;  \n" +
                "   END IF;  \n" +
                "   /*<===this logic is added to compare invert rohs category*/  \n" +
                "   IF(pstrictCustomPart=1)THEN  \n" +
                "          SELECT * FROM  \n" +
                " (  \n" +
                "	 SELECT `com`.`id`,  \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/  \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
                "		`com`.`mfgPN` orgMfgPN,  \n" +
                "		`com`.`packaginggroupID`,  \n" +
                "        `com`.`PIDCode`,  \n" +
                "		`com`.`isGoodPart`,  \n" +
                "		`com`.`RoHSStatusID`,  \n" +
                "		`com`.`rohsgroupID`,  \n" +
                "        `com`.`mfgcodeID`,  \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,  \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,  \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,  \n" +
                "        `com`.`category`,  \n" +
                "        com.imageURL,  \n" +
                "        com.documentPath,  \n" +
                "        `com`.`mfgPNDescription`,  \n" +
                "        `com`.`minOperatingTemp`,  \n" +
                "        `com`.`maxOperatingTemp`,  \n" +
                "        `com`.`value`,  \n" +
                "        `com`.`partPackage`,  \n" +
                "        `com`.`powerRating`,  \n" +
                "        `com`.`functionalCategoryID`,  \n" +
                "        `com`.`mountingTypeID`,  \n" +
                "        `com`.`connecterTypeID`,  \n" +
                "        `com`.`noOfPosition`,  \n" +
                "        `com`.`noOfRows`,  \n" +
                "        `com`.`pitch`,  \n" +
                "        `com`.`pitchMating`,  \n" +
                "        `com`.`length`,  \n" +
                "        `com`.`width`,  \n" +
                "        `com`.`height`,  \n" +
                "        `com`.`voltage`,  \n" +
                "        `com`.`weight`,  \n" +
                "        `com`.`feature`,  \n" +
                "        `com`.`color`,  \n" +
                "        `com`.`partStatus`,  \n" +
                "        `com`.`uom`,  \n" +
                "        `com`.`uomClassID`,  \n" +
                "        `com`.`unit`,  \n" +
                "        `com`.`restrictUsePermanently`,  \n" +
                "		`com`.`restrictUSEwithpermission`,  \n" +
                "		`com`.`restrictPackagingUsePermanently`,  \n" +
                "		`com`.`restrictPackagingUseWithpermission`,  \n" +
                "        (SELECT u.abbreviation FROM uoms u WHERE u.id = com.uom) AS uomName,  \n" +
                "        (SELECT u.unitName FROM uoms u WHERE u.id = com.uom) AS unitName,  \n" +
                "        r.rohsIcon,  \n" +
                "		r.name AS `rohsName`,  \n" +
                "        `com`.`partPackageID`,  \n" +
                "        `com`.`bomLock`,  \n" +
                "		`com`.`businessRisk`,  \n" +
                "		`com`.`costCategoryID`,  \n" +
                "		`com`.`deviceMarking`,  \n" +
                "		`com`.`driverToolRequired`,  \n" +
                "		`com`.`eau`,  \n" +
                "		`com`.`epicorType`,  \n" +
                "		`com`.`functionalTestingRequired`,  \n" +
                "		`com`.`heightText`,  \n" +
                "		`com`.`isCPN`,  \n" +
                "		`com`.`isCustom`,  \n" +
                "		`com`.`isLeadFree`,  \n" +
                "		`com`.`leadTime`,  \n" +
                "		`com`.`matingPartRquired`,  \n" +
                "		`com`.`maxPriceLimit`,  \n" +
                "		`com`.`maxQtyonHand`,  \n" +
                "		`com`.`minimum`,  \n" +
                "		`com`.`mult`,  \n" +
                "		`com`.`packageQty`,  \n" +
                "		`com`.`partType`,  \n" +
                "		`com`.`pcbPerArray`,  \n" +
                "		`com`.`pickupPadRequired`,  \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,  \n" +
                "		`com`.`plannedValuePerBuild`,  \n" +
                "		`com`.`programingRequired`,  \n" +
                "		`com`.`rfqOnly`,  \n" +
                "		`com`.`saftyStock`,  \n" +
                "		`com`.`scrapRatePercentagePerBuild`,  \n" +
                "		`com`.`scrapValuePerBuild`,  \n" +
                "		`com`.`selfLifeDays`,  \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,  \n" +
                "		`com`.`temperatureCoefficient`,  \n" +
                "		`com`.`temperatureCoefficientUnit`,  \n" +
                "		`com`.`temperatureCoefficientValue`,  \n" +
                "		`com`.`trackSerialNumber`,  \n" +
                "		`com`.`refSupplierMfgpnComponentID`,  \n" +
                "        com.refMfgPNMfgCodeId,  \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,  \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,  \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`  \n" +
                "	FROM `vu_component` AS `com`  \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isDeleted`=0 AND  \n" +
                "	(`mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))  \n" +
                "    JOIN `rfq_mountingtypemst` AS `mt` ON `mt`.`id` = `com`.`mountingTypeID`  \n" +
                "    JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID  \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))  \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))  \n" +
                "    AND `com`.`mountingTypeID` = IFNULL(pMountingTypeId, `com`.`mountingTypeID`)  \n" +
                "    AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)  \n" +
                "    AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)  \n" +
                "    AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)  \n" +
                "    AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)  \n" +
                "    AND (com.mfgcodeid IN (SELECT smm.refMfgCodeMstID FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=IFNULL(psupplierID,smm.supplierID)) OR  \n" +
                "         com.mfgcodeid IN (SELECT mc.id FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0) OR  \n" +
                "         com.mfgcodeid IN (SELECT mc.id FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND isCustOrDisty=1 AND mc.isdeleted=0)  \n" +
                "         )  \n" +
                "    AND `com`.`category` != 3  \n" +
                "    AND com.partType!=4  \n" +
                "    AND com.iscustom=1  \n" +
                "    ) AS a  \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR  \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')  \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))  \n" +
                "	)  \n" +
                "	ORDER BY mfgPN;  \n" +
                "  \n" +
                "ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart=0) THEN  \n" +
                " SELECT * FROM  \n" +
                " (  \n" +
                "	 SELECT `com`.`id`,  \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/  \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
                "		`com`.`mfgPN` orgMfgPN,  \n" +
                "		`com`.`packaginggroupID`,  \n" +
                "        `com`.`PIDCode`,  \n" +
                "		`com`.`isGoodPart`,  \n" +
                "		`com`.`RoHSStatusID`,  \n" +
                "		`com`.`rohsgroupID`,  \n" +
                "        `com`.`mfgcodeID`,  \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,  \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,  \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,  \n" +
                "        `com`.`category`,  \n" +
                "        com.imageURL,  \n" +
                "        com.documentPath,  \n" +
                "        `com`.`mfgPNDescription`,  \n" +
                "        `com`.`minOperatingTemp`,  \n" +
                "        `com`.`maxOperatingTemp`,  \n" +
                "        `com`.`value`,  \n" +
                "        `com`.`partPackage`,  \n" +
                "        `com`.`powerRating`,  \n" +
                "        `com`.`functionalCategoryID`,  \n" +
                "        `com`.`mountingTypeID`,  \n" +
                "        `com`.`connecterTypeID`,  \n" +
                "        `com`.`noOfPosition`,  \n" +
                "        `com`.`noOfRows`,  \n" +
                "        `com`.`pitch`,  \n" +
                "        `com`.`pitchMating`,  \n" +
                "        `com`.`length`,  \n" +
                "        `com`.`width`,  \n" +
                "        `com`.`height`,  \n" +
                "        `com`.`voltage`,  \n" +
                "        `com`.`weight`,  \n" +
                "        `com`.`feature`,  \n" +
                "        `com`.`color`,  \n" +
                "        `com`.`partStatus`,  \n" +
                "        `com`.`uom`,  \n" +
                "        `com`.`uomClassID`,  \n" +
                "        `com`.`unit`,  \n" +
                "        `com`.`restrictUsePermanently`,  \n" +
                "		`com`.`restrictUSEwithpermission`,  \n" +
                "		`com`.`restrictPackagingUsePermanently`,  \n" +
                "		`com`.`restrictPackagingUseWithpermission`,  \n" +
                "        (SELECT u.abbreviation FROM uoms u WHERE u.id = com.uom) AS uomName,  \n" +
                "        (SELECT u.unitName FROM uoms u WHERE u.id = com.uom) AS unitName,  \n" +
                "        r.rohsIcon,  \n" +
                "		r.name AS `rohsName`,  \n" +
                "        `com`.`partPackageID`,  \n" +
                "        `com`.`bomLock`,  \n" +
                "		`com`.`businessRisk`,  \n" +
                "		`com`.`costCategoryID`,  \n" +
                "		`com`.`deviceMarking`,  \n" +
                "		`com`.`driverToolRequired`,  \n" +
                "		`com`.`eau`,  \n" +
                "		`com`.`epicorType`,  \n" +
                "		`com`.`functionalTestingRequired`,  \n" +
                "		`com`.`heightText`,  \n" +
                "		`com`.`isCPN`,  \n" +
                "		`com`.`isCustom`,  \n" +
                "		`com`.`isLeadFree`,  \n" +
                "		`com`.`leadTime`,  \n" +
                "		`com`.`matingPartRquired`,  \n" +
                "		`com`.`maxPriceLimit`,  \n" +
                "		`com`.`maxQtyonHand`,  \n" +
                "		`com`.`minimum`,  \n" +
                "		`com`.`mult`,  \n" +
                "		`com`.`packageQty`,  \n" +
                "		`com`.`partType`,  \n" +
                "		`com`.`pcbPerArray`,  \n" +
                "		`com`.`pickupPadRequired`,  \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,  \n" +
                "		`com`.`plannedValuePerBuild`,  \n" +
                "		`com`.`programingRequired`,  \n" +
                "		`com`.`rfqOnly`,  \n" +
                "		`com`.`saftyStock`,  \n" +
                "		`com`.`scrapRatePercentagePerBuild`,  \n" +
                "		`com`.`scrapValuePerBuild`,  \n" +
                "		`com`.`selfLifeDays`,  \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,  \n" +
                "		`com`.`temperatureCoefficient`,  \n" +
                "		`com`.`temperatureCoefficientUnit`,  \n" +
                "		`com`.`temperatureCoefficientValue`,  \n" +
                "		`com`.`trackSerialNumber`,  \n" +
                "		`com`.`refSupplierMfgpnComponentID`,  \n" +
                "        com.refMfgPNMfgCodeId,  \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,  \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,  \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`  \n" +
                "	FROM `vu_component` AS `com`  \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND  \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))  \n" +
                "    JOIN `rfq_mountingtypemst` AS `mt` ON `mt`.`id` = `com`.`mountingTypeID` AND `mt`.`name` = pMountingType  \n" +
                "    JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID  \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))  \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))  \n" +
                "    AND `com`.`mountingTypeID` = IFNULL(pMountingTypeId, `com`.`mountingTypeID`)  \n" +
                "    AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)  \n" +
                "  AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)  \n" +
                "	 AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)  \n" +
                "    AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)  \n" +
                "    AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)  \n" +
                "    AND r.refMainCategoryID = IFNULL(vRohsMainCategoryID, r.refMainCategoryID)  \n" +
                "    ) AS a  \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR  \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')  \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))  \n" +
                "	)  \n" +
                "	ORDER BY mfgPN;  \n" +
                "  \n" +
                "  ELSE  \n" +
                "   SELECT * FROM  \n" +
                " (  \n" +
                "	 SELECT `com`.`id`,  \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/  \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
                "		`com`.`mfgPN` orgMfgPN,  \n" +
                "		`com`.`packaginggroupID`,  \n" +
                "		`com`.`PIDCode`,  \n" +
                "		`com`.`isGoodPart`,  \n" +
                "		`com`.`RoHSStatusID`,  \n" +
                "		`com`.`rohsgroupID`,  \n" +
                "		`com`.`mfgcodeID`,  \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,  \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,  \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,  \n" +
                "		`com`.`tolerance`,  \n" +
                "		`com`.`category`,  \n" +
                "                com.imageURL,  \n" +
                "                com.documentPath,  \n" +
                "            `com`.`mfgPNDescription`,  \n" +
                "		`com`.`minOperatingTemp`,  \n" +
                "		`com`.`maxOperatingTemp`,  \n" +
                "		`com`.`value`,  \n" +
                "		`com`.`partPackage`,  \n" +
                "		`com`.`powerRating`,  \n" +
                "		`com`.`functionalCategoryID`,  \n" +
                "		`com`.`mountingTypeID`,  \n" +
                "		`com`.`connecterTypeID`,  \n" +
                "		`com`.`noOfPosition`,  \n" +
                "		`com`.`noOfRows`,  \n" +
                "		`com`.`pitch`,  \n" +
                "		`com`.`pitchMating`,  \n" +
                "		`com`.`length`,  \n" +
                "		`com`.`width`,  \n" +
                "		`com`.`height`,  \n" +
                "		`com`.`voltage`,  \n" +
                "		`com`.`weight`,  \n" +
                "		`com`.`feature`,  \n" +
                "		`com`.`color`,  \n" +
                "		`com`.`partStatus`,  \n" +
                "		`com`.`uom`,  \n" +
                "        `com`.`uomClassID`,  \n" +
                "		`com`.`unit`,  \n" +
                "		`com`.`restrictUsePermanently`,  \n" +
                "		`com`.`restrictUSEwithpermission`,  \n" +
                "		`com`.`restrictPackagingUsePermanently`,  \n" +
                "		`com`.`restrictPackagingUseWithpermission`,  \n" +
                "		`com`.`packagingID`,  \n" +
                "		`com`.`packaging`,  \n" +
                "		(SELECT u.abbreviation FROM uoms u WHERE u.id = com.uom) AS uomName,  \n" +
                "		(SELECT u.unitName FROM uoms u WHERE u.id = com.uom) AS unitName,  \n" +
                "		r.rohsIcon,  \n" +
                "		r.name AS `rohsName`,  \n" +
                "        `com`.`partPackageID`,  \n" +
                "        `com`.`bomLock`,  \n" +
                "		`com`.`businessRisk`,  \n" +
                "		`com`.`costCategoryID`,  \n" +
                "		`com`.`deviceMarking`,  \n" +
                "		`com`.`driverToolRequired`,  \n" +
                "		`com`.`eau`,  \n" +
                "		`com`.`epicorType`,  \n" +
                "		`com`.`functionalTestingRequired`,  \n" +
                "		`com`.`heightText`,  \n" +
                "		`com`.`isCPN`,  \n" +
                "		`com`.`isCustom`,  \n" +
                "		`com`.`isLeadFree`,  \n" +
                "		`com`.`leadTime`,  \n" +
                "		`com`.`matingPartRquired`,  \n" +
                "		`com`.`maxPriceLimit`,  \n" +
                "		`com`.`maxQtyonHand`,  \n" +
                "		`com`.`minimum`,  \n" +
                "		`com`.`mult`,  \n" +
                "		`com`.`packageQty`,  \n" +
                "		`com`.`partType`,  \n" +
                "		`com`.`pcbPerArray`,  \n" +
                "		`com`.`pickupPadRequired`,  \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,  \n" +
                "		`com`.`plannedValuePerBuild`,  \n" +
                "		`com`.`programingRequired`,  \n" +
                "		`com`.`rfqOnly`,  \n" +
                "		`com`.`saftyStock`,  \n" +
                "		`com`.`scrapRatePercentagePerBuild`,  \n" +
                "		`com`.`scrapValuePerBuild`,  \n" +
                "		`com`.`selfLifeDays`,  \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,  \n" +
                "		`com`.`temperatureCoefficient`,  \n" +
                "		`com`.`temperatureCoefficientUnit`,  \n" +
                "		`com`.`temperatureCoefficientValue`,  \n" +
                "		`com`.`trackSerialNumber`,  \n" +
                "		`com`.`refSupplierMfgpnComponentID`,  \n" +
                "        com.refMfgPNMfgCodeId,  \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,  \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,  \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`  \n" +
                "	FROM `vu_component` AS `com`  \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND  \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))  \n" +
                "	JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID  \n" +
                "    WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))  \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))  \n" +
                "    AND `com`.`mountingTypeID` = IFNULL(pMountingTypeId, `com`.`mountingTypeID`)  \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)  \n" +
                "	 AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)  \n" +
                "	 AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)  \n" +
                "    AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)  \n" +
                "    AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)  \n" +
                "    AND r.refMainCategoryID = IFNULL(vRohsMainCategoryID, r.refMainCategoryID)  \n" +
                "    ) AS a  \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR  \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')  \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))  \n" +
                ")  \n" +
                "ORDER BY mfgPN;  \n" +
                "END IF;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getActivityStartedAssemblyForAllPackagingParts` ;  \n" +
                "CREATE PROCEDURE `Sproc_getActivityStartedAssemblyForAllPackagingParts`(  \n" +
                "	IN pAliasGroupID INT,  \n" +
                "    IN pPartID INT,  \n" +
                "    IN pIsWithSupplierParts TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentIds;  \n" +
                "    SET @SQLStatement1 = \" create temporary table tempComponentIds as  \n" +
                "							select id  \n" +
                "							  from vu_component c  \n" +
                "							 where c.isdeleted = 0  \n" +
                "							   and exists (select id  \n" +
                "											from vu_component co  \n" +
                "											where co.isdeleted = 0 \";  \n" +
                "	IF pIsWithSupplierParts = 1 THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "								and (co.id = c.id OR co.id = c.refSupplierMfgpnComponentID) \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "								and co.id = c.id \");  \n" +
                "	END IF;  \n" +
                "    IF pAliasGroupID IS NOT NULL THEN  \n" +
                "    SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "								and (co.id = \",pPartID,\" or co.packaginggroupid = \",pAliasGroupID,\"))\");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "								and co.id = \",pPartID,\" )\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SELECT co.id, co.mfgcodeID, co.mfgPN, co.PIDCode,  \n" +
                "        co.nickName, co.mfgPNDescription,  \n" +
                "        co.imageURL,  \n" +
                "        co.documentPath,  \n" +
                "		co.isActivityStart, co.activityStartAt, co.activityStartBy,  \n" +
                "		CONCAT(usr.firstName, ' ', usr.lastName) activityStartedByUserName,  \n" +
                "		CASE WHEN co.isActivityStart=TRUE THEN  \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,fun_DatetimetoUTCDateTime())  \n" +
                "			ELSE NULL END activityStartTime,  \n" +
                "		m.mfgCode, m.mfgName  \n" +
                "  FROM vu_component co  \n" +
                "  LEFT JOIN users usr ON usr.id = co.activityStartBy  \n" +
                "  JOIN mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                " WHERE co.isActivityStart = 1  \n" +
                "   AND co.isdeleted = 0  \n" +
                "   AND EXISTS (SELECT 1 FROM rfq_lineitems_alternatepart rla  \n" +
                "				JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "				WHERE rla.partID = co.id AND rla.isdeleted = 0  \n" +
                "                AND EXISTS (SELECT 1 FROM tempComponentIds t WHERE (t.id = rla.mfgPNID OR t.id = rl.custPNID))  \n" +
                "                );  \n" +
                "      DROP TEMPORARY TABLE IF EXISTS tempComponentIds;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getActivityStartedAssemblyForMultiplePartsWithPackaging` ;  \n" +
                "CREATE PROCEDURE `Sproc_getActivityStartedAssemblyForMultiplePartsWithPackaging`(  \n" +
                "	IN pPartIDs TEXT,  \n" +
                "    IN pAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentIds;  \n" +
                "    SET @SQLStatement1 = \" create temporary table tempComponentIds as  \n" +
                "							select id from vu_component co where co.isdeleted = 0 \";  \n" +
                "  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "								and (co.id in (\",pPartIDs,\") or  \n" +
                "                                co.packaginggroupID in(select packaginggroupID from vu_component where isdeleted = 0 and id in (\",pPartIDs,\")))\");  \n" +
                "  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    IF(pAssyID IS NOT NULL AND pAssyID <>'') THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\"co.id <> \",pAssyID);  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement3 = CONCAT(\"1 = 1\");  \n" +
                "	END IF;  \n" +
                " 	SET @SQLStatement2=CONCAT(\"SELECT co.id,co.mfgcodeID, co.mfgPN, co.PIDCode, co.nickName, co.mfgPNDescription, co.imageURL, co.documentPath, co.isActivityStart,  \n" +
                "		co.activityStartAt, co.activityStartBy, CONCAT(usr.firstName, ' ', usr.lastName) activityStartedByUserName,  \n" +
                "		(CASE WHEN co.isActivityStart = TRUE THEN  \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt, FUN_DATETIMETOUTCDATETIME()) ELSE NULL END) activityStartTime,  \n" +
                "		m.mfgCode, m.mfgName  \n" +
                "	FROM vu_component co  \n" +
                "	LEFT JOIN users usr ON usr.id = co.activityStartBy  \n" +
                "	JOIN mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "	WHERE co.isActivityStart = 1 AND co.isdeleted = 0  \n" +
                "    and \",@SQLStatement3,\"  \n" +
                "	AND EXISTS( SELECT 1 FROM rfq_lineitems_alternatepart rla  \n" +
                "						JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "						WHERE rla.partID = co.id AND rla.isdeleted = 0  \n" +
                "						AND EXISTS( SELECT 1 FROM tempComponentIds t  \n" +
                "										WHERE(t.id = rla.mfgPNID OR t.id = rl.custPNID)  \n" +
                "									)  \n" +
                "				)\");  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "    EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentIds;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getComponentActivityStartTime` ;  \n" +
                "CREATE PROCEDURE `Sproc_getComponentActivityStartTime`(  \n" +
                "IN pPartID INT(11))  \n" +
                "BEGIN  \n" +
                "		SELECT TIMESTAMPDIFF(SECOND, co.activityStartAt,fun_DatetimetoUTCDateTime()) timeDiffSec,  \n" +
                "				(CASE WHEN co.isActivityStart THEN CONCAT(u.firstName,' ',u.lastName) ELSE '' END )AS activityStartedByUserName,  \n" +
                "                co.isActivityStart,  \n" +
                "				co.activityStartBy,  \n" +
                "                co.activityStartAt  \n" +
                "		  FROM vu_component co  \n" +
                "          JOIN users u ON u.id = co.activityStartBy  \n" +
                "		 WHERE co.isActivityStart = TRUE  \n" +
                "		 AND co.id = pPartID;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsMFG TINYINT,  \n" +
                "    IN pMfgCodeIDs LONGTEXT,  \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,  \n" +
                "    IN pPackagingIDs LONGTEXT,  \n" +
                "    IN pPackageIDs LONGTEXT,  \n" +
                "    IN pPartStatusIDs LONGTEXT,  \n" +
                "    IN pMountingTypeIDs LONGTEXT,  \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,  \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,  \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,  \n" +
                "    IN pAttributesSearchHeader LONGTEXT,  \n" +
                "    IN pAttributesSearch LONGTEXT,  \n" +
                "    IN pPackagingAlias TEXT,  \n" +
                "    IN pAlternatePart TEXT,  \n" +
                "    IN pRoHSAlternatePart TEXT,  \n" +
                "    IN pPartUsedInAssembly TEXT,  \n" +
                "    IN pMultiplePartNumbers LONGTEXT,  \n" +
                "    IN pStockQuantity TEXT,  \n" +
                "    IN pPartTypeIDs LONGTEXT,  \n" +
                "    IN pCertificateStandardsIds LONGTEXT,  \n" +
                "    IN pStandardsClassIds LONGTEXT,  \n" +
                "    IN pAssemblyIds LONGTEXT,  \n" +
                "    IN pAssemblyTypeIds LONGTEXT,  \n" +
                "    IN pRohsIds LONGTEXT,  \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,  \n" +
                "    IN pOperationalAttributeIds LONGTEXT,  \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,  \n" +
                "    IN pComponentOrdering TEXT,  \n" +
                "    IN pComponentUsageCriteria TEXT,  \n" +
                "    IN pIsRefreshMasterFilters TINYINT,  \n" +
                "    IN pFromDate DATE,  \n" +
                "    IN pToDate DATE,  \n" +
                "    IN pIsReversal TINYINT,  \n" +
                "    IN pIsCPN TINYINT,  \n" +
                "    IN pIsCustom TINYINT,  \n" +
                "    IN pIsBOMActivityStarted TINYINT,  \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT,  \n" +
                "    IN pIsSearchFromHeader TINYINT,  \n" +
                "    IN pIsExportControl TINYINT,  \n" +
                "    IN pObsoleteDate DATE,  \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT,  \n" +
                "    IN pFromCreatedOnDate DATE,  \n" +
                "    IN pToCreatedOnDate DATE,  \n" +
                "    IN pIsIdenticalMfrPN TINYINT,  \n" +
                "    IN pIsProductionPNEmpty TINYINT,  \n" +
                "    IN pDisapprovedSupplierIds LONGTEXT,  \n" +
                "	IN pIsExcludeIncorrectPart TINYINT,  \n" +
                "    IN pMultiplePartFilterFieldName VARCHAR(50),  \n" +
                "    IN pMultiplePartByUploadFileDetail LONGTEXT,  \n" +
                "    IN pIsRestrictUSEwithpermission TINYINT,  \n" +
                "    IN pIsRestrictPackagingUseWithpermission TINYINT,  \n" +
                "    IN pIsRestrictUsePermanently TINYINT,  \n" +
                "    IN pIsRestrictPackagingUsePermanently TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE attributeSearchString LONGTEXT;  \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);  \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);  \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentSession DATETIME;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT fun_DatetimetoUTCDateTime() INTO vCurrentSession;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  SET @SQLStatement1=CONCAT(\"  \n" +
                "	SELECT co.id,co.imageURL,co.mfgPN,co.mfgcodeID,co.mfgPNDescription,co.packageQty,co.ltbDate,co.RoHSStatusID,co.PIDCode,co.custAssyPN, co.rev, co.liveVersion  \n" +
                ",co.leadTime,co.noOfPosition,co.mountingTypeID,co.partPackage,co.deviceMarking,co.minimum,co.mult,co.uomText,co.rohsText,co.dataSheetLink  \n" +
                ",co.eolDate,co.value,co.tolerance,co.minOperatingTemp,co.maxOperatingTemp,co.weight,co.length,co.width,co.height,co.saftyStock  \n" +
                ",co.specialNote,co.heightText,co.partStatusText,co.feature,co.functionalCategoryText,su.mfgcode as supplier,co.mountingTypeText,co.maxPriceLimit  \n" +
                ",co.selfLifeDays,co.isCustom,co.connecterTypeID,co.connectorTypeText,co.maxQtyonHand,co.noOfRows,co.powerRating,co.pitch,co.pitchMating  \n" +
                ",co.scrapRatePercentagePerBuild,co.plannedOverRunPercentagePerBuild,co.nickName,co.restrictUSEwithpermission,co.operatingTemp  \n" +
                ",co.sizeDimension,co.plannedValuePerBuild,co.scrapValuePerBuild,co.restrictUsePermanently,co.eau,co.pcbPerArray,co.isCPN,co.partType,co.category  \n" +
                ",co.shelfListDaysThresholdPercentage,co.color,co.businessRisk,co.grossWeight,co.packagingWeight,co.restrictPackagingUsePermanently  \n" +
                ",co.restrictPackagingUseWithpermission,co.reversalDate,co.serialNumber,co.isActivityStart,co.activityStartBy,co.activityStartAt  \n" +
                ",co.systemGenerated,co.purchasingComment,co.detailDescription,co.documentPath,co.obsoleteDate,co.epicorType,co.partStatus,co.packagingID,co.functionalCategoryID,co.partPackageID,co.isWaterSoluble,co.isNoClean  \n" +
                ",co.mfrNameText,co.isHazmatMaterial,co.rfqNumber,co.salesacctId,co.purchaseacctId,co.umidSPQ,co.internalReference,  fun_GetFormattedMfgCode(mf.mfgCode, mf.mfgName, \", vMfgCodeFormat ,\") as mfgCode,  \n" +
                " mf.isCustOrDisty, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,  \n" +
                "		(case when co.isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,  \n" +
                "		gc.name AS partStatusValue,  \n" +
                "        gc.displayOrder parStatusDisplayOrder,  \n" +
                "		mf.mfgType, co.isReceiveBulkItem \");  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "			null AliasMFGPN,  \n" +
                "			null AliasMFGCode,  \n" +
                "			null AliasMFGCodeID,  \n" +
                "			null AliascompID,  \n" +
                "			null AliasMFGName,  \n" +
                "            null AliasMFGDisplayOrder\");  \n" +
                "    ELSE  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		/*(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from vu_component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,*/  \n" +
                "         vu_co.MFGPN AliasMFGPN,  \n" +
                "          fun_GetFormattedMfgCode(mfc.mfgCode, mfc.mfgName,\", vMfgCodeFormat ,\") as AliasMFGCode,  \n" +
                "        mfc.id AliasMFGCodeID,  \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,  \n" +
                "        mfc.mfgName as AliasMFGName,  \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		ro.name AS `rohsComplientConvertedValue`,  \n" +
                "        ro.displayOrder rohsDisplayOrder,  \n" +
                "		ro.rohsIcon AS `rohsIcon`,  \n" +
                "        `co`.`isGoodPart`,  \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'  \n" +
                "					ELSE '' END) AS `isGoodPartValue`,  \n" +
                "		case when co.isCustom = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCustomValue,  \n" +
                "		case when co.isCPN = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCPNValue,  \n" +
                "		pt.partTypeName functionalCategoryName,  \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,  \n" +
                "		mt.name mountingTypeName,  \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,  \n" +
                "		pc.categoryName,  \n" +
                "		rct.name connecterTypeName,  \n" +
                "		u.unitName,  \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,  \n" +
                "		pck.name packagingName,  \n" +
                "        pck.displayOrder packagingDisplayOrder,  \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'  \n" +
                "					ELSE 'No' END) AS `reversalPart`,  \n" +
                "			(CASE WHEN (`co`.`isEpoxyMount` = 1) THEN 'Yes'  \n" +
                "					ELSE 'No' END) AS `isEpoxyMount`,  \n" +
                "		ifnull(vucomstd.isExportControl, 'No') as isExportControl,  \n" +
                "        IFNULL(vuempcre.initialName,co.createdBy) as createdbyValue,  \n" +
                "		IFNULL(vuempupd.initialName ,co.updatedBy)as updatedbyValue,  \n" +
                "		rc.name as createdbyRoleValue,  \n" +
                "		ru.name as updatedbyRoleValue,  \n" +
                "        co.createdAt,  \n" +
                " 		co.updatedAt,  \n" +
                "        clea.updatedAtApi,  \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'  \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,  \n" +
                "        pct.name packageCaseTypeValue,  \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,  \n" +
                "		case when co.category = 3 then  \n" +
                "			fun_getSamplePicturesUploadCount(co.id)  \n" +
                "		end uploadedSamplePicturesCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.count  \n" +
                "		end assemblyCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			 vurline.lineCount  \n" +
                "		end bomLineCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.quoteProgress  \n" +
                "		end quoteProgress,  \n" +
                "		CASE when co.category = 3 then  \n" +
                "		 	vurfass.id  \n" +
                "		END rfqAssyID,  \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,  \n" +
                "		case when co.isActivityStart=true then  \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,'\",vCurrentSession,\"')  \n" +
                "			else null end activityStartTime,  \n" +
                "		rat.name assemblyTypeName,  \n" +
                "		CASE when co.frequency = 1 then  \n" +
                "		 	'Every' when    co.frequency = 2 then  \n" +
                "		 	'First' when  co.frequency = 3 then  \n" +
                "		 	'Last' else ''  \n" +
                "		END frequencyName,  \n" +
                "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,  \n" +
                "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue,  \n" +
                "        fun_getHazmateValue(co.isHazmatMaterial) as isHazmatMaterialValue,  \n" +
                "        CASE WHEN co.isReceiveBulkItem = 0 THEN 'NO' ELSE 'YES' END isReceiveBulkConvertedValue,  \n" +
                "        CONCAT('(',am.`acct_code`,') ',am.`acct_name`) AS SalesCOA,  \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS PurchaseCOA,  \n" +
                "        vucomstd.certificatelist,  \n" +
                "        vusac.subAssemblyCount\");  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");  \n" +
                "	END IF;  \n" +
                "    IF pComponentOrdering = 'USAGE' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)  \n" +
                "													  from eco_request ec  \n" +
                "													 where ec.isdeleted = 0  \n" +
                "													   and ec.finalstatus = 'P'  \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");  \n" +
                "	END IF;  \n" +
                "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "	FROM vu_component co  \n" +
                "		JOIN rfq_partcategory pc ON pc.id = co.partType  \n" +
                " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id  \n" +
                " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus  \n" +
                " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id  \n" +
                " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
                " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID  \n" +
                " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID  \n" +
                " 		LEFT JOIN component_last_external_apicall clea ON clea.refComponentID = co.id  \n" +
                " 		LEFT JOIN mfgcodeMst su ON su.id = clea.supplierId  \n" +
                " 		JOIN uoms u ON u.id = co.uom  \n" +
                " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID  \n" +
                "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID  \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy  \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType  \n" +
                " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID  \n" +
                "        LEFT JOIN acct_acctmst am ON am.acct_id = co.salesacctId  \n" +
                "        LEFT JOIN acct_acctmst aam ON aam.acct_id = co.purchaseacctId  \n" +
                "		left JOIN vu_component_standard vucomstd ON vucomstd.componentID = co.id  \n" +
                "        left JOIN vu_emp_detail vuempcre ON vuempcre.id = co.createdBy  \n" +
                "        left JOIN vu_emp_detail vuempupd ON vuempupd.id = co.updatedBy  \n" +
                "        left JOIN roles rc ON rc.id = co.createByRoleId  \n" +
                "        left JOIN roles ru ON ru.id = co.updateByRoleId  \n" +
                "        left join vu_rfq_assembly_detail vurfass on vurfass.partId = co.id  \n" +
                "        left join vu_rfq_lineitem_count vurline on vurline.partId = co.id  \n" +
                "        left join vu_sub_assembly_count vusac on vusac.partId = co.id\");  \n" +
                "    IF pIsMFG = FALSE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId  \n" +
                "            JOIN vu_component vu_co on vu_co.id = co.refSupplierMfgpnComponentID \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "    WHERE co.isdeleted = 0 \");  \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');  \n" +
                "    ELSE  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pMultiplePartFilterFieldName IS NOT NULL AND pMultiplePartByUploadFileDetail IS NOT NULL AND pMultiplePartByUploadFileDetail != '')  \n" +
                "    THEN  \n" +
                "		IF(pMultiplePartFilterFieldName = 'SystemID')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.serialNumber IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSEIF(pMultiplePartFilterFieldName = 'PID Code')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.PIDCode IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgPN IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		IF pComponentOrdering = 'MFG' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);  \n" +
                "            END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);  \n" +
                "			END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);  \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);  \n" +
                "		END IF;  \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgcodeID in (', pMfgCodeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packagingID in (', pPackagingIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackageIDs IS NOT NULL AND pPackageIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partPackageID in (', pPackageIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partStatus in (', pPartStatusIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeID in (', pMountingTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeText in (', pExternalMountingTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryID in (', pFunctionalTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN  \n" +
                "		IF pIsMFG = TRUE THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "																)');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from vu_component cc where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))  \n" +
                "                                                                OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "                                                                )');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partType in (', pPartTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND  \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');  \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsCPN = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCPN = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsCustom = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCustom = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsProductionPNEmpty = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd  \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd  \n" +
                "													   where cd.partID = co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca  \n" +
                "														  where ca.isdeleted = false  \n" +
                "															and ca.deletedat is null  \n" +
                "															and ca.refComponentID = co.id  \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pIsRestrictUSEwithpermission = TRUE OR pIsRestrictPackagingUseWithpermission = TRUE OR pIsRestrictUsePermanently = TRUE OR pIsRestrictPackagingUsePermanently = TRUE)  \n" +
                "    THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (');  \n" +
                "        SET @restricStatement = '';  \n" +
                "		IF pIsRestrictUSEwithpermission = TRUE THEN  \n" +
                "			SET @restricStatement =  ' co.restrictUSEwithpermission = true ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF pIsRestrictPackagingUseWithpermission = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUseWithpermission = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END),  ' co.restrictUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictPackagingUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "        SET @SQLStatement1 = CONCAT(@SQLStatement1, @restricStatement, ')');  \n" +
                "    END IF;  \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfPosition like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfRows like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.length like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.width like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.height like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from vu_component cc  \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )  \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))  \n" +
                "																		');  \n" +
                "          END IF;  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN  \n" +
                "		SET attributeSearchString = pAttributesSearch;  \n" +
                "       do_this:  \n" +
                "	  LOOP  \n" +
                "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);  \n" +
                "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND  isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');  \n" +
                "          /*IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');  \n" +
                "          END IF;  */  \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN  \n" +
                "		  LEAVE do_this;  \n" +
                "		END IF;  \n" +
                "	  END LOOP do_this;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN  \n" +
                "		IF (pPackagingAlias = '1') THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN  \n" +
                "			IF (pAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN  \n" +
                "			IF (pRoHSAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 6 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN  \n" +
                "			SET vPartUsedInAssemblyExists = \" \";  \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";  \n" +
                "			IF (pPartUsedInAssembly = '1') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";  \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";  \n" +
                "            END IF;  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2  \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from vu_component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from vu_component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from vu_component c where c.id = rl.partid and c.partStatus = 1))) ');  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);  \n" +
                "	END IF;  \n" +
                "   IF pIsExportControl = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');  \n" +
                "   END IF;  \n" +
                "	IF pIsExcludeIncorrectPart = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isGoodPart in (1,3) ');  \n" +
                "	END IF;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempComponentListData;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"create temporary table tempComponentListData  \n" +
                "    select count(1) over(partition by c.mfgType) as totalCount,c.*,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue  \n" +
                "									from ( \", @SQLStatement1,\" ) c  \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  /* to get total count of rows */  \n" +
                "	-- SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);  \n" +
                "    SET @SQLStatement2 = CONCAT(\" SELECT totalCount from tempComponentListData limit 1\");  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	/*PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" select * from tempComponentListData\");  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID  \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"  \n" +
                "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID\");  \n" +
                "		 PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )  \n" +
                "									select * from  \n" +
                "										(select case when stdc.classID is not null then  \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)  \n" +
                "													else cs.certificateStandardID end certificateStandardID,  \n" +
                "												case when stdc.classID is not null then  \n" +
                "													concat(cs.fullName,' ',stdc.classname)  \n" +
                "													else cs.fullName end fullName,  \n" +
                "												cs.displayOrder  \n" +
                "										  from certificate_standards cs  \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID  \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID  \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)  \n" +
                "										) a group by certificateStandardID, fullName, displayOrder  \n" +
                "										order by displayOrder,fullName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName  \n" +
                "					  from component_acceptable_shipping_countries casc  \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid  \n" +
                "					 where casc.isdeleted = false  \n" +
                "					   and casc.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )  \n" +
                "                                    order by cm.countryName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName  \n" +
                "					  from component_dynamic_attribute_mapping_part cdam  \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID  \n" +
                "					 where cdam.isdeleted = false  \n" +
                "					   and cdam.deletedat is null  \n" +
                "					   and cda.isdeleted = false  \n" +
                "					   and cda.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )  \n" +
                "                                     order by cda.attributeName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "    END IF;  \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN  \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/  \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,  \n" +
                "											null groupNameText,  \n" +
                "											functionalCategoryID, mountingTypeID,  \n" +
                "											count(1) recCount  \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,  \n" +
                "										' group by functionalCategoryName,mountingTypeName,  \n" +
                "													functionalCategoryID, mountingTypeID  \n" +
                "											order by groupName, groupNameText, recCount desc');  \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;  \n" +
                "			EXECUTE query3;  \n" +
                "			DEALLOCATE PREPARE query3;  \n" +
                "        END IF;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_saveStartStopActivity` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveStartStopActivity`(  \n" +
                "	IN pRefTransID INT,  \n" +
                "	IN pUserId INT,  \n" +
                "	IN pIsActivityStart TINYINT,  \n" +
                "    IN pTransactionType VARCHAR(100),  \n" +
                "    IN pActivityType VARCHAR(100),  \n" +
                "    IN pRemark LONGTEXT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_UpdatedUserID INT;  \n" +
                "	DECLARE v_CurrentTime DATETIME;  \n" +
                "    DECLARE v_BurdenRate DECIMAL(13,3);  \n" +
                "    DECLARE v_PaymentMode VARCHAR(10);  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() INTO v_CurrentTime;  \n" +
                "    SELECT em.burdenRate, em.paymentMode INTO v_BurdenRate, v_PaymentMode  \n" +
                "		FROM users u JOIN employees em ON em.id = u.employeeID  \n" +
                "        WHERE u.id = pUserId;  \n" +
                "  \n" +
                "   IF(pTransactionType = 'B') THEN  \n" +
                "		IF(SELECT COUNT(1) FROM vu_component WHERE id = pRefTransID AND isActivityStart = 1 > 0) THEN  \n" +
                "			SELECT activityStartBy INTO v_UpdatedUserID FROM component_bomsetting WHERE refComponentID = pRefTransID AND isActivityStart = 1;  \n" +
                "		END IF;  \n" +
                "	ELSEIF(pTransactionType = 'C') THEN  \n" +
                "		IF( SELECT COUNT(1) FROM rfq_assemblies WHERE id = pRefTransID AND isActivityStart = 1 > 0) THEN  \n" +
                "		SELECT activityStartBy INTO v_UpdatedUserID FROM rfq_assemblies WHERE id = pRefTransID AND isActivityStart = 1;  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "	IF v_UpdatedUserID IS NULL THEN  \n" +
                "		SET v_UpdatedUserID = pUserId;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsActivityStart THEN  \n" +
                "		IF(pTransactionType = 'B') THEN  \n" +
                "			UPDATE component_bomsetting SET  \n" +
                "				isActivityStart = pIsActivityStart,  \n" +
                "				activityStartBy = pUserId,  \n" +
                "				activityStartAt = v_CurrentTime,  \n" +
                "                updateByRoleId = pRoleID  \n" +
                "			WHERE refComponentID = pRefTransID;  \n" +
                "		ELSEIF(pTransactionType = 'C') THEN  \n" +
                "			UPDATE rfq_assemblies SET  \n" +
                "				isActivityStart = pIsActivityStart,  \n" +
                "				activityStartBy = pUserId,  \n" +
                "				activityStartAt = v_CurrentTime,  \n" +
                "                updateByRoleId = pRoleID  \n" +
                "			WHERE id = pRefTransID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		INSERT INTO assembly_trans_history (`refTransID`, `transactionType`, `activityType`, `checkinTime`, `userID`, `burdenRate`, `paymentMode`, `remark`, `createdBy`,`createByRoleId`)  \n" +
                "        VALUES(pRefTransID, pTransactionType, pActivityType, v_CurrentTime, pUserId, v_BurdenRate, v_PaymentMode, pRemark, pUserId, pRoleID);  \n" +
                "	ELSE  \n" +
                "		IF(pTransactionType = 'B') THEN  \n" +
                "			UPDATE component_bomsetting SET  \n" +
                "				isActivityStart = pIsActivityStart,  \n" +
                "				activityStartBy = pUserId,  \n" +
                "				activityStopAt = v_CurrentTime,  \n" +
                "                updateByRoleId = pRoleID  \n" +
                "			WHERE refComponentID = pRefTransID;  \n" +
                "		ELSEIF(pTransactionType = 'C') THEN  \n" +
                "			UPDATE rfq_assemblies SET  \n" +
                "				isActivityStart = pIsActivityStart,  \n" +
                "				activityStartBy = pUserId,  \n" +
                "				activityStopAt = v_CurrentTime,  \n" +
                "				activityStartAt = NULL,  \n" +
                "                updateByRoleId = pRoleID  \n" +
                "		WHERE id = pRefTransID;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "		SELECT a.id, a.checkinTime INTO @pid, @pcheckinTime FROM assembly_trans_history a WHERE a.refTransID = pRefTransID AND a.isDeleted = FALSE ORDER BY id DESC LIMIT 1;  \n" +
                "		UPDATE assembly_trans_history SET  \n" +
                "			checkoutTime = v_CurrentTime,  \n" +
                "			totalTime = TIMESTAMPDIFF(SECOND, @pcheckinTime, v_CurrentTime),  \n" +
                "			updatedBy = pUserId,  \n" +
                "			updatedAt = v_CurrentTime,  \n" +
                "            remark = pRemark,  \n" +
                "			updateByRoleId = pRoleID  \n" +
                "			 WHERE id = @pid;  \n" +
                "	END IF;  \n" +
                "	COMMIT;  \n" +
                "	SELECT 	v_UpdatedUserID,  \n" +
                "			(CASE WHEN pIsActivityStart = 1 THEN v_CurrentTime ELSE NULL END) activityStartAt,  \n" +
                "			(CASE WHEN pIsActivityStart = 0 THEN v_CurrentTime ELSE NULL END) activityStopAt;  \n" +
                "    END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CheckCleanBOMSubAssembly` ;  \n" +
                "CREATE PROCEDURE `Sproc_CheckCleanBOMSubAssembly`(  \n" +
                "	IN pPartID TEXT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE totalCount INT DEFAULT 0;  \n" +
                "	DECLARE currIndex INT DEFAULT 0;  \n" +
                "	DECLARE currSubAssyPartID INT(11);  \n" +
                "	DECLARE currPartID INT(11);  \n" +
                "	DECLARE totPartID INT DEFAULT 0;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_NotVerified_SubAssembly;  \n" +
                "	CREATE TEMPORARY TABLE temp_NotVerified_SubAssembly(assyID INT(11), mfgPN VARCHAR(100), pid VARCHAR(100));  \n" +
                "	IF pPartID IS NOT NULL AND pPartID != '' THEN  \n" +
                "		/*Generate Dummy data from string to row */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS t_partID;  \n" +
                "		CREATE TEMPORARY TABLE t_partID( txt TEXT );  \n" +
                "		INSERT INTO t_partID VALUES(pPartID);  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_partID;  \n" +
                "		CREATE TEMPORARY TABLE temp_partID( val CHAR(255) );  \n" +
                "		SET @SQL = CONCAT(\"insert into temp_partID (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t_partID), \",\", \"'),('\"),\"');\");  \n" +
                "		PREPARE stmt1 FROM @SQL;  \n" +
                "		EXECUTE stmt1;  \n" +
                "		/*Generate Dummy data from string to row */  \n" +
                "  \n" +
                "		SELECT COUNT(*) FROM temp_partID INTO totPartID;  \n" +
                "  \n" +
                "		WHILE i < totPartID DO  \n" +
                "  \n" +
                "			SELECT 	a.val  \n" +
                "			INTO 	currPartID  \n" +
                "			FROM 	temp_partID a LIMIT i, 1;  \n" +
                "			IF currPartID IS NOT NULL AND currPartID != 0 THEN  \n" +
                "				IF((SELECT IFNULL(c.isBOMVerified, FALSE) FROM vu_component c WHERE c.id = currPartID) = FALSE) THEN  \n" +
                "					IF((SELECT COUNT(1) FROM rfq_lineitems WHERE partID = currPartID AND isDeleted = 0) > 0) THEN  \n" +
                "						INSERT INTO temp_NotVerified_SubAssembly(assyID,mfgPN,pid) VALUE (currPartID, (SELECT mfgPN FROM vu_component c WHERE c.id = currPartID),(SELECT PIDCode FROM vu_component c WHERE c.id = currPartID));  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_SubAssemblyDetails;  \n" +
                "				CREATE TEMPORARY TABLE temp_SubAssemblyDetails AS  \n" +
                "					SELECT 	sa.prPerPartID  \n" +
                "					FROM 	part_sub_assy_relationship sa  \n" +
                "					WHERE sa.partId = currPartID AND sa.isDeleted = 0 AND sa.partID != sa.prPerPartID;  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totalCount FROM temp_SubAssemblyDetails;  \n" +
                "  \n" +
                "				WHILE currIndex < totalCount DO  \n" +
                "					SELECT 	a.prPerPartID  \n" +
                "					INTO 	currSubAssyPartID  \n" +
                "					FROM 	temp_SubAssemblyDetails a LIMIT currIndex, 1;  \n" +
                "  \n" +
                "					IF((SELECT IFNULL(c.isBOMVerified, FALSE) FROM vu_component c WHERE c.id = currSubAssyPartID) = FALSE) THEN  \n" +
                "						IF((SELECT COUNT(1) FROM rfq_lineitems WHERE partID = currSubAssyPartID AND isDeleted = 0) > 0) THEN  \n" +
                "							INSERT INTO temp_NotVerified_SubAssembly(assyID,mfgPN,pid) VALUE (currSubAssyPartID, (SELECT mfgPN FROM vu_component c WHERE c.id = currSubAssyPartID),(SELECT PIDCode FROM vu_component c WHERE c.id = currSubAssyPartID));  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					SET currIndex = currIndex + 1;  \n" +
                "				END WHILE;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SET i = i + 1;  \n" +
                "		END WHILE;  \n" +
                "	END IF;  \n" +
                "	SELECT DISTINCT * FROM temp_NotVerified_SubAssembly;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyAssyBOMQuote_WitoutTransaction` ;  \n" +
                "CREATE PROCEDURE `Sproc_CopyAssyBOMQuote_WitoutTransaction`(  \n" +
                "	IN poldAssyID INT,  \n" +
                "	IN pnewAssyID INT,  \n" +
                "	IN UserID INT,  \n" +
                "	IN pIsBOM TINYINT,  \n" +
                "	IN pIsExistingRFQ TINYINT,  \n" +
                "	IN pFromCustomerID INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "	IN pRfqFormID INT,  \n" +
                "	IN pCustomerApprovalComment TEXT,  \n" +
                "	IN pIsCopyPricing TINYINT,  \n" +
                "	IN pfromRFQAssyID INT,  \n" +
                "	IN pEmployeeID INT,  \n" +
                "    IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE pCount INT;  \n" +
                "DECLARE pToRFQAssyID INT;  \n" +
                "DECLARE pRFQTypeID INT;  \n" +
                "DECLARE pRFQInDate DATETIME;  \n" +
                "DECLARE pRFQDueDate DATETIME;  \n" +
                "DECLARE pQuoteDateDiff INT;  \n" +
                "DECLARE pToAssemblyLineCount INT;  \n" +
                "DECLARE pisBOMVarified TINYINT;  \n" +
                "DECLARE pisReadyForPricing TINYINT;  \n" +
                "DECLARE vRFQID INT;  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO pToAssemblyLineCount FROM rfq_lineitems WHERE partID = pnewAssyID AND IFNULL(isDeleted, 0) = 0;  \n" +
                "  \n" +
                "    IF pIsBOM OR pToAssemblyLineCount = 0 THEN  \n" +
                "		INSERT INTO `rfq_lineitems` (`lineID`,	`qpa`,	`refDesig`,	`custPN`,  \n" +
                "					`custPNID`,	`uomID`,	`description`,	`isInstall`,	`isPurchase`, `isNotRequiredKitAllocation`,  \n" +
                "					`createdBy`,	`createdAt`,  \n" +
                "					`customerRev`,	`customerDescription`,	`numOfPosition`, `dnpQty`,		`dnpDesig`,  \n" +
                "					`org_lineID`,	`org_qpa`,	`org_refDesig`,	`org_custPN`,		`org_uomName`,  \n" +
                "					`org_isInstall`, `org_isPurchase`,			`org_customerRev`,  \n" +
                "					`org_customerDescription`,	`org_numOfPosition`,  \n" +
                "					`qpaDesignatorStep`,		`customerPartDesc`,			`org_customerPartDesc`,  \n" +
                "					`mergeLines`,	`lineMergeStep`,`isBuyDNPQty`,	 `partID`,		`requireMountingTypeStep`,  \n" +
                "					`requireFunctionalTypeStep`,	`programingStatus`,`substitutesAllow`,`org_substitutesAllow`,  \n" +
                "					`numOfRows`, 	`org_numOfRows`, 	`restrictCPNUseWithPermissionStep`,	`restrictCPNUsePermanentlyStep`,  \n" +
                "					`restrictCPNUseInBOMStep`,	`customerApprovalCPN`,	`customerApprovalCPNBy`,	`customerApprovalCPNDate`, `dnpDesigCount`,  \n" +
                "					`org_dnpQty`, `org_dnpDesig`, `org_buyDNPQty`, `requireMountingTypeError`, `requireFunctionalTypeError`,  \n" +
                "                    `dnpQPARefDesStep`, `customerApprovalForDNPQPAREFDESStep`, `customerApprovalForDNPBuyStep`,  \n" +
                "                    `createByRoleId`, `updateByRoleId`, `deleteByRoleId`, `refDesigCount`,`isObsoleteLine`,`cust_lineID`,  \n" +
                "                    `customerApprovalForQPAREFDESStep`, `customerApprovalForBuyStep`,`customerApprovalForPopulateStep`,`isSupplierToBuy`)  \n" +
                "		SELECT 	`lineID`, 	`qpa`, 	`refDesig`, 	`custPN`,  \n" +
                "					`custPNID`, 	`uomID`, 	`description`, 	`isInstall`, 	`isPurchase`,	`isNotRequiredKitAllocation`,  \n" +
                "					 UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,  \n" +
                "					`customerRev`, 	`customerDescription`, 	`numOfPosition`,  \n" +
                "					`dnpQty`, 		`dnpDesig`, `org_lineID`, 	`org_qpa`, 	`org_refDesig`, `org_custPN`, 		`org_uomName`,  \n" +
                "					`org_isInstall`, `org_isPurchase`, 			`org_customerRev`,  \n" +
                "					`org_customerDescription`,	`org_numOfPosition`,  \n" +
                "					`qpaDesignatorStep`,		`customerPartDesc`,			`org_customerPartDesc`,  \n" +
                "					`mergeLines`,	`lineMergeStep`,`isBuyDNPQty`,  \n" +
                "					 pnewAssyID `partID`,	`requireMountingTypeStep`,  \n" +
                "					`requireFunctionalTypeStep`,	`programingStatus` ,`substitutesAllow`,`org_substitutesAllow`,  \n" +
                "					`numOfRows`, 	`org_numOfRows`, 	`restrictCPNUseWithPermissionStep`,	`restrictCPNUsePermanentlyStep`,  \n" +
                "					`restrictCPNUseInBOMStep`,	`customerApprovalCPN`,	`customerApprovalCPNBy`,	`customerApprovalCPNDate`, `dnpDesigCount`,  \n" +
                "					`org_dnpQty`, `org_dnpDesig`, `org_buyDNPQty`, `requireMountingTypeError`, `requireFunctionalTypeError`, `dnpQPARefDesStep`,  \n" +
                "                    `customerApprovalForDNPQPAREFDESStep`, `customerApprovalForDNPBuyStep`, `createByRoleId`,  \n" +
                "                    `updateByRoleId`, `deleteByRoleId`, `refDesigCount`,`isObsoleteLine`,`cust_lineID`,  \n" +
                "                    `customerApprovalForQPAREFDESStep`, `customerApprovalForBuyStep`,`customerApprovalForPopulateStep`,`isSupplierToBuy`  \n" +
                "		FROM rfq_lineitems WHERE partID = poldAssyID AND IFNULL(isDeleted,0) = 0;  \n" +
                "  \n" +
                "		INSERT INTO `rfq_lineitems_alternatepart` (	`rfqLineItemsID`,	`distributor`,	`distMfgCodeID`,	`distPN`,  \n" +
                "							`distMfgPNID`,		`mfgCode`,	`mfgCodeID`,		`mfgPN`,  \n" +
                "							`mfgPNID`,		`description`,	 `RoHSStatusID`,  `createdBy`,		`createdAt`,	`mfgVerificationStep`,  \n" +
                "							`mfgDistMappingStep`,	`mfgCodeStep`,	`distVerificationStep`,	`distCodeStep`,  \n" +
                "							`getMFGPNStep`,		`obsoletePartStep`,			`mfgGoodPartMappingStep`,  \n" +
                "							`mfgPNStep`,		`distPNStep`,	`org_mfgCode`,  \n" +
                "							`org_mfgPN`,		`org_distributor`,`org_distPN`,		`badMfgPN`,  \n" +
                "							`distGoodPartMappingStep`,		`nonRohsStep`,		`epoxyStep`,  \n" +
                "							`invalidConnectorTypeStep`,`duplicateMPNInSameLineStep`,  \n" +
                "							`parttypeID`,		`mountingtypeID`,`partcategoryID`,	`partID`,  \n" +
                "							`userData1`,            `userData2`,	`userData3`,		`userData4`,  \n" +
                "							`userData5`,		`userData6`,	`userData7`,		`userData8`,  \n" +
                "							`userData9`,		`userData10`,	`mismatchMountingTypeStep`,  \n" +
                "							`mismatchFunctionalCategoryStep`,	`restrictUseWithPermissionStep`,  \n" +
                "							`restrictUsePermanentlyStep`,		`pickupPadRequiredStep`,  \n" +
                "							`matingPartRquiredStep`,		`driverToolsRequiredStep`,  \n" +
                "							`functionalTestingRequiredStep`,	`mismatchValueStep`,  \n" +
                "							`mismatchPackageStep`,			`mismatchToleranceStep`,  \n" +
                "							`mismatchTempratureStep`,		`mismatchPowerStep`,  \n" +
                "							`uomMismatchedStep`,  \n" +
                "							`programingRequiredStep`,	        `mismatchColorStep`, 	`customerApproval`,  \n" +
                "							`customerApprovalBy`, `customerApprovalDate`,`isCustomerUnAppoval`,`customerUnAppovalBy`,`customerUnAppovalDate`,  \n" +
                "							`restrictUseInBOMStep`,`mismatchNumberOfRowsStep`,`partPinIsLessthenBOMPinStep`,`tbdPartStep`,`exportControlledStep`,`restrictUseInBOMWithPermissionStep`,  \n" +
                "							`isUnlockApprovedPart`,`unknownPartStep`, `defaultInvalidMFRStep`, `restrictUseInBOMExcludingAliasStep`, `restrictUseInBOMExcludingAliasWithPermissionStep`,  \n" +
                "                            `restrictUseExcludingAliasStep`, `restrictUseExcludingAliasWithPermissionStep`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`, `approvedMountingType`,  \n" +
                "                            `mismatchRequiredProgrammingStep`,`mappingPartProgramStep`, `suggestedByApplicationMsg`,`suggestedByApplicationStep`,  \n" +
                "                            `suggestedGoodPartStep`,`suggestedGoodDistPartStep`, `mismatchCustomPartStep`, `mismatchCustpartRevStep`, `mismatchCPNandCustpartRevStep`)  \n" +
                "		SELECT 			rl.id `rfqLineItemsID`, ra.`distributor`, ra.`distMfgCodeID`, 	ra.`distPN`,  \n" +
                "							ra.`distMfgPNID`, 	ra.`mfgCode`, 	ra.`mfgCodeID`, 	ra.`mfgPN`,  \n" +
                "							ra.`mfgPNID`,		ra.`description`,  	ra.`RoHSStatusID`,  \n" +
                "							UserID `createdBy`,	fun_DatetimetoUTCDateTime() `createdAt`,	ra.`mfgVerificationStep`,  \n" +
                "							ra.`mfgDistMappingStep`,ra.`mfgCodeStep`,ra.`distVerificationStep`,ra.`distCodeStep`,  \n" +
                "							ra.`getMFGPNStep`, 	ra.`obsoletePartStep`, 			ra.`mfgGoodPartMappingStep`,  \n" +
                "							ra.`mfgPNStep`, 	ra.`distPNStep`, ra.`org_mfgCode`,  \n" +
                "							ra.`org_mfgPN`,		ra.`org_distributor`,ra.`org_distPN`,	ra.`badMfgPN`,  \n" +
                "							ra.`distGoodPartMappingStep`,		ra.`nonRohsStep`,		ra.`epoxyStep`,  \n" +
                "							ra.`invalidConnectorTypeStep`,ra.`duplicateMPNInSameLineStep`,  \n" +
                "							ra.`parttypeID`,		ra.`mountingtypeID`,ra.`partcategoryID`,	pnewAssyID `partID`,  \n" +
                "							ra.`userData1`,         ra.`userData2`,	ra.`userData3`,		ra.`userData4`,  \n" +
                "							ra.`userData5`,		ra.`userData6`,	ra.`userData7`,		ra.`userData8`,  \n" +
                "							ra.`userData9`,		ra.`userData10`,	ra.`mismatchMountingTypeStep`,  \n" +
                "							ra.`mismatchFunctionalCategoryStep`,	ra.`restrictUseWithPermissionStep`,  \n" +
                "							ra.`restrictUsePermanentlyStep`,	ra.`pickupPadRequiredStep`,  \n" +
                "							ra.`matingPartRquiredStep`,		ra.`driverToolsRequiredStep`,  \n" +
                "							ra.`functionalTestingRequiredStep`,	ra.`mismatchValueStep`,  \n" +
                "							ra.`mismatchPackageStep`,		ra.`mismatchToleranceStep`,  \n" +
                "							ra.`mismatchTempratureStep`,		ra.`mismatchPowerStep`,  \n" +
                "							ra.`uomMismatchedStep`,  \n" +
                "							ra.`programingRequiredStep`,	        ra.`mismatchColorStep`,	ra.`customerApproval`,  \n" +
                "							ra.`customerApprovalBy`, 		ra.`customerApprovalDate`,ra.`isCustomerUnAppoval`,ra.`customerUnAppovalBy`,ra.`customerUnAppovalDate`,  \n" +
                "							ra.`restrictUseInBOMStep`,ra.`mismatchNumberOfRowsStep`,ra.`partPinIsLessthenBOMPinStep`,ra.`tbdPartStep`,ra.`exportControlledStep`,ra.`restrictUseInBOMWithPermissionStep`,  \n" +
                "							ra.`isUnlockApprovedPart`,ra.`unknownPartStep`, ra.`defaultInvalidMFRStep`, ra.`restrictUseInBOMExcludingAliasStep`, ra.`restrictUseInBOMExcludingAliasWithPermissionStep`,  \n" +
                "                            ra.`restrictUseExcludingAliasStep`, ra.`restrictUseExcludingAliasWithPermissionStep`, ra.`createByRoleId`, ra.`updateByRoleId`, ra.`deleteByRoleId`, ra.`approvedMountingType`,  \n" +
                "                            ra.`mismatchRequiredProgrammingStep`, ra.`mappingPartProgramStep`, ra.`suggestedByApplicationMsg`, ra.`suggestedByApplicationStep`,  \n" +
                "                            ra.`suggestedGoodPartStep`,ra.`suggestedGoodDistPartStep`,ra.`mismatchCustomPartStep`, ra.`mismatchCustpartRevStep`, ra.`mismatchCPNandCustpartRevStep`  \n" +
                "			FROM rfq_lineitems_alternatepart ra  \n" +
                "			JOIN rfq_lineitems ral ON ral.id = ra.rfqLineItemsID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0  \n" +
                "			JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.partID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0  \n" +
                "			WHERE ra.partID = poldAssyID AND IFNULL(ra.isDeleted, 0) = 0;  \n" +
                "  \n" +
                "		 /* Copy Additional comment form Old BOM to New generated Assembly*/  \n" +
                "			INSERT INTO rfq_lineitems_additional_comment  \n" +
                "			(`lineID`,`description`,`rfqLineItemID`,`createdBy`,`createdAt`,`partID`)  \n" +
                "				SELECT rlc.lineID, rlc.description, rl.id `rfqLineItemID`, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, pnewAssyID `partID`  \n" +
                "				FROM rfq_lineitems_additional_comment rlc  \n" +
                "				JOIN rfq_lineitems ral ON ral.id = rlc.rfqLineItemID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0  \n" +
                "				JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.partID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0  \n" +
                "				WHERE rlc.partID = poldAssyID AND IFNULL(rlc.isDeleted, 0) = 0;  \n" +
                "  \n" +
                "		 /* Copy Approval comment for line level errors */  \n" +
                "			INSERT INTO rfq_lineitems_approval_comment  \n" +
                "			(`comment`,`approvalBy`,`approvalDate`, `mfgCode`,`mfgPN`,`approvalType`, `createdBy`,`createdAt`, `errorCode`,  \n" +
                "			`rfqLineItemsID`, `requiredToShowOnQuoteSummary`, `isCustomerApproved`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`)  \n" +
                "			SELECT rac.comment,rac.`approvalBy`,rac.`approvalDate`, rac.`mfgCode`,rac.`mfgPN`,rac.`approvalType`,  \n" +
                "					UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,rac.errorCode, rl.id `rfqLineItemsID`,  \n" +
                "					rac.`requiredToShowOnQuoteSummary`, rac.`isCustomerApproved`, rac.`createByRoleId`, rac.`updateByRoleId`, rac.`deleteByRoleId`  \n" +
                "			FROM rfq_lineitems_approval_comment rac  \n" +
                "			JOIN rfq_lineitems ral ON ral.id = rac.rfqLineItemsID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0  \n" +
                "			JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.partID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0  \n" +
                "			WHERE IFNULL(rac.isDeleted, 0) = 0;  \n" +
                "  \n" +
                "	   /* Copy Approval comment for Alternete part level errors */  \n" +
                "			INSERT INTO `rfq_lineitems_approval_comment`  \n" +
                "			(`rfqLineItemsAlternatePartID`,`comment`,`approvalBy`,`approvalDate`, `mfgCode`,`mfgPN`,`approvalType`,  `createdBy`,`createdAt`,  \n" +
                "			`errorCode`, `requiredToShowOnQuoteSummary`, `isCustomerApproved`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`)  \n" +
                "			SELECT  rl.id `rfqLineItemsAlternatePartID`, rac.comment,rac.`approvalBy`,rac.`approvalDate`,  \n" +
                "					rac.`mfgCode`,rac.`mfgPN`,rac.`approvalType`,  \n" +
                "					UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,rac.errorCode,  \n" +
                "					rac.`requiredToShowOnQuoteSummary`, rac.`isCustomerApproved`, rac.`createByRoleId`, rac.`updateByRoleId`, rac.`deleteByRoleId`  \n" +
                "			FROM rfq_lineitems_approval_comment rac  \n" +
                "			JOIN rfq_lineitems_alternatepart ral ON ral.id = rac.rfqLineItemsAlternatePartID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0  \n" +
                "			JOIN rfq_lineitems_alternatepart rl ON rl.partID = pnewAssyID AND rl.mfgPNID = ral.mfgPNID AND IFNULL(rl.isDeleted,0) = 0  \n" +
                "			WHERE IFNULL(rac.isDeleted, 0) = 0;  \n" +
                "		   -- Have to add Part assembly relation entry manage  \n" +
                "		   CALL Sproc_CreatePartAssyBomRelationshipForAllParent (pnewAssyID, UserID);  \n" +
                "   END IF;  \n" +
                "  \n" +
                "	IF IFNULL(pIsBOM,FALSE) != TRUE THEN  \n" +
                "	   	IF IFNULL(pIsExistingRFQ ,0) = 0 THEN  \n" +
                "        SELECT salesCommissionTo INTO @salesCommissionTo FROM rfqforms WHERE id = (SELECT rfqrefID FROM rfq_assemblies WHERE id = pfromRFQAssyID);  \n" +
                "			INSERT INTO `rfqforms`(	`customerId`,`employeeID`,`isActive`,`quoteNote`,`createdBy`,`createdAt`,`updatedBy`,`salesCommissionTo`)  \n" +
                "					VALUES (pCustomerID, pEmployeeID, TRUE, \"\", UserID, fun_DatetimetoUTCDateTime(),UserID,@salesCommissionTo);  \n" +
                "			SELECT LAST_INSERT_ID() INTO pRfqFormID;  \n" +
                "		END IF;  \n" +
                "		IF (SELECT COUNT(1) FROM rfqType WHERE `name` = 'Repeat') = 0 THEN  \n" +
                "			INSERT INTO rfqType (`name`, `description`, `isActive`,`createdBy`,`createdAt`,`updatedBy`)  \n" +
                "				VALUES ('Repeat', 'Repeat Assembly', TRUE, UserID, fun_DatetimetoUTCDateTime(),UserID);  \n" +
                "			SELECT LAST_INSERT_ID() INTO pRFQTypeID;  \n" +
                "		ELSE  \n" +
                "		       SELECT id INTO pRFQTypeID FROM rfqType WHERE `name` = 'Repeat';  \n" +
                "		END IF;  \n" +
                "		SELECT quoteInDate, quoteDueDate INTO pRFQInDate , pRFQDueDate  \n" +
                "			FROM rfq_assemblies  \n" +
                "		WHERE id = pfromRFQAssyID AND IFNULL(isDeleted, 0) = 0;  \n" +
                "  \n" +
                "		SELECT DATEDIFF(pRFQDueDate, pRFQInDate) INTO pQuoteDateDiff;  \n" +
                "  \n" +
                "    /* Copy RFQ Assembly detail */  \n" +
                "		INSERT INTO `rfq_assemblies`  \n" +
                "        (`rfqrefID`,`assyNote`,`isActive`,`quoteNote`,`assyCloseNote`,`assyClosedStatus`,  \n" +
                "				`assyClosedReasonID`,`assyClosedDate`,`IsRepeated`,`createdBy`,`createdAt`,`updatedBy`,  \n" +
                "				`assemblyNumber`,`assemblyDescription`,`assemblyRev`,`status`,`isBOMVerified`,`isReadyForPricing`,  \n" +
                "				`RoHSStatusID`,`isRepeat`,`description`,`assemblyVersion`,`isSummaryComplete`,  \n" +
                "				`repeatExpectedQty`,`repeatFrequency`,`quoteFinalStatus`,`bomStatus`,`jobTypeID`,  \n" +
                "				`RFQTypeID`,`partID`,`assemblyTypeID`,`eau`,`proposedBuildQty`,`noOfBuild`,`timePeriod`,  \n" +
                "				`additionalRequirement`,`quoteInDate`, `quoteDueDate`,  \n" +
                "				`copyRefRfqId`,`copyConfirmationDescription`,`quotePriority`)  \n" +
                "		SELECT pRfqFormID `rfqrefID` ,`assyNote`,`isActive`,`quoteNote`,`assyCloseNote`,`assyClosedStatus`,  \n" +
                "				`assyClosedReasonID`,`assyClosedDate`,`IsRepeated`,UserID `createdBy`,	fun_DatetimetoUTCDateTime() `createdAt`, UserID `updatedBy`,  \n" +
                "				`assemblyNumber`,`assemblyDescription`,`assemblyRev`, 1 ,`isBOMVerified`,`isReadyForPricing`,  \n" +
                "				`RoHSStatusID`,`isRepeat`,`description`,`assemblyVersion`, 0 ,  \n" +
                "				`repeatExpectedQty`,`repeatFrequency`, 1 ,`bomStatus`,`jobTypeID`,  \n" +
                "				pRFQTypeID `RFQTypeID`,pnewAssyID `partID`,`assemblyTypeID`,`eau`,`proposedBuildQty`,`noOfBuild`,`timePeriod`,  \n" +
                "				`additionalRequirement`,fun_DatetimetoUTCDateTime() `quoteInDate`,DATE_ADD(fun_DatetimetoUTCDateTime(), INTERVAL pQuoteDateDiff DAY) `quoteDueDate`,  \n" +
                "				pfromRFQAssyID `copyRefRfqId`, pCustomerApprovalComment `copyConfirmationDescription`, `quotePriority`  \n" +
                "		FROM rfq_assemblies WHERE id = pfromRFQAssyID AND IFNULL(isDeleted, 0) = 0;  \n" +
                "  \n" +
                "		SELECT LAST_INSERT_ID() INTO pToRFQAssyID;  \n" +
                "  \n" +
                "	/* Copy RFQ Assembly Quantity detail */  \n" +
                "		INSERT INTO `rfq_assy_quantity`(`rfqAssyID`, `requestQty`,`materialTotal`,`materialHandling`,`materialScrapPercentage`,  \n" +
                "				`materialScrap`,`materialCarryingCostPercentage`,`materialCarryingCost`,`excessQtyTotal`,  \n" +
                "				`excessTotalDollar`,`leadCostTotal`,`attritionRateTotal`,  \n" +
                "				`createdBy`,`createdAt`,`quantityType`)  \n" +
                "		SELECT pToRFQAssyID `rfqAssyID`,`requestQty`,`materialTotal`,`materialHandling`,`materialScrapPercentage`,  \n" +
                "				`materialScrap`,`materialCarryingCostPercentage`,`materialCarryingCost`,`excessQtyTotal`,  \n" +
                "				`excessTotalDollar`,`leadCostTotal`,`attritionRateTotal`,  \n" +
                "				UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,`quantityType`  \n" +
                "		FROM rfq_assy_quantity WHERE rfqAssyID = pfromRFQAssyID AND IFNULL(isDeleted, 0) = 0  \n" +
                "        AND rfqPriceGroupId IS NULL AND rfqPriceGroupDetailId IS NULL;  \n" +
                "  \n" +
                "	/* Copy RFQ Assembly Quantity turn time detail */  \n" +
                "        INSERT INTO `rfq_assy_quantity_turn_time`(`rfqAssyQtyID`,`turnTime`,`unitOfTime`,`createdBy`,`createdAt`)  \n" +
                "		SELECT rq.`Id`, rqt.`turnTime`, rqt.`unitOfTime`, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`  \n" +
                "		FROM rfq_assy_quantity_turn_time rqt  \n" +
                "		JOIN rfq_assy_quantity raq ON raq.id = rqt.rfqAssyQtyID AND raq.rfqAssyID = pfromRFQAssyID AND IFNULL(raq.isDeleted,0) = 0 AND raq.rfqPriceGroupId IS NULL AND raq.rfqPriceGroupDetailId IS NULL  \n" +
                "		LEFT JOIN rfq_assy_quantity rq ON rq.requestQty = raq.requestQty AND rq.rfqAssyID = pToRFQAssyID AND IFNULL(rq.isDeleted,0) = 0  \n" +
                "		WHERE IFNULL(rqt.isDeleted, 0) = 0;  \n" +
                "	/* Copy RFQ Assembly Quantity Price selection setting from part costing */  \n" +
                "        INSERT INTO rfq_assy_quantity_price_selection_setting  \n" +
                "        (`qtyID`,	`stock`,	`price`, `isCheckRequiredQty`,	`isLeadTime`, `createdBy`,	`createdAt`,	`remark`,  \n" +
                "			`stockPercentage`,	`packagingID`,`settingType`,`leadTime`)  \n" +
                "		SELECT rq.`Id` `qtyID`, rqt.`stock`, rqt.`price`,  \n" +
                "				rqt.`isCheckRequiredQty`,	rqt.`isLeadTime`,  \n" +
                "				UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, rqt.`remark`,  \n" +
                "				rqt.`stockPercentage`,	rqt.`packagingID`, rqt.`settingType`,rqt.`leadTime`  \n" +
                "		FROM rfq_assy_quantity_price_selection_setting rqt  \n" +
                "		JOIN rfq_assy_quantity raq ON raq.id = rqt.qtyID AND raq.rfqAssyID = pfromRFQAssyID AND IFNULL(raq.isDeleted,0) = 0  \n" +
                "		LEFT JOIN rfq_assy_quantity rq ON rq.requestQty = raq.requestQty AND rq.rfqAssyID =  pToRFQAssyID AND IFNULL(rq.isDeleted,0) = 0  \n" +
                "		WHERE IFNULL(rqt.isDeleted, 0) = 0;  \n" +
                "	# copy rfq_consolidated_mfgpn_lineitem data from old assy to new assy  \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem`  \n" +
                "		(`lineID`, `isInstall`, `isPurchase`, `rfqAssyID`, `rfqLineItemID`, `uomID`,  \n" +
                "		 `totalQty`, `requestQty`, `originalTotalQty`, `qpa`, `createdAt`, `createdBy`, `isMultiple`,  \n" +
                "		`numOfPosition`,`consolidatedLineItemIDs`, `refDesig`,`numOfRows`,`consolidatedpartlineID`,`isqpaMismatch`,`restrictCPNUseInBOMStep`,`restrictCPNUsePermanentlyStep`,`restrictCPNUseWithPermissionStep`,`custPNID`,`consolidateRestrictPartDetail`,`consolidatedPartWithFlagDetail`)  \n" +
                "		SELECT  rcl.`lineID`, rcl.`isInstall`, rcl.`isPurchase`, pToRFQAssyID `rfqAssyID`,  \n" +
                "				rcl.`rfqLineItemID`, rcl.`uomID`, rcl.`totalQty`, rcl.`requestQty`, rcl.`originalTotalQty`,  \n" +
                "					rcl.`qpa`,fun_DatetimetoUTCDateTime() `createdAt`,UserID `createdBy`, rcl.`isMultiple`, rcl.`numOfPosition`,  \n" +
                "					fun_getconsolidatedlineitems(rcl.id,pfromRFQAssyID,pnewAssyID, poldAssyID) `consolidatedLineItemIDs` ,  \n" +
                "					rcl.`refDesig`,rcl.`numOfRows`,rcl.`consolidatedpartlineID`,rcl.`isqpaMismatch`,rcl.`restrictCPNUseInBOMStep`,rcl.`restrictCPNUsePermanentlyStep`,rcl.`restrictCPNUseWithPermissionStep`,rcl.`custPNID`,  \n" +
                "                    rcl.`consolidateRestrictPartDetail`,rcl.`consolidatedPartWithFlagDetail`  \n" +
                "		FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
                "		WHERE rcl.rfqAssyID = pfromRFQAssyID AND rcl.deletedAt IS NULL;  \n" +
                "  \n" +
                "		# copy rfq_consolidated_mfgpn_lineitem_alternate data from old assy to new assy  \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`  \n" +
                "					(`mfgPN`, `consolidateID`, `mfgPNID`, `createdBy`, `createdAt`, `mfgCodeID`, `PIDCode`, `customerApproval`,isdeleted,deletedAt,deletedBy,  \n" +
                "                    `restrictUseInBOMStep`,`restrictUseWithPermissionStep`,`restrictUsePermanentlyStep`,`restrictUseInBOMWithPermissionStep`,  \n" +
                "                    `restrictUseExcludingAliasStep`,`restrictUseExcludingAliasWithPermissionStep`,  \n" +
                "					`restrictUseInBOMExcludingAliasStep`,`restrictUseInBOMExcludingAliasWithPermissionStep`,`approvedMountingType`,`mismatchMountingTypeStep`)  \n" +
                "		SELECT rap.`mfgPN`,rcl.id `consolidateID`, rap.`mfgPNID`, UserID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`, rap.`mfgCodeID`,  \n" +
                "				com.PIDCode `PIDCode` , rap.`customerApproval`, rcl.isdeleted, rcl.deletedAt, rcl.deletedBy,rap.`restrictUseInBOMStep`,  \n" +
                "                rap.`restrictUseWithPermissionStep`,rap.`restrictUsePermanentlyStep`,rap.`restrictUseInBOMWithPermissionStep`,  \n" +
                "                rap.`restrictUseExcludingAliasStep`,rap.`restrictUseExcludingAliasWithPermissionStep`,  \n" +
                "				rap.`restrictUseInBOMExcludingAliasStep`,rap.`restrictUseInBOMExcludingAliasWithPermissionStep`,rap.`approvedMountingType`,rap.`mismatchMountingTypeStep`  \n" +
                "		FROM rfq_lineitems_alternatepart rap  \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.rfqLineItemID = rap.rfqLineItemsID  \n" +
                "		JOIN vu_component com ON com.id = rap.mfgPNID AND IFNULL(com.isDeleted,0) = 0  \n" +
                "		WHERE rcl.rfqAssyId = pToRFQAssyID  \n" +
                "		GROUP BY rap.mfgPNID, rap.rfqLineItemsID;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS result;  \n" +
                "			CREATE TEMPORARY TABLE result  \n" +
                "			SELECT rcl.lineID, raq.requestQty, rcl.qpa, rcl.rfqLineItemID, rlq.*  \n" +
                "			FROM rfq_consolidate_mfgpn_lineitem_quantity rlq  \n" +
                "			LEFT JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.id = rlq.consolidateID AND rcl.rfqAssyID = pfromRFQAssyID  \n" +
                "			LEFT JOIN rfq_assy_quantity raq ON raq.id = rlq.qtyID  \n" +
                "			WHERE rlq.isDeleted = 0 AND rcl.isDeleted = 0 AND raq.isDeleted = 0 AND raq.rfqAssyID = pfromRFQAssyID;  \n" +
                "  \n" +
                "				# create temporary table for mapping quantity between old assembly and new assembly  \n" +
                "  					DROP TEMPORARY TABLE IF EXISTS mapping;  \n" +
                "					CREATE TEMPORARY TABLE mapping  \n" +
                "					SELECT a.requestQty, IFNULL((SELECT MAX(b.requestqty)  FROM rfq_assy_quantity b  \n" +
                "					WHERE b.rfqAssyID = pfromRFQAssyID AND b.requestqty <= a.requestQty AND b.isDeleted = 0),  \n" +
                "					(SELECT MIN(b.requestqty)  FROM rfq_assy_quantity b  \n" +
                "					WHERE b.rfqAssyID = pfromRFQAssyID AND b.requestqty > a.requestQty AND b.isDeleted = 0))mappingQty  \n" +
                "					FROM rfq_assy_quantity a  \n" +
                "					WHERE a.rfqAssyID = pToRFQAssyID;  \n" +
                "  \n" +
                "    # copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy  \n" +
                "		INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`  \n" +
                "					(`qtyID`, `finalPrice`, `consolidateID`, `createdAt`, `createdBy`, `unitPrice`, `supplier`, `selectedMpn`, `selectionMode`,  \n" +
                "					`min`, `mult`, `currentStock`,`selectedPIDCode`,`leadTime`,`supplierStock`,`grossStock`,  \n" +
                "					`pricingSuppliers`, `apiLead`,`componentID`,`packaging`,`rfqQtySupplierID`,  \n" +
                "					`quoteQty`,`pricenotselectreason`,`availableInternalStock`,`availableInternalStockTimeStamp`,  \n" +
                "					`isBomUpdate`,`LOAprice`,`quoteQtyEach`, `unitEachPrice`,`supplierEachStcok`)  \n" +
                "					SELECT rq.id `qtyID`, R.finalPrice `finalPrice`, cl.id `consolidateID`,  \n" +
                "					fun_DatetimetoUTCDateTime() `createdAt`, UserID `createdBy`, R.unitPrice `unitPrice`, R.`supplier`, R.`selectedMpn`,  \n" +
                "					R.`selectionMode`, R.`min`, R.`mult`, R.`currentStock`, R.`selectedPIDCode`,R.`leadTime`,R.`supplierStock`,R.`grossStock`,  \n" +
                "					R.`pricingSuppliers`,R.`apiLead`,R.`componentID`,R.`packaging`,R.`rfqQtySupplierID`,  \n" +
                "					R.`quoteQty`,R.`pricenotselectreason`,R.`availableInternalStock`,R.`availableInternalStockTimeStamp`,  \n" +
                "					R.`isBomUpdate`,R.`LOAprice` ,R.`quoteQtyEach`, R.`unitEachPrice`,R.`supplierEachStcok`  \n" +
                "					FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
                "					JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND rq.isDeleted = 0  \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id AND clq.isDeleted = 0  \n" +
                "					LEFT JOIN result R ON R.rfqLineItemID = cl.rfqLineItemID  \n" +
                "					LEFT JOIN mapping m ON  rq.requestQty = m.requestQty  \n" +
                "					WHERE cl.rfqAssyID = pToRFQAssyID AND cl.isDeleted = 0 AND m.mappingQty = R.requestQty;  \n" +
                "  \n" +
                "		# Start Labor details	copy  \n" +
                "		INSERT INTO `rfq_labor_assy_qpa_detail`  \n" +
                "				    (`rfqAssyID`, `partID`, `subAssyID`, `perBuildQty`, `bomInternalVersion`,  \n" +
                "				     `isDeleted`, `createdBy`, `createdAt`,  \n" +
                "				     `originalQPA`, `isMismatchQPA`, `parPartID`, `level`, `isInstall`,  \n" +
                "				     `createByRoleId`, `updateByRoleId`)  \n" +
                "				SELECT pToRFQAssyID `rfqAssyID`, rl.`partID`, rl.`subAssyID`, rl.`perBuildQty`, rl.`bomInternalVersion`,  \n" +
                "					0, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,  \n" +
                "					rl.`originalQPA`, rl.`isMismatchQPA`, rl.`parPartID`, rl.`level`, rl.`isInstall`,  \n" +
                "					rl.`createByRoleId`, rl.`updateByRoleId` FROM rfq_labor_assy_qpa_detail rl  \n" +
                "				WHERE rl.rfqAssyID = pfromRFQAssyID AND rl.isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "		INSERT INTO `rfq_assy_labor_bom_mountingtype_qpa_detail`  \n" +
                "				    (`rfqAssyID`, `partID`, `mountingTypeID`, `lineCount`,  \n" +
                "				     `totalQPA`, `isDeleted`, `createdBy`,  \n" +
                "				     `createdAt`, `subAssyID`,  \n" +
                "				     `isInstall`, `createByRoleId`, `updateByRoleId`)  \n" +
                "				SELECT pToRFQAssyID `rfqAssyID`,rlm.`partID`, rlm.`mountingTypeID`, rlm.`lineCount`,  \n" +
                "				     rlm.`totalQPA`, 0, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, rlm.`subAssyID`,  \n" +
                "				     rlm.`isInstall`, rlm.`createByRoleId`, rlm.`updateByRoleId`  \n" +
                "				FROM rfq_assy_labor_bom_mountingtype_qpa_detail rlm  \n" +
                "				WHERE rlm.rfqAssyID = pfromRFQAssyID AND rlm.isDeleted = 0;  \n" +
                "  \n" +
                "		INSERT INTO `rfq_assy_qtywise_bom_laborcosting_detail`  \n" +
                "				    (`rfqAssyQtyID`, `rfqAssyBOMMountingID`, `price`, `perAssyPrice`,  \n" +
                "				     `isDeleted`, `createdBy`, `createdAt`,  \n" +
                "				     `isPricePending`, `overHeadPrice`, `overHeadAssyPrice`)  \n" +
                "			SELECT rq.id `rfqAssyQtyID`, lmc.id `rfqAssyBOMMountingID`,  rlc.`price`, rlc.`perAssyPrice`,  \n" +
                "					0, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,  \n" +
                "					rlc.`isPricePending`, rlc.`overHeadPrice`, rlc.`overHeadAssyPrice`  \n" +
                "					FROM rfq_assy_qtywise_bom_laborcosting_detail rlc  \n" +
                "					JOIN rfq_assy_quantity raq ON raq.id = rlc.rfqAssyQtyID AND raq.rfqAssyID = pfromRFQAssyID AND IFNULL(raq.isDeleted,0) = 0  AND raq.rfqPriceGroupId IS NULL AND raq.rfqPriceGroupDetailId IS NULL  \n" +
                "					LEFT JOIN rfq_assy_quantity rq ON rq.requestQty = raq.requestQty AND rq.rfqAssyID = pToRFQAssyID AND IFNULL(rq.isDeleted,0) = 0  \n" +
                "					JOIN rfq_assy_labor_bom_mountingtype_qpa_detail lm ON lm.id = rlc.rfqAssyBOMMountingID AND lm.rfqAssyID = pfromRFQAssyID AND IFNULL(lm.isDeleted,0) = 0  AND lm.mountingTypeID IS NOT NULL  \n" +
                "					LEFT JOIN rfq_assy_labor_bom_mountingtype_qpa_detail lmc ON lmc.mountingTypeID = lm.mountingTypeID AND lmc.rfqAssyID = pToRFQAssyID AND IFNULL(lmc.isDeleted,0) = 0 AND lmc.mountingTypeID IS NOT NULL  \n" +
                "					WHERE IFNULL(rlc.isDeleted, 0) = 0;  \n" +
                "		# End Labor details copy  \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS mapping;  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS result;  \n" +
                "  \n" +
                "					SELECT liveVersion INTO @internalVerion  \n" +
                "                    FROM component_bomsetting  \n" +
                "                    WHERE refComponentID = pnewAssyID;  \n" +
                "  \n" +
                "					UPDATE rfq_assemblies SET  partCostingBOMInternalVersion = @internalVerion  \n" +
                "                    WHERE  id = pToRFQAssyID AND IFNULL(isDeleted, 0) = 0;  \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SELECT pToRFQAssyID;  \n" +
                "    IF IFNULL(pIsBOM,FALSE) != TRUE THEN  \n" +
                "		SELECT rfqrefID INTO vRFQID FROM rfq_assemblies WHERE id = pToRFQAssyID;  \n" +
                "		CALL Sproc_CopyRFQAssyDocFolderToNewRFQAssy(pfromRFQAssyID,pToRFQAssyID,UserID);  \n" +
                "		CALL Sproc_getRefTransDetailForDocument ('bom', pfromRFQAssyID, 1);  \n" +
                "		CALL Sproc_getRefTransDetailForDocument ('bom', pToRFQAssyID, 1);  \n" +
                "        CALL Sproc_CreateCostSummaryEntry (vRFQID,UserID,pRoleID);  \n" +
                "    END IF;  \n" +
                "	-- SELECT * FROM rfq_lineitems WHERE partID = pnewAssyID AND isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_Rfq_Lineitems_Approval_Comment_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_Rfq_Lineitems_Approval_Comment_BOM_History` AFTER INSERT ON `rfq_lineitems_approval_comment`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pLiveInternalVersion INT(11);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pPartID INT(11);  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF NEW.comment IS NOT NULL AND New.errorCode = 19 THEN  \n" +
                "		SELECT partID INTO pPartID FROM rfq_lineItems WHERE id = NEW.rfqLineItemsID;  \n" +
                "		SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component_bomsetting WHERE refComponentID = pPartID;  \n" +
                "	       IF pLiveInternalVersion > 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"rfq_lineitems_approval_comment\", NEW.id, NEW.rfqLineItemsID, pPartID, \"Kit Allocation Not Required Comment\",  \n" +
                "				\"\", IFNULL(NEW.comment,\"\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_Additional_Comment_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_Additional_Comment_BOM_History` AFTER INSERT ON `rfq_lineitems_additional_comment`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pLiveInternalVersion INT(11);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component_bomsetting WHERE refComponentID = NEW.partID;  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "	IF NEW.description IS NOT NULL AND pLiveInternalVersion > 0 THEN  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"rfq_lineitems_additional_comment\", NEW.id, NEW.rfqLineItemID, NEW.rfqAssyID, NEW.partID, \"Additional Comment\",  \n" +
                "			\"\", IFNULL(NEW.description,\"\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_additional_comment', NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_AlternatePart_BOM_History` AFTER INSERT ON `rfq_lineitems_alternatepart`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE pPartID INT;  \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component_bomsetting WHERE refComponentID = pPartID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "  \n" +
                "	IF pLiveInternalVersion > 0 THEN  \n" +
                "  \n" +
                "		IF NEW.distributor IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",  \n" +
                "				NULL, CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"SPN\",  \n" +
                "				NULL, CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy, New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgCode IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",  \n" +
                "				NULL, CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "			-- if New.org_mfgCode is null then  \n" +
                "			-- 	Update rfq_lineitems_alternatepart set org_mfgCode = NEW.mfgCode where id = NEW.id;  \n" +
                "			-- end if;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.description IS NOT NULL AND NEW.description <> '' THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",  \n" +
                "				NULL, CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MPN\",  \n" +
                "				NULL, CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "			-- IF New.org_mfgPN IS NULL THEN  \n" +
                "			-- 	UPDATE rfq_lineitems_alternatepart SET org_mfgPN = NEW.mfgPN WHERE id = NEW.id;  \n" +
                "			-- END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.badMfgPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MPN\",  \n" +
                "				NULL, CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgCodeStep IS NOT NULL AND NEW.mfgCodeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 2;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distVerificationStep IS NOT NULL AND NEW.distVerificationStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 4;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distCodeStep IS NOT NULL AND NEW.distCodeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 10;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.getMFGPNStep IS NOT NULL AND NEW.getMFGPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.obsoletePartStep IS NOT NULL AND NEW.obsoletePartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgVerificationStep IS NOT NULL AND NEW.mfgVerificationStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgGoodPartMappingStep IS NOT NULL AND NEW.mfgGoodPartMappingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgPNStep IS NOT NULL AND NEW.mfgPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distPNStep IS NOT NULL AND NEW.distPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.distGoodPartMappingStep IS NOT NULL AND NEW.distGoodPartMappingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mfgDistMappingStep IS NOT NULL AND NEW.mfgDistMappingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.nonRohsStep IS NOT NULL AND NEW.nonRohsStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.epoxyStep IS NOT NULL AND NEW.epoxyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.invalidConnectorTypeStep IS NOT NULL AND NEW.invalidConnectorTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND NEW.duplicateMPNInSameLineStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.mismatchMountingTypeStep IS NOT NULL AND NEW.mismatchMountingTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND NEW.mismatchFunctionalCategoryStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 28;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.mismatchCustomPartStep IS NOT NULL AND NEW.mismatchCustomPartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 75;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUseWithPermissionStep IS NOT NULL AND NEW.restrictUseWithPermissionStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseExcludingAliasWithPermissionStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUsePermanentlyStep IS NOT NULL AND NEW.restrictUsePermanentlyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND NEW.restrictUseExcludingAliasStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.pickupPadRequiredStep IS NOT NULL AND NEW.pickupPadRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.matingPartRquiredStep IS NOT NULL AND NEW.matingPartRquiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalTestingRequiredStep IS NOT NULL AND NEW.functionalTestingRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomMismatchedStep IS NOT NULL AND NEW.uomMismatchedStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`,`displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.programingRequiredStep IS NOT NULL AND NEW.programingRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMStep IS NOT NULL AND NEW.restrictUseInBOMStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMWithPermissionStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND NEW.restrictUseInBOMExcludingAliasWithPermissionStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.driverToolsRequiredStep IS NOT NULL AND NEW.driverToolsRequiredStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND NEW.mismatchNumberOfRowsStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND NEW.partPinIsLessthenBOMPinStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.tbdPartStep IS NOT NULL AND NEW.tbdPartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.exportControlledStep IS NOT NULL AND NEW.exportControlledStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.unknownPartStep IS NOT NULL AND NEW.unknownPartStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.defaultInvalidMFRStep IS NOT NULL AND NEW.defaultInvalidMFRStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.approvedMountingType IS NOT NULL AND NEW.approvedMountingType = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved mounting type of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		END IF;  \n" +
                "        # mismatch programming require step  \n" +
                "		IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 74;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # part program ref des mapping require step  \n" +
                "		IF NEW.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 76;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "        # Mismatch Programming Statue step  \n" +
                "        IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 82;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # Mismatch Custom Part Rev step  \n" +
                "        IF NEW.mismatchCustpartRevStep IS NOT NULL AND NEW.mismatchCustpartRevStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 86;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		# Mismatch CPN and Custom Part Rev step  \n" +
                "        IF NEW.mismatchCPNandCustpartRevStep IS NOT NULL AND NEW.mismatchCPNandCustpartRevStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 87;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	 # MPN Mapping Pending in CPN  \n" +
                "        IF NEW.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 85;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerApproval IS NOT NULL THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;  \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				NULL, \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,  \n" +
                "				NULL, \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative,pErrorIsResearchStatus),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN  \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_RFQ_LineItem_BOM_History` AFTER INSERT ON `rfq_lineitems`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE newPartTypeName VARCHAR(50);  \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE newUOM VARCHAR(50);  \n" +
                "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE newProgramingStatus VARCHAR(100);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component_bomsetting WHERE refComponentID = New.partID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "	IF pLiveInternalVersion > 0 THEN  \n" +
                "  \n" +
                "		IF NEW.lineID IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Item(Line#)\",  \n" +
                "				NULL, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.cust_lineID IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Cust BOM Line#\",  \n" +
                "				NULL, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.qpa IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"QPA\",  \n" +
                "				NULL, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.refDesig IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"RefDes\",  \n" +
                "				NULL, CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.custPN IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"CPN\",  \n" +
                "				NULL, CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.isInstall IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Populate\",  \n" +
                "				NULL, CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isPurchase IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Buy\",  \n" +
                "				NULL,CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isNotRequiredKitAllocation IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Non-Kitting Item\",  \n" +
                "				NULL, CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isSupplierToBuy IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Supplier To Buy\",  \n" +
                "				NULL, CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerRev IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"CPN Rev\",  \n" +
                "				NULL, CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerDescription IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Comment\",  \n" +
                "				NULL, CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.numOfPosition IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Pin Per RefDes on PCB\",  \n" +
                "				NULL, CAST(TRIM(NEW.numOfPosition)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.numOfRows IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"No. of Rows\",  \n" +
                "				NULL, CAST(TRIM(NEW.numOfRows)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.dnpQty IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DNP Qty\",  \n" +
                "				NULL, CAST(TRIM(NEW.dnpQty)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.dnpDesig IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"DNP RefDes\",  \n" +
                "				NULL, CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF  NEW.uomID IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			IF NEW.uomID IS NOT NULL  \n" +
                "				THEN  \n" +
                "					SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
                "				ELSE  \n" +
                "					SET newUOM = '';  \n" +
                "			END IF;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"UOM\",  \n" +
                "				NULL,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF  NEW.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF NEW.substitutesAllow = 3 THEN  \n" +
                "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                "				SET newSubstitutesAllow = 'No';  \n" +
                "			ELSEIF NEW.substitutesAllow = 1 THEN  \n" +
                "				SET newSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "			IF newSubstitutesAllow != '' THEN  \n" +
                "				SET pIsUpdateRequired = TRUE;  \n" +
                "				INSERT INTO rfq_assembly_history  \n" +
                "					(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "					oldValue,newValue,changeVersion,  \n" +
                "					createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "				VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Subs Allowed\",  \n" +
                "					NULL,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "					fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF  NEW.programingStatus IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			IF NEW.programingStatus = 1 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 2 THEN  \n" +
                "				SET newProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 3 THEN  \n" +
                "				SET newProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF NEW.programingStatus = 4 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF NEW.programingStatus = 5 THEN  \n" +
                "				SET newProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF NEW.programingStatus = 0 THEN  \n" +
                "				SET newProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Requires Programming\",  \n" +
                "				NULL,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerPartDesc IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Customer Part Desc\",  \n" +
                "				NULL, CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.isBuyDNPQty IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, New.partID, \"Buy DNP Qty\",  \n" +
                "				NULL, (CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN NEW.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.qpaDesignatorStep IS NOT NULL AND NEW.qpaDesignatorStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 1;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.duplicateCPNStep IS NOT NULL AND NEW.duplicateCPNStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF NEW.requireMountingTypeStep IS NOT NULL AND NEW.requireMountingTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.requireFunctionalTypeStep IS NOT NULL AND NEW.requireFunctionalTypeStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictCPNUseInBOMStep IS NOT NULL AND NEW.restrictCPNUseInBOMStep = 1 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictCPNUseWithPermissionStep IS NOT NULL AND NEW.restrictCPNUseWithPermissionStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.restrictCPNUsePermanentlyStep IS NOT NULL AND NEW.restrictCPNUsePermanentlyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.dnpQPARefDesStep IS NOT NULL AND NEW.dnpQPARefDesStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 68;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND NEW.customerApprovalForDNPQPAREFDESStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF NEW.customerApprovalForDNPBuyStep IS NOT NULL AND NEW.customerApprovalForDNPBuyStep = 0 THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				NULL, \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.createdBy,NEW.createdBy,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF pIsUpdateRequired = TRUE THEN  \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_rfq_lineitem_programming_mapping_History` ;  \n" +
                "CREATE TRIGGER `Trg_AI_rfq_lineitem_programming_mapping_History` AFTER INSERT ON `rfq_lineitem_programming_mapping`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pIntenalVersionPrifix VARCHAR(100);  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component_bomsetting WHERE refComponentID = New.partID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pIntenalVersionPrifix  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pIntenalVersionPrifix ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pIntenalVersionPrifix ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF pLiveInternalVersion > 0 THEN  \n" +
                "	# Part Program REF DES Mapping  \n" +
                "        IF NEW.softwareRefDesg IS NOT NULL THEN  \n" +
                "			SET pIsUpdateRequired = TRUE;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID,  partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemID,  NEW.partID, \"Part Program Mapping\",  \n" +
                "				NULL, CONCAT(NEW.partRefDesg,' Mapped With ',NEW.softwareRefDesg),  CONCAT(pIntenalVersionPrifix,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "		IF pIsUpdateRequired = TRUE THEN  \n" +
                "			CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_Additional_Comment_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_Additional_Comment_BOM_History` AFTER UPDATE ON `rfq_lineitems_additional_comment`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pLiveInternalVersion INT(11);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component_bomsetting WHERE refComponentID = NEW.partID;  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "	IF IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0) THEN  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"rfq_lineitems_additional_comment\", NEW.id, NEW.rfqLineItemID, NEW.rfqAssyID, NEW.partID, \"Additional Comment\",  \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_additional_comment', NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE pPartID INT;  \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);  \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);  \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT partID INTO pPartID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component_bomsetting WHERE refComponentID = pPartID;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Supplier\",  \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"SPN\",  \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MFR\",  \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"MPN\",  \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF OLD.isDeleted != NEW.isDeleted THEN  \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN  \n" +
                "			SET pDeleteMessage =\"MPN \";  \n" +
                "		ELSE  \n" +
                "			SET pDeleteMessage = CONCAT(\"MPN \",NEW.mfgPN);  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Deleted\",  \n" +
                "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.deletedBy,NEW.deletedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Flextron Comment\",  \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, '') != IFNULL(NEW.badMfgPN, '') THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)  \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Bad MPN\",  \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgCodeStep IS NOT NULL AND (IFNULL(OLD.mfgCodeStep, -1) != IFNULL(NEW.mfgCodeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 2;  \n" +
                "		IF OLD.mfgCodeStep IS NOT NULL AND IFNULL(NEW.mfgCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgCodeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distVerificationStep IS NOT NULL AND (IFNULL(OLD.distVerificationStep, -1) != IFNULL(NEW.distVerificationStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 4;  \n" +
                "		IF OLD.distVerificationStep IS NOT NULL AND IFNULL(NEW.distVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distVerificationStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distCodeStep IS NOT NULL AND (IFNULL(OLD.distCodeStep, -1) != IFNULL(NEW.distCodeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 10;  \n" +
                "		IF OLD.distCodeStep IS NOT NULL AND IFNULL(NEW.distCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distCodeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgDistMappingStep IS NOT NULL AND (IFNULL(OLD.mfgDistMappingStep, -1) != IFNULL(NEW.mfgDistMappingStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;  \n" +
                "		IF OLD.mfgDistMappingStep IS NOT NULL AND IFNULL(NEW.mfgDistMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgDistMappingStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.getMFGPNStep IS NOT NULL AND (IFNULL(OLD.getMFGPNStep, 0) != IFNULL(NEW.getMFGPNStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;  \n" +
                "		IF OLD.getMFGPNStep IS NOT NULL AND IFNULL(NEW.getMFGPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.getMFGPNStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.obsoletePartStep IS NOT NULL AND (IFNULL(OLD.obsoletePartStep, -1) != IFNULL(NEW.obsoletePartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;  \n" +
                "		IF OLD.obsoletePartStep IS NOT NULL AND IFNULL(NEW.obsoletePartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.obsoletePartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgVerificationStep IS NOT NULL AND (IFNULL(OLD.mfgVerificationStep, -1) != IFNULL(NEW.mfgVerificationStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;  \n" +
                "		IF OLD.mfgVerificationStep IS NOT NULL AND IFNULL(NEW.mfgVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgVerificationStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.mfgGoodPartMappingStep, -1) != IFNULL(NEW.mfgGoodPartMappingStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;  \n" +
                "		IF OLD.mfgGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.mfgGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgGoodPartMappingStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mfgPNStep IS NOT NULL AND (IFNULL(OLD.mfgPNStep, -1) != IFNULL(NEW.mfgPNStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;  \n" +
                "		IF OLD.mfgPNStep IS NOT NULL AND IFNULL(NEW.mfgPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mfgPNStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distPNStep IS NOT NULL AND (IFNULL(OLD.distPNStep, -1) != IFNULL(NEW.distPNStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;  \n" +
                "		IF OLD.distPNStep IS NOT NULL AND IFNULL(NEW.distPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distPNStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.distGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.distGoodPartMappingStep, -1) != IFNULL(NEW.distGoodPartMappingStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;  \n" +
                "		IF OLD.distGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.distGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.distGoodPartMappingStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.nonRohsStep IS NOT NULL AND (IFNULL(OLD.nonRohsStep, -1) != IFNULL(NEW.nonRohsStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;  \n" +
                "		IF OLD.nonRohsStep IS NOT NULL AND IFNULL(NEW.nonRohsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.nonRohsStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.epoxyStep IS NOT NULL AND (IFNULL(OLD.epoxyStep, -1) != IFNULL(NEW.epoxyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;  \n" +
                "		IF OLD.epoxyStep IS NOT NULL AND IFNULL(NEW.epoxyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.epoxyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.invalidConnectorTypeStep IS NOT NULL AND (IFNULL(OLD.invalidConnectorTypeStep, -1) != IFNULL(NEW.invalidConnectorTypeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;  \n" +
                "		IF OLD.invalidConnectorTypeStep IS NOT NULL AND IFNULL(NEW.invalidConnectorTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.invalidConnectorTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND (IFNULL(OLD.duplicateMPNInSameLineStep, -1) != IFNULL(NEW.duplicateMPNInSameLineStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;  \n" +
                "		IF OLD.duplicateMPNInSameLineStep IS NOT NULL AND IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mismatchMountingTypeStep IS NOT NULL AND (IFNULL(OLD.mismatchMountingTypeStep, -1) != IFNULL(NEW.mismatchMountingTypeStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;  \n" +
                "		IF OLD.mismatchMountingTypeStep IS NOT NULL AND IFNULL(NEW.mismatchMountingTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchMountingTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND (IFNULL(OLD.mismatchFunctionalCategoryStep, -1) != IFNULL(NEW.mismatchFunctionalCategoryStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 28;  \n" +
                "		IF OLD.mismatchFunctionalCategoryStep IS NOT NULL AND IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mismatchCustomPartStep IS NOT NULL AND (IFNULL(OLD.mismatchCustomPartStep, -1) != IFNULL(NEW.mismatchCustomPartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 75;  \n" +
                "		IF OLD.mismatchCustomPartStep IS NOT NULL AND IFNULL(NEW.mismatchCustomPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchCustomPartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseWithPermissionStep, -1) != IFNULL(NEW.restrictUseWithPermissionStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;  \n" +
                "		IF OLD.restrictUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictUsePermanentlyStep, -1) != IFNULL(NEW.restrictUsePermanentlyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;  \n" +
                "		IF OLD.restrictUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictUsePermanentlyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUsePermanentlyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasWithPermissionStep, -1) != IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;  \n" +
                "		IF OLD.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasStep, -1) != IFNULL(NEW.restrictUseExcludingAliasStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;  \n" +
                "		IF OLD.restrictUseExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.pickupPadRequiredStep IS NOT NULL AND (IFNULL(OLD.pickupPadRequiredStep, -1) != IFNULL(NEW.pickupPadRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;  \n" +
                "		IF OLD.pickupPadRequiredStep IS NOT NULL AND IFNULL(NEW.pickupPadRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.pickupPadRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.matingPartRquiredStep IS NOT NULL AND (IFNULL(OLD.matingPartRquiredStep, -1) != IFNULL(NEW.matingPartRquiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;  \n" +
                "		IF OLD.matingPartRquiredStep IS NOT NULL AND IFNULL(NEW.matingPartRquiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.matingPartRquiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.functionalTestingRequiredStep IS NOT NULL AND (IFNULL(OLD.functionalTestingRequiredStep, -1) != IFNULL(NEW.functionalTestingRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;  \n" +
                "		IF OLD.functionalTestingRequiredStep IS NOT NULL AND IFNULL(NEW.functionalTestingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.functionalTestingRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF NEW.uomMismatchedStep IS NOT NULL AND (IFNULL(OLD.uomMismatchedStep, 0) != IFNULL(NEW.uomMismatchedStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;  \n" +
                "		IF OLD.uomMismatchedStep IS NOT NULL AND IFNULL(NEW.uomMismatchedStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.uomMismatchedStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.programingRequiredStep IS NOT NULL AND (IFNULL(OLD.programingRequiredStep, -1) != IFNULL(NEW.programingRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;  \n" +
                "		IF OLD.programingRequiredStep IS NOT NULL AND IFNULL(NEW.programingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.programingRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMStep, 0) != IFNULL(NEW.restrictUseInBOMStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;  \n" +
                "		IF OLD.restrictUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMWithPermissionStep, 0) != IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;  \n" +
                "		IF OLD.restrictUseInBOMWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasStep, 0) != IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;  \n" +
                "		IF OLD.restrictUseInBOMExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasWithPermissionStep, 0) != IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;  \n" +
                "		IF OLD.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.driverToolsRequiredStep IS NOT NULL AND (IFNULL(OLD.driverToolsRequiredStep, -1) != IFNULL(NEW.driverToolsRequiredStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;  \n" +
                "		IF OLD.driverToolsRequiredStep IS NOT NULL AND IFNULL(NEW.driverToolsRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.driverToolsRequiredStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND (IFNULL(OLD.mismatchNumberOfRowsStep, 0) != IFNULL(NEW.mismatchNumberOfRowsStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;  \n" +
                "		IF OLD.mismatchNumberOfRowsStep IS NOT NULL AND IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND (IFNULL(OLD.partPinIsLessthenBOMPinStep, -1) != IFNULL(NEW.partPinIsLessthenBOMPinStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;  \n" +
                "		IF OLD.partPinIsLessthenBOMPinStep IS NOT NULL AND IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.tbdPartStep IS NOT NULL AND (IFNULL(OLD.tbdPartStep, -1) != IFNULL(NEW.tbdPartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;  \n" +
                "		IF OLD.tbdPartStep IS NOT NULL AND IFNULL(NEW.tbdPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.tbdPartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.exportControlledStep IS NOT NULL AND (IFNULL(OLD.exportControlledStep, -1) != IFNULL(NEW.exportControlledStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;  \n" +
                "		IF OLD.exportControlledStep IS NOT NULL AND IFNULL(NEW.exportControlledStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.exportControlledStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.unknownPartStep IS NOT NULL AND (IFNULL(OLD.unknownPartStep, -1) != IFNULL(NEW.unknownPartStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;  \n" +
                "		IF OLD.unknownPartStep IS NOT NULL AND IFNULL(NEW.unknownPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.unknownPartStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.defaultInvalidMFRStep IS NOT NULL AND (IFNULL(OLD.defaultInvalidMFRStep, -1) != IFNULL(NEW.defaultInvalidMFRStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;  \n" +
                "		IF OLD.defaultInvalidMFRStep IS NOT NULL AND IFNULL(NEW.defaultInvalidMFRStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.defaultInvalidMFRStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF NEW.isUnlockApprovedPart IS NOT NULL AND (IFNULL(OLD.isUnlockApprovedPart, 0) != IFNULL(NEW.isUnlockApprovedPart, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN  \n" +
                "			SET pDeleteMessage =\"MPN \";  \n" +
                "		ELSE  \n" +
                "			SET pDeleteMessage = CONCAT(\"MPN \",NEW.mfgPN);  \n" +
                "		END IF;  \n" +
                "	 	IF OLD.isUnlockApprovedPart IS NOT NULL AND IFNULL(NEW.isUnlockApprovedPart, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "	 		INSERT INTO rfq_assembly_history  \n" +
                "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "	 			oldValue,newValue,changeVersion,  \n" +
                "	 			DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Unlock Part\",  \n" +
                "	 			\"Locked\", \"Unlocked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "	 			 CONCAT(pDeleteMessage,\" is Unlocked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "	 	ELSEIF IFNULL(NEW.isUnlockApprovedPart, 0) = 0 THEN  \n" +
                "	 		INSERT INTO rfq_assembly_history  \n" +
                "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "	 			oldValue,newValue,changeVersion,  \n" +
                "	 			DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)  \n" +
                "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, \"Lock part\",  \n" +
                "	 			\"Unlocked\", \"Locked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "	 			 CONCAT(pDeleteMessage,\" is Locked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 'N') != IFNULL(NEW.customerApproval, 'N') THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;  \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  pErrorDisplayName,  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),  \n" +
                "				 New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  # Mismatch Programming required step  \n" +
                "    IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND (OLD.mismatchRequiredProgrammingStep != NEW.mismatchRequiredProgrammingStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 74;  \n" +
                "		IF OLD.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchRequiredProgrammingStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "      # Part and Program ref des mapping required step  \n" +
                "    IF NEW.mappingPartProgramStep IS NOT NULL AND (OLD.mappingPartProgramStep != NEW.mappingPartProgramStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 76;  \n" +
                "		IF OLD.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mappingPartProgramStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    # Mismatch Programming status Step  \n" +
                "    IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND (OLD.mismatchProgrammingStatusStep != NEW.mismatchProgrammingStatusStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 82;  \n" +
                "		IF OLD.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchProgrammingStatusStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# Mismatch Custom Part Rev Step  \n" +
                "    IF NEW.mismatchCustpartRevStep IS NOT NULL AND (OLD.mismatchCustpartRevStep != NEW.mismatchCustpartRevStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 86;  \n" +
                "		IF OLD.mismatchCustpartRevStep IS NOT NULL AND NEW.mismatchCustpartRevStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchCustpartRevStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	# Mismatch CPN and Custom Part Rev Step  \n" +
                "    IF NEW.mismatchCPNandCustpartRevStep IS NOT NULL AND (OLD.mismatchCPNandCustpartRevStep != NEW.mismatchCPNandCustpartRevStep) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 87;  \n" +
                "		IF OLD.mismatchCPNandCustpartRevStep IS NOT NULL AND NEW.mismatchCPNandCustpartRevStep = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.mismatchCPNandCustpartRevStep = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approvedMountingType, 0) != IFNULL(NEW.approvedMountingType, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		IF IFNULL(NEW.approvedMountingType, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, 'Mounting Type and Functional Type Approval',  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Disapproved mounting type and functional type for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		ELSE  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID,  'Mounting Type and Functional Type Approval',  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved mounting type and functional type  of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    # Mismatch Programming status Step  \n" +
                "    IF NEW.isMPNAddedinCPN IS NOT NULL AND (OLD.isMPNAddedinCPN != NEW.isMPNAddedinCPN) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 85;  \n" +
                "		IF OLD.isMPNAddedinCPN IS NOT NULL AND NEW.isMPNAddedinCPN = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF NEW.isMPNAddedinCPN = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, NULL, pPartID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_RFQ_LineItem_BOM_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE oldPartTypeName VARCHAR(50);  \n" +
                "	DECLARE oldMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE newPartTypeName VARCHAR(50);  \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);  \n" +
                "	DECLARE oldUOM VARCHAR(50);  \n" +
                "	DECLARE newUOM VARCHAR(50);  \n" +
                "	DECLARE oldSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE newSubstitutesAllow VARCHAR(100);  \n" +
                "	DECLARE oldProgramingStatus VARCHAR(50);  \n" +
                "	DECLARE newProgramingStatus VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pErrorNarrative TEXT;  \n" +
                "	DECLARE pErrorDisplayName TEXT;  \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;  \n" +
                "	DECLARE pErrorCode VARCHAR(100);  \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component_bomsetting WHERE refComponentID = New.partID;  \n" +
                "  \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Item(Line#)\",  \n" +
                "			TRIM(OLD.lineID)+0, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.cust_lineID, 0) != IFNULL(NEW.cust_lineID, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Cust BOM Line#\",  \n" +
                "			OLD.cust_lineID, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN  \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA\",  \n" +
                "			TRIM(OLD.qpa)+0, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"RefDes\",  \n" +
                "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"CPN\",  \n" +
                "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "			(CASE WHEN OLD.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "			(CASE WHEN OLD.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isNotRequiredKitAllocation, 0) != IFNULL(NEW.isNotRequiredKitAllocation, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Non-Kitting Item\",  \n" +
                "			(CASE WHEN OLD.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isSupplierToBuy, 0) != IFNULL(NEW.isSupplierToBuy, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Supplier To Buy\",  \n" +
                "			(CASE WHEN OLD.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), (CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"CPN Rev\",  \n" +
                "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Comment\",  \n" +
                "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Pin Per RefDes on PCB\",  \n" +
                "			CAST(TRIM(OLD.numOfPosition)+0 AS CHAR), CAST(TRIM(NEW.numOfPosition)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.numOfRows, 0) != IFNULL(NEW.numOfRows, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"No. of Rows\",  \n" +
                "			CAST(TRIM(OLD.numOfRows)+0 AS CHAR), CAST(TRIM(NEW.numOfRows)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DNP QTY\",  \n" +
                "			CAST(TRIM(OLD.dnpQty)+0 AS CHAR), CAST(TRIM(NEW.dnpQty)+0 AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"DNP DES\",  \n" +
                "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN  \n" +
                "		IF OLD.uomID IS NOT NULL  \n" +
                "			THEN  \n" +
                "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;  \n" +
                "			ELSE  \n" +
                "				SET oldUOM = '';  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomID IS NOT NULL  \n" +
                "			THEN  \n" +
                "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;  \n" +
                "			ELSE  \n" +
                "				SET newUOM = '';  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"UOM\",  \n" +
                "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.substitutesAllow, 0) != IFNULL(NEW.substitutesAllow, 0) THEN  \n" +
                "		IF OLD.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF OLD.substitutesAllow = 3 THEN  \n" +
                "				SET oldSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF OLD.substitutesAllow = 2 THEN  \n" +
                "				SET oldSubstitutesAllow = 'No';  \n" +
                "			ELSEIF OLD.substitutesAllow = 1 THEN  \n" +
                "				SET oldSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF NEW.substitutesAllow IS NOT NULL THEN  \n" +
                "			IF NEW.substitutesAllow = 3 THEN  \n" +
                "				SET newSubstitutesAllow = 'Yes with Customer Approval';  \n" +
                "			ELSEIF NEW.substitutesAllow = 2 THEN  \n" +
                "				SET newSubstitutesAllow = 'No';  \n" +
                "			ELSEIF NEW.substitutesAllow = 1 THEN  \n" +
                "				SET newSubstitutesAllow = '';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Subs Allowed\",  \n" +
                "			oldSubstitutesAllow,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.programingStatus, 0) != IFNULL(NEW.programingStatus, 0) THEN  \n" +
                "		IF OLD.programingStatus IS NOT NULL THEN  \n" +
                "			IF OLD.programingStatus = 1 THEN  \n" +
                "				SET oldProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF OLD.programingStatus = 2 THEN  \n" +
                "				SET oldProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF OLD.programingStatus = 3 THEN  \n" +
                "				SET oldProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF OLD.programingStatus = 4 THEN  \n" +
                "				SET oldProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF OLD.programingStatus = 5 THEN  \n" +
                "				SET oldProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF OLD.programingStatus = 0 THEN  \n" +
                "				SET oldProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF NEW.programingStatus IS NOT NULL THEN  \n" +
                "			IF NEW.programingStatus = 1 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 2 THEN  \n" +
                "				SET newProgramingStatus = 'Post-Assy';  \n" +
                "			ELSEIF NEW.programingStatus = 3 THEN  \n" +
                "				SET newProgramingStatus = 'Cust Will Program';  \n" +
                "			ELSEIF NEW.programingStatus = 4 THEN  \n" +
                "				SET newProgramingStatus = 'Pre-Programmed';  \n" +
                "            ELSEIF NEW.programingStatus = 5 THEN  \n" +
                "				SET newProgramingStatus = 'Who Will Program';  \n" +
                "            ELSEIF NEW.programingStatus = 0 THEN  \n" +
                "				SET newProgramingStatus = 'N/A';  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Requires Programming\",  \n" +
                "			oldProgramingStatus,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Customer Part Desc\",  \n" +
                "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		INSERT INTO rfq_assembly_history  \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "			oldValue,newValue,changeVersion,  \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy DNP Qty\",  \n" +
                "			(CASE WHEN OLD.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN OLD.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN OLD.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN OLD.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
                "			(CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"YES\"  \n" +
                "				  WHEN NEW.isBuyDNPQty = \"N\" THEN \"NO\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"C\" THEN \"Customer Consigned\"  \n" +
                "                  WHEN NEW.isBuyDNPQty = \"P\" THEN \"YES PRE-ASSY PROGRAM\" END),  \n" +
                "                  CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF NEW.qpaDesignatorStep IS NOT NULL AND (IFNULL(OLD.qpaDesignatorStep, -1) != IFNULL(NEW.qpaDesignatorStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode  \n" +
                "        WHERE (CASE WHEN NEW.qpaDesignatorStep = 2 THEN `logicID` = 83  \n" +
                "        WHEN NEW.qpaDesignatorStep = 3 THEN `logicID` = 1  \n" +
                "        WHEN NEW.qpaDesignatorStep = 4 THEN `logicID` = 17  \n" +
                "        WHEN NEW.qpaDesignatorStep = 5 THEN `logicID` = 18 ELSE `logicID` = 83 END);  \n" +
                "		IF IFNULL(NEW.qpaDesignatorStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.qpaDesignatorStep, 1) != 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  /*  \n" +
                "	IF New.duplicateCPNStep IS NOT NULL AND (IFNULL(OLD.duplicateCPNStep, 0) != IFNULL(NEW.duplicateCPNStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 34;  \n" +
                "		IF OLD.duplicateCPNStep IS NOT NULL AND IFNULL(NEW.duplicateCPNStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.duplicateCPNStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "	IF New.requireMountingTypeStep IS NOT NULL AND (IFNULL(OLD.requireMountingTypeStep, 0) != IFNULL(NEW.requireMountingTypeStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 36;  \n" +
                "		IF OLD.requireMountingTypeStep IS NOT NULL AND IFNULL(NEW.requireMountingTypeStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.requireMountingTypeError, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.requireMountingTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.requireFunctionalTypeStep IS NOT NULL AND (IFNULL(OLD.requireFunctionalTypeStep, 0) != IFNULL(NEW.requireFunctionalTypeStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 37;  \n" +
                "		IF OLD.requireFunctionalTypeStep IS NOT NULL AND IFNULL(NEW.requireFunctionalTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.requireFunctionalTypeError, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.requireFunctionalTypeStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');  \n" +
                " 			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseInBOMStep, 0) != IFNULL(NEW.restrictCPNUseInBOMStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 59;  \n" +
                "		IF OLD.restrictCPNUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseWithPermissionStep, 0) != IFNULL(NEW.restrictCPNUseWithPermissionStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 57;  \n" +
                "		IF OLD.restrictCPNUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.restrictCPNUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUsePermanentlyStep, 0) != IFNULL(NEW.restrictCPNUsePermanentlyStep, 0)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 58;  \n" +
                "		IF OLD.restrictCPNUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 0 THEN  \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForQPAREFDESStep, 0) != IFNULL(NEW.customerApprovalForQPAREFDESStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 2 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or RefDes\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of QPA or RefDes: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"QPA or RefDes\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for QPA or RefDes Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForBuyStep, 0) != IFNULL(NEW.customerApprovalForBuyStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 3 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of Buy: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForBuyStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Buy\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for Buy Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForPopulateStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForPopulateStep, 0) != IFNULL(NEW.customerApprovalForPopulateStep, 0)) THEN  \n" +
                "		IF OLD.customerApprovalForPopulateStep IS NOT NULL AND IFNULL(NEW.customerApprovalForPopulateStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 4 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				CONCAT('Approved comments of Populate: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForPopulateStep, 0) = 0 THEN  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, \"Populate\",  \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				'Customer approval pending for Populate Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) != IFNULL(NEW.dnpQPARefDesStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  \n" +
                "        FROM rfq_lineitems_errorcode  \n" +
                "        WHERE (CASE WHEN NEW.dnpQPARefDesStep = 2 THEN `logicID` = 84  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 3 THEN `logicID` = 68  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 4 THEN `logicID` = 17  \n" +
                "        WHEN NEW.dnpQPARefDesStep = 5 THEN `logicID` = 71 ELSE `logicID` = 84 END);  \n" +
                "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) != 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPQPAREFDESStep, -1) != IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 69;  \n" +
                "		IF OLD.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 18 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "            INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				#@resuleErrorMessage,  \n" +
                "                CONCAT('Approved comments of DNP Qty RefDes: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.customerApprovalForDNPBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPBuyStep, -1) != IFNULL(NEW.customerApprovalForDNPBuyStep, -1)) THEN  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 70;  \n" +
                "		IF OLD.customerApprovalForDNPBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "		SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment rac WHERE rfqLineItemsID = new.id  AND errorCode = 17 ORDER BY  approvalDate DESC LIMIT 1;  \n" +
                "        INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				#@resuleErrorMessage,  \n" +
                "                CONCAT('Approved comments of Buy DNP Qty: ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 0 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "        	INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) = 5) THEN     -- 5 = Invalid desg step  \n" +
                "		SET pIsUpdateRequired = TRUE;  \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 71;  \n" +
                "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN  \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) = 5 THEN  \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');  \n" +
                "			INSERT INTO rfq_assembly_history  \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "				oldValue,newValue,changeVersion,  \n" +
                "				DESCRIPTION,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)  \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, NULL, NEW.partID, pErrorDisplayName,  \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN  \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_rfq_lineitem_programming_mapping_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_rfq_lineitem_programming_mapping_History` AFTER UPDATE ON `rfq_lineitem_programming_mapping`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pIsUpdateRequired BOOL;  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE pPartID INT;  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pIntenalVersionPrifix VARCHAR(100);  \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);  \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component_bomsetting WHERE refComponentID = New.partID;  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "		SELECT `values` INTO pIntenalVersionPrifix  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "	ELSE  \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pIntenalVersionPrifix ;  \n" +
                "		ELSE  \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pIntenalVersionPrifix ;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                " 	IF pLiveInternalVersion > 0 THEN  \n" +
                "		  # Part Program Mapping Change  \n" +
                "			IF IFNULL(OLD.softwareRefDesg, 0) != IFNULL(NEW.softwareRefDesg, 0) THEN  \n" +
                "				SET pIsUpdateRequired = TRUE;  \n" +
                "				INSERT INTO rfq_assembly_history  \n" +
                "					(tableName, refTransID, rfqLineItemID, partID, columnName,  \n" +
                "					oldValue,newValue,changeVersion,  \n" +
                "					createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "				VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemID, NEW.partID, \"Part Program Mapping\",  \n" +
                "					CONCAT(OLD.partRefDesg,' Mapped With ',OLD.softwareRefDesg), CONCAT(NEW.partRefDesg,' Mapped With ',NEW.softwareRefDesg), CONCAT(pIntenalVersionPrifix,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "					fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "			END IF;  \n" +
                "			# Delete Part Program mapping  \n" +
                "			IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0) AND NEW.isDeleted IS NOT NULL THEN  \n" +
                "				SET pDeleteMessage = 'Part Program Mapping ';  \n" +
                "				SET pIsUpdateRequired = TRUE;  \n" +
                "				INSERT INTO rfq_assembly_history  \n" +
                "					(tableName, refTransID, rfqLineItemID, partID, columnName,  \n" +
                "					oldValue,newValue,changeVersion,  \n" +
                "					createdAt,updatedAt,updatedBy,createdBy)  \n" +
                "				VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemID, NEW.partID, \"Part Program Mapping\",  \n" +
                "					CONCAT(OLD.partRefDesg,' Mapped With ',OLD.softwareRefDesg), CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pIntenalVersionPrifix,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
                "					fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "			END IF;  \n" +
                "			IF pIsUpdateRequired = TRUE THEN  \n" +
                "				CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);  \n" +
                "			END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Component_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_History` AFTER UPDATE ON `component`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "    DECLARE pLabelValue TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgPN,\"\") != IFNULL(NEW.mfgPN,\"\") THEN  \n" +
                "		SELECT IFNULL(`mfgType`, '') INTO `pLabelValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "        SET pLabelValue = (SELECT CASE WHEN pLabelValue = 'DIST' THEN 'Supplier PN' ELSE 'MFR PN' END);  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	VALUES(NEW.id,				'component',			pLabelValue,  \n" +
                "		CAST(OLD.mfgPN AS CHAR),	CAST(NEW.mfgPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPN'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.productionPN,\"\") != IFNULL(NEW.productionPN,\"\") THEN  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	VALUES(NEW.id,				'component',			'Production PN',  \n" +
                "		CAST(OLD.productionPN AS CHAR),	CAST(NEW.productionPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','productionPN'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                "	IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =OLD.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'MFR Code',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfgPNDescription,\"\") != IFNULL(NEW.mfgPNDescription,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Description',  \n" +
                "			CAST(OLD.mfgPNDescription AS CHAR),	CAST(NEW.mfgPNDescription AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPNDescription'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packageQty,\"\") != IFNULL(NEW.packageQty,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR SPQ',  \n" +
                "			CAST(OLD.packageQty AS CHAR),	CAST(NEW.packageQty AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'sixdigitunitprice');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.umidSPQ,\"\") != IFNULL(NEW.umidSPQ,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UMID SPQ',  \n" +
                "			CAST(OLD.umidSPQ AS CHAR),	CAST(NEW.umidSPQ AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'sixdigitunitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ltbDate,\"\") != IFNULL(NEW.ltbDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'LTB Date',  \n" +
                "			CAST(DATE(OLD.ltbDate) AS CHAR),	CAST(DATE(NEW.ltbDate) AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','ltbDate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.RoHSStatusID,\"\") != IFNULL(NEW.RoHSStatusID,\"\") THEN  \n" +
                "		IF OLD.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =OLD.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =NEW.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packaginggroupID,\"\") != IFNULL(NEW.packaginggroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging Group',  \n" +
                "			CAST(OLD.packaginggroupID AS CHAR),	CAST(NEW.packaginggroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','packaginggroupID'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted,\"\") != IFNULL(NEW.isDeleted,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Deleted',  \n" +
                "			NULL,				OLD.mfgPN,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPN'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.PIDCode,\"\") != IFNULL(NEW.PIDCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Code',  \n" +
                "			CAST(OLD.PIDCode AS CHAR),	CAST(NEW.PIDCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','PIDCode'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isGoodPart,\"\") != IFNULL(NEW.isGoodPart,\"\") THEN  \n" +
                "		IF OLD.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN OLD.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN OLD.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN NEW.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN NEW.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Correct Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsgroupID,\"\") != IFNULL(NEW.rohsgroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Group',  \n" +
                "			CAST(OLD.rohsgroupID AS CHAR),	CAST(NEW.rohsgroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rohsgroupID'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.leadTime,\"\") != IFNULL(NEW.leadTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Standard Lead Time',  \n" +
                "			CAST(OLD.leadTime AS CHAR),	CAST(NEW.leadTime AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','leadTime'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*IF IFNULL(OLD.packaging,\"\") != IFNULL(NEW.packaging,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			CAST(OLD.packaging AS CHAR),	CAST(NEW.packaging AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;*/  \n" +
                "	IF IFNULL(OLD.noOfPosition,\"\") != IFNULL(NEW.noOfPosition,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pin Count',  \n" +
                "			CAST(OLD.noOfPosition AS CHAR),	CAST(NEW.noOfPosition AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfPosition'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.countryOfOrigin,\"\") != IFNULL(NEW.countryOfOrigin,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Country Of Origin',  \n" +
                "			CAST(OLD.countryOfOrigin AS CHAR),	CAST(NEW.countryOfOrigin AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','countryOfOrigin'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uom,\"\") != IFNULL(NEW.uom,\"\") THEN  \n" +
                "		IF OLD.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeID,\"\") != IFNULL(NEW.mountingTypeID,\"\") THEN  \n" +
                "		IF OLD.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =OLD.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =NEW.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partPackage,\"\") != IFNULL(NEW.partPackage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/ Case (Shape) (External)',  \n" +
                "			CAST(OLD.partPackage AS CHAR),	CAST(NEW.partPackage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','partPackage'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.partPackageID,\"\") != IFNULL(NEW.partPackageID,\"\") THEN  \n" +
                "		IF OLD.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =OLD.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =NEW.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/Case (Shape)',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.deviceMarking,\"\") != IFNULL(NEW.deviceMarking,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Device Marking',  \n" +
                "			CAST(OLD.deviceMarking AS CHAR),	CAST(NEW.deviceMarking AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','deviceMarking'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minimum,\"\") != IFNULL(NEW.minimum,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min',  \n" +
                "			CAST(OLD.minimum AS CHAR),	CAST(NEW.minimum AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','minimum'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mult,\"\") != IFNULL(NEW.mult,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mult',  \n" +
                "			CAST(OLD.mult AS CHAR),		CAST(NEW.mult AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mult'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uomText,\"\") != IFNULL(NEW.uomText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM (External)',  \n" +
                "			CAST(OLD.uomText AS CHAR),	CAST(NEW.uomText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','uomText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.htsCode,\"\") != IFNULL(NEW.htsCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'HTS Code',  \n" +
                "			CAST(OLD.htsCode AS CHAR),	CAST(NEW.htsCode AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','htsCode'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.category,\"\") != IFNULL(NEW.category,\"\") THEN  \n" +
                "		IF OLD.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsText,\"\") != IFNULL(NEW.rohsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS (External)',  \n" +
                "			CAST(OLD.rohsText AS CHAR),	CAST(NEW.rohsText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rohsText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.dataSheetLink,\"\") != IFNULL(NEW.dataSheetLink,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Data Sheet Link (Set Default)',  \n" +
                "			CAST(OLD.dataSheetLink AS CHAR),	CAST(NEW.dataSheetLink AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','dataSheetLink'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.replacementPartID,\"\") != IFNULL(NEW.replacementPartID,\"\") THEN  \n" +
                "		IF OLD.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM COMPONENT  \n" +
                "			WHERE id =OLD.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM COMPONENT  \n" +
                "			WHERE id =NEW.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Corrected Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eolDate,\"\") != IFNULL(NEW.eolDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'EOL Date',  \n" +
                "			CAST(DATE(OLD.eolDate) AS CHAR),	CAST(DATE(NEW.eolDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','eolDate'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.reversalDate,\"\") != IFNULL(NEW.reversalDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Reversal Date',  \n" +
                "			CAST(DATE(OLD.reversalDate) AS CHAR),	CAST(DATE(NEW.reversalDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','reversalDate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.value,\"\") != IFNULL(NEW.value,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Value',  \n" +
                "			CAST(OLD.value AS CHAR),	CAST(NEW.value AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','value'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.tolerance,\"\") != IFNULL(NEW.tolerance,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Tolerance',  \n" +
                "			CAST(OLD.tolerance AS CHAR),	CAST(NEW.tolerance AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','tolerance'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minOperatingTemp,\"\") != IFNULL(NEW.minOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min Operating Temperature',  \n" +
                "			CAST(OLD.minOperatingTemp AS CHAR),	CAST(NEW.minOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','minOperatingTemp'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxOperatingTemp,\"\") != IFNULL(NEW.maxOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max Operating Temperature',  \n" +
                "			CAST(OLD.maxOperatingTemp AS CHAR),	CAST(NEW.maxOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','maxOperatingTemp'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryID,\"\") != IFNULL(NEW.functionalCategoryID,\"\") THEN  \n" +
                "		IF OLD.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =OLD.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =NEW.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.weight,\"\") != IFNULL(NEW.weight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Weight',  \n" +
                "			CAST(OLD.weight AS CHAR),	CAST(NEW.weight AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','weight'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.length,\"\") != IFNULL(NEW.length,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Length',  \n" +
                "			CAST(OLD.length AS CHAR),	CAST(NEW.length AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.width,\"\") != IFNULL(NEW.width,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Width',  \n" +
                "			CAST(OLD.width AS CHAR),	CAST(NEW.width AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.height,\"\") != IFNULL(NEW.height,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height',  \n" +
                "			CAST(OLD.height AS CHAR),	CAST(NEW.height AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.saftyStock,\"\") != IFNULL(NEW.saftyStock,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min. Count(Qty) (Safety Stock)',  \n" +
                "			CAST(OLD.saftyStock AS CHAR),	CAST(NEW.saftyStock AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','saftyStock'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.specialNote,\"\") != IFNULL(NEW.specialNote,\"\") THEN  \n" +
                "		INSERT INTO common_longtext_history  \n" +
                "			(refTransId,				Colname,				Oldval,  \n" +
                "			 Newval,					valueDataType,				Tablename,  \n" +
                "			 createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
                "			createByRoleId,		updateByRoleId )  \n" +
                "		 VALUES(NEW.id,					'Special Note',			CAST(OLD.specialNote AS CHAR),  \n" +
                "				 CAST(NEW.specialNote AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'specialNote'), 'component',  \n" +
                "				 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "				OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.heightText,\"\") != IFNULL(NEW.heightText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height - Seated (Max)',  \n" +
                "			CAST(OLD.heightText AS CHAR),	CAST(NEW.heightText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','heightText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatus,\"\") != IFNULL(NEW.partStatus,\"\") THEN  \n" +
                "		IF OLD.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = OLD.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = NEW.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatusText,\"\") != IFNULL(NEW.partStatusText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Status (External)',  \n" +
                "			CAST(OLD.partStatusText AS CHAR),	CAST(NEW.partStatusText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','partStatusText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isPIDManual,\"\") != IFNULL(NEW.isPIDManual,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Manual',  \n" +
                "			CAST(OLD.isPIDManual AS CHAR),	CAST(NEW.isPIDManual AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','isPIDManual'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.feature,\"\") != IFNULL(NEW.feature,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Feature',  \n" +
                "			CAST(OLD.feature AS CHAR),	CAST(NEW.feature AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','feature'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryText,\"\") != IFNULL(NEW.functionalCategoryText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type (External)',  \n" +
                "			CAST(OLD.functionalCategoryText AS CHAR),	CAST(NEW.functionalCategoryText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','functionalCategoryText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeText,\"\") != IFNULL(NEW.mountingTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type (External)',  \n" +
                "			CAST(OLD.mountingTypeText AS CHAR),	CAST(NEW.mountingTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mountingTypeText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxPriceLimit,\"\") != IFNULL(NEW.maxPriceLimit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Price Limit',  \n" +
                "			CAST(OLD.maxPriceLimit AS CHAR),	CAST(NEW.maxPriceLimit AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'amount');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.selfLifeDays,\"\") != IFNULL(NEW.selfLifeDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Self Life Days',  \n" +
                "			CAST(OLD.selfLifeDays AS CHAR),	CAST(NEW.selfLifeDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','selfLifeDays'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCustom,\"\") != IFNULL(NEW.isCustom,\"\") THEN  \n" +
                "		IF OLD.isCustom IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCustom IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Custom MFG Part',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rev,\"\") != IFNULL(NEW.rev,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Rev',  \n" +
                "			CAST(OLD.rev AS CHAR),		CAST(NEW.rev AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rev'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mslID,\"\") != IFNULL(NEW.mslID,\"\") THEN  \n" +
                "		IF OLD.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pOldValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =OLD.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pNewValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =NEW.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MSL',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connecterTypeID,\"\") != IFNULL(NEW.connecterTypeID,\"\") THEN  \n" +
                "		IF OLD.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =OLD.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =NEW.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connectorTypeText,\"\") != IFNULL(NEW.connectorTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type (External)',  \n" +
                "			CAST(OLD.connectorTypeText AS CHAR),		CAST(NEW.connectorTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','connectorTypeText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.costCategoryID,\"\") != IFNULL(NEW.costCategoryID,\"\") THEN  \n" +
                "		IF OLD.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =OLD.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =NEW.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Cost Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxQtyonHand,\"\") != IFNULL(NEW.maxQtyonHand,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Qty on Hand',  \n" +
                "			CAST(OLD.maxQtyonHand AS CHAR),		CAST(NEW.maxQtyonHand AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'sixdigitunitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.noOfRows,\"\") != IFNULL(NEW.noOfRows,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'No Of Rows',  \n" +
                "			CAST(OLD.noOfRows AS CHAR),		CAST(NEW.noOfRows AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfRows'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.bookValue,\"\") != IFNULL(NEW.bookValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Book Value',  \n" +
                "			CAST(OLD.bookValue AS CHAR),		CAST(NEW.bookValue AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','bookValue'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.voltage,\"\") != IFNULL(NEW.voltage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Voltage',  \n" +
                "			CAST(OLD.voltage AS CHAR),		CAST(NEW.voltage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','voltage'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.operatingTemp,\"\") != IFNULL(NEW.operatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Operating Temperature',  \n" +
                "			CAST(OLD.operatingTemp AS CHAR), CAST(NEW.operatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','operatingTemp'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.powerRating,\"\") != IFNULL(NEW.powerRating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Power (Watts)',  \n" +
                "			CAST(OLD.powerRating AS CHAR), CAST(NEW.powerRating AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','powerRating'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitch,\"\") != IFNULL(NEW.pitch,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch (Unit in mm)',  \n" +
                "			CAST(OLD.pitch AS CHAR), 	CAST(NEW.pitch AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pitch'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitchMating,\"\") != IFNULL(NEW.pitchMating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch Mating(Unit in mm)',  \n" +
                "			CAST(OLD.pitchMating AS CHAR), 	CAST(NEW.pitchMating AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pitchMating'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedOverRunPercentagePerBuild,\"\") != IFNULL(NEW.plannedOverRunPercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build) (%)',  \n" +
                "			CAST(OLD.plannedOverRunPercentagePerBuild AS CHAR), 	CAST(NEW.plannedOverRunPercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.nickName,\"\") != IFNULL(NEW.nickName,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Nickname',  \n" +
                "			CAST(OLD.nickName AS CHAR), 	CAST(NEW.nickName AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','nickName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.restrictUSEwithpermission,\"\") != IFNULL(NEW.restrictUSEwithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Restrict Use Including Packaging Alias (With Permission)',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.sizeDimension,\"\") != IFNULL(NEW.sizeDimension,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Size/Dimension',  \n" +
                "			CAST(OLD.sizeDimension AS CHAR), 	CAST(NEW.sizeDimension AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','sizeDimension'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedValuePerBuild,\"\") != IFNULL(NEW.plannedValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build)',  \n" +
                "			CAST(OLD.plannedValuePerBuild AS CHAR), 	CAST(NEW.plannedValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','plannedValuePerBuild'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.scrapValuePerBuild,\"\") != IFNULL(NEW.scrapValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build)',  \n" +
                "			CAST(OLD.scrapValuePerBuild AS CHAR), 	CAST(NEW.scrapValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','scrapValuePerBuild'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.scrapRatePercentagePerBuild,\"\") != IFNULL(NEW.scrapRatePercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build) (%)',  \n" +
                "			CAST(OLD.scrapRatePercentagePerBuild AS CHAR), 	CAST(NEW.scrapRatePercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.restrictUsePermanently,\"\") != IFNULL(NEW.restrictUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',			'Restrict Use Including Packaging Alias (Permanently)',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.customerID,\"\") != IFNULL(NEW.customerID,\"\") THEN  \n" +
                "		IF OLD.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =OLD.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =NEW.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Customer',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eau,\"\") != IFNULL(NEW.eau,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'EAU',  \n" +
                "			CAST(OLD.eau AS CHAR), 	CAST(NEW.eau AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','eau'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.assyCode,\"\") != IFNULL(NEW.assyCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Assy Code',  \n" +
                "			CAST(OLD.assyCode AS CHAR), 	CAST(NEW.assyCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','assyCode'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pcbPerArray,\"\") != IFNULL(NEW.pcbPerArray,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'PCB Per Array',  \n" +
                "			CAST(OLD.pcbPerArray AS CHAR), 	CAST(NEW.pcbPerArray AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pcbPerArray'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficient,\"\") != IFNULL(NEW.temperatureCoefficient,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient',  \n" +
                "			CAST(OLD.temperatureCoefficient AS CHAR), 	CAST(NEW.temperatureCoefficient AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficient'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientValue,\"\") != IFNULL(NEW.temperatureCoefficientValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Value',  \n" +
                "			CAST(OLD.temperatureCoefficientValue AS CHAR), 	CAST(NEW.temperatureCoefficientValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficientValue'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientUnit,\"\") != IFNULL(NEW.temperatureCoefficientUnit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Unit',  \n" +
                "			CAST(OLD.temperatureCoefficientUnit AS CHAR), 	CAST(NEW.temperatureCoefficientUnit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficientUnit'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCPN,\"\") != IFNULL(NEW.isCPN,\"\") THEN  \n" +
                "		IF OLD.isCPN IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCPN IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'CPN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.matingPartRquired,\"\") != IFNULL(NEW.matingPartRquired,\"\") THEN  \n" +
                "		IF OLD.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mating Part',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.driverToolRequired,\"\") != IFNULL(NEW.driverToolRequired,\"\") THEN  \n" +
                "		IF OLD.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Driver Tool',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pickupPadRequired,\"\") != IFNULL(NEW.pickupPadRequired,\"\") THEN  \n" +
                "		IF OLD.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Pick up Pad',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.programingRequired,\"\") != IFNULL(NEW.programingRequired,\"\") THEN  \n" +
                "		IF OLD.programingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.programingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Programming',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTestingRequired,\"\") != IFNULL(NEW.functionalTestingRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Testing',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.custAssyPN,\"\") != IFNULL(NEW.custAssyPN,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part#',  \n" +
                "			CAST(OLD.custAssyPN AS CHAR), 	CAST(NEW.custAssyPN AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','custAssyPN'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partType,\"\") != IFNULL(NEW.partType,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Type',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                      'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTypePartRequired,\"\") != IFNULL(NEW.functionalTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.functionalTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.functionalTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Type Parts',  \n" +
                "			pOldValue, pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypePartRequired,\"\") != IFNULL(NEW.mountingTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.mountingTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.mountingTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.mountingTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.mountingTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mounting Type Parts',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shelfLifeAcceptanceDays,\"\") != IFNULL(NEW.shelfLifeAcceptanceDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Days)',  \n" +
                "			CAST(OLD.shelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.shelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','shelfLifeAcceptanceDays'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.shelfListDaysThresholdPercentage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Threshold(%))',  \n" +
                "			CAST(OLD.shelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.shelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.maxShelfLifeAcceptanceDays,\"\") != IFNULL(NEW.maxShelfLifeAcceptanceDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Days)',  \n" +
                "			CAST(OLD.maxShelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.maxShelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','maxShelfLifeAcceptanceDays'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.maxShelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.maxShelfListDaysThresholdPercentage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Threshold(%))',  \n" +
                "			CAST(OLD.maxShelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.maxShelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shelfLifeDateType,\"\") != IFNULL(NEW.shelfLifeDateType,\"\") THEN  \n" +
                "		SELECT (CASE WHEN (OLD.shelfLifeDateType = 'N') THEN 'None'  \n" +
                "					WHEN (OLD.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                "                    WHEN (OLD.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                "                    ELSE '' END) INTO `pOldValue`   ;  \n" +
                "		SELECT (CASE WHEN (NEW.shelfLifeDateType = 'N') THEN 'None'  \n" +
                "					WHEN (NEW.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                "                    WHEN (NEW.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                "                    ELSE '' END) INTO `pNewValue`   ;  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Shelf Life Date Typ',  \n" +
                "			pOldValue, 	pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.color,\"\") != IFNULL(NEW.color,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Color',  \n" +
                "			CAST(OLD.color AS CHAR), 	CAST(NEW.color AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','color'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.refSupplierMfgpnComponentID,\"\") != IFNULL(NEW.refSupplierMfgpnComponentID,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "				FROM COMPONENT  \n" +
                "			WHERE id =OLD.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "				FROM COMPONENT  \n" +
                "			WHERE id = NEW.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR PN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.imageURL,\"\") != IFNULL(NEW.imageURL,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Image URL',  \n" +
                "			CAST(OLD.imageURL AS CHAR), 	CAST(NEW.imageURL AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','imageURL'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.businessRisk,\"\") != IFNULL(NEW.businessRisk,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Business Risk',  \n" +
                "			CAST(OLD.businessRisk AS CHAR), 	CAST(NEW.businessRisk AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','businessRisk'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,\"\") != IFNULL(NEW.packagingID,\"\") THEN  \n" +
                "		IF OLD.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =OLD.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =NEW.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isTemperatureSensitive,\"\") != IFNULL(NEW.isTemperatureSensitive,\"\") THEN  \n" +
                "		IF OLD.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Sensitive Data',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.unit,\"\") != IFNULL(NEW.unit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit',  \n" +
                "			CAST(OLD.unit AS CHAR), 	CAST(NEW.unit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.grossWeight,\"\") != IFNULL(NEW.grossWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight',  \n" +
                "			CAST(OLD.grossWeight AS CHAR), 	CAST(NEW.grossWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingWeight,\"\") != IFNULL(NEW.packagingWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Net Weight',  \n" +
                "			CAST(OLD.packagingWeight AS CHAR), 	CAST(NEW.packagingWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.epicorType,\"\") != IFNULL(NEW.epicorType,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Purchase Type',  \n" +
                "			CAST(OLD.epicorType AS CHAR), 	CAST(NEW.epicorType AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','epicorType'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.grossWeightUom,\"\") != IFNULL(NEW.grossWeightUom,\"\") THEN  \n" +
                "		IF OLD.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight (UOM)',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.packagingWeightUom,\"\") != IFNULL(NEW.packagingWeightUom,\"\") THEN  \n" +
                "		IF OLD.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Net Weight (UOM)',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.price,\"\") != IFNULL(NEW.price,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Tentative Price Ea($)',  \n" +
                "			CAST(OLD.price AS CHAR),	CAST(NEW.price AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'amout');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfPositionText,\"\") != IFNULL(NEW.noOfPositionText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pin Count (External)',  \n" +
                "			OLD.noOfPositionText,	NEW.noOfPositionText,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfPositionText'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.uomClassID,\"\") != IFNULL(NEW.uomClassID,\"\") THEN  \n" +
                "		IF OLD.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =OLD.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =NEW.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM Class',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfRowsText,\"\") != IFNULL(NEW.noOfRowsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'No. of Rows (External)',  \n" +
                "			OLD.noOfRowsText,		NEW.noOfRowsText,	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfRowsText'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rohsDeviation,\"\") != IFNULL(NEW.rohsDeviation,\"\") THEN  \n" +
                "		IF OLD.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN OLD.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN OLD.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN NEW.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN NEW.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'RoHS Deviation',  \n" +
                "			pOldValue,				pNewValue,			OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.alertExpiryDays,\"\") != IFNULL(NEW.alertExpiryDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Alert Days before Expiry Date',  \n" +
                "			CAST(OLD.alertExpiryDays AS CHAR),	CAST(NEW.alertExpiryDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','alertExpiryDays'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.umidVerificationRequire,\"\") != IFNULL(NEW.umidVerificationRequire,\"\") THEN  \n" +
                "		IF OLD.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Require Supervisor Approval (Before Use)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.totalSolderPoints,\"\") != IFNULL(NEW.totalSolderPoints,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Total Solder Points',  \n" +
                "			CAST(OLD.totalSolderPoints AS CHAR),	CAST(NEW.totalSolderPoints AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','totalSolderPoints'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.trackSerialNumber,\"\") != IFNULL(NEW.trackSerialNumber,\"\") THEN  \n" +
                "		IF OLD.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Track Serial Numbers',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUsePermanently,\"\") != IFNULL(NEW.restrictPackagingUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (Permanently)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUseWithpermission,\"\") != IFNULL(NEW.restrictPackagingUseWithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (With Permission)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rfqOnly,\"\") != IFNULL(NEW.rfqOnly,\"\") THEN  \n" +
                "		IF OLD.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'RFQ Only',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCloudApiUpdateAttribute,\"\") != IFNULL(NEW.isCloudApiUpdateAttribute,\"\") THEN  \n" +
                "		IF OLD.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Cloud API update',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isAutoVerificationOfAllAssemblyParts,\"\") != IFNULL(NEW.isAutoVerificationOfAllAssemblyParts,\"\") THEN  \n" +
                "		IF OLD.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Bypass Machine Setup Verification (Only for Assembly)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.purchasingComment,\"\") != IFNULL(NEW.purchasingComment,\"\") THEN  \n" +
                "		INSERT INTO common_longtext_history  \n" +
                "			(refTransId,				Colname,				Oldval,  \n" +
                "			 Newval,					valueDataType,				Tablename,  \n" +
                "			 createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
                "			createByRoleId,		updateByRoleId )  \n" +
                "		 VALUES(NEW.id,					'MISC Comment',			CAST(OLD.purchasingComment AS CHAR),  \n" +
                "				 CAST(NEW.purchasingComment AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'purchasingComment'), 'component',  \n" +
                "				 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "				OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.predictedObsolescenceYear,\"\") != IFNULL(NEW.predictedObsolescenceYear,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Predicted Obsolescence Year',  \n" +
                "			CAST(OLD.predictedObsolescenceYear AS CHAR),	CAST(NEW.predictedObsolescenceYear AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','predictedObsolescenceYear'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.requiredTestTime,\"\") != IFNULL(NEW.requiredTestTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Testing Time',  \n" +
                "			CAST(OLD.requiredTestTime AS CHAR),	CAST(NEW.requiredTestTime AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','requiredTestTime'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.detailDescription,\"\") != IFNULL(NEW.detailDescription,\"\") THEN  \n" +
                "     INSERT INTO common_longtext_history  \n" +
                "		(refTransId,				Colname,				Oldval,  \n" +
                "		 Newval,					valueDataType,				Tablename,  \n" +
                "         createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId )  \n" +
                "	 VALUES(NEW.id,					'Detailed Description',			CAST(OLD.detailDescription AS CHAR),  \n" +
                "			 CAST(NEW.detailDescription AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'detailDescription'), 'component',  \n" +
                "			 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "			OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.obsoleteDate,\"\") != IFNULL(NEW.obsoleteDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Obsolete Date',  \n" +
                "			CAST(DATE(OLD.obsoleteDate) AS CHAR),	CAST(DATE(NEW.obsoleteDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','obsoleteDate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfrNameText,\"\") != IFNULL(NEW.mfrNameText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR (External)',  \n" +
                "			CAST(OLD.mfrNameText AS CHAR),	CAST(NEW.mfrNameText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfrNameText'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.assemblyType,0) != IFNULL(NEW.assemblyType,0) THEN  \n" +
                "		IF OLD.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =OLD.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =NEW.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Assy Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF ((OLD.isWaterSoluble != NEW.isWaterSoluble)  \n" +
                "			OR (OLD.isNoClean != NEW.isNoClean)  \n" +
                "            OR (OLD.isFluxNotApplicable != NEW.isFluxNotApplicable))  \n" +
                "    THEN  \n" +
                "		-- Create string for Old configure value for Flux Type  \n" +
                "		SET pOldValue = '';  \n" +
                "        IF(OLD.isFluxNotApplicable = 1) THEN  \n" +
                "			SET pOldValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isNoClean = 1) THEN  \n" +
                "			SET pOldValue = CONCAT((CASE WHEN (pOldValue != '') THEN CONCAT(pOldValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isWaterSoluble = 1) THEN  \n" +
                "			SET pOldValue = CONCAT((CASE WHEN (pOldValue != '') THEN CONCAT(pOldValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        -- Create string for New configure value for Flux Type  \n" +
                "        SET pNewValue = '';  \n" +
                "        IF(NEW.isFluxNotApplicable = 1) THEN  \n" +
                "			SET pNewValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isNoClean = 1) THEN  \n" +
                "			SET pNewValue = CONCAT((CASE WHEN (pNewValue != '') THEN CONCAT(pNewValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isWaterSoluble = 1) THEN  \n" +
                "			SET pNewValue = CONCAT((CASE WHEN (pNewValue != '') THEN CONCAT(pNewValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Flux Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isHazmatMaterial,\"\") != IFNULL(NEW.isHazmatMaterial,\"\") THEN  \n" +
                "		IF OLD.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Hazmat Material',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isReceiveBulkItem,\"\") != IFNULL(NEW.isReceiveBulkItem,\"\") THEN  \n" +
                "		IF OLD.isReceiveBulkItem IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isReceiveBulkItem = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isReceiveBulkItem = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isReceiveBulkItem IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isReceiveBulkItem = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isReceiveBulkItem = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Receive as a Bulk item',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.internalReference,\"\") != IFNULL(NEW.internalReference,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Internal Ref#',  \n" +
                "			CAST(OLD.internalReference AS CHAR),	CAST(NEW.internalReference AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','internalReference'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.purchaseacctId,\"\") != IFNULL(NEW.purchaseacctId,\"\") THEN  \n" +
                "		IF OLD.purchaseacctId IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`acct_name`, '') INTO `pOldValue`  \n" +
                "			FROM acct_acctmst  \n" +
                "			WHERE acct_id =OLD.purchaseacctId  \n" +
                "			ORDER BY acct_id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.purchaseacctId IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`acct_name`, '') INTO `pNewValue`  \n" +
                "			FROM acct_acctmst  \n" +
                "			WHERE acct_id =NEW.purchaseacctId  \n" +
                "			ORDER BY acct_id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Purchase COA',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.salesacctId,\"\") != IFNULL(NEW.salesacctId,\"\") THEN  \n" +
                "		IF OLD.salesacctId IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`acct_name`, '') INTO `pOldValue`  \n" +
                "			FROM acct_acctmst  \n" +
                "			WHERE acct_id =OLD.salesacctId  \n" +
                "			ORDER BY acct_id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.salesacctId IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`acct_name`, '') INTO `pNewValue`  \n" +
                "			FROM acct_acctmst  \n" +
                "			WHERE acct_id =NEW.salesacctId  \n" +
                "			ORDER BY acct_id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Sales COA',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.frequency,\"\") != IFNULL(NEW.frequency,\"\") THEN  \n" +
                "		SET pOldValue = (CASE WHEN OLD.frequency = 1 THEN \"Every\"  \n" +
                "							  WHEN OLD.frequency = 1 THEN \"First\"  \n" +
                "                              WHEN OLD.frequency = 1 THEN \"Last\"  \n" +
                "                              ELSE '' END);  \n" +
                "  \n" +
                "        SET pNewValue = (CASE WHEN NEW.frequency = 1 THEN \"Every\"  \n" +
                "							  WHEN NEW.frequency = 1 THEN \"First\"  \n" +
                "                              WHEN NEW.frequency = 1 THEN \"Last\"  \n" +
                "                              ELSE '' END);  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Charge Frequency',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.frequencyType,\"\") != IFNULL(NEW.frequencyType,\"\") THEN  \n" +
                "		SET pOldValue = (CASE WHEN OLD.frequencyType = 1 THEN \"Release\"  \n" +
                "							  WHEN OLD.frequencyType = 1 THEN \"Shipment\"  \n" +
                "                              ELSE '' END);  \n" +
                "  \n" +
                "        SET pNewValue = (CASE WHEN NEW.frequencyType = 1 THEN \"Release\"  \n" +
                "							  WHEN NEW.frequencyType = 1 THEN \"Shipment\"  \n" +
                "                              ELSE '' END);  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Charge Frequency Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Component_Bomsetting` ;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_Bomsetting` AFTER UPDATE ON `component_bomsetting`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "        DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.liveVersion,\"\") != IFNULL(NEW.liveVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.refComponentID,				'component',			'Live Version',  \n" +
                "			CAST(OLD.liveVersion AS CHAR), 	CAST(NEW.liveVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component_bomsetting','liveVersion'));  \n" +
                "  \n" +
                "        UPDATE COMPONENT SET liveVersion= NEW.liveVersion WHERE id=NEW.refComponentID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.liveInternalVersion,\"\") != IFNULL(NEW.liveInternalVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.refComponentID,				'component',			'Live Internal Version',  \n" +
                "			CAST(OLD.liveInternalVersion AS CHAR), 	CAST(NEW.liveInternalVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component_bomsetting','liveInternalVersion'));  \n" +
                "        UPDATE COMPONENT SET liveInternalVersion= NEW.liveInternalVersion WHERE id=NEW.refComponentID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBOMVerified,\"\") != IFNULL(NEW.isBOMVerified,\"\") THEN  \n" +
                "		IF OLD.isBOMVerified IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.isBOMVerified = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.isBOMVerified = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.isBOMVerified IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isBOMVerified = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isBOMVerified = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.refComponentID,				'component',			'BOM Verified',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "         UPDATE COMPONENT SET isBOMVerified= NEW.isBOMVerified WHERE id=NEW.refComponentID;  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.exteranalAPICallStatus,\"\") != IFNULL(NEW.exteranalAPICallStatus,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.refComponentID,				'component',			'Exteranal API Call Status',  \n" +
                "			CAST(OLD.exteranalAPICallStatus AS CHAR), 	CAST(NEW.exteranalAPICallStatus AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component_bomsetting','exteranalAPICallStatus'));  \n" +
                "        UPDATE COMPONENT SET exteranalAPICallStatus= NEW.exteranalAPICallStatus WHERE id=NEW.refComponentID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_component` ;  \n" +
                "CREATE TRIGGER `Trg_AI_component` AFTER INSERT ON `component`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "    IF(New.isCustom=1 AND New.category=3) THEN  \n" +
                "    INSERT INTO binmst (`name`,warehouseID,isActive,isPermanentBin,systemGenerated,createdBy,updatedBy,isRandom,createByRoleId,updateByRoleId)VALUES  \n" +
                "              (UPPER(NEW.Pidcode),-5,1,1,1,New.createdBy,New.updatedBy,1,New.createByRoleId,New.updateByRoleId);  \n" +
                "    END IF;  \n" +
                "      IF(New.category=3 OR New.iscpn=1) THEN  \n" +
                "          INSERT INTO component_bomsetting(refComponentID,liveInternalVersion,bomLock,isBOMVerified,isDeleted,createdBy,createdAt,createByRoleId,  \n" +
                "          updatedBy,updatedAt,updateByRoleId) VALUES (NEW.id,0,0,0,0,NEW.createdBy,NEW.createdAt,NEW.createByRoleId,  \n" +
                "          NEW.updatedBy,NEW.updatedAt,NEW.updateByRoleId);  \n" +
                "      END IF;  \n" +
                "    END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_component` ;  \n" +
                "CREATE TRIGGER `Trg_AU_component` AFTER UPDATE ON `component`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "    DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "  \n" +
                "	IF(New.isCustom=1 AND New.category=3 AND new.isdeleted=1) THEN  \n" +
                "		UPDATE binmst SET isdeleted=1,deletedAt=New.deletedAt,deletedBy=New.deletedBy,deleteByRoleId=New.deleteByRoleId  \n" +
                "		WHERE `name`=New.pidcode;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- to update rohs status in WO other than completed/void/terminated  \n" +
                "	IF(NEW.RoHSStatusID <> OLD.RoHSStatusID) THEN  \n" +
                "		UPDATE workorder  \n" +
                "		SET RoHSStatusID = NEW.RoHSStatusID  \n" +
                "		WHERE woStatus NOT IN (2,4,7) AND partID= NEW.id AND isDeleted=0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.bomLock,\"\") != IFNULL(NEW.bomLock,\"\") THEN  \n" +
                "		IF OLD.bomLock IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.bomLock IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Lock BOM',  \n" +
                "			pOldValue, 				pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "         UPDATE COMPONENT SET bomLock= NEW.bomLock WHERE refComponentID=NEW.id;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** new script -> 14-03-2022 *********************************** */
                "insert into dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "values (6004,'2.00','V1','User Story 42082: Part Master : Separate BOMSetting fields from part mas - CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6004:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAllOtherComponentList;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllOtherComponentList`(  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "      DECLARE pmfgCodeID INT;  \n" +
                "      DECLARE vMfgCodeIds VARCHAR(50) DEFAULT '';  \n" +
                "      DECLARE v_mfgNameFormat VARCHAR(10);  \n" +
                "	  SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "      SELECT id INTO pmfgCodeID FROM mfgcodemst WHERE iscompany=1  AND isdeleted=0;  \n" +
                "      SELECT GROUP_CONCAT(refMfgCodeMstID) INTO vMfgCodeIds  \n" +
                "      FROM supplier_mapping_mst  \n" +
                "      WHERE supplierID  = pmfgCodeID AND isDeleted =0 AND isCustMapping=0;  \n" +
                "      #get component having mfg as iscompany and part type other  \n" +
                "      SELECT c.pidcode,c.id,c.mfgPN,rr.name AS rohsName,rr.rohsIcon,c.frequency,c.mfgPNDescription,c.category,c.partType,  \n" +
                "      cp.name AS packagingName,c.imageURL,c.unit, c.pcbPerArray, c.packageQty,c.minimum, c.mult,  \n" +
                "      c.packagingId,u.unitName,c.rohsStatusID,mc.mfgCode,mc.mfgName,c.mfgcodeid , pmfgCodeID   fcaCompId , c.partStatus,  \n" +
                "      c.frequencyType, fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, v_mfgNameFormat) mfgCodeName, c.internalReference  ,  \n" +
                "      c.mfgPN AS otherMPN  \n" +
                "      FROM COMPONENT c JOIN rfq_rohsmst rr ON rr.id=c.rohsStatusID  \n" +
                "      LEFT JOIN component_packagingmst cp ON cp.id=c.packagingId  \n" +
                "      LEFT JOIN uoms u ON u.id=c.uom  \n" +
                "      JOIN mfgcodemst mc ON  mc.id=c.mfgcodeid  \n" +
                "      WHERE c.partType=4  \n" +
                "      AND c.isdeleted=0  \n" +
                "      AND (c.mfgcodeid=pmfgCodeID OR FIND_IN_SET(c.mfgcodeid ,vMfgCodeIds))  \n" +
                "      AND c.isGoodPart  = 1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6005,'2.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6005:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber`(  \n" +
                "	IN pPackingSlipNumber VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfPSRecord INT;  \n" +
                "	DECLARE v_CountOfSIRecord INT;  \n" +
                "	DECLARE v_StringOfMFGCode VARCHAR(255);  \n" +
                "	DECLARE Status_Check TINYINT;  \n" +
                "	DECLARE vPackingSlipId INT;  \n" +
                "	DECLARE vrefSalesOrderID INT;  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_CustomerPackingSlip_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_CustomerPackingSlip_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		Error VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord  \n" +
                "	FROM 	customer_packingslip  \n" +
                "	WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "			AND transType = 'P'  \n" +
                "			AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN  \n" +
                "		INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT('Customer Packing Slip# <b>',pPackingSlipNumber,'</b> not found.'));  \n" +
                "		SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		SELECT 	a.refCustInvoiceID, GROUP_CONCAT(a.fullCustCode),a.`subStatus` ,a.id ,a.refSalesOrderID  \n" +
                "        INTO v_CountOfSIRecord, v_StringOfMFGCode,Status_Check  ,  vPackingSlipId ,vrefSalesOrderID  \n" +
                "		FROM 	(  \n" +
                "				SELECT 	cp.id, cp.packingSlipNumber,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgCodeFormat) fullCustCode,  \n" +
                "					cp.`subStatus`,cp.refCustInvoiceID,cp.refSalesOrderID  \n" +
                "				FROM 	customer_packingslip  cp  \n" +
                "                left join mfgcodemst mfg on mfg.id= cp.customerID  \n" +
                "				WHERE 	cp.packingSlipNumber = pPackingSlipNumber  \n" +
                "						AND cp.transType = 'P'  \n" +
                "						AND cp.isDeleted =0  \n" +
                "		) a  \n" +
                "        GROUP BY a.refCustInvoiceID,id ,a.refSalesOrderID  ;  \n" +
                "  \n" +
                "			IF(Status_Check=1)THEN      /* status 1-> Draft */  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"</b> is in <b>Draft</b>. So you cannot get any details of packing slip.\"));  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "			ELSEIF(v_CountOfSIRecord IS NOT NULL)THEN  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"'s</b> customer invoice is already created for customer \",v_StringOfMFGCode,\".\"));  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "			ELSE  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (TRUE, '');  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "  \n" +
                "				SELECT packingSlipNumber,packingSlipDate,  \n" +
                "                fun_getMfgCodeAndNameByID(customerID) customerName,  \n" +
                "                customerID,  \n" +
                "                    id AS packingSlipID,  \n" +
                "                    poNumber, poDate,poRevision,  \n" +
                "					soNumber, soDate, refSalesOrderId,sorevision,  \n" +
                "                    packingSlipType,  \n" +
                "                    (CASE WHEN packingSlipType = 1 THEN 'MISC' WHEN packingSlipType = 2 THEN 'PO' END) packingSlipTypeText,  \n" +
                "					fun_getGenericCategoryCodeNameByID(shippingMethodId) shippingMethod,      shippingMethodId,  \n" +
                "                    fun_getGenericCategoryNameByID(termsId) terms,termsId,  \n" +
                "                    shipToId, billToId ,  \n" +
                "                    freeOnBoardId,salesCommissionTo,  \n" +
                "                    fun_getEmployeeInitialNameByEmpID(salesCommissionTo) salesCommInitial,  \n" +
                "                    CONCAT('(',fun_getEmployeeInitialNameByEmpID(salesCommissionTo),') ',fun_getEmployeeNameByEmpID(salesCommissionTo) ) salesCommName,  \n" +
                "                    fun_getFOBById(freeOnBoardId) FOBName,  \n" +
                "                    contactPersonId,  \n" +
                "                    intermediateShipmentId ,  \n" +
                "                    billingAddress,  \n" +
                "                    shippingAddress,  \n" +
                "                    intermediateAddress,  \n" +
                "                    packingSlipComment,  \n" +
                "                    headerComment,  \n" +
                "                    revision packingSlipVersion,  \n" +
                "                    billingContactPersonID,  \n" +
                "                    shippingContactPersonID,  \n" +
                "                    intermediateContactPersonID,  \n" +
                "                    carrierID,  \n" +
                "                    fun_getGenericCategoryCodeNameByID(carrierID) carrier,  \n" +
                "                    carrierAccountNumber  \n" +
                "				 FROM customer_packingslip WHERE packingSlipNumber = pPackingSlipNumber  \n" +
                "						AND transType = 'P'  \n" +
                "						AND isDeleted = 0 ;  \n" +
                "  \n" +
                "				SELECT  cpd.custPOLineID,  \n" +
                "						cpd.refSalesorderDetid,  \n" +
                "						cpd.reflineID AS packingSlipSerialNumber,  \n" +
                "                        fun_getMFGPNByID(cpd.partId) mfgpn,  \n" +
                "                        fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "                        fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "                        cpd.partId,cpd.refChargesTypeID,  \n" +
                "                        cpd.shippingId,  \n" +
                "						(SELECT c.partType FROM component c WHERE c.isDeleted = 0 AND c.id = cpd.partId) partType,  \n" +
                "						cpd.shipQty,  \n" +
                "						(case  when cp.packingSlipType = 2 and sod.id is not null then sod.price  \n" +
                "								when cp.packingSlipType = 2 and sod.id is null then cpd.unitPrice  \n" +
                "								else cpd.unitPrice end)  unitPrice,  \n" +
                "						cpd.assyDescription,  \n" +
                "						fun_getAssyPIDCodeByID(cpd.partId)	PIDCode,  \n" +
                "						fun_getMfgCodeAndNameByPartID(cpd.partId) mfgName,  \n" +
                "						(SELECT ss.releaseNumber FROM salesshippingmst ss WHERE  ss.shippingId = cpd.shippingId AND ss.isdeleted=0) releaseNumber,  \n" +
                "						fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,  \n" +
                "                        (case  when cp.packingSlipType = 2 and sod.id is not null then cpd.shipQty * sod.price  \n" +
                "								when cp.packingSlipType = 2 and sod.id is null then cpd.shipQty * IFNULL(cpd.unitPrice,0)  \n" +
                "								else cpd.shipQty * IFNULL(cpd.unitPrice,0) end) extPrice,  \n" +
                "						cpd.otherCharges AS lineOtherCharges,  \n" +
                "						0 totalExtPrice ,  \n" +
                "						1 isFromPackingSlip,  \n" +
                "						(case  when cp.packingSlipType = 2 and sod.id is not null then sod.quoteFrom  \n" +
                "							when cp.packingSlipType = 2 and sod.id is null then cpd.quoteFrom  \n" +
                "							else cpd.quoteFrom end) quoteFrom,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteNumber, cpd.quoteNumber) quoteNumber,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQGroupID ,cpd.refRFQGroupID) refRFQGroupID,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "						(case	when cp.packingSlipType = 2 and sod.id is not null and sod.quoteFrom = 1 then 'From RFQ'  \n" +
                "							when cp.packingSlipType = 2 and sod.id is null and cpd.quoteFrom = 1 then 'From RFQ'  \n" +
                "							when cp.packingSlipType = 2 and sod.id is not null and sod.quoteFrom = 3 then 'N/A'  \n" +
                "							when cp.packingSlipType = 2 and sod.id is null and cpd.quoteFrom = 3 then 'N/A'  \n" +
                "							when cp.packingSlipType = 2 and sod.id is not null and sod.quoteFrom = 2 then 'From Part Master'  \n" +
                "							when cp.packingSlipType = 2 and sod.id is null and cpd.quoteFrom = 2 then 'From Part Master'  \n" +
                "							else '' end) quoteFromText ,  \n" +
                "					    cpd.releaseNotes  \n" +
                "				 FROM customer_packingslip_det cpd  \n" +
                "                 LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0  AND cp.transType = 'P'  \n" +
                "                 LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0  \n" +
                "                 WHERE cpd.isDeleted=0  \n" +
                "                 AND cp.packingSlipNumber = pPackingSlipNumber  \n" +
                "                ORDER BY refSalesorderdetid,shippingId ASC;  \n" +
                "  \n" +
                "                -- get other charges  \n" +
                "                -- 1, Every 2 First 3 Last  \n" +
                "			  SELECT dtl.refCustPackingSlipID ,  \n" +
                "					 dtl.refSalesorderDetid,  \n" +
                "                     dtl.remainingQty,  \n" +
                "                     sother.partID,  \n" +
                "                     fun_getMFGPNByID(sother.partID) mfgPN,  \n" +
                "					 fun_getRoHSIconByPartID(sother.partID) rohsIcon,  \n" +
                "					 fun_getRoHSNameByPartID(sother.partID) rohsName,  \n" +
                "                     sother.price ,  \n" +
                "                     sother.qty,  \n" +
                "                     (IFNULL(sother.qty,0)*IFNULL(sother.price,0)) extOtherPrice,  \n" +
                "                     sother.frequency,  \n" +
                "                      sother.lineComment,  \n" +
                "                       sother.lineInternalComment,  \n" +
                "                       sother.frequencyType,  \n" +
                "                     (CASE  WHEN (sother.frequency = 1) THEN 'Every'  \n" +
                "							WHEN (sother.frequency = 2) THEN 'First'  \n" +
                "							WHEN (sother.frequency = 3) THEN  'Last'  \n" +
                "							ELSE ''  \n" +
                "						END) AS frequencyName ,  \n" +
                "						(CASE  WHEN (sother.frequencyType = 1) THEN 'Release'  \n" +
                "							WHEN (sother.frequencyType = 2) THEN 'Shipment'  \n" +
                "							ELSE ''  \n" +
                "						END) AS frequencyTypeName  \n" +
                "				FROM (  \n" +
                "					SELECT b.refCustPackingSlipID , b.refSalesorderDetid, b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency FROM  \n" +
                "					 	(SELECT  a.refCustPackingSlipID , a.refSalesorderDetid, a.poQty, a.shipQty ,a.remainingQty, a.packingslipIndex ,a.shippingId,  \n" +
                "						CASE WHEN packingslipIndex = 1 AND  remainingQty > 0 THEN '1,2'  \n" +
                "							 WHEN packingslipIndex = 1 AND  remainingQty = 0 THEN '1,2,3'  \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty > 0 THEN '1'  \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty =  0 THEN '1,3' END AS calcFrequency  \n" +
                "						FROM (  \n" +
                "							SELECT cpd2.refCustPackingSlipID,cpd2.refSalesorderDetid,cpd2.poQty,cpd2.shipQty ,  \n" +
                "								cpd2.remainingQty,cpd2.shippingId,  \n" +
                "                                cpd2.partID,  \n" +
                "								row_number() over(PARTITION BY cpd1.refSalesorderDetid,cpd1.shippingId  ORDER BY cpd2.id ) packingslipIndex  \n" +
                "							FROM customer_packingslip_det cpd1  \n" +
                "							JOIN customer_packingslip_det cpd2 ON cpd2.refSalesOrderDetid = cpd1.refSalesOrderDetid AND cpd2.isDeleted = 0  \n" +
                "							WHERE cpd1.refCustPackingSlipID = vPackingSlipId  \n" +
                "                            AND cpd1.isDeleted = 0  \n" +
                "						) AS a  \n" +
                "						)AS b  GROUP BY b.refCustPackingSlipID,b.refSalesorderDetid,b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency  \n" +
                "				) AS dtl  \n" +
                "				JOIN salesorder_otherexpense_details sother  \n" +
                "                ON sother.refSalesOrderDetID = dtl.refSalesorderDetid AND sother.isDeleted = 0  \n" +
                "				WHERE FIND_IN_SET ( sother.frequency ,dtl.calcFrequency)  \n" +
                "				AND dtl.refCustPackingSlipID = vPackingSlipId;  \n" +
                "  \n" +
                "  \n" +
                "                 --  Tracking Number  \n" +
                "                SELECT trackNumber  \n" +
                "                FROM customer_packing_slip_track_number  \n" +
                "                WHERE refCustPackingSlipID = vPackingSlipId  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "                -- other charges  \n" +
                "                SELECT cpd.partId,cpd.shipQty,cpd.poQty,cpd.refSalesorderDetid,cpd.shippingId  \n" +
                "		FROM customer_packingslip cp JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID=cp.id  \n" +
                "			WHERE transType='I' AND cp.refSalesOrderID=vrefSalesOrderID AND cp.isdeleted=0  ;  \n" +
                "			END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6006,'2.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6006:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingCustomerSalesDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingCustomerSalesDetails`(  \n" +
                "	IN psalesorderID INT ,  \n" +
                "	IN packingSlipID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE vMfgCodeFormat INT;  \n" +
                "select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                " SELECT  \n" +
                "        sd.id,  \n" +
                "        IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "        sd.tentativeBuild,  \n" +
                "        sd.qty AS poQty,  \n" +
                "        sd.partID,  \n" +
                "        sd.price,  \n" +
                "        sd.lineID,  \n" +
                "		CONCAT(c.pidcode,' | ',IFNULL(sd.custPOLineNumber,1)) soDets,  \n" +
                "		(SELECT CASE WHEN SUM(cpd.shipQty)>=sd.qty THEN TRUE ELSE FALSE END  \n" +
                "			FROM customer_packingslip_det cpd  \n" +
                "			WHERE cpd.refsalesorderDetid=sd.id AND cpd.isDeleted = 0  \n" +
                "			AND cpd.refCustPackingSlipID IN (SELECT id FROM customer_packingslip  \n" +
                "						WHERE isDeleted = 0  \n" +
                "						AND transType = 'P')) isShipped  ,  \n" +
                "		sd.partCategory,  \n" +
                "		c.partType    ,  \n" +
                "		c.rfqOnly,  \n" +
                "		c.PIDCode  ,  \n" +
                "		c.partStatus ,  \n" +
                "		sd.internalComment,  \n" +
                "        sd.partDescription,  \n" +
                "        sd.remark,  \n" +
                "        c.iscustom,  \n" +
                "		c.mfgPN,  \n" +
                "		c.mfgpndescription,  \n" +
                "		fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "		c.nickName,  \n" +
                "		c.mfgcodeID,  \n" +
                "		sd.originalPOQty,  \n" +
                "        fun_GetFormattedMfgCode(mfg.mfgcode,mfg.mfgName,vMfgCodeFormat) mfgName,  \n" +
                "        -- fun_getMfgCodeAndNameByID(c.mfgcodeID)mfgName,  \n" +
                "        ro.rohsIcon,		ro.name AS rohsName,  \n" +
                "        c.category partCategory  \n" +
                "	FROM salesorderdet sd  \n" +
                "	INNER JOIN COMPONENT c ON c.id=sd.partid  \n" +
                "    INNER JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "    LEFT JOIN mfgcodemst mfg ON mfg.id = c.mfgCodeId and mfg.isDeleted = 0  \n" +
                "	WHERE sd.refsalesOrderID=psalesorderID  \n" +
                "	AND sd.isdeleted=0 AND sd.isCancle=0  \n" +
                "	AND sd.partCategory IN (2,3)  \n" +
                "    AND c.partType != 4;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6007,'2.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6007:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesShippingDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
                "	IN psalesorderDetID INT ,  \n" +
                "	IN packingSlipID INT,  \n" +
                "	IN ppackingslipDetID INT  ,  \n" +
                "    IN pSoReleaseID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "      SELECT ss.shippingID,  \n" +
                "        ss.sDetId,  \n" +
                "		IFNULL(sd.custPOLineNumber ,1)  custPOLineNumber,  \n" +
                "        IFNULL(ss.releaseNumber,1) releaseNumber,  \n" +
                "        ss.qty,  \n" +
                "        ss.shippingDate,  \n" +
                "        sd.tentativeBuild,  \n" +
                "        sd.qty AS poQty,  \n" +
                "        sd.partID,  \n" +
                "        sd.price,  \n" +
                "        sd.lineID,  \n" +
                "        sd.internalComment,  \n" +
                "        sd.partDescription,  \n" +
                "        sd.remark,  \n" +
                "        c.iscustom,  \n" +
                "        smp.poNumber,  \n" +
                "        ss.poReleaseNumber,  \n" +
                "		c.mfgPN,  \n" +
                "		c.mfgpndescription,  \n" +
                "		c.pidcode,  \n" +
                "		fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "		c.nickName,  \n" +
                "		c.mfgcodeID,  \n" +
                "        c.custAssyPN,  \n" +
                "        c.isCPN,  \n" +
                "		sd.originalPOQty,  \n" +
                "		fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname, vMfgCodeFormat)  mfgName,  \n" +
                "		(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID  \n" +
                "			ELSE ss.shippingMethodID END) shippingMethodID ,  \n" +
                "		(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID  \n" +
                "			ELSE ss.shippingAddressID END) shippingAddressID ,  \n" +
                "		-- (CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddress END) shippingAddress ,  \n" +
                "		fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "		fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "		fun_getCertificationByPartID(sd.partID)standards,  \n" +
                "		CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT((CASE WHEN ss.isAgreeToShip=1 THEN IFNULL(ss.revisedRequestedShipDate,ss.revisedRequestedDockDate) ELSE IFNULL(ss.shippingDate,ss.requestedDockDate) END), '%m-%d-%y')) shipping,  \n" +
                "        cpsDet.shippedQty,  \n" +
                "		-- sum(cpsDet.shippedQty) over(partition by ss.sDetId) shippedQty ,  \n" +
                "		(SELECT SUM(IFNULL(cpdet.shipQty,0))  \n" +
                "			FROM customer_packingslip_det cpdet  \n" +
                "            JOIN customer_packingslip cpsdet ON cpsdet.id = cpdet.refCustPackingSlipID  and cpsdet.isDeleted = 0  \n" +
                "            WHERE cpdet.refsalesorderdetid=ss.sDetId  \n" +
                "			AND cpdet.isdeleted=0 AND cpsdet.transType ='P') lineTotShippedQty ,  \n" +
                "		(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))  \n" +
                "				ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,  \n" +
                "		c.partType,  \n" +
                "		(SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,  \n" +
                "		sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID,  \n" +
                "        sd.refRFQGroupID,  \n" +
                "        sd.refRFQQtyTurnTimeID  ,  \n" +
                "		IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ',  \n" +
                "											CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "												WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "												WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "										FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "										JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "										WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "		c.category partCategory,  \n" +
                "        ss.releaseNotes,  \n" +
                "        ss.description additionalNotes,  \n" +
                "        ss.customerReleaseLine,  \n" +
                "        sd.salesOrderDetStatus,  \n" +
                "        sd.qty custPOQty,  \n" +
                "        sd.materialTentitiveDocDate  ,  \n" +
                "		(case when ss.carrierID is null then  som.carrierID else ss.carrierID end) carrierID,  \n" +
                "		(CASE WHEN ss.carrierID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.carrierID))  \n" +
                "			ELSE (fun_getGenericCategoryCodeNameByID(ss.carrierID)) END) carrierText,  \n" +
                "		(CASE WHEN ss.carrierID IS NULL THEN som.carrierAccountNumber ELSE ss.carrierAccountNumber END) carrierAccountNumber ,  \n" +
                "        (CASE WHEN ss.shippingContactPersonID IS NULL THEN som.shippingContactPersonID  \n" +
                "			ELSE ss.shippingContactPersonID END) shippingContactPersonID  \n" +
                "	FROM salesshippingmst ss  \n" +
                "	JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
                "	JOIN salesordermst som ON som.id = sd.refSalesOrderID  \n" +
                "	JOIN COMPONENT c ON c.id=sd.partid  \n" +
                "    LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = c.mfgcodeId  and mfgmst.isDeleted = 0  \n" +
                "	LEFT JOIN salesorderdet sdp ON sd.refBlanketPOID=sdp.id AND sdp.isdeleted=0  \n" +
                "	LEFT JOIN salesordermst smp ON smp.id=sdp.refSalesOrderID AND smp.isdeleted=0  \n" +
                "	LEFT JOIN (select cpd.refsalesorderdetid,cpd.shippingId, sum(shipQty) shippedQty from customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip  cps ON cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0 and cps.transType= 'P'  \n" +
                "				where cpd.isDeleted = 0 Group by cpd.refsalesorderdetid, cpd.shippingId ) cpsDet  \n" +
                "		ON ss.sDetId = cpsDet.refsalesorderdetid  \n" +
                "          and ss.shippingID = cpsDet.shippingId  \n" +
                "	WHERE sd.id=psalesorderDetID  \n" +
                "	AND  sd.isDeleted = 0  \n" +
                "	AND (CASE WHEN ppackingslipDetID IS NULL THEN  ss.qty > ifnull(cpsDet.shippedQty,0)  \n" +
                "		ELSE  ss.qty=ss.qty  END)  \n" +
                "	AND (CASE WHEN pSoReleaseID IS NOT NULL THEN ss.shippingID=pSoReleaseID ELSE 1 = 1 END)  \n" +
                "	AND ss.isdeleted=0  \n" +
                "	ORDER BY ss.releaseNumber,ss.shippingDate;  \n" +
                "  \n" +
                "	SELECT NULL AS shippingID,  \n" +
                "			sDetId,  \n" +
                "			custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			releaseNotes,  \n" +
                "			tentativeBuild,  \n" +
                "			poQty,  \n" +
                "			partID,  \n" +
                "			price,  \n" +
                "			lineID,  \n" +
                "			partDescription,  \n" +
                "			mfgPN,  \n" +
                "			mfgPNDescription,  \n" +
                "			unitMeaser,  \n" +
                "			nickName,  \n" +
                "			pidcode,  \n" +
                "			NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			mfgcodeID,  \n" +
                "			mfgName,  \n" +
                "			rohsIcon,  \n" +
                "			rohsName,  \n" +
                "			rohsStatusID,  \n" +
                "			standards,  \n" +
                "			shippedQty   ,  \n" +
                "			remark,  \n" +
                "			internalcomment,  \n" +
                "			mfgPnwihLineId,  \n" +
                "			refSODetID,  \n" +
                "			refSOReleaseLineID,  \n" +
                "			frequency,  \n" +
                "			originalPOQty,  \n" +
                "			frequencyType,  \n" +
                "			poNumber  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			sd.remark releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			c.mfgPN,  \n" +
                "			c.mfgPNDescription,  \n" +
                "			fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			c.nickName,  \n" +
                "			c.pidcode,  \n" +
                "			sd.refSODetID,  \n" +
                "			sd.refSOReleaseLineID,  \n" +
                "			sd.frequency,  \n" +
                "			CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			sd.originalPOQty,  \n" +
                "			smp.poNumber,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			sd.frequencyType,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shipQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0 ) shippedQty   ,  \n" +
                "			sd.remark,  \n" +
                "			sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		LEFT JOIN salesorderdet sdp ON sd.refBlanketPOID=sdp.id AND sdp.isdeleted=0  \n" +
                "	        LEFT JOIN salesordermst smp ON smp.id=sdp.refSalesOrderID AND smp.isdeleted=0  \n" +
                "		WHERE sd.refSODetID=psalesorderDetID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "    ) a;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6008,'2.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6008:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesShippingDetForOtherCharges;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetForOtherCharges`(  \n" +
                "	IN psalesorderID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	SELECT NULL AS shippingID,  \n" +
                "		 sDetId,  \n" +
                "		custPOLineNumber,  \n" +
                "		-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "		NULL releaseNumber,  \n" +
                "		qty,  \n" +
                "		NULL shippingDate,  \n" +
                "		releaseNotes,  \n" +
                "		tentativeBuild,  \n" +
                "		poQty,  \n" +
                "		partID,  \n" +
                "		price,  \n" +
                "		lineID,  \n" +
                "		partDescription,  \n" +
                "		 mfgPN,  \n" +
                "		 mfgPNDescription,  \n" +
                "		 unitMeaser,  \n" +
                "		 nickName,  \n" +
                "         pidcode,  \n" +
                "		 NULL shippingMethodID,  \n" +
                "		NULL shippingAddressID,  \n" +
                "		mfgcodeID,  \n" +
                "		mfgName,  \n" +
                "		rohsIcon,  \n" +
                "		rohsName,  \n" +
                "        rohsStatusID,  \n" +
                "		standards,  \n" +
                "		shippedQty   ,  \n" +
                "        remark,  \n" +
                "        internalcomment,  \n" +
                "        mfgPnwihLineId,  \n" +
                "        poNumber ,  \n" +
                "        mfgPnwihLineId AS otherMPN  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			sd.remark releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			 c.mfgPN,  \n" +
                "			 c.mfgPNDescription,  \n" +
                "			 fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			 c.nickName,  \n" +
                "			 c.pidcode,  \n" +
                "			 smb.poNumber,  \n" +
                "             CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			 NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0) shippedQty   ,  \n" +
                "				sd.remark,  \n" +
                "				sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		LEFT JOIN salesorderdet sdb ON sdb.id=sd.refBlanketPOID AND sdb.isdeleted=0  \n" +
                "		LEFT JOIN salesordermst smb ON smb.id=sdb.refsalesOrderID  \n" +
                "		WHERE sd.refSalesOrderID = psalesorderID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "		AND sd.isCancle=0  \n" +
                "		AND sd.partCategory = 2  \n" +
                "		AND sd.refSODetID IS NULL  \n" +
                "		AND c.partType  =4  \n" +
                "    ) a  WHERE a.poQty - IFNULL(a.shippedQty,0) > 0;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6009,'2.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6009:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingShippingDetail;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingShippingDetail`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefCustPackingSlipID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "  SET @tempQuerypackingSlip = CONCAT(\"SELECT cpd.id, cpd.refCustPackingSlipID,cpd.refSalesorderDetid,  \n" +
                "			cpd.partId , cpd.custPOLineID, cpd.assyDescription,  \n" +
                "			cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,cpd.shippingNotes,cpd.shippingId,  \n" +
                "			cpd.internalComment,  \n" +
                "			cpd.binID, cpd.whID,  \n" +
                "			ss.qty as releaseLineQty,  \n" +
                "			cpd.standrads,  \n" +
                "			ss.releaseNumber,  \n" +
                "			cpd.poReleaseNumber,  \n" +
                "			cpd.refBlanketPONumber,  \n" +
                "			fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "			fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			c.mfgPN,c.pidcode PIDCode,c.nickName,c.mfgpndescription,rr.name as rohsName,rr.rohsIcon, c.partType ,  \n" +
                "			fun_getUnitNameByID(c.uom) unitMeaser ,  c.custAssyPN,  \n" +
                "			cpd.reflineID as lineID ,  \n" +
                "			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") mfgName,  \n" +
                "			c.mfgcodeid ,  \n" +
                "			cpd.lineID AS lineIDSequenceNum   ,  \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT woNumber SEPARATOR ', ') FROM shippedassembly  \n" +
                "			   WHERE refCustPackingSlipDetID = cpd.id AND isDeleted = 0 AND shippedqty > 0) shippedFromWONumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT css.uid) FROM shippedassembly sa  \n" +
                "					JOIN component_sid_stock css ON sa.refsidid = css.id AND  css.isDeleted = 0  \n" +
                "			  WHERE sa.refCustPackingSlipDetID = cpd.id AND sa.isDeleted = 0 AND sa.shippedqty > 0) shippedFromUMIDs ,  \n" +
                "             cpd.refLineId soLineId ,  \n" +
                "             cpd.refCustPackingSlipDetID,  \n" +
                "             CASE WHEN c.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
                "             (select mfg.mfgType from mfgcodemst mfg where mfg.id = c.mfgcodeID and mfg.isDeleted = 0) mfgType,  \n" +
                "             cpd.componentStockType,  \n" +
                "             (case  when cp.packingSlipType = 2 and sod.id is not null then sod.price  \n" +
                "					when cp.packingSlipType = 2 and sod.id is null then cpd.unitPrice  \n" +
                "                    else cpd.unitPrice end)  unitPrice,  \n" +
                "             if(cp.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "             (case  when cp.packingSlipType = 2 and sod.id is not null then sod.quoteFrom  \n" +
                "					when cp.packingSlipType = 2 and sod.id is null then cpd.quoteFrom  \n" +
                "                    else cpd.quoteFrom end) quoteFrom,  \n" +
                "             if(cp.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "             c.iscustom,c.isCPN,  \n" +
                "             (case  when cp.packingSlipType = 2 and sod.id is not null then cpd.shipQty * sod.price  \n" +
                "					when cp.packingSlipType = 2 and sod.id is null then cpd.extendedPrice  \n" +
                "                    else cpd.extendedPrice end) extendedPrice,  \n" +
                "             (select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "						where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "							from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "            if(cp.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "			(case	when cp.packingSlipType = 2 and sod.id is not null and sod.quoteFrom = 1 then 'From RFQ'  \n" +
                "					when cp.packingSlipType = 2 and sod.id is null and cpd.quoteFrom = 1 then 'From RFQ'  \n" +
                "                    when cp.packingSlipType = 2 and sod.id is not null and sod.quoteFrom = 3 then 'N/A'  \n" +
                "                    when cp.packingSlipType = 2 and sod.id is null and cpd.quoteFrom = 3 then 'N/A'  \n" +
                "                    when cp.packingSlipType = 2 and sod.id is not null and sod.quoteFrom = 2 then 'From Part Master'  \n" +
                "                    when cp.packingSlipType = 2 and sod.id is null and cpd.quoteFrom = 2 then 'From Part Master'  \n" +
                "					else '' end) quoteFromText  ,  \n" +
                "            cpd.releaseNotes ,if(sod.id is not null ,1,0) isFromSO  \n" +
                "		FROM `customer_packingslip_det` AS cpd  \n" +
                "			left join component c on c.id=cpd.partid  \n" +
                "			left join mfgcodemst mfgmst on mfgmst.id = c.mfgCodeId and mfgmst.isDeleted = 0  \n" +
                "			left join rfq_rohsmst rr on rr.id=c.rohsStatusID  \n" +
                "			left join salesshippingmst ss on ss.shippingID=cpd.shippingID and ss.isdeleted=0  \n" +
                "            left join salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "            left join customer_packingslip cp on cp.id  = cpd.refCustPackingSlipID and cp.isDeleted = 0  \n" +
                "		WHERE cpd.isDeleted=0 and cpd.refCustPackingSlipID=\",IFNULL(prefCustPackingSlipID,0));  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY lineIDSequenceNum ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "        /* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempQuerypackingSlip,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempQuerypackingSlip,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "			PREPARE query1 FROM @SQLStatement2;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6010,'2.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6010:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDetailPerLine;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDetailPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE   ,  \n" +
                "    IN pDateType VARCHAR(10),  \n" +
                "	IN pSearchComments VARCHAR(200)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       ss.releaseNumber,  \n" +
                "		       ss.qty as releaseLineQty,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cpd.internalComment,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cpd.poReleaseNumber,  \n" +
                "			cpd.refBlanketPONumber,  \n" +
                "            cpd.partId,  \n" +
                "            fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "            `cpd`.assyDescription,  \n" +
                "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "            c.mfgPN as assyName ,  \n" +
                "            c.PIDCode as assyId,  \n" +
                "            c.mfgCodeID,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "            fun_GetFormattedMfgCode(co_mfgmst.mfgcode,co_mfgmst.mfgname,\", vMfgCodeFormat,\")  mfrName,  \n" +
                "			mfgmst.mfgcode custCode,  \n" +
                "			case when som.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "			som.isBlanketPO,  \n" +
                "			ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "			cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "			cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
                "			case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "			fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "			concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "		(CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  createdAt,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt ,  \n" +
                "        if(cd.packingSlipType = 2 and sod.id is not null , sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "        if(cd.packingSlipType = 2 and sod.id is not null , cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "        if(cd.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "		if(cd.packingSlipType = 2 and sod.id is not null , sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "        if(cd.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "        if(cd.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "        if(cd.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "		if(cd.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "		(case when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText,  \n" +
                "        (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "        cd.revision,  \n" +
                "		(select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "			where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "			from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "		c.isCustom,   c.custAssyPN customPartNumber  ,        cpd.remainingQty ,  \n" +
                "			som.rmaNumber,som.isRmaPO,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'YES' when som.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'Yes' when som.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp  ,  \n" +
                "            cpd.releaseNotes  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = cd.customerId and mfgmst.isDeleted = 0  \n" +
                "		JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0  \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid  \n" +
                "        LEFT JOIN mfgcodemst co_mfgmst ON co_mfgmst.id = c.mfgcodeID and co_mfgmst.isDeleted = 0  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0 and invoice.transType ='I'  \n" +
                "        LEFT JOIN salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "        LEFT JOIN salesordermst som on som.id = cd.refSalesOrderID and som.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "    if (pfilterStatus = '0') then  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    else  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    end if;  \n" +
                "  END IF;  \n" +
                "  IF pSearchComments IS NOT NULL AND pSearchComments != '' THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.shippingNotes like '%\", pSearchComments, \"%'  \n" +
                "									OR 	c.internalComment like '%\", pSearchComments, \"%'  \n" +
                "                                    OR 	c.assyDescription like '%\", pSearchComments, \"%'  \n" +
                "                                    OR 	c.packingSlipComment like '%\", pSearchComments, \"%'  \n" +
                "                                    OR 	c.headerComment like '%\", pSearchComments, \"%')\" );  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgPartID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId in ( ',pmfgPartID,')');  \n" +
                "  END IF;  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or som.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'' or som.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "   IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "	IF pDateType = 'P' THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "    ELSEIF pDateType = 'PO' THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poDate>=''',pfromDate,''' and cd.poDate<=''',ptoDate,''')');  \n" +
                "    ELSEIF pDateType = 'SO' THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.soDate>=''',pfromDate,''' and cd.soDate<=''',ptoDate,''')');  \n" +
                "    END IF;  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		IF pDateType = 'P' THEN  \n" +
                "			SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "		ELSEIF pDateType = 'PO' THEN  \n" +
                "			SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF pDateType = 'SO' THEN  \n" +
                "			       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.soDate >=''',pfromDate,''')');  \n" +
                "		END IF;  \n" +
                "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "  		IF pDateType = 'P' THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "		ELSEIF pDateType = 'PO' THEN  \n" +
                "			SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF pDateType = 'SO' THEN  \n" +
                "			       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "  END IF;  \n" +
                "  /*IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "	 SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  */  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                " -- select   @temp_Sproc_RetrieveCustomerPackingSlipDetails ,pWhereClause ;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6011,'2.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6011:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_SaveCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(  \n" +
                "	IN pTransType VARCHAR(5),  \n" +
                "	IN pInvoiceType VARCHAR(1),  \n" +
                "	IN pInvoiceID INT,  \n" +
                "	IN pInvData JSON,  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "	IN puserID INT,  \n" +
                "	IN puserRoleID INT ,  \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50),  \n" +
                "	IN pSystemId VARCHAR(20)  ,  \n" +
                "	IN pPackingSlipType INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(20) ;  \n" +
                "	DECLARE v_prefix VARCHAR(20);  \n" +
                "	DECLARE vTermsDays INT ;  \n" +
                "	DECLARE v_incrementI INT;  \n" +
                "	DECLARE v_commissionPercentage DECIMAL(10,2);  \n" +
                "	DECLARE vTotRefundIssuedOfCreditMemo DECIMAL(18,8);  \n" +
                "	DECLARE vIsAgreedRefundLessThanTotIssued TINYINT;  \n" +
                "  \n" +
                "  \n" +
                "	SET vIsAgreedRefundLessThanTotIssued = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "			pInvData,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",  \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",  \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",  \n" +
                "				`packingSlipType` INT PATH \"$.packingSlipType\",  \n" +
                "				`customerID` INT PATH \"$.customerID\" ,  \n" +
                "				`status` INT PATH \"$.status\",  \n" +
                "				`subStatus` INT PATH \"$.subStatus\",  \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",  \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				`poDate` DATE PATH \"$.poDate\",  \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",  \n" +
                "				`soDate` DATE PATH \"$.soDate\",  \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,  \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,  \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,  \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,  \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,  \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",  \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,  \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,  \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,  \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,  \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,  \n" +
                "				`billToId` INT PATH \"$.billToId\" ,  \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,  \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,  \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,  \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,  \n" +
                "				`termsId` INT PATH \"$.termsId\" ,  \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,  \n" +
                "				`creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,  \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,  \n" +
                "				`refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,  \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",  \n" +
                "				`rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\" ,  \n" +
                "				`contactPersonId` INT PATH \"$.contactPersonId\",  \n" +
                "				`revision` VARCHAR(10) PATH \"$.revision\",  \n" +
                "				`isZeroValue` TINYINT PATH \"$.isZeroValue\",  \n" +
                "				`isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",  \n" +
                "				`poRevision` VARCHAR(50) PATH \"$.poRevision\" ,  \n" +
                "				`isMarkForRefund` TINYINT PATH \"$.isMarkForRefund\",  \n" +
                "				`agreedRefundAmt` DECIMAL(18,8) PATH \"$.agreedRefundAmt\",  \n" +
                "				`isAskForVersionConfirmation` TINYINT PATH \"$.isAskForVersionConfirmation\",  \n" +
                "				`refundStatus` VARCHAR(5) PATH \"$.refundStatus\" ,  \n" +
                "				`carrierID` INT PATH \"$.carrierID\",  \n" +
                "				`carrierAccountNumber` VARCHAR(50) PATH \"$.carrierAccountNumber\"  ,  \n" +
                "                `billingContactPersonID` INT PATH \"$.billingContactPersonID\",  \n" +
                "                `billingContactPerson` VARCHAR(1000) PATH \"$.billingContactPerson\",  \n" +
                "                `shippingContactPersonID` INT PATH \"$.shippingContactPersonID\",  \n" +
                "                `shippingContactPerson` VARCHAR(1000) PATH \"$.shippingContactPerson\",  \n" +
                "                `intermediateContactPersonID` INT PATH \"$.intermediateContactPersonID\",  \n" +
                "                `intermediateContactPerson` VARCHAR(1000) PATH \"$.intermediateContactPerson\"  \n" +
                "			)  \n" +
                "		) AS CustInv_JT;  \n" +
                "  \n" +
                "  \n" +
                "	SELECT  termsDays INTO 	vTermsDays  \n" +
                "	FROM genericCategory gc  \n" +
                "	WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)  \n" +
                "	AND categoryType = 'Payment Terms';  \n" +
                "  \n" +
                "	IF (pInvoiceID IS NULL)THEN  \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */  \n" +
                "			/* SELECT `maxValue`,prefix INTO v_maxCurrSystemIDForInv,v_prefix  \n" +
                "			FROM `identity`  \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ; */  \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,  \n" +
                "				packingSlipComment,headerComment,sorevision,  \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,  \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,  \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,  \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,  \n" +
                "				refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId,  \n" +
                "				contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision,isAskForVersionConfirmation,  \n" +
                "				refundStatus,carrierID,carrierAccountNumber,  \n" +
                "                billingContactPersonID,billingContactPerson,  \n" +
                "                shippingContactPersonID,shippingContactPerson,  \n" +
                "                intermediateContactPersonID,intermediateContactPerson)  \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,  \n" +
                "					packingSlipComment,headerComment,sorevision,  \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,  \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,  \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,  \n" +
                "					IFNULL(totalAmount,0),vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,  \n" +
                "					refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId ,  \n" +
                "					contactPersonId,  LPAD(IFNULL(revision,0),2,'0'), IFNULL(isZeroValue,0), isAlreadyPublished, poRevision ,0,  \n" +
                "					refundStatus,carrierID,carrierAccountNumber,  \n" +
                "                     billingContactPersonID,billingContactPerson,  \n" +
                "					shippingContactPersonID,shippingContactPerson,  \n" +
                "					intermediateContactPersonID,intermediateContactPerson  \n" +
                "			FROM temp_customerInvoice ;  \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();  \n" +
                "  \n" +
                "		 UPDATE customer_packingslip  \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'  \n" +
                "		 WHERE id= pPackingSlipID;  \n" +
                "  \n" +
                "	 IF pPackingSlipID IS NOT NULL THEN  \n" +
                "			-- FOR PO/SO flow quote related data not store in packing slip. retrieve it from sales order  \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,  \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,  \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,  \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,  \n" +
                "					assyDescription,lineID, internalComment, quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,  \n" +
                "		    refRFQGroupID,refRFQQtyTurnTimeID, isZeroValue,releaseNotes)  \n" +
                "			SELECT LAST_INSERT_ID(),cpd.refSalesorderDetid,cpd.partId,cpd.custPOLineID,  \n" +
                "					cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,  \n" +
                "                     (case  when cp.packingSlipType = 2 and sod.id is not null then sod.price  \n" +
                "								when cp.packingSlipType = 2 and sod.id is null then IFNULL(cpd.unitPrice,0)  \n" +
                "								else IFNULL(cpd.unitPrice,0) end),  \n" +
                "					-- IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice),  \n" +
                "                    (case  when cp.packingSlipType = 2 and sod.id is not null then cpd.shipQty * sod.price  \n" +
                "								when cp.packingSlipType = 2 and sod.id is null then cpd.shipQty * IFNULL(cpd.unitPrice,0)  \n" +
                "								else cpd.shipQty * IFNULL(cpd.unitPrice,0) end) ,  \n" +
                "					-- (cpd.shipQty * (IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice))),  \n" +
                "						cpd.shippingNotes,cpd.whID,cpd.binID,  \n" +
                "						puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),  \n" +
                "						puserRoleID,puserRoleID,  \n" +
                "						cpd.shippingId,cpd.reflineID,cpd.otherCharges,  \n" +
                "						cpd.assyDescription, cpd.lineID, cpd.internalComment ,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteNumber,cpd.quoteNumber),  \n" +
                "						(case  	when cp.packingSlipType = 2 and sod.id is not null then sod.quoteFrom  \n" +
                "								when cp.packingSlipType = 2 and sod.id is null then cpd.quoteFrom  \n" +
                "								else cpd.quoteFrom end),  \n" +
                "						-- IF(cp.packingSlipType = 2 ,sod.quoteFrom,cpd.quoteFrom),  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID,cpd.refAssyQtyTurnTimeID),  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText),  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.refRFQGroupID,cpd.refRFQGroupID),  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) ,  \n" +
                "					cpd.isZeroValue, cpd.releaseNotes  \n" +
                "					FROM customer_packingslip_det   cpd  \n" +
                "					LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0  \n" +
                "					LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0  \n" +
                "					WHERE cpd.refCustPackingSlipID= pPackingSlipID  \n" +
                "					AND cpd.isDeleted = 0;  \n" +
                "  \n" +
                "	    IF pPackingSlipType = 2 THEN -- PO/SO INV  \n" +
                "	    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,  \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,  \n" +
                "							quoted_commissionValue, poQty, partId, refComponentSalesPriceBreakID,  \n" +
                "							quoted_unitPrice, quotedQty,commissionCalculateFrom,`type`, isDeleted,createdBy,createdAt,createByRoleId,salesCommissionNotes)  \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,	sca.unitPrice,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.quoted_commissionPercentage,  \n" +
                "							sca.quoted_commissionValue, cpd.shipQty, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.quoted_unitPrice,sca.quotedQty,sca.commissionCalculateFrom,sca.type, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,salesCommissionNotes  \n" +
                "					FROM salesorderdet_commission_attribute_mstdet sca  \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;  \n" +
                "					-- child records  \n" +
                "				INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,  \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,  \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,  \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)  \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,(SELECT id FROM customer_packingslip_commission_attribute_mstdet WHERE refCustPackingSlipDetID=cpd.id AND `type`=2 AND isdeleted=0 LIMIT 1),sca.unitPrice, sca.refQuoteAttributeId,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,  \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.org_unitPrice, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID  \n" +
                "					FROM salesorderdet_commission_attribute sca  \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;  \n" +
                "  \n" +
                "	     ELSEIF pPackingSlipType = 1 THEN -- MISC packing slip INV  \n" +
                "					-- SP to generate line wise sales commission.  \n" +
                "		    CALL Sproc_GetSalesCommissionDetailsForMultiplePart(pInvoiceID);  \n" +
                "		-- Sales Price details for Part master  \n" +
                "		    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,  \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,  \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,  \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)  \n" +
                "					SELECT sca.refCustPackingSlipDetID,	sca.unitPrice,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,  \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID  \n" +
                "					FROM temp_salesCommission sca  \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=1;  \n" +
                "  \n" +
                "  \n" +
                "					-- save sales commission details for RFQ  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_salescommission_mst;  \n" +
                "			     CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommission_mst AS  \n" +
                "			       SELECT   sca.refCustPackingSlipDetID FROM temp_salesCommission sca  \n" +
                "			       JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=2 GROUP BY sca.refCustPackingSlipDetID;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO @mstCommissionCount FROM  temp_salescommission_mst;  \n" +
                "			SET v_incrementI=0;  \n" +
                "			temp_commission_Det: WHILE v_incrementI < @mstCommissionCount DO  \n" +
                "				SELECT refCustPackingSlipDetID INTO @refCustPackingSlipDetID FROM temp_salescommission_mst LIMIT v_incrementI,1;  \n" +
                "  \n" +
                "				SELECT unitPrice INTO @totalUnitPrice FROM customer_packingslip_det WHERE id=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "				SELECT SUM(commissionValue) INTO @totalCommissionValue FROM  \n" +
                "				temp_salesCommission WHERE refCustPackingSlipDetID=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "				IF(@totalCommissionValue>(@totalUnitPrice/2))THEN  \n" +
                "					SET @totalCommissionValue=(@totalUnitPrice/2);  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET v_commissionPercentage=((@totalUnitPrice - (@totalUnitPrice - @totalCommissionValue)) *100/ (@totalUnitPrice - @totalCommissionValue));  \n" +
                "  \n" +
                "				INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,  \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,  \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,  \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId,rfqAssyID)  \n" +
                "					SELECT sca.refCustPackingSlipDetID,	@totalUnitPrice,  \n" +
                "							v_commissionPercentage, @totalCommissionValue, v_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,  \n" +
                "							@totalCommissionValue, 'All', sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							@totalUnitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,sca.rfqAssyID  \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID LIMIT 1;  \n" +
                "					-- sales commission child details  \n" +
                "					SELECT LAST_INSERT_ID() INTO @lstID;  \n" +
                "					INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,  \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,  \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,  \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)  \n" +
                "					SELECT sca.refCustPackingSlipDetID,@lstID,sca.unitPrice, sca.refQuoteAttributeId,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,  \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID  \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "					SET v_incrementI=v_incrementI+1;  \n" +
                "  \n" +
                "			END WHILE temp_commission_Det;  \n" +
                "	     END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "  \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN  \n" +
                "			UPDATE customer_packingslip cp  \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id  \n" +
                "			SET cp.invoiceDate= tci.invoiceDate,  \n" +
                "				cp.`status`= tci.status,  \n" +
                "				cp.subStatus = tci.subStatus,  \n" +
                "				cp.headerComment= tci.headerComment,  \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,  \n" +
                "				cp.totalAmount = IFNULL(tci.totalAmount,0) ,  \n" +
                "				cp.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				cp.updatedBy = puserID,  \n" +
                "				cp.updateByRoleId = puserRoleID  ,  \n" +
                "				cp.billingAddress= tci.billingAddress,  \n" +
                "				cp.shippingAddress= tci.shippingAddress,  \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,  \n" +
                "				cp.contactPersonId = tci.contactPersonId,  \n" +
                "				cp.billToId = tci.billToId,  \n" +
                "				cp.shipToId  = tci.shipToId,  \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId,  \n" +
                "				cp.revision = LPAD(tci.revision,2,'0'),  \n" +
                "				cp.isZeroValue = IFNULL(tci.isZeroValue,0)  ,  \n" +
                "				cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),  \n" +
                "				cp.poRevision = tci.poRevision ,  \n" +
                "				cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation,  \n" +
                "				cp.carrierID = tci.carrierID,  \n" +
                "				cp.carrierAccountNumber = tci.carrierAccountNumber,  \n" +
                "                cp.billingContactPersonID = tci.billingContactPersonID,  \n" +
                "                cp.billingContactPerson = tci.billingContactPerson,  \n" +
                "                cp.shippingContactPersonID = tci.shippingContactPersonID,  \n" +
                "                cp.shippingContactPerson = tci.shippingContactPerson,  \n" +
                "                 cp.intermediateContactPersonID = tci.intermediateContactPersonID,  \n" +
                "                cp.intermediateContactPerson = tci.intermediateContactPerson  \n" +
                "			WHERE cp.id=pInvoiceID  \n" +
                "			AND cp.transType = pTransType;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "  \n" +
                "			IF (pTransType = 'C') THEN  \n" +
                "				/* get total refunded amount till now  */  \n" +
                "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedOfCreditMemo  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refRefundCustCreditMemoID = pInvoiceID  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "				;  \n" +
                "  \n" +
                "				/* check agreed refund amount is less than total refunded amount , if yes then give error  */  \n" +
                "				IF (IFNULL((SELECT agreedRefundAmt FROM temp_customerInvoice),0) < vTotRefundIssuedOfCreditMemo) THEN  \n" +
                "					SET vIsAgreedRefundLessThanTotIssued = 1;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (vIsAgreedRefundLessThanTotIssued = 0) THEN  \n" +
                "				# in case of tariff invoice & credit memo update all other field  \n" +
                "				UPDATE customer_packingslip  cp  \n" +
                "					JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id  \n" +
                "				SET	cp.status= tci.status,  \n" +
                "					cp.subStatus= tci.subStatus,  \n" +
                "					cp.poNumber= tci.poNumber,  \n" +
                "					cp.poDate= tci.poDate,  \n" +
                "					cp.soNumber= tci.soNumber,  \n" +
                "					cp.soDate= tci.soDate,  \n" +
                "					cp.packingSlipNumber= tci.packingSlipNumber,  \n" +
                "					cp.packingSlipDate= tci.packingSlipDate,  \n" +
                "					cp.invoiceDate= tci.invoiceDate,  \n" +
                "					cp.shippingMethodID= tci.shippingMethodID,  \n" +
                "					cp.headerComment= tci.headerComment,  \n" +
                "					cp.packingSlipComment= tci.packingSlipComment,  \n" +
                "					cp.billingAddress= tci.billingAddress,  \n" +
                "					cp.shippingAddress= tci.shippingAddress,  \n" +
                "					cp.intermediateAddress= tci.intermediateAddress,  \n" +
                "					cp.totalAmount= IFNULL(tci.totalAmount,0),  \n" +
                "					cp.freeOnBoardId= tci.freeOnBoardId,  \n" +
                "					cp.termsId= tci.termsId,  \n" +
                "					cp.termsDays = vTermsDays,  \n" +
                "					cp.salesCommissionTo= tci.salesCommissionTo ,  \n" +
                "					cp.refDebitMemoNumber = tci.refDebitMemoNumber,  \n" +
                "					cp.refDebitMemoDate = tci.refDebitMemoDate,  \n" +
                "					cp.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "					cp.updatedBy = puserID,  \n" +
                "					cp.updateByRoleId = puserRoleID,  \n" +
                "					cp.rmaNumber= tci.rmaNumber,  \n" +
                "					cp.billToId = tci.billToId,  \n" +
                "					cp.shipToId  = tci.shipToId,  \n" +
                "					cp.intermediateShipmentId = tci.intermediateShipmentId ,  \n" +
                "					cp.invoiceNumber = tci.invoiceNumber ,  \n" +
                "					cp.contactPersonId = tci.contactPersonId,  \n" +
                "					cp.revision =  LPAD(tci.revision,2,'0'),  \n" +
                "					cp.isZeroValue = IFNULL(tci.isZeroValue,0),  \n" +
                "					cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),  \n" +
                "					cp.poRevision = tci.poRevision ,  \n" +
                "					cp.isMarkForRefund = tci.isMarkForRefund,  \n" +
                "					cp.agreedRefundAmt = IFNULL(tci.agreedRefundAmt,0),  \n" +
                "					cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation,  \n" +
                "					cp.refundStatus = (CASE WHEN pTransType = 'C' THEN  \n" +
                "								(CASE WHEN tci.isMarkForRefund = 1 THEN  \n" +
                "									(CASE WHEN vTotRefundIssuedOfCreditMemo = 0 THEN 'PE'  \n" +
                "										WHEN vTotRefundIssuedOfCreditMemo < ABS(IFNULL(tci.totalAmount,0)) THEN 'PR'  \n" +
                "										WHEN vTotRefundIssuedOfCreditMemo = ABS(IFNULL(tci.totalAmount,0)) THEN 'FR'  \n" +
                "									   END)  \n" +
                "								ELSE 'NA' END)  \n" +
                "							ELSE NULL END)  ,  \n" +
                "					cp.carrierID = tci.carrierID,  \n" +
                "					cp.carrierAccountNumber = tci.carrierAccountNumber,  \n" +
                "                    cp.billingContactPersonID = tci.billingContactPersonID,  \n" +
                "                cp.billingContactPerson = tci.billingContactPerson,  \n" +
                "                cp.shippingContactPersonID = tci.shippingContactPersonID,  \n" +
                "                cp.shippingContactPerson = tci.shippingContactPerson,  \n" +
                "                 cp.intermediateContactPersonID = tci.intermediateContactPersonID,  \n" +
                "                cp.intermediateContactPerson = tci.intermediateContactPerson  \n" +
                "				 WHERE cp.id = pInvoiceID  \n" +
                "				 AND cp.transType = pTransType;  \n" +
                "  \n" +
                "			 END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "  \n" +
                "	  /* Resp[0] - created invoice/credit memo mst ID  */  \n" +
                "	  SELECT pInvoiceID invoiceID;  \n" +
                "	/* Resp[1] - detail Id  */  \n" +
                "	SELECT id  detId ,refSalesorderDetId , reflineID  \n" +
                "	FROM customer_packingslip_det  \n" +
                "	WHERE  refCustPackingSlipID = pInvoiceID  \n" +
                "	AND isDeleted = 0;  \n" +
                "  \n" +
                "	/* Resp[2] - store procedure status  */  \n" +
                "	  IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	  ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	  /* Resp[3] -  Agreed Refund Amount Less Than Total Issued Amout */  \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
                "		SELECT 1 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfCreditMemo AS totRefundIssuedAgainstCreditMemo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfCreditMemo AS totRefundIssuedAgainstCreditMemo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	  DROP TEMPORARY TABLE IF EXISTS temp_part_data ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6012,'2.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 6012:
			  allDbChangesArray.push(
			   /* **************************** Add Script Version -> 14-03-2022 *********************************** */
			 	"SELECT pageID INTO @paretID FROM page_detail WHERE pageName = 'Configuration';  \n" +
			 	"INSERT INTO page_detail (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `orderBy`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`)  \n" +
			 	"VALUES ('Date Code Format', '0', '0', 'setting.system.datecodeformat', 'app.datecodeformat', '/datecodeformat', 'Date Code Format', @paretID, '0', '8.10', 't-icons-dc-format', '1', '1', '0', '1', 'Date Code Format', '1');  \n" +
                /* **************************** Add Script Version -> 14-03-2022 *********************************** */
                	"INSERT INTO identity(`type`,`prefix`,`maxvalue`,numberLength,remark,isdeleted,createdby)VALUES  \n" +
			 	"                ('DCFormatSystemID','DCF',1,10,'DC Format systemid next generate from this id',0,1);  \n" +
			 	/* **************************** Add Script Version -> 14-03-2022 *********************************** */
			 	"INSERT INTO feature_mst(featureName, isActive, isDeleted, createdBy, updatedBy)  \n" +
			 	"                VALUES ('Allow to Update UMID Date Code Format', 1, 0, 1,1);  \n" +
			 	/* **************************** Add Script Version -> 14-03-2022 *********************************** */
			 	"INSERT INTO table_mapping_details (`tabel_name`, `display_page_name`) VALUES ('mfgcodemstManufacturer', 'Manufacturer');  \n" +
                /* **************************** Add Script Version -> 14-03-2022 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (6013,'2.00','V1','User Story 40723: UMID Create page enhancement points [Lot Code Changes] - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
        case 6013:
			  allDbChangesArray.push(
			   /* **************************** Add Script Version -> 14-03-2022 *********************************** */
			 	"CREATE TABLE date_code_format(  \n" +
			 	"                                        id INT NOT NULL AUTO_INCREMENT,  \n" +
			 	"                                        systemID VARCHAR(30) NOT NULL,  \n" +
			 	"                                        systemGenerated TINYINT NOT NULL DEFAULT FALSE,  \n" +
			 	"                                        category VARCHAR(5) NOT NULL,  \n" +
			 	"                                        dateCodeFormat VARCHAR(50) NOT NULL,  \n" +
			 	"                                        description VARCHAR(2000),  \n" +
			 	"                                        createdBy VARCHAR(255) NOT NULL,  \n" +
			 	"                                        createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
			 	"                                        updatedBy VARCHAR(255),  \n" +
			 	"                                        updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,  \n" +
			 	"                                        updateByRoleId INT,  \n" +
			 	"                                        isDeleted TINYINT NOT NULL DEFAULT FALSE,  \n" +
			 	"                                        deletedAt DATETIME,  \n" +
			 	"                                        deletedBy VARCHAR(255),  \n" +
			 	"                                        deleteByRoleId INT,  \n" +
			 	"                                        createByRoleId INT,  \n" +
			 	"                   PRIMARY KEY (id)  \n" +
			 	"                        );  \n" +
               /* **************************** Add Script Version -> 14-03-2022 *********************************** */
               "ALTER TABLE COMPONENT ADD COLUMN isDateCodeFormat TINYINT DEFAULT FALSE;  \n" +
                  "ALTER TABLE `component` ADD dateCodeFormatID INT;  \n" +
                  "ALTER TABLE `component` ADD CONSTRAINT FK_component_dateCodeFormatID  \n" +
                  "        FOREIGN KEY (dateCodeFormatID) REFERENCES date_code_format(id);  \n" +
			 	/* **************************** Add Script Version -> 14-03-2022 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (6014,'2.00','V1','User Story 40723: UMID Create page enhancement points [Lot Code Changes] - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
		  case 6014:
			  allDbChangesArray.push(
			   /* **************************** Add Script Version -> 14-03-2022 *********************************** */
			 	"ALTER TABLE mfgcodemst  \n" +
			 	"DROP FOREIGN KEY FK_mfgcodemst_dateCodeFormatID;  \n" +
			 	"ALTER TABLE mfgcodemst  \n" +
			 	"DROP INDEX FK_mfgcodemst_dateCodeFormatID ;  \n" +
			 	"ALTER TABLE mfgcodemst  \n" +
			 	"ADD CONSTRAINT FK_mfgcodemst_dateCodeFormatID  \n" +
			 	"  FOREIGN KEY (dateCodeFormatID)  \n" +
			 	"  REFERENCES date_code_format (id);  \n" +
			 	/* **************************** Add Script Version -> 14-03-2022 *********************************** */
			 	"ALTER TABLE component_sid_stock  \n" +
			 	"DROP FOREIGN KEY FK_component_sid_stock_mfrDateCodeFormatID;  \n" +
			 	"ALTER TABLE component_sid_stock  \n" +
			 	"DROP INDEX FK_component_sid_stock_mfrDateCodeFormatID;  \n" +
			 	"ALTER TABLE component_sid_stock  \n" +
			 	"ADD CONSTRAINT FK_component_sid_stock_mfrDateCodeFormatID  \n" +
			 	"  FOREIGN KEY (mfrDateCodeFormatID)  \n" +
			 	"  REFERENCES date_code_format (id);  \n" +
			 	"  \n" +
			 	"ALTER TABLE component_sid_stock ADD COLUMN dateCodeFormatID INT;  \n" +
			 	/* **************************** Add Script Version -> 14-03-2022 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (6015,'2.00','V1','User Story 40723: UMID Create page enhancement points [Lot Code Changes] - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
case 6015:
			  allDbChangesArray.push(
                    /* **************************** Add Script Version -> 14-03-2022 *********************************** */
			 	"DROP TRIGGER IF EXISTS `Trg_AU_Date_Dode_Format`;  \n" +
			 	"CREATE TRIGGER `Trg_AU_Date_Dode_Format` AFTER UPDATE ON `date_code_format` FOR EACH ROW BEGIN  \n" +
			 	"    IF IFNULL(OLD.description,0) != IFNULL(NEW.description,0) THEN  \n" +
			 	"       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
			 	"       VALUES(\"DATE_CODE_FORMAT\",CAST(NEW.id AS CHAR),'Description',CAST(OLD.description AS CHAR),  \n" +
			 	"       CAST(NEW.description AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
			 	"	END IF;  \n" +
			 	"  \n" +
			 	"END;  \n" +
			  /* **************************** Add Script Version -> 14-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
				"CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
				"	IN ppageIndex INT,  \n" +
				"	IN precordPerPage INT,  \n" +
				"	IN pOrderBy VARCHAR(255),  \n" +
				"	IN pWhereClause VARCHAR(16383),  \n" +
				"	IN pWHId INT,  \n" +
				"	IN pBinId INT,  \n" +
				"	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
				"	IN pMountingTypeIDs VARCHAR(16383),  \n" +
				"	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
				"	IN pAssyIDs VARCHAR(16383),  \n" +
				"	IN pRestrictPart TINYINT,  \n" +
				"	IN pExpireMaterial TINYINT,  \n" +
				"	IN pPartId INT,  \n" +
				"	IN pIsShowPackagingAlias TINYINT,  \n" +
				"	IN pStandardIDs VARCHAR(16383),  \n" +
				"	IN pStandardsClassIDs VARCHAR(16383),  \n" +
				"	IN pCostCategoryIDs VARCHAR(16383),  \n" +
				"	IN pDateCode VARCHAR(16383),  \n" +
				"	IN pIsAvailableToSell TINYINT,  \n" +
				"	IN pIsRestrictedUMID TINYINT,  \n" +
				"	IN pIsInternalStock TINYINT,  \n" +
				"	IN pIsCustomerStock TINYINT,  \n" +
				"	IN pdepartmentIDs VARCHAR(16383),  \n" +
				"	IN pwarehouseType VARCHAR(255),  \n" +
				"	IN pWarehouse VARCHAR(16383),  \n" +
				"	IN pExpiredDay INT,  \n" +
				"	IN pRohsStatusIDs VARCHAR(16383),  \n" +
				"	IN pCustomerId INT,  \n" +
				"	IN pFromDate DATE,  \n" +
				"	IN pToDate DATE,  \n" +
				"	IN pSearchTextAttribute LONGTEXT,  \n" +
				"    IN pMfgCodeIDs VARCHAR(16383),  \n" +
				"    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
				"	IN pInventoryType VARCHAR(255),  \n" +
				"    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
				"    IN pIsNonCofc TINYINT,  \n" +
				"    IN pEmployeeIDs VARCHAR(16383)  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE pOffset INT;  \n" +
				"	DECLARE rowNumWhere VARCHAR(255);  \n" +
				"	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
				"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
				"	DECLARE v_TimeZone VARCHAR(50);  \n" +
				"	DECLARE attributeSearchString LONGTEXT;  \n" +
				"	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
				"	DECLARE attributeSearchChip  VARCHAR(500) DEFAULT NULL;  \n" +
				"	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
				"	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
				"    DECLARE v_ExpiryDate datetime;  \n" +
				"    DECLARE v_PartIDs VARCHAR(16383);  \n" +
				"	DECLARE vMfgCodeFormat INT;  \n" +
				"  \n" +
				"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
				"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
				"	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
				"	SET v_DescriptionWhereClause = '';  \n" +
				"    SET v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
				"  \n" +
				"	IF (pOrderBy IS NOT NULL) THEN  \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
				"	ELSE  \n" +
				"		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
				"		SET pWhereClause = ' 1=1';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
				"		SET pInnerQueryWhereClause = ' ';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    IF(pIsNonCofc = 1) THEN  \n" +
				"		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    /* Non COFc records filter */  \n" +
				"	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
				"		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    IF(pEmployeeIDs IS NOT NULL AND pEmployeeIDs != '') THEN  \n" +
				"		SET pWhereClause = CONCAT(pWhereClause, ' AND createdBy in (', pEmployeeIDs, ') ');  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
				"		IF(pIsShowPackagingAlias = 1) THEN  \n" +
				"			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
				"            into	v_PartIDs  \n" +
				"			FROM 	component c  \n" +
				"			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
				"			WHERE 	c.id = pPartId  \n" +
				"			AND 	c.isDeleted = 0;  \n" +
				"		ELSE  \n" +
				"			select pPartId into v_PartIDs;  \n" +
				"		END IF;  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	/*below query need to refactor*/  \n" +
				"	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
				"		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
				"		SET attributeSearchString = pSearchTextAttribute;  \n" +
				"		do_this:  \n" +
				"		LOOP  \n" +
				"			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
				"			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
				"			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
				"			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
				"			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
				"			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
				"			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
				"				LEAVE do_this;  \n" +
				"			END IF;  \n" +
				"		END LOOP do_this;  \n" +
				"	END IF;  \n" +
				"	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
				"		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
				"		FROM 	kit_allocation_assy_detail  \n" +
				"		WHERE 	isDeleted = 0  \n" +
				"			AND partId IN (SELECT id FROM component WHERE isDeleted = 0 AND mfgcodeid=pCustomerId);  \n" +
				"	END IF;  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
				"	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
				"	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
				"		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
				"		SELECT 	k.refUIDId  \n" +
				"		FROM 	kit_allocation k  \n" +
				"		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
				"		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
				"		AND	k.status = 'A';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
				"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
				"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
				"	ELSE  \n" +
				"		SET rowNumWhere = '';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    DROP temporary table if exists temp_component_sid_stock;  \n" +
				"    CREATE temporary table temp_component_sid_stock(  \n" +
				"		  id int NOT NULL DEFAULT '0',  \n" +
				"		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
				"		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
				"		  uid varchar(15) DEFAULT NULL,  \n" +
				"		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
				"		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
				"		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
				"		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
				"		  fromUIDId int DEFAULT NULL,  \n" +
				"		  fromUID varchar(15) DEFAULT NULL,  \n" +
				"		  parentUIDId int DEFAULT NULL,  \n" +
				"		  parentUID varchar(15) DEFAULT NULL,  \n" +
				"		  mfgcodeID int NOT NULL,  \n" +
				"		  mfg text,  \n" +
				"		  refcompid int DEFAULT NULL,  \n" +
				"		  mfgPN varchar(100) NOT NULL,  \n" +
				"		  PIDCode varchar(109) NOT NULL,  \n" +
				"		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
				"		  mslLevel varchar(58) DEFAULT NULL,  \n" +
				"		  RoHSStatusID int NOT NULL,  \n" +
				"		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
				"		  rohsName varchar(50) DEFAULT NULL,  \n" +
				"		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
				"		  spq decimal(18,8) DEFAULT NULL,  \n" +
				"		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
				"		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
				"		  uom int DEFAULT NULL,  \n" +
				"          uomClassID int DEFAULT NULL,  \n" +
				"		  uomName varchar(100) NOT NULL,  \n" +
				"		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
				"		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
				"		  packaginggroupID int DEFAULT NULL,  \n" +
				"		  packaging int DEFAULT NULL,  \n" +
				"		  packagingName varchar(100) NOT NULL,  \n" +
				"		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
				"		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
				"		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
				"		  costCategoryID int DEFAULT NULL,  \n" +
				"		  costCategory varchar(147) DEFAULT NULL,  \n" +
				"		  lotCode varchar(255) DEFAULT NULL,  \n" +
				"		  dateCode varchar(10) DEFAULT NULL,  \n" +
				"		  UMIDrohsStatusID int NOT NULL,  \n" +
				"		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
				"		  binID int DEFAULT NULL,  \n" +
				"		  location varchar(110) DEFAULT NULL,  \n" +
				"		  side varchar(5) NOT NULL DEFAULT '',  \n" +
				"		  warehouseID int DEFAULT NULL,  \n" +
				"		  warehouse varchar(50) NOT NULL,  \n" +
				"		  warehouseType varchar(50) DEFAULT NULL,  \n" +
				"		  department varchar(50) NOT NULL,  \n" +
				"		  departmentID int NOT NULL DEFAULT '0',  \n" +
				"		  fromBin int DEFAULT NULL,  \n" +
				"		  fromBinName varchar(110) DEFAULT NULL,  \n" +
				"		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
				"		  fromWarehouse int DEFAULT NULL,  \n" +
				"		  fromWHName varchar(50) NOT NULL,  \n" +
				"		  fromDepartment int DEFAULT NULL,  \n" +
				"		  fromDepartmentName varchar(50) NOT NULL,  \n" +
				"		  orgRecBin int DEFAULT NULL,  \n" +
				"		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
				"		  orgRecWarehouse int DEFAULT NULL,  \n" +
				"		  orgRecWHName varchar(50) NOT NULL,  \n" +
				"		  orgRecDepartment int DEFAULT NULL,  \n" +
				"		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
				"		  expiryDate date DEFAULT NULL,  \n" +
				"		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
				"		  pcbPerArray int DEFAULT NULL,  \n" +
				"		  nickName varchar(50) DEFAULT NULL,  \n" +
				"		  specialNote varchar(1000) DEFAULT NULL,  \n" +
				"		  isinStk tinyint(1) DEFAULT NULL,  \n" +
				"		  woNumber varchar(255) DEFAULT NULL,  \n" +
				"		  refRestrictUMIDId int DEFAULT NULL,  \n" +
				"		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
				"		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
				"		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
				"		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
				"		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
				"		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
				"		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
				"		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
				"		  mountingTypeID int NOT NULL,  \n" +
				"		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
				"		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
				"		  partPackage varchar(50) DEFAULT NULL,  \n" +
				"		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
				"		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
				"		  detailDescription text,  \n" +
				"		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
				"		  customerID int DEFAULT NULL,  \n" +
				"		  customer text,  \n" +
				"		  assyID int DEFAULT NULL,  \n" +
				"		  assembly varchar(109),  \n" +
				"		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
				"		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
				"		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
				"          cpnMFGCodeID INT DEFAULT NULL,  \n" +
				"		  cpnMFGCode text,  \n" +
				"		  refCPNMFGPNID int DEFAULT NULL,  \n" +
				"		  cpnMFGPN varchar(100),  \n" +
				"		  refSupplierPartId int DEFAULT NULL,  \n" +
				"		  supplierMFGCode text,  \n" +
				"		  supplieMFGPN varchar(100),  \n" +
				"		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
				"		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
				"		  isTransit varchar(10) DEFAULT NULL,  \n" +
				"		  searchUser varchar(50) DEFAULT NULL,  \n" +
				"		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
				"		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
				"		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
				"		  createdAt varchar(50) DEFAULT NULL,  \n" +
				"		  createdBy varchar(255) NOT NULL,  \n" +
				"		  createdByName varchar(50) DEFAULT NULL,  \n" +
				"		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
				"		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
				"		  updatedAt varchar(50) DEFAULT NULL,  \n" +
				"		  updatedBy varchar(255) DEFAULT NULL,  \n" +
				"		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
				"		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
				"		  allocatedToKit text,  \n" +
				"		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
				"		  packingSupplierName text,  \n" +
				"		  packingSlipId int DEFAULT NULL,  \n" +
				"		  packingSlipSupplierId int DEFAULT NULL,  \n" +
				"          packingSlipNumber VARCHAR(100) DEFAULT NULL,  \n" +
				"          cocDocumentCount int default 0,  \n" +
				"          parentCofCDocumentCount int default 0,  \n" +
				"          createByRoleId int default null,  \n" +
				"          updateByRoleId int default null,  \n" +
				"          isReservedStock TINYINT DEFAULT FALSE,  \n" +
				"          reservedStock VARCHAR(10),  \n" +
				"          custAssyPN varchar(100) DEFAULT NULL  \n" +
				"		);  \n" +
				"	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
				"					(		id, 				scanlabel, 			umidPrefix, 			uid,					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
				"							stockInventoryType, displayStockInventoryType, 					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
				"                            parentUID, 			mfgcodeID, 			mfg, 					refcompid, 				mfgPN, 					PIDCode,  \n" +
				"                            packageQty, 		mslLevel, 			RoHSStatusID, 			rohsIcon, 				rohsName, 				mfgPNDescription,  \n" +
				"                            spq, 				pkgQty, 			pkgUnit, 				uom, 					uomClassID, 			uomName,  \n" +
				"                            orgPkgUnit, 		orgQty, 			packaginggroupID, 		packaging, 				packagingName, 			printStatus,  \n" +
				"                            tentativePrice, 	costScrapQty, 		costCategoryID, 		costCategory, 			lotCode, 				dateCode,  \n" +
				"                            UMIDrohsStatusID, 	UMIDrohsStatus, 	binID, 					location, 				side, 					warehouseID,  \n" +
				"                            warehouse, 			warehouseType, 		department, 			departmentID, 			fromBin, 				fromBinName,  \n" +
				"                            fromSide, 			fromWarehouse, 		fromWHName, 			fromDepartment, 		fromDepartmentName, 	orgRecBin,  \n" +
				"                            orgRecBinName, 		orgRecWarehouse, 	orgRecWHName, 			orgRecDepartment, 		orgRecDepartmentName, 	expiryDate,  \n" +
				"                            expiredStatus, 		pcbPerArray, 		nickName, 				specialNote, 			isinStk, 				woNumber,  \n" +
				"                            refRestrictUMIDId, 	isUMIDRestrict, 	UMIDRestricted, 		restrictUsePermanently, restrictUSEwithpermission,  \n" +
				"                            restrictPackagingUsePermanently, 		restrictPackagingUseWithpermission, 			reasonUMIDRestricted, 	countOfRestrictUMID,  \n" +
				"                            mountingTypeID, 	mountingTypeName, 	externalPartPackage, 	partPackage, 			internalPartPackage, 	isCustom,  \n" +
				"                            detailDescription, 	pictureCount, 		customerID, 			customer, 				assyID,					assembly,  \n" +
				"                            cpn, 				mfgAvailable, 		customerConsign, 		cpnMFGCodeID, 			cpnMFGCode, 			refCPNMFGPNID,  \n" +
				"                            cpnMFGPN, 			refSupplierPartId, 	supplierMFGCode, 		supplieMFGPN, 			totalScrapUnit, 		perScrapQty,  \n" +
				"                            isTransit, 			searchUser, 		mfrDateCodeFormatID, 	mfrDateCode, 			mfrDateCodeFormat, 		createdAt,  \n" +
				"                            createdBy, 			createdByName, 		createdbyRole, 			createdUserCode, 		createByRoleId, 		updatedAt,  \n" +
				"                            updatedBy, 			umidModifiedBy, 	updatedbyRole, 			updateByRoleId, 		allocatedToKit, 		packingSlipName,  \n" +
				"                            packingSupplierName,packingSlipId, 		packingSlipSupplierId, 	packingSlipNumber,		isReservedStock,		reservedStock,  \n" +
				"                            custAssyPN)  \n" +
				"					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
				"							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
				"							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
				"							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
				"							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
				"                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
				"                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
				"							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
				"							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
				"							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
				"							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
				"							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
				"							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
				"							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
				"							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
				"							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
				"							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCodeID,			cpnMFGCode, 		 	refCPNMFGPNID,  \n" +
				"                            cpnMFGPN,  			refSupplierPartId,	supplierMFGCode,		supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
				"							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
				"							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
				"                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
				"                            packingSupplierName,packingSlipId,		packingSlipSupplierId,	packingSlipNumber,		isReservedStock,		reservedStock,  \n" +
				"                            custAssyPN  \n" +
				"		FROM 		(  \n" +
				"					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
				"								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
				"										WHEN css.receiveMaterialType = 'CP' THEN 'Customer Consigned Part'  \n" +
				"										ELSE NULL  \n" +
				"								END) displayReceiveMaterialType,  \n" +
				"								css.stockInventoryType,  \n" +
				"								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Incoming Stock'  \n" +
				"										WHEN css.stockInventoryType = 'OI' THEN 'Move Non-Q2C to Q2C Stock'  \n" +
				"										WHEN css.stockInventoryType = 'AI' THEN 'Non-UMID Assembly Stock'  \n" +
				"										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
				"										ELSE NULL  \n" +
				"								END) displayStockInventoryType,  \n" +
				"								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
				"								fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat ,\") AS mfg,			css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
				"								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
				"								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
				"								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
				"                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
				"                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
				"                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * IFNULL(c.price, 0)), 2) costScrapQty,  \n" +
				"                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * 100), 2) perScrapQty,  \n" +
				"                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
				"								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
				"								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
				"								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
				"								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
				"								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
				"								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
				"								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
				"								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
				"								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
				"								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
				"								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
				"								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
				"								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
				"								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,  \n" +
				"								fun_GetFormattedMfgCode(cust.mfgCode, cust.mfgName,\", vMfgCodeFormat ,\") AS customer,  \n" +
				"								css.assyID,					assy.PIDCode assembly,  \n" +
				"								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
				"								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
				"								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
				"								css.refCPNMFGPNID,	 m_cpn.id cpnMFGCodeID,  \n" +
				"                                fun_GetFormattedMfgCode(m_cpn.mfgCode, m_cpn.mfgName,\", vMfgCodeFormat ,\") AS cpnMFGCode,  \n" +
				"                                cpn_comp.mfgPN cpnMFGPN,  \n" +
				"                                css.refSupplierPartId,  \n" +
				"								fun_GetFormattedMfgCode(m_supp.mfgCode, m_supp.mfgName,\", vMfgCodeFormat ,\") AS supplierMFGCode,  \n" +
				"                                supp_comp.mfgPN supplieMFGPN,  \n" +
				"								(IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0)) totalScrapUnit,  \n" +
				"								null isTransit,  \n" +
				"								null searchUser,  \n" +
				"								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
				"								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
				"								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
				"								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
				"								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
				"								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
				"								kit.kitname allocatedToKit,  \n" +
				"								null packingSlipName,  \n" +
				"								null packingSupplierName,  \n" +
				"								null packingSlipId,  \n" +
				"								null packingSlipSupplierId,  \n" +
				"                                NULL packingSlipNumber,  \n" +
				"                                css.isReservedStock,  \n" +
				"                                IF(css.isReservedStock = 0,'No','Yes') AS reservedStock,		c.custAssyPN  \n" +
				"					FROM 		component_sid_stock css  \n" +
				"					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
				"						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
				"						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
				"                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
				"                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
				"						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
				"									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
				"								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
				"									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
				"								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
				"									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
				"								else ''  \n" +
				"                        end),  \n" +
				"                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
				"                        /*below query need to refactor*/  \n" +
				"                        (case when (pIsAvailableToSell = 1) THEN  \n" +
				"							' AND not exists (  \n" +
				"									SELECT 	1  \n" +
				"									FROM 	rfq_lineitems_alternatepart a  \n" +
				"									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
				"									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
				"									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
				"									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
				"									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
				"								)  \n" +
				"						' else '' end),  \n" +
				"					\"  \n" +
				"					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
				"					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
				"					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
				"					inner join uoms u on css.uom = u.id  \n" +
				"					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
				"					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
				"					inner join binmst b on css.binID = b.id \" ,  \n" +
				"						(Case  \n" +
				"							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
				"							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
				"							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
				"                            else ''  \n" +
				"						end),  \n" +
				"					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
				"						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
				"                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
				"						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
				"					\"inner join binmst fb on css.fromBin = fb.id  \n" +
				"					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
				"					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
				"					inner join binmst ob on css.orgRecBin = ob.id  \n" +
				"					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
				"					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
				"					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
				"					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
				"					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
				"					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
				"					left join (  \n" +
				"								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
				"								FROM 		component_sid_stock_history cssh  \n" +
				"								where 		cssh.scrappedUnit > 0  \n" +
				"								GROUP BY 	cssh.refUIDId  \n" +
				"					) cssh on css.id = cssh.refUIDId  \n" +
				"                   left join (  \n" +
				"								SELECT 		vu.umidid,	SUM((IFNULL(vu.scrappedunit,0) - IFNULL(vu.scrapExpiredUnit,0))) AS kitScrappepUnit  \n" +
				"								FROM 		vu_material_consumption_scrapped_det vu  \n" +
				"                                LEFT JOIN  component_sid_stock_history cssh ON cssh.id = vu.componentSIDStockHistoryID AND cssh.isDeleted = 0  \n" +
				"								WHERE 		vu.scrappedunit > 0  \n" +
				"								GROUP BY 	vu.umidid  \n" +
				"					) vuu on vuu.umidid = css.id  \n" +
				"					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
				"					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
				"					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isDeleted = 0  \n" +
				"					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
				"					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
				"					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
				"					left join (  \n" +
				"						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
				"						from (  \n" +
				"							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
				"									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
				"							from component_sid_stock_restrict_umid rest_umid  \n" +
				"						) css_rst where css_rst.rnk = 1  \n" +
				"					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
				"					left join (  \n" +
				"						SELECT 		k.refUIDId,  \n" +
				"									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
				"						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
				"						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
				"						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
				"						INNER JOIN	component c ON k.assyID = c.id  \n" +
				"						WHERE 		k.status = 'A'  \n" +
				"						GROUP BY 	k.refUIDId  \n" +
				"					) kit  ON kit.refUIDId = css.id  \n" +
				"					WHERE 	css.isdeleted = 0\",  \n" +
				"						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
				"								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
				"							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
				"								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
				"							  when (pCustomerId IS NOT NULL) then  \n" +
				"								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
				"                            else ''  \n" +
				"						end),  \n" +
				"                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
				"                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
				"                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
				"						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
				"						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
				"						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
				"						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
				"                        (case when (pExpireMaterial = 1) THEN  \n" +
				"									(case when (pExpiredDay = 0) THEN  \n" +
				"										CONCAT(' AND css.expiryDate is not null AND css.expiryDate = fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") ')  \n" +
				"									ELSE  \n" +
				"										CONCAT(' AND css.expiryDate is not null AND css.expiryDate BETWEEN fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") AND (fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") + INTERVAL ', pExpiredDay,' DAY ) ')  \n" +
				"									END)  \n" +
				"							  else ''  \n" +
				"						end),  \n" +
				"                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
				"								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
				"							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
				"								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
				"							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
				"								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
				"							 else ''  \n" +
				"                        end),  \n" +
				"						v_DescriptionWhereClause,  \n" +
				"                        pInnerQueryWhereClause,  \n" +
				"				\") As tempUMID\"  \n" +
				"			);  \n" +
				"	PREPARE tempSQLQuery FROM @temp_component_sid_stock;  \n" +
				"	EXECUTE tempSQLQuery;  \n" +
				"	DEALLOCATE PREPARE tempSQLQuery;  \n" +
				"  \n" +
				"    # Update count for self documents  \n" +
				"	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
				"	set t.cocDocumentCount = g.cofcCount  \n" +
				"	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
				"  \n" +
				"	# Update count for parent documents  \n" +
				"	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
				"	set t.parentCofCDocumentCount = g.cofcCount  \n" +
				"	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
				"  \n" +
				"    # Update CofC detail  \n" +
				"	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
				"	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
				"											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
				"										else null  \n" +
				"								  end),  \n" +
				"			t.packingSupplierName = fun_GetFormattedMfgCode(ps.mfgCode, ps.mfgName, vMfgCodeFormat),  \n" +
				"			t.packingSlipId = ps.packingSlipId,  \n" +
				"			t.packingSlipSupplierId = ps.packingSlipSupplierId,  \n" +
				"            t.packingSlipNumber = ps.packingSlipNumber  \n" +
				"	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
				"	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
				"  \n" +
				"	# Update CofC detail  \n" +
				"	Update 	temp_component_sid_stock t  \n" +
				"	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
				"	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
				"	and		t.packingSlipId is null  \n" +
				"	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
				"  \n" +
				"    # Update created by role  \n" +
				"    Update temp_component_sid_stock t  \n" +
				"    inner join roles r on r.id = t.createByRoleId  \n" +
				"	set t.createdbyRole = r.name;  \n" +
				"  \n" +
				"    # Update updated by role  \n" +
				"    Update temp_component_sid_stock t  \n" +
				"    inner join roles r on r.id = t.updateByRoleId  \n" +
				"	set t.updatedbyRole = r.name;  \n" +
				"  \n" +
				"    # Update created by name  \n" +
				"    Update temp_component_sid_stock t  \n" +
				"    inner join users u on u.id = t.createdBy  \n" +
				"    inner join employees emp on emp.id = u.employeeID  \n" +
				"	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
				"  \n" +
				"    # Update updated by name  \n" +
				"    Update temp_component_sid_stock t  \n" +
				"    inner join users u on  u.id = t.updatedBy  \n" +
				"    inner join employees emp  on emp.id = u.employeeID  \n" +
				"	set t.umidModifiedBy = emp.initialName ;  \n" +
				"  \n" +
				"    # Update MFR Date Code Format  \n" +
				"    Update temp_component_sid_stock t  \n" +
				"	inner join date_code_format d on d.id = t.mfrDateCodeFormatID  \n" +
				"	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
				"  \n" +
				"    # Update In Transit Data  \n" +
				"	Update temp_component_sid_stock t  \n" +
				"    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
				"	set t.isTransit = 'Yes',  \n" +
				"		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
				"							when (messagetype = 1001) then 'Unauthorized'  \n" +
				"							else ''  \n" +
				"                        end);  \n" +
				"  \n" +
				"	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
				"  \n" +
				"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
				"	PREPARE query1 FROM @SQLStatement1;  \n" +
				"	EXECUTE query1;  \n" +
				"	DEALLOCATE PREPARE query1;  \n" +
				"  \n" +
				"	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \" AND warehouseID) as warehouseDetail\");  \n" +
				"	PREPARE query2 FROM @SQLStatement2;  \n" +
				"	EXECUTE query2;  \n" +
				"	DEALLOCATE PREPARE query2;  \n" +
				"  \n" +
				"	SET @SQLStatement3 = CONCAT(\" SELECT DISTINCT mfgcodeID AS id, mfg AS mfgCodeName from ( \", @vFromSQLQuery, \" AND mfgcodeID ) as mfrDetail\");  \n" +
				"	PREPARE query3 FROM @SQLStatement3;  \n" +
				"	EXECUTE query3;  \n" +
				"	DEALLOCATE PREPARE query3;  \n" +
				"  \n" +
				"    SET @SQLStatement4 = CONCAT(\" SELECT DISTINCT packingSlipSupplierId AS id, packingSupplierName AS  mfgCodeName from ( \", @vFromSQLQuery, \" AND packingSlipSupplierId ) as supplierDetail\");  \n" +
				"	PREPARE query4 FROM @SQLStatement4;  \n" +
				"	EXECUTE query4;  \n" +
				"	DEALLOCATE PREPARE query4;  \n" +
				"  \n" +
				"	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
				"    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
				"	EXECUTE mainQuery;  \n" +
				"	DEALLOCATE PREPARE mainQuery;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 14-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
				"CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(  \n" +
				"	IN pGoodPart VARCHAR(100),  \n" +
				"	IN pSearch VARCHAR(500),  \n" +
				"	IN pId INT,  \n" +
				"	IN pMfgType VARCHAR(50),  \n" +
				"	IN pRoHSStatusID VARCHAR(100),  \n" +
				"	IN pMfgCodeId INT,  \n" +
				"	IN pMountingType VARCHAR(50),  \n" +
				"	IN pMountingTypeId INT,  \n" +
				"	IN pCategoryID INT,  \n" +
				"	IN pIsContainCPN TINYINT,  \n" +
				"	IN pRohsMainCategoryID INT,  \n" +
				"	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
				"	IN prefSupplierMfgpnComponentID INT ,  \n" +
				"	IN ppackagingID INT,  \n" +
				"	IN pstrictCustomPart TINYINT,  \n" +
				"    IN pStrictCPNPart TINYINT,  \n" +
				"	IN psupplierID INT,  \n" +
				"    IN pPartType int,  \n" +
				"    IN pExcludeStatus INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE vRohsMainCategoryID INT;  \n" +
				"	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
				"  \n" +
				"    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
				"  \n" +
				"	 SET @SQLStatement1=CONCAT(\" SELECT *  \n" +
				"		FROM  \n" +
				"		(  \n" +
				"			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
				"					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
				"					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
				"					c.mfgcodeID,          					c.rev,  \n" +
				"					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
				"                    fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') mfgCodeName,  \n" +
				"					c.category,								c.imageURL,						c.documentPath,  \n" +
				"					c.mfgPNDescription,				c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
				"					c.value,								c.partPackage,					c.powerRating,  \n" +
				"					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
				"					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
				"					c.pitchMating,							c.length,						c.width,  \n" +
				"					c.height,								c.voltage,						c.weight,  \n" +
				"					c.feature,								c.color,						c.partStatus,  \n" +
				"					c.uom,									c.uomClassID,					c.unit,  \n" +
				"					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
				"					c.restrictPackagingUseWithpermission,  \n" +
				"					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
				"					r.rohsIcon,								r.name AS rohsName,  \n" +
				"					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
				"					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
				"					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
				"					c.heightText,							c.isCPN,						c.isCustom,  \n" +
				"					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
				"					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
				"					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
				"					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
				"					c.plannedValuePerBuild,					c.programingRequired,  \n" +
				"					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
				"					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
				"					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
				"					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
				"					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
				"					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
				"					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
				"                    c.shelfLifeDateType,					c.isReceiveBulkItem,			c.packagingID,  \n" +
				"                    c.dateCodeFormatID,						dc.dateCodeFormat  \n" +
				"			FROM 	component c  \n" +
				"			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id  \n" +
				"			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
				"			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
				"            LEFT JOIN date_code_format dc ON dc.id = c.dateCodeFormatID  AND dc.isDeleted = 0  \n" +
				"			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
				"			WHERE 	c.isdeleted = 0  \");  \n" +
				"  if  pId is not null then  \n" +
				"    		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND c.id = \" ,pId );  \n" +
				"    end if;  \n" +
				"  \n" +
				"    if  pMfgType is not null then  \n" +
				"    		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND m.mfgType = '\",pMfgType,\"' \");  \n" +
				"    end if;  \n" +
				"  \n" +
				"    if  pRoHSStatusID is not null then  \n" +
				"			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.RoHSStatusID = \", pRoHSStatusID );  \n" +
				"	 end if;  \n" +
				"	if  pMfgCodeId is not null then  \n" +
				"			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.mfgcodeID = \",pMfgCodeId );  \n" +
				"	 end if;  \n" +
				"	if  pMountingType is not null then  \n" +
				"    	SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND mt.name = '\",pMountingType,\"' \");  \n" +
				"	 end if;  \n" +
				"	if  pMountingTypeId is not null then  \n" +
				"				SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mountingTypeID = \",pMountingTypeId );  \n" +
				"	 end if;  \n" +
				"	if  pCategoryID is not null then  \n" +
				"			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.category = \", pCategoryID  );  \n" +
				"	 end if;  \n" +
				"	/* Fetch EXCEPT CPN part */  \n" +
				"	if  ifnull(pIsContainCPN,false) = false  then  \n" +
				"      #(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
				"		SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.isCPN = FALSE \");  \n" +
				"	 end if;  \n" +
				"     /* Fetch only CPN part */  \n" +
				"	if  ifnull(pStrictCPNPart,false) != false  then  \n" +
				"		SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.isCPN = TRUE \");  \n" +
				"	 end if;  \n" +
				"  \n" +
				"	if  pRohsMainCategoryID is not null then  \n" +
				"		 SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
				"		/*===>this logic is added to compare invert rohs category*/  \n" +
				"		IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
				"			IF pRohsMainCategoryID = -1 THEN  \n" +
				"				SET vRohsMainCategoryID = -2;  \n" +
				"			ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
				"				SET vRohsMainCategoryID = -1;  \n" +
				"			END IF;  \n" +
				"		END IF;  \n" +
				"        /*<===this logic is added to compare invert rohs category*/  \n" +
				"		#AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
				"   		if vRohsMainCategoryID is not null then  \n" +
				"        SET @SQLStatement1=CONCAT(@SQLStatement1,\" and  r.refMainCategoryID  = \",vRohsMainCategoryID );  \n" +
				"        end if;  \n" +
				"	 end if;  \n" +
				"	if  prefSupplierMfgpnComponentID is not null then  \n" +
				"    	#AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
				"		SET @SQLStatement1=CONCAT(@SQLStatement1,\" c.refSupplierMfgpnComponentID <=> IFNULL(\",prefSupplierMfgpnComponentID,\", c.refSupplierMfgpnComponentID)  \");  \n" +
				"	 end if;  \n" +
				"	if  pPartType is not null then  \n" +
				"        #AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
				"			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.partType = '\",pPartType,\"' \");  \n" +
				"	 end if;  \n" +
				"	if  ppackagingID is not null then  \n" +
				"    	#AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
				"			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.packagingID <=> IFNULL(\",ppackagingID,\",c.packagingID) \");  \n" +
				"	 end if;  \n" +
				"	if  pstrictCustomPart is not null then  \n" +
				"			#AND c.category != 3  AND c.iscustom = 1  \n" +
				"			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.category != 3  AND c.iscustom = 1 \");  \n" +
				"	 end if;  \n" +
				"	if  psupplierID is not null and pstrictCustomPart  = 1 then  \n" +
				"		/* Old logic  \n" +
				"        (c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
				"									FROM supplier_mapping_mst smm  \n" +
				"									WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
				"					c.mfgcodeid IN (SELECT mc.id  \n" +
				"										FROM mfgcodemst mc  \n" +
				"										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
				"					c.mfgcodeid IN (SELECT mc.id  \n" +
				"										FROM mfgcodemst mc  \n" +
				"										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
				"			)  \n" +
				"        */  \n" +
				"        SET @SQLStatement1=CONCAT(@SQLStatement1,\"  AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
				"																			FROM supplier_mapping_mst smm  \n" +
				"																			WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(\",psupplierID,\",smm.supplierID)  \n" +
				"																		union all /*get mfg which set as company*/  \n" +
				"																		SELECT mc.id  \n" +
				"																				FROM mfgcodemst mc  \n" +
				"																				WHERE mc.iscompany = 1 AND mc.isdeleted = 0  \n" +
				"																		union all /* get All Customer code */  \n" +
				"																		SELECT mc.id  \n" +
				"																				FROM mfgcodemst mc  \n" +
				"																				WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0  \n" +
				"																		)  \");  \n" +
				"	 end if;  \n" +
				"	if  pExcludeStatus is not null then  \n" +
				"    #AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
				"			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.partStatus != '\",pExcludeStatus,\"' \");  \n" +
				"	 end if;  \n" +
				"     /*Close Inner query section */  \n" +
				"     SET @SQLStatement1=CONCAT(@SQLStatement1,\" ) AS a  where 1= 1 \");  \n" +
				"  \n" +
				"     if  pSearch is not null then  \n" +
				"     /* old query(  \n" +
				"				(pSearch IS NULL AND 1 = 1) OR  \n" +
				"				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
				"											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
				"													WHERE opn.refcomponentid = a.id  \n" +
				"													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
				"											)  \n" +
				"										)  \n" +
				"				)  \n" +
				"		)  \n" +
				"     */  \n" +
				"			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and  exists ( select 1 from ( select a.id, a.mfgpn name from dual  \n" +
				"																					union all  \n" +
				"																					select opn.refcomponentid ,opn.name from component_otherpn opn where opn.refcomponentid = a.id  \n" +
				"																				) x where x.id  = a.id and x.name  LIKE CONCAT('%\", pSearch , \"%')  ) \");  \n" +
				"	 end if;  \n" +
				"  \n" +
				"     	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ORDER BY mfgPN For update\");  \n" +
				"     PREPARE query1 FROM @SQLStatement1;  \n" +
				"		EXECUTE query1;  \n" +
				"		DEALLOCATE PREPARE query1;  \n" +
				"  \n" +
				"    /* this logic used in purchase order when supplier is strictly custom part */  \n" +
				"   /*  \n" +
				"	IF(pstrictCustomPart = 1)THEN  \n" +
				"		SELECT *  \n" +
				"		FROM  \n" +
				"		(  \n" +
				"			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
				"					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
				"					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
				"					c.mfgcodeID,          					c.rev,  \n" +
				"					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
				"					c.category,								c.imageURL,						c.documentPath,  \n" +
				"					c.mfgPNDescription,						c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
				"					c.value,								c.partPackage,					c.powerRating,  \n" +
				"					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
				"					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
				"					c.pitchMating,							c.length,						c.width,  \n" +
				"					c.height,								c.voltage,						c.weight,  \n" +
				"					c.feature,								c.color,						c.partStatus,  \n" +
				"					c.uom,									c.uomClassID,					c.unit,  \n" +
				"					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
				"					c.restrictPackagingUseWithpermission,  \n" +
				"					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
				"					r.rohsIcon,								r.name AS rohsName,  \n" +
				"					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
				"					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
				"					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
				"					c.heightText,							c.isCPN,						c.isCustom,  \n" +
				"					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
				"					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
				"					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
				"					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
				"					c.plannedValuePerBuild,					c.programingRequired,  \n" +
				"					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
				"					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
				"					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
				"					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
				"					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
				"					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
				"					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
				"                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
				"			FROM 	component c  \n" +
				"			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
				"			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
				"			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
				"			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
				"			WHERE 	c.isdeleted = 0  \n" +
				"			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
				"			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
				"			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
				"			AND 	c.id = IFNULL(pId, c.id)  \n" +
				"			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
				"            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
				"			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
				"			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
				"			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
				"			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
				"			AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
				"									FROM supplier_mapping_mst smm  \n" +
				"									WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
				"					c.mfgcodeid IN (SELECT mc.id  \n" +
				"										FROM mfgcodemst mc  \n" +
				"										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
				"					c.mfgcodeid IN (SELECT mc.id  \n" +
				"										FROM mfgcodemst mc  \n" +
				"										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
				"			)  \n" +
				"			AND c.category != 3  \n" +
				"			AND c.iscustom = 1  \n" +
				"		) AS a  \n" +
				"		WHERE (  \n" +
				"				(pSearch IS NULL AND 1 = 1) OR  \n" +
				"				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
				"											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
				"													WHERE opn.refcomponentid = a.id  \n" +
				"													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
				"											)  \n" +
				"										)  \n" +
				"				)  \n" +
				"		)  \n" +
				"		ORDER BY mfgPN;  \n" +
				"  \n" +
				"	ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart = 0) THEN  */  \n" +
				"	/* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
				"    Reports, Price Break Update, Customer Part, Good-Bad Mapping Part, Supplier Quote, Supplier RMA */  \n" +
				"	/*	SELECT * FROM  \n" +
				"		(  \n" +
				"			 SELECT c.id,							CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
				"					c.mfgPN orgMfgPN, 					c.packaginggroupID, 					c.PIDCode,  \n" +
				"					c.isGoodPart, 						c.RoHSStatusID, 						c.rohsgroupID,  \n" +
				"					c.mfgcodeID,					    c.rev,  \n" +
				"					m.mfgCode, 							m.mfgType,								m.mfgName,  \n" +
				"					c.category,							c.imageURL,								c.documentPath,  \n" +
				"					c.mfgPNDescription,					c.minOperatingTemp,        				c.maxOperatingTemp,  \n" +
				"					c.value,							c.partPackage,							c.powerRating,  \n" +
				"					c.functionalCategoryID,         	c.mountingTypeID,						c.connecterTypeID,  \n" +
				"					c.noOfPosition,        				c.noOfRows,								c.pitch,  \n" +
				"					c.pitchMating,        				c.length,								c.width,  \n" +
				"					c.height,        					c.voltage,								c.weight,  \n" +
				"					c.feature,        					c.color,								c.partStatus,  \n" +
				"					c.uom,					        	c.uomClassID,							c.unit,  \n" +
				"					c.restrictUsePermanently,			c.restrictUSEwithpermission,			c.restrictPackagingUsePermanently,  \n" +
				"					c.restrictPackagingUseWithpermission,  \n" +
				"					u.abbreviation AS uomName,			u.unitName AS  unitName,  \n" +
				"					r.rohsIcon,							r.name AS rohsName,  \n" +
				"					c.partPackageID,        			c.bomLock,								c.businessRisk,  \n" +
				"					c.costCategoryID,					c.deviceMarking,						c.driverToolRequired,  \n" +
				"					c.eau,								c.epicorType,							c.functionalTestingRequired,  \n" +
				"					c.heightText,						c.isCPN,								c.isCustom,  \n" +
				"					c.leadTime,							c.matingPartRquired,					c.maxPriceLimit,  \n" +
				"					c.maxQtyonHand,						c.minimum,								c.mult,  \n" +
				"					c.packageQty,						c.partType,								c.pcbPerArray,  \n" +
				"					c.pickupPadRequired,				c.plannedOverRunPercentagePerBuild, 	c.plannedValuePerBuild,  \n" +
				"					c.programingRequired,				c.rfqOnly,								c.saftyStock,  \n" +
				"					c.scrapRatePercentagePerBuild, 		c.scrapValuePerBuild,					c.selfLifeDays,  \n" +
				"					c.shelfListDaysThresholdPercentage, c.temperatureCoefficient,				c.temperatureCoefficientUnit,  \n" +
				"					c.temperatureCoefficientValue,		c.trackSerialNumber,					c.refSupplierMfgpnComponentID,  \n" +
				"					c.refMfgPNMfgCodeId,  \n" +
				"					vu.mfgName  supplierPartMfgName, 	vu.mfgPN supplierPartMfgPn, 			vu.mfgCode supplierPartMfgCode,  \n" +
				"					c.isWaterSoluble,        			c.isNoClean,        					c.isFluxNotApplicable,  \n" +
				"					c.detailDescription,					c.isHazmatMaterial, 				c.umidSPQ,  \n" +
				"                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
				"			FROM 	component c  \n" +
				"			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND (m.isdeleted = 0 AND  m.mfgType = IFNULL(pMfgType, m.mfgType))  \n" +
				"			JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND mt.name = pMountingType  \n" +
				"			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
				"			JOIN  	uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
				"			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
				"			WHERE 	c.isdeleted = 0  \n" +
				"			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
				"			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
				"			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
				"			AND		c.id = IFNULL(pId, c.id) AND c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
				"			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
				"			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
				"			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
				"            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
				"			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
				"			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
				"  \n" +
				"		) AS a  \n" +
				"		WHERE (  \n" +
				"				(pSearch IS NULL AND 1 = 1) OR  \n" +
				"				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
				"											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
				"													WHERE opn.refcomponentid = a.id  \n" +
				"													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
				"											)  \n" +
				"										)  \n" +
				"				)  \n" +
				"		)  \n" +
				"		ORDER BY mfgPN;  \n" +
				"  \n" +
				"	ELSE  */  \n" +
				"	  /* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
				"	  Reports,  Price Break Update,  Customer Part,  Good-Bad Mapping Part,  Supplier Quote,  Supplier RMAb*/  \n" +
				"  /*  \n" +
				"		select *  \n" +
				"		from  \n" +
				"		(  \n" +
				"			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,  \n" +
				"					c.mfgPN orgMfgPN,			c.packaginggroupID,					c.PIDCode,  \n" +
				"					c.isGoodPart,				c.RoHSStatusID,						c.rohsgroupID,  \n" +
				"					c.mfgcodeID,          		c.rev,  \n" +
				"					m.mfgCode,					m.mfgName,							m.mfgType,  \n" +
				"					c.tolerance,				c.category,							c.imageURL,  \n" +
				"					c.documentPath,				c.mfgPNDescription,					c.minOperatingTemp,  \n" +
				"					c.maxOperatingTemp,			c.value,							c.partPackage,  \n" +
				"					c.powerRating,				c.functionalCategoryID,				c.mountingTypeID,  \n" +
				"					c.connecterTypeID,			c.noOfPosition,           	 		c.noOfRows,  \n" +
				"					c.pitch,            		c.pitchMating,            			c.length,  \n" +
				"					c.width,            		c.height,							c.voltage,  \n" +
				"					c.weight,            		c.feature,            				c.color,  \n" +
				"					c.partStatus,            	c.uom,            					c.uomClassID,  \n" +
				"					c.unit,            			c.restrictUsePermanently,			c.restrictUSEwithpermission,  \n" +
				"					c.restrictPackagingUsePermanently,								c.restrictPackagingUseWithpermission,  \n" +
				"					c.packagingID,				c.packaging,  \n" +
				"					u.abbreviation AS uomName,	u.unitName AS unitName,  \n" +
				"					r.rohsIcon,					r.name AS rohsName,  \n" +
				"					c.partPackageID,			c.bomLock,							c.businessRisk,  \n" +
				"					c.costCategoryID,			c.deviceMarking,					c.driverToolRequired,  \n" +
				"					c.eau,						c.epicorType,						c.functionalTestingRequired,  \n" +
				"					c.heightText,				c.isCPN,							c.isCustom,  \n" +
				"					c.leadTime,            		c.matingPartRquired,				c.maxPriceLimit,  \n" +
				"					c.maxQtyonHand,           	c.minimum,							c.mult,  \n" +
				"					c.packageQty,            	c.partType,							c.pcbPerArray,  \n" +
				"					c.pickupPadRequired,		c.plannedOverRunPercentagePerBuild, c.plannedValuePerBuild,  \n" +
				"					c.programingRequired,		c.rfqOnly,							c.saftyStock,  \n" +
				"					c.scrapRatePercentagePerBuild,		c.scrapValuePerBuild,		c.selfLifeDays,  \n" +
				"					c.shelfListDaysThresholdPercentage,	c.temperatureCoefficient,	c.temperatureCoefficientUnit,  \n" +
				"					c.temperatureCoefficientValue,		c.trackSerialNumber,		c.refSupplierMfgpnComponentID,  \n" +
				"					c.refMfgPNMfgCodeId,  \n" +
				"					vu.mfgName  supplierPartMfgName,  \n" +
				"					vu.mfgPN supplierPartMfgPn,  \n" +
				"					vu.mfgCode supplierPartMfgCode,  \n" +
				"					c.isWaterSoluble,			c.isNoClean,						c.isFluxNotApplicable,  \n" +
				"					c.detailDescription,		c.isHazmatMaterial, 				c.umidSPQ,  \n" +
				"                    c.shelfLifeDateType,		c.isReceiveBulkItem  \n" +
				"			from component c  \n" +
				"			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
				"			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
				"			INNER JOIN uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
				"			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
				"			WHERE 	c.isdeleted = 0  \n" +
				"			AND 	c.id = IFNULL(pId, c.id)  \n" +
				"			AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)  \n" +
				"			AND 	c.RoHSStatusID = IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
				"			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
				"			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
				"			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
				"			AND 	c.packagingID <=> IFNULL(ppackagingID, c.packagingID)  \n" +
				"			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
				"            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
				"			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
				"			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN = c.isCPN ELSE c.isCPN = FALSE END)  \n" +
				"			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
				"			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)  \n" +
				"		) AS a  \n" +
				"		WHERE (  \n" +
				"				(pSearch IS NULL AND 1 = 1) OR  \n" +
				"				(pSearch IS NOT NULL AND  \n" +
				"					(  \n" +
				"						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
				"						EXISTS( SELECT  1  \n" +
				"								FROM 	component_otherpn opn  \n" +
				"								WHERE 	opn.refcomponentid = a.id  \n" +
				"								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
				"					)  \n" +
				"				)  \n" +
				"			)  \n" +
				"		ORDER BY mfgPN;  \n" +
				"	END IF;   */  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 14-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetPrintUMIDBarcodeData`;  \n" +
				"CREATE PROCEDURE `Sproc_GetPrintUMIDBarcodeData`(  \n" +
				"	IN pUMIDIds VARCHAR(10000),  \n" +
				"	IN pUserId VARCHAR(50)  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	SELECT 		css.id id,  \n" +
				"			fun_getMfgCodeByPartID(css.refcompid) MFGCode,  \n" +
				"			(  \n" +
				"				CASE  \n" +
				"					WHEN  css.stockInventoryType = 'NI' THEN  \n" +
				"						fun_getUMIDPackingSlipNameByID(css.id)  \n" +
				"					WHEN  css.stockInventoryType = 'OI' THEN  \n" +
				"						css.uid  \n" +
				"				END  \n" +
				"			) COFC,  \n" +
				"			fun_getPackagingNameByID(css.packaging) packaging,  \n" +
				"			css.lotCode lotCode,  \n" +
				"			fun_getMSLLevelByID(c.mslID, TRUE) mslLevel,  \n" +
				"			css.pkgQty Qty,  \n" +
				"			css.uid uid,  \n" +
				"			c.PIDCode PIDCode,  \n" +
				"			css.dateCode dateCode,  \n" +
				"            fun_getDateCodeFormatById(css.dateCodeFormatID) AS dateCodeFormat,  \n" +
				"			fun_getCostCategoryNameByID(css.costCategoryID, FALSE) priceCategoryID,  \n" +
				"			c.mfgPNDescription mfgPNDescription,  \n" +
				"			(  \n" +
				"				CASE  \n" +
				"					WHEN roh.refMainCategoryID = -2 THEN 'No'  \n" +
				"					WHEN (roh.refMainCategoryID = -1 AND roh.name != 'RoHS-Exempt') THEN 'Yes'  \n" +
				"					WHEN (roh.refMainCategoryID = -1 AND roh.name = 'RoHS-Exempt') THEN 'Y-Exmpt'  \n" +
				"					ELSE roh.name  \n" +
				"				END  \n" +
				"			) rohs,  \n" +
				"			DATE_FORMAT(css.expiryDate, \"%m/%d/%Y\") dateofExpire,  \n" +
				"			css.customerConsign customerConsign,  \n" +
				"			fun_getMountingTypeNameByID(c.mountingTypeID) mountingType,  \n" +
				"			IFNULL(c.partPackage, fun_getPackageCaseNameByID(c.partPackageID)) partPackage,  \n" +
				"			fun_getUserCodeByID(pUserId) createdUserCode,  \n" +
				"			c.serialNumber systemId  \n" +
				"	FROM 		component_sid_stock css  \n" +
				"	INNER JOIN 	component c ON c.id = css.refcompid AND c.deletedAt IS NULL  \n" +
				"	INNER JOIN	rfq_rohsmst roh ON roh.id = c.RoHSStatusID AND roh.deletedAt IS NULL  \n" +
				"	WHERE 		css.deletedAt IS NULL  \n" +
				"				AND FIND_IN_SET(css.id, pUMIDIds);  \n" +
				"END;  \n" +
				
				/* **************************** Add Script Version -> 14-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_checkDelete_date_code_format`;  \n" +
				"CREATE PROCEDURE `Sproc_checkDelete_date_code_format`(  \n" +
				"		IN tableName VARCHAR(255),  \n" +
				"		IN IDs LONGTEXT,  \n" +
				"		IN deletedBy INT,  \n" +
				"		IN entityID VARCHAR(255),  \n" +
				"		IN refrenceIDs LONGTEXT,  \n" +
				"		IN countList INT,  \n" +
				"		IN pRoleID INT  \n" +
				"		)  \n" +
				"BEGIN  \n" +
				"  \n" +
				"SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcheckreference as  \n" +
				"        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstManufacturer\" else \"\" end as msg FROM mfgcodemst WHERE isDeleted = 0 AND dateCodeFormatID IN(',IDs,') LIMIT 1)  \n" +
				"		UNION ALL  \n" +
				"        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"component\" else \"\" end as msg FROM component WHERE isDeleted = 0 AND dateCodeFormatID IN(',IDs,') LIMIT 1)  \n" +
				"        UNION ALL  \n" +
				"		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"component_sid_stock\" else \"\" end as msg FROM component_sid_stock WHERE isDeleted = 0 AND mfrDateCodeFormatID IN(',IDs,') LIMIT 1)  \n" +
				"        ');  \n" +
				"	PREPARE stmt FROM @SQL;  \n" +
				"	EXECUTE stmt;  \n" +
				"		IF (countList=FALSE) THEN  \n" +
				"			IF (SELECT SUM(t.cnt) FROM tempcheckreference t) = 0 THEN  \n" +
				"				SET @SQl1 = CONCAT('update date_code_format set isDeleted = 1, deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in(',IDs,') and isDeleted = 0');  \n" +
				"				PREPARE stmt1 FROM @SQL1;  \n" +
				"				EXECUTE stmt1;  \n" +
				"				DEALLOCATE PREPARE stmt1;  \n" +
				"				SELECT * FROM tempcheckreference WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
				"			ELSE  \n" +
				"				SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcheckreference t;  \n" +
				"			END IF;  \n" +
				"		ELSE  \n" +
				"			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
				"			   FROM tempcheckreference t1  \n" +
				"					INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
				"					WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
				"					ORDER BY t2.display_page_name;  \n" +
				"		END IF;  \n" +
				"    DROP TEMPORARY TABLE if exists tempcheckreference;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 14-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_checkDelete`;  \n" +
				"CREATE PROCEDURE `Sproc_checkDelete`(  \n" +
				"    IN tableName VARCHAR(255),  \n" +
				"    IN IDs LONGTEXT,  \n" +
				"    IN deletedBy INT,  \n" +
				"    IN entityID VARCHAR(255),  \n" +
				"    IN refrenceIDs LONGTEXT,  \n" +
				"    IN countList INT,  \n" +
				"    IN pRoleID INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"IF tableName=\"employees\" THEN  \n" +
				"    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"eco_type_category\" THEN  \n" +
				"     CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"eco_type_values\" THEN  \n" +
				"      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"customers\" THEN  \n" +
				"     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"certificate_standards\" THEN  \n" +
				"    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"department\" THEN  \n" +
				"    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"genericcategory\" THEN  \n" +
				"    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"equipment\" THEN  \n" +
				"    CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"master_templates\" THEN  \n" +
				"   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"operations\" THEN  \n" +
				"   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"workorder\" THEN  \n" +
				"   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"roles\" THEN  \n" +
				"   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"standard_class\" THEN  \n" +
				"   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"dataelement\" THEN  \n" +
				"   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"workorder_preprogcomp\" THEN  \n" +
				"    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"component\" THEN  \n" +
				"    CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"workorder_cluster\" THEN  \n" +
				"    CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"workorder_operation\" THEN  \n" +
				"    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"workorder_operation_part\" THEN  \n" +
				"    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"workorder_operation_equipment\" THEN  \n" +
				"    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"workorder_operation_employee\" THEN  \n" +
				"    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"workorder_operation_cluster\" THEN  \n" +
				"    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"entity\" THEN  \n" +
				"    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"salesordermst\" THEN  \n" +
				"    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"mfgcodemst\" THEN  \n" +
				"     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"dataelement_transactionvalues_manual\" THEN  \n" +
				"  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"shippedassembly\" THEN  \n" +
				"   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"workorder_trans_serialno\" THEN  \n" +
				"   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"br_label_template\" THEN  \n" +
				"   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"measurement_types\" THEN  \n" +
				"   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"uoms\" THEN  \n" +
				"   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"jobtypes\" THEN  \n" +
				"   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"rfqtype\" THEN  \n" +
				"   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"reasonmst\" THEN  \n" +
				"   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"component_sid_stock\" THEN  \n" +
				"   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"component_sid_stock_dataelement_values\" THEN  \n" +
				"    CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"chart_templatemst\" THEN  \n" +
				"    CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"shipping_requestdet\" THEN  \n" +
				"    CALL Sproc_checkDelete_shipping_requestdet(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"chart_rawdata_category\" THEN  \n" +
				"     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"rfq_lineitems\" THEN  \n" +
				"      CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"requirement\" THEN  \n" +
				"    CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"workorder_trans_packagingdetail\" THEN  \n" +
				"    CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"customer_addresses\" THEN  \n" +
				"   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"rfqforms\" THEN  \n" +
				"    CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"rfq_mountingtypemst\" THEN  \n" +
				"    CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"who_bought_who\" THEN  \n" +
				"  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"rfq_parttypemst\" THEN  \n" +
				"   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"rfq_lineitems_errorcode\" THEN  \n" +
				"  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"rfq_lineitems_keywords\" THEN  \n" +
				"  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"quotecharges_dynamic_fields_mst\" THEN  \n" +
				"  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"cost_category\" THEN  \n" +
				"    CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"chartypemst\" THEN  \n" +
				"    CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"countrymst\" THEN  \n" +
				"     CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"rfq_connectertypemst\" THEN  \n" +
				"     CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"rfq_assy_typemst\" THEN  \n" +
				"     CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"warehousemst\" THEN  \n" +
				"     CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"binmst\" THEN  \n" +
				"     CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"rackmst\" THEN  \n" +
				"     CALL Sproc_checkDelete_rackmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"component_logicalgroup\" THEN  \n" +
				"     CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"packing_slip_material_receive\" THEN  \n" +
				"     CALL Sproc_checkDelete_packing_slip_material_receive(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"packing_slip_material_receive_det\" THEN  \n" +
				"     CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"packing_slip_material_receive_memo\" THEN  \n" +
				"     CALL Sproc_checkDelete_packing_slip_material_receive_memo(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"packing_slip_track_number\" THEN  \n" +
				"     CALL Sproc_checkDelete_packing_slip_track_number(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"reserve_stock_request\" THEN  \n" +
				"       	 CALL Sproc_checkDelete_reserve_stock_request(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"component_packagingmst\" THEN  \n" +
				"     CALL Sproc_checkDelete_component_packagingmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"workorder_trans_narrative_history\" THEN  \n" +
				"     CALL Sproc_checkDelete_workorder_trans_narrative_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"scannermst\" THEN  \n" +
				"     CALL Sproc_checkDelete_Scanner(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"component_alternatepn_validations\" THEN  \n" +
				"     CALL Sproc_checkDelete_Alias_Parts_Validation(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"workorder_operation_equipment_feeder_details\" THEN  \n" +
				"    CALL Sproc_checkDelete_workorder_operation_equipment_feeder_details(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"component_price_break_details\" THEN  \n" +
				"    CALL Sproc_checkDelete_component_price_break_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"department_location\" THEN  \n" +
				"    CALL Sproc_checkDelete_department_location(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"purchase_parts_details\" THEN  \n" +
				"    CALL Sproc_checkDelete_purchase_parts_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"rfq_rohsmst\" THEN  \n" +
				"    CALL Sproc_checkDelete_rfq_rohsmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"component_partstatusmst\" THEN  \n" +
				"    CALL Sproc_checkDelete_component_partstatusmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"workorder_trans_umid_details\" THEN  \n" +
				"    CALL Sproc_checkDelete_workorder_trans_umid_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"labor_cost_template\" THEN  \n" +
				"    CALL Sproc_checkDelete_labor_cost_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"rfq_packagecasetypemst\" THEN  \n" +
				"    CALL Sproc_checkDelete_rfq_packagecasetypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"component_dynamic_attribute\" THEN  \n" +
				"    CALL Sproc_checkDelete_component_dynamic_attribute(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"component_dynamic_attribute_mapping_part\" THEN  \n" +
				"    CALL Sproc_checkDelete_component_dynamic_attribute_mapping_part(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"labeltemplatesmst\" THEN  \n" +
				"    CALL Sproc_checkDelete_labeltemplates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"reportmaster\" THEN  \n" +
				"    CALL Sproc_checkDelete_reportMaster(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"operating_temperature_conversion_mst\" THEN  \n" +
				"    CALL Sproc_checkDelete_operating_temperature_conversion_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"inspection_mst\" THEN  \n" +
				"    CALL Sproc_checkDelete_inspectionRequirementMst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"inspection_template_mst\" THEN  \n" +
				"    CALL Sproc_checkDelete_inspectionRequirementTemplate(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"componenet_inspection_requirement_det\" THEN  \n" +
				"    CALL Sproc_checkDelete_componenet_inspection_requirement_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"supplier_quote_mst\" THEN  \n" +
				"   CALL Sproc_checkDelete_supplier_quote(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"supplier_quote_parts_det\" THEN  \n" +
				"   CALL Sproc_checkDelete_supplier_quote_parts(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"calibration_details\" THEN  \n" +
				"   CALL Sproc_checkDelete_CalibrationDetails(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"customer_packingslip\" THEN  \n" +
				"   CALL Sproc_checkDelete_customer_packingslip(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"customer_packingslip_det\" THEN  \n" +
				"   CALL Sproc_checkDelete_customer_packingslip_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"supplier_attribute_template_mst\" THEN  \n" +
				"      CALL Sproc_checkDelete_supplier_attribute_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"freeonboardmst\" THEN  \n" +
				"   CALL Sproc_checkDelete_freeonboard(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"generic_file_extension\" THEN  \n" +
				"   CALL Sproc_checkDelete_genericFileExtension(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"assemblystock\" THEN  \n" +
				"   CALL Sproc_checkDelete_assemblystock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"customer_invoice\" THEN  \n" +
				"   CALL Sproc_checkDelete_customer_invoice(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"workorder_boxserialno\" THEN  \n" +
				"   CALL Sproc_checkDelete_wo_box_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"workorder_trans_boxserialno\" THEN  \n" +
				"   CALL Sproc_checkDelete_wo_trans_box_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"bank_mst\" THEN  \n" +
				"   CALL Sproc_checkDelete_bank(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"cameramst\" THEN  \n" +
				"   CALL Sproc_checkDelete_cameramst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"release_notes_detail\" THEN  \n" +
				"   CALL Sproc_checkDelete_releasenotes_detail(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"release_notes\" THEN  \n" +
				"   CALL Sproc_checkDelete_releasenotes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"purchase_order_mst\" THEN  \n" +
				"   CALL Sproc_checkDelete_purchase_order_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"acct_acctmst\" THEN  \n" +
				"    CALL Sproc_checkDelete_acct_acctmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"help_blog_det\" THEN  \n" +
				"   CALL Sproc_checkDelete_helpblog_detail(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"acct_classmst\" THEN  \n" +
				"	CALL Sproc_checkDelete_acct_classmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"mfgcodemst_comment_det\" THEN  \n" +
				"    CALL Sproc_checkDelete_mfgcodemst_comment_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"generic_transmode_mst\" THEN  \n" +
				"    CALL Sproc_checkDelete_generic_transmode_mst_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"assembly_trans_history\" THEN  \n" +
				"   CALL Sproc_checkDelete_assy_trans_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"contactperson\" THEN  \n" +
				"   CALL Sproc_checkDelete_contactperson(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"IF tableName=\"date_code_format\" THEN  \n" +
				"   CALL Sproc_checkDelete_date_code_format(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
				"END IF;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 14-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
				"CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
				"	IN pFromPartID INT,  \n" +
				"    IN pNewEpicorType varchar(50),  \n" +
				"    IN pNewAssemblyType INT,  \n" +
				"    IN pNewMfgcodeID INT,  \n" +
				"    IN pNewCustAssyPN varchar(500),  \n" +
				"    IN pNewPartRev varchar(50),  \n" +
				"    IN pNewMfgPN varchar(100),  \n" +
				"    IN pNewAssyCode varchar(50),  \n" +
				"    IN pNewNickName varchar(50),  \n" +
				"    IN pNewPIDCode varchar(109),  \n" +
				"    IN pIsCPN tinyint,  \n" +
				"    IN pIsCustom tinyInt,  \n" +
				"    IN pUserID Int,  \n" +
				"    IN pUserRoleId Int,  \n" +
				"    IN pIsAttribute tinyint,  \n" +
				"    IN pIsSettings tinyint,  \n" +
				"    IN pIsAdditionalAttibute tinyint,  \n" +
				"    IN pIsPackagingDetail tinyint,  \n" +
				"    IN pIsStandards tinyint,  \n" +
				"    IN pIsRequiredFunctionalType tinyint,  \n" +
				"    IN pIsRequiredMountingType tinyint,  \n" +
				"    IN pIsPackagingAliasPart tinyint,  \n" +
				"    IN pIsOtherPartName tinyint,  \n" +
				"    IN pIsAlternatePart tinyint,  \n" +
				"    IN pIsRoHSReplacementPart tinyint,  \n" +
				"    IN pIsDriveTool tinyint,  \n" +
				"    IN pIsProcessMaterial tinyint,  \n" +
				"    IN pIsRequiredMattingParts tinyint,  \n" +
				"    IN pIsPickupPad tinyint,  \n" +
				"    IN pIsFunctionalTesingTool tinyint,  \n" +
				"    IN pIsFinctionalRestingEquipment tinyint,  \n" +
				"    IN pIsBOM tinyint,  \n" +
				"    IN pIsComments tinyInt,  \n" +
				"    IN pIsCopyImages tinyInt,  \n" +
				"    IN pIsCopyDatasheet tinyInt,  \n" +
				"    IN pIsCopyDocument tinyInt,  \n" +
				"    IN pIsOperationalAttirbutes tinyInt,  \n" +
				"    IN pIsAcceptableShippinCountry tinyInt,  \n" +
				"    IN pIsTrackSNumber tinyInt,  \n" +
				"    IN pMfgPNDescription varchar(2000),  \n" +
				"    IN pDetailDescription varchar(2000),  \n" +
				"    IN pInternalReference varchar(50),  \n" +
				"    IN pRoHSStatusID int,  \n" +
				"    IN pIsFluxNotApplicable tinyInt,  \n" +
				"    IN pIsWaterSoluble tinyInt,  \n" +
				"    IN pIsNoClean tinyInt,  \n" +
				"    IN pSpecialNote varchar(2000),  \n" +
				"    IN pRohsDeviation int,  \n" +
				"    IN pFunctionalTypeID int,  \n" +
				"    IN pMountingTypeID int  \n" +
				")  \n" +
				"BEGIN  \n" +
				"DECLARE vValidationPassed tinyint;  \n" +
				"DECLARE vFromPartCategory tinyint;  \n" +
				"DECLARE vFromMfgType varchar(5);  \n" +
				"DECLARE vIsCPN tinyint;  \n" +
				"DECLARE vCount INT;  \n" +
				"DECLARE vToPartID INT;  \n" +
				"DECLARE vUserRoleId INT;  \n" +
				"DECLARE vMisMatchFields longtext;  \n" +
				"DECLARE vSerialNumber varchar(20);  \n" +
				"DECLARE vMessage varchar(200);  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
				"  \n" +
				"	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
				"    select * from component where 1 = 2;  \n" +
				"  \n" +
				"	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
				"    select * from component where 1 = 2;  \n" +
				"  \n" +
				"    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
				"    select * from component_alternatepn_validations where 1 = 2;  \n" +
				"  \n" +
				"	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
				"  	set vCount = 0;  \n" +
				"    select co.category, m.mfgType, count(co.id), co.isCPN  \n" +
				"      into vFromPartCategory, vFromMfgType, vCount, vIsCPN  \n" +
				"	  from component co  \n" +
				"	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
				"	 where co.id = pFromPartID and co.isDeleted = 0  \n" +
				"     group by co.category, m.mfgType, co.id, co.isCPN  ;  \n" +
				"  \n" +
				"	if vCount = 0 then  \n" +
				"		set vValidationPassed = 0;  \n" +
				"		select 'PART_NOT_FOUND' as message;  \n" +
				"	end if;  \n" +
				"  \n" +
				"	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
				"		set pIsAttribute = 1;  \n" +
				"        set pIsAdditionalAttibute = 1;  \n" +
				"    end if;  \n" +
				"  \n" +
				"	set vCount = 0;  \n" +
				"    if (vFromPartCategory = 3) then # check category  \n" +
				"	   select count(1) into vCount  \n" +
				"		 from component co  \n" +
				"		where co.mfgcodeID = pNewMfgcodeID  \n" +
				"          and co.category = 3  \n" +
				"		  and co.custAssyPN = pNewCustAssyPN  \n" +
				"		  and co.rev = pNewPartRev  \n" +
				"          and co.isDeleted = 0  \n" +
				"		  and co.deletedAt is null  \n" +
				"	  group by co.mfgcodeID,co.category,co.custAssyPN,co.rev;  \n" +
				"		if vCount > 0 then  \n" +
				"			set vValidationPassed = 0;  \n" +
				"            select 'DUPLICATE_REV' as message;  \n" +
				"        end if;  \n" +
				"  \n" +
				"         set vCount = 0;  \n" +
				"		 select count(1) into vCount  \n" +
				"			 from component co  \n" +
				"			where co.nickName != pNewNickName  \n" +
				"              and co.category = 3  \n" +
				"              and co.custAssyPN = pNewCustAssyPN  \n" +
				"              and co.mfgcodeID = pNewMfgcodeID  \n" +
				"			  and co.isDeleted = 0  \n" +
				"			  and co.deletedAt is null  \n" +
				"              group by co.category,co.custAssyPN,co.mfgcodeID;  \n" +
				"		  if vCount > 0 then  \n" +
				"			set vValidationPassed = 0;  \n" +
				"				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
				"						concat('(',m.mfgCode,') ',m.mfgName) mfrName,  \n" +
				"                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
				"				 from component co  \n" +
				"                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
				"				where co.nickName != pNewNickName  \n" +
				"				  and co.category = 3  \n" +
				"				  and co.custAssyPN = pNewCustAssyPN  \n" +
				"				  and co.mfgcodeID = pNewMfgcodeID  \n" +
				"				  and co.isDeleted = 0  \n" +
				"				  and co.deletedAt is null ;  \n" +
				"				 -- limit 1;  \n" +
				"		  end if;  \n" +
				"  \n" +
				"		set vCount = 0;  \n" +
				"		 select count(1) into vCount  \n" +
				"			 from component co  \n" +
				"			where co.nickName = pNewNickName  \n" +
				"              and co.category = 3  \n" +
				"              and co.custAssyPN != pNewCustAssyPN  \n" +
				"              and co.mfgcodeID = pNewMfgcodeID  \n" +
				"			  and co.isDeleted = 0  \n" +
				"			  and co.deletedAt is null  \n" +
				"			group by co.nickName,co.category,co.mfgcodeID;  \n" +
				"		 if vCount > 0 then  \n" +
				"			set vValidationPassed = 0;  \n" +
				"				select 'DUPLICATE_NICKNAME' as message,  \n" +
				"                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
				"				 from component co  \n" +
				"				where co.nickName = pNewNickName  \n" +
				"				  and co.category = 3  \n" +
				"				  and co.custAssyPN != pNewCustAssyPN  \n" +
				"				  and co.mfgcodeID = pNewMfgcodeID  \n" +
				"				  and co.isDeleted = 0  \n" +
				"				  and co.deletedAt is null  ;  \n" +
				"		  end if;  \n" +
				"	end if;  \n" +
				"  \n" +
				"    set vCount = 0;  \n" +
				"		select count(1) into vCount  \n" +
				"		 from component co  \n" +
				"		where co.mfgcodeID = pNewMfgcodeID  \n" +
				"		  and co.mfgPN = pNewMfgPN  \n" +
				"          and co.isDeleted = 0  \n" +
				"		  and co.deletedAt is null  \n" +
				"	  group by co.mfgcodeID,co.mfgPN;  \n" +
				"	 if vCount > 0 then  \n" +
				"		set vValidationPassed = 0;  \n" +
				"        select 'DUPLICATE_MFGPN' as message;  \n" +
				"     end if;  \n" +
				"  \n" +
				"    set vCount = 0;  \n" +
				"		select count(1) into vCount  \n" +
				"		 from component co  \n" +
				"		where co.PIDCode = pNewPIDCode  \n" +
				"		  and co.isDeleted = 0  \n" +
				"		  and co.deletedAt is null  \n" +
				"          group by co.PIDCode;  \n" +
				"    if vCount > 0 then  \n" +
				"		set vValidationPassed = 0;  \n" +
				"        select 'DUPLICATE_PID' as message;  \n" +
				"	end if;  \n" +
				"  \n" +
				"    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
				"		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
				"													'MPNSystemID'  \n" +
				"												else 'SPNSystemID' end,  \n" +
				"											 true);  \n" +
				"		  select systemID, message into vSerialNumber, vMessage  \n" +
				"		  from temp_serialNumber;  \n" +
				"        if vMessage is not null and vMessage != '' then  \n" +
				"			set vValidationPassed = 0;  \n" +
				"			select vMessage as message;  \n" +
				"		end if;  \n" +
				"	end if;  \n" +
				"  \n" +
				"	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
				"		-- START TRANSACTION;  \n" +
				"		insert into component(  \n" +
				"				isCustom, isCPN, rfqOnly, isGoodPart,replacementPartID, partType, category, epicorType, mfgcodeID,  \n" +
				"				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
				"				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
				"                functionalCategoryID,  \n" +
				"                mountingTypeID,  \n" +
				"                operatingTemp,				minOperatingTemp,				maxOperatingTemp,  \n" +
				"				temperatureCoefficient,				temperatureCoefficientValue,				temperatureCoefficientUnit,				connecterTypeID,  \n" +
				"				noOfPosition,				noOfRows,  \n" +
				"				pitch,				pitchMating,				sizeDimension,				length,				width,				heightText,				height,  \n" +
				"				partStatus, leadTime, serialNumber, RoHSStatusID,  \n" +
				"				rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
				"				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
				"				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
				"				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
				"				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
				"                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType, isEpoxyMount,  \n" +
				"                scrapValuePerBuild,				scrapRatePercentagePerBuild,				plannedValuePerBuild,				plannedOverRunPercentagePerBuild,				selfLifeDays,  \n" +
				"				shelfLifeAcceptanceDays,				shelfListDaysThresholdPercentage,				maxShelfLifeAcceptanceDays,				maxShelfListDaysThresholdPercentage,  \n" +
				"				shelfLifeDateType,				maxPriceLimit,				maxQtyonHand,				saftyStock,				eau,				businessRisk,				programingRequired,  \n" +
				"                restrictUSEwithpermission,                bomLock,                restrictUsePermanently,   isDateCodeFormat, dateCodeFormatID,  \n" +
				"                tolerance,				voltage,				value,				powerRating,  \n" +
				"				weight,				feature,				color,  \n" +
				"                deviceMarking,				packagingID,  \n" +
				"				minimum,				mult,				packageQty,				umidSPQ,  \n" +
				"                pcbPerArray,                IsReceiveBulkItem)  \n" +
				"		select pIsCustom, pIsCPN, rfqOnly, isGoodPart,replacementPartID, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
				"				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
				"				pMfgPNDescription, pSpecialNote, purchasingComment, uomClassID, uom, unit,  \n" +
				"                pFunctionalTypeID,  \n" +
				"                pMountingTypeID,  \n" +
				"                /* Copy in case Attribute  checked*/  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  operatingTemp ELSE null END),  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  minOperatingTemp ELSE null END),  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  maxOperatingTemp ELSE null END),  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficient ELSE null END),  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientValue ELSE null END),  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientUnit ELSE null END),  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  connecterTypeID ELSE null END),  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  noOfPosition ELSE null END),  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  noOfRows ELSE null END),  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  pitch ELSE null END),  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  pitchMating ELSE null END),  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  sizeDimension ELSE null END),  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  length ELSE null END),  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  width ELSE null END),  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  heightText ELSE null END),  \n" +
				"                (CASE WHEN (pIsAttribute = 1) THEN  height ELSE null END),  \n" +
				"  \n" +
				"				partStatus,  leadTime, vSerialNumber/*serialNumber*/, pRoHSStatusID,  \n" +
				"				pRohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
				"				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
				"				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
				"				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
				"                pIsFluxNotApplicable,  \n" +
				"                pIsWaterSoluble,  \n" +
				"                pIsNoClean,  \n" +
				"				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
				"				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
				"                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
				"                (CASE WHEN (pIsFunctionalTesingTool = 1  and pIsCPN = 0) THEN requiredTestTime ELSE null END),  \n" +
				"                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
				"                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
				"                (CASE WHEN (pIsDriveTool = 1 and pIsCPN = 0) THEN driverToolRequired ELSE 0 END),  \n" +
				"                (CASE WHEN (pIsRequiredMattingParts = 1  and pIsCPN = 0) THEN matingPartRquired ELSE 0 END),  \n" +
				"                (CASE WHEN (pIsPickupPad = 1  and pIsCPN = 0) THEN pickupPadRequired ELSE 0 END),  \n" +
				"                (CASE WHEN (pIsFunctionalTesingTool = 1  and pIsCPN = 0) THEN functionalTestingRequired ELSE 0 END),  \n" +
				"                pInternalReference,  \n" +
				"                mfgType,isEpoxyMount,  \n" +
				"  \n" +
				"                /* Copy in case Settings checked*/  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  scrapValuePerBuild ELSE null END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  scrapRatePercentagePerBuild ELSE null END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  plannedValuePerBuild ELSE null END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  plannedOverRunPercentagePerBuild ELSE null END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  selfLifeDays ELSE null END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeAcceptanceDays ELSE null END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  shelfListDaysThresholdPercentage ELSE null END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  maxShelfLifeAcceptanceDays ELSE null END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  maxShelfListDaysThresholdPercentage ELSE null END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeDateType ELSE null END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  maxPriceLimit ELSE null END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  maxQtyonHand ELSE null END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  saftyStock ELSE null END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  eau ELSE null END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  businessRisk ELSE null END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  programingRequired ELSE 0 END),  \n" +
				"                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUSEwithpermission ELSE 0 END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  bomLock ELSE 0 END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  restrictUsePermanently ELSE 0 END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  isDateCodeFormat ELSE 0 END),  \n" +
				"                (CASE WHEN (pIsSettings = 1) THEN  dateCodeFormatID ELSE NULL END),  \n" +
				"  \n" +
				"                /* Copy in case Additional Attribute checked*/  \n" +
				"                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  tolerance ELSE null END),  \n" +
				"                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  voltage ELSE null END),  \n" +
				"                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  `value` ELSE null END),  \n" +
				"                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  powerRating ELSE null END),  \n" +
				"                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  weight ELSE null END),  \n" +
				"                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  feature ELSE null END),  \n" +
				"                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  color ELSE null END),  \n" +
				"  \n" +
				"                /* Copy in case Packaging Detail checked*/  \n" +
				"                (CASE WHEN (pIsPackagingDetail = 1) THEN  deviceMarking ELSE null END),  \n" +
				"                (CASE WHEN (pIsPackagingDetail = 1) THEN  packagingID ELSE null END),  \n" +
				"                (CASE WHEN (pIsPackagingDetail = 1) THEN  minimum ELSE null END),  \n" +
				"                (CASE WHEN (pIsPackagingDetail = 1) THEN  mult ELSE null END),  \n" +
				"                (CASE WHEN (pIsPackagingDetail = 1) THEN  packageQty ELSE null END),  \n" +
				"                (CASE WHEN (pIsPackagingDetail = 1) THEN  umidSPQ ELSE null END),  \n" +
				"                (CASE WHEN (pIsPackagingDetail = 1) THEN  pcbPerArray ELSE null END),  \n" +
				"                (CASE WHEN (pIsPackagingDetail = 1) THEN  IsReceiveBulkItem ELSE null END)  \n" +
				"		 from component  \n" +
				"		where id = pFromPartID;  \n" +
				"		set vToPartID = LAST_INSERT_ID();  \n" +
				"  \n" +
				"		IF(vValidationPassed = 1)  \n" +
				"		THEN  \n" +
				"			 set vMessage = '';  \n" +
				"			 CALL Sproc_CopyPartDetailOnCopyAndDuplicatePart(pFromPartID,vToPartID,pUserID,vIsCPN,pIsCPN,vFromPartCategory,pIsStandards,pIsRequiredFunctionalType,pIsRequiredMountingType,pIsPackagingAliasPart,pIsOtherPartName  \n" +
				"				,pIsAlternatePart,pIsRoHSReplacementPart,pIsDriveTool,pIsProcessMaterial,pIsRequiredMattingParts,pIsPickupPad,pIsFunctionalTesingTool,pIsFinctionalRestingEquipment, vMisMatchFields, vMessage);  \n" +
				"  \n" +
				"            IF(vMessage != '')  \n" +
				"			THEN  \n" +
				"				select vMessage as message,vMisMatchFields as misMatchFields;  \n" +
				"			ELSE  \n" +
				"				IF pIsSettings then  \n" +
				"					INSERT INTO `component_temperature_sensitive_data`  \n" +
				"					(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
				"					select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
				"					from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
				"				end if;  \n" +
				"  \n" +
				"				IF pIsAcceptableShippinCountry then  \n" +
				"					INSERT INTO component_acceptable_shipping_countries  \n" +
				"						(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
				"					SELECT  \n" +
				"						vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
				"					FROM  \n" +
				"						component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
				"				end if;  \n" +
				"  \n" +
				"				if (vFromPartCategory = 3) then  \n" +
				"					if pIsBOM then  \n" +
				"						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
				"					end if;  \n" +
				"					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
				"				end if;  \n" +
				"				if(pIsComments = 1) THEN  \n" +
				"						INSERT INTO componenet_inspection_requirement_det  \n" +
				"								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
				"						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
				"						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
				"						INSERT INTO assembly_revision_comments  \n" +
				"							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
				"						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
				"							partID = pFromPartID;  \n" +
				"				END IF;  \n" +
				"  \n" +
				"				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
				"				IF pIsCopyImages  then  \n" +
				"					insert into component_images  \n" +
				"							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
				"					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
				"					 from component_images  \n" +
				"					where refComponentID = pFromPartID and isDeleted = false;  \n" +
				"				end if;  \n" +
				"				IF pIsCopyDatasheet  then  \n" +
				"					insert into component_datasheets  \n" +
				"							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
				"					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
				"					from component_datasheets  \n" +
				"						where refComponentID = pFromPartID and isDeleted = false;  \n" +
				"				end if;  \n" +
				"				IF pIsOperationalAttirbutes  then  \n" +
				"					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
				"						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
				"					SELECT  \n" +
				"						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
				"					FROM  \n" +
				"					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
				"				end if;  \n" +
				"				IF pIsCopyDocument then  \n" +
				"					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
				"					INSERT INTO generic_folder  \n" +
				"							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
				"							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
				"					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
				"							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
				"							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
				"					FROM generic_folder a  \n" +
				"					WHERE a.refTransID = pFromPartID  \n" +
				"					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
				"  \n" +
				"					UPDATE generic_folder gf1,  \n" +
				"					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
				"						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
				"						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
				"					) gf2  \n" +
				"					SET gf1.refParentId = gf2.gencFolderID  \n" +
				"					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
				"					AND gf1.refTransID = vToPartID  \n" +
				"					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
				"					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
				"  \n" +
				"					INSERT INTO genericfiles  \n" +
				"						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
				"						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
				"						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
				"					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
				"						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
				"						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
				"					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
				"  \n" +
				"					UPDATE genericfiles gf1,  \n" +
				"					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
				"						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
				"						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
				"					) gf2  \n" +
				"					SET gf1.refParentId = gf2.gencFolderID  \n" +
				"					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
				"					AND gf1.refTransID = vToPartID  \n" +
				"					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
				"				end if;  \n" +
				"  \n" +
				"				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
				"				IF(@documentPathOfFromPart is null)  \n" +
				"				THEN  \n" +
				"					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
				"				END IF;  \n" +
				"				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
				"			END IF;  \n" +
				"		END IF;  \n" +
				"	end if;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 14-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_RetrieveNonUMIDStockList`;  \n" +
				"CREATE PROCEDURE `Sproc_RetrieveNonUMIDStockList`(  \n" +
				"	IN ppageIndex INT,  \n" +
				"	IN precordPerPage INT,  \n" +
				"	IN pOrderBy VARCHAR(255),  \n" +
				"	IN pWhereClause VARCHAR(16383),  \n" +
				"	IN pWHId INT,  \n" +
				"	IN pBinId INT,  \n" +
				"   IN pMfgCodeIds LONGTEXT,  \n" +
				"   IN pReceivedStatus VARCHAR(255),  \n" +
				"   IN pIsMPNExactSearch TINYINT,  \n" +
				"   IN pIsBinExactSearch TINYINT,  \n" +
				"   IN pIsPackingSlipExactSearch TINYINT,  \n" +
				"   IN pScanMPNPID LONGTEXT,  \n" +
				"   IN pScanBinWareHouse LONGTEXT,  \n" +
				"   IN pPackingSlip LONGTEXT,  \n" +
				"   IN pPackingSlipFromDate DATE,  \n" +
				"   IN pPackingSlipToDate DATE  \n" +
				")  \n" +
				"BEGIN  \n" +
				"  \n" +
				"	DECLARE pOffset INT;  \n" +
				"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
				"	DECLARE advanceFilterWhere VARCHAR(16383);  \n" +
				"	DECLARE vMfgCodeFormat INT;  \n" +
				"	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
				"  \n" +
				"	SET advanceFilterWhere = ' AND 1 = 1 ';  \n" +
				"	IF(pWHId IS NOT NULL) THEN  \n" +
				"		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And W.ID = ', pWHId ,' ');  \n" +
				"	END IF;  \n" +
				"	IF(pBinId IS NOT NULL ) THEN  \n" +
				"		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And b.id = ', pBinId ,' ');  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY packingSlipDate DESC\") ;  \n" +
				"	ELSE  \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
				"		SET pWhereClause = ' 1 = 1' ;  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    IF(pReceivedStatus IS NOT NULL) THEN  \n" +
				"       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(pReceivedStatus IS NOT NULL) THEN  \n" +
				"       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF (pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL) THEN  \n" +
				"		SET pWhereClause = CONCAT(pWhereClause, \" AND packingSlipDate BETWEEN'\", pPackingSlipFromDate ,\"' AND '\", pPackingSlipToDate ,\"'\");  \n" +
				"	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
				"		SET pWhereClause = CONCAT(pWhereClause, \" AND packingSlipDate = '\", pPackingSlipFromDate ,\"' \");  \n" +
				"    END IF;  \n" +
				"  \n" +
				"	IF(pMfgCodeIds IS NOT NULL) THEN  \n" +
				"		SET pWhereClause= CONCAT(pWhereClause,' AND (supplierCodeID in (',pMfgCodeIds,'))');  \n" +
				"	END IF;  \n" +
				"  \n" +
				"   IF(pScanMPNPID IS NOT NULL) THEN  \n" +
				"		IF (pIsMPNExactSearch = 0) THEN  \n" +
				"			SET pWhereClause= CONCAT(pWhereClause,\" AND ( mfgPN LIKE '%\", pScanMPNPID ,\"%' OR pidCode LIKE '%\", pScanMPNPID ,\"%' ) \");  \n" +
				"		ELSE  \n" +
				"			SET pWhereClause= CONCAT(pWhereClause,\" AND ( mfgPN = '\", pScanMPNPID ,\"' OR pidCode = '\", pScanMPNPID ,\"' ) \");  \n" +
				"		END IF;  \n" +
				"    END IF;  \n" +
				"  \n" +
				"	IF(pScanBinWareHouse IS NOT NULL)THEN  \n" +
				"		IF (pIsBinExactSearch = 0) THEN  \n" +
				"			SET pWhereClause= CONCAT(pWhereClause,' AND ( binName LIKE \"%', pScanBinWareHouse ,'%\" OR warehouseName LIKE \"%', pScanBinWareHouse ,'%\" ) ');  \n" +
				"		ELSE  \n" +
				"			SET pWhereClause= CONCAT(pWhereClause,' AND ( warehouseName = \"', pScanBinWareHouse ,'\" OR binName = \"', pScanBinWareHouse ,'\" ) ');  \n" +
				"		END IF;  \n" +
				"    END IF;  \n" +
				"  \n" +
				"	IF(pPackingSlip IS NOT NULL)THEN  \n" +
				"		IF (pIsPackingSlipExactSearch = 0) THEN  \n" +
				"			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber LIKE \"%', pPackingSlip ,'%\" ) ');  \n" +
				"		ELSE  \n" +
				"			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber = \"', pPackingSlip ,'\" ) ');  \n" +
				"		END IF;  \n" +
				"    END IF;  \n" +
				"  \n" +
				"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
				"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
				"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
				"	ELSE  \n" +
				"		SET rowNumWhere = '';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	SET @temp_Sproc_RetrieveNonUMIDStockList = CONCAT(\"  \n" +
				"		SELECT 	BinID,      	binName,      		WarehouseID,      		warehouseName,      	departmentId,      	departmentName,  \n" +
				"				PartId,  		packingSlipID, 		packingSlipName,  		poNumber,				poID,				mfgCodeID,  \n" +
				"                packagingType,  packingSlipDate,   	packingSlipNumber,  	supplierCodeID,  \n" +
				"				mfgName,		mfgPN,      		pidCode,     			RoHSStatusID,      		rohsIcon,      		rohsName,  \n" +
				"                nickname,		InQty,  			UMIDCreatedQty,			returnQty,				BalanceQty,    		isCustom,  \n" +
				"                receivedStatus,     				receivedStatusValue,   	packingSlipModeStatus,     					packingSlipModeStatusValue,  \n" +
				"                IF(sourceName = 'Tape & Reel', BalanceQty/umidSPQ, 0) AS noOfPackage, 				supplierCodeName, 	mfgCodeName,  \n" +
				"                mfgPNDescription  \n" +
				"		FROM 	(  \n" +
				"				SELECT	vucp.BinID,      		vucp.warehouseID WarehouseID,      		vucp.parentWarehouseID departmentId,  \n" +
				"						b.Name binName,  		IFNULL(c.umidSPQ, 0) umidSPQ,  \n" +
				"						vucp.packingSlipID,  \n" +
				"                        w.Name warehouseName,  \n" +
				"                        fun_getWarehouseNameByID(vucp.parentWarehouseID) departmentName,  \n" +
				"						vucp.PartId,      		c.mfgPN As mfgPN,      		c.PIDCode As pidCode,  \n" +
				"                        c.RoHSStatusID,  \n" +
				"                        c.mfgPNDescription,  \n" +
				"						fun_getCOFCByPackingSlipID(vucp.packingSlipID) packingSlipName,  \n" +
				"						p.name packagingType,  \n" +
				"                        p.sourceName,  \n" +
				"						vucp.packingSlipDate packingSlipDate,  \n" +
				"                        vucp.packingSlipNumber,  \n" +
				"                        vucp.poNumber,  \n" +
				"                        vucp.refPurchaseOrderID as poID,  \n" +
				"						c.mfgCodeID,  \n" +
				"                        mp.mfgName,  \n" +
				"                        mp.mfgCode,  \n" +
				"                        vucp.mfgCodeID supplierCodeID,  \n" +
				"                        ms.mfgName AS supplierName,  \n" +
				"                        ms.mfgCode AS supplierCode,  \n" +
				"						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
				"                        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
				"						vucp.nickname,  \n" +
				"						vucp.InQty,				vucp.UMIDCreatedQty,      		vucp.returnQty,  \n" +
				"						vucp.BalanceQty,		c.isCustom,						c.partType,  \n" +
				"						vucp.receivedStatus,  \n" +
				"                        fun_getPackingSlipDetailStatusByKey(vucp.receivedStatus) receivedStatusValue,  \n" +
				"                        vucp.packingSlipModeStatus,  \n" +
				"                        IF(vucp.packingSlipModeStatus = 'D','Draft','Published') AS packingSlipModeStatusValue,  \n" +
				"						fun_GetFormattedMfgCode(ms.mfgCode, ms.mfgName,\", vMfgCodeFormat ,\") AS supplierCodeName,  \n" +
				"						fun_GetFormattedMfgCode(mp.mfgCode, mp.mfgName,\", vMfgCodeFormat ,\") AS mfgCodeName  \n" +
				"				FROM 		vu_umid_creation_pending vucp  \n" +
				"				INNER JOIN 	component c on vucp.PartId = c.id AND c.partType != 4 AND c.isdeleted = 0  \n" +
				"                INNER JOIN  mfgcodemst mp ON c.mfgCodeID = mp.id AND mp.isdeleted = 0  \n" +
				"				INNER JOIN 	binmst b on b.id = vucp.BinID AND b.isdeleted = 0  \n" +
				"                INNER JOIN 	component_packagingmst p on p.id = vucp.packagingID AND p.isdeleted = 0  \n" +
				"				INNER JOIN 	warehousemst w on w.ID = vucp.warehouseID AND w.isdeleted = 0  \n" +
				"                INNER JOIN  mfgcodemst ms ON vucp.mfgCodeID = ms.id AND ms.isdeleted = 0  \n" +
				"				WHERE 		vucp.BalanceQty > 0 \" ,	advanceFilterWhere , \"  \n" +
				"			) As tempNonUMID  \n" +
				"		WHERE \", pWhereClause  \n" +
				"  \n" +
				"	);  \n" +
				"	/* to get total count of rows */  \n" +
				"	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveNonUMIDStockList,\" ) c\");  \n" +
				"	PREPARE query2 FROM @SQLStatement2;  \n" +
				"	EXECUTE query2;  \n" +
				"	DEALLOCATE PREPARE query2;  \n" +
				"  \n" +
				"	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveNonUMIDStockList,\" ) c \" , pOrderBy , rowNumWhere);  \n" +
				"    PREPARE query1 FROM @SQLStatement2;  \n" +
				"	EXECUTE query1;  \n" +
				"	DEALLOCATE PREPARE query1;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 14-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_GenerateInternalDateCodeFromMFRDateCode`;  \n" +
				"CREATE PROCEDURE `Sproc_GenerateInternalDateCodeFromMFRDateCode`(  \n" +
				"	IN pMFRDateCodeFormatId INT,  \n" +
				"	IN pMFRDateCode VARCHAR(50),  \n" +
				"	IN pIsCallFromAPI BOOLEAN  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE vInternalDateCodeFormatID INT;  \n" +
				"    DECLARE vCategory VARCHAR(2);  \n" +
				"    DECLARE vInitDateCodeFormat VARCHAR(50);  \n" +
				"    DECLARE vMFRDateCodeFormat VARCHAR(50);  \n" +
				"    DECLARE vInitalMfrDateCode VARCHAR(50) DEFAULT pMFRDateCode;  \n" +
				"    DECLARE vCOUNT INT DEFAULT 1;  \n" +
				"    DECLARE vDayValue VARCHAR(5) DEFAULT NULL;  \n" +
				"    DECLARE vJulianDayValue VARCHAR(5) DEFAULT NULL;  \n" +
				"    DECLARE vMonthValue VARCHAR(5) DEFAULT NULL;  \n" +
				"    DECLARE vWeekValue VARCHAR(5) DEFAULT NULL;  \n" +
				"    DECLARE vYearValue VARCHAR(5) DEFAULT NULL;  \n" +
				"    DECLARE vFullYearValue VARCHAR(5) DEFAULT NULL;  \n" +
				"    DECLARE vIntialCode VARCHAR(2);  \n" +
				"    DECLARE vCounterValue VARCHAR(5);  \n" +
				"    DECLARE vLoopValue VARCHAR(5);  \n" +
				"    DECLARE vFinalInternalDateCode VARCHAR(50);  \n" +
				"  \n" +
				"    DECLARE EXIT HANDLER FOR 1411,1406  \n" +
				"	BEGIN  \n" +
				"		SELECT 	pMFRDateCodeFormatId mfrDateCodeFormatId,  \n" +
				"			(SELECT dateCodeFormat FROM date_code_format WHERE id = pMFRDateCodeFormatId) mfrDateCodeFormat,  \n" +
				"			pMFRDateCode mfrDateCode,  \n" +
				"			(SELECT sys.`values` FROM systemconfigrations sys WHERE sys.`key` = 'UMIDLotCodeFormat') internalDateCodeFormat,  \n" +
				"			NULL internalDateCode,  \n" +
				"			'ERROR01' errorMessageCode;  \n" +
				"	END;  \n" +
				"  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempDateCodeFormats;  \n" +
				"	CREATE TEMPORARY TABLE tempDateCodeFormats (datecodeformat VARCHAR(5), formatvalue VARCHAR(5));  \n" +
				"	INSERT INTO tempDateCodeFormats VALUES ('DD', NULL), ('DDD', NULL), ('MM', NULL), ('WW', NULL), ('YY', NULL), ('YYYY', NULL);  \n" +
				"  \n" +
				"	SET vInternalDateCodeFormatID = (SELECT sys.`values` FROM systemconfigrations sys WHERE sys.`key` = 'UMIDLotCodeFormat');  \n" +
				"    SELECT dateCodeFormat, category INTO vInitDateCodeFormat, vCategory FROM date_code_format WHERE id = vInternalDateCodeFormatID;  \n" +
				"    SELECT dateCodeFormat INTO vMFRDateCodeFormat FROM date_code_format WHERE id = pMFRDateCodeFormatId;  \n" +
				"  \n" +
				"	WHILE LENGTH(vMFRDateCodeFormat) > 0 DO  \n" +
				"		SET vIntialCode = SUBSTRING(vMFRDateCodeFormat,1,1);  \n" +
				"		SET vCounterValue = SUBSTRING(vMFRDateCodeFormat, LOCATE(vIntialCode,vMFRDateCodeFormat), CHAR_LENGTH(vMFRDateCodeFormat) - LOCATE(vIntialCode, REVERSE(vMFRDateCodeFormat))+1);  \n" +
				"		SET vLoopValue = SUBSTRING(vInitalMfrDateCode,1,LENGTH(vCounterValue));  \n" +
				"		UPDATE tempDateCodeFormats tmp SET tmp.formatValue = vLoopValue WHERE  tmp.datecodeformat = vCounterValue;  \n" +
				"        SET vInitalMfrDateCode = SUBSTRING(vInitalMfrDateCode,LENGTH(vCounterValue)+1);  \n" +
				"        SET vMFRDateCodeFormat = REPLACE(vMFRDateCodeFormat,SUBSTRING(vMFRDateCodeFormat,1,LENGTH(vCounterValue)),'');  \n" +
				"  \n" +
				"        SET vCounterValue = vLoopValue = vIntialCode = NULL;  \n" +
				"	END WHILE;  \n" +
				"  \n" +
				"	SET vCounterValue = vLoopValue = vIntialCode = NULL;  \n" +
				"  \n" +
				"    SELECT formatvalue INTO vFullYearValue FROM tempDateCodeFormats WHERE datecodeformat = 'YYYY';  \n" +
				"    SELECT formatvalue INTO vYearValue FROM tempDateCodeFormats WHERE datecodeformat = 'YY';  \n" +
				"	SELECT formatvalue INTO vMonthValue FROM tempDateCodeFormats WHERE datecodeformat = 'MM';  \n" +
				"    SELECT formatvalue INTO vWeekValue FROM tempDateCodeFormats WHERE datecodeformat = 'WW';  \n" +
				"	SELECT formatvalue INTO vJulianDayValue FROM tempDateCodeFormats WHERE datecodeformat = 'DDD';  \n" +
				"    SELECT formatvalue INTO vDayValue FROM tempDateCodeFormats WHERE datecodeformat = 'DD';  \n" +
				"  \n" +
				"	IF(vFullYearValue IS NULL) THEN  \n" +
				"		SET vFullYearValue = (SELECT YEAR(STR_TO_DATE(vYearValue,'%Y')));  \n" +
				"	ELSEIF(vYearValue IS NULL) THEN  \n" +
				"		SET vYearValue = (SELECT RIGHT(vFullYearValue, 2));  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(vFullYearValue IS NOT NULL AND vJulianDayValue IS NOT NULL) THEN  \n" +
				"		SET vMonthValue = (SELECT LPAD(MONTH(MAKEDATE(vFullYearValue,vJulianDayValue)),2,'0'));  \n" +
				"        SET vDayValue = (SELECT DATE_FORMAT(MAKEDATE(@vFullYearValue,@vJulianDayValue),'%d'));  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(vMonthValue IS NULL AND vWeekValue IS NOT NULL) THEN  \n" +
				"		SET vMonthValue = (SELECT LPAD(MONTH(STR_TO_DATE(GROUP_CONCAT(vFullYearValue,LPAD((vWeekValue + 1),2,'0'),' Sunday'),'%X%V %W')),2,'0'));  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(vWeekValue IS NULL AND vMonthValue IS NOT NULL) THEN  \n" +
				"		SET vWeekValue = (SELECT LPAD(WEEK(STR_TO_DATE(GROUP_CONCAT(vFullYearValue,'-',vMonthValue,'-',IF(vDayValue IS NOT NULL, vDayValue, '01')),'%Y-%m-%d')),2,'0'));  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(vDayValue IS NULL AND vWeekValue IS NOT NULL) THEN  \n" +
				"		SET vDayValue = (SELECT LPAD(DATE_FORMAT(STR_TO_DATE(GROUP_CONCAT(vFullYearValue,LPAD((vWeekValue + 1),2,'0'),' Sunday'), '%X%V %W'),'%d'),2,'0'));  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(vJulianDayValue IS NULL) THEN  \n" +
				"		SET vJulianDayValue = (SELECT LPAD(DAYOFYEAR(STR_TO_DATE(GROUP_CONCAT(vFullYearValue,'-',vMonthValue,'-',IF(vDayValue IS NOT NULL, vDayValue, '01')),'%Y-%m-%d')),3,'0'));  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    # Set Internal Date Code  \n" +
				"    SET vFinalInternalDateCode = vInitDateCodeFormat;  \n" +
				"    SET vFinalInternalDateCode = Replace(vFinalInternalDateCode,'YYYY',vFullYearValue);  \n" +
				"    SET vFinalInternalDateCode = Replace(vFinalInternalDateCode,'YY',vYearValue);  \n" +
				"    SET vFinalInternalDateCode = Replace(vFinalInternalDateCode,'MM',vMonthValue);  \n" +
				"    SET vFinalInternalDateCode = Replace(vFinalInternalDateCode,'WW',vWeekValue);  \n" +
				"    IF(vCategory = 'J') THEN  \n" +
				"		SET vFinalInternalDateCode = Replace(vFinalInternalDateCode,'DDD',vJulianDayValue);  \n" +
				"	ELSE  \n" +
				"		SET vFinalInternalDateCode = Replace(vFinalInternalDateCode,'DD',vDayValue);  \n" +
				"    END IF;  \n" +
				"  \n" +
				"    DROP TEMPORARY TABLE IF EXISTS temp_InternalDateCodeFromMFRDateCode;  \n" +
				"	CREATE 	TEMPORARY TABLE IF NOT EXISTS temp_InternalDateCodeFromMFRDateCode AS  \n" +
				"	SELECT 	pMFRDateCodeFormatId mfrDateCodeFormatId,  \n" +
				"			(SELECT dateCodeFormat FROM date_code_format WHERE id = pMFRDateCodeFormatId) mfrDateCodeFormat,  \n" +
				"			pMFRDateCode mfrDateCode,  \n" +
				"			vInitDateCodeFormat internalDateCodeFormat,  \n" +
				"			vFinalInternalDateCode AS internalDateCode,  \n" +
				"            vWeekValue AS dateCodeWeek,  \n" +
				"            vYearValue AS dateCodeYear;  \n" +
				"	IF (pIsCallFromAPI) THEN  \n" +
				"		SELECT * FROM temp_InternalDateCodeFromMFRDateCode;  \n" +
				"	END IF;  \n" +
				"    DROP TEMPORARY TABLE IF EXISTS tempDateCodeFormats;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 14-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetUMIDListForCustomerPackingSlip`;  \n" +
				"CREATE PROCEDURE `Sproc_GetUMIDListForCustomerPackingSlip`(  \n" +
				"	IN pOrderBy VARCHAR(255),  \n" +
				"	IN pWhereClause VARCHAR(16383),  \n" +
				"	IN pPartId INT,  \n" +
				"	IN pExpiredDay INT,  \n" +
				"	IN pPackingSlipDetId INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
				"	DECLARE v_TimeZone VARCHAR(50);  \n" +
				"    DECLARE vUMIDWhereClause VARCHAR(1000);  \n" +
				"	DECLARE vPackagingAliasPart VARCHAR(1000);  \n" +
				"    DECLARE vCplAvlPart VARCHAR(1000);  \n" +
				"	DECLARE vExpireDaysLeftBeforeShipment INT ;  \n" +
				"    DECLARE vMfgCodeFormat INT;  \n" +
				"  \n" +
				"    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
				"  \n" +
				"	select `values` into vExpireDaysLeftBeforeShipment  \n" +
				"	from systemconfigrations  \n" +
				"	where `key` = 'ExpireDaysLeftBeforeShipment'  \n" +
				"	and isDeleted =0 ;  \n" +
				"  \n" +
				"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
				"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
				"  \n" +
				"	#SET vInnerJoinMainQuery = ' ', vComponentWhereClause ='', vKitWhereClause='', vUMIDWhereClause = '';  \n" +
				"	# Get AVL part list of CPN part  \n" +
				"    SELECT GROUP_CONCAT(refComponentID) INTO vCplAvlPart  \n" +
				"	FROM  component_cust_alias_rev_pn  \n" +
				"    WHERE refCPNPartID = pPartId  \n" +
				"    AND isDeleted = 0;  \n" +
				"	#Get Packaging Alias part list  \n" +
				"	SELECT GROUP_CONCAT(a.componentID) INTO vPackagingAliasPart  \n" +
				"	FROM component_packagingalias   a  \n" +
				"	WHERE a.aliasgroupID IN  \n" +
				"	(SELECT b.aliasgroupID FROM component_packagingalias b WHERE b.componentID = pPartId)  \n" +
				"	AND a.componentID <> pPartId  \n" +
				"	AND a.isDeleted = 0;  \n" +
				"  \n" +
				"	IF (pOrderBy IS NOT NULL) THEN  \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
				"	ELSE  \n" +
				"		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
				"		SET pWhereClause = ' 1=1';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	/*IF(pExpireMaterial = 1) THEN  \n" +
				"		IF(pExpiredDay = 0) THEN  \n" +
				"			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime()');  \n" +
				"		ELSE  \n" +
				"			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ',pExpiredDay,' DAY');  \n" +
				"		END IF;  \n" +
				"	END IF;	                */  \n" +
				"  \n" +
				"	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
				"		SET vUMIDWhereClause = CONCAT(' AND (css.refcompid = ', pPartId);  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    IF vPackagingAliasPart IS NOT NULL THEN  \n" +
				"		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR  css.refcompid in (' , vPackagingAliasPart,')');  \n" +
				"    END IF;  \n" +
				"    IF vCplAvlPart IS NOT NULL THEN  \n" +
				"		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR  css.refcompid in ( ', vCplAvlPart, ')');  \n" +
				"    END IF;  \n" +
				"    IF (vUMIDWhereClause IS NOT NULL  OR  vUMIDWhereClause != '') THEN  \n" +
				"		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ')');  \n" +
				"    END IF;  \n" +
				"    IF pPackingSlipDetId IS NOT NULL THEN  \n" +
				"		SET pWhereClause  =  CONCAT(pWhereClause , ' or ( tempUMID.id in (select refsidid from shippedassembly sa where (sa.partID =', pPartId );  \n" +
				"        IF vPackagingAliasPart IS NOT NULL THEN  \n" +
				"			SET pWhereClause = CONCAT(pWhereClause, ' OR  sa.partID in (' , vPackagingAliasPart,')');  \n" +
				"		END IF;  \n" +
				"		IF vCplAvlPart IS NOT NULL THEN  \n" +
				"			SET pWhereClause = CONCAT(pWhereClause, ' OR  sa.partID in ( ', vCplAvlPart, ')');  \n" +
				"		END IF;  \n" +
				"		SET pWhereClause  =  CONCAT(pWhereClause , ') and sa.refCustPackingSlipDetID =',pPackingSlipDetId, ') and  tempUMID.isinStk =0 ) ');  \n" +
				"	END IF;  \n" +
				"    SET pWhereClause  =  CONCAT(pWhereClause , ' or ( tempUMID.isinStk = 0 and tempUMID.pkgQty > 0 ) ');  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
				"	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
				"	/*IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
				"		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
				"		SELECT 	k.refUIDId  \n" +
				"		FROM 	kit_allocation k  \n" +
				"		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
				"		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
				"		AND	k.status = 'A';  \n" +
				"		SET vKitWhereClause = CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs)');  \n" +
				"	END IF;                      */  \n" +
				"  \n" +
				"	SET @vFromSQLQuery = CONCAT(\"  \n" +
				"					SELECT 		id, 			scanlabel, 			uid, 			    	pkgQty, 			uom,  \n" +
				"							uomName,		printStatus, 		        costCategoryID,			costCategory,			lotCode,  \n" +
				"							dateCode,		refcompid,			mfgcodeID,		        mfgPN, 				PIDCode,  \n" +
				"							packaginggroupID,	mfg,				packageQty,  \n" +
				"							RoHSStatusID,		rohsIcon, 		        rohsName,			binID,				warehouseID,  \n" +
				"							location,		warehouse,			department, 		        customerID,			receiveMaterialType,  \n" +
				"							displayReceiveMaterialType,				spq,				pcbPerArray, 		        stockInventoryType,  \n" +
				"							isReservedStock,	customer,			pkgUnit,   		        orgPkgUnit,  \n" +
				"							cpn,				mfgAvailable, 		        customerConsign,  \n" +
				"							refCPNMFGPNID, 		        mfgPNDescription,		nickName,  \n" +
				"							refSupplierPartId,	supplierMFGCode, 	        supplieMFGPN,			packaging,			packagingName,  \n" +
				"							expiryDate,		allocatedToKit,			orgQty, 		        orgRecBin,			orgRecBinName,  \n" +
				"							orgRecWarehouse,	orgRecWHName,			fromBin, 		        fromBinName, 		        fromWarehouse,  \n" +
				"							fromWHName,		fromDepartment,			fromDepartmentName, 	        specialNote,			orgRecDepartment,  \n" +
				"							orgRecDepartmentName,	updatedAt, 		        updatedBy,			umidModifiedBy, 	        createdAt,  \n" +
				"							createdBy,		createdByName,			isinStk,			packingSlipId,  \n" +
				"							packingSupplierName, 	expiredStatus,			umidPrefix,                     createdbyRole,			updatedbyRole,  \n" +
				"							refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		        restrictUsePermanently,		restrictUSEwithpermission,  \n" +
				"							restrictPackagingUsePermanently,			restrictPackagingUseWithpermission,  \n" +
				"							countOfRestrictUMID,	departmentID,			warehouseType,			totalScrapUnit,			((totalScrapUnit/orgPkgUnit)*100) perScrapQty,  \n" +
				"							tentativePrice,		((totalScrapUnit/orgPkgUnit)*tentativePrice) costScrapQty,	isTransit,  \n" +
				"									               externalPartPackage,		partPackage,			createdUserCode,  \n" +
				"							mfrDateCodeFormatID,	mfrDateCodeFormat,		mfrDateCode,  \n" +
				"							UMIDrohsStatusID,       UMIDrohsStatus,        		isCustom,        		internalPartPackage,    	woNumber,  \n" +
				"							detailDescription ,reservedForCustomer,isEachUOM ,\",vExpireDaysLeftBeforeShipment,\" as expireDaysLeftBeforeShipmentFromKey,  \n" +
				"                            (if (expiryDate <= date_add(current_Date(),interval \",vExpireDaysLeftBeforeShipment,\" day) , 1 ,0)) isNearByExpiry  \n" +
				"		FROM 		(  \n" +
				"					SELECT 		css.id,			css.scanlabel,			css.uid,			css.pkgQty,			css.uom,  \n" +
				"							fun_getUnitNameByID(css.uom) uomName,			css.printStatus,		css.costCategoryID,  \n" +
				"							fun_getCostCategoryNameByID(css.costCategoryID, FALSE) costCategory,			css.lotCode,			css.dateCode,  \n" +
				"							css.refcompid,		c.mfgcodeID,			c.mfgPN,			c.PIDCode,			c.packaginggroupID,  \n" +
				"							fun_GetFormattedMfgCode(co_mfg.mfgcode,co_mfg.mfgname,\", vMfgCodeFormat,\")  mfg,		c.packageQty,  \n" +
				"							css.prefix umidPrefix,  \n" +
				"                            c.RoHSStatusID,  \n" +
				"							fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,		fun_getRoHSNameByID(c.RoHSStatusID)  rohsName,			css.binID,  \n" +
				"							fun_getBinNameByID(css.binID) location,			css.customerID,			fun_getMfgCodeAndNameByID(css.customerID) customer,  \n" +
				"							IFNULL(css.orgPkgUnit, 0) orgPkgUnit,			css.pkgUnit,  \n" +
				"							fun_getWarehouseNameByBinID(css.binID) warehouse,  \n" +
				"                            fun_getWarehouseIDByBinID(css.binID) warehouseID,  \n" +
				"                            fun_getDepartmentNameByBinID(css.binID) department,  \n" +
				"							(  \n" +
				"								CASE  \n" +
				"									WHEN (css.cpn = 0) THEN 'No'  \n" +
				"									WHEN (css.cpn = 1) THEN 'Yes'  \n" +
				"									ELSE ''  \n" +
				"								END  \n" +
				"							) AS cpn,  \n" +
				"							(  \n" +
				"								CASE 	WHEN (css.mfgAvailabel = 0) THEN 'No'  \n" +
				"									WHEN (css.mfgAvailabel = 1) THEN 'Yes'  \n" +
				"									ELSE ''  \n" +
				"								END  \n" +
				"							) AS mfgAvailable,  \n" +
				"							(  \n" +
				"								CASE 	WHEN (css.customerConsign = 0) THEN 'No'  \n" +
				"									WHEN (css.customerConsign = 1) THEN 'Yes'  \n" +
				"									ELSE ''  \n" +
				"								END  \n" +
				"							) AS customerConsign,  \n" +
				"							css.refCPNMFGPNID,  \n" +
				"							c.mfgPNDescription,			css.receiveMaterialType,  \n" +
				"                            css.spq,  \n" +
				"							(  \n" +
				"								CASE  \n" +
				"									WHEN  css.receiveMaterialType = 'PP' THEN  \n" +
				"										'Purchased Part'  \n" +
				"									WHEN  css.receiveMaterialType = 'CP' THEN  \n" +
				"										'Customer Consigned Part'  \n" +
				"									ELSE  \n" +
				"										NULL  \n" +
				"								END  \n" +
				"  \n" +
				"							) displayReceiveMaterialType,  \n" +
				"                            fun_getMfgNameByID(css.customerId) As reservedForCustomer,  \n" +
				"							css.stockInventoryType,  		css.isReservedStock,  \n" +
				"							css.pcbPerArray,				css.nickName,					css.packaging,  \n" +
				"							fun_getPackagingNameByID(css.packaging) packagingName,						css.refSupplierPartId,  \n" +
				"							fun_getMfgCodeAndNameByPartID(css.refSupplierPartId) supplierMFGCode,	          		fun_getMFGPNByID(css.refSupplierPartId) supplieMFGPN,  \n" +
				"							css.expiryDate,  \n" +
				"                            fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKit,  \n" +
				"							css.orgQty,					css.specialNote,				css.fromBin,  \n" +
				"							fun_getBinNameByID( css.fromBin) fromBinName,		css.fromWarehouse,  \n" +
				"							fun_getWarehouseNameByID(css.fromWarehouse) fromWHName,						css.fromDepartment,  \n" +
				"							fun_getWarehouseNameByID(css.fromDepartment) fromDepartmentName,				css.orgRecBin,  \n" +
				"							fun_getBinNameByID(css.orgRecBin) orgRecBinName,						css.orgRecWarehouse,  \n" +
				"							fun_getWarehouseNameByID(css.orgRecWarehouse) orgRecWHName, 					css.orgRecDepartment,  \n" +
				"							fun_getWarehouseNameByID(css.orgRecDepartment) orgRecDepartmentName,  \n" +
				"							fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
				"							css.updatedBy,					fun_getUserNameByID(css.updatedBy) AS umidModifiedBy,  \n" +
				"							fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
				"							css.createdAt createdAtFilter,  \n" +
				"							css.createdBy,					fun_getUserNameByID(css.createdBy) createdByName,  \n" +
				"							css.isinStk,  \n" +
				"							fun_getRoleByID(css.createByRoleId) createdbyRole,  \n" +
				"		                                        fun_getRoleByID(css.updateByRoleId) updatedbyRole,  \n" +
				"							(  \n" +
				"								CASE  \n" +
				"									WHEN  css.stockInventoryType in ('NI','SI') THEN  \n" +
				"										CONCAT('(', a.mfgCode, ') ', a.mfgName)  \n" +
				"									ELSE  \n" +
				"										NULL  \n" +
				"								END  \n" +
				"							) packingSupplierName,  \n" +
				"							a.packingSlipId,  \n" +
				"							 fun_getDepartmentIDByBinID(css.binID) departmentID,  \n" +
				"							 fun_getWareHouseTypeByBinID(css.binID) warehouseType  ,  \n" +
				"							(  \n" +
				"								CASE 	WHEN (css.expiryDate < fun_DatetimetoUTCDateTime()) THEN 'Expired'  \n" +
				"									ELSE NULL  \n" +
				"								END  \n" +
				"							) AS expiredStatus,  \n" +
				"							refRestrictUMIDId, 				  	isUMIDRestrict,  \n" +
				"							(  \n" +
				"								CASE 	WHEN (css.isUMIDRestrict = 0) THEN 'No'  \n" +
				"									WHEN (css.isUMIDRestrict = 1) THEN 'Yes'  \n" +
				"									ELSE ''  \n" +
				"								END  \n" +
				"							) AS UMIDRestricted,  \n" +
				"							c.restrictUsePermanently,						c.restrictUSEwithpermission,  \n" +
				"							c.restrictPackagingUsePermanently,					c.restrictPackagingUseWithpermission,  \n" +
				"							IFNULL(c.price, 0) tentativePrice,					fun_getTotalUMIDScrapUnit(css.id) totalScrapUnit,  \n" +
				"							fun_getCountOfRestrictUMID(css.id) countOfRestrictUMID,         	fun_getUMIDTransitStatus(css.uid) isTransit,  \n" +
				"							c.partPackage externalPartPackage,  \n" +
				"							fun_getPackageCaseNameByID(c.partPackageID) partPackage,  \n" +
				"							fun_getUserCodeByID(css.createdBy) createdUserCode,                   	css.mfrDateCodeFormatID,  \n" +
				"							fun_getDateCodeFormatById(css.mfrDateCodeFormatID) mfrDateCodeFormat,  \n" +
				"							css.mfrDateCode,		css.rohsStatusID UMIDrohsStatusID,  \n" +
				"							fun_getRoHSNameByID(css.rohsStatusID) UMIDrohsStatus,			c.isCustom,  \n" +
				"							fun_getPackageCaseNameByID(c.partPackageID) internalPartPackage,    	css.woNumber,  \n" +
				"							c.detailDescription,  \n" +
				"                            (case when css.uom = -1 then true else false end) isEachUOM  \n" +
				"					FROM 		component_sid_stock css force index(FK_component_sid_stock_refcompid)  \n" +
				"					INNER JOIN 	component c on css.refcompid = c.id  \n" +
				"					LEFT JOIN 	(  \n" +
				"								SELECT 		cspd.refComponentSidStockID, mcm.mfgCode, ps.packingSlipNumber, mcm.mfgName, ps.id packingSlipId  \n" +
				"								FROM 		component_sid_stock_packing_detail cspd  \n" +
				"								INNER JOIN 	packing_slip_material_receive_det psd force index(PRIMARY) ON cspd.refPackingSlipDetailID = psd.id AND psd.isDeleted = 0  \n" +
				"								INNER JOIN 	packing_slip_material_receive ps force index(PRIMARY) ON psd.refPackingSlipMaterialRecID = ps.id AND ps.isDeleted = 0  \n" +
				"								INNER JOIN 	mfgcodemst mcm ON mcm.id = ps.mfgCodeID AND mcm.isDeleted = 0  \n" +
				"								GROUP BY 	cspd.refComponentSidStockID, mcm.mfgCode, ps.packingSlipNumber, mcm.mfgName, ps.id  \n" +
				"							) a ON a.refComponentSidStockID = ifnull(css.parentUIDId , css.id)  \n" +
				"                    LEFT JOIN mfgcodemst co_mfg on co_mfg.id = c.mfgcodeId and co_mfg.isDeleted = 0  \n" +
				"                    LEFT JOIN mfgcodemst css_mfg on css_mfg.id = css.customerId and css_mfg.isDeleted = 0  \n" +
				"					WHERE 	(css.isdeleted is null or css.isdeleted = 0)\",  \n" +
				"								vUMIDWhereClause,\") As tempUMID  \n" +
				"				WHERE \", pWhereClause  \n" +
				"			);  \n" +
				"  \n" +
				"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
				"	PREPARE query1 FROM @SQLStatement1;  \n" +
				"	EXECUTE query1;  \n" +
				"	DEALLOCATE PREPARE query1;  \n" +
				"  \n" +
				"	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
				"	PREPARE query2 FROM @SQLStatement2;  \n" +
				"	EXECUTE query2;  \n" +
				"	DEALLOCATE PREPARE query2;  \n" +
				"	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy);  \n" +
				"	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
				"	EXECUTE mainQuery;  \n" +
				"	DEALLOCATE PREPARE mainQuery;  \n" +
				"  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 14-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
				"CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(  \n" +
				"    IN pWhereClause VARCHAR(16383),  \n" +
				"    IN puserID VARCHAR(50),  \n" +
				"    IN pnickName VARCHAR(20),  \n" +
				"    IN pprefix VARCHAR(20),  \n" +
				"    IN pIsFromUID TINYINT,  \n" +
				"    IN pComponentID INT,  \n" +
				"    IN pCustomerID INT,  \n" +
				"    IN pCPN BOOL,  \n" +
				"    IN pMFGAvailabel BOOL,  \n" +
				"    IN pRefCpnMfgID INT,  \n" +
				"    IN pAssyID INT,  \n" +
				"    IN pSalesOrderDetailID INT,  \n" +
				"    IN pReceiveMaterialType VARCHAR(255),  \n" +
				"    IN pkitAssemblyID INT,  \n" +
				"    IN pBarcodeID INT,  \n" +
				"    IN pBOMLineID INT,  \n" +
				"    IN pSupplierID INT,  \n" +
				"    IN pCategory VARCHAR(2),  \n" +
				"    IN pInventoryType VARCHAR(2),  \n" +
				"    IN pCallFrom VARCHAR(50),  \n" +
				"    IN pExcludeStatus INT,  \n" +
				"    IN pBinID INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
				"	DECLARE v_delimiter VARCHAR(10);  \n" +
				"	DECLARE v_length INT;  \n" +
				"	DECLARE v_fieldType INT;  \n" +
				"	DECLARE v_entityId INT;  \n" +
				"	DECLARE v_dataElementId INT;  \n" +
				"	DECLARE v_displayOrder DECIMAL(6,2);  \n" +
				"	DECLARE delimiter_value_data VARCHAR(1000);  \n" +
				"	DECLARE strLabel VARCHAR(2000);  \n" +
				"	DECLARE QueryForStatic  VARCHAR(2000);  \n" +
				"	DECLARE StaticField VARCHAR(100);  \n" +
				"	DECLARE DynamicField VARCHAR(100);  \n" +
				"	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';  \n" +
				"	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');  \n" +
				"	DECLARE plen,slen INT;  \n" +
				"	DECLARE pbr_template_ID INT DEFAULT 0;  \n" +
				"	DECLARE pbr_Separator VARCHAR(50);  \n" +
				"	DECLARE barcode_type_id INT;  \n" +
				"	DECLARE MFG_Part_No VARCHAR(16383);  \n" +
				"	DECLARE UpdateValue VARCHAR(16383);  \n" +
				"	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';  \n" +
				"	DECLARE v_SupplierID INT;  \n" +
				"	DECLARE v_BarcodeType VARCHAR(20);  \n" +
				"	DECLARE v_barcode_id INT;  \n" +
				"	DECLARE v_barcode_count INT;  \n" +
				"	DECLARE v_NumberOfPart INT;  \n" +
				"	DECLARE v_rfqLineItemsID INT;  \n" +
				"	DECLARE v_componentCount INT;  \n" +
				"	DECLARE v_componentId INT;  \n" +
				"	DECLARE v_mfgPartNO VARCHAR(100);  \n" +
				"	DECLARE v_partMFG INT;  \n" +
				"	DECLARE v_isGoodPart TINYINT;  \n" +
				"	DECLARE v_restrictUsePermanently TINYINT;  \n" +
				"	DECLARE v_restrictUSEwithpermission TINYINT;  \n" +
				"	DECLARE v_restrictUseInBOM TINYINT;  \n" +
				"	DECLARE v_isInstall TINYINT;  \n" +
				"	DECLARE v_isBOMLineClean TINYINT;  \n" +
				"	DECLARE v_BOMLineId INT;  \n" +
				"	DECLARE v_restrictPackagingAliasPermanently TINYINT;  \n" +
				"	DECLARE v_restrictPackagingAliasPermission TINYINT;  \n" +
				"	DECLARE v_bomErrorDescription LONGTEXT;  \n" +
				"	DECLARE v_PIDCode VARCHAR(110);  \n" +
				"	DECLARE v_isPurchase TINYINT;  \n" +
				"	DECLARE v_isBuyDNPQty VARCHAR(5);  \n" +
				"	DECLARE v_BOMLineItemNo DECIMAL(16,8);  \n" +
				"	DECLARE v_BOMLineCount INT;  \n" +
				"	DECLARE v_AlternateLineId INT;  \n" +
				"	DECLARE v_MFRPackagingId VARCHAR(1000);  \n" +
				"	DECLARE v_BOMAssyId INT;  \n" +
				"	DECLARE v_BOMAssyIds VARCHAR(1000);  \n" +
				"	DECLARE v_restrictUsePackagingInBOM TINYINT;  \n" +
				"	DECLARE v_restrictUseCPNInBOM TINYINT;  \n" +
				"	DECLARE v_isCPNFlag TINYINT;  \n" +
				"	DECLARE v_dateCodeFormatID INT;  \n" +
				"	DECLARE v_InternalDateCode VARCHAR(50);  \n" +
				"  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);  \n" +
				"	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;  \n" +
				"	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;  \n" +
				"	DECLARE v_MFRList VARCHAR(10000);  \n" +
				"	DECLARE v_barcode_status INT;  \n" +
				"	DECLARE v_category INT;  \n" +
				"	DECLARE v_partType INT;  \n" +
				"    DECLARE v_pendingPartCount INT;  \n" +
				"    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
				"  \n" +
				"	SET v_SupplierQuoteMFRIsNotCustomPart = 0;  \n" +
				"	SET v_MfrNotFoundForSupplierQuote = 0;  \n" +
				"    SET v_dateCodeFormatID = (SELECT sys.`values` FROM systemconfigrations sys WHERE sys.`key` = 'UMIDLotCodeFormat');  \n" +
				"  \n" +
				"    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;  \n" +
				"	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error  \n" +
				"	(  \n" +
				"		errorText LONGTEXT,  \n" +
				"		IsSuccess VARCHAR (2),  \n" +
				"		MFGPart VARCHAR(10000)  \n" +
				"	);  \n" +
				"  \n" +
				"	/* Temp table for Packing Slip */  \n" +
				"	IF (pCategory = 'P') THEN  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;  \n" +
				"		CREATE TEMPORARY TABLE temp_packing_slip_material_receive  \n" +
				"		(  \n" +
				"			scanlabel VARCHAR(1000),  \n" +
				"			poNumber VARCHAR(100),  \n" +
				"			supplierSONumber VARCHAR(100),  \n" +
				"			packingSlipNumber VARCHAR(50),  \n" +
				"			invoiceNumber VARCHAR(50)  \n" +
				"		);  \n" +
				"	ELSE /* Temp table for MFR */  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;  \n" +
				"		CREATE TEMPORARY TABLE temp_Component_Sid_Stock  \n" +
				"		(  \n" +
				"			refcompid INT,  \n" +
				"            dateCodeFormatID INT,  \n" +
				"			pkgQty DECIMAL(18,6),  \n" +
				"			dateCode VARCHAR(10),  \n" +
				"			lotCode VARCHAR(255),  \n" +
				"			scanlabel VARCHAR(1000),  \n" +
				"			createdBy VARCHAR(255),  \n" +
				"			uid VARCHAR(14),  \n" +
				"			prefix VARCHAR(20),  \n" +
				"			nickName VARCHAR(50),  \n" +
				"			cpn TINYINT,  \n" +
				"			mfgAvailabel TINYINT,  \n" +
				"			refCPNMFGPNID INT,  \n" +
				"			customerID INT,  \n" +
				"			assyID INT,  \n" +
				"			receiveMaterialType VARCHAR(255),  \n" +
				"			refSupplierPartId INT,  \n" +
				"			mfrDateCode VARCHAR(50),  \n" +
				"			poNumber VARCHAR(50),  \n" +
				"			supplierSONumber VARCHAR(50),  \n" +
				"			packingSlipNumber VARCHAR(50),  \n" +
				"			invoiceNumber VARCHAR(50),  \n" +
				"			binName VARCHAR(100),  \n" +
				"			packaging VARCHAR(100),  \n" +
				"			packingSlipDetailNickname VARCHAR(50)  \n" +
				"		);  \n" +
				"  \n" +
				"		/* Temp table for data element value */  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;  \n" +
				"		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values  \n" +
				"		(  \n" +
				"			entityid INT,  \n" +
				"			dataelementid INT,  \n" +
				"			`value` LONGTEXT,  \n" +
				"			createdBy VARCHAR(255)  \n" +
				"		);  \n" +
				"    END IF;  \n" +
				"	-- get data from barcode templates with seprator  \n" +
				"	# return error code  \n" +
				"	# 0: Mfgcode and MfgpartNO is not Found  \n" +
				"	# 0: Barcode template does not exist, Please add template  \n" +
				"	# 1: Validation Clear  \n" +
				"	# 2: Mfgcode and Mfg partNO are avialable but not matched in component  \n" +
				"	# 3: Mfgcode is not found  \n" +
				"	# 4: MFG PN does not exist  \n" +
				"	# 5: Multiple MFG PN found  \n" +
				"	# 6: CPN MFG Part is mismatch with CPN MFG Code  \n" +
				"	# 7: MFG PN or CPN is not found in bom of this assembly  \n" +
				"	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer  \n" +
				"	# 9:  Multiple barcode template found.  \n" +
				"	# 10: Scanned MFG Part is not CPN, Please check  \n" +
				"	# 11: MFG PN is incorrect part  \n" +
				"	# 12: PID PID1 was restricted part at part master level.  \n" +
				"	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
				"	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.  \n" +
				"	# 15: BOM line have not clean. So, you can not allocate to kit.  \n" +
				"	# 16: PID PID1 was restricted packaging alias part at part master level.  \n" +
				"	# 17: PID is contain more than 1 BOM line.  \n" +
				"	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.  \n" +
				"	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
				"	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.  \n" +
				"	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.  \n" +
				"	# 22: You cannot create UMID for assembly from Existing Stock.  \n" +
				"	# 23: In UMID Management screen not allow to scan which part's part type is Other  \n" +
				"    # 24: In UMID Management screen if pending stock is not exists for stockinventory NI then not allow to scan part  \n" +
				"    # 25: In UMID Management screen if pending stock PS status is Draft then not allow to scan part  \n" +
				"    # 24: In UMID Management screen if pending stock PS Line received status is Pending or Rejected then not allow to scan part  \n" +
				"  \n" +
				"	block1: BEGIN  \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");   \n" +
				"		IF (pBarcodeID IS NULL) THEN  \n" +
				"			/* Get barcode from labelstring */  \n" +
				"            SELECT COUNT(*) INTO v_barcode_count  \n" +
				"			  FROM br_label_template  \n" +
				"             WHERE isDeleted=0  \n" +
				"               AND barcodeCategory = pCategory  \n" +
				"               AND `status`=1  \n" +
				"               AND pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
				"  \n" +
				"			SELECT id, barcodeType, `name`, `status`  \n" +
				"              INTO v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status  \n" +
				"			  FROM br_label_template  \n" +
				"             WHERE isDeleted=0  \n" +
				"               AND barcodeCategory = pCategory  \n" +
				"               AND `status`=1  \n" +
				"               AND pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) limit 1;  \n" +
				"			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN  \n" +
				"				/* Get More than 1 barcode then give validation */  \n" +
				"				IF (v_barcode_count > 1) THEN  \n" +
				"					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
				"					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
				"  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
				"					('Multiple barcode template found.',9,@multiple_barcode_string);  \n" +
				"  \n" +
				"					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
				"					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
				"					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"				ELSE  \n" +
				"					SET pBarcodeID = v_barcode_id;  \n" +
				"				END IF;  \n" +
				"			END IF;  \n" +
				"		ELSE  \n" +
				"			/* Get data from barcode id */  \n" +
				"			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;  \n" +
				"		END IF;  \n" +
				"  \n" +
				"		/* If data not get from barcode then concat none in label string find in table */  \n" +
				"		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN  \n" +
				"			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);  \n" +
				"			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name  \n" +
				"			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
				"			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
				"			SET pBarcodeID = v_barcode_id;  \n" +
				"		END IF;  \n" +
				"  \n" +
				"		IF(barcode_type_id=2)THEN    /* barcode 2D */  \n" +
				"			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID  \n" +
				"			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;  \n" +
				"			SET v_BarcodeType = '2D';  \n" +
				"		ELSE /* barcode 1D */  \n" +
				"			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template  \n" +
				"			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;  \n" +
				"			SET v_BarcodeType = '1D';  \n" +
				"		END IF;  \n" +
				"	END block1;  \n" +
				"  \n" +
				"	/* If error is not found then continue else select error */  \n" +
				"	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
				"		block2: BEGIN  \n" +
				"			-- declare cusrsor barcode match on all barcode template delimiter record found  \n" +
				"			DECLARE  barcodeMatch_cursor CURSOR FOR  \n" +
				"				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter  \n" +
				"				WHERE refbrID = pBarcodeID AND isDeleted = 0;  \n" +
				"			-- declare exit loop if data not found  \n" +
				"			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
				"			-- if any record match found than  check for delimiter and its value  \n" +
				"			IF (pbr_template_ID > 0) THEN  \n" +
				"				-- create temporary table for deliemeter and component dataelement  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;  \n" +
				"				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(  \n" +
				"					pentityId INT,  \n" +
				"					pdataElementId INT,  \n" +
				"					pdelimiter_value VARCHAR(200)  \n" +
				"				);  \n" +
				"				-- create temporary table for separator string values  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;  \n" +
				"				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));  \n" +
				"  \n" +
				"				-- prefix length and suffix lenght to get actual string  \n" +
				"				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength  \n" +
				"				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;  \n" +
				"				-- open cursor  \n" +
				"				OPEN barcodeMatch_cursor;  \n" +
				"				-- set str label as whereclause  \n" +
				"				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter  \n" +
				"				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");  \n" +
				"				-- if prefix is found than remove those from actual string match  \n" +
				"				IF(IFNULL(@pprefixlength,0) > 0) THEN  \n" +
				"					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));  \n" +
				"					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));  \n" +
				"				 END IF;  \n" +
				"  \n" +
				"				-- if suffix is found than remove those from actual string match  \n" +
				"				 IF(IFNULL(@psuffixlength,0) > 0) THEN  \n" +
				"					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
				"					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
				"				 END IF;  \n" +
				"				-- insert all values after seprator split  \n" +
				"				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");  \n" +
				"				PREPARE stmt1 FROM @SQL;  \n" +
				"				EXECUTE stmt1;  \n" +
				"				DEALLOCATE PREPARE stmt1;  \n" +
				"				IF (pCategory = 'P') THEN  \n" +
				"					-- create dynamic query to insert in packing slip  \n" +
				"					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';  \n" +
				"				ELSE  \n" +
				"					-- create dynamic query to insert in recieving material  \n" +
				"					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';  \n" +
				"				END IF;  \n" +
				"  \n" +
				"  \n" +
				"				-- loop item till all records found in string match of barcode template  \n" +
				"				barcodeMatch_loop:LOOP  \n" +
				"					-- get all five selected values  \n" +
				"					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;  \n" +
				"					-- exit loop if no record found for barcode match  \n" +
				"					IF exit_loop THEN  \n" +
				"						CLOSE barcodeMatch_cursor;  \n" +
				"						LEAVE barcodeMatch_loop;  \n" +
				"					END IF;  \n" +
				"					-- dynamic query to get dellimeter string with values from string  \n" +
				"					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');  \n" +
				"					PREPARE stmtdelimiter FROM @sqlGetdelimiter;  \n" +
				"					EXECUTE stmtdelimiter;  \n" +
				"					DEALLOCATE PREPARE stmtdelimiter;  \n" +
				"  \n" +
				"					-- get delimiter values from string  \n" +
				"					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));  \n" +
				"					-- check for field type is static or dynamic  \n" +
				"					-- if static field than check for mfg code and mfg part number  \n" +
				"					IF v_fieldType = 0  THEN  \n" +
				"						-- component_sid_stock  \n" +
				"						-- get static field name from barcode table delimiter data element id  \n" +
				"						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);  \n" +
				"						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys  \n" +
				"						IF(StaticField=\"scanmfgpn\") THEN  \n" +
				"							SET MFG_Part_No = delimiter_value_data;  \n" +
				"							/* If component id is not found */  \n" +
				"							IF(pComponentID = 0)  \n" +
				"                            THEN  \n" +
				"								/* Get component data */  \n" +
				"								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;  \n" +
				"								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS  \n" +
				"								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM  \n" +
				"								(  \n" +
				"									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 	component c  \n" +
				"									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
				"									UNION  \n" +
				"									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 		component_otherpn co  \n" +
				"									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0  \n" +
				"									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0  \n" +
				"								) a  \n" +
				"								UNION  \n" +
				"								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM  \n" +
				"								(  \n" +
				"									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 	component c  \n" +
				"									WHERE 	c.mfgPN=delimiter_value_data AND  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0  \n" +
				"									UNION  \n" +
				"									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 		component_otherpn co  \n" +
				"									LEFT JOIN 	component c ON c.id = co.refComponentID  \n" +
				"									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  \n" +
				"                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0  \n" +
				"								) a  \n" +
				"								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;  \n" +
				"  \n" +
				"								IF (pSupplierID IS NOT NULL) THEN  \n" +
				"									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID  AND s.isCustMapping=0  \n" +
				"								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;  \n" +
				"								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail;  \n" +
				"									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  \n" +
				"								   ELSE  \n" +
				"									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;  \n" +
				"								END IF;  \n" +
				"  \n" +
				"								IF (v_componentCount > 1) THEN  \n" +
				"									/* If component is more that one then remove supplier from list */  \n" +
				"									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;  \n" +
				"									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS  \n" +
				"									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;  \n" +
				"  \n" +
				"									/* After remove supplier if get only one record then  */  \n" +
				"									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;  \n" +
				"									IF (v_componentCount < 2) THEN  \n" +
				"										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
				"											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
				"										FROM 	temp_component_supplier_detail;  \n" +
				"									END IF;  \n" +
				"								ELSE  \n" +
				"									IF (pSupplierID IS NULL) THEN  \n" +
				"										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
				"											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
				"										FROM 	temp_component_detail;  \n" +
				"									ELSE  \n" +
				"										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN  \n" +
				"											SET v_MfrNotFoundForSupplierQuote = 1;  \n" +
				"										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN  \n" +
				"											SET v_componentCount=0;  \n" +
				"											SET v_SupplierQuoteMFRIsNotCustomPart = 1;  \n" +
				"										ELSE  \n" +
				"											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
				"												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
				"											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);  \n" +
				"										END IF;  \n" +
				"									END IF;  \n" +
				"								END IF;  \n" +
				"							ELSE  \n" +
				"                            	/* If component id is found */  \n" +
				"								SELECT 	COUNT(1) INTO v_componentCount  \n" +
				"								FROM 	component  \n" +
				"								WHERE 	id = pComponentID  \n" +
				"                                and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
				"  \n" +
				"							END IF;  \n" +
				"                            /* Remove from cursor if found more that one component */  \n" +
				"							IF v_componentCount > 1 THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"                            SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
				"									INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
				"								FROM 	component  \n" +
				"								WHERE 	id = pComponentID  \n" +
				"							and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
				"  \n" +
				"							/* If inventory is opening inventory and type is assembly */  \n" +
				"							IF(pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* If bad part found */  \n" +
				"							IF (v_isGoodPart != 1) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Check all type of restriction */  \n" +
				"							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Check all type of restriction with packaging */  \n" +
				"							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Barcode MFR and Part MFR mismatch */  \n" +
				"							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN  \n" +
				"								SET BarcodeMFGMatch = 'Mismatch';  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Found DIST then set id of MFR of that DIST */  \n" +
				"							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
				"							IF (@MFGType = 'DIST') THEN  \n" +
				"								SET v_SupplierID = v_componentId;  \n" +
				"								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Check kit allocation */  \n" +
				"							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN  \n" +
				"								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */  \n" +
				"								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;  \n" +
				"								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId  \n" +
				"										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  \n" +
				"								FROM 	(  \n" +
				"										SELECT 	*  \n" +
				"										FROM  \n" +
				"											(  \n" +
				"												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
				"														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId  \n" +
				"												FROM 		component_packagingalias cp  \n" +
				"												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid  \n" +
				"												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id  \n" +
				"												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
				"												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
				"												UNION  \n" +
				"												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
				"														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
				"												FROM 		rfq_lineitems_alternatepart rla  \n" +
				"												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
				"												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0  \n" +
				"												UNION  \n" +
				"												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
				"														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
				"												FROM 		rfq_lineitems_alternatepart rla  \n" +
				"												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
				"												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL  \n" +
				"												#GROUP BY 	custPNID, rla.partID  \n" +
				"											) b  \n" +
				"										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)  \n" +
				"										#GROUP BY b.lineID, b.assyId  \n" +
				"									) a;  \n" +
				"  \n" +
				"								/* BOM line not found  */  \n" +
				"								IF (v_rfqLineItemsID IS NULL) THEN  \n" +
				"									CLOSE barcodeMatch_cursor;  \n" +
				"									LEAVE barcodeMatch_loop;  \n" +
				"								/* Found More then one BOM line */  \n" +
				"								ELSEIF (v_BOMLineCount > 1) THEN  \n" +
				"									CLOSE barcodeMatch_cursor;  \n" +
				"									LEAVE barcodeMatch_loop;  \n" +
				"								ELSE  \n" +
				"									/* Restrict use bom */  \n" +
				"									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN  \n" +
				"										CLOSE barcodeMatch_cursor;  \n" +
				"										LEAVE barcodeMatch_loop;  \n" +
				"									END IF;  \n" +
				"  \n" +
				"									/* BOM line contain any error */  \n" +
				"									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;  \n" +
				"									IF (v_isBOMLineClean = 0) THEN  \n" +
				"										CLOSE barcodeMatch_cursor;  \n" +
				"										LEAVE barcodeMatch_loop;  \n" +
				"									END IF;  \n" +
				"								END IF;  \n" +
				"  \n" +
				"								/* Part not install, purchase and not dnp  */  \n" +
				"								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN  \n" +
				"									CLOSE barcodeMatch_cursor;  \n" +
				"									LEAVE barcodeMatch_loop;  \n" +
				"								END IF;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Set dynamic query for component */  \n" +
				"							IF  v_componentCount = 1 THEN  \n" +
				"								IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
				"									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"');  \n" +
				"								ELSE  \n" +
				"									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
				"									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"');  \n" +
				"								END IF;  \n" +
				"                                IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"									SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCodeFormatID');  \n" +
				"									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_dateCodeFormatID, '\"');  \n" +
				"								ELSE  \n" +
				"									SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCodeFormatID');  \n" +
				"									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_dateCodeFormatID, '\"');  \n" +
				"								END IF;  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Not in use */  \n" +
				"						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys  \n" +
				"						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for pkgQty */  \n" +
				"						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for lotcode */  \n" +
				"						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for mfrdatecode and datecode */  \n" +
				"						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"							/* SELECT id INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0; Commented by CP - 08-03-2022 */  \n" +
				"							IF (v_dateCodeFormatID IS NOT NULL) THEN  \n" +
				"								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);  \n" +
				"								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');  \n" +
				"							ELSE  \n" +
				"								SET exit_loop = FALSE;  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for binid */  \n" +
				"						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for packaging */  \n" +
				"						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for nickname */  \n" +
				"						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for po number */  \n" +
				"						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for so number */  \n" +
				"						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for packing slip number */  \n" +
				"						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for invoice number */  \n" +
				"						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"					ELSE  \n" +
				"						/* Set dynamic query for other than system generated */  \n" +
				"						SELECT entityID INTO v_entityId FROM dataelement WHERE  \n" +
				"							dataElementID=v_dataElementId AND isDeleted = 0;  \n" +
				"						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)  \n" +
				"							VALUES (v_entityId,v_dataElementId,delimiter_value_data);  \n" +
				"					END IF;  \n" +
				"				END LOOP barcodeMatch_loop;  \n" +
				"  \n" +
				"				-- check if mfg and component both found than  \n" +
				"				IF v_componentCount = 0 AND pSupplierID IS NULL THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
				"				ELSEIF (v_componentCount > 1) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);  \n" +
				"				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);  \n" +
				"				ELSEIF(v_isGoodPart != 1) THEN  \n" +
				"					IF (v_isGoodPart = 2) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
				"					ELSE  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);  \n" +
				"				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"					IF (v_isCPNFlag = 1) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
				"					ELSE  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN  \n" +
				"				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN  \n" +
				"				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN  \n" +
				"				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);  \n" +
				"				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);  \n" +
				"				ELSEIF (v_componentCount = 1 AND  pInventoryType = 'NI' AND pIsFromUID = 1) THEN  \n" +
				"					SELECT COUNT(1) INTO v_pendingPartCount FROM vu_umid_creation_pending WHERE BalanceQty > 0 AND PartId = v_componentId AND BinID = pBinID;  \n" +
				"                    IF(v_pendingPartCount = 0) THEN  \n" +
				"						SELECT b.Name INTO @binName FROM binmst b WHERE b.id = pBinID;  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('<b>', v_PIDCode ,'</b> does not belong to the bin <b>', @binName ,'</b>. Review Pending UMID list should further investigation required.'),24,v_PIDCode);  \n" +
				"                    ELSEIF(v_pendingPartCount = 1) THEN  \n" +
				"						SELECT  ps.packingSlipModeStatus,  vu.receivedStatus, vu.packingSlipNumber, b.Name,  fun_getPackagingNameByID(vu.packagingID) AS packagingType  \n" +
				"								INTO @packingSlipModeStatus, @receivedStatus, @packingSlipNumber, @binName, @packagingType  \n" +
				"						FROM vu_umid_creation_pending vu  \n" +
				"                                INNER JOIN	packing_slip_material_receive ps on ps.id = vu.packingSlipID AND ps.isdeleted = 0  \n" +
				"                                INNER JOIN 	binmst b on b.id = vu.BinID AND b.isdeleted = 0  \n" +
				"								WHERE 		vu.BalanceQty > 0 AND vu.PartId = v_componentId AND vu.BinID = pBinID;  \n" +
				"						IF(@packingSlipModeStatus = 'D') THEN  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as packing slip# <b>', @packingSlipNumber ,'</b> is in <b>Draft</b> mode for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),25,v_PIDCode);  \n" +
				"                        ELSEIF(@receivedStatus = 'R' OR @receivedStatus = 'P') THEN  \n" +
				"							SET @receivedStatusValue = IF(@receivedStatus = 'P', 'Pending', 'Rejected');  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as line received status of packing slip# <b>', @packingSlipNumber ,'</b> is <b>',@receivedStatusValue,'</b> for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),26,v_PIDCode);  \n" +
				"                        END IF;  \n" +
				"                    END IF;  \n" +
				"                ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN  \n" +
				"					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;  \n" +
				"					IF @Mfgmatched = 0  THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				ELSE  \n" +
				"					IF @mfgCount = 0 THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"  \n" +
				"					IF  @mfgCount = 0 AND v_componentCount=0  THEN  \n" +
				"						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				END IF;  \n" +
				"				IF (pCPN = 1) THEN  \n" +
				"					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;  \n" +
				"					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;  \n" +
				"					IF (@codeFromPart != @codeFromMfg) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"  \n" +
				"					IF (@isCPNPart != 1) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				END IF;  \n" +
				"				IF (pIsFromUID = 1) THEN  \n" +
				"					/* If not fire any validation */  \n" +
				"					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
				"						-- must call statements in sequence  \n" +
				"						/* Add component sid stock in temp table of stock table and add in temp table */  \n" +
				"						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');  \n" +
				"                        PREPARE stmt1 FROM @SQL1;  \n" +
				"						EXECUTE stmt1;  \n" +
				"						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel );  \n" +
				"  \n" +
				"						IF (pprefix IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',prefix=','\"',pprefix,'\"');  \n" +
				"                        END IF;  \n" +
				"  \n" +
				"						IF (pnickName IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pRefCpnMfgID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pCustomerID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pAssyID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pReceiveMaterialType IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (v_SupplierID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						SET @sql2 = UpdateValue;  \n" +
				"						PREPARE stmt2 FROM @SQL2;  \n" +
				"						EXECUTE stmt2;  \n" +
				"						DEALLOCATE PREPARE stmt2;  \n" +
				"  \n" +
				"						/* Add success result in save error table */  \n" +
				"						IF (pkitAssemblyID IS NULL) THEN  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
				"						ELSE  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));  \n" +
				"						END IF;  \n" +
				"						/* Add data in table of delimeter table */  \n" +
				"						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN  \n" +
				"							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)  \n" +
				"							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t;  \n" +
				"						END IF;  \n" +
				"						/* select detail of error table */  \n" +
				"						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"  \n" +
				"						/* select detail in temp table of component sid stock table  */  \n" +
				"						SELECT * FROM temp_Component_Sid_Stock;  \n" +
				"						/* Select data of component */  \n" +
				"						SELECT 	c.*,  \n" +
				"							fun_getDateCodeFormatById(c.dateCodeFormatID) dateCodeFormat,  \n" +
				"							mg.mfgcode AS mfgCode,  \n" +
				"							mg.mfgName AS mfgName,  \n" +
				"                            fun_GetFormattedMfgCode(mg.mfgCode, mg.mfgName, v_mfgNameFormat) mfgCodeName,  \n" +
				"							cp.name AS packagingName,  \n" +
				"							cp.sourceName,  \n" +
				"							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
				"							csup.packageQty AS supplierPkgQty,  \n" +
				"                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
				"							csup.mfgcodeID AS supplierMfgId,  \n" +
				"							mcm.mfgcode AS supplierMFGCode,  \n" +
				"							mcm.mfgName AS supplierMFGName,  \n" +
				"                            fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) supplierMFGCodeName,  \n" +
				"							csup.mfgPN AS supplierMFGPN,  \n" +
				"							csup.packagingID AS supplierPackagingId,  \n" +
				"                            csp.name AS supplierPackagingName,  \n" +
				"							csp.sourceName AS supplierSourceName,  \n" +
				"							csup.minimum AS supplierMinimum,  \n" +
				"							ccpn.id AS cpnID,  \n" +
				"							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
				"							rfqroh.rohsIcon AS rohsIcon,  \n" +
				"							rfqroh.name AS rohsName,  \n" +
				"							rfqmou.name AS mountingTypeName,  \n" +
				"                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
				"							um.unitName AS uomName,  \n" +
				"							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
				"							fun_getDateCodeFormatById(mg.dateCodeFormatID) AS mfg_dateCodeFormat,  \n" +
				"							mg.dateCodeFormatID AS mfg_dateCodeFormatId,  \n" +
				"							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
				"						FROM component AS c  \n" +
				"						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
				"						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
				"						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
				"						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
				"						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
				"						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
				"                        LEFT JOIN component_packagingmst cp on cp.id = c.packagingID AND cp.isdeleted = 0  \n" +
				"                        LEFT JOIN component_packagingmst csp on csp.id = csup.packagingID AND csp.isdeleted = 0  \n" +
				"						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
				"						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
				"						WHERE c.id = v_componentId;  \n" +
				"  \n" +
				"						/* select data of data element of component sid stock */  \n" +
				"						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`  \n" +
				"						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv  \n" +
				"						LEFT OUTER JOIN `dataelement` AS dl  \n" +
				"						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;  \n" +
				"						/* select data of cpn */  \n" +
				"						SELECT 	id, refComponentID, refCPNPartID  \n" +
				"						FROM 	component_cust_alias_rev_pn  \n" +
				"						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;  \n" +
				"  \n" +
				"						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
				"							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0  \n" +
				"						) AND isDeleted = 0;  \n" +
				"  \n" +
				"						/* select detail of bom */  \n" +
				"						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,  \n" +
				"								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN  \n" +
				"						FROM 		rfq_lineitems_alternatepart rla  \n" +
				"						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
				"						WHERE 		rla.isDeleted = 0  \n" +
				"									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))  \n" +
				"									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)  \n" +
				"									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);  \n" +
				"  \n" +
				"					ELSE  \n" +
				"						/* Found any error then select error  */  \n" +
				"						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"					END IF;  \n" +
				"				ELSEIF(v_isGoodPart != 1) THEN  \n" +
				"					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"				ELSE  \n" +
				"					/* generate dynamic query and save in temp in case of packing slip */  \n" +
				"					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
				"						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');  \n" +
				"						PREPARE stmt1 FROM @SQL1;  \n" +
				"						EXECUTE stmt1;  \n" +
				"						DEALLOCATE PREPARE stmt1;  \n" +
				"					END IF;  \n" +
				"  \n" +
				"					/* Add success data in temp error table */  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
				"  \n" +
				"					/* Add success data in temp table for select in case of call from packing slip packing slip screen */  \n" +
				"					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
				"					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
				"					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */  \n" +
				"					IF (pCategory = 'M') THEN  \n" +
				"						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
				"						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
				"						SELECT 	c.*,  \n" +
				"							fun_getDateCodeFormatById(c.dateCodeFormatID) dateCodeFormat,  \n" +
				"							fun_GetFormattedMfgCode(mg.mfgCode, mg.mfgName, v_mfgNameFormat) mfgCodeName,  \n" +
				"							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
				"							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
				"							csup.packageQty AS supplierPkgQty,  \n" +
				"                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
				"							csup.mfgcodeID AS supplierMfgId,  \n" +
				"							mcm.mfgcode AS supplierMFGCode,  \n" +
				"							mcm.mfgName AS supplierMFGName,  \n" +
				"                            fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) supplierMFGCodeName,  \n" +
				"							csup.packagingID AS supplierPackagingId,  \n" +
				"							csup.mfgPN AS supplierMFGPN,  \n" +
				"							csup.id AS supplierMFGPNID,  \n" +
				"							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,  \n" +
				"							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,  \n" +
				"							ccpn.id AS cpnID,  \n" +
				"							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
				"							rfqroh.rohsIcon AS rohsIcon,  \n" +
				"							rfqroh.name AS rohsName,  \n" +
				"							rfqmou.name AS mountingTypeName,  \n" +
				"                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
				"							um.unitName AS uomName,  \n" +
				"							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
				"							fun_getDateCodeFormatById(mg.dateCodeFormatID) AS mfg_dateCodeFormat,  \n" +
				"							mg.dateCodeFormatID AS mfg_dateCodeFormatId,  \n" +
				"							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
				"						FROM component AS c  \n" +
				"						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
				"						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
				"						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
				"						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
				"						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
				"						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
				"						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
				"						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
				"						WHERE c.id = v_componentId;  \n" +
				"					END IF;  \n" +
				"				END IF;  \n" +
				"			ELSE  \n" +
				"				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
				"					('Barcode template does not exist, Please add template',0,MFG_Part_No);  \n" +
				"  \n" +
				"				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
				"				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
				"				SELECT 1;  \n" +
				"  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
				"				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
				"				SELECT 1;  \n" +
				"			END IF;  \n" +
				"  \n" +
				"		END block2;  \n" +
				"	ELSE  \n" +
				"		IF (pIsFromUID = 1) THEN  \n" +
				"			SELECT * FROM tempUIDSuccessDetail;  \n" +
				"		ELSE  \n" +
				"			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
				"			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
				"			SELECT 1;  \n" +
				"		END IF;  \n" +
				"	END IF;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 14-03-2022 *********************************** */
                "DROP function IF EXISTS `fun_getMFRDateCodeFormatByID`; \n" +
                "DROP FUNCTION IF EXISTS `fun_getDateCodeFormatById`;  \n" +
				"CREATE FUNCTION `fun_getDateCodeFormatById`(  \n" +
				"	pDcId INT  \n" +
				") RETURNS longtext CHARSET utf8mb4  \n" +
				"BEGIN  \n" +
				"	DECLARE vDateFormat VARCHAR(50);  \n" +
				"	SELECT d.dateCodeFormat INTO vDateFormat FROM date_code_format d WHERE d.id = pDcId AND d.isDeleted = 0;  \n" +
				"	RETURN vDateFormat;  \n" +
                  "END; \n" +
				/* **************************** Add Script Version -> 14-03-2022 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (6016,'2.00','V1','User Story 40723: UMID Create page enhancement points [Lot Code Changes] - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
   case 6016:
			  allDbChangesArray.push(
			  /* **************************** Add Script Version -> 14-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetDCFormatList`;  \n" +
				"CREATE PROCEDURE `Sproc_GetDCFormatList`(  \n" +
				"	IN pPageIndex INT,  \n" +
				"	IN pRecordPerPage INT,  \n" +
				"	IN pOrderBy VARCHAR(255),  \n" +
				"	IN pWhereClause VARCHAR(16383),  \n" +
				"    IN pSearchDCFormat VARCHAR(50),  \n" +
				"    IN pSearchDCFormatType VARCHAR(5)  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE pOffset INT;  \n" +
				"	DECLARE rowNumWhere VARCHAR(255);  \n" +
				"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
				"	DECLARE v_TimeZone VARCHAR(50);  \n" +
				"  \n" +
				"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
				"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
				"  \n" +
				"	SET @temp_Sproc_GetDCFormatList = CONCAT(\"  \n" +
				"		SELECT 	dc.id,  \n" +
				"                dc.systemID,  \n" +
				"                dc.systemGenerated,  \n" +
				"                (CASE WHEN  dc.systemGenerated = 1 THEN 'Yes' ELSE 'No' END) AS systemGeneratedValue,  \n" +
				"				dc.category,  \n" +
				"                (CASE WHEN  dc.category = 'G' THEN 'Gregorian' ELSE 'Julian' END) AS categoryName,  \n" +
				"                dc.dateCodeFormat,  \n" +
				"                dc.description,  \n" +
				"                (CASE WHEN  dc.systemGenerated = 1 THEN true ELSE false END) AS isDisabledDelete,  \n" +
				"				fun_getUserNameByID(dc.updatedBy) updatedby,  \n" +
				"				fun_getUserNameByID(dc.createdBy) createdby,  \n" +
				"				fun_getRoleByID(dc.createByRoleId) createdbyRole,  \n" +
				"				fun_getRoleByID(dc.updateByRoleId) updatedbyRole,  \n" +
				"				fun_ApplyCommonDateTimeFormatByParaValue(dc.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
				"				fun_ApplyCommonDateTimeFormatByParaValue(dc.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
				"		FROM 	date_code_format dc  \n" +
				"		WHERE   dc.isDeleted = 0  \n" +
				"	\");  \n" +
				"  \n" +
				"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
				"		SET pOrderBy = CONCAT(\" ORDER BY dateCodeFormat ASC \") ;  \n" +
				"	ELSE  \n" +
				"		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
				"		SET pWhereClause = ' 1=1 ' ;  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(pSearchDCFormat IS NOT NULL OR pSearchDCFormat != '') THEN  \n" +
				"		IF(pSearchDCFormatType = 'E') THEN  \n" +
				"			SET pWhereClause = CONCAT(pWhereClause, ' AND dateCodeFormat = \"', pSearchDCFormat , '\" ');  \n" +
				"		ELSE  \n" +
				"			SET pWhereClause = CONCAT(pWhereClause, ' AND dateCodeFormat LIKE \"%', pSearchDCFormat ,'%\" ');  \n" +
				"		END IF;  \n" +
				"    END IF;  \n" +
				"  \n" +
				"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
				"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
				"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
				"	ELSE  \n" +
				"		SET rowNumWhere = '';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetDCFormatList,\" ) c where 1=1 and \", pWhereClause);  \n" +
				"	PREPARE query1 FROM @SQLStatement1;  \n" +
				"	EXECUTE query1;  \n" +
				"	DEALLOCATE PREPARE query1;  \n" +
				"  \n" +
				"	SET @SQLStatement2 = CONCAT(\"SELECT a.* FROM ( \", @temp_Sproc_GetDCFormatList,\" ) a WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
				"	#select @SQLStatement2;  \n" +
				"    PREPARE query2 FROM @SQLStatement2;  \n" +
				"	EXECUTE query2;  \n" +
				"	DEALLOCATE PREPARE query2;  \n" +
				"  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 14-03-2022 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (6017,'2.00','V1','User Story 40723: UMID Create page enhancement points [Lot Code Changes] - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
            case 6017:
                allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "CREATE OR REPLACE VIEW `vu_component` AS  \n" +
                "    SELECT  \n" +
                "        `c`.`id` AS `id`,  \n" +
                "        `c`.`imageURL` AS `imageURL`,  \n" +
                "        `c`.`mfgPN` AS `mfgPN`,  \n" +
                "        `c`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `c`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "        `c`.`packageQty` AS `packageQty`,  \n" +
                "        `c`.`partStatus` AS `partStatus`,  \n" +
                "        `c`.`ltbDate` AS `ltbDate`,  \n" +
                "        `c`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `c`.`isDeleted` AS `isDeleted`,  \n" +
                "        `c`.`createdBy` AS `createdBy`,  \n" +
                "        `c`.`createdAt` AS `createdAt`,  \n" +
                "        `c`.`createByRoleId` AS `createByRoleId`,  \n" +
                "        `c`.`updatedBy` AS `updatedBy`,  \n" +
                "        `c`.`updatedAt` AS `updatedAt`,  \n" +
                "        `c`.`updateByRoleId` AS `updateByRoleId`,  \n" +
                "        `c`.`deletedBy` AS `deletedBy`,  \n" +
                "        `c`.`deletedAt` AS `deletedAt`,  \n" +
                "        `c`.`deleteByRoleId` AS `deleteByRoleId`,  \n" +
                "        `c`.`PIDCode` AS `PIDCode`,  \n" +
                "        `c`.`isGoodPart` AS `isGoodPart`,  \n" +
                "        `c`.`leadTime` AS `leadTime`,  \n" +
                "        `c`.`packaging` AS `packaging`,  \n" +
                "        `c`.`countryOfOrigin` AS `countryOfOrigin`,  \n" +
                "        `c`.`uom` AS `uom`,  \n" +
                "        `c`.`deviceMarking` AS `deviceMarking`,  \n" +
                "        `c`.`minimum` AS `minimum`,  \n" +
                "        `c`.`mult` AS `mult`,  \n" +
                "        `c`.`uomText` AS `uomText`,  \n" +
                "        `c`.`htsCode` AS `htsCode`,  \n" +
                "        `c`.`category` AS `category`,  \n" +
                "        `c`.`rohsText` AS `rohsText`,  \n" +
                "        `c`.`dataSheetLink` AS `dataSheetLink`,  \n" +
                "        `c`.`replacementPartID` AS `replacementPartID`,  \n" +
                "        `c`.`eolDate` AS `eolDate`,  \n" +
                "        `c`.`saftyStock` AS `saftyStock`,  \n" +
                "        `c`.`specialNote` AS `specialNote`,  \n" +
                "        `c`.`partStatusText` AS `partStatusText`,  \n" +
                "        `c`.`isPIDManual` AS `isPIDManual`,  \n" +
                "        `c`.`maxPriceLimit` AS `maxPriceLimit`,  \n" +
                "        `c`.`selfLifeDays` AS `selfLifeDays`,  \n" +
                "        `c`.`isCustom` AS `isCustom`,  \n" +
                "        `c`.`rev` AS `rev`,  \n" +
                "        `c`.`mslID` AS `mslID`,  \n" +
                "        `c`.`costCategoryID` AS `costCategoryID`,  \n" +
                "        `c`.`maxQtyonHand` AS `maxQtyonHand`,  \n" +
                "        `c`.`scrapRatePercentagePerBuild` AS `scrapRatePercentagePerBuild`,  \n" +
                "        `c`.`plannedOverRunPercentagePerBuild` AS `plannedOverRunPercentagePerBuild`,  \n" +
                "        `c`.`nickName` AS `nickName`,  \n" +
                "        `c`.`restrictUSEwithpermission` AS `restrictUSEwithpermission`,  \n" +
                "        `c`.`plannedValuePerBuild` AS `plannedValuePerBuild`,  \n" +
                "        `c`.`scrapValuePerBuild` AS `scrapValuePerBuild`,  \n" +
                "        `c`.`restrictUsePermanently` AS `restrictUsePermanently`,  \n" +
                "        `c`.`rfqOnly` AS `rfqOnly`,  \n" +
                "        `c`.`eau` AS `eau`,  \n" +
                "        `c`.`assyCode` AS `assyCode`,  \n" +
                "        `c`.`pcbPerArray` AS `pcbPerArray`,  \n" +
                "        `c`.`isCPN` AS `isCPN`,  \n" +
                "        `c`.`matingPartRquired` AS `matingPartRquired`,  \n" +
                "        `c`.`driverToolRequired` AS `driverToolRequired`,  \n" +
                "        `c`.`pickupPadRequired` AS `pickupPadRequired`,  \n" +
                "        `c`.`programingRequired` AS `programingRequired`,  \n" +
                "        `c`.`functionalTestingRequired` AS `functionalTestingRequired`,  \n" +
                "        `c`.`custAssyPN` AS `custAssyPN`,  \n" +
                "        `c`.`partType` AS `partType`,  \n" +
                "        `c`.`functionalTypePartRequired` AS `functionalTypePartRequired`,  \n" +
                "        `c`.`mountingTypePartRequired` AS `mountingTypePartRequired`,  \n" +
                "        `c`.`shelfListDaysThresholdPercentage` AS `shelfListDaysThresholdPercentage`,  \n" +
                "        `c`.`refSupplierMfgpnComponentID` AS `refSupplierMfgpnComponentID`,  \n" +
                "        `c`.`businessRisk` AS `businessRisk`,  \n" +
                "        `c`.`packagingID` AS `packagingID`,  \n" +
                "        `c`.`unit` AS `unit`,  \n" +
                "        `c`.`grossWeight` AS `grossWeight`,  \n" +
                "        `c`.`packagingWeight` AS `packagingWeight`,  \n" +
                "        `c`.`epicorType` AS `epicorType`,  \n" +
                "        `c`.`grossWeightUom` AS `grossWeightUom`,  \n" +
                "        `c`.`packagingWeightUom` AS `packagingWeightUom`,  \n" +
                "        `c`.`price` AS `price`,  \n" +
                "        `c`.`uomClassID` AS `uomClassID`,  \n" +
                "        `c`.`rohsDeviation` AS `rohsDeviation`,  \n" +
                "        `c`.`alertExpiryDays` AS `alertExpiryDays`,  \n" +
                "        `c`.`umidVerificationRequire` AS `umidVerificationRequire`,  \n" +
                "        `c`.`totalSolderPoints` AS `totalSolderPoints`,  \n" +
                "        `c`.`trackSerialNumber` AS `trackSerialNumber`,  \n" +
                "        `c`.`restrictPackagingUsePermanently` AS `restrictPackagingUsePermanently`,  \n" +
                "        `c`.`restrictPackagingUseWithpermission` AS `restrictPackagingUseWithpermission`,  \n" +
                "        `c`.`isAutoVerificationOfAllAssemblyParts` AS `isAutoVerificationOfAllAssemblyParts`,  \n" +
                "        `c`.`reversalDate` AS `reversalDate`,  \n" +
                "        `c`.`serialNumber` AS `serialNumber`,  \n" +
                "        `ca`.`packaginggroupID` AS `packaginggroupID`,  \n" +
                "        `ca`.`isCloudApiUpdateAttribute` AS `isCloudApiUpdateAttribute`,  \n" +
                "        `ca`.`functionalCategoryID` AS `functionalCategoryID`,  \n" +
                "        `ca`.`functionalCategoryText` AS `functionalCategoryText`,  \n" +
                "        `ca`.`mountingTypeID` AS `mountingTypeID`,  \n" +
                "        `ca`.`mountingTypeText` AS `mountingTypeText`,  \n" +
                "        `ca`.`isEpoxyMount` AS `isEpoxyMount`,  \n" +
                "        `ca`.`partPackageID` AS `partPackageID`,  \n" +
                "        `ca`.`partPackage` AS `partPackage`,  \n" +
                "        `ca`.`connecterTypeID` AS `connecterTypeID`,  \n" +
                "        `ca`.`connectorTypeText` AS `connectorTypeText`,  \n" +
                "        `ca`.`feature` AS `feature`,  \n" +
                "        `ca`.`noOfPosition` AS `noOfPosition`,  \n" +
                "        `ca`.`noOfPositionText` AS `noOfPositionText`,  \n" +
                "        `ca`.`noOfRows` AS `noOfRows`,  \n" +
                "        `ca`.`noOfRowsText` AS `noOfRowsText`,  \n" +
                "        `ca`.`operatingTemp` AS `operatingTemp`,  \n" +
                "        `ca`.`minOperatingTemp` AS `minOperatingTemp`,  \n" +
                "        `ca`.`maxOperatingTemp` AS `maxOperatingTemp`,  \n" +
                "        `ca`.`temperatureCoefficient` AS `temperatureCoefficient`,  \n" +
                "        `ca`.`temperatureCoefficientValue` AS `temperatureCoefficientValue`,  \n" +
                "        `ca`.`temperatureCoefficientUnit` AS `temperatureCoefficientUnit`,  \n" +
                "        `ca`.`pitch` AS `pitch`,  \n" +
                "        `ca`.`pitchMating` AS `pitchMating`,  \n" +
                "        `ca`.`sizeDimension` AS `sizeDimension`,  \n" +
                "        `ca`.`length` AS `length`,  \n" +
                "        `ca`.`width` AS `width`,  \n" +
                "        `ca`.`height` AS `height`,  \n" +
                "        `ca`.`heightText` AS `heightText`,  \n" +
                "        `ca`.`tolerance` AS `tolerance`,  \n" +
                "        `ca`.`voltage` AS `voltage`,  \n" +
                "        `ca`.`value` AS `value`,  \n" +
                "        `ca`.`powerRating` AS `powerRating`,  \n" +
                "        `ca`.`weight` AS `weight`,  \n" +
                "        `ca`.`color` AS `color`,  \n" +
                "        `ca`.`isTemperatureSensitive` AS `isTemperatureSensitive`,  \n" +
                "        `cb`.`bomLock` AS `bomLock`,  \n" +
                "        `cb`.`liveInternalVersion` AS `liveInternalVersion`,  \n" +
                "        `cb`.`exteranalAPICallStatus` AS `exteranalAPICallStatus`,  \n" +
                "        `cb`.`isBOMVerified` AS `isBOMVerified`,  \n" +
                "        `cb`.`liveVersion` AS `liveVersion`,  \n" +
                "        `cb`.`isActivityStart` AS `isActivityStart`,  \n" +
                "        `cb`.`activityStartBy` AS `activityStartBy`,  \n" +
                "        `cb`.`activityStartAt` AS `activityStartAt`,  \n" +
                "        `cb`.`activityStopAt` AS `activityStopAt`,  \n" +
                "        `c`.`systemGenerated` AS `systemGenerated`,  \n" +
                "        `c`.`purchasingComment` AS `purchasingComment`,  \n" +
                "        `c`.`isReversal` AS `isReversal`,  \n" +
                "        `c`.`predictedObsolescenceYear` AS `predictedObsolescenceYear`,  \n" +
                "        `c`.`requiredTestTime` AS `requiredTestTime`,  \n" +
                "        `c`.`detailDescription` AS `detailDescription`,  \n" +
                "        `c`.`documentPath` AS `documentPath`,  \n" +
                "        `c`.`obsoleteDate` AS `obsoleteDate`,  \n" +
                "        `c`.`assemblyType` AS `assemblyType`,  \n" +
                "        `c`.`refMfgPNMfgCodeId` AS `refMfgPNMfgCodeId`,  \n" +
                "        `c`.`productionPN` AS `productionPN`,  \n" +
                "        `c`.`frequency` AS `frequency`,  \n" +
                "        `c`.`isWaterSoluble` AS `isWaterSoluble`,  \n" +
                "        `c`.`isNoClean` AS `isNoClean`,  \n" +
                "        `c`.`mfrNameText` AS `mfrNameText`,  \n" +
                "        `c`.`isFluxNotApplicable` AS `isFluxNotApplicable`,  \n" +
                "        `c`.`isHazmatMaterial` AS `isHazmatMaterial`,  \n" +
                "        `c`.`rfqNumber` AS `rfqNumber`,  \n" +
                "        `c`.`salesacctId` AS `salesacctId`,  \n" +
                "        `c`.`purchaseacctId` AS `purchaseacctId`,  \n" +
                "        `c`.`umidSPQ` AS `umidSPQ`,  \n" +
                "        `c`.`internalReference` AS `internalReference`,  \n" +
                "        `c`.`unqDate` AS `unqDate`,  \n" +
                "        `c`.`shelfLifeAcceptanceDays` AS `shelfLifeAcceptanceDays`,  \n" +
                "        `c`.`maxShelfLifeAcceptanceDays` AS `maxShelfLifeAcceptanceDays`,  \n" +
                "        `c`.`maxShelfListDaysThresholdPercentage` AS `maxShelfListDaysThresholdPercentage`,  \n" +
                "        `c`.`quoteValidTillDate` AS `quoteValidTillDate`,  \n" +
                "        `c`.`shelfLifeDateType` AS `shelfLifeDateType`,  \n" +
                "        `c`.`frequencyType` AS `frequencyType`,  \n" +
                "        `c`.`isReceiveBulkItem` AS `isReceiveBulkItem`,  \n" +
                "        `c`.`mfgType` AS `mfgType`,  \n" +
                "        `c`.`dateCodeFormatID` as `dateCodeFormatID`,  \n" +
                "        `c`.`isDateCodeFormat` as `isDateCodeFormat`  \n" +
                "    FROM  \n" +
                "        ((`component` `c`  \n" +
                "        JOIN `component_attributes` `ca` ON ((`ca`.`refComponentID` = (CASE  \n" +
                "            WHEN (`c`.`mfgType` = 'MFG') THEN `c`.`id`  \n" +
                "            ELSE `c`.`refSupplierMfgpnComponentID`  \n" +
                "        END))))  \n" +
                "        LEFT JOIN `component_bomsetting` `cb` ON ((`cb`.`refComponentID` = (CASE  \n" +
                "            WHEN (`c`.`mfgType` = 'MFG') THEN `c`.`id`  \n" +
                "            ELSE `c`.`refSupplierMfgpnComponentID`  \n" +
                "        END))))  \n" +
                "    WHERE  \n" +
                "        (`ca`.`isDeleted` = 0);  \n" +
                /* **************************** Add Script Version -> 09-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6018,'2.00','V1',' Bug 42321: Showing error while opening part in Update - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
            case 6018:
            allDbChangesArray.push(
            /* **************************** New Script -> 15-03-2022 *********************************** */
            "ALTER ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `vu_component` AS  \n" +
            "SELECT  \n" +
            "  `c`.`id`                                   AS `id`,  \n" +
            "  `c`.`imageURL`                             AS `imageURL`,  \n" +
            "  `c`.`mfgPN`                                AS `mfgPN`,  \n" +
            "  `c`.`mfgcodeID`                            AS `mfgcodeID`,  \n" +
            "  `c`.`mfgPNDescription`                     AS `mfgPNDescription`,  \n" +
            "  `c`.`packageQty`                           AS `packageQty`,  \n" +
            "  `c`.`partStatus`                           AS `partStatus`,  \n" +
            "  `c`.`ltbDate`                              AS `ltbDate`,  \n" +
            "  `c`.`RoHSStatusID`                         AS `RoHSStatusID`,  \n" +
            "  `c`.`isDeleted`                            AS `isDeleted`,  \n" +
            "  `c`.`createdBy`                            AS `createdBy`,  \n" +
            "  `c`.`createdAt`                            AS `createdAt`,  \n" +
            "  `c`.`createByRoleId`                       AS `createByRoleId`,  \n" +
            "  `c`.`updatedBy`                            AS `updatedBy`,  \n" +
            "  `c`.`updatedAt`                            AS `updatedAt`,  \n" +
            "  `c`.`updateByRoleId`                       AS `updateByRoleId`,  \n" +
            "  `c`.`deletedBy`                            AS `deletedBy`,  \n" +
            "  `c`.`deletedAt`                            AS `deletedAt`,  \n" +
            "  `c`.`deleteByRoleId`                       AS `deleteByRoleId`,  \n" +
            "  `c`.`PIDCode`                              AS `PIDCode`,  \n" +
            "  `c`.`isGoodPart`                           AS `isGoodPart`,  \n" +
            "  `c`.`leadTime`                             AS `leadTime`,  \n" +
            "  `c`.`packaging`                            AS `packaging`,  \n" +
            "  `c`.`countryOfOrigin`                      AS `countryOfOrigin`,  \n" +
            "  `c`.`uom`                                  AS `uom`,  \n" +
            "  `c`.`deviceMarking`                        AS `deviceMarking`,  \n" +
            "  `c`.`minimum`                              AS `minimum`,  \n" +
            "  `c`.`mult`                                 AS `mult`,  \n" +
            "  `c`.`uomText`                              AS `uomText`,  \n" +
            "  `c`.`htsCode`                              AS `htsCode`,  \n" +
            "  `c`.`category`                             AS `category`,  \n" +
            "  `c`.`rohsText`                             AS `rohsText`,  \n" +
            "  `c`.`dataSheetLink`                        AS `dataSheetLink`,  \n" +
            "  `c`.`replacementPartID`                    AS `replacementPartID`,  \n" +
            "  `c`.`eolDate`                              AS `eolDate`,  \n" +
            "  `c`.`saftyStock`                           AS `saftyStock`,  \n" +
            "  `c`.`specialNote`                          AS `specialNote`,  \n" +
            "  `c`.`partStatusText`                       AS `partStatusText`,  \n" +
            "  `c`.`isPIDManual`                          AS `isPIDManual`,  \n" +
            "  `c`.`maxPriceLimit`                        AS `maxPriceLimit`,  \n" +
            "  `c`.`selfLifeDays`                         AS `selfLifeDays`,  \n" +
            "  `c`.`isCustom`                             AS `isCustom`,  \n" +
            "  `c`.`rev`                                  AS `rev`,  \n" +
            "  `c`.`mslID`                                AS `mslID`,  \n" +
            "  `c`.`costCategoryID`                       AS `costCategoryID`,  \n" +
            "  `c`.`maxQtyonHand`                         AS `maxQtyonHand`,  \n" +
            "  `c`.`scrapRatePercentagePerBuild`          AS `scrapRatePercentagePerBuild`,  \n" +
            "  `c`.`plannedOverRunPercentagePerBuild`     AS `plannedOverRunPercentagePerBuild`,  \n" +
            "  `c`.`nickName`                             AS `nickName`,  \n" +
            "  `c`.`restrictUSEwithpermission`            AS `restrictUSEwithpermission`,  \n" +
            "  `c`.`plannedValuePerBuild`                 AS `plannedValuePerBuild`,  \n" +
            "  `c`.`scrapValuePerBuild`                   AS `scrapValuePerBuild`,  \n" +
            "  `c`.`restrictUsePermanently`               AS `restrictUsePermanently`,  \n" +
            "  `c`.`rfqOnly`                              AS `rfqOnly`,  \n" +
            "  `c`.`eau`                                  AS `eau`,  \n" +
            "  `c`.`assyCode`                             AS `assyCode`,  \n" +
            "  `c`.`pcbPerArray`                          AS `pcbPerArray`,  \n" +
            "  `c`.`isCPN`                                AS `isCPN`,  \n" +
            "  `c`.`matingPartRquired`                    AS `matingPartRquired`,  \n" +
            "  `c`.`driverToolRequired`                   AS `driverToolRequired`,  \n" +
            "  `c`.`pickupPadRequired`                    AS `pickupPadRequired`,  \n" +
            "  `c`.`programingRequired`                   AS `programingRequired`,  \n" +
            "  `c`.`functionalTestingRequired`            AS `functionalTestingRequired`,  \n" +
            "  `c`.`custAssyPN`                           AS `custAssyPN`,  \n" +
            "  `c`.`partType`                             AS `partType`,  \n" +
            "  `c`.`functionalTypePartRequired`           AS `functionalTypePartRequired`,  \n" +
            "  `c`.`mountingTypePartRequired`             AS `mountingTypePartRequired`,  \n" +
            "  `c`.`shelfListDaysThresholdPercentage`     AS `shelfListDaysThresholdPercentage`,  \n" +
            "  `c`.`refSupplierMfgpnComponentID`          AS `refSupplierMfgpnComponentID`,  \n" +
            "  `c`.`businessRisk`                         AS `businessRisk`,  \n" +
            "  `c`.`packagingID`                          AS `packagingID`,  \n" +
            "  `c`.`unit`                                 AS `unit`,  \n" +
            "  `c`.`grossWeight`                          AS `grossWeight`,  \n" +
            "  `c`.`packagingWeight`                      AS `packagingWeight`,  \n" +
            "  `c`.`epicorType`                           AS `epicorType`,  \n" +
            "  `c`.`grossWeightUom`                       AS `grossWeightUom`,  \n" +
            "  `c`.`packagingWeightUom`                   AS `packagingWeightUom`,  \n" +
            "  `c`.`price`                                AS `price`,  \n" +
            "  `c`.`uomClassID`                           AS `uomClassID`,  \n" +
            "  `c`.`rohsDeviation`                        AS `rohsDeviation`,  \n" +
            "  `c`.`alertExpiryDays`                      AS `alertExpiryDays`,  \n" +
            "  `c`.`umidVerificationRequire`              AS `umidVerificationRequire`,  \n" +
            "  `c`.`totalSolderPoints`                    AS `totalSolderPoints`,  \n" +
            "  `c`.`trackSerialNumber`                    AS `trackSerialNumber`,  \n" +
            "  `c`.`restrictPackagingUsePermanently`      AS `restrictPackagingUsePermanently`,  \n" +
            "  `c`.`restrictPackagingUseWithpermission`   AS `restrictPackagingUseWithpermission`,  \n" +
            "  `c`.`isAutoVerificationOfAllAssemblyParts` AS `isAutoVerificationOfAllAssemblyParts`,  \n" +
            "  `c`.`reversalDate`                         AS `reversalDate`,  \n" +
            "  `c`.`serialNumber`                         AS `serialNumber`,  \n" +
            "  `ca`.`packaginggroupID`                    AS `packaginggroupID`,  \n" +
            "  `ca`.`isCloudApiUpdateAttribute`           AS `isCloudApiUpdateAttribute`,  \n" +
            "  `ca`.`functionalCategoryID`                AS `functionalCategoryID`,  \n" +
            "  `ca`.`functionalCategoryText`              AS `functionalCategoryText`,  \n" +
            "  `ca`.`mountingTypeID`                      AS `mountingTypeID`,  \n" +
            "  `ca`.`mountingTypeText`                    AS `mountingTypeText`,  \n" +
            "  `ca`.`isEpoxyMount`                        AS `isEpoxyMount`,  \n" +
            "  `ca`.`partPackageID`                       AS `partPackageID`,  \n" +
            "  `ca`.`partPackage`                         AS `partPackage`,  \n" +
            "  `ca`.`connecterTypeID`                     AS `connecterTypeID`,  \n" +
            "  `ca`.`connectorTypeText`                   AS `connectorTypeText`,  \n" +
            "  `ca`.`feature`                             AS `feature`,  \n" +
            "  `ca`.`noOfPosition`                        AS `noOfPosition`,  \n" +
            "  `ca`.`noOfPositionText`                    AS `noOfPositionText`,  \n" +
            "  `ca`.`noOfRows`                            AS `noOfRows`,  \n" +
            "  `ca`.`noOfRowsText`                        AS `noOfRowsText`,  \n" +
            "  `ca`.`operatingTemp`                       AS `operatingTemp`,  \n" +
            "  `ca`.`minOperatingTemp`                    AS `minOperatingTemp`,  \n" +
            "  `ca`.`maxOperatingTemp`                    AS `maxOperatingTemp`,  \n" +
            "  `ca`.`temperatureCoefficient`              AS `temperatureCoefficient`,  \n" +
            "  `ca`.`temperatureCoefficientValue`         AS `temperatureCoefficientValue`,  \n" +
            "  `ca`.`temperatureCoefficientUnit`          AS `temperatureCoefficientUnit`,  \n" +
            "  `ca`.`pitch`                               AS `pitch`,  \n" +
            "  `ca`.`pitchMating`                         AS `pitchMating`,  \n" +
            "  `ca`.`sizeDimension`                       AS `sizeDimension`,  \n" +
            "  `ca`.`length`                              AS `length`,  \n" +
            "  `ca`.`width`                               AS `width`,  \n" +
            "  `ca`.`height`                              AS `height`,  \n" +
            "  `ca`.`heightText`                          AS `heightText`,  \n" +
            "  `ca`.`tolerance`                           AS `tolerance`,  \n" +
            "  `ca`.`voltage`                             AS `voltage`,  \n" +
            "  `ca`.`value`                               AS `value`,  \n" +
            "  `ca`.`powerRating`                         AS `powerRating`,  \n" +
            "  `ca`.`weight`                              AS `weight`,  \n" +
            "  `ca`.`color`                               AS `color`,  \n" +
            "  `ca`.`isTemperatureSensitive`              AS `isTemperatureSensitive`,  \n" +
            "  IFNULL(`cb`.`bomLock`,0)                   AS `bomLock`,  \n" +
            "  `cb`.`liveInternalVersion`                 AS `liveInternalVersion`,  \n" +
            "  `cb`.`exteranalAPICallStatus`              AS `exteranalAPICallStatus`,  \n" +
            "  `cb`.`isBOMVerified`                       AS `isBOMVerified`,  \n" +
            "  `cb`.`liveVersion`                         AS `liveVersion`,  \n" +
            "  `cb`.`isActivityStart`                     AS `isActivityStart`,  \n" +
            "  `cb`.`activityStartBy`                     AS `activityStartBy`,  \n" +
            "  `cb`.`activityStartAt`                     AS `activityStartAt`,  \n" +
            "  `cb`.`activityStopAt`                      AS `activityStopAt`,  \n" +
            "  `c`.`systemGenerated`                      AS `systemGenerated`,  \n" +
            "  `c`.`purchasingComment`                    AS `purchasingComment`,  \n" +
            "  `c`.`isReversal`                           AS `isReversal`,  \n" +
            "  `c`.`predictedObsolescenceYear`            AS `predictedObsolescenceYear`,  \n" +
            "  `c`.`requiredTestTime`                     AS `requiredTestTime`,  \n" +
            "  `c`.`detailDescription`                    AS `detailDescription`,  \n" +
            "  `c`.`documentPath`                         AS `documentPath`,  \n" +
            "  `c`.`obsoleteDate`                         AS `obsoleteDate`,  \n" +
            "  `c`.`assemblyType`                         AS `assemblyType`,  \n" +
            "  `c`.`refMfgPNMfgCodeId`                    AS `refMfgPNMfgCodeId`,  \n" +
            "  `c`.`productionPN`                         AS `productionPN`,  \n" +
            "  `c`.`frequency`                            AS `frequency`,  \n" +
            "  `c`.`isWaterSoluble`                       AS `isWaterSoluble`,  \n" +
            "  `c`.`isNoClean`                            AS `isNoClean`,  \n" +
            "  `c`.`mfrNameText`                          AS `mfrNameText`,  \n" +
            "  `c`.`isFluxNotApplicable`                  AS `isFluxNotApplicable`,  \n" +
            "  `c`.`isHazmatMaterial`                     AS `isHazmatMaterial`,  \n" +
            "  `c`.`rfqNumber`                            AS `rfqNumber`,  \n" +
            "  `c`.`salesacctId`                          AS `salesacctId`,  \n" +
            "  `c`.`purchaseacctId`                       AS `purchaseacctId`,  \n" +
            "  `c`.`umidSPQ`                              AS `umidSPQ`,  \n" +
            "  `c`.`internalReference`                    AS `internalReference`,  \n" +
            "  `c`.`unqDate`                              AS `unqDate`,  \n" +
            "  `c`.`shelfLifeAcceptanceDays`              AS `shelfLifeAcceptanceDays`,  \n" +
            "  `c`.`maxShelfLifeAcceptanceDays`           AS `maxShelfLifeAcceptanceDays`,  \n" +
            "  `c`.`maxShelfListDaysThresholdPercentage`  AS `maxShelfListDaysThresholdPercentage`,  \n" +
            "  `c`.`quoteValidTillDate`                   AS `quoteValidTillDate`,  \n" +
            "  `c`.`shelfLifeDateType`                    AS `shelfLifeDateType`,  \n" +
            "  `c`.`frequencyType`                        AS `frequencyType`,  \n" +
            "  `c`.`isReceiveBulkItem`                    AS `isReceiveBulkItem`,  \n" +
            "  `c`.`mfgType`                              AS `mfgType`,  \n" +
            "  `c`.`dateCodeFormatID`                     AS `dateCodeFormatID`,  \n" +
            "  `c`.`isDateCodeFormat`                     AS `isDateCodeFormat`  \n" +
            "FROM ((`component` `c`  \n" +
            "    JOIN `component_attributes` `ca`  \n" +
            "      ON ((`ca`.`refComponentID` = (CASE WHEN(`c`.`mfgType` = 'MFG')THEN `c`.`id` ELSE `c`.`refSupplierMfgpnComponentID` END))))  \n" +
            "   LEFT JOIN `component_bomsetting` `cb`  \n" +
            "     ON ((`cb`.`refComponentID` = (CASE WHEN(`c`.`mfgType` = 'MFG')THEN `c`.`id` ELSE `c`.`refSupplierMfgpnComponentID` END))))  \n" +
            "WHERE (`ca`.`isDeleted` = 0);  \n" +
            /* **************************** Add Script Version -> 15-03-2022 *********************************** */
            "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_component` ;  \n" +
            "CREATE TRIGGER `Trg_AU_component` AFTER UPDATE ON `component`  \n" +
            "    FOR EACH ROW BEGIN  \n" +
            "    DECLARE pOldValue TEXT;  \n" +
            "	DECLARE pNewValue TEXT;  \n" +
            "  \n" +
            "	IF(New.isCustom=1 AND New.category=3 AND new.isdeleted=1) THEN  \n" +
            "		UPDATE binmst SET isdeleted=1,deletedAt=New.deletedAt,deletedBy=New.deletedBy,deleteByRoleId=New.deleteByRoleId  \n" +
            "		WHERE `name`=New.pidcode;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	-- to update rohs status in WO other than completed/void/terminated  \n" +
            "	IF(NEW.RoHSStatusID <> OLD.RoHSStatusID) THEN  \n" +
            "		UPDATE workorder  \n" +
            "		SET RoHSStatusID = NEW.RoHSStatusID  \n" +
            "		WHERE woStatus NOT IN (2,4,7) AND partID= NEW.id AND isDeleted=0;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.bomLock,\"\") != IFNULL(NEW.bomLock,\"\") THEN  \n" +
            "		IF OLD.bomLock IS NOT NULL THEN  \n" +
            "			SET pOldValue = CASE WHEN OLD.bomLock = 1 THEN  \n" +
            "										'Yes'  \n" +
            "								WHEN OLD.bomLock = 0 THEN  \n" +
            "										'No'  \n" +
            "								ELSE '' END;  \n" +
            "		END IF;  \n" +
            "		IF NEW.bomLock IS NOT NULL THEN  \n" +
            "			SET pNewValue = CASE WHEN NEW.bomLock = 1 THEN  \n" +
            "										'Yes'  \n" +
            "								WHEN NEW.bomLock = 0 THEN  \n" +
            "										'No'  \n" +
            "								ELSE '' END;  \n" +
            "		END IF;  \n" +
            "	       INSERT INTO Component_History  \n" +
            "			(refComponentID,                tableName,                 	Colname,  \n" +
            "			Oldval, 			Newval, 			createdBy,  \n" +
            "			createdAt,  			updatedAt, 			Updatedby,  \n" +
            "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
            "	       VALUES(NEW.id,				'component',			'Lock BOM',  \n" +
            "			pOldValue, 				pNewValue,	 	OLD.createdBy,  \n" +
            "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
            "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
            "         UPDATE component_bomsetting SET bomLock= NEW.bomLock WHERE refComponentID=NEW.id;  \n" +
            "	END IF;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 15-03-2022 *********************************** */
            "DROP TRIGGER Trg_AU_component_Update_Bomsetting;  \n" +
            /* **************************** Add Script Version -> 15-03-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (6019,'2.00','V1',' Change view vu_component CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 6019:
                allDbChangesArray.push(
                /* **************************** New Script -> 15-03-2022 *********************************** */
                "CREATE OR REPLACE VIEW `vu_component` AS  \n" +
                "    SELECT  \n" +
                "        `c`.`id` AS `id`,  \n" +
                "        `c`.`imageURL` AS `imageURL`,  \n" +
                "        `c`.`mfgPN` AS `mfgPN`,  \n" +
                "        `c`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `c`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "        `c`.`packageQty` AS `packageQty`,  \n" +
                "        `c`.`partStatus` AS `partStatus`,  \n" +
                "        `c`.`ltbDate` AS `ltbDate`,  \n" +
                "        `c`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `c`.`isDeleted` AS `isDeleted`,  \n" +
                "        `c`.`createdBy` AS `createdBy`,  \n" +
                "        `c`.`createdAt` AS `createdAt`,  \n" +
                "        `c`.`createByRoleId` AS `createByRoleId`,  \n" +
                "        `c`.`updatedBy` AS `updatedBy`,  \n" +
                "        `c`.`updatedAt` AS `updatedAt`,  \n" +
                "        `c`.`updateByRoleId` AS `updateByRoleId`,  \n" +
                "        `c`.`deletedBy` AS `deletedBy`,  \n" +
                "        `c`.`deletedAt` AS `deletedAt`,  \n" +
                "        `c`.`deleteByRoleId` AS `deleteByRoleId`,  \n" +
                "        `c`.`PIDCode` AS `PIDCode`,  \n" +
                "        `c`.`isGoodPart` AS `isGoodPart`,  \n" +
                "        `c`.`leadTime` AS `leadTime`,  \n" +
                "        `c`.`packaging` AS `packaging`,  \n" +
                "        `c`.`countryOfOrigin` AS `countryOfOrigin`,  \n" +
                "        `c`.`uom` AS `uom`,  \n" +
                "        `c`.`deviceMarking` AS `deviceMarking`,  \n" +
                "        `c`.`minimum` AS `minimum`,  \n" +
                "        `c`.`mult` AS `mult`,  \n" +
                "        `c`.`uomText` AS `uomText`,  \n" +
                "        `c`.`htsCode` AS `htsCode`,  \n" +
                "        `c`.`category` AS `category`,  \n" +
                "        `c`.`rohsText` AS `rohsText`,  \n" +
                "        `c`.`dataSheetLink` AS `dataSheetLink`,  \n" +
                "        `c`.`replacementPartID` AS `replacementPartID`,  \n" +
                "        `c`.`eolDate` AS `eolDate`,  \n" +
                "        `c`.`saftyStock` AS `saftyStock`,  \n" +
                "        `c`.`specialNote` AS `specialNote`,  \n" +
                "        `c`.`partStatusText` AS `partStatusText`,  \n" +
                "        `c`.`isPIDManual` AS `isPIDManual`,  \n" +
                "        `c`.`maxPriceLimit` AS `maxPriceLimit`,  \n" +
                "        `c`.`selfLifeDays` AS `selfLifeDays`,  \n" +
                "        `c`.`isCustom` AS `isCustom`,  \n" +
                "        `c`.`rev` AS `rev`,  \n" +
                "        `c`.`mslID` AS `mslID`,  \n" +
                "        `c`.`costCategoryID` AS `costCategoryID`,  \n" +
                "        `c`.`maxQtyonHand` AS `maxQtyonHand`,  \n" +
                "        `c`.`scrapRatePercentagePerBuild` AS `scrapRatePercentagePerBuild`,  \n" +
                "        `c`.`plannedOverRunPercentagePerBuild` AS `plannedOverRunPercentagePerBuild`,  \n" +
                "        `c`.`nickName` AS `nickName`,  \n" +
                "        `c`.`restrictUSEwithpermission` AS `restrictUSEwithpermission`,  \n" +
                "        `c`.`plannedValuePerBuild` AS `plannedValuePerBuild`,  \n" +
                "        `c`.`scrapValuePerBuild` AS `scrapValuePerBuild`,  \n" +
                "        `c`.`restrictUsePermanently` AS `restrictUsePermanently`,  \n" +
                "        `c`.`rfqOnly` AS `rfqOnly`,  \n" +
                "        `c`.`eau` AS `eau`,  \n" +
                "        `c`.`assyCode` AS `assyCode`,  \n" +
                "        `c`.`pcbPerArray` AS `pcbPerArray`,  \n" +
                "        `c`.`isCPN` AS `isCPN`,  \n" +
                "        `c`.`matingPartRquired` AS `matingPartRquired`,  \n" +
                "        `c`.`driverToolRequired` AS `driverToolRequired`,  \n" +
                "        `c`.`pickupPadRequired` AS `pickupPadRequired`,  \n" +
                "        `c`.`programingRequired` AS `programingRequired`,  \n" +
                "        `c`.`functionalTestingRequired` AS `functionalTestingRequired`,  \n" +
                "        `c`.`custAssyPN` AS `custAssyPN`,  \n" +
                "        `c`.`partType` AS `partType`,  \n" +
                "        `c`.`functionalTypePartRequired` AS `functionalTypePartRequired`,  \n" +
                "        `c`.`mountingTypePartRequired` AS `mountingTypePartRequired`,  \n" +
                "        `c`.`shelfListDaysThresholdPercentage` AS `shelfListDaysThresholdPercentage`,  \n" +
                "        `c`.`refSupplierMfgpnComponentID` AS `refSupplierMfgpnComponentID`,  \n" +
                "        `c`.`businessRisk` AS `businessRisk`,  \n" +
                "        `c`.`packagingID` AS `packagingID`,  \n" +
                "        `c`.`unit` AS `unit`,  \n" +
                "        `c`.`grossWeight` AS `grossWeight`,  \n" +
                "        `c`.`packagingWeight` AS `packagingWeight`,  \n" +
                "        `c`.`epicorType` AS `epicorType`,  \n" +
                "        `c`.`grossWeightUom` AS `grossWeightUom`,  \n" +
                "        `c`.`packagingWeightUom` AS `packagingWeightUom`,  \n" +
                "        `c`.`price` AS `price`,  \n" +
                "        `c`.`uomClassID` AS `uomClassID`,  \n" +
                "        `c`.`rohsDeviation` AS `rohsDeviation`,  \n" +
                "        `c`.`alertExpiryDays` AS `alertExpiryDays`,  \n" +
                "        `c`.`umidVerificationRequire` AS `umidVerificationRequire`,  \n" +
                "        `c`.`totalSolderPoints` AS `totalSolderPoints`,  \n" +
                "        `c`.`trackSerialNumber` AS `trackSerialNumber`,  \n" +
                "        `c`.`restrictPackagingUsePermanently` AS `restrictPackagingUsePermanently`,  \n" +
                "        `c`.`restrictPackagingUseWithpermission` AS `restrictPackagingUseWithpermission`,  \n" +
                "        `c`.`isAutoVerificationOfAllAssemblyParts` AS `isAutoVerificationOfAllAssemblyParts`,  \n" +
                "        `c`.`reversalDate` AS `reversalDate`,  \n" +
                "        `c`.`serialNumber` AS `serialNumber`,  \n" +
                "        `ca`.`packaginggroupID` AS `packaginggroupID`,  \n" +
                "        `ca`.`isCloudApiUpdateAttribute` AS `isCloudApiUpdateAttribute`,  \n" +
                "        `ca`.`functionalCategoryID` AS `functionalCategoryID`,  \n" +
                "        `ca`.`functionalCategoryText` AS `functionalCategoryText`,  \n" +
                "        `ca`.`mountingTypeID` AS `mountingTypeID`,  \n" +
                "        `ca`.`mountingTypeText` AS `mountingTypeText`,  \n" +
                "        `ca`.`isEpoxyMount` AS `isEpoxyMount`,  \n" +
                "        `ca`.`partPackageID` AS `partPackageID`,  \n" +
                "        `ca`.`partPackage` AS `partPackage`,  \n" +
                "        `ca`.`connecterTypeID` AS `connecterTypeID`,  \n" +
                "        `ca`.`connectorTypeText` AS `connectorTypeText`,  \n" +
                "        `ca`.`feature` AS `feature`,  \n" +
                "        `ca`.`noOfPosition` AS `noOfPosition`,  \n" +
                "        `ca`.`noOfPositionText` AS `noOfPositionText`,  \n" +
                "        `ca`.`noOfRows` AS `noOfRows`,  \n" +
                "        `ca`.`noOfRowsText` AS `noOfRowsText`,  \n" +
                "        `ca`.`operatingTemp` AS `operatingTemp`,  \n" +
                "        `ca`.`minOperatingTemp` AS `minOperatingTemp`,  \n" +
                "        `ca`.`maxOperatingTemp` AS `maxOperatingTemp`,  \n" +
                "        `ca`.`temperatureCoefficient` AS `temperatureCoefficient`,  \n" +
                "        `ca`.`temperatureCoefficientValue` AS `temperatureCoefficientValue`,  \n" +
                "        `ca`.`temperatureCoefficientUnit` AS `temperatureCoefficientUnit`,  \n" +
                "        `ca`.`pitch` AS `pitch`,  \n" +
                "        `ca`.`pitchMating` AS `pitchMating`,  \n" +
                "        `ca`.`sizeDimension` AS `sizeDimension`,  \n" +
                "        `ca`.`length` AS `length`,  \n" +
                "        `ca`.`width` AS `width`,  \n" +
                "        `ca`.`height` AS `height`,  \n" +
                "        `ca`.`heightText` AS `heightText`,  \n" +
                "        `ca`.`tolerance` AS `tolerance`,  \n" +
                "        `ca`.`voltage` AS `voltage`,  \n" +
                "        `ca`.`value` AS `value`,  \n" +
                "        `ca`.`powerRating` AS `powerRating`,  \n" +
                "        `ca`.`weight` AS `weight`,  \n" +
                "        `ca`.`color` AS `color`,  \n" +
                "        `ca`.`isTemperatureSensitive` AS `isTemperatureSensitive`,  \n" +
                "        IFNULL(`cb`.`bomLock`, 0) AS `bomLock`,  \n" +
                "        `cb`.`liveInternalVersion` AS `liveInternalVersion`,  \n" +
                "        `cb`.`exteranalAPICallStatus` AS `exteranalAPICallStatus`,  \n" +
                "        `cb`.`isBOMVerified` AS `isBOMVerified`,  \n" +
                "        `cb`.`liveVersion` AS `liveVersion`,  \n" +
                "        `cb`.`isActivityStart` AS `isActivityStart`,  \n" +
                "        `cb`.`activityStartBy` AS `activityStartBy`,  \n" +
                "        `cb`.`activityStartAt` AS `activityStartAt`,  \n" +
                "        `cb`.`activityStopAt` AS `activityStopAt`,  \n" +
                "        `c`.`systemGenerated` AS `systemGenerated`,  \n" +
                "        `c`.`purchasingComment` AS `purchasingComment`,  \n" +
                "        `c`.`isReversal` AS `isReversal`,  \n" +
                "        `c`.`predictedObsolescenceYear` AS `predictedObsolescenceYear`,  \n" +
                "        `c`.`requiredTestTime` AS `requiredTestTime`,  \n" +
                "        `c`.`detailDescription` AS `detailDescription`,  \n" +
                "        `c`.`documentPath` AS `documentPath`,  \n" +
                "        `c`.`obsoleteDate` AS `obsoleteDate`,  \n" +
                "        `c`.`assemblyType` AS `assemblyType`,  \n" +
                "        `c`.`refMfgPNMfgCodeId` AS `refMfgPNMfgCodeId`,  \n" +
                "        `c`.`productionPN` AS `productionPN`,  \n" +
                "        `c`.`frequency` AS `frequency`,  \n" +
                "        `c`.`isWaterSoluble` AS `isWaterSoluble`,  \n" +
                "        `c`.`isNoClean` AS `isNoClean`,  \n" +
                "        `c`.`mfrNameText` AS `mfrNameText`,  \n" +
                "        `c`.`isFluxNotApplicable` AS `isFluxNotApplicable`,  \n" +
                "        `c`.`isHazmatMaterial` AS `isHazmatMaterial`,  \n" +
                "        `c`.`rfqNumber` AS `rfqNumber`,  \n" +
                "        `c`.`salesacctId` AS `salesacctId`,  \n" +
                "        `c`.`purchaseacctId` AS `purchaseacctId`,  \n" +
                "        `c`.`umidSPQ` AS `umidSPQ`,  \n" +
                "        `c`.`internalReference` AS `internalReference`,  \n" +
                "        `c`.`unqDate` AS `unqDate`,  \n" +
                "        `c`.`shelfLifeAcceptanceDays` AS `shelfLifeAcceptanceDays`,  \n" +
                "        `c`.`maxShelfLifeAcceptanceDays` AS `maxShelfLifeAcceptanceDays`,  \n" +
                "        `c`.`maxShelfListDaysThresholdPercentage` AS `maxShelfListDaysThresholdPercentage`,  \n" +
                "        `c`.`quoteValidTillDate` AS `quoteValidTillDate`,  \n" +
                "        `c`.`shelfLifeDateType` AS `shelfLifeDateType`,  \n" +
                "        `c`.`frequencyType` AS `frequencyType`,  \n" +
                "        `c`.`isReceiveBulkItem` AS `isReceiveBulkItem`,  \n" +
                "        `c`.`mfgType` AS `mfgType`,  \n" +
                "        `c`.`dateCodeFormatID` AS `dateCodeFormatID`,  \n" +
                "        `c`.`isDateCodeFormat` AS `isDateCodeFormat`  \n" +
                "    FROM  \n" +
                "        ((`component` `c`  \n" +
                "        LEFT JOIN `component_attributes` `ca` ON ((`ca`.`refComponentID` = (CASE  \n" +
                "            WHEN (`c`.`mfgType` = 'MFG') THEN `c`.`id`  \n" +
                "            ELSE `c`.`refSupplierMfgpnComponentID`  \n" +
                "        END))))  \n" +
                "        LEFT JOIN `component_bomsetting` `cb` ON ((`cb`.`refComponentID` = (CASE  \n" +
                "            WHEN (`c`.`mfgType` = 'MFG') THEN `c`.`id`  \n" +
                "            ELSE `c`.`refSupplierMfgpnComponentID`  \n" +
                "        END))))  \n" +
                "    WHERE  \n" +
                "        (`c`.`isDeleted` = 0);  \n" +
                /* **************************** Add Script Version ->  15-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6020,'2.00','V1','Bug 42321: Showing error while opening part in Update - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
     case 6020:
			  allDbChangesArray.push(
			  /* **************************** Add Script Version -> 15-03-2022 *********************************** */
				"INSERT INTO systemconfigrations (`key`, `values`,`isActive`, `createdBy`, `createdAt` , `updatedBy` , `updatedAt`, `displayName`,  \n" +
				"`isEditable`,`description`,`createByRoleId`,`updateByRoleId`)  \n" +
				"VALUES ('KitReleaseWithOtherKitStock', 0 ,1, 1, fun_DatetimetoUTCDateTime(), 1 , fun_DatetimetoUTCDateTime(), 'Allow Kit Release With Other Kit Stocks',1,  \n" +
				"                'Upon kit release, Allow to transfer parts out of bin for selected kit & other kits.',1,1) ;  \n" +
			  /* **************************** Add Script Version -> 15-03-2022 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (6021,'2.00','V1','User Story 40723: UMID Create page enhancement points [Lot Code Changes] - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
            case 6021:
            allDbChangesArray.push(
            /* **************************** New Script -> 16-03-2022 *********************************** */
            "create table component_settings  \n" +
"(`refComponentID` int NOT NULL,  \n" +
"functionalTypePartRequired	tinyint(1),  \n" +
"mountingTypePartRequired	tinyint(1),  \n" +
"businessRisk	varchar(100),  \n" +
"totalSolderPoints	int,  \n" +
"trackSerialNumber	tinyint(1),  \n" +
"umidVerificationRequire	tinyint(1),  \n" +
"isAutoVerificationOfAllAssemblyParts	tinyint(1),  \n" +
"restrictUSEwithpermission	tinyint,  \n" +
"restrictPackagingUseWithpermission	tinyint(1),  \n" +
"restrictUsePermanently	tinyint,  \n" +
"restrictPackagingUsePermanently	tinyint(1),  \n" +
"scrapRatePercentagePerBuild	decimal(10,2),  \n" +
"scrapValuePerBuild	int,  \n" +
"plannedOverRunPercentagePerBuild	decimal(10,2),  \n" +
"plannedValuePerBuild	int,  \n" +
"selfLifeDays	int,  \n" +
"shelfLifeAcceptanceDays	int,  \n" +
"shelfListDaysThresholdPercentage	decimal(16,8),  \n" +
"maxShelfLifeAcceptanceDays	int,  \n" +
"maxShelfListDaysThresholdPercentage	decimal(18,8),  \n" +
"shelfLifeDateType	varchar(1),  \n" +
"alertExpiryDays	int,  \n" +
"programingRequired	tinyint(1),  \n" +
"driverToolRequired	tinyint(1),  \n" +
"matingPartRquired	tinyint(1),  \n" +
"pickupPadRequired	tinyint(1),  \n" +
"functionalTestingRequired	tinyint(1),  \n" +
"requiredTestTime	int,  \n" +
"saftyStock	int,  \n" +
"eau	decimal(18,8),  \n" +
"packagingWeight	decimal(18,8),  \n" +
"packagingWeightUom	int,  \n" +
"grossWeight	decimal(18,8),  \n" +
"grossWeightUom	int,  \n" +
"maxPriceLimit	decimal(18,8),  \n" +
"maxQtyonHand	int,  \n" +
"`isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
"`createdBy` varchar(255) NOT NULL,  \n" +
"`createdAt` datetime NOT NULL,  \n" +
"`createByRoleId` int NOT NULL,  \n" +
"`updatedBy` varchar(10) DEFAULT NULL,  \n" +
"`updatedAt` datetime DEFAULT NULL,  \n" +
"`updateByRoleId` int DEFAULT NULL,  \n" +
"`deletedBy` varchar(255) DEFAULT NULL,  \n" +
"`deletedAt` datetime DEFAULT NULL,  \n" +
"`deleteByRoleId` int DEFAULT NULL,  \n" +
"PRIMARY KEY (`refComponentID`),  \n" +
"CONSTRAINT `fk_component_settings_refComponentID` FOREIGN KEY (`refComponentID`) REFERENCES `component` (`id`));  \n" +
"CREATE TRIGGER Trg_AU_component_Update_settings AFTER UPDATE ON `component` FOR EACH ROW BEGIN  \n" +
"declare vCount int ;  \n" +
"	if   (new.mfgtype = 'MFG' ) then  \n" +
"  \n" +
"        if ( ifnull(old.totalSolderPoints,0) != ifnull(new.totalSolderPoints,0) OR ifnull(old.trackSerialNumber,0) != ifnull(new.trackSerialNumber,0) OR  \n" +
"			ifnull(old.umidVerificationRequire,0) != ifnull(new.umidVerificationRequire,0) OR ifnull(old.isAutoVerificationOfAllAssemblyParts,0) != ifnull(new.isAutoVerificationOfAllAssemblyParts,0) OR  \n" +
"			ifnull(old.restrictUSEwithpermission,0) != ifnull(new.restrictUSEwithpermission,0) OR ifnull(old.restrictPackagingUseWithpermission,0) != ifnull(new.restrictPackagingUseWithpermission,0) OR  \n" +
"			ifnull(old.restrictUsePermanently,0) != ifnull(new.restrictUsePermanently,0) OR ifnull(old.restrictPackagingUsePermanently,0) != ifnull(new.restrictPackagingUsePermanently,0) OR  \n" +
"			ifnull(old.scrapRatePercentagePerBuild,0) != ifnull(new.scrapRatePercentagePerBuild,0) OR ifnull(old.scrapValuePerBuild,0) != ifnull(new.scrapValuePerBuild,0) OR  \n" +
"			ifnull(old.plannedOverRunPercentagePerBuild,0) != ifnull(new.plannedOverRunPercentagePerBuild,0) OR ifnull(old.plannedValuePerBuild,0) != ifnull(new.plannedValuePerBuild,0) OR  \n" +
"			ifnull(old.selfLifeDays,0) != ifnull(new.selfLifeDays,0) OR ifnull(old.shelfLifeAcceptanceDays,0) != ifnull(new.shelfLifeAcceptanceDays,0) OR  \n" +
"			ifnull(old.shelfListDaysThresholdPercentage,0) != ifnull(new.shelfListDaysThresholdPercentage,0) OR ifnull(old.maxShelfLifeAcceptanceDays,0) != ifnull(new.maxShelfLifeAcceptanceDays,0) OR  \n" +
"			ifnull(old.maxShelfListDaysThresholdPercentage,0) != ifnull(new.maxShelfListDaysThresholdPercentage,0) OR ifnull(old.shelfLifeDateType,0) != ifnull(new.shelfLifeDateType,0) OR  \n" +
"			ifnull(old.alertExpiryDays,0) != ifnull(new.alertExpiryDays,0) OR ifnull(old.programingRequired,0) != ifnull(new.programingRequired,0) OR  \n" +
"			ifnull(old.driverToolRequired,0) != ifnull(new.driverToolRequired,0) OR ifnull(old.matingPartRquired,0) != ifnull(new.matingPartRquired,0) OR  \n" +
"			ifnull(old.pickupPadRequired,0) != ifnull(new.pickupPadRequired,0) OR ifnull(old.functionalTestingRequired,0) != ifnull(new.functionalTestingRequired,0) OR  \n" +
"			ifnull(old.requiredTestTime,0) != ifnull(new.requiredTestTime,0) OR ifnull(old.saftyStock,0) != ifnull(new.saftyStock,0) OR  \n" +
"			ifnull(old.eau,0) != ifnull(new.eau,0) OR ifnull(old.packagingWeight,0) != ifnull(new.packagingWeight,0) OR  \n" +
"			ifnull(old.packagingWeightUom,0) != ifnull(new.packagingWeightUom,0) OR ifnull(old.grossWeight,0) != ifnull(new.grossWeight,0) OR  \n" +
"			ifnull(old.grossWeightUom,0) != ifnull(new.grossWeightUom,0) OR ifnull(old.maxPriceLimit,0) != ifnull(new.maxPriceLimit,0) OR  \n" +
"			ifnull(old.maxQtyonHand,0) != ifnull(new.maxQtyonHand,0))	then  \n" +
"  \n" +
"					select count(1) into vCount from component_settings where refcomponentid  = new.id ;  \n" +
"  \n" +
"						if ( vCount = 0 )then  \n" +
"  \n" +
"  \n" +
"								insert into  component_settings  \n" +
"											(	`refComponentID` ,			functionalTypePartRequired,			mountingTypePartRequired,		businessRisk,  \n" +
"												totalSolderPoints,			trackSerialNumber,					umidVerificationRequire,		isAutoVerificationOfAllAssemblyParts,  \n" +
"												restrictUSEwithpermission,	restrictPackagingUseWithpermission,	restrictUsePermanently,			restrictPackagingUsePermanently,  \n" +
"												scrapRatePercentagePerBuild, scrapValuePerBuild,				plannedOverRunPercentagePerBuild,	plannedValuePerBuild,  \n" +
"												selfLifeDays,					shelfLifeAcceptanceDays,		shelfListDaysThresholdPercentage,	maxShelfLifeAcceptanceDays,  \n" +
"												maxShelfListDaysThresholdPercentage,	shelfLifeDateType,		alertExpiryDays,					programingRequired,  \n" +
"                                                driverToolRequired,					matingPartRquired,			pickupPadRequired,					functionalTestingRequired,  \n" +
"                                                requiredTestTime,					saftyStock,					eau,								packagingWeight,  \n" +
"												packagingWeightUom,					grossWeight,				grossWeightUom,						maxPriceLimit,  \n" +
"												maxQtyonHand,						isDeleted,  				createdBy,							createdAt,  \n" +
"												createByRoleId)  \n" +
"									values(new.id,			new.functionalTypePartRequired,			new.mountingTypePartRequired,		new.businessRisk,  \n" +
"												new.totalSolderPoints,			new.trackSerialNumber,					new.umidVerificationRequire,		new.isAutoVerificationOfAllAssemblyParts,  \n" +
"												new.restrictUSEwithpermission,	new.restrictPackagingUseWithpermission,	new.restrictUsePermanently,			new.restrictPackagingUsePermanently,  \n" +
"												new.scrapRatePercentagePerBuild, new.scrapValuePerBuild,				new.plannedOverRunPercentagePerBuild,	new.plannedValuePerBuild,  \n" +
"												new.selfLifeDays,					new.shelfLifeAcceptanceDays,		new.shelfListDaysThresholdPercentage,	new.maxShelfLifeAcceptanceDays,  \n" +
"												new.maxShelfListDaysThresholdPercentage,	new.shelfLifeDateType,		new.alertExpiryDays,					new.programingRequired,  \n" +
"                                                new.driverToolRequired,					new.matingPartRquired,			new.pickupPadRequired,					new.functionalTestingRequired,  \n" +
"                                                new.requiredTestTime,					new.saftyStock,					new.eau,								new.packagingWeight,  \n" +
"												new.packagingWeightUom,					new.grossWeight,				new.grossWeightUom,						new.maxPriceLimit,  \n" +
"												new.maxQtyonHand,	new.isDeleted,  				new.createdBy,						new.createdAt,  \n" +
"                                            new.createByRoleId);  \n" +
"  \n" +
"						else  \n" +
"  \n" +
"								update component_settings  \n" +
"									set	 `refComponentID` =new.id,  \n" +
"										functionalTypePartRequired=new.functionalTypePartRequired,  \n" +
"										mountingTypePartRequired=new.mountingTypePartRequired,  \n" +
"										businessRisk=new.businessRisk,  \n" +
"										totalSolderPoints=new.totalSolderPoints,  \n" +
"										trackSerialNumber=new.trackSerialNumber,  \n" +
"										umidVerificationRequire=new.umidVerificationRequire,  \n" +
"										isAutoVerificationOfAllAssemblyParts=new.isAutoVerificationOfAllAssemblyParts,  \n" +
"										restrictUSEwithpermission=new.restrictUSEwithpermission,  \n" +
"										restrictPackagingUseWithpermission=new.restrictPackagingUseWithpermission,  \n" +
"										restrictUsePermanently=new.restrictUsePermanently,  \n" +
"										restrictPackagingUsePermanently=new.restrictPackagingUsePermanently,  \n" +
"										scrapRatePercentagePerBuild=new.scrapRatePercentagePerBuild,  \n" +
"										scrapValuePerBuild=new.scrapValuePerBuild,  \n" +
"										plannedOverRunPercentagePerBuild=new.plannedOverRunPercentagePerBuild,  \n" +
"										plannedValuePerBuild=new.plannedValuePerBuild,  \n" +
"										selfLifeDays=new.selfLifeDays,  \n" +
"										shelfLifeAcceptanceDays=new.shelfLifeAcceptanceDays,  \n" +
"										shelfListDaysThresholdPercentage=new.shelfListDaysThresholdPercentage,  \n" +
"										maxShelfLifeAcceptanceDays=new.maxShelfLifeAcceptanceDays,  \n" +
"										maxShelfListDaysThresholdPercentage=new.maxShelfListDaysThresholdPercentage,  \n" +
"										shelfLifeDateType=new.shelfLifeDateType,  \n" +
"										alertExpiryDays=new.alertExpiryDays,  \n" +
"										programingRequired=new.programingRequired,  \n" +
"										driverToolRequired=new.driverToolRequired,  \n" +
"										matingPartRquired=new.matingPartRquired,  \n" +
"										pickupPadRequired=new.pickupPadRequired,  \n" +
"										functionalTestingRequired=new.functionalTestingRequired,  \n" +
"										requiredTestTime=new.requiredTestTime,  \n" +
"										saftyStock=new.saftyStock,  \n" +
"										eau=new.eau,  \n" +
"										packagingWeight=new.packagingWeight,  \n" +
"										packagingWeightUom=new.packagingWeightUom,  \n" +
"										grossWeight=new.grossWeight,  \n" +
"										grossWeightUom=new.grossWeightUom,  \n" +
"										maxPriceLimit=new.maxPriceLimit,  \n" +
"										maxQtyonHand=new.maxQtyonHand  \n" +
"										where refcomponentid = new.id;  \n" +
"						end if;  \n" +
"			end if;  \n" +
"  \n" +
"		end if;  \n" +
"	END;  \n" +
            /* **************************** Add Script Version -> 16-03-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (6022,'2.00','V1',' Create new table component_settings,Trg_AU_component_Update_settings  - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
              case 6022:
                allDbChangesArray.push(
                  /* **************************** New Script -> 16-02-2022 *********************************** */
                  "Drop procedure if exists `Sproc_RetrieveContactPersonList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveContactPersonList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefEntityType VARCHAR(255),  \n" +
                "	IN pisPrimary TINYINT,  \n" +
                "	IN pisDefault TINYINT,  \n" +
                "	IN pmfgId VARCHAR(16000),  \n" +
                "	IN padditionalComment VARCHAR(2000),  \n" +
                "	IN pempId VARCHAR(16000),  \n" +
                "	IN pnameSearch VARCHAR(255),  \n" +
                "	IN pcheckNameType VARCHAR(5)  \n" +
                "   )  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "        DECLARE mfgcodemstCondition VARCHAR(255) DEFAULT '';  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "		SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefEntityType = 'Customer/Manufacturer') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'MFG'\");  \n" +
                "		ELSEIF (prefEntityType = 'Supplier') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisPrimary) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isPrimary = '\",pisPrimary,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisDefault) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isDefault = '\",pisDefault,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pmfgId IS NOT NULL AND pmfgId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND mfgId IN (\",pmfgId,\") \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pempId IS NOT NULL AND pempId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND empId IN (\",pempId,\") \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(padditionalComment IS NOT NULL AND padditionalComment != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND additionalComment LIKE '%\",padditionalComment,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pnameSearch IS NOT NULL AND pnameSearch != '')THEN  \n" +
                "			IF(pcheckNameType='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, \" AND (firstName LIKE '%\",pnameSearch,\"%' OR middleName LIKE '%\",pnameSearch,\"%' OR lastName LIKE '%\",pnameSearch,\"%')\");  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, \" AND (firstName = '\",pnameSearch,\"' OR middleName = '\",pnameSearch,\"' OR lastName = '\",pnameSearch,\"')\");  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # Common Details for Retrive Contact Person.  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_Common = CONCAT(\"  \n" +
                "			fun_GetFormattedContactPersonName(a.firstName, a.middleName, a.lastName, \",vContPersonNameFormat,\") formattedName,  \n" +
                "			fun_getUserNameByID(a.updatedBy) updatedbyValue, fun_getUserNameByID(a.createdBy) createdbyValue,  \n" +
                "			fun_getRoleByID(a.createByRoleId) createdbyRoleValue, fun_getRoleByID(a.updateByRoleId) updatedbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "            (CASE WHEN (a.systemGenerated = 0) THEN 'No' WHEN (a.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `syatemGeneratedValue`,  \n" +
                "			(CASE WHEN (a.isDefault = 0) THEN 'No' WHEN (a.isDefault = 1) THEN 'Yes' ELSE '' END) AS `isDefaultValue`,  \n" +
                "			(CASE WHEN (a.isPrimary = 0) THEN 'No' WHEN (a.isPrimary = 1) THEN 'Yes' ELSE '' END) AS `isPrimaryValue`,  \n" +
                "            (CASE WHEN (a.mailToCategory = 'N') THEN 'None' WHEN (a.mailToCategory = 'P') THEN 'Primary Email' WHEN (a.mailToCategory = 'A') THEN 'All Email' ELSE '' END) AS `mailToValue`  \n" +
                "		\");  \n" +
                "  \n" +
                "		# Filter: Personnel  \n" +
                "		SET @temp_Sproc_RetrieveMasterTemplate_employees = CONCAT(\"  \n" +
                "			select cp.personId, ecp.employeeId AS refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber, cp.mailToCategory,  \n" +
                "					cp.division, cp.isPrimary, cp.systemGenerated, '' As refName, 'Personnel' AS refEntityType,  \n" +
                "                    fun_convertJsonEmailToCommaSepList(cp.email) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive,  \n" +
                "                    fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName,\",vEmployeeNameFormat,\") personnel,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "					vuCPPhones.workNum, vuCPPhones.mobileNum, vuCPPhones.mainNum, vuCPPhones.faxNum, vuCPPhones.faxNumJson, vuCPPhones.otherNum,vuCPPhones.otherNumJson, emp.id as empId, null as mfgId,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "				FROM contactperson cp  \n" +
                "				LEFT JOIN vu_cont_person_phones_by_Category AS vuCPPhones ON cp.personId = vuCPPhones.personId  \n" +
                "                LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "				LEFT JOIN employees emp ON emp.id = ecp.employeeId and emp.isDeleted = 0  \n" +
                "					WHERE cp.refTableName = 'employees' AND cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # Filter: Manufacturer AND Supplier  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_mfgcodemst = CONCAT(\"  \n" +
                "			select cp.personId, cp.refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber, cp.mailToCategory,  \n" +
                "					cp.division, cp.isPrimary, cp.systemGenerated, fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName, \",vMfgCodeFormat,\") AS refName,  \n" +
                "					(CASE WHEN mfg.mfgType = 'MFG' THEN 'Customer/Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "					(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive, '' AS personnels,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "					vuCPPhones.workNum, vuCPPhones.mobileNum, vuCPPhones.mainNum, vuCPPhones.faxNum, vuCPPhones.faxNumJson, vuCPPhones.otherNum, vuCPPhones.otherNumJson, null as empId, mfg.id as mfgId,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "                FROM contactperson cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0 \",mfgcodemstCondition,\"  \n" +
                "				LEFT JOIN vu_cont_person_phones_by_Category AS vuCPPhones ON cp.personId = vuCPPhones.personId  \n" +
                "						WHERE cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # UNION Records based of Filer : Create Final Query for Fetch Contact Person Records.  \n" +
                "        IF(prefEntityType = 'Supplier' OR prefEntityType = 'Customer/Manufacturer') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "		ELSEIF (prefEntityType = 'Personnel') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\") a \");  \n" +
                "        ELSE  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate= CONCAT(\"select *,\",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\" UNION ALL \",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY isDefault DESC, isPrimary DESC, firstName ASC\" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveMasterTemplate,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveMasterTemplate,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                  /* **************************** New Script -> 16-02-2022 *********************************** */
                  "Drop view if exists `vu_cont_person_phones_by_Category`;  \n" +
                "CREATE VIEW `vu_cont_person_phones_by_Category` AS  \n" +
                "    select cp.personId,  \n" +
                "		(select CONCAT('[',(group_concat(phoneList.phones)),']') from  \n" +
                "			(SELECT concat(GROUP_CONCAT(Json_object('category',jsonTblPhone.category,'phone', jsonTblPhone.phone,'phExtension' ,ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''), 'isPrimary', jsonTblPhone.isPrimary))) phones  \n" +
                "				FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category', isPrimary VARCHAR(40) PATH '$.isPrimary')  \n" +
                "				) jsonTblPhone where category = 'Work') phoneList) workNum,  \n" +
                "		(select CONCAT('[',(group_concat(phoneList.phones)),']') from  \n" +
                "			(SELECT concat(GROUP_CONCAT(Json_object('category',jsonTblPhone.category,'phone', jsonTblPhone.phone,'phExtension' ,ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''), 'isPrimary', jsonTblPhone.isPrimary))) phones  \n" +
                "				FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category', isPrimary VARCHAR(40) PATH '$.isPrimary')  \n" +
                "				) jsonTblPhone where category = 'Mobile') phoneList) mobileNum,  \n" +
                "		(select CONCAT('[',(group_concat(phoneList.phones)),']') from  \n" +
                "			(SELECT concat(GROUP_CONCAT(Json_object('category',jsonTblPhone.category,'phone', jsonTblPhone.phone,'phExtension' ,ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''), 'isPrimary', jsonTblPhone.isPrimary))) phones  \n" +
                "				FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category', isPrimary VARCHAR(40) PATH '$.isPrimary')  \n" +
                "				) jsonTblPhone where category = 'Main') phoneList) mainNum,  \n" +
                "		(select GROUP_CONCAT(catgWiseList.catgWisePhones SEPARATOR ' | ' ) from  \n" +
                "			(SELECT concat(jsonTblPhone.category,': ', GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''))) catgWisePhones  \n" +
                "				FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category')  \n" +
                "			) jsonTblPhone where category IN ('Work Fax','Home Fax') group by jsonTblPhone.category ) catgWiseList) faxNum,  \n" +
                "		(select CONCAT('[',(group_concat(phoneList.phones)),']') from  \n" +
                "			(SELECT concat(GROUP_CONCAT(Json_object('category',jsonTblPhone.category,'phone', jsonTblPhone.phone,'phExtension' ,ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''), 'isPrimary', jsonTblPhone.isPrimary))) phones  \n" +
                "				FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category', isPrimary VARCHAR(40) PATH '$.isPrimary')  \n" +
                "				) jsonTblPhone where category IN ('Work Fax','Home Fax')) phoneList) faxNumJson,  \n" +
                "		(select GROUP_CONCAT(catgWiseList.catgWisePhones SEPARATOR ' | ' ) from  \n" +
                "			(SELECT concat(jsonTblPhone.category,': ', GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''))) catgWisePhones  \n" +
                "				FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category')  \n" +
                "			) jsonTblPhone where category NOT IN ('Work','Mobile','Main','Work Fax','Home Fax') group by jsonTblPhone.category ) catgWiseList) otherNum,  \n" +
                "		(select CONCAT('[',(group_concat(phoneList.phones)),']') from  \n" +
                "			(SELECT concat(GROUP_CONCAT(Json_object('category',jsonTblPhone.category,'phone', jsonTblPhone.phone,'phExtension' ,ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''), 'isPrimary', jsonTblPhone.isPrimary))) phones  \n" +
                "				FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category', isPrimary VARCHAR(40) PATH '$.isPrimary')  \n" +
                "				) jsonTblPhone where category NOT IN ('Work','Mobile','Main','Work Fax','Home Fax')) phoneList) otherNumJson  \n" +
                "	FROM contactperson cp  \n" +
                "    where cp.phoneNumber is not null AND cp.isDeleted = 0;  \n" +
                  /* **************************** New Script -> 16-02-2022 *********************************** */
                  "Drop function if exists `fun_getPrimaryPhoneFromJsonList`;  \n" +
                "CREATE FUNCTION `fun_getPrimaryPhoneFromJsonList`(  \n" +
                "	pJsonPhoneList TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_Phone VARCHAR(100);  \n" +
                "  \n" +
                "		SELECT jsonTblPhones.phone INTO v_Phone  \n" +
                "		FROM JSON_TABLE(pJsonPhoneList, '$[*]' COLUMNS (phone VARCHAR(50)  PATH '$.phone', isprimary TINYINT  PATH '$.isPrimary',category VARCHAR(40)  PATH '$.category')) jsonTblPhones  \n" +
                "		WHERE jsonTblPhones.isPrimary = 1 and jsonTblPhones.category NOT IN ('Work Fax', 'Home Fax')  Limit 1;  \n" +
                "  \n" +
                "	RETURN v_Phone;  \n" +
                "  \n" +
                "END;  \n" +
                  /* **************************** New Script -> 16-02-2022 *********************************** */
                  "Drop function if exists `fun_getPrimaryFaxFromJsonList`;  \n" +
                "CREATE FUNCTION `fun_getPrimaryFaxFromJsonList`(  \n" +
                "	pJsonPhoneList TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_Phone VARCHAR(100);  \n" +
                "  \n" +
                "		SELECT jsonTblPhones.phone INTO v_Phone  \n" +
                "		FROM JSON_TABLE(pJsonPhoneList, '$[*]' COLUMNS (phone VARCHAR(50)  PATH '$.phone', isprimary TINYINT  PATH '$.isPrimary',category VARCHAR(40)  PATH '$.category')) jsonTblPhones  \n" +
                "		WHERE isPrimary = 1 and category IN ('Work Fax', 'Home Fax')  Limit 1;  \n" +
                "  \n" +
                "	RETURN v_Phone;  \n" +
                "  \n" +
                "END;  \n" +
                  /* **************************** New Script -> 16-02-2022 *********************************** */
                  "Drop function if exists `fun_getPrimaryPhExtensionFromJsonList`;  \n" +
                "CREATE FUNCTION `fun_getPrimaryPhExtensionFromJsonList`(  \n" +
                "	pJsonPhextList TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_Phext VARCHAR(100);  \n" +
                "  \n" +
                "		SELECT jsonTblPhExt.phExtension INTO v_Phext  \n" +
                "		FROM JSON_TABLE(pJsonPhextList, '$[*]' COLUMNS (phExtension VARCHAR(50)  PATH '$.phExtension', isprimary TINYINT  PATH '$.isPrimary',category VARCHAR(40)  PATH '$.category')) jsonTblPhExt  \n" +
                "		WHERE jsonTblPhExt.isPrimary = 1 AND jsonTblPhExt.category NOT IN ('Work Fax', 'Home Fax')  Limit 1;  \n" +
                "  \n" +
                "	RETURN v_Phext;  \n" +
                "  \n" +
                "END;  \n" +
                  /* **************************** New Script -> 16-02-2022 *********************************** */
                  "Drop function if exists `fun_getAddressbyIDAndContactPersonID`;  \n" +
                "CREATE FUNCTION `fun_getAddressbyIDAndContactPersonID`(  \n" +
                "	pAddressID INT,  \n" +
                "	pcontactPersonID INT  \n" +
                ") RETURNS varchar(2000) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pAddress VARCHAR(2000);  \n" +
                "    DECLARE vFormatValue INT;  \n" +
                "  \n" +
                "	SELECT `values` INTO vFormatValue FROM systemconfigrations WHERE `key`='ContactPersonDisplayNameFormat';  \n" +
                "  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>','ATTN: ',fun_GetFormattedContactPersonName(cp.firstName,cp.middleName,cp.lastName,vFormatValue),'<br/>', IFNULL(cp.division,''),(CASE WHEN cp.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),  \n" +
                "	CASE WHEN cp.phoneNumber IS NULL THEN '' ELSE IFNULL(CONCAT('<br/>Phone: ', fun_getPrimaryPhoneFromJsonList(cp.phoneNumber)), '') END,  \n" +
                "	CASE WHEN cp.phoneNumber IS NULL THEN '' ELSE IFNULL(CONCAT(' Ext. ', fun_getPrimaryPhExtensionFromJsonList(cp.phoneNumber)), '') END,  \n" +
                "    CASE WHEN cp.phoneNumber IS NULL THEN '' ELSE IFNULL(CONCAT('<br/>Fax: ', fun_getPrimaryFaxFromJsonList(cp.phoneNumber)), '') END,  \n" +
                "	(CASE WHEN cp.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',fun_getPrimaryEmailFromJsonList(cp.email)),'')) INTO  pAddress  \n" +
                "	FROM customer_addresses ca  \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	LEFT JOIN contactperson cp ON ca.customerId=cp.refTransID AND cp.personId=pcontactPersonID  \n" +
                "	WHERE ca.id = pAddressID  AND ca.isDeleted = 0;  \n" +
                "  \n" +
                "	RETURN pAddress;  \n" +
                "  \n" +
                "END;  \n" +
                  /* **************************** New Script -> 16-02-2022 *********************************** */
                  "Drop function if exists `fun_getCategoryWisePhonesFromJsonList`;  \n" +
                "CREATE FUNCTION `fun_getCategoryWisePhonesFromJsonList`(  \n" +
                "	pJsonPhoneList TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE v_Phones TEXT;  \n" +
                "  \n" +
                "	select GROUP_CONCAT(catgWiseList.catgWisePhones SEPARATOR ' | ') INTO v_Phones  \n" +
                "		FROM (SELECT concat(jsonTblPhone.category,': ', GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''))) catgWisePhones  \n" +
                "			FROM JSON_TABLE(pJsonPhoneList,  \n" +
                "				'$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category')  \n" +
                "			) jsonTblPhone group by jsonTblPhone.category order by FIELD(jsonTblPhone.category,'Home Fax','Home','Main','Mobile','Work Fax','Work') DESC  \n" +
                "        ) catgWiseList;  \n" +
                "  \n" +
                "	RETURN v_Phones;  \n" +
                "END;  \n" +
                  /* **************************** New Script -> 16-02-2022 *********************************** */
                  "Drop procedure if exists `Sproc_getCustomerSupplierGeographicalLocationReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_getCustomerSupplierGeographicalLocationReportDetails`(  \n" +
                "	IN pEntityType varchar(5),  \n" +
                "	IN pAddressType varchar(5),  \n" +
                "	IN pisDefaultAddress tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vWhereClause VARCHAR(16383);  \n" +
                "    SET vWhereClause = ' 1=1 ';  \n" +
                "	IF(pEntityType IS NOT NULL) THEN  \n" +
                "		IF pEntityType = 'CUST' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cu.mfgType = 'MFG' AND cu.isCustOrDisty = 1 \");  \n" +
                "		ELSEIF pEntityType = 'DIST' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cu.mfgType = 'DIST' \");  \n" +
                "		ELSE  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND 1=1 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAddressType IS NOT NULL) THEN  \n" +
                "		IF pAddressType = 'B' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'B' \");  \n" +
                "		ELSEIF pAddressType = 'S' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'S' \");  \n" +
                "		ELSEIF pAddressType = 'I' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'I' \");  \n" +
                "		ELSEIF pAddressType = 'P' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'P' \");  \n" +
                "		ELSEIF pAddressType = 'R' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'R' \");  \n" +
                "		ELSEIF pAddressType = 'W' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'W' \");  \n" +
                "		ELSEIF pAddressType = 'BU' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'BU' \");  \n" +
                "		ELSE  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND 1=1 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pisDefaultAddress = 1 THEN  \n" +
                "		SET vWhereClause = CONCAT(vWhereClause, ' AND cua.isDefault = 1 ');  \n" +
                "    ELSE  \n" +
                "		SET vWhereClause = CONCAT(vWhereClause, ' AND 1=1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @tempQuery = CONCAT(\"SELECT DISTINCT CONCAT(IF(cu.legalName = '' OR cu.legalName is null,'' ,CONCAT(cu.legalName, ' d/b/a, ')), IFNULL(cu.mfgName, ''), ' Address: ',IFNULL(cua.street1, ''), ' ',IFNULL(cua.city, ''),', ',IFNULL(cua.state, ''),' ',IFNULL(cua.postcode, ''), ',', IFNULL(c.countryName,''), ' ' ,IFNULL(CONCAT('Email:',fun_getPrimaryEmailFromJsonList(cp.email)),''),  \n" +
                "	IFNULL(CONCAT(' Phone: ',fun_getPrimaryPhoneFromJsonList(cp.phoneNumber)),''),IFNULL(CONCAT(' Ext.',fun_getPrimaryPhExtensionFromJsonList(cp.phoneNumber)),''),IFNULL(CONCAT(' Fax: ',fun_getPrimaryFaxFromJsonList(cp.phoneNumber)),''))AS Address,  \n" +
                "	CONCAT(cua.Latitude ,' ',  cua.longitude) AS Location , cu.mfgCode as Code, cu.mfgName as Name, (case WHEN cu.mfgType = 'MFG' then 'Customer' WHEN cu.mfgType = 'DIST' then 'Supplier' else '' END) as Type, (case WHEN cua.isDefault = 1 then 'Yes' else 'No' END) as DefaultAddress,  \n" +
                "    (case WHEN cua.addressType = 'B' then 'Billing Address' WHEN cua.addressType = 'S' then 'Shipping Address'  WHEN cua.addressType = 'I' then 'Mark For (Intermediate Ship To) Address'  \n" +
                "		WHEN cua.addressType = 'P' then 'Remit To Address' WHEN cua.addressType = 'R' then 'RMA Shipping Address'  \n" +
                "        WHEN cua.addressType = 'W' then 'Wire Transfer Address' WHEN cua.addressType = 'BU' then 'Business Address' else '' END) as AddressType  \n" +
                "        FROM customer_addresses cua  \n" +
                "				Left Join contactperson cp on cua.defaultContactPersonID = cp.personId  \n" +
                "				JOIN mfgcodemst cu ON cu.id = cua.customerId  \n" +
                "				LEFT JOIN countrymst c ON cua.countryID=c.countryID  \n" +
                "				WHERE (cua.latitude is not null And cua.longitude is not null) and\", vWhereClause ,\";\");  \n" +
                "  \n" +
                "	PREPARE query1 FROM @tempQuery;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                  /* **************************** New Script -> 16-02-2022 *********************************** */
                  "Drop procedure if exists `Sproc_RetrieveEmployee`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveEmployee`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE vTimeZone VARCHAR(50);  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat ;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "		SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "  		SET @temp_Sproc_RetrieveEmployee = CONCAT(\"  \n" +
                "			SELECT  \n" +
                "				`Employee`.id,  \n" +
                "				`Employee`.firstName,  \n" +
                "				`Employee`.email,  \n" +
                "				`Employee`.contact,  \n" +
                "				`Employee`.burdenRate,  \n" +
                "				`Employee`.street1,  \n" +
                "				`Employee`.street2,  \n" +
                "				`Employee`.postcode,  \n" +
                "				`Employee`.city,  \n" +
                "				`Employee`.state,  \n" +
                "				`Employee`.countryID,  \n" +
                "				`Employee`.paymentMode,  \n" +
                "				`Employee`.isActive,  \n" +
                "				`Employee`.middleName,  \n" +
                "				`Employee`.lastName,  \n" +
                "				`Employee`.initialName,  \n" +
                "				`Employee`.visibleCode,  \n" +
                "				`Employee`.phExtension,  \n" +
                "				`Employee`.profileImg ,  \n" +
                "				`Employee`.personnelType ,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName, \",vContPersonNameFormat,\") contactPerson,  \n" +
                "				fun_GetEmployeeFormattedName(Employee.firstName, Employee.middleName, Employee.lastName, Employee.initialName, \",vEmployeeNameFormat,\" ) fullName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(ecp.assignedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') assignedAt,  \n" +
                "				fun_getUserNameByID(`Employee`.updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(`Employee`.createdBy) createdby,  \n" +
                "				fun_getRoleByID(`Employee`.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(`Employee`.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(`Employee`.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(`Employee`.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				`user`.`id` AS `userID`,  \n" +
                "				fun_getEmployeeInitialNameByEmpID (`Employee`.`managerID`) AS `managerEmployeeName`,  \n" +
                "				fun_getStatusByValue(`Employee`.`isActive`) AS `isActiveConvertedValue`,  \n" +
                "				fun_getEmployeeCertificationByEmpID(`Employee`.`id`) AS `empCertificationList`,  \n" +
                "				fun_getEmployeeResponsibilitByEmpID (`Employee`.`id`) AS employeeResponsibility,  \n" +
                "                (case when Employee.personnelType = 'P' THEN 'Personal' WHEN Employee.personnelType = 'F' THEN 'Functional' ELSE '' END) userAccountType  \n" +
                "			FROM `employees` AS `Employee`  \n" +
                "				INNER JOIN `users` AS `user` ON `Employee`.`id` = `user`.`employeeID` AND `user`.`isDeleted`=0  \n" +
                "				LEFT JOIN employee_contactperson AS ecp ON  ecp.employeeId = Employee.id and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "				LEFT JOIN contactperson cp ON cp.personId = ecp.contactPersonId and cp.isDeleted = 0  \n" +
                "			WHERE `Employee`.`isDeleted` = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY firstName ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveEmployee,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveEmployee,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                  /* **************************** New Script -> 16-02-2022 *********************************** */
                  "Drop procedure if exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(  \n" +
                "	IN pPaymentID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		SELECT pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,  \n" +
                "				pip.paymentAmount,  \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,  \n" +
                "                fun_getAddressbyIDForCheckPrint(pip.payToAddressID, pip.payToContactPersonID) payToAddress,  \n" +
                "				/*pip.payToAddress,  */  \n" +
                "				pip.billToName supplierName,  \n" +
                "                fun_getAddressbyIDForCheckPrint(pip.billToAddressID, pip.billToContactPersonID) supplierAddress,  \n" +
                "                /*pip.billToAddress supplierAddress,*/  \n" +
                "                fun_getPrimaryEmailFromJsonList(cp.email) supplierEmail, fun_getPrimaryFaxFromJsonList(cp.phoneNumber) supplierFaxNumber,  \n" +
                "                pip.bankAccountNo,  \n" +
                "                g.gencCategoryName paymentType  \n" +
                "		  FROM packingslip_invoice_payment pip  \n" +
                "          LEFT JOIN customer_addresses ca ON ca.customerId = pip.mfgcodeID AND ca.isDeleted = 0 AND ca.addressType = 'BU' AND ca.isDefault = 1  \n" +
                "			LEFT JOIN contactperson cp ON ca.customerId=cp.refTransID AND cp.personId = ca.defaultContactPersonID  \n" +
                "          JOIN genericcategory g ON g.categoryType = 'Payable Payment Method' AND g.gencCategoryID = pip.paymentType  \n" +
                "		 WHERE pip.isDeleted = 0  \n" +
                "			AND pip.refPaymentMode = 'P'  \n" +
                "		   AND pip.id = pPaymentID;  \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoNumber  \n" +
                "						ELSE  \n" +
                "							p.debitMemoNumber  \n" +
                "					END) invoiceNumber,  \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "				ELSE  \n" +
                "					(SELECT 	ps.invoiceNumber  \n" +
                "					FROM 	packing_slip_material_receive ps  \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno  \n" +
                "							AND ps.isDeleted = 0  )  \n" +
                "				END  \n" +
                "				) refInvoiceNumber,  \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceDate  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoDate  \n" +
                "						ELSE  \n" +
                "							p.debitMemoDate  \n" +
                "					END) invoiceDate,  \n" +
                "  \n" +
                "				p.remark `description`,  \n" +
                "				/*(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,*/  \n" +
                "                pd.paymentAmount extendedPrice,  \n" +
                "				0 discount,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							'Invoice'  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							'Credit Memo'  \n" +
                "						ELSE  \n" +
                "							'Debit Memo'  \n" +
                "					END) receiptMemoType,  \n" +
                "                    p.poNumber  \n" +
                "			FROM packing_slip_material_receive p  \n" +
                "            JOIN packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id  \n" +
                "			WHERE /*p.isDeleted =0  \n" +
                "			and*/ p.receiptType IN ('I','C','D')  \n" +
                "            AND EXISTS (SELECT 1 FROM packingslip_invoice_payment pip WHERE pip.refPaymentMode = 'P' AND pip.id = pd.refPayementid)  \n" +
                "			/*and p.`status` = 'P'*/  \n" +
                "			AND pd.refPayementid = pPaymentID  \n" +
                "            ORDER BY invoiceDate, invoiceNumber;  \n" +
                "  \n" +
                "        	SELECT CONCAT('<b>',IF(ci.legalName = '' OR ci.legalName IS NULL,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'</b><br/>',IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''),'<br/>',  \n" +
                "				IFNULL(c.countryName,''))AS address,  \n" +
                "				ci.personName AS companyContactName,ci.registeredEmail AS companyEmail,ci.faxNumber,ci.contactNumber AS phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName,ci.registeredEmail AS email  \n" +
                "			FROM company_info ci  \n" +
                "			LEFT JOIN countrymst c ON ci.countryID=c.countryID AND c.isDeleted = 0  \n" +
                "			WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                  /* **************************** New Script -> 16-02-2022 *********************************** */
                  "Drop procedure if exists `Sproc_GetCheckPrintAndRemittanceCustRefundReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceCustRefundReport`(  \n" +
                "	IN pPaymentID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		/* Refund master details */  \n" +
                "		SELECT pip.id, pip.accountReference,  \n" +
                "			pip.paymentDate, pip.paymentNumber,  \n" +
                "			pip.paymentAmount,  \n" +
                "			fun_NumberToWords(pip.paymentAmount) AS paymentAmountInWords,  \n" +
                "			pip.payToName ,   -- pip.payToAddress,  \n" +
                "			fun_getAddressbyIDForCheckPrint(pip.payToAddressID, pip.payToContactPersonID) AS payToAddress,  \n" +
                "			 pip.billToName AS customerName,  \n" +
                "			 -- pip.billToAddress AS customerAddress,  \n" +
                "			fun_getAddressbyIDForCheckPrint(pip.billToAddressID, pip.billToContactPersonID) AS customerAddress,  \n" +
                "			-- ca.email AS customerEmail, ca.faxNumber AS customerFaxNumber,  \n" +
                "			fun_getPrimaryEmailFromJsonList(cp.email) AS customerEmail ,  \n" +
                "			#cp.faxNumber AS customerFaxNumber ,  \n" +
                "			fun_getPrimaryFaxFromJsonList(cp.phoneNumber) AS customerFaxNumber ,  \n" +
                "			pip.bankAccountNo, pip.refGencTransModeID,  \n" +
                "			g.gencCategoryName AS paymentType ,  \n" +
                "			pip.remark  \n" +
                "		FROM packingslip_invoice_payment pip  \n" +
                "			-- LEFT JOIN customer_addresses ca ON ca.customerId = pip.mfgcodeID AND ca.isDeleted = 0 AND ca.addressType = 'B' AND ca.isDefault = 1  \n" +
                "			LEFT JOIN contactperson cp ON cp.personId = pip.billToContactPersonID AND cp.isDeleted = 0  \n" +
                "			JOIN genericcategory g ON g.categoryType = 'Payable Payment Method' AND g.gencCategoryID = pip.paymentType  \n" +
                "		WHERE pip.id = pPaymentID  \n" +
                "		AND pip.refPaymentMode = 'CR'  \n" +
                "		AND pip.isDeleted = 0  ;  \n" +
                "  \n" +
                "		/* get refunded payment or refunded credit memo details */  \n" +
                "		SELECT  \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoNumber  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumber  \n" +
                "				ELSE NULL END) AS paymentCMNumber ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoDate  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentDate  \n" +
                "				ELSE NULL END) AS paymentCMDate ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.paymentAmount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentAmount  \n" +
                "				ELSE NULL END) AS refundedAmountForPaymentCM ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.comment  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.comment  \n" +
                "				ELSE NULL END) AS commentForPaymentCM  \n" +
                "  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount, psipd.comment, psipt.paymentNumber, psipt.paymentDate  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
                "					WHERE psipd.refPayementid = pPaymentID  \n" +
                "					AND psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					 ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount ,psipd.comment, cps.creditMemoNumber, cps.creditMemoDate  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refPayementid = pPaymentID  \n" +
                "					AND psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		WHERE psip.id = pPaymentID  \n" +
                "		AND psip.refPaymentMode = 'CR'  \n" +
                "		AND psip.isDeleted = 0  ;  \n" +
                "  \n" +
                "		/* Default set company (isCompany = 1) address details  */  \n" +
                "		SELECT CONCAT('<b>', IF(ci.legalName = '' OR ci.legalName IS NULL,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'</b><br/>',IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''),'<br/>',  \n" +
                "			IFNULL(c.countryName,''))AS address,  \n" +
                "			ci.personName AS companyContactName,ci.registeredEmail AS companyEmail,ci.faxNumber,ci.contactNumber AS phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail AS email  \n" +
                "		FROM company_info ci  \n" +
                "		LEFT JOIN countrymst c ON ci.countryID=c.countryID AND c.isDeleted = 0  \n" +
                "		WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                  /* **************************** New Script -> 16-02-2022 *********************************** */
                  "Drop procedure if exists `Sproc_Uti_SetFirstFaxAsPrimaryContactPerson`;  \n" +
                "CREATE PROCEDURE `Sproc_Uti_SetFirstFaxAsPrimaryContactPerson`( )  \n" +
                "BEGIN  \n" +
                "    DECLARE n INT DEFAULT 0;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "  \n" +
                "	Drop temporary table if exists contTemp;  \n" +
                "	Create temporary table if not exists contTemp as (select cp.personId,  \n" +
                "		(select case when count(a.id) = 1 then null else (  \n" +
                "			select tbl.id from (select ROW_NUMBER() over() as id , jsonTblPhone.* from JSON_TABLE  \n" +
                "						(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', category VARCHAR(40)  PATH '$.category', isPrimary VARCHAR(40)  PATH '$.isPrimary')  \n" +
                "						) jsonTblPhone) tbl where (tbl.category = 'Work Fax'  and tbl.isPrimary = 'false') limit 1  \n" +
                "		) END from (  \n" +
                "			select ROW_NUMBER() over() as id ,jsonTblPhone.category,jsonTblPhone.isPrimary   from JSON_TABLE  \n" +
                "				(cp.phoneNumber, '$[*]' COLUMNS  \n" +
                "					(phone VARCHAR(40)  PATH '$.phone', category VARCHAR(40)  PATH '$.category', isPrimary VARCHAR(40)  PATH '$.isPrimary')  \n" +
                "				) jsonTblPhone where (jsonTblPhone.category = 'Work Fax'  and jsonTblPhone.isPrimary = 'true') limit 1  \n" +
                "		) a ) jsonPosition from contactperson cp where cp.isDeleted = false and cp.phoneNumber is not null);  \n" +
                "  \n" +
                "	select count(1) as needToUpdateRecordCount from contTemp where jsonPosition is not null;  \n" +
                "  \n" +
                "    if(exists(select 1 from contTemp where jsonPosition is not null)) then  \n" +
                "		SELECT COUNT(*) FROM contTemp INTO n;  \n" +
                "		SET i=0;  \n" +
                "		WHILE i<n DO  \n" +
                "			select jsonPosition,personId into @jsonPosition,@personId from ContTemp  limit 1 offset i;  \n" +
                "			if(@jsonPosition is not null) THEN  \n" +
                "				set @SQLStatement = CONCAT(\"Update contactperson cp  SET  cp.phoneNumber = JSON_SET(cp.phoneNumber,'$[\",(@jsonPosition -1),\"].isPrimary', TRUE)  \n" +
                "					where cp.personId = \",@personId,\";\");  \n" +
                "  \n" +
                "				PREPARE query1 FROM @SQLStatement;  \n" +
                "				EXECUTE query1;  \n" +
                "				DEALLOCATE PREPARE query1;  \n" +
                "			END IF;  \n" +
                "			SET i = i + 1;  \n" +
                "		END WHILE;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                  /* **************************** New Script -> 16-02-2022 *********************************** */
                  /* **************************** Add Script Version -> 16-02-2022 *********************************** */
                  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                  "VALUES (6023,'2.00','V1',' User Story 41763: [Main Branch] - Contact person and Primary Contact Person changes suggested by client - 28/02/2022 - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
    case 6023:
			  allDbChangesArray.push(
			  /* **************************** Add Script Version -> 17-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
				"CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(  \n" +
				"    IN pWhereClause VARCHAR(16383),  \n" +
				"    IN puserID VARCHAR(50),  \n" +
				"    IN pnickName VARCHAR(20),  \n" +
				"    IN pprefix VARCHAR(20),  \n" +
				"    IN pIsFromUID TINYINT,  \n" +
				"    IN pComponentID INT,  \n" +
				"    IN pCustomerID INT,  \n" +
				"    IN pCPN BOOL,  \n" +
				"    IN pMFGAvailabel BOOL,  \n" +
				"    IN pRefCpnMfgID INT,  \n" +
				"    IN pAssyID INT,  \n" +
				"    IN pSalesOrderDetailID INT,  \n" +
				"    IN pReceiveMaterialType VARCHAR(255),  \n" +
				"    IN pkitAssemblyID INT,  \n" +
				"    IN pBarcodeID INT,  \n" +
				"    IN pBOMLineID INT,  \n" +
				"    IN pSupplierID INT,  \n" +
				"    IN pCategory VARCHAR(2),  \n" +
				"    IN pInventoryType VARCHAR(2),  \n" +
				"    IN pCallFrom VARCHAR(50),  \n" +
				"    IN pExcludeStatus INT,  \n" +
				"    IN pBinID INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
				"	DECLARE v_delimiter VARCHAR(10);  \n" +
				"	DECLARE v_length INT;  \n" +
				"	DECLARE v_fieldType INT;  \n" +
				"	DECLARE v_entityId INT;  \n" +
				"	DECLARE v_dataElementId INT;  \n" +
				"	DECLARE v_displayOrder DECIMAL(6,2);  \n" +
				"	DECLARE delimiter_value_data VARCHAR(1000);  \n" +
				"	DECLARE strLabel VARCHAR(2000);  \n" +
				"	DECLARE QueryForStatic  VARCHAR(2000);  \n" +
				"	DECLARE StaticField VARCHAR(100);  \n" +
				"	DECLARE DynamicField VARCHAR(100);  \n" +
				"	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';  \n" +
				"	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');  \n" +
				"	DECLARE plen,slen INT;  \n" +
				"	DECLARE pbr_template_ID INT DEFAULT 0;  \n" +
				"	DECLARE pbr_Separator VARCHAR(50);  \n" +
				"	DECLARE barcode_type_id INT;  \n" +
				"	DECLARE MFG_Part_No VARCHAR(16383);  \n" +
				"	DECLARE UpdateValue VARCHAR(16383);  \n" +
				"	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';  \n" +
				"	DECLARE v_SupplierID INT;  \n" +
				"	DECLARE v_BarcodeType VARCHAR(20);  \n" +
				"	DECLARE v_barcode_id INT;  \n" +
				"	DECLARE v_barcode_count INT;  \n" +
				"	DECLARE v_NumberOfPart INT;  \n" +
				"	DECLARE v_rfqLineItemsID INT;  \n" +
				"	DECLARE v_componentCount INT;  \n" +
				"	DECLARE v_componentId INT;  \n" +
				"	DECLARE v_mfgPartNO VARCHAR(100);  \n" +
				"	DECLARE v_partMFG INT;  \n" +
				"	DECLARE v_isGoodPart TINYINT;  \n" +
				"	DECLARE v_restrictUsePermanently TINYINT;  \n" +
				"	DECLARE v_restrictUSEwithpermission TINYINT;  \n" +
				"	DECLARE v_restrictUseInBOM TINYINT;  \n" +
				"	DECLARE v_isInstall TINYINT;  \n" +
				"	DECLARE v_isBOMLineClean TINYINT;  \n" +
				"	DECLARE v_BOMLineId INT;  \n" +
				"	DECLARE v_restrictPackagingAliasPermanently TINYINT;  \n" +
				"	DECLARE v_restrictPackagingAliasPermission TINYINT;  \n" +
				"	DECLARE v_bomErrorDescription LONGTEXT;  \n" +
				"	DECLARE v_PIDCode VARCHAR(110);  \n" +
				"	DECLARE v_isPurchase TINYINT;  \n" +
				"	DECLARE v_isBuyDNPQty VARCHAR(5);  \n" +
				"	DECLARE v_BOMLineItemNo DECIMAL(16,8);  \n" +
				"	DECLARE v_BOMLineCount INT;  \n" +
				"	DECLARE v_AlternateLineId INT;  \n" +
				"	DECLARE v_MFRPackagingId VARCHAR(1000);  \n" +
				"	DECLARE v_BOMAssyId INT;  \n" +
				"	DECLARE v_BOMAssyIds VARCHAR(1000);  \n" +
				"	DECLARE v_restrictUsePackagingInBOM TINYINT;  \n" +
				"	DECLARE v_restrictUseCPNInBOM TINYINT;  \n" +
				"	DECLARE v_isCPNFlag TINYINT;  \n" +
				"	DECLARE v_dateCodeFormatID INT;  \n" +
				"	DECLARE v_InternalDateCode VARCHAR(50);  \n" +
				"  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);  \n" +
				"	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;  \n" +
				"	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;  \n" +
				"	DECLARE v_MFRList VARCHAR(10000);  \n" +
				"	DECLARE v_barcode_status INT;  \n" +
				"	DECLARE v_category INT;  \n" +
				"	DECLARE v_partType INT;  \n" +
				"    DECLARE v_pendingPartCount INT;  \n" +
				"    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
				"  \n" +
				"	SET v_SupplierQuoteMFRIsNotCustomPart = 0;  \n" +
				"	SET v_MfrNotFoundForSupplierQuote = 0;  \n" +
				"    SET v_dateCodeFormatID = (SELECT sys.`values` FROM systemconfigrations sys WHERE sys.`key` = 'UMIDLotCodeFormat');  \n" +
				"  \n" +
				"    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;  \n" +
				"	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error  \n" +
				"	(  \n" +
				"		errorText LONGTEXT,  \n" +
				"		IsSuccess VARCHAR (2),  \n" +
				"		MFGPart VARCHAR(10000)  \n" +
				"	);  \n" +
				"  \n" +
				"	/* Temp table for Packing Slip */  \n" +
				"	IF (pCategory = 'P') THEN  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;  \n" +
				"		CREATE TEMPORARY TABLE temp_packing_slip_material_receive  \n" +
				"		(  \n" +
				"			scanlabel VARCHAR(1000),  \n" +
				"			poNumber VARCHAR(100),  \n" +
				"			supplierSONumber VARCHAR(100),  \n" +
				"			packingSlipNumber VARCHAR(50),  \n" +
				"			invoiceNumber VARCHAR(50)  \n" +
				"		);  \n" +
				"	ELSE /* Temp table for MFR */  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;  \n" +
				"		CREATE TEMPORARY TABLE temp_Component_Sid_Stock  \n" +
				"		(  \n" +
				"			refcompid INT,  \n" +
				"            dateCodeFormatID INT,  \n" +
				"			pkgQty DECIMAL(18,6),  \n" +
				"			dateCode VARCHAR(10),  \n" +
				"			lotCode VARCHAR(255),  \n" +
				"			scanlabel VARCHAR(1000),  \n" +
				"			createdBy VARCHAR(255),  \n" +
				"			uid VARCHAR(14),  \n" +
				"			prefix VARCHAR(20),  \n" +
				"			nickName VARCHAR(50),  \n" +
				"			cpn TINYINT,  \n" +
				"			mfgAvailabel TINYINT,  \n" +
				"			refCPNMFGPNID INT,  \n" +
				"			customerID INT,  \n" +
				"			assyID INT,  \n" +
				"			receiveMaterialType VARCHAR(255),  \n" +
				"			refSupplierPartId INT,  \n" +
				"			mfrDateCode VARCHAR(50),  \n" +
				"			poNumber VARCHAR(50),  \n" +
				"			supplierSONumber VARCHAR(50),  \n" +
				"			packingSlipNumber VARCHAR(50),  \n" +
				"			invoiceNumber VARCHAR(50),  \n" +
				"			binName VARCHAR(100),  \n" +
				"			packaging VARCHAR(100),  \n" +
				"			packingSlipDetailNickname VARCHAR(50)  \n" +
				"		);  \n" +
				"  \n" +
				"		/* Temp table for data element value */  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;  \n" +
				"		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values  \n" +
				"		(  \n" +
				"			entityid INT,  \n" +
				"			dataelementid INT,  \n" +
				"			`value` LONGTEXT,  \n" +
				"			createdBy VARCHAR(255)  \n" +
				"		);  \n" +
				"    END IF;  \n" +
				"	-- get data from barcode templates with seprator  \n" +
				"	# return error code  \n" +
				"	# 0: Mfgcode and MfgpartNO is not Found  \n" +
				"	# 0: Barcode template does not exist, Please add template  \n" +
				"	# 1: Validation Clear  \n" +
				"	# 2: Mfgcode and Mfg partNO are avialable but not matched in component  \n" +
				"	# 3: Mfgcode is not found  \n" +
				"	# 4: MFG PN does not exist  \n" +
				"	# 5: Multiple MFG PN found  \n" +
				"	# 6: CPN MFG Part is mismatch with CPN MFG Code  \n" +
				"	# 7: MFG PN or CPN is not found in bom of this assembly  \n" +
				"	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer  \n" +
				"	# 9:  Multiple barcode template found.  \n" +
				"	# 10: Scanned MFG Part is not CPN, Please check  \n" +
				"	# 11: MFG PN is incorrect part  \n" +
				"	# 12: PID PID1 was restricted part at part master level.  \n" +
				"	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
				"	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.  \n" +
				"	# 15: BOM line have not clean. So, you can not allocate to kit.  \n" +
				"	# 16: PID PID1 was restricted packaging alias part at part master level.  \n" +
				"	# 17: PID is contain more than 1 BOM line.  \n" +
				"	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.  \n" +
				"	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
				"	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.  \n" +
				"	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.  \n" +
				"	# 22: You cannot create UMID for assembly from Existing Stock.  \n" +
				"	# 23: In UMID Management screen not allow to scan which part's part type is Other  \n" +
				"    # 24: In UMID Management screen if pending stock is not exists for stockinventory NI then not allow to scan part  \n" +
				"    # 25: In UMID Management screen if pending stock PS status is Draft then not allow to scan part  \n" +
				"    # 24: In UMID Management screen if pending stock PS Line received status is Pending or Rejected then not allow to scan part  \n" +
				"  \n" +
				"	block1: BEGIN  \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");   \n" +
				"		IF (pBarcodeID IS NULL) THEN  \n" +
				"			/* Get barcode from labelstring */  \n" +
				"            SELECT COUNT(*) INTO v_barcode_count  \n" +
				"			  FROM br_label_template  \n" +
				"             WHERE isDeleted=0  \n" +
				"               AND barcodeCategory = pCategory  \n" +
				"               AND `status`=1  \n" +
				"               AND pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
				"  \n" +
				"			SELECT id, barcodeType, `name`, `status`  \n" +
				"              INTO v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status  \n" +
				"			  FROM br_label_template  \n" +
				"             WHERE isDeleted=0  \n" +
				"               AND barcodeCategory = pCategory  \n" +
				"               AND `status`=1  \n" +
				"               AND pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) limit 1;  \n" +
				"			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN  \n" +
				"				/* Get More than 1 barcode then give validation */  \n" +
				"				IF (v_barcode_count > 1) THEN  \n" +
				"					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
				"					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
				"  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
				"					('Multiple barcode template found.',9,@multiple_barcode_string);  \n" +
				"  \n" +
				"					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
				"					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
				"					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"				ELSE  \n" +
				"					SET pBarcodeID = v_barcode_id;  \n" +
				"				END IF;  \n" +
				"			END IF;  \n" +
				"		ELSE  \n" +
				"			/* Get data from barcode id */  \n" +
				"			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;  \n" +
				"		END IF;  \n" +
				"  \n" +
				"		/* If data not get from barcode then concat none in label string find in table */  \n" +
				"		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN  \n" +
				"			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);  \n" +
				"			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name  \n" +
				"			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
				"			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
				"			SET pBarcodeID = v_barcode_id;  \n" +
				"		END IF;  \n" +
				"  \n" +
				"		IF(barcode_type_id=2)THEN    /* barcode 2D */  \n" +
				"			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID  \n" +
				"			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;  \n" +
				"			SET v_BarcodeType = '2D';  \n" +
				"		ELSE /* barcode 1D */  \n" +
				"			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template  \n" +
				"			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;  \n" +
				"			SET v_BarcodeType = '1D';  \n" +
				"		END IF;  \n" +
				"	END block1;  \n" +
				"  \n" +
				"	/* If error is not found then continue else select error */  \n" +
				"	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
				"		block2: BEGIN  \n" +
				"			-- declare cusrsor barcode match on all barcode template delimiter record found  \n" +
				"			DECLARE  barcodeMatch_cursor CURSOR FOR  \n" +
				"				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter  \n" +
				"				WHERE refbrID = pBarcodeID AND isDeleted = 0;  \n" +
				"			-- declare exit loop if data not found  \n" +
				"			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
				"			-- if any record match found than  check for delimiter and its value  \n" +
				"			IF (pbr_template_ID > 0) THEN  \n" +
				"				-- create temporary table for deliemeter and component dataelement  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;  \n" +
				"				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(  \n" +
				"					pentityId INT,  \n" +
				"					pdataElementId INT,  \n" +
				"					pdelimiter_value VARCHAR(200)  \n" +
				"				);  \n" +
				"				-- create temporary table for separator string values  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;  \n" +
				"				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));  \n" +
				"  \n" +
				"				-- prefix length and suffix lenght to get actual string  \n" +
				"				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength  \n" +
				"				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;  \n" +
				"				-- open cursor  \n" +
				"				OPEN barcodeMatch_cursor;  \n" +
				"				-- set str label as whereclause  \n" +
				"				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter  \n" +
				"				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");  \n" +
				"				-- if prefix is found than remove those from actual string match  \n" +
				"				IF(IFNULL(@pprefixlength,0) > 0) THEN  \n" +
				"					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));  \n" +
				"					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));  \n" +
				"				 END IF;  \n" +
				"  \n" +
				"				-- if suffix is found than remove those from actual string match  \n" +
				"				 IF(IFNULL(@psuffixlength,0) > 0) THEN  \n" +
				"					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
				"					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
				"				 END IF;  \n" +
				"				-- insert all values after seprator split  \n" +
				"				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");  \n" +
				"				PREPARE stmt1 FROM @SQL;  \n" +
				"				EXECUTE stmt1;  \n" +
				"				DEALLOCATE PREPARE stmt1;  \n" +
				"				IF (pCategory = 'P') THEN  \n" +
				"					-- create dynamic query to insert in packing slip  \n" +
				"					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';  \n" +
				"				ELSE  \n" +
				"					-- create dynamic query to insert in recieving material  \n" +
				"					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';  \n" +
				"				END IF;  \n" +
				"  \n" +
				"  \n" +
				"				-- loop item till all records found in string match of barcode template  \n" +
				"				barcodeMatch_loop:LOOP  \n" +
				"					-- get all five selected values  \n" +
				"					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;  \n" +
				"					-- exit loop if no record found for barcode match  \n" +
				"					IF exit_loop THEN  \n" +
				"						CLOSE barcodeMatch_cursor;  \n" +
				"						LEAVE barcodeMatch_loop;  \n" +
				"					END IF;  \n" +
				"					-- dynamic query to get dellimeter string with values from string  \n" +
				"					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');  \n" +
				"					PREPARE stmtdelimiter FROM @sqlGetdelimiter;  \n" +
				"					EXECUTE stmtdelimiter;  \n" +
				"					DEALLOCATE PREPARE stmtdelimiter;  \n" +
				"  \n" +
				"					-- get delimiter values from string  \n" +
				"					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));  \n" +
				"					-- check for field type is static or dynamic  \n" +
				"					-- if static field than check for mfg code and mfg part number  \n" +
				"					IF v_fieldType = 0  THEN  \n" +
				"						-- component_sid_stock  \n" +
				"						-- get static field name from barcode table delimiter data element id  \n" +
				"						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);  \n" +
				"						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys  \n" +
				"						IF(StaticField=\"scanmfgpn\") THEN  \n" +
				"							SET MFG_Part_No = delimiter_value_data;  \n" +
				"							/* If component id is not found */  \n" +
				"							IF(pComponentID = 0)  \n" +
				"                            THEN  \n" +
				"								/* Get component data */  \n" +
				"								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;  \n" +
				"								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS  \n" +
				"								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM  \n" +
				"								(  \n" +
				"									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 	component c  \n" +
				"									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
				"									UNION  \n" +
				"									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 		component_otherpn co  \n" +
				"									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0  \n" +
				"									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0  \n" +
				"								) a  \n" +
				"								UNION  \n" +
				"								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM  \n" +
				"								(  \n" +
				"									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 	component c  \n" +
				"									WHERE 	c.mfgPN=delimiter_value_data AND  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0  \n" +
				"									UNION  \n" +
				"									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 		component_otherpn co  \n" +
				"									LEFT JOIN 	component c ON c.id = co.refComponentID  \n" +
				"									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  \n" +
				"                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0  \n" +
				"								) a  \n" +
				"								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;  \n" +
				"  \n" +
				"								IF (pSupplierID IS NOT NULL) THEN  \n" +
				"									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID  AND s.isCustMapping=0  \n" +
				"								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;  \n" +
				"								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail;  \n" +
				"									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  \n" +
				"								   ELSE  \n" +
				"									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;  \n" +
				"								END IF;  \n" +
				"  \n" +
				"								IF (v_componentCount > 1) THEN  \n" +
				"									/* If component is more that one then remove supplier from list */  \n" +
				"									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;  \n" +
				"									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS  \n" +
				"									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;  \n" +
				"  \n" +
				"									/* After remove supplier if get only one record then  */  \n" +
				"									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;  \n" +
				"									IF (v_componentCount < 2) THEN  \n" +
				"										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
				"											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
				"										FROM 	temp_component_supplier_detail;  \n" +
				"									END IF;  \n" +
				"								ELSE  \n" +
				"									IF (pSupplierID IS NULL) THEN  \n" +
				"										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
				"											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
				"										FROM 	temp_component_detail;  \n" +
				"									ELSE  \n" +
				"										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN  \n" +
				"											SET v_MfrNotFoundForSupplierQuote = 1;  \n" +
				"										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN  \n" +
				"											SET v_componentCount=0;  \n" +
				"											SET v_SupplierQuoteMFRIsNotCustomPart = 1;  \n" +
				"										ELSE  \n" +
				"											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
				"												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
				"											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);  \n" +
				"										END IF;  \n" +
				"									END IF;  \n" +
				"								END IF;  \n" +
				"							ELSE  \n" +
				"                            	/* If component id is found */  \n" +
				"								SELECT 	COUNT(1) INTO v_componentCount  \n" +
				"								FROM 	component  \n" +
				"								WHERE 	id = pComponentID  \n" +
				"                                and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
				"  \n" +
				"							END IF;  \n" +
				"                            /* Remove from cursor if found more that one component */  \n" +
				"							IF v_componentCount > 1 THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"                            SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
				"									INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
				"								FROM 	component  \n" +
				"								WHERE 	id = pComponentID  \n" +
				"							and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
				"  \n" +
				"							/* If inventory is opening inventory and type is assembly */  \n" +
				"							IF(pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* If bad part found */  \n" +
				"							IF (v_isGoodPart != 1) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Check all type of restriction */  \n" +
				"							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Check all type of restriction with packaging */  \n" +
				"							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Barcode MFR and Part MFR mismatch */  \n" +
				"							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN  \n" +
				"								SET BarcodeMFGMatch = 'Mismatch';  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Found DIST then set id of MFR of that DIST */  \n" +
				"							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
				"							IF (@MFGType = 'DIST') THEN  \n" +
				"								SET v_SupplierID = v_componentId;  \n" +
				"								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Check kit allocation */  \n" +
				"							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN  \n" +
				"								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */  \n" +
				"								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;  \n" +
				"								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId  \n" +
				"										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  \n" +
				"								FROM 	(  \n" +
				"										SELECT 	*  \n" +
				"										FROM  \n" +
				"											(  \n" +
				"												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
				"														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId  \n" +
				"												FROM 		component_packagingalias cp  \n" +
				"												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid  \n" +
				"												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id  \n" +
				"												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
				"												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
				"												UNION  \n" +
				"												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
				"														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
				"												FROM 		rfq_lineitems_alternatepart rla  \n" +
				"												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
				"												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0  \n" +
				"												UNION  \n" +
				"												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
				"														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
				"												FROM 		rfq_lineitems_alternatepart rla  \n" +
				"												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
				"												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL  \n" +
				"												#GROUP BY 	custPNID, rla.partID  \n" +
				"											) b  \n" +
				"										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)  \n" +
				"										#GROUP BY b.lineID, b.assyId  \n" +
				"									) a;  \n" +
				"  \n" +
				"								/* BOM line not found  */  \n" +
				"								IF (v_rfqLineItemsID IS NULL) THEN  \n" +
				"									CLOSE barcodeMatch_cursor;  \n" +
				"									LEAVE barcodeMatch_loop;  \n" +
				"								/* Found More then one BOM line */  \n" +
				"								ELSEIF (v_BOMLineCount > 1) THEN  \n" +
				"									CLOSE barcodeMatch_cursor;  \n" +
				"									LEAVE barcodeMatch_loop;  \n" +
				"								ELSE  \n" +
				"									/* Restrict use bom */  \n" +
				"									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN  \n" +
				"										CLOSE barcodeMatch_cursor;  \n" +
				"										LEAVE barcodeMatch_loop;  \n" +
				"									END IF;  \n" +
				"  \n" +
				"									/* BOM line contain any error */  \n" +
				"									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;  \n" +
				"									IF (v_isBOMLineClean = 0) THEN  \n" +
				"										CLOSE barcodeMatch_cursor;  \n" +
				"										LEAVE barcodeMatch_loop;  \n" +
				"									END IF;  \n" +
				"								END IF;  \n" +
				"  \n" +
				"								/* Part not install, purchase and not dnp  */  \n" +
				"								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN  \n" +
				"									CLOSE barcodeMatch_cursor;  \n" +
				"									LEAVE barcodeMatch_loop;  \n" +
				"								END IF;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Set dynamic query for component */  \n" +
				"							IF  v_componentCount = 1 THEN  \n" +
				"								IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
				"									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"');  \n" +
				"								ELSE  \n" +
				"									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
				"									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"');  \n" +
				"								END IF;  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Not in use */  \n" +
				"						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys  \n" +
				"						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for pkgQty */  \n" +
				"						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for lotcode */  \n" +
				"						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for mfrdatecode and datecode */  \n" +
				"						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"							/* SELECT id INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0; Commented by CP - 08-03-2022 */  \n" +
				"							IF (v_dateCodeFormatID IS NOT NULL) THEN  \n" +
				"								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);  \n" +
				"								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');  \n" +
				"							ELSE  \n" +
				"								SET exit_loop = FALSE;  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for binid */  \n" +
				"						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for packaging */  \n" +
				"						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for nickname */  \n" +
				"						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for po number */  \n" +
				"						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for so number */  \n" +
				"						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for packing slip number */  \n" +
				"						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for invoice number */  \n" +
				"						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"					ELSE  \n" +
				"						/* Set dynamic query for other than system generated */  \n" +
				"						SELECT entityID INTO v_entityId FROM dataelement WHERE  \n" +
				"							dataElementID=v_dataElementId AND isDeleted = 0;  \n" +
				"						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)  \n" +
				"							VALUES (v_entityId,v_dataElementId,delimiter_value_data);  \n" +
				"					END IF;  \n" +
				"				END LOOP barcodeMatch_loop;  \n" +
				"  \n" +
				"				-- check if mfg and component both found than  \n" +
				"				IF v_componentCount = 0 AND pSupplierID IS NULL THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
				"				ELSEIF (v_componentCount > 1) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);  \n" +
				"				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);  \n" +
				"				ELSEIF(v_isGoodPart != 1) THEN  \n" +
				"					IF (v_isGoodPart = 2) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
				"					ELSE  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);  \n" +
				"				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"					IF (v_isCPNFlag = 1) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
				"					ELSE  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN  \n" +
				"				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN  \n" +
				"				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN  \n" +
				"				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);  \n" +
				"				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);  \n" +
				"				ELSEIF (v_componentCount = 1 AND  pInventoryType = 'NI' AND pIsFromUID = 1) THEN  \n" +
				"					SELECT COUNT(1) INTO v_pendingPartCount FROM vu_umid_creation_pending WHERE BalanceQty > 0 AND PartId = v_componentId AND BinID = pBinID;  \n" +
				"                    IF(v_pendingPartCount = 0) THEN  \n" +
				"						SELECT b.Name INTO @binName FROM binmst b WHERE b.id = pBinID;  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('<b>', v_PIDCode ,'</b> does not belong to the bin <b>', @binName ,'</b>. Review Pending UMID list should further investigation required.'),24,v_PIDCode);  \n" +
				"                    ELSEIF(v_pendingPartCount = 1) THEN  \n" +
				"						SELECT  ps.packingSlipModeStatus,  vu.receivedStatus, vu.packingSlipNumber, b.Name,  fun_getPackagingNameByID(vu.packagingID) AS packagingType  \n" +
				"								INTO @packingSlipModeStatus, @receivedStatus, @packingSlipNumber, @binName, @packagingType  \n" +
				"						FROM vu_umid_creation_pending vu  \n" +
				"                                INNER JOIN	packing_slip_material_receive ps on ps.id = vu.packingSlipID AND ps.isdeleted = 0  \n" +
				"                                INNER JOIN 	binmst b on b.id = vu.BinID AND b.isdeleted = 0  \n" +
				"								WHERE 		vu.BalanceQty > 0 AND vu.PartId = v_componentId AND vu.BinID = pBinID;  \n" +
				"						IF(@packingSlipModeStatus = 'D') THEN  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as packing slip# <b>', @packingSlipNumber ,'</b> is in <b>Draft</b> mode for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),25,v_PIDCode);  \n" +
				"                        ELSEIF(@receivedStatus = 'R' OR @receivedStatus = 'P') THEN  \n" +
				"							SET @receivedStatusValue = IF(@receivedStatus = 'P', 'Pending', 'Rejected');  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as line received status of packing slip# <b>', @packingSlipNumber ,'</b> is <b>',@receivedStatusValue,'</b> for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),26,v_PIDCode);  \n" +
				"                        END IF;  \n" +
				"                    END IF;  \n" +
				"                ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN  \n" +
				"					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;  \n" +
				"					IF @Mfgmatched = 0  THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				ELSE  \n" +
				"					IF @mfgCount = 0 THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"  \n" +
				"					IF  @mfgCount = 0 AND v_componentCount=0  THEN  \n" +
				"						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				END IF;  \n" +
				"				IF (pCPN = 1) THEN  \n" +
				"					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;  \n" +
				"					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;  \n" +
				"					IF (@codeFromPart != @codeFromMfg) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"  \n" +
				"					IF (@isCPNPart != 1) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				END IF;  \n" +
				"				IF (pIsFromUID = 1) THEN  \n" +
				"					/* If not fire any validation */  \n" +
				"					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
				"						-- must call statements in sequence  \n" +
				"						/* Add component sid stock in temp table of stock table and add in temp table */  \n" +
				"						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');  \n" +
				"                        PREPARE stmt1 FROM @SQL1;  \n" +
				"						EXECUTE stmt1;  \n" +
				"						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel );  \n" +
				"  \n" +
				"						IF (pprefix IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',prefix=','\"',pprefix,'\"');  \n" +
				"                        END IF;  \n" +
				"  \n" +
				"						IF (pnickName IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pRefCpnMfgID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pCustomerID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pAssyID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pReceiveMaterialType IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (v_SupplierID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						SET @sql2 = UpdateValue;  \n" +
				"						PREPARE stmt2 FROM @SQL2;  \n" +
				"						EXECUTE stmt2;  \n" +
				"						DEALLOCATE PREPARE stmt2;  \n" +
				"  \n" +
				"						/* Add success result in save error table */  \n" +
				"						IF (pkitAssemblyID IS NULL) THEN  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
				"						ELSE  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));  \n" +
				"						END IF;  \n" +
				"						/* Add data in table of delimeter table */  \n" +
				"						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN  \n" +
				"							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)  \n" +
				"							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t;  \n" +
				"						END IF;  \n" +
				"						/* select detail of error table */  \n" +
				"						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"  \n" +
				"						/* select detail in temp table of component sid stock table  */  \n" +
				"						SELECT * FROM temp_Component_Sid_Stock;  \n" +
				"						/* Select data of component */  \n" +
				"						SELECT 	c.*,  \n" +
				"							fun_getDateCodeFormatById(c.dateCodeFormatID) dateCodeFormat,  \n" +
				"							mg.mfgcode AS mfgCode,  \n" +
				"							mg.mfgName AS mfgName,  \n" +
				"                            fun_GetFormattedMfgCode(mg.mfgCode, mg.mfgName, v_mfgNameFormat) mfgCodeName,  \n" +
				"							cp.name AS packagingName,  \n" +
				"							cp.sourceName,  \n" +
				"							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
				"							csup.packageQty AS supplierPkgQty,  \n" +
				"                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
				"							csup.mfgcodeID AS supplierMfgId,  \n" +
				"							mcm.mfgcode AS supplierMFGCode,  \n" +
				"							mcm.mfgName AS supplierMFGName,  \n" +
				"                            fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) supplierMFGCodeName,  \n" +
				"							csup.mfgPN AS supplierMFGPN,  \n" +
				"							csup.packagingID AS supplierPackagingId,  \n" +
				"                            csp.name AS supplierPackagingName,  \n" +
				"							csp.sourceName AS supplierSourceName,  \n" +
				"							csup.minimum AS supplierMinimum,  \n" +
				"							ccpn.id AS cpnID,  \n" +
				"							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
				"							rfqroh.rohsIcon AS rohsIcon,  \n" +
				"							rfqroh.name AS rohsName,  \n" +
				"							rfqmou.name AS mountingTypeName,  \n" +
				"                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
				"							um.unitName AS uomName,  \n" +
				"							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
				"							fun_getDateCodeFormatById(mg.dateCodeFormatID) AS mfg_dateCodeFormat,  \n" +
				"							mg.dateCodeFormatID AS mfg_dateCodeFormatId,  \n" +
				"							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
				"						FROM component AS c  \n" +
				"						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
				"						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
				"						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
				"						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
				"						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
				"						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
				"                        LEFT JOIN component_packagingmst cp on cp.id = c.packagingID AND cp.isdeleted = 0  \n" +
				"                        LEFT JOIN component_packagingmst csp on csp.id = csup.packagingID AND csp.isdeleted = 0  \n" +
				"						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
				"						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
				"						WHERE c.id = v_componentId;  \n" +
				"  \n" +
				"						/* select data of data element of component sid stock */  \n" +
				"						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`  \n" +
				"						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv  \n" +
				"						LEFT OUTER JOIN `dataelement` AS dl  \n" +
				"						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;  \n" +
				"						/* select data of cpn */  \n" +
				"						SELECT 	id, refComponentID, refCPNPartID  \n" +
				"						FROM 	component_cust_alias_rev_pn  \n" +
				"						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;  \n" +
				"  \n" +
				"						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
				"							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0  \n" +
				"						) AND isDeleted = 0;  \n" +
				"  \n" +
				"						/* select detail of bom */  \n" +
				"						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,  \n" +
				"								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN  \n" +
				"						FROM 		rfq_lineitems_alternatepart rla  \n" +
				"						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
				"						WHERE 		rla.isDeleted = 0  \n" +
				"									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))  \n" +
				"									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)  \n" +
				"									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);  \n" +
				"  \n" +
				"					ELSE  \n" +
				"						/* Found any error then select error  */  \n" +
				"						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"					END IF;  \n" +
				"				ELSEIF(v_isGoodPart != 1) THEN  \n" +
				"					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"				ELSE  \n" +
				"					/* generate dynamic query and save in temp in case of packing slip */  \n" +
				"					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
				"						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');  \n" +
				"						PREPARE stmt1 FROM @SQL1;  \n" +
				"						EXECUTE stmt1;  \n" +
				"						DEALLOCATE PREPARE stmt1;  \n" +
				"					END IF;  \n" +
				"  \n" +
				"					/* Add success data in temp error table */  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
				"  \n" +
				"					/* Add success data in temp table for select in case of call from packing slip packing slip screen */  \n" +
				"					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
				"					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
				"					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */  \n" +
				"					IF (pCategory = 'M') THEN  \n" +
				"						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
				"						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
				"						SELECT 	c.*,  \n" +
				"							fun_getDateCodeFormatById(c.dateCodeFormatID) dateCodeFormat,  \n" +
				"							fun_GetFormattedMfgCode(mg.mfgCode, mg.mfgName, v_mfgNameFormat) mfgCodeName,  \n" +
				"							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
				"							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
				"							csup.packageQty AS supplierPkgQty,  \n" +
				"                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
				"							csup.mfgcodeID AS supplierMfgId,  \n" +
				"							mcm.mfgcode AS supplierMFGCode,  \n" +
				"							mcm.mfgName AS supplierMFGName,  \n" +
				"                            fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) supplierMFGCodeName,  \n" +
				"							csup.packagingID AS supplierPackagingId,  \n" +
				"							csup.mfgPN AS supplierMFGPN,  \n" +
				"							csup.id AS supplierMFGPNID,  \n" +
				"							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,  \n" +
				"							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,  \n" +
				"							ccpn.id AS cpnID,  \n" +
				"							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
				"							rfqroh.rohsIcon AS rohsIcon,  \n" +
				"							rfqroh.name AS rohsName,  \n" +
				"							rfqmou.name AS mountingTypeName,  \n" +
				"                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
				"							um.unitName AS uomName,  \n" +
				"							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
				"							fun_getDateCodeFormatById(mg.dateCodeFormatID) AS mfg_dateCodeFormat,  \n" +
				"							mg.dateCodeFormatID AS mfg_dateCodeFormatId,  \n" +
				"							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
				"						FROM component AS c  \n" +
				"						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
				"						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
				"						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
				"						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
				"						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
				"						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
				"						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
				"						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
				"						WHERE c.id = v_componentId;  \n" +
				"					END IF;  \n" +
				"				END IF;  \n" +
				"			ELSE  \n" +
				"				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
				"					('Barcode template does not exist, Please add template',0,MFG_Part_No);  \n" +
				"  \n" +
				"				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
				"				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
				"				SELECT 1;  \n" +
				"  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
				"				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
				"				SELECT 1;  \n" +
				"			END IF;  \n" +
				"  \n" +
				"		END block2;  \n" +
				"	ELSE  \n" +
				"		IF (pIsFromUID = 1) THEN  \n" +
				"			SELECT * FROM tempUIDSuccessDetail;  \n" +
				"		ELSE  \n" +
				"			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
				"			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
				"			SELECT 1;  \n" +
				"		END IF;  \n" +
				"	END IF;  \n" +
				"END;  \n" +
			  /* **************************** Add Script Version -> 17-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_plan_kit_report` ;  \n" +
				"CREATE VIEW `vu_plan_kit_report` AS  \n" +
				"SELECT `k`.`id` AS `id`,`k`.`plannKitNumber` AS `plannKitNumber`,`k`.`salesOrderDetID` AS `salesOrderDetID`,`k`.`salesOrderNumber` AS `salesOrderNumber`,`k`.`poNumber` AS `poNumber`,`k`.`refAssyId` AS `refAssyId`,`k`.`assyPIDCode` AS `assyPIDCode`,`k`.`assyNickName` AS `assyNickName`,`k`.`assyMFRPN` AS `assyMFRPN`,`k`.`subAssyID` AS `subAssyID`,`k`.`subAssyPIDCode` AS `subAssyPIDCode`,`k`.`subAssyNickName` AS `subAssyNickName`,`k`.`subAssyMFRPN` AS `subAssyMFRPN`,`k`.`poQty` AS `poQty`,`k`.`mrpQty` AS `mrpQty`,`k`.`kitQty` AS `kitQty`,`k`.`kitNumber` AS `kitNumber`,`k`.`planPOQty` AS `planPOQty`,`k`.`kitReleaseQty` AS `kitReleaseQty`,`k`.`poDueDate` AS `poDueDate`,`k`.`mfrLeadTime` AS `mfrLeadTime`,`k`.`kitReleaseDate` AS `kitReleaseDate`,`k`.`materialDockDate` AS `materialDockDate`,`k`.`releaseKitNumber` AS `releaseKitNumber`,`k`.`actualKitReleaseDate` AS `actualKitReleaseDate`,`k`.`releasedBy` AS `releasedBy`,`k`.`releasedByName` AS `releasedByName`,`k`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,`k`.`woID` AS `woID`,`k`.`workorderNumber` AS `workorderNumber`,`k`.`releasedNote` AS `releasedNote`,`k`.`kitStatus` AS `kitStatus`,`k`.`kitReturnStatus` AS `kitReturnStatus`,`k`.`kitReturnDate` AS `kitReturnDate`,`k`.`refPlanId` AS `refPlanId`,`k`.`totalPlanKitQty` AS `totalPlanKitQty`,`k`.`kitFeasibility` AS `kitFeasibility`,`k`.`perJobShortage` AS `perJobShortage`,(CASE WHEN (`k`.`totalPlanKitQty` > `k`.`kitFeasibility`) THEN (CASE WHEN ((`k`.`kitReleaseQty` - (`k`.`totalPlanKitQty` - `k`.`kitFeasibility`)) > 0) THEN (`k`.`kitReleaseQty` - (`k`.`totalPlanKitQty` - `k`.`kitFeasibility`)) ELSE 0 END) ELSE `k`.`kitReleaseQty` END) AS `buildFeasibilityRealTime`,(CASE WHEN (`k`.`totalPlanKitQty` > `k`.`kitFeasibility`) THEN (CASE WHEN ((`k`.`kitReleaseQty` - (`k`.`totalPlanKitQty` - `k`.`kitFeasibility`)) > 0) THEN (`k`.`kitReleaseQty` - (`k`.`kitReleaseQty` - (`k`.`totalPlanKitQty` - `k`.`kitFeasibility`))) ELSE `k`.`kitReleaseQty` END) ELSE (`k`.`kitReleaseQty` - `k`.`kitReleaseQty`) END) AS `shortageQty` FROM (SELECT `a`.`id` AS `id`,`a`.`plannKitNumber` AS `plannKitNumber`,`a`.`salesOrderDetID` AS `salesOrderDetID`,`s`.`salesOrderNumber` AS `salesOrderNumber`,`s`.`poNumber` AS `poNumber`,`a`.`refAssyId` AS `refAssyId`,`c`.`PIDCode` AS `assyPIDCode`,`c`.`nickName` AS `assyNickName`,`c`.`mfgPN` AS `assyMFRPN`,`a`.`subAssyID` AS `subAssyID`,`sc`.`PIDCode` AS `subAssyPIDCode`,`sc`.`nickName` AS `subAssyNickName`,`sc`.`mfgPN` AS `subAssyMFRPN`,`sd`.`qty` AS `poQty`,`sd`.`mrpQty` AS `mrpQty`,`sd`.`kitQty` AS `kitQty`,(CASE WHEN (`a`.`subAssyID` IS NOT NULL) THEN CONCAT(`sd`.`kitNumber`,'+',`sc`.`PIDCode`) ELSE `sd`.`kitNumber` END) AS `kitNumber`,`a`.`planPOQty` AS `planPOQty`,`a`.`kitReleaseQty` AS `kitReleaseQty`,`a`.`poDueDate` AS `poDueDate`,`a`.`mfrLeadTime` AS `mfrLeadTime`,`a`.`kitReleaseDate` AS `kitReleaseDate`,`a`.`materialDockDate` AS `materialDockDate`,`a`.`releaseKitNumber` AS `releaseKitNumber`,`a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,`a`.`releasedBy` AS `releasedBy`,`FUN_GETUSERNAMEBYID`(`a`.`releasedBy`) AS `releasedByName`,`a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,`a`.`woID` AS `woID`,`FUN_GETWORKORDERNUMBERBYID`(`a`.`woID`) AS `workorderNumber`,`a`.`releasedNote` AS `releasedNote`,(CASE WHEN (`a`.`kitStatus` = 'R') THEN 'Released' WHEN (`a`.`kitStatus` = 'P') THEN 'In Progress' ELSE '-' END) AS `kitStatus`,(CASE WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN `a`.`kitReturnStatus` WHEN (`a`.`kitStatus` = 'R') THEN 'NR' ELSE 'NA' END) AS `kitReturnStatus`,`a`.`kitReturnDate` AS `kitReturnDate`,`a`.`refPlanId` AS `refPlanId`,`a`.`totalPlanKitQty` AS `totalPlanKitQty`,`FUN_GETTOTALKITFEASIBILITY`(`a`.`salesOrderDetID`,IFNULL(`a`.`subAssyID`,`a`.`refAssyId`)) AS `kitFeasibility`,`FUN_GETTOTALSHORTAGELINEOFPLANFORREPORT`(`a`.`salesOrderDetID`,IFNULL(`a`.`subAssyID`,`a`.`refAssyId`),`a`.`totalPlanKitQty`) AS `perJobShortage` FROM (((((SELECT `s`.`id` AS `id`,`s`.`plannKitNumber` AS `plannKitNumber`,`s`.`salesOrderDetID` AS `salesOrderDetID`,`s`.`refAssyId` AS `refAssyId`,`s`.`subAssyID` AS `subAssyID`,`s`.`poQty` AS `planPOQty`,`s`.`kitReleaseQty` AS `kitReleaseQty`,`s`.`poDueDate` AS `poDueDate`,`s`.`mfrLeadTime` AS `mfrLeadTime`,`s`.`kitReleaseDate` AS `kitReleaseDate`,`s`.`materialDockDate` AS `materialDockDate`,`s`.`releaseKitNumber` AS `releaseKitNumber`,`s`.`actualKitReleaseDate` AS `actualKitReleaseDate`,`s`.`releasedBy` AS `releasedBy`,`s`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,`s`.`woID` AS `woID`,`s`.`releasedNote` AS `releasedNote`,`s`.`kitStatus` AS `kitStatus`,`s`.`kitReturnStatus` AS `kitReturnStatus`,`s`.`kitReturnDate` AS `kitReturnDate`,`s`.`refPlanId` AS `refPlanId`,SUM(`s`.`kitReleaseQty`) OVER (PARTITION BY `s`.`salesOrderDetID` ORDER BY `s`.`plannKitNumber` )  AS `totalPlanKitQty` FROM `salesorder_plan_detailsmst` `s` WHERE (`s`.`isDeleted` = 0) UNION ALL SELECT `s`.`id` AS `id`,`s`.`plannKitNumber` AS `plannKitNumber`,`s`.`salesOrderDetID` AS `salesOrderDetID`,`s`.`refAssyId` AS `refAssyId`,`kassy`.`partId` AS `subAssyID`,(`kassy`.`perAssyBuildQty` * `s`.`poQty`) AS `planPOQty`,(`kassy`.`perAssyBuildQty` * `s`.`kitReleaseQty`) AS `kitReleaseQty`,`s`.`poDueDate` AS `poDueDate`,`s`.`mfrLeadTime` AS `mfrLeadTime`,`s`.`kitReleaseDate` AS `kitReleaseDate`,`s`.`materialDockDate` AS `materialDockDate`,(CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseKitNumber` ELSE NULL END) AS `releaseKitNumber`,(CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`actualKitReleaseDate` ELSE NULL END) AS `actualKitReleaseDate`,(CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedBy` ELSE NULL END) AS `releasedBy`,(CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseTimeFeasibility` ELSE NULL END) AS `releaseTimeFeasibility`,(CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`woID` ELSE NULL END) AS `woID`,(CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedNote` ELSE NULL END) AS `releasedNote`,(CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitStatus` ELSE 'P' END) AS `kitStatus`,(CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnStatus` ELSE NULL END) AS `kitReturnStatus`,(CASE WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnDate` ELSE NULL END) AS `kitReturnDate`,`s`.`refPlanId` AS `refPlanId`,SUM((`kassy`.`perAssyBuildQty` * `s`.`kitReleaseQty`)) OVER (PARTITION BY `s`.`salesOrderDetID` ORDER BY `s`.`plannKitNumber` )  AS `totalPlanKitQty` FROM (`kit_allocation_assy_detail` `kassy` LEFT JOIN `salesorder_plan_detailsmst` `s` ON(((`s`.`salesOrderDetID` = `kassy`.`refSalesOrderDetID`) AND (`s`.`subAssyID` IS NULL)))) WHERE ((`kassy`.`isDeleted` = 0) AND (`kassy`.`bomAssyLevel` = 1) AND EXISTS(SELECT 'Y' FROM `salesorder_plan_detailsmst` `sp` WHERE ((`sp`.`isDeleted` = 0) AND (`sp`.`refPlanId` = `s`.`id`) AND (`kassy`.`partId` = `sp`.`subAssyID`))) IS FALSE)) `a` JOIN `salesorderdet` `sd` ON(((`a`.`salesOrderDetID` = `sd`.`id`) AND (`sd`.`partCategory` = 3)))) JOIN `salesordermst` `s` ON((`sd`.`refSalesOrderID` = `s`.`id`))) JOIN `vu_component_mpn` `c` ON((`a`.`refAssyId` = `c`.`id`))) LEFT JOIN `vu_component_mpn` `sc` ON((`a`.`subAssyID` = `sc`.`id`))) WHERE ((`a`.`salesOrderDetID` IS NOT NULL) AND (`a`.`refAssyId` IS NOT NULL)) ORDER BY `a`.`salesOrderDetID`,`a`.`refAssyId`,`a`.`subAssyID`) `k`;  \n" +
			  /* **************************** Add Script Version -> 17-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_salesorder_shipped_report` ;  \n" +
				"CREATE VIEW `vu_salesorder_shipped_report` AS  \n" +
				"    SELECT  \n" +
				"        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
				"        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
				"        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
				"        `a`.`poNumber` AS `Po Number`,  \n" +
				"        `a`.`poDate` AS `Po Date`,  \n" +
				"        `a`.`customerID` AS `Customer ID`,  \n" +
				"        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
				"        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
				"        `a`.`status` AS `Sales Order Status`,  \n" +
				"        `a`.`revision` AS `Revision`,  \n" +
				"        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
				"        `a`.`termsID` AS `Terms ID`,  \n" +
				"        `a`.`soDate` AS `So Date`,  \n" +
				"        `a`.`partID` AS `PartID`,  \n" +
				"        `a`.`PIDCode` AS `Assy ID`,  \n" +
				"        `a`.`mfgPN` AS `Assy Name`,  \n" +
				"        `a`.`rev` AS `Assy Revision`,  \n" +
				"        `a`.`nickName` AS `NickName`,  \n" +
				"        `a`.`liveVersion` AS `liveVersion`,  \n" +
				"        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
				"        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
				"        `a`.`qty` AS `PO Qty`,  \n" +
				"        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
				"        `a`.`shippingQty` AS `shippingQty`,  \n" +
				"        `a`.`companyCode` AS `Company Code`,  \n" +
				"        `a`.`companyMfgName` AS `companyMfgName`,  \n" +
				"        `a`.`companyName` AS `Company Name`,  \n" +
				"        `a`.`fullName` AS `Full Name`,  \n" +
				"        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
				"        `a`.`isCancle` AS `isCancle`,  \n" +
				"        `a`.`cancleReason` AS `cancleReason`,  \n" +
				"        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
				"        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
				"        `a`.`shippingDate` AS `shippingDate`,  \n" +
				"        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
				"        `a`.`remark` AS `remark`,  \n" +
				"        `a`.`price` AS `price`,  \n" +
				"        `a`.`mrpQty` AS `mrpQty`,  \n" +
				"        `a`.`kitQty` AS `kitQty`,  \n" +
				"        `a`.`isHotJob` AS `isHotJob`,  \n" +
				"        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
				"        `a`.`RoHSName` AS `RoHSName`,  \n" +
				"        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
				"        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
				"            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
				"            ELSE 'In Progress'  \n" +
				"        END) AS `Status`,  \n" +
				"        `a`.`modifyDate` AS `modifyDate`,  \n" +
				"        `a`.`createdDate` AS `createdDate`,  \n" +
				"        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
				"        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
				"        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
				"        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
				"        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
				"        `a`.`kitNumber` AS `kitNumber`,  \n" +
				"        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
				"        `a`.`lineID` AS `lineID`,  \n" +
				"        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
				"        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
				"        `a`.`isLegacyPOText` AS `IsLegacyPOText`,  \n" +
				"        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
				"        `a`.`isRmaPOText` AS `isRmaPOText`,  \n" +
				"        `a`.`specialNote` AS `AssySpecialNote`,  \n" +
				"        `a`.`refBlanketPOID` AS `refBlanketPOID`  \n" +
				"    FROM  \n" +
				"        (SELECT  \n" +
				"            `sm`.`id` AS `salesOrderId`,  \n" +
				"                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
				"                `sm`.`poNumber` AS `poNumber`,  \n" +
				"                `sm`.`poDate` AS `poDate`,  \n" +
				"                `sm`.`customerID` AS `customerID`,  \n" +
				"                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
				"                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
				"                `sm`.`status` AS `status`,  \n" +
				"                `sm`.`revision` AS `revision`,  \n" +
				"                `sm`.`shippingComment` AS `shippingComment`,  \n" +
				"                `sm`.`termsID` AS `termsID`,  \n" +
				"                `sm`.`soDate` AS `soDate`,  \n" +
				"                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
				"                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
				"                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
				"                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
				"                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
				"                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
				"                (SELECT  \n" +
				"                        1  \n" +
				"                    FROM  \n" +
				"                        `workorder_salesorder_details` `x`  \n" +
				"                    WHERE  \n" +
				"                        ((`x`.`salesOrderDetailID` = `a`.`id`)  \n" +
				"                            AND (`x`.`isDeleted` = 0))  \n" +
				"                    LIMIT 1) AS `wosalesOrderDetail`,  \n" +
				"                `co`.`PIDCode` AS `PIDCode`,  \n" +
				"                `co`.`mfgPN` AS `mfgPN`,  \n" +
				"                `co`.`rev` AS `rev`,  \n" +
				"                `co`.`nickName` AS `nickName`,  \n" +
				"                `co`.`liveVersion` AS `liveVersion`,  \n" +
				"                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
				"                `co`.`isCustom` AS `isCustomPart`,  \n" +
				"                `cu`.`mfgCode` AS `companyCode`,  \n" +
				"                `cu`.`mfgName` AS `companyMfgName`,  \n" +
				"                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
				"                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
				"                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
				"                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
				"                `roh`.`name` AS `RoHSName`,  \n" +
				"                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
				"                `a`.`qty` AS `qty`,  \n" +
				"                `a`.`id` AS `salesOrderDetailId`,  \n" +
				"                `a`.`kitNumber` AS `kitNumber`,  \n" +
				"                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
				"                `a`.`partID` AS `partID`,  \n" +
				"                `a`.`isCancle` AS `isCancle`,  \n" +
				"                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
				"                `a`.`isHotJob` AS `isHotJob`,  \n" +
				"                `a`.`cancleReason` AS `cancleReason`,  \n" +
				"                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
				"                (SELECT  \n" +
				"                        MIN(`ssm`.`shippingDate`)  \n" +
				"                    FROM  \n" +
				"                        `salesshippingmst` `ssm`  \n" +
				"                    WHERE  \n" +
				"                        ((`ssm`.`sDetID` = `a`.`id`)  \n" +
				"                            AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
				"                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
				"                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
				"                `a`.`remark` AS `remark`,  \n" +
				"                `a`.`price` AS `price`,  \n" +
				"                `a`.`mrpQty` AS `mrpQty`,  \n" +
				"                `a`.`kitQty` AS `kitQty`,  \n" +
				"                `a`.`shippingQty` AS `shippingQty`,  \n" +
				"                `a`.`refBlanketPOID` AS `refBlanketPOID`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`sm`.`blanketPOOption` = 2) THEN IFNULL(`bpo`.`bshipQty`, 0)  \n" +
				"                    ELSE IFNULL(`bsp`.`shipQty`, 0)  \n" +
				"                END) AS `ShippedQty`,  \n" +
				"                `a`.`lineID` AS `lineID`,  \n" +
				"                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
				"                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
				"                FUN_GETINTTOTEXT(`sm`.`isLegacyPO`) AS `isLegacyPOText`,  \n" +
				"                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
				"                FUN_GETINTTOTEXT(`sm`.`isRmaPO`) AS `isRmaPOText`,  \n" +
				"                `co`.`specialNote` AS `specialNote`  \n" +
				"        FROM  \n" +
				"            ((((((((`salesorderdet` `a`  \n" +
				"        JOIN `salesordermst` `sm` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
				"            AND (IFNULL(`sm`.`isDeleted`, 0) = 0))))  \n" +
				"        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
				"            AND (IFNULL(`cu`.`isDeleted`, 0) = 0))))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            SUM(`cpd`.`shipQty`) AS `shipQty`,  \n" +
				"                `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`  \n" +
				"        FROM  \n" +
				"            (`customer_packingslip_det` `cpd`  \n" +
				"        JOIN `customer_packingslip` `cp` ON ((`cp`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
				"        WHERE  \n" +
				"            ((`cp`.`transType` = 'P')  \n" +
				"                AND (`cpd`.`refSalesorderDetid` IS NOT NULL)  \n" +
				"                AND (`cp`.`isDeleted` = 0)  \n" +
				"                AND (`cpd`.`isDeleted` = 0))  \n" +
				"        GROUP BY `cpd`.`refSalesorderDetid`) `bsp` ON ((`bsp`.`refSalesorderDetid` = `a`.`id`)))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            SUM(`cpd`.`shipQty`) AS `bshipQty`,  \n" +
				"                `sd`.`refBlanketPOID` AS `refBlanketPOID`  \n" +
				"        FROM  \n" +
				"            ((`customer_packingslip_det` `cpd`  \n" +
				"        JOIN `salesorderdet` `sd` ON (((`cpd`.`refSalesorderDetid` = `sd`.`id`)  \n" +
				"            AND (`cpd`.`isDeleted` = 0))))  \n" +
				"        JOIN `customer_packingslip` `cp` ON (((`cp`.`id` = `cpd`.`refCustPackingSlipID`)  \n" +
				"            AND (`cp`.`isDeleted` = 0))))  \n" +
				"        WHERE  \n" +
				"            ((`sd`.`refBlanketPOID` IS NOT NULL)  \n" +
				"                AND (`cp`.`transType` = 'P')  \n" +
				"                AND (`sd`.`isDeleted` = 0))  \n" +
				"        GROUP BY `sd`.`refBlanketPOID`) `bpo` ON ((`bpo`.`refBlanketPOID` = `a`.`id`)))  \n" +
				"        LEFT JOIN `vu_component_mpn` `co` ON (((`a`.`partID` = `co`.`id`)  \n" +
				"            AND (IFNULL(`co`.`isDeleted`, 0) = 0))))  \n" +
				"        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
				"            AND (IFNULL(`roh`.`isDeleted`, 0) = 0))))  \n" +
				"        LEFT JOIN `contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
				"            AND (IFNULL(`cc`.`isDeleted`, 0) = 0))))  \n" +
				"        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
				"            AND (IFNULL(`gc`.`isDeleted`, 0) = 0))))  \n" +
				"        WHERE  \n" +
				"            ((`a`.`isDeleted` = 0)  \n" +
				"                AND (`a`.`partCategory` = 3))) `a`;  \n" +
				/* **************************** Add Script Version -> 17-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_perjob_shortage` ;  \n" +
				"CREATE VIEW `vu_perjob_shortage` AS  \n" +
				"    SELECT  \n" +
				"        `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"        `k`.`soNumber` AS `soNumber`,  \n" +
				"        `k`.`poNumber` AS `poNumber`,  \n" +
				"        `k`.`assyID` AS `assyID`,  \n" +
				"        `k`.`assyNickname` AS `assyNickname`,  \n" +
				"        `k`.`assyPIDCode` AS `assyPIDCode`,  \n" +
				"        (`k`.`kitAllocationTotalLine` - `k`.`notRequireKitAllocationTotalLine`) AS `totalLine`,  \n" +
				"        `k`.`shortageLine` AS `shortageLine`,  \n" +
				"        `k`.`kitAllocationPercentage` AS `kitAllocationPercentage`  \n" +
				"    FROM  \n" +
				"        (SELECT  \n" +
				"            `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"                `s`.`salesOrderNumber` AS `soNumber`,  \n" +
				"                `s`.`poNumber` AS `poNumber`,  \n" +
				"                `k`.`assyID` AS `assyID`,  \n" +
				"                `c`.`nickName` AS `assyNickname`,  \n" +
				"                `c`.`PIDCode` AS `assyPIDCode`,  \n" +
				"                COUNT(1) AS `kitAllocationTotalLine`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`k`.`isNotRequiredKitAllocation` = 1) THEN 1  \n" +
				"                    ELSE 0  \n" +
				"                END)) AS `notRequireKitAllocationTotalLine`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`k`.`shortage` > 0) THEN 1  \n" +
				"                    ELSE 0  \n" +
				"                END)) AS `shortageLine`,  \n" +
				"                ROUND(IFNULL(AVG((CASE  \n" +
				"                    WHEN (`k`.`allocationPer` > 100) THEN 100  \n" +
				"                    ELSE ROUND(IFNULL(`k`.`allocationPer`, 0), 2)  \n" +
				"                END)), 0), 2) AS `kitAllocationPercentage`  \n" +
				"        FROM  \n" +
				"            ((((SELECT  \n" +
				"            `vu_kit_allocation_detail`.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
				"                `vu_kit_allocation_detail`.`assyID` AS `assyID`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedpin`, 0)) / ((`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)) * `vu_kit_allocation_detail`.`bomNumOfPosition`))  \n" +
				"                    ELSE ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedunit`, 0)) / (`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)))  \n" +
				"                END) AS `allocationPer`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN `vu_kit_allocation_detail`.`shortagePins`  \n" +
				"                    ELSE `vu_kit_allocation_detail`.`shortage`  \n" +
				"                END) AS `shortage`,  \n" +
				"                `vu_kit_allocation_detail`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
				"        FROM  \n" +
				"            `vu_kit_allocation_detail`) `k`  \n" +
				"        JOIN `salesorderdet` `sd` ON (((`k`.`refSalesOrderDetID` = `sd`.`id`)  \n" +
				"            AND (`sd`.`partCategory` = 3))))  \n" +
				"        JOIN `salesordermst` `s` ON ((`sd`.`refSalesOrderID` = `s`.`id`)))  \n" +
				"        JOIN `vu_component_mpn` `c` ON ((`k`.`assyID` = `c`.`id`)))  \n" +
				"        GROUP BY `k`.`refSalesOrderDetID`) `k`  \n" +
				"    ORDER BY `k`.`soNumber` , `k`.`poNumber` , `k`.`assyPIDCode`;  \n" +
				/* **************************** Add Script Version -> 17-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
				"CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
				"    SELECT  \n" +
				"        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
				"        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
				"        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
				"        `a`.`poNumber` AS `Po Number`,  \n" +
				"        `a`.`poDate` AS `Po Date`,  \n" +
				"        `a`.`customerID` AS `Customer ID`,  \n" +
				"        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
				"        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
				"        `a`.`status` AS `Sales Order Status`,  \n" +
				"        `a`.`revision` AS `Revision`,  \n" +
				"        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
				"        `a`.`termsID` AS `Terms ID`,  \n" +
				"        `a`.`soDate` AS `So Date`,  \n" +
				"        `a`.`partID` AS `PartID`,  \n" +
				"        `a`.`PIDCode` AS `Assy ID`,  \n" +
				"        `a`.`mfgPN` AS `Assy Name`,  \n" +
				"        `a`.`rev` AS `Assy Revision`,  \n" +
				"        `a`.`custAssyPN` AS `custAssyPN`,  \n" +
				"        `a`.`nickName` AS `NickName`,  \n" +
				"        `a`.`liveVersion` AS `liveVersion`,  \n" +
				"        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
				"        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
				"        `a`.`qty` AS `PO Qty`,  \n" +
				"        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
				"        `a`.`shippingQty` AS `shippingQty`,  \n" +
				"        `a`.`companyName` AS `Company Name`,  \n" +
				"        `a`.`internalPO` AS `internalPO`,  \n" +
				"        `a`.`mfgCode` AS `mfgCode`,  \n" +
				"        `a`.`fullName` AS `Full Name`,  \n" +
				"        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
				"        `a`.`isCancle` AS `isCancle`,  \n" +
				"        `a`.`cancleReason` AS `cancleReason`,  \n" +
				"        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
				"        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
				"        `a`.`shippingDate` AS `shippingDate`,  \n" +
				"        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
				"        `a`.`remark` AS `remark`,  \n" +
				"        `a`.`price` AS `price`,  \n" +
				"        `a`.`mrpQty` AS `mrpQty`,  \n" +
				"        `a`.`kitQty` AS `kitQty`,  \n" +
				"        `a`.`isHotJob` AS `isHotJob`,  \n" +
				"        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
				"        `a`.`RoHSName` AS `RoHSName`,  \n" +
				"        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
				"        `a`.`lineID` AS `lineID`,  \n" +
				"        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
				"        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
				"        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
				"            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
				"            ELSE 'In Progress'  \n" +
				"        END) AS `Status`,  \n" +
				"        `a`.`modifyDate` AS `modifyDate`,  \n" +
				"        `a`.`createdDate` AS `createdDate`,  \n" +
				"        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
				"        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
				"        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
				"        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
				"        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
				"        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
				"        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
				"        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
				"        `a`.`kitnumber` AS `kitnumber`,  \n" +
				"        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
				"        `a`.`partDescription` AS `partDescription`,  \n" +
				"        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
				"        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
				"        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
				"        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
				"        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
				"        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
				"        `a`.`internalComment` AS `internalComment`,  \n" +
				"        `a`.`partCategory` AS `partCategory`,  \n" +
				"        `a`.`serialNumber` AS `serialNumber`,  \n" +
				"        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
				"        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
				"        `a`.`rmaNumber` AS `rmaNumber`,  \n" +
				"        `a`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
				"        `a`.`debitedByCustText` AS `debitedByCustText`,  \n" +
				"        `a`.`rmaOrgPONumber` AS `rmaOrgPONumber`,  \n" +
				"        `a`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
				"        `a`.`isReworkRequired` AS `isReworkRequired`,  \n" +
				"        `a`.`reworkReqText` AS `reworkReqText`,  \n" +
				"        `a`.`reworkPONumber` AS `reworkPONumber`,  \n" +
				"        `a`.`poRevision` AS `poRevision`,  \n" +
				"        `a`.`partType` AS `partType`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
				"            ELSE `a`.`salesOrderDetStatus`  \n" +
				"        END) AS `salesOrderDetStatus`,  \n" +
				"        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
				"        `a`.`frequency` AS `frequency`,  \n" +
				"        `a`.`refSODetID` AS `refSODetID`,  \n" +
				"        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
				"        `a`.`originalPODate` AS `originalPODate`,  \n" +
				"        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
				"        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
				"        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
				"        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
				"        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
				"        `a`.`frequencyType` AS `frequencyType`,  \n" +
				"        `a`.`assignQty` AS `assignQty`,  \n" +
				"        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
				"        `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
				"        `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
				"        `a`.`blanketPOOption` AS `blanketPOOption`,  \n" +
				"        `a`.`blanketPOOptionText` AS `blanketPOOptionText`,  \n" +
				"        `a`.`requestedBPOStartDate` AS `requestedBPOStartDate`,  \n" +
				"        `a`.`blanketPOEndDate` AS `blanketPOEndDate`,  \n" +
				"        `a`.`linkToBlanketPO` AS `linkToBlanketPO`,  \n" +
				"        `a`.`linkToBlanketPOText` AS `linkToBlanketPOText`,  \n" +
				"        `a`.`mfgName` AS `mfgName`  \n" +
				"    FROM  \n" +
				"        (SELECT  \n" +
				"            `sm`.`id` AS `salesOrderId`,  \n" +
				"                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
				"                `sm`.`poNumber` AS `poNumber`,  \n" +
				"                `sm`.`poDate` AS `poDate`,  \n" +
				"                `sm`.`customerID` AS `customerID`,  \n" +
				"                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
				"                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
				"                `sm`.`status` AS `status`,  \n" +
				"                `sm`.`revision` AS `revision`,  \n" +
				"                `sm`.`shippingComment` AS `shippingComment`,  \n" +
				"                `sm`.`termsID` AS `termsID`,  \n" +
				"                `sm`.`soDate` AS `soDate`,  \n" +
				"                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
				"                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
				"                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
				"                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
				"                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
				"                `sm`.`serialNumber` AS `serialNumber`,  \n" +
				"                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
				"                `sm`.`rmaNumber` AS `rmaNumber`,  \n" +
				"                `sm`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`sm`.`isDebitedByCustomer` = 1) THEN 'Yes'  \n" +
				"                    ELSE 'No'  \n" +
				"                END) AS `debitedByCustText`,  \n" +
				"                `sm`.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
				"                `sm`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
				"                `sm`.`isReworkRequired` AS `isReworkRequired`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`sm`.`isReworkRequired` = 1) THEN 'Yes'  \n" +
				"                    ELSE 'No'  \n" +
				"                END) AS `reworkReqText`,  \n" +
				"                `sm`.`reworkPONumber` AS `reworkPONumber`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
				"                    ELSE 'No'  \n" +
				"                END) AS `blanketPOText`,  \n" +
				"                `sm`.`poRevision` AS `poRevision`,  \n" +
				"                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
				"                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
				"                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
				"                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
				"                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
				"                `sm`.`createdAt` AS `createdDate`,  \n" +
				"                `sm`.`updatedAt` AS `modifyDate`,  \n" +
				"                `co`.`PIDCode` AS `PIDCode`,  \n" +
				"                `co`.`mfgPN` AS `mfgPN`,  \n" +
				"                `co`.`rev` AS `rev`,  \n" +
				"                `co`.`nickName` AS `nickName`,  \n" +
				"                `co`.`liveVersion` AS `liveVersion`,  \n" +
				"                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
				"                `co`.`isCustom` AS `isCustomPart`,  \n" +
				"                `co`.`custAssyPN` AS `custAssyPN`,  \n" +
				"                `co`.`partType` AS `partType`,  \n" +
				"                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
				"                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
				"                `cu`.`mfgCode` AS `mfgCode`,  \n" +
				"                `cu`.`mfgName` AS `mfgName`,  \n" +
				"                `cu`.`isCompany` AS `internalPO`,  \n" +
				"                `mg`.`mfgName` AS `manufacturerName`,  \n" +
				"                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
				"                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
				"                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
				"                `roh`.`name` AS `RoHSName`,  \n" +
				"                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
				"                `a`.`qty` AS `qty`,  \n" +
				"                `a`.`id` AS `salesOrderDetailId`,  \n" +
				"                `a`.`kitNumber` AS `kitnumber`,  \n" +
				"                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
				"                `a`.`partDescription` AS `partDescription`,  \n" +
				"                `a`.`partID` AS `partID`,  \n" +
				"                `a`.`isCancle` AS `isCancle`,  \n" +
				"                `a`.`isHotJob` AS `isHotJob`,  \n" +
				"                `a`.`cancleReason` AS `cancleReason`,  \n" +
				"                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
				"                `sh`.`shippingDate` AS `shippingDate`,  \n" +
				"                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
				"                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
				"                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
				"                `a`.`remark` AS `remark`,  \n" +
				"                `a`.`price` AS `price`,  \n" +
				"                `a`.`mrpQty` AS `mrpQty`,  \n" +
				"                `a`.`kitQty` AS `kitQty`,  \n" +
				"                `a`.`shippingQty` AS `shippingQty`,  \n" +
				"                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
				"                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
				"                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
				"                `a`.`internalComment` AS `internalComment`,  \n" +
				"                `a`.`partCategory` AS `partCategory`,  \n" +
				"                `a`.`lineID` AS `lineID`,  \n" +
				"                `sm`.`originalPODate` AS `originalPODate`,  \n" +
				"                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
				"                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
				"                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
				"                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
				"                `soh`.`assignQty` AS `assignQty`,  \n" +
				"                `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
				"                    ELSE 'NO'  \n" +
				"                END) AS `rmaPOText`,  \n" +
				"                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
				"                    ELSE 'NO'  \n" +
				"                END) AS `legacyPOText`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
				"                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
				"                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
				"                    ELSE ''  \n" +
				"                END) AS `frequency`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
				"                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
				"                    ELSE ''  \n" +
				"                END) AS `frequencyType`,  \n" +
				"                `a`.`refSODetID` AS `refSODetID`,  \n" +
				"                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
				"                `a`.`requestedBPOStartDate` AS `requestedBPOStartDate`,  \n" +
				"                `a`.`blanketPOEndDate` AS `blanketPOEndDate`,  \n" +
				"                `sm`.`linkToBlanketPO` AS `linkToBlanketPO`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`sm`.`linkToBlanketPO` = 1) THEN 'Yes'  \n" +
				"                    ELSE 'No'  \n" +
				"                END) AS `linkToBlanketPOText`,  \n" +
				"                IFNULL((CASE  \n" +
				"                    WHEN (`sm`.`blanketPOOption` = 2) THEN `sqt`.`BPOShippedQty`  \n" +
				"                    ELSE `sq`.`ShippedQty`  \n" +
				"                END), 0) AS `ShippedQty`,  \n" +
				"                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
				"                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
				"                `sm`.`blanketPOOption` AS `blanketPOOption`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`sm`.`blanketPOOption` = 1) THEN 'Use This Blanket PO# for All Releases'  \n" +
				"                    WHEN (`sm`.`blanketPOOption` = 2) THEN 'Link Future PO(s) to This Blanket PO'  \n" +
				"                    WHEN (`sm`.`blanketPOOption` = 3) THEN 'Use Blanket PO# and Release# for All Releases'  \n" +
				"                    ELSE ''  \n" +
				"                END) AS `blanketPOOptionText`  \n" +
				"        FROM  \n" +
				"            (((((((((((((`salesordermst` `sm`  \n" +
				"        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
				"            AND (`a`.`isDeleted` = 0)  \n" +
				"            AND (`sm`.`isDeleted` = 0))))  \n" +
				"        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
				"            AND (`cu`.`isDeleted` = 0))))  \n" +
				"        LEFT JOIN `vu_component_mpn` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
				"        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
				"            AND (`mg`.`isDeleted` = 0))))  \n" +
				"        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
				"            AND (`roh`.`isDeleted` = 0))))  \n" +
				"        LEFT JOIN `contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
				"            AND (`cc`.`isDeleted` = 0))))  \n" +
				"        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
				"            AND (`gc`.`isDeleted` = 0))))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            IFNULL(SUM(`sbt`.`ShippedQty`), 0) AS `BPOShippedQty`,  \n" +
				"                `sbt`.`refBlanketPOID` AS `blanketPOSoDetID`  \n" +
				"        FROM  \n" +
				"            (SELECT  \n" +
				"            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
				"                `sdd`.`refBlanketPOID` AS `refBlanketPOID`,  \n" +
				"                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
				"        FROM  \n" +
				"            ((`customer_packingslip_det` `cpd`  \n" +
				"        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
				"        JOIN `salesorderdet` `sdd` ON (((`sdd`.`id` = `cpd`.`refSalesorderDetid`)  \n" +
				"            AND (`sdd`.`isDeleted` = 0))))  \n" +
				"        WHERE  \n" +
				"            ((`cps`.`transType` = 'P')  \n" +
				"                AND (`cpd`.`isDeleted` = 0))  \n" +
				"        GROUP BY `cpd`.`refSalesorderDetid` , `sdd`.`refBlanketPOID`) `sbt`  \n" +
				"        GROUP BY `sbt`.`refBlanketPOID`) `sqt` ON ((`sqt`.`blanketPOSoDetID` = `a`.`id`)))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
				"                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
				"        FROM  \n" +
				"            (`customer_packingslip_det` `cpd`  \n" +
				"        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
				"        WHERE  \n" +
				"            ((`cps`.`transType` = 'P')  \n" +
				"                AND (`cpd`.`isDeleted` = 0))  \n" +
				"        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
				"                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
				"        FROM  \n" +
				"            `workorder_salesorder_details` `x`  \n" +
				"        WHERE  \n" +
				"            (`x`.`isDeleted` = 0)  \n" +
				"        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            `ssm`.`sDetID` AS `sDetID`,  \n" +
				"                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
				"        FROM  \n" +
				"            `salesshippingmst` `ssm`  \n" +
				"        WHERE  \n" +
				"            (`ssm`.`isDeleted` = 0)  \n" +
				"        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
				"                `sod`.`refBlanketPOID` AS `refsalesOrderID`  \n" +
				"        FROM  \n" +
				"            `salesorderdet` `sod`  \n" +
				"        WHERE  \n" +
				"            (`sod`.`isDeleted` = 0)  \n" +
				"        GROUP BY `sod`.`refBlanketPOID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
				"                `s`.`refAssyId` AS `refAssyId`,  \n" +
				"                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
				"                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
				"                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
				"                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
				"        FROM  \n" +
				"            (`salesorder_plan_detailsmst` `s`  \n" +
				"        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
				"        GROUP BY `s`.`salesOrderDetID` , `s`.`refAssyId`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
				"        WHERE  \n" +
				"            (`sm`.`isDeleted` = 0)) `a`;  \n" +
				/* **************************** Add Script Version -> 17-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_perjob_shortage_with_sub_assembly` ;  \n" +
				"CREATE VIEW `vu_perjob_shortage_with_sub_assembly` AS  \n" +
				"    SELECT  \n" +
				"        `y`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"        `y`.`soNumber` AS `soNumber`,  \n" +
				"        `y`.`poNumber` AS `poNumber`,  \n" +
				"        `y`.`assyID` AS `subAssyID`,  \n" +
				"        `y`.`assyNickname` AS `subAssyNickname`,  \n" +
				"        `y`.`assyPIDCode` AS `subAssyPIDCode`,  \n" +
				"        `y`.`mainAssyID` AS `assyID`,  \n" +
				"        (`y`.`kitAllocationTotalLine` - `y`.`notRequireKitAllocationTotalLine`) AS `totalLine`,  \n" +
				"        `y`.`shortageLine` AS `shortageLine`,  \n" +
				"        `y`.`kitAllocationPercentage` AS `kitAllocationPercentage`,  \n" +
				"        FUN_GETASSYNICKNAMEBYID(`y`.`mainAssyID`) AS `assyNickname`,  \n" +
				"        FUN_GETASSYPIDCODEBYID(`y`.`mainAssyID`) AS `assyPIDCode`  \n" +
				"    FROM  \n" +
				"        (SELECT  \n" +
				"            `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"                `k`.`soNumber` AS `soNumber`,  \n" +
				"                `k`.`poNumber` AS `poNumber`,  \n" +
				"                `k`.`assyID` AS `assyID`,  \n" +
				"                `k`.`assyNickname` AS `assyNickname`,  \n" +
				"                `k`.`assyPIDCode` AS `assyPIDCode`,  \n" +
				"                (SELECT  \n" +
				"                        `kit_allocation_assy_detail`.`partId`  \n" +
				"                    FROM  \n" +
				"                        `kit_allocation_assy_detail`  \n" +
				"                    WHERE  \n" +
				"                        ((`kit_allocation_assy_detail`.`refSalesOrderDetID` = `k`.`refSalesOrderDetID`)  \n" +
				"                            AND (`kit_allocation_assy_detail`.`bomAssyLevel` = 0)  \n" +
				"                            AND (`kit_allocation_assy_detail`.`deletedAt` IS NULL))  \n" +
				"                    LIMIT 1) AS `mainAssyID`,  \n" +
				"                `k`.`kitAllocationTotalLine` AS `kitAllocationTotalLine`,  \n" +
				"                `k`.`notRequireKitAllocationTotalLine` AS `notRequireKitAllocationTotalLine`,  \n" +
				"                `k`.`shortageLine` AS `shortageLine`,  \n" +
				"                `k`.`kitAllocationPercentage` AS `kitAllocationPercentage`  \n" +
				"        FROM  \n" +
				"            (SELECT  \n" +
				"            `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"                `s`.`salesOrderNumber` AS `soNumber`,  \n" +
				"                `s`.`poNumber` AS `poNumber`,  \n" +
				"                `k`.`assyID` AS `assyID`,  \n" +
				"                `c`.`nickName` AS `assyNickname`,  \n" +
				"                `c`.`PIDCode` AS `assyPIDCode`,  \n" +
				"                COUNT(1) AS `kitAllocationTotalLine`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`k`.`isNotRequiredKitAllocation` = 1) THEN 1  \n" +
				"                    ELSE 0  \n" +
				"                END)) AS `notRequireKitAllocationTotalLine`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`k`.`shortage` > 0) THEN 1  \n" +
				"                    ELSE 0  \n" +
				"                END)) AS `shortageLine`,  \n" +
				"                ROUND(IFNULL(AVG((CASE  \n" +
				"                    WHEN (`k`.`allocationPer` > 100) THEN 100  \n" +
				"                    ELSE ROUND(IFNULL(`k`.`allocationPer`, 0), 2)  \n" +
				"                END)), 0), 2) AS `kitAllocationPercentage`  \n" +
				"        FROM  \n" +
				"            ((((SELECT  \n" +
				"            `vu_kit_allocation_detail`.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
				"                `vu_kit_allocation_detail`.`assyID` AS `assyID`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedpin`, 0)) / ((`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)) * `vu_kit_allocation_detail`.`bomNumOfPosition`))  \n" +
				"                    ELSE ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedunit`, 0)) / (`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)))  \n" +
				"                END) AS `allocationPer`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN `vu_kit_allocation_detail`.`shortagePins`  \n" +
				"                    ELSE `vu_kit_allocation_detail`.`shortage`  \n" +
				"                END) AS `shortage`,  \n" +
				"                `vu_kit_allocation_detail`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
				"        FROM  \n" +
				"            `vu_kit_allocation_detail`) `k`  \n" +
				"        JOIN `salesorderdet` `sd` ON (((`k`.`refSalesOrderDetID` = `sd`.`id`)  \n" +
				"            AND (`sd`.`partCategory` = 3))))  \n" +
				"        JOIN `salesordermst` `s` ON ((`sd`.`refSalesOrderID` = `s`.`id`)))  \n" +
				"        JOIN `vu_component_mpn` `c` ON ((`k`.`assyID` = `c`.`id`)))  \n" +
				"        GROUP BY `k`.`refSalesOrderDetID` , `k`.`assyID` , `s`.`salesOrderNumber` , `s`.`poNumber` , `c`.`nickName` , `c`.`PIDCode`) `k`  \n" +
				"        ORDER BY `k`.`soNumber` , `k`.`poNumber` , `k`.`assyPIDCode`) `y`;  \n" +
				/* **************************** Add Script Version -> 17-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_deducted_allocation_available_stock` ;  \n" +"CREATE VIEW `vu_deducted_allocation_available_stock` AS  \n" +
				"    SELECT  \n" +
				"        `a`.`id` AS `id`,  \n" +
				"        `a`.`uid` AS `Uid`,  \n" +
				"        `a`.`refcompid` AS `refcompid`,  \n" +
				"        `c`.`noOfPosition` AS `noOfPosition`,  \n" +
				"        `c`.`connecterTypeID` AS `connecterTypeID`,  \n" +
				"        `a`.`pkgUnit` AS `pkgunit`,  \n" +
				"        `b`.`allocatedUnit` AS `allocatedunit`,  \n" +
				"        (`a`.`pkgUnit` - IFNULL(`b`.`allocatedUnit`, 0)) AS `Availablestock`,  \n" +
				"        `c`.`unit` AS `unit`,  \n" +
				"        `c`.`uom` AS `uom`,  \n" +
				"        `a`.`receiveMaterialType` AS `receiveMaterialType`,  \n" +
				"        `a`.`customerID` AS `customerID`,  \n" +
				"        `a`.`customerConsign` AS `customerConsign`  \n" +
				"    FROM  \n" +
				"        ((`component_sid_stock` `a`  \n" +
				"        JOIN `vu_component` `c` ON ((`a`.`refcompid` = `c`.`id`)))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            `css`.`id` AS `id`,  \n" +
				"                SUM(`k`.`allocatedQty`) AS `beforCovertAllocatedUnit`,  \n" +
				"                SUM(FUN_CONVERTUOM(`k`.`allocatedUOM`, `css`.`uom`, `k`.`allocatedUnit`)) AS `allocatedUnit`  \n" +
				"        FROM  \n" +
				"            (`component_sid_stock` `css`  \n" +
				"        JOIN `kit_allocation` `k` ON (((`k`.`refUIDId` = `css`.`id`)  \n" +
				"            AND (`k`.`STATUS` = 'A'))))  \n" +
				"        WHERE  \n" +
				"            ((`css`.`isinStk` = 1)  \n" +
				"                AND (`css`.`isDeleted` = 0))  \n" +
				"        GROUP BY `css`.`id`) `b` ON ((`a`.`id` = `b`.`id`)))  \n" +
				"    WHERE  \n" +
				"        ((`a`.`isDeleted` = 0)  \n" +
				"            AND ((`a`.`pkgUnit` - IFNULL(`b`.`allocatedUnit`, 0)) > 0))  \n" +
				"    UNION ALL SELECT  \n" +
				"        0 AS `id`,  \n" +
				"        '-' AS `uid`,  \n" +
				"        `c`.`id` AS `id`,  \n" +
				"        `c`.`noOfPosition` AS `noOfPosition`,  \n" +
				"        `c`.`connecterTypeID` AS `connecterTypeID`,  \n" +
				"        (IFNULL(`vu`.`BalanceQty`, 1) * IFNULL(`c`.`unit`, 1)) AS `PkgUnit`,  \n" +
				"        0 AS `allocatedunit`,  \n" +
				"        (IFNULL(`vu`.`BalanceQty`, 1) * IFNULL(`c`.`unit`, 1)) AS `availableStock`,  \n" +
				"        `c`.`unit` AS `unit`,  \n" +
				"        `c`.`uom` AS `uom`,  \n" +
				"        NULL AS `receiveMaterialType`,  \n" +
				"        NULL AS `customerID`,  \n" +
				"        0 AS `customerConsign`  \n" +
				"    FROM  \n" +
				"        (`vu_umid_creation_pending` `vu`  \n" +
				"        JOIN `vu_component_mpn` `c` ON ((`c`.`id` = `vu`.`PartId`)))  \n" +
				"    WHERE  \n" +
				"        (`vu`.`BalanceQty` > 0);  \n" +
				/* **************************** Add Script Version -> 17-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_material_consumption_scrapped_det` ;  \n" +
				"CREATE VIEW `vu_material_consumption_scrapped_det` AS  \n" +
				"    SELECT  \n" +
				"        `a`.`id` AS `kitallocationId`,  \n" +
				"        `sdm`.`id` AS `refSalesOrderId`,  \n" +
				"        `sdm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
				"        `sdm`.`soDate` AS `sodate`,  \n" +
				"        `sdm`.`poNumber` AS `ponumber`,  \n" +
				"        `sdm`.`revision` AS `revision`,  \n" +
				"        `sdd`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
				"        `sdd`.`kitNumber` AS `kitNumber`,  \n" +
				"        `sdd`.`kitQty` AS `kitQty`,  \n" +
				"        `cassy`.`id` AS `assypartid`,  \n" +
				"        `cassy`.`mfgPN` AS `assyPN`,  \n" +
				"        `cassy`.`mfgcodeID` AS `custid`,  \n" +
				"        `cassy`.`PIDCode` AS `AssyID`,  \n" +
				"        `cassy`.`nickName` AS `nickName`,  \n" +
				"        `b`.`id` AS `id`,  \n" +
				"        `b`.`mfgPN` AS `mfgPN`,  \n" +
				"        `b`.`mfgcodeID` AS `mfgcodeID`,  \n" +
				"        `b`.`PIDCode` AS `PIDCode`,  \n" +
				"        `b`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
				"        `b`.`mountingTypeID` AS `mountingTypeID`,  \n" +
				"        `b`.`functionalCategoryID` AS `functionalCategoryID`,  \n" +
				"        `css`.`id` AS `umidid`,  \n" +
				"        `css`.`uid` AS `umid`,  \n" +
				"        `css`.`costCategoryID` AS `costcategoryid`,  \n" +
				"        `css`.`packaging` AS `packaging`,  \n" +
				"        `css`.`orgPkgUnit` AS `orgPkgUnit`,  \n" +
				"        `a`.`STATUS` AS `status`,  \n" +
				"        `a`.`returnDate` AS `returndate`,  \n" +
				"        IFNULL(`a`.`allocatedQty`, 0) AS `allocatedqty`,  \n" +
				"        IFNULL(`a`.`allocatedUnit`, 0) AS `allocatedunit`,  \n" +
				"        `a`.`allocatedUOM` AS `allocateduom`,  \n" +
				"        IFNULL(`a`.`consumeQty`, 0) AS `consumeqty`,  \n" +
				"        IFNULL(`a`.`consumeUnit`, 0) AS `consumeunit`,  \n" +
				"        IFNULL(`a`.`scrapExpiredQty`, 0) AS `scrapExpiredqty`,  \n" +
				"        IFNULL(`a`.`scrapExpiredUnit`, 0) AS `scrapExpiredunit`,  \n" +
				"        `a`.`scrapExpiredUOM` AS `scrapexpireduom`,  \n" +
				"        `a`.`componentSIDStockHistoryID` AS `componentSIDStockHistoryID`,  \n" +
				"        ((CASE  \n" +
				"            WHEN ((IFNULL(`a`.`consumeQty`, 0) - IFNULL(`a`.`allocatedQty`, 0)) < 0) THEN 0  \n" +
				"            ELSE (IFNULL(`a`.`consumeQty`, 0) - IFNULL(`a`.`allocatedQty`, 0))  \n" +
				"        END) + IFNULL(`a`.`scrapExpiredQty`, 0)) AS `scrappedQty`,  \n" +
				"        ((CASE  \n" +
				"            WHEN ((IFNULL(`a`.`consumeUnit`, 0) - IFNULL(`a`.`allocatedUnit`, 0)) < 0) THEN 0  \n" +
				"            ELSE (IFNULL(`a`.`consumeUnit`, 0) - IFNULL(`a`.`allocatedUnit`, 0))  \n" +
				"        END) + IFNULL(`a`.`scrapExpiredUnit`, 0)) AS `scrappedunit`  \n" +
				"    FROM  \n" +
				"        (((((`kit_allocation` `a`  \n" +
				"        JOIN `component_sid_stock` `css` ON ((`a`.`refUIDId` = `css`.`id`)))  \n" +
				"        JOIN `vu_component` `b` ON ((`css`.`refcompid` = `b`.`id`)))  \n" +
				"        JOIN `vu_component_mpn` `cassy` ON ((`a`.`assyID` = `cassy`.`id`)))  \n" +
				"        JOIN `salesorderdet` `sdd` ON ((`a`.`refSalesOrderDetID` = `sdd`.`id`)))  \n" +
				"        JOIN `salesordermst` `sdm` ON ((`sdd`.`refSalesOrderID` = `sdm`.`id`)))  \n" +
				"    WHERE  \n" +
				"        ((`a`.`STATUS` = 'R')  \n" +
				"            AND (`css`.`isDeleted` = 0));  \n" +
				/* **************************** Add Script Version -> 17-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_kit_plan_release_status_report` ;  \n" +
				"CREATE VIEW `vu_kit_plan_release_status_report` AS  \n" +
				"    SELECT  \n" +
				"        `a`.`id` AS `id`,  \n" +
				"        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
				"        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
				"        `s`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
				"        `s`.`poNumber` AS `poNumber`,  \n" +
				"        `a`.`refAssyId` AS `refAssyId`,  \n" +
				"        `c`.`PIDCode` AS `assyPIDCode`,  \n" +
				"        `c`.`nickName` AS `assyNickName`,  \n" +
				"        `c`.`mfgPN` AS `assyMFRPN`,  \n" +
				"        `a`.`subAssyID` AS `subAssyID`,  \n" +
				"        `sc`.`PIDCode` AS `subAssyPIDCode`,  \n" +
				"        `sc`.`nickName` AS `subAssyNickName`,  \n" +
				"        `sc`.`mfgPN` AS `subAssyMFRPN`,  \n" +
				"        `sd`.`qty` AS `poQty`,  \n" +
				"        `sd`.`mrpQty` AS `mrpQty`,  \n" +
				"        `sd`.`kitQty` AS `kitQty`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`a`.`subAssyID` IS NOT NULL) THEN CONCAT(`sd`.`kitNumber`, '+', `sc`.`PIDCode`)  \n" +
				"            ELSE `sd`.`kitNumber`  \n" +
				"        END) AS `kitNumber`,  \n" +
				"        `a`.`planPOQty` AS `planPOQty`,  \n" +
				"        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
				"        `a`.`poDueDate` AS `poDueDate`,  \n" +
				"        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
				"        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
				"        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
				"        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
				"        `a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
				"        `a`.`releasedBy` AS `releasedBy`,  \n" +
				"        `a`.`kitReturnBy` AS `kitReturnBy`,  \n" +
				"        FUN_GETUSERNAMEBYID(`a`.`kitReturnBy`) AS `kitReturnByName`,  \n" +
				"        FUN_GETUSERNAMEBYID(`a`.`releasedBy`) AS `releasedByName`,  \n" +
				"        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
				"        `a`.`woID` AS `woID`,  \n" +
				"        FUN_GETWORKORDERNUMBERBYID(`a`.`woID`) AS `workorderNumber`,  \n" +
				"        `a`.`releasedNote` AS `releasedNote`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`a`.`kitStatus` = 'R') THEN 'Released'  \n" +
				"            WHEN (`a`.`kitStatus` = 'P') THEN 'In Progress'  \n" +
				"            ELSE '-'  \n" +
				"        END) AS `kitStatus`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN `a`.`kitReturnStatus`  \n" +
				"            WHEN (`a`.`kitStatus` = 'R') THEN 'NR'  \n" +
				"            ELSE 'NA'  \n" +
				"        END) AS `kitReturnStatus`,  \n" +
				"        `a`.`kitReturnDate` AS `kitReturnDate`,  \n" +
				"        `a`.`refPlanId` AS `refPlanId`  \n" +
				"    FROM  \n" +
				"        (((((SELECT  \n" +
				"            `s`.`id` AS `id`,  \n" +
				"                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
				"                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
				"                `s`.`refAssyId` AS `refAssyId`,  \n" +
				"                `s`.`subAssyID` AS `subAssyID`,  \n" +
				"                `s`.`poQty` AS `planPOQty`,  \n" +
				"                `s`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
				"                `s`.`poDueDate` AS `poDueDate`,  \n" +
				"                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
				"                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
				"                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
				"                `s`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
				"                `s`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
				"                `s`.`releasedBy` AS `releasedBy`,  \n" +
				"                `s`.`kitReturnBy` AS `kitReturnBy`,  \n" +
				"                `s`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
				"                `s`.`woID` AS `woID`,  \n" +
				"                `s`.`releasedNote` AS `releasedNote`,  \n" +
				"                `s`.`kitStatus` AS `kitStatus`,  \n" +
				"                `s`.`kitReturnStatus` AS `kitReturnStatus`,  \n" +
				"                `s`.`kitReturnDate` AS `kitReturnDate`,  \n" +
				"                `s`.`refPlanId` AS `refPlanId`  \n" +
				"        FROM  \n" +
				"            `salesorder_plan_detailsmst` `s`  \n" +
				"        WHERE  \n" +
				"            (`s`.`isDeleted` = 0) UNION ALL SELECT  \n" +
				"            `s`.`id` AS `id`,  \n" +
				"                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
				"                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
				"                `s`.`refAssyId` AS `refAssyId`,  \n" +
				"                `kassy`.`partId` AS `subAssyID`,  \n" +
				"                (`kassy`.`perAssyBuildQty` * `s`.`poQty`) AS `planPOQty`,  \n" +
				"                (`kassy`.`perAssyBuildQty` * `s`.`kitReleaseQty`) AS `kitReleaseQty`,  \n" +
				"                `s`.`poDueDate` AS `poDueDate`,  \n" +
				"                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
				"                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
				"                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseKitNumber`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `releaseKitNumber`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`actualKitReleaseDate`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `actualKitReleaseDate`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedBy`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `releasedBy`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnBy`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `kitReturnBy`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseTimeFeasibility`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `releaseTimeFeasibility`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`woID`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `woID`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedNote`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `releasedNote`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitStatus`  \n" +
				"                    ELSE 'P'  \n" +
				"                END) AS `kitStatus`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnStatus`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `kitReturnStatus`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnDate`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `kitReturnDate`,  \n" +
				"                `s`.`refPlanId` AS `refPlanId`  \n" +
				"        FROM  \n" +
				"            (`kit_allocation_assy_detail` `kassy`  \n" +
				"        LEFT JOIN `salesorder_plan_detailsmst` `s` ON (((`s`.`salesOrderDetID` = `kassy`.`refSalesOrderDetID`)  \n" +
				"            AND (`s`.`subAssyID` IS NULL))))  \n" +
				"        WHERE  \n" +
				"            ((`kassy`.`isDeleted` = 0)  \n" +
				"                AND (`kassy`.`bomAssyLevel` = 1)  \n" +
				"                AND EXISTS( SELECT  \n" +
				"                    'Y'  \n" +
				"                FROM  \n" +
				"                    `salesorder_plan_detailsmst` `sp`  \n" +
				"                WHERE  \n" +
				"                    ((`sp`.`isDeleted` = 0)  \n" +
				"                        AND (`sp`.`refPlanId` = `s`.`id`)  \n" +
				"                        AND (`kassy`.`partId` = `sp`.`subAssyID`)))  \n" +
				"                IS FALSE)) `a`  \n" +
				"        JOIN `salesorderdet` `sd` ON (((`a`.`salesOrderDetID` = `sd`.`id`)  \n" +
				"            AND (`sd`.`partCategory` = 3))))  \n" +
				"        JOIN `salesordermst` `s` ON ((`sd`.`refSalesOrderID` = `s`.`id`)))  \n" +
				"        JOIN `vu_component_mpn` `c` ON ((`a`.`refAssyId` = `c`.`id`)))  \n" +
				"        LEFT JOIN `vu_component_mpn` `sc` ON ((`a`.`subAssyID` = `sc`.`id`)))  \n" +
				"    WHERE  \n" +
				"        ((`a`.`salesOrderDetID` IS NOT NULL)  \n" +
				"            AND (`a`.`refAssyId` IS NOT NULL))  \n" +
				"    ORDER BY `a`.`salesOrderDetID` , `a`.`refAssyId` , `a`.`subAssyID`;  \n" +
				/* **************************** Add Script Version -> 17-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_kit_allocation_summary` ;  \n" +
				"CREATE VIEW `vu_kit_allocation_summary` AS  \n" +
				"    SELECT  \n" +
				"        `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"        `k`.`assyID` AS `assyID`,  \n" +
				"        `k`.`refMongoTrnsID` AS `refMongoTrnsID`,  \n" +
				"        `k`.`refBOMLineID` AS `refBOMLineID`,  \n" +
				"        `k`.`allocatedUOM` AS `allocatedUOM`,  \n" +
				"        SUM(`k`.`allocatedQty`) AS `allocatedQty`,  \n" +
				"        SUM(`k`.`allocatedUnit`) AS `allocatedUnit`,  \n" +
				"        SUM(`k`.`allocatedPin`) AS `allocatedPins`,  \n" +
				"        SUM(`k`.`consumeQty`) AS `consumeQty`,  \n" +
				"        SUM(`k`.`consumeUnit`) AS `consumeUnits`,  \n" +
				"        SUM(`k`.`consumePin`) AS `consumePin`,  \n" +
				"        SUM(`k`.`scrapedPin`) AS `scrapedPins`,  \n" +
				"        SUM(`k`.`convertedallocatedSTKPositionUnits`) AS `allocatedSTKPosition`,  \n" +
				"        SUM(`k`.`allocated_shared`) AS `allocated_shared`  \n" +
				"    FROM  \n" +
				"        (SELECT  \n" +
				"            `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"                `k`.`assyID` AS `assyID`,  \n" +
				"                `k`.`refBOMLineID` AS `refBOMLineID`,  \n" +
				"                `k`.`partId` AS `partId`,  \n" +
				"                `kal`.`refMongoTrnsID` AS `refMongoTrnsID`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`k`.`STATUS` = 'A') THEN `k`.`allocatedQty`  \n" +
				"                    ELSE 0  \n" +
				"                END) AS `allocatedQty`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`k`.`STATUS` = 'A') THEN FUN_CONVERTUOM(`k`.`allocatedUOM`, `kal`.`uomID`, `k`.`allocatedUnit`)  \n" +
				"                    ELSE 0  \n" +
				"                END) AS `allocatedUnit`,  \n" +
				"                `kal`.`uomID` AS `allocatedUOM`,  \n" +
				"                IFNULL(`k`.`consumeQty`, 0) AS `consumeQty`,  \n" +
				"                FUN_CONVERTUOM(`k`.`consumeUOM`, `kal`.`uomID`, IFNULL(`k`.`consumeUnit`, 0)) AS `consumeUnit`,  \n" +
				"                `k`.`consumeUOM` AS `consumeUOM`,  \n" +
				"                FUN_CONVERTUOM(`cs`.`uom`, `kal`.`uomID`, `cs`.`pkgUnit`) AS `convertedallocatedSTKPositionUnits`,  \n" +
				"                `shared`.`allocated_shared` AS `allocated_shared`,  \n" +
				"                (CASE  \n" +
				"                    WHEN  \n" +
				"                        ((`k`.`STATUS` = 'A')  \n" +
				"                            AND (`c`.`connecterTypeID` = -(2)))  \n" +
				"                    THEN  \n" +
				"                        ((FLOOR((IFNULL(`c`.`noOfPosition`, 0) / IFNULL(`kal`.`numOfPosition`, 0))) * IFNULL(`kal`.`numOfPosition`, 0)) * IFNULL(`k`.`allocatedUnit`, 0))  \n" +
				"                    ELSE 0  \n" +
				"                END) AS `allocatedPin`,  \n" +
				"                (CASE  \n" +
				"                    WHEN  \n" +
				"                        ((`k`.`STATUS` = 'R')  \n" +
				"                            AND (`c`.`connecterTypeID` = -(2)))  \n" +
				"                    THEN  \n" +
				"                        ((FLOOR((IFNULL(`c`.`noOfPosition`, 0) / IFNULL(`kal`.`numOfPosition`, 0))) * IFNULL(`kal`.`numOfPosition`, 0)) * IFNULL(`k`.`consumeUnit`, 0))  \n" +
				"                    ELSE 0  \n" +
				"                END) AS `consumePin`,  \n" +
				"                (CASE  \n" +
				"                    WHEN  \n" +
				"                        ((`k`.`STATUS` = 'A')  \n" +
				"                            AND (`c`.`connecterTypeID` = -(2)))  \n" +
				"                    THEN  \n" +
				"                        (FLOOR((`c`.`noOfPosition` % IFNULL(`kal`.`numOfPosition`, 0))) * IFNULL(`k`.`allocatedUnit`, 0))  \n" +
				"                    ELSE 0  \n" +
				"                END) AS `scrapedPin`  \n" +
				"        FROM  \n" +
				"            ((((`kit_allocation` `k`  \n" +
				"        JOIN `vu_component_mpn` `c` ON ((`k`.`partId` = `c`.`id`)))  \n" +
				"        JOIN `kit_allocation_lineitems` `kal` ON (((`k`.`refSalesOrderDetID` = `kal`.`refSalesOrderDetID`)  \n" +
				"            AND (`k`.`assyID` = `kal`.`partID`)  \n" +
				"            AND (`k`.`refBOMLineID` = `kal`.`refRfqLineitem`))))  \n" +
				"        LEFT JOIN `component_sid_stock` `cs` ON ((`cs`.`id` = `k`.`refUIDId`)))  \n" +
				"        LEFT JOIN `vu_umid_allocatedtoshared` `shared` ON ((`k`.`id` = `shared`.`id`)))  \n" +
				"        WHERE  \n" +
				"            ((`c`.`isDeleted` = 0)  \n" +
				"                AND (`kal`.`isDeleted` = 0)  \n" +
				"                AND (`k`.`STATUS` <> 'D'))) `k`  \n" +
				"    GROUP BY `k`.`refSalesOrderDetID` , `k`.`assyID` , `k`.`refBOMLineID` , `k`.`allocatedUOM` , `k`.`refMongoTrnsID`;  \n" +
				/* **************************** Add Script Version -> 17-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_kit_allocation_detail` ;  \n" +
				"CREATE VIEW `vu_kit_allocation_detail` AS  \n" +
				"    SELECT  \n" +
				"        `k`.`refSalesorderdetid` AS `refSalesorderdetid`,  \n" +
				"        `k`.`assyID` AS `assyID`,  \n" +
				"        `k`.`lineID` AS `lineID`,  \n" +
				"        `k`.`totalAssyBuildQty` AS `totalAssyBuildQty`,  \n" +
				"        `k`.`kitQty` AS `kitQty`,  \n" +
				"        `k`.`mrpQty` AS `mrpQty`,  \n" +
				"        `k`.`refRfqLineitem` AS `refRfqLineitem`,  \n" +
				"        `k`.`qpa` AS `qpa`,  \n" +
				"        `k`.`dnpQty` AS `dnpQty`,  \n" +
				"        `k`.`qpaWithDnp` AS `qpaWithDnp`,  \n" +
				"        `k`.`isPurchase` AS `isPurchase`,  \n" +
				"        `k`.`isInstall` AS `isInstall`,  \n" +
				"        `k`.`isBuyDNPQty` AS `isBuyDNPQty`,  \n" +
				"        `k`.`numOfPosition` AS `numOfPosition`,  \n" +
				"        `k`.`reqQty` AS `reqQty`,  \n" +
				"        `k`.`reqUnits` AS `reqUnits`,  \n" +
				"        `k`.`reqPins` AS `reqPins`,  \n" +
				"        `k`.`uomid` AS `uomid`,  \n" +
				"        `k`.`connecterTypeID` AS `connecterTypeID`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN `k`.`allocatedQty`  \n" +
				"            ELSE 0  \n" +
				"        END) AS `allocatedQty`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN `k`.`allocatedunit`  \n" +
				"            ELSE 0  \n" +
				"        END) AS `allocatedunit`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN `k`.`allocatedpin`  \n" +
				"            ELSE 0  \n" +
				"        END) AS `allocatedpin`,  \n" +
				"        (CASE  \n" +
				"            WHEN  \n" +
				"                (`k`.`isNotRequiredKitAllocation` <> 1)  \n" +
				"            THEN  \n" +
				"                (CASE  \n" +
				"                    WHEN ((`k`.`reqUnits` - `k`.`allocatedunit`) > 0) THEN (`k`.`reqUnits` - `k`.`allocatedunit`)  \n" +
				"                    ELSE 0  \n" +
				"                END)  \n" +
				"            ELSE 0  \n" +
				"        END) AS `shortage`,  \n" +
				"        (CASE  \n" +
				"            WHEN  \n" +
				"                (`k`.`isNotRequiredKitAllocation` <> 1)  \n" +
				"            THEN  \n" +
				"                (CASE  \n" +
				"                    WHEN ((`k`.`reqPins` - `k`.`allocatedpin`) > 0) THEN (`k`.`reqPins` - `k`.`allocatedpin`)  \n" +
				"                    ELSE 0  \n" +
				"                END)  \n" +
				"            ELSE 0  \n" +
				"        END) AS `shortagePins`,  \n" +
				"        (CASE  \n" +
				"            WHEN  \n" +
				"                ((CASE  \n" +
				"                    WHEN  \n" +
				"                        (`k`.`isNotRequiredKitAllocation` <> 1)  \n" +
				"                    THEN  \n" +
				"                        (CASE  \n" +
				"                            WHEN ((`k`.`reqUnits` - `k`.`allocatedunit`) > 0) THEN (`k`.`reqUnits` - `k`.`allocatedunit`)  \n" +
				"                            ELSE 0  \n" +
				"                        END)  \n" +
				"                    ELSE 0  \n" +
				"                END) > 0)  \n" +
				"            THEN  \n" +
				"                1  \n" +
				"            ELSE 0  \n" +
				"        END) AS `shortageLine`,  \n" +
				"        (CASE  \n" +
				"            WHEN  \n" +
				"                ((CASE  \n" +
				"                    WHEN  \n" +
				"                        (`k`.`isNotRequiredKitAllocation` <> 1)  \n" +
				"                    THEN  \n" +
				"                        (CASE  \n" +
				"                            WHEN ((`k`.`reqPins` - `k`.`allocatedpin`) > 0) THEN (`k`.`reqPins` - `k`.`allocatedpin`)  \n" +
				"                            ELSE 0  \n" +
				"                        END)  \n" +
				"                    ELSE 0  \n" +
				"                END) > 0)  \n" +
				"            THEN  \n" +
				"                1  \n" +
				"            ELSE 0  \n" +
				"        END) AS `shortagelinePins`,  \n" +
				"        (CASE  \n" +
				"            WHEN  \n" +
				"                (`k`.`connecterTypeID` = -(2))  \n" +
				"            THEN  \n" +
				"                ((`k`.`allocatedpin` / (CASE  \n" +
				"                    WHEN (IFNULL(`k`.`reqPins`, 0) = 0) THEN 1  \n" +
				"                    ELSE `k`.`reqPins`  \n" +
				"                END)) * 100)  \n" +
				"            ELSE ((`k`.`allocatedunit` / (CASE  \n" +
				"                WHEN (IFNULL(`k`.`reqUnits`, 0) = 0) THEN 1  \n" +
				"                ELSE `k`.`reqUnits`  \n" +
				"            END)) * 100)  \n" +
				"        END) AS `AllocationPercPerLine`,  \n" +
				"        `k`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`,  \n" +
				"        `k`.`bomNumOfPosition` AS `bomNumOfPosition`  \n" +
				"    FROM  \n" +
				"        (SELECT  \n" +
				"            `k`.`refSalesorderdetid` AS `refSalesorderdetid`,  \n" +
				"                `k`.`assyID` AS `assyID`,  \n" +
				"                `k`.`lineID` AS `lineID`,  \n" +
				"                `k`.`totalAssyBuildQty` AS `totalAssyBuildQty`,  \n" +
				"                `k`.`kitQty` AS `kitQty`,  \n" +
				"                `k`.`mrpQty` AS `mrpQty`,  \n" +
				"                `k`.`refRfqLineitem` AS `refRfqLineitem`,  \n" +
				"                `k`.`qpa` AS `qpa`,  \n" +
				"                `k`.`dnpQty` AS `dnpQty`,  \n" +
				"                `k`.`qpaWithDnp` AS `qpaWithDnp`,  \n" +
				"                `k`.`numOfPosition` AS `numOfPosition`,  \n" +
				"                IFNULL((`k`.`totalAssyBuildQty` * IFNULL(`k`.`qpaWithDnp`, 0)), 0) AS `reqQty`,  \n" +
				"                IFNULL((`k`.`totalAssyBuildQty` * IFNULL(`k`.`qpaWithDnp`, 0)), 0) AS `reqUnits`,  \n" +
				"                IFNULL(((`k`.`totalAssyBuildQty` * IFNULL(`k`.`qpaWithDnp`, 0)) * IFNULL(`k`.`bomNumOfPosition`, 0)), 0) AS `reqPins`,  \n" +
				"                `k`.`uomid` AS `uomid`,  \n" +
				"                `k`.`connecterTypeID` AS `connecterTypeID`,  \n" +
				"                `k`.`allocatedQty` AS `allocatedQty`,  \n" +
				"                `k`.`allocatedunit` AS `allocatedunit`,  \n" +
				"                `k`.`allocatedpin` AS `allocatedpin`,  \n" +
				"                `k`.`isPurchase` AS `isPurchase`,  \n" +
				"                `k`.`isInstall` AS `isInstall`,  \n" +
				"                `k`.`isBuyDNPQty` AS `isBuyDNPQty`,  \n" +
				"                `k`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`,  \n" +
				"                `k`.`bomNumOfPosition` AS `bomNumOfPosition`  \n" +
				"        FROM  \n" +
				"            (SELECT  \n" +
				"            `a`.`refSalesOrderDetID` AS `refSalesorderdetid`,  \n" +
				"                `a`.`partId` AS `assyID`,  \n" +
				"                `b`.`lineID` AS `lineID`,  \n" +
				"                `a`.`totalAssyBuildQty` AS `totalAssyBuildQty`,  \n" +
				"                `a`.`kitQty` AS `kitQty`,  \n" +
				"                `a`.`mrpQty` AS `mrpQty`,  \n" +
				"                `b`.`refRfqLineitem` AS `refRfqLineitem`,  \n" +
				"                `b`.`qpa` AS `qpa`,  \n" +
				"                `b`.`dnpQty` AS `dnpQty`,  \n" +
				"                (CASE  \n" +
				"                    WHEN  \n" +
				"                        ((`b`.`isPurchase` = 1)  \n" +
				"                            OR (`b`.`isInstall` = 1))  \n" +
				"                    THEN  \n" +
				"                        (IFNULL(`b`.`qpa`, 0) + IF(((`b`.`isBuyDNPQty` = 'Y')  \n" +
				"                            OR (`b`.`isBuyDNPQty` = 'C')), IFNULL(`b`.`dnpQty`, 0), 0))  \n" +
				"                    ELSE IF(((`b`.`isBuyDNPQty` = 'Y')  \n" +
				"                        OR (`b`.`isBuyDNPQty` = 'C')), IFNULL(`b`.`dnpQty`, 0), 0)  \n" +
				"                END) AS `qpaWithDnp`,  \n" +
				"                `b`.`numOfPosition` AS `numOfPosition`,  \n" +
				"                `b`.`uomID` AS `uomid`,  \n" +
				"                `c`.`connecterTypeID` AS `connecterTypeID`,  \n" +
				"                IFNULL(`c`.`allocatedQty`, 0) AS `allocatedQty`,  \n" +
				"                IFNULL(`c`.`allocatedunit`, 0) AS `allocatedunit`,  \n" +
				"                IFNULL(`c`.`allocatedpin`, 0) AS `allocatedpin`,  \n" +
				"                `b`.`isPurchase` AS `isPurchase`,  \n" +
				"                `b`.`isInstall` AS `isInstall`,  \n" +
				"                `b`.`isBuyDNPQty` AS `isBuyDNPQty`,  \n" +
				"                `b`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`,  \n" +
				"                `b`.`numOfPosition` AS `bomNumOfPosition`  \n" +
				"        FROM  \n" +
				"            ((`kit_allocation_assy_detail` `a`  \n" +
				"        JOIN `kit_allocation_lineitems` `b` ON (((`a`.`refSalesOrderDetID` = `b`.`refSalesOrderDetID`)  \n" +
				"            AND (`a`.`partId` = `b`.`partID`)  \n" +
				"            AND (`b`.`isDeleted` = 0))))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            `ka`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"                `ka`.`assyID` AS `assyid`,  \n" +
				"                `ka`.`refBOMLineID` AS `refBOMLineID`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`ka`.`STATUS` = 'R') THEN `ka`.`consumeQty`  \n" +
				"                    WHEN (`ka`.`STATUS` = 'D') THEN 0  \n" +
				"                    ELSE `ka`.`allocatedQty`  \n" +
				"                END)) AS `allocatedQty`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`ka`.`STATUS` = 'R') THEN `ka`.`consumeUnit`  \n" +
				"                    WHEN (`ka`.`STATUS` = 'D') THEN 0  \n" +
				"                    ELSE `ka`.`allocatedUnit`  \n" +
				"                END)) AS `allocatedunit`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`ka`.`STATUS` = 'R') THEN (`ka`.`consumeUnit` * IFNULL(`c`.`noOfPosition`, 0))  \n" +
				"                    WHEN (`ka`.`STATUS` = 'D') THEN 0  \n" +
				"                    ELSE (`ka`.`allocatedUnit` * IFNULL(`c`.`noOfPosition`, 0))  \n" +
				"                END)) AS `allocatedpin`,  \n" +
				"                `c`.`connecterTypeID` AS `connecterTypeID`  \n" +
				"        FROM  \n" +
				"            (`kit_allocation` `ka`  \n" +
				"        JOIN `component` `c` ON ((`c`.`id` = `ka`.`partId`)))  \n" +
				"        WHERE  \n" +
				"            (`c`.`isDeleted` = 0)  \n" +
				"        GROUP BY `ka`.`refSalesOrderDetID` , `ka`.`assyID` , `ka`.`refBOMLineID` , `c`.`connecterTypeID`) `c` ON (((`a`.`refSalesOrderDetID` = `c`.`refSalesOrderDetID`)  \n" +
				"            AND (`a`.`partId` = `c`.`assyid`)  \n" +
				"            AND (`b`.`refRfqLineitem` = `c`.`refBOMLineID`))))  \n" +
				"        WHERE  \n" +
				"            ((`a`.`isDeleted` = 0)  \n" +
				"                AND EXISTS( SELECT  \n" +
				"                    'Y'  \n" +
				"                FROM  \n" +
				"                    `kit_allocation_lineitems_alternatepart` `d`  \n" +
				"                WHERE  \n" +
				"                    (EXISTS( SELECT  \n" +
				"                            'Y'  \n" +
				"                        FROM  \n" +
				"                            `component` `e`  \n" +
				"                        WHERE  \n" +
				"                            ((`e`.`id` = `d`.`mfgPNID`)  \n" +
				"                                AND (`e`.`category` <> 3)))  \n" +
				"                        AND (`b`.`refSalesOrderDetID` = `d`.`refSalesOrderDetID`)  \n" +
				"                        AND (`b`.`refRfqLineitem` = `d`.`refRfqLineitem`)  \n" +
				"                        AND (`b`.`partID` = `d`.`partID`))))) `k`) `k`;  \n" +
				/* **************************** Add Script Version -> 17-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_kit_feasibility_detail` ;  \n" +
				"CREATE VIEW `vu_kit_feasibility_detail` AS  \n" +
				"    SELECT  \n" +
				"        `e`.`refRfqLineitem` AS `refRfqLineitem`,  \n" +
				"        `e`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"        `e`.`assyid` AS `assyid`,  \n" +
				"        `e`.`lineID` AS `lineID`,  \n" +
				"        `e`.`totalAssyBuildQty` AS `totalAssyBuildQty`,  \n" +
				"        `e`.`qpawithdnp` AS `qpawithdnp`,  \n" +
				"        `e`.`kitQty` AS `kitQty`,  \n" +
				"        `e`.`reqqty` AS `reqqty`,  \n" +
				"        `e`.`requnits` AS `requnits`,  \n" +
				"        `e`.`allocatedqty` AS `allocatedqty`,  \n" +
				"        `e`.`allocatedunit` AS `allocatedunit`,  \n" +
				"        `e`.`allocatedpin` AS `allocatedpin`,  \n" +
				"        `e`.`shortage` AS `shortage`,  \n" +
				"        `e`.`availableStock` AS `availableStock`,  \n" +
				"        (CASE  \n" +
				"            WHEN  \n" +
				"                ((`e`.`BOMnumofPosition` IS NULL)  \n" +
				"                    OR (`e`.`BOMnumofPosition` = 0)  \n" +
				"                    OR (`e`.`connecterTypeID` <> -(2)))  \n" +
				"            THEN  \n" +
				"                (IFNULL(`e`.`allocatedunit`, 0) / IFNULL(`e`.`qpawithdnp`, 0))  \n" +
				"            ELSE (`e`.`allocatedPins` / (IFNULL(`e`.`qpawithdnp`, 0) * IFNULL(`e`.`BOMnumofPosition`, 0)))  \n" +
				"        END) AS `feasibility`,  \n" +
				"        (CASE  \n" +
				"            WHEN  \n" +
				"                ((`e`.`BOMnumofPosition` IS NULL)  \n" +
				"                    OR (`e`.`BOMnumofPosition` = 0)  \n" +
				"                    OR (`e`.`connecterTypeID` <> -(2)))  \n" +
				"            THEN  \n" +
				"                ((IFNULL(`e`.`allocatedunit`, 0) + IFNULL(`e`.`availableStock`, 0)) / IFNULL(`e`.`qpawithdnp`, 0))  \n" +
				"            ELSE ((`e`.`allocatedPins` + IFNULL(`e`.`availableStockInPin`, 0)) / (IFNULL(`e`.`qpawithdnp`, 0) * IFNULL(`e`.`BOMnumofPosition`, 0)))  \n" +
				"        END) AS `feasibilityWithAvailable`,  \n" +
				"        (CASE  \n" +
				"            WHEN  \n" +
				"                ((`e`.`BOMnumofPosition` IS NULL)  \n" +
				"                    OR (`e`.`BOMnumofPosition` = 0)  \n" +
				"                    OR (`e`.`connecterTypeID` <> -(2)))  \n" +
				"            THEN  \n" +
				"                (CASE  \n" +
				"                    WHEN ((((IFNULL(`e`.`allocatedunit`, 0) + IFNULL(`e`.`availableStock`, 0)) / IFNULL(`e`.`qpawithdnp`, 0)) - IFNULL(`e`.`totalAssyBuildQty`, 0)) > 0) THEN 0  \n" +
				"                    ELSE (((IFNULL(`e`.`allocatedunit`, 0) + IFNULL(`e`.`availableStock`, 0)) / IFNULL(`e`.`qpawithdnp`, 0)) - IFNULL(`e`.`totalAssyBuildQty`, 0))  \n" +
				"                END)  \n" +
				"            ELSE (CASE  \n" +
				"                WHEN (((`e`.`allocatedPins` + IFNULL(`e`.`availableStockInPin`, 0)) / (IFNULL(`e`.`qpawithdnp`, 0) * IFNULL(`e`.`BOMnumofPosition`, 0))) > 0) THEN 0  \n" +
				"                ELSE ((`e`.`allocatedPins` + IFNULL(`e`.`availableStockInPin`, 0)) / (IFNULL(`e`.`qpawithdnp`, 0) * IFNULL(`e`.`BOMnumofPosition`, 0)))  \n" +
				"            END)  \n" +
				"        END) AS `shortageForAvailable`,  \n" +
				"        `e`.`mountingTypeID` AS `mountingTypeID`,  \n" +
				"        `e`.`approvedmountingtypeID` AS `approvedmountingtypeID`,  \n" +
				"        `e`.`connecterTypeID` AS `connecterTypeID`,  \n" +
				"        `e`.`BOMnumofPosition` AS `BOMnumofPosition`  \n" +
				"    FROM  \n" +
				"        (SELECT  \n" +
				"            `d`.`refRfqLineitem` AS `refRfqLineitem`,  \n" +
				"                `d`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"                `d`.`assyid` AS `assyid`,  \n" +
				"                `d`.`lineID` AS `lineID`,  \n" +
				"                `d`.`uomID` AS `uomID`,  \n" +
				"                `d`.`totalAssyBuildQty` AS `totalAssyBuildQty`,  \n" +
				"                `d`.`kitQty` AS `kitQty`,  \n" +
				"                IFNULL((`d`.`totalAssyBuildQty` * IFNULL(`d`.`qpawithdnp`, 0)), 0) AS `reqqty`,  \n" +
				"                IFNULL((`d`.`totalAssyBuildQty` * IFNULL(`d`.`qpawithdnp`, 0)), 0) AS `requnits`,  \n" +
				"                `d`.`qpawithdnp` AS `qpawithdnp`,  \n" +
				"                `d`.`allocatedqty` AS `allocatedqty`,  \n" +
				"                `d`.`allocatedunit` AS `allocatedunit`,  \n" +
				"                `d`.`allocatedpin` AS `allocatedpin`,  \n" +
				"                FUN_GETSHORTAGEPERBUILD(`d`.`qpawithdnp`, `d`.`kitQty`, `d`.`assyid`, `d`.`refSalesOrderDetID`, `d`.`refRfqLineitem`) AS `shortage`,  \n" +
				"                FUN_GETAVILABLESTOCKWITHPACKAGINGALIAS(`d`.`refRfqLineitem`, `d`.`assyid`, `d`.`refSalesOrderDetID`, `d`.`uomID`, NULL) AS `availableStock`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`d`.`connecterTypeID` = -(2)) THEN FUN_GETAVILABLESTOCKWITHPACKAGINGALIASINPINS(CAST(`d`.`refRfqLineitem` AS CHAR (100) CHARSET UTF8MB3), `d`.`assyid`, `d`.`refSalesOrderDetID`, `d`.`bomnumofPosition`, NULL)  \n" +
				"                    ELSE 0  \n" +
				"                END) AS `availableStockInPin`,  \n" +
				"                `d`.`mountingTypeID` AS `mountingTypeID`,  \n" +
				"                `d`.`approvedmountingtypeID` AS `approvedmountingtypeID`,  \n" +
				"                `d`.`connecterTypeID` AS `connecterTypeID`,  \n" +
				"                `d`.`bomnumofPosition` AS `BOMnumofPosition`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`d`.`connecterTypeID` = -(2)) THEN FUN_GETKITALLOCATEDPIN(`d`.`assyid`, `d`.`refSalesOrderDetID`, `d`.`refRfqLineitem`, NULL, `d`.`bomnumofPosition`, FALSE)  \n" +
				"                    ELSE 0  \n" +
				"                END) AS `allocatedPins`  \n" +
				"        FROM  \n" +
				"            (SELECT  \n" +
				"            `a`.`refRfqLineitem` AS `refRfqLineitem`,  \n" +
				"                `a`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"                `a`.`assyid` AS `assyid`,  \n" +
				"                `a`.`lineID` AS `lineID`,  \n" +
				"                `a`.`uomID` AS `uomID`,  \n" +
				"                `a`.`totalAssyBuildQty` AS `totalAssyBuildQty`,  \n" +
				"                `a`.`kitQty` AS `kitQty`,  \n" +
				"                `a`.`qpawithdnp` AS `qpawithdnp`,  \n" +
				"                `c`.`allocatedqty` AS `allocatedqty`,  \n" +
				"                `c`.`allocatedunit` AS `allocatedunit`,  \n" +
				"                `c`.`allocatedpin` AS `allocatedpin`,  \n" +
				"                `ka`.`mountingTypeID` AS `mountingTypeID`,  \n" +
				"                `ka`.`approvedmountingtypeID` AS `approvedmountingtypeID`,  \n" +
				"                `ka`.`connecterTypeID` AS `connecterTypeID`,  \n" +
				"                `a`.`bomnumofPosition` AS `bomnumofPosition`  \n" +
				"        FROM  \n" +
				"            (((SELECT  \n" +
				"            `b`.`refRfqLineitem` AS `refRfqLineitem`,  \n" +
				"                `b`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"                `b`.`partID` AS `assyid`,  \n" +
				"                `b`.`lineID` AS `lineID`,  \n" +
				"                `b`.`uomID` AS `uomID`,  \n" +
				"                `b`.`numOfPosition` AS `bomnumofPosition`,  \n" +
				"                `a`.`totalAssyBuildQty` AS `totalAssyBuildQty`,  \n" +
				"                `a`.`kitQty` AS `kitQty`,  \n" +
				"                (CASE  \n" +
				"                    WHEN  \n" +
				"                        ((`b`.`isPurchase` = 1)  \n" +
				"                            OR (`b`.`isInstall` = 1))  \n" +
				"                    THEN  \n" +
				"                        (IFNULL(`b`.`qpa`, 0) + IF(((`b`.`isBuyDNPQty` = 'Y')  \n" +
				"                            OR (`b`.`isBuyDNPQty` = 'C')), IFNULL(`b`.`dnpQty`, 0), 0))  \n" +
				"                    ELSE IF(((`b`.`isBuyDNPQty` = 'Y')  \n" +
				"                        OR (`b`.`isBuyDNPQty` = 'C')), IFNULL(`b`.`dnpQty`, 0), 0)  \n" +
				"                END) AS `qpawithdnp`  \n" +
				"        FROM  \n" +
				"            (`kit_allocation_assy_detail` `a`  \n" +
				"        JOIN `kit_allocation_lineitems` `b` ON (((`a`.`refSalesOrderDetID` = `b`.`refSalesOrderDetID`)  \n" +
				"            AND (`a`.`partId` = `b`.`partID`)  \n" +
				"            AND (`b`.`isNotRequiredKitAllocation` <> 1)  \n" +
				"            AND (`b`.`isDeleted` = 0))))) `a`  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            `ka`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"                `ka`.`refRfqLineitem` AS `refRfqLineitem`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (MAX(`cp`.`mountingTypeID`) = MIN(`cp`.`mountingTypeID`)) THEN MIN(`cp`.`mountingTypeID`)  \n" +
				"                    ELSE -(2)  \n" +
				"                END) AS `mountingTypeID`,  \n" +
				"                MAX((CASE  \n" +
				"                    WHEN  \n" +
				"                        ((`ka`.`mismatchMountingTypeStep` = 1)  \n" +
				"                            AND (`ka`.`approvedMountingType` = 1))  \n" +
				"                    THEN  \n" +
				"                        `cp`.`mountingTypeID`  \n" +
				"                    ELSE NULL  \n" +
				"                END)) AS `approvedmountingtypeID`,  \n" +
				"                MIN(`cp`.`connecterTypeID`) AS `connecterTypeID`,  \n" +
				"                MIN(`cp`.`noOfRows`) AS `noOfRows`  \n" +
				"        FROM  \n" +
				"            (`kit_allocation_lineitems_alternatepart` `ka`  \n" +
				"        JOIN `vu_component_mpn` `cp` ON ((`ka`.`mfgPNID` = `cp`.`id`)))  \n" +
				"        GROUP BY `ka`.`refSalesOrderDetID` , `ka`.`refRfqLineitem`) `ka` ON (((`a`.`refSalesOrderDetID` = `ka`.`refSalesOrderDetID`)  \n" +
				"            AND (`a`.`refRfqLineitem` = `ka`.`refRfqLineitem`))))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            `ka`.`refSalesOrderDetID` AS `refsalesorderdetid`,  \n" +
				"                `ka`.`assyID` AS `assyid`,  \n" +
				"                `ka`.`refBOMLineID` AS `refbomlineid`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`ka`.`STATUS` = 'R') THEN `ka`.`consumeQty`  \n" +
				"                    WHEN (`ka`.`STATUS` = 'D') THEN 0  \n" +
				"                    ELSE `ka`.`allocatedQty`  \n" +
				"                END)) AS `allocatedqty`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`ka`.`STATUS` = 'R') THEN `ka`.`consumeUnit`  \n" +
				"                    WHEN (`ka`.`STATUS` = 'D') THEN 0  \n" +
				"                    ELSE `ka`.`allocatedUnit`  \n" +
				"                END)) AS `allocatedunit`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN  \n" +
				"                        (`cp`.`connecterTypeID` = -(2))  \n" +
				"                    THEN  \n" +
				"                        (CASE  \n" +
				"                            WHEN  \n" +
				"                                (`ka`.`STATUS` = 'R')  \n" +
				"                            THEN  \n" +
				"                                ((IFNULL(`ka`.`consumeUnit`, 0) * IFNULL(`cp`.`noOfPosition`, 0)) / (CASE  \n" +
				"                                    WHEN (IFNULL(`cp`.`noOfRows`, 0) > 1) THEN `cp`.`noOfRows`  \n" +
				"                                    ELSE 1  \n" +
				"                                END))  \n" +
				"                            WHEN (`ka`.`STATUS` = 'D') THEN 0  \n" +
				"                            ELSE (IFNULL(`ka`.`allocatedUnit`, 0) * IFNULL(`cp`.`noOfPosition`, 0))  \n" +
				"                        END)  \n" +
				"                    ELSE 0  \n" +
				"                END)) AS `allocatedpin`  \n" +
				"        FROM  \n" +
				"            (`kit_allocation` `ka`  \n" +
				"        JOIN `vu_component_mpn` `cp` ON ((`ka`.`partId` = `cp`.`id`)))  \n" +
				"        GROUP BY `ka`.`refSalesOrderDetID` , `ka`.`assyID` , `ka`.`refBOMLineID`) `c` ON (((`a`.`refSalesOrderDetID` = `c`.`refsalesorderdetid`)  \n" +
				"            AND (`a`.`refRfqLineitem` = `c`.`refbomlineid`)  \n" +
				"            AND (`a`.`assyid` = `c`.`assyid`))))) `d`) `e`;  \n" +
				/* **************************** Add Script Version -> 17-03-2022 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (6024,'2.00','V1','Resolve issue in Sproc_MatchBarCodeAndSaveDelimiters & Task 42386: Apply Part Master Normalization effect in Kit UMID and Bulk Transfer flow for Views'," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
        case 6024:
            allDbChangesArray.push(
            /* **************************** New Script -> 17-03-2022 *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
            "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(  \n" +
            "	IN pGoodPart VARCHAR(100),  \n" +
            "	IN pSearch VARCHAR(500),  \n" +
            "	IN pId INT,  \n" +
            "	IN pMfgType VARCHAR(50),  \n" +
            "	IN pRoHSStatusID VARCHAR(100),  \n" +
            "	IN pMfgCodeId INT,  \n" +
            "	IN pMountingType VARCHAR(50),  \n" +
            "	IN pMountingTypeId INT,  \n" +
            "	IN pCategoryID INT,  \n" +
            "	IN pIsContainCPN TINYINT,  \n" +
            "	IN pRohsMainCategoryID INT,  \n" +
            "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
            "	IN prefSupplierMfgpnComponentID INT ,  \n" +
            "	IN ppackagingID INT,  \n" +
            "	IN pstrictCustomPart TINYINT,  \n" +
            "    IN pStrictCPNPart TINYINT,  \n" +
            "	IN psupplierID INT,  \n" +
            "    IN pPartType int,  \n" +
            "    IN pExcludeStatus INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE vRohsMainCategoryID INT;  \n" +
            "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
            "  \n" +
            "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
            "  \n" +
            "	 SET @SQLStatement1=CONCAT(\" SELECT *  \n" +
            "		FROM  \n" +
            "		(  \n" +
            "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
            "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
            "					c.isGoodPart,							c.RoHSStatusID,  \n" +
            "					c.mfgcodeID,          					c.rev,  \n" +
            "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
            "                    fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') mfgCodeName,  \n" +
            "					c.category,								c.imageURL,						c.documentPath,  \n" +
            "					c.mfgPNDescription,				c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
            "					c.value,								c.partPackage,					c.powerRating,  \n" +
            "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
            "					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
            "					c.pitchMating,							c.length,						c.width,  \n" +
            "					c.height,								c.voltage,						c.weight,  \n" +
            "					c.feature,								c.color,						c.partStatus,  \n" +
            "					c.uom,									c.uomClassID,					c.unit,  \n" +
            "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
            "					c.restrictPackagingUseWithpermission,  \n" +
            "					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
            "					r.rohsIcon,								r.name AS rohsName,  \n" +
            "					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
            "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
            "					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
            "					c.heightText,							c.isCPN,						c.isCustom,  \n" +
            "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
            "					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
            "					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
            "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
            "					c.plannedValuePerBuild,					c.programingRequired,  \n" +
            "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
            "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
            "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
            "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
            "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
            "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
            "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
            "                    c.shelfLifeDateType,					c.isReceiveBulkItem,			c.packagingID,  \n" +
            "                    c.dateCodeFormatID,						dc.dateCodeFormat  \n" +
            "			FROM 	component c  \n" +
            "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id  \n" +
            "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
            "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
            "            LEFT JOIN date_code_format dc ON dc.id = c.dateCodeFormatID  AND dc.isDeleted = 0  \n" +
            "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
            "			WHERE 	c.isdeleted = 0  \");  \n" +
            "  if  pId is not null then  \n" +
            "    		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND c.id = \" ,pId );  \n" +
            "    end if;  \n" +
            "  \n" +
            "    if  pMfgType is not null then  \n" +
            "    		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND m.mfgType = '\",pMfgType,\"' \");  \n" +
            "    end if;  \n" +
            "  \n" +
            "    if  pRoHSStatusID is not null then  \n" +
            "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.RoHSStatusID = \", pRoHSStatusID );  \n" +
            "	 end if;  \n" +
            "	if  pMfgCodeId is not null then  \n" +
            "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.mfgcodeID = \",pMfgCodeId );  \n" +
            "	 end if;  \n" +
            "	if  pMountingType is not null then  \n" +
            "    	SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND mt.name = '\",pMountingType,\"' \");  \n" +
            "	 end if;  \n" +
            "	if  pMountingTypeId is not null then  \n" +
            "				SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mountingTypeID = \",pMountingTypeId );  \n" +
            "	 end if;  \n" +
            "	if  pCategoryID is not null then  \n" +
            "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.category = \", pCategoryID  );  \n" +
            "	 end if;  \n" +
            "	/* Fetch EXCEPT CPN part */  \n" +
            "	if  ifnull(pIsContainCPN,false) = false  then  \n" +
            "      #(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
            "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.isCPN = FALSE \");  \n" +
            "	 end if;  \n" +
            "     /* Fetch only CPN part */  \n" +
            "	if  ifnull(pStrictCPNPart,false) != false  then  \n" +
            "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.isCPN = TRUE \");  \n" +
            "	 end if;  \n" +
            "  \n" +
            "	if  pRohsMainCategoryID is not null then  \n" +
            "		 SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
            "		/*===>this logic is added to compare invert rohs category*/  \n" +
            "		IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
            "			IF pRohsMainCategoryID = -1 THEN  \n" +
            "				SET vRohsMainCategoryID = -2;  \n" +
            "			ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
            "				SET vRohsMainCategoryID = -1;  \n" +
            "			END IF;  \n" +
            "		END IF;  \n" +
            "        /*<===this logic is added to compare invert rohs category*/  \n" +
            "		#AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
            "   		if vRohsMainCategoryID is not null then  \n" +
            "        SET @SQLStatement1=CONCAT(@SQLStatement1,\" and  r.refMainCategoryID  = \",vRohsMainCategoryID );  \n" +
            "        end if;  \n" +
            "	 end if;  \n" +
            "	if  prefSupplierMfgpnComponentID is not null then  \n" +
            "    	#AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
            "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" c.refSupplierMfgpnComponentID <=> IFNULL(\",prefSupplierMfgpnComponentID,\", c.refSupplierMfgpnComponentID)  \");  \n" +
            "	 end if;  \n" +
            "	if  pPartType is not null then  \n" +
            "        #AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
            "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.partType = '\",pPartType,\"' \");  \n" +
            "	 end if;  \n" +
            "	if  ppackagingID is not null then  \n" +
            "    	#AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
            "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.packagingID <=> IFNULL(\",ppackagingID,\",c.packagingID) \");  \n" +
            "	 end if;  \n" +
            "	if  pstrictCustomPart is not null then  \n" +
            "			#AND c.category != 3  AND c.iscustom = 1  \n" +
            "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.category != 3  AND c.iscustom = 1 \");  \n" +
            "	 end if;  \n" +
            "	if  psupplierID is not null and pstrictCustomPart  = 1 then  \n" +
            "		/* Old logic  \n" +
            "        (c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
            "									FROM supplier_mapping_mst smm  \n" +
            "									WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
            "					c.mfgcodeid IN (SELECT mc.id  \n" +
            "										FROM mfgcodemst mc  \n" +
            "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
            "					c.mfgcodeid IN (SELECT mc.id  \n" +
            "										FROM mfgcodemst mc  \n" +
            "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
            "			)  \n" +
            "        */  \n" +
            "        SET @SQLStatement1=CONCAT(@SQLStatement1,\"  AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
            "																			FROM supplier_mapping_mst smm  \n" +
            "																			WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(\",psupplierID,\",smm.supplierID)  \n" +
            "																		union all /*get mfg which set as company*/  \n" +
            "																		SELECT mc.id  \n" +
            "																				FROM mfgcodemst mc  \n" +
            "																				WHERE mc.iscompany = 1 AND mc.isdeleted = 0  \n" +
            "																		union all /* get All Customer code */  \n" +
            "																		SELECT mc.id  \n" +
            "																				FROM mfgcodemst mc  \n" +
            "																				WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0  \n" +
            "																		)  \");  \n" +
            "	 end if;  \n" +
            "	if  pExcludeStatus is not null then  \n" +
            "    #AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
            "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.partStatus != '\",pExcludeStatus,\"' \");  \n" +
            "	 end if;  \n" +
            "     /*Close Inner query section */  \n" +
            "     SET @SQLStatement1=CONCAT(@SQLStatement1,\" ) AS a  where 1= 1 \");  \n" +
            "  \n" +
            "     if  pSearch is not null then  \n" +
            "     /* old query(  \n" +
            "				(pSearch IS NULL AND 1 = 1) OR  \n" +
            "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
            "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
            "													WHERE opn.refcomponentid = a.id  \n" +
            "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
            "											)  \n" +
            "										)  \n" +
            "				)  \n" +
            "		)  \n" +
            "     */  \n" +
            "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and  exists ( select 1 from ( select a.id, a.mfgpn name from dual  \n" +
            "																					union all  \n" +
            "																					select opn.refcomponentid ,opn.name from component_otherpn opn where opn.refcomponentid = a.id  \n" +
            "																				) x where x.id  = a.id and x.name  LIKE CONCAT('%\", pSearch , \"%')  ) \");  \n" +
            "	 end if;  \n" +
            "  \n" +
            "     	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ORDER BY mfgPN For update\");  \n" +
            "     PREPARE query1 FROM @SQLStatement1;  \n" +
            "		EXECUTE query1;  \n" +
            "		DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "    /* this logic used in purchase order when supplier is strictly custom part */  \n" +
            "   /*  \n" +
            "	IF(pstrictCustomPart = 1)THEN  \n" +
            "		SELECT *  \n" +
            "		FROM  \n" +
            "		(  \n" +
            "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
            "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
            "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
            "					c.mfgcodeID,          					c.rev,  \n" +
            "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
            "					c.category,								c.imageURL,						c.documentPath,  \n" +
            "					c.mfgPNDescription,						c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
            "					c.value,								c.partPackage,					c.powerRating,  \n" +
            "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
            "					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
            "					c.pitchMating,							c.length,						c.width,  \n" +
            "					c.height,								c.voltage,						c.weight,  \n" +
            "					c.feature,								c.color,						c.partStatus,  \n" +
            "					c.uom,									c.uomClassID,					c.unit,  \n" +
            "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
            "					c.restrictPackagingUseWithpermission,  \n" +
            "					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
            "					r.rohsIcon,								r.name AS rohsName,  \n" +
            "					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
            "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
            "					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
            "					c.heightText,							c.isCPN,						c.isCustom,  \n" +
            "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
            "					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
            "					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
            "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
            "					c.plannedValuePerBuild,					c.programingRequired,  \n" +
            "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
            "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
            "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
            "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
            "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
            "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
            "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
            "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
            "			FROM 	component c  \n" +
            "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
            "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
            "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
            "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
            "			WHERE 	c.isdeleted = 0  \n" +
            "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
            "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
            "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
            "			AND 	c.id = IFNULL(pId, c.id)  \n" +
            "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
            "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
            "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
            "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
            "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
            "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
            "			AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
            "									FROM supplier_mapping_mst smm  \n" +
            "									WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
            "					c.mfgcodeid IN (SELECT mc.id  \n" +
            "										FROM mfgcodemst mc  \n" +
            "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
            "					c.mfgcodeid IN (SELECT mc.id  \n" +
            "										FROM mfgcodemst mc  \n" +
            "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
            "			)  \n" +
            "			AND c.category != 3  \n" +
            "			AND c.iscustom = 1  \n" +
            "		) AS a  \n" +
            "		WHERE (  \n" +
            "				(pSearch IS NULL AND 1 = 1) OR  \n" +
            "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
            "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
            "													WHERE opn.refcomponentid = a.id  \n" +
            "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
            "											)  \n" +
            "										)  \n" +
            "				)  \n" +
            "		)  \n" +
            "		ORDER BY mfgPN;  \n" +
            "  \n" +
            "	ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart = 0) THEN  */  \n" +
            "	/* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
            "    Reports, Price Break Update, Customer Part, Good-Bad Mapping Part, Supplier Quote, Supplier RMA */  \n" +
            "	/*	SELECT * FROM  \n" +
            "		(  \n" +
            "			 SELECT c.id,							CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
            "					c.mfgPN orgMfgPN, 					c.packaginggroupID, 					c.PIDCode,  \n" +
            "					c.isGoodPart, 						c.RoHSStatusID, 						c.rohsgroupID,  \n" +
            "					c.mfgcodeID,					    c.rev,  \n" +
            "					m.mfgCode, 							m.mfgType,								m.mfgName,  \n" +
            "					c.category,							c.imageURL,								c.documentPath,  \n" +
            "					c.mfgPNDescription,					c.minOperatingTemp,        				c.maxOperatingTemp,  \n" +
            "					c.value,							c.partPackage,							c.powerRating,  \n" +
            "					c.functionalCategoryID,         	c.mountingTypeID,						c.connecterTypeID,  \n" +
            "					c.noOfPosition,        				c.noOfRows,								c.pitch,  \n" +
            "					c.pitchMating,        				c.length,								c.width,  \n" +
            "					c.height,        					c.voltage,								c.weight,  \n" +
            "					c.feature,        					c.color,								c.partStatus,  \n" +
            "					c.uom,					        	c.uomClassID,							c.unit,  \n" +
            "					c.restrictUsePermanently,			c.restrictUSEwithpermission,			c.restrictPackagingUsePermanently,  \n" +
            "					c.restrictPackagingUseWithpermission,  \n" +
            "					u.abbreviation AS uomName,			u.unitName AS  unitName,  \n" +
            "					r.rohsIcon,							r.name AS rohsName,  \n" +
            "					c.partPackageID,        			c.bomLock,								c.businessRisk,  \n" +
            "					c.costCategoryID,					c.deviceMarking,						c.driverToolRequired,  \n" +
            "					c.eau,								c.epicorType,							c.functionalTestingRequired,  \n" +
            "					c.heightText,						c.isCPN,								c.isCustom,  \n" +
            "					c.leadTime,							c.matingPartRquired,					c.maxPriceLimit,  \n" +
            "					c.maxQtyonHand,						c.minimum,								c.mult,  \n" +
            "					c.packageQty,						c.partType,								c.pcbPerArray,  \n" +
            "					c.pickupPadRequired,				c.plannedOverRunPercentagePerBuild, 	c.plannedValuePerBuild,  \n" +
            "					c.programingRequired,				c.rfqOnly,								c.saftyStock,  \n" +
            "					c.scrapRatePercentagePerBuild, 		c.scrapValuePerBuild,					c.selfLifeDays,  \n" +
            "					c.shelfListDaysThresholdPercentage, c.temperatureCoefficient,				c.temperatureCoefficientUnit,  \n" +
            "					c.temperatureCoefficientValue,		c.trackSerialNumber,					c.refSupplierMfgpnComponentID,  \n" +
            "					c.refMfgPNMfgCodeId,  \n" +
            "					vu.mfgName  supplierPartMfgName, 	vu.mfgPN supplierPartMfgPn, 			vu.mfgCode supplierPartMfgCode,  \n" +
            "					c.isWaterSoluble,        			c.isNoClean,        					c.isFluxNotApplicable,  \n" +
            "					c.detailDescription,					c.isHazmatMaterial, 				c.umidSPQ,  \n" +
            "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
            "			FROM 	component c  \n" +
            "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND (m.isdeleted = 0 AND  m.mfgType = IFNULL(pMfgType, m.mfgType))  \n" +
            "			JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND mt.name = pMountingType  \n" +
            "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
            "			JOIN  	uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
            "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
            "			WHERE 	c.isdeleted = 0  \n" +
            "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
            "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
            "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
            "			AND		c.id = IFNULL(pId, c.id) AND c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
            "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
            "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
            "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
            "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
            "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
            "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
            "  \n" +
            "		) AS a  \n" +
            "		WHERE (  \n" +
            "				(pSearch IS NULL AND 1 = 1) OR  \n" +
            "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
            "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
            "													WHERE opn.refcomponentid = a.id  \n" +
            "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
            "											)  \n" +
            "										)  \n" +
            "				)  \n" +
            "		)  \n" +
            "		ORDER BY mfgPN;  \n" +
            "  \n" +
            "	ELSE  */  \n" +
            "	  /* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
            "	  Reports,  Price Break Update,  Customer Part,  Good-Bad Mapping Part,  Supplier Quote,  Supplier RMAb*/  \n" +
            "  /*  \n" +
            "		select *  \n" +
            "		from  \n" +
            "		(  \n" +
            "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,  \n" +
            "					c.mfgPN orgMfgPN,			c.packaginggroupID,					c.PIDCode,  \n" +
            "					c.isGoodPart,				c.RoHSStatusID,						c.rohsgroupID,  \n" +
            "					c.mfgcodeID,          		c.rev,  \n" +
            "					m.mfgCode,					m.mfgName,							m.mfgType,  \n" +
            "					c.tolerance,				c.category,							c.imageURL,  \n" +
            "					c.documentPath,				c.mfgPNDescription,					c.minOperatingTemp,  \n" +
            "					c.maxOperatingTemp,			c.value,							c.partPackage,  \n" +
            "					c.powerRating,				c.functionalCategoryID,				c.mountingTypeID,  \n" +
            "					c.connecterTypeID,			c.noOfPosition,           	 		c.noOfRows,  \n" +
            "					c.pitch,            		c.pitchMating,            			c.length,  \n" +
            "					c.width,            		c.height,							c.voltage,  \n" +
            "					c.weight,            		c.feature,            				c.color,  \n" +
            "					c.partStatus,            	c.uom,            					c.uomClassID,  \n" +
            "					c.unit,            			c.restrictUsePermanently,			c.restrictUSEwithpermission,  \n" +
            "					c.restrictPackagingUsePermanently,								c.restrictPackagingUseWithpermission,  \n" +
            "					c.packagingID,				c.packaging,  \n" +
            "					u.abbreviation AS uomName,	u.unitName AS unitName,  \n" +
            "					r.rohsIcon,					r.name AS rohsName,  \n" +
            "					c.partPackageID,			c.bomLock,							c.businessRisk,  \n" +
            "					c.costCategoryID,			c.deviceMarking,					c.driverToolRequired,  \n" +
            "					c.eau,						c.epicorType,						c.functionalTestingRequired,  \n" +
            "					c.heightText,				c.isCPN,							c.isCustom,  \n" +
            "					c.leadTime,            		c.matingPartRquired,				c.maxPriceLimit,  \n" +
            "					c.maxQtyonHand,           	c.minimum,							c.mult,  \n" +
            "					c.packageQty,            	c.partType,							c.pcbPerArray,  \n" +
            "					c.pickupPadRequired,		c.plannedOverRunPercentagePerBuild, c.plannedValuePerBuild,  \n" +
            "					c.programingRequired,		c.rfqOnly,							c.saftyStock,  \n" +
            "					c.scrapRatePercentagePerBuild,		c.scrapValuePerBuild,		c.selfLifeDays,  \n" +
            "					c.shelfListDaysThresholdPercentage,	c.temperatureCoefficient,	c.temperatureCoefficientUnit,  \n" +
            "					c.temperatureCoefficientValue,		c.trackSerialNumber,		c.refSupplierMfgpnComponentID,  \n" +
            "					c.refMfgPNMfgCodeId,  \n" +
            "					vu.mfgName  supplierPartMfgName,  \n" +
            "					vu.mfgPN supplierPartMfgPn,  \n" +
            "					vu.mfgCode supplierPartMfgCode,  \n" +
            "					c.isWaterSoluble,			c.isNoClean,						c.isFluxNotApplicable,  \n" +
            "					c.detailDescription,		c.isHazmatMaterial, 				c.umidSPQ,  \n" +
            "                    c.shelfLifeDateType,		c.isReceiveBulkItem  \n" +
            "			from component c  \n" +
            "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
            "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
            "			INNER JOIN uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
            "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
            "			WHERE 	c.isdeleted = 0  \n" +
            "			AND 	c.id = IFNULL(pId, c.id)  \n" +
            "			AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)  \n" +
            "			AND 	c.RoHSStatusID = IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
            "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
            "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
            "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
            "			AND 	c.packagingID <=> IFNULL(ppackagingID, c.packagingID)  \n" +
            "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
            "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
            "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
            "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN = c.isCPN ELSE c.isCPN = FALSE END)  \n" +
            "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
            "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)  \n" +
            "		) AS a  \n" +
            "		WHERE (  \n" +
            "				(pSearch IS NULL AND 1 = 1) OR  \n" +
            "				(pSearch IS NOT NULL AND  \n" +
            "					(  \n" +
            "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
            "						EXISTS( SELECT  1  \n" +
            "								FROM 	component_otherpn opn  \n" +
            "								WHERE 	opn.refcomponentid = a.id  \n" +
            "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
            "					)  \n" +
            "				)  \n" +
            "			)  \n" +
            "		ORDER BY mfgPN;  \n" +
            "	END IF;   */  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 17-03-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (6025,'2.00','V1',' User Story 42361: Apply Part Master Normalization effect in Supplier Invoice Flow - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 6025:
            allDbChangesArray.push(
            /* **************************** New Script -> 21-03-2022 *********************************** */
           "CREATE or replace VIEW `vu_component` AS  \n" +
"    SELECT  \n" +
"        `c`.`id` AS `id`,  \n" +
"		`c`.`mfgType` AS `mfgType`,  \n" +
"		`c`.`refMfgPNMfgCodeId` AS `refMfgPNMfgCodeId`,  \n" +
"		`c`.`refSupplierMfgpnComponentID` AS `refSupplierMfgpnComponentID`,  \n" +
"        `c`.`isCPN` AS `isCPN`,  \n" +
"        `c`.`isCustom` AS `isCustom`,  \n" +
"		`c`.`rfqOnly` AS `rfqOnly`,  \n" +
"		`c`.`category` AS `category`,  \n" +
"		`c`.`partType` AS `partType`,  \n" +
"        `c`.`epicorType` AS `epicorType`,  \n" +
"        `c`.`dataSheetLink` AS `dataSheetLink`,  \n" +
"		`c`.`imageURL` AS `imageURL`,  \n" +
"        `c`.`assemblyType` AS `assemblyType`,  \n" +
"        `c`.`mfgcodeID` AS `mfgcodeID`,  \n" +
"        `c`.`mfrNameText` AS `mfrNameText`,  \n" +
"         `c`.`custAssyPN` AS `custAssyPN`,  \n" +
"        `c`.`rev` AS `rev`,  \n" +
"		`c`.`mfgPN` AS `mfgPN`,  \n" +
"        `c`.`assyCode` AS `assyCode`,  \n" +
"        `c`.`nickName` AS `nickName`,  \n" +
"		`c`.`PIDCode` AS `PIDCode`,  \n" +
"        `c`.`isPIDManual` AS `isPIDManual`,  \n" +
"		`c`.`productionPN` AS `productionPN`,  \n" +
"		`c`.`costCategoryID` AS `costCategoryID`,  \n" +
"		`c`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
"		`c`.`detailDescription` AS `detailDescription`,  \n" +
"        `c`.`specialNote` AS `specialNote`,  \n" +
"        `c`.`purchasingComment` AS `purchasingComment`,  \n" +
"        `c`.`partStatus` AS `partStatus`,  \n" +
"		`c`.`partStatusText` AS `partStatusText`,  \n" +
"        `c`.`ltbDate` AS `ltbDate`,  \n" +
"        `c`.`eolDate` AS `eolDate`,  \n" +
"		`c`.`obsoleteDate` AS `obsoleteDate`,  \n" +
"        `c`.`reversalDate` AS `reversalDate`,  \n" +
"		`c`.`isReversal` AS `isReversal`,  \n" +
"		`c`.`predictedObsolescenceYear` AS `predictedObsolescenceYear`,  \n" +
"        `c`.`leadTime` AS `leadTime`,  \n" +
"		`c`.`rfqNumber` AS `rfqNumber`,  \n" +
"		`c`.`quoteValidTillDate` AS `quoteValidTillDate`,  \n" +
"        `c`.`internalReference` AS `internalReference`,  \n" +
"		`c`.`serialNumber` AS `serialNumber`,  \n" +
"		`c`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
"        `c`.`rohsText` AS `rohsText`,  \n" +
"		`c`.`rohsDeviation` AS `rohsDeviation`,  \n" +
"		`c`.`isHazmatMaterial` AS `isHazmatMaterial`,  \n" +
"        `c`.`mslID` AS `mslID`,  \n" +
"		`c`.`isWaterSoluble` AS `isWaterSoluble`,  \n" +
"        `c`.`isNoClean` AS `isNoClean`,  \n" +
"        `c`.`isFluxNotApplicable` AS `isFluxNotApplicable`,  \n" +
"		`c`.`packageQty` AS `packageQty`,  \n" +
"	    `c`.`countryOfOrigin` AS `countryOfOrigin`,  \n" +
"        `c`.`htsCode` AS `htsCode`,  \n" +
"		`c`.`deviceMarking` AS `deviceMarking`,  \n" +
"        `c`.`packagingID` AS `packagingID`,  \n" +
"		`c`.`packaging` AS `packaging`,  \n" +
"        `c`.`minimum` AS `minimum`,  \n" +
"        `c`.`mult` AS `mult`,  \n" +
"        `c`.`umidSPQ` AS `umidSPQ`,  \n" +
"        `c`.`unit` AS `unit`,  \n" +
"		`c`.`uomClassID` AS `uomClassID`,  \n" +
"		`c`.`uom` AS `uom`,  \n" +
"        `c`.`uomText` AS `uomText`,  \n" +
"		`c`.`pcbPerArray` AS `pcbPerArray`,  \n" +
"        `c`.`price` AS `price`,  \n" +
"		`c`.`isGoodPart` AS `isGoodPart`,  \n" +
"		`c`.`replacementPartID` AS `replacementPartID`,  \n" +
"		`c`.`systemGenerated` AS `systemGenerated`,  \n" +
"        `c`.`documentPath` AS `documentPath`,  \n" +
"        `c`.`frequencyType` AS `frequencyType`,  \n" +
"		`c`.`frequency` AS `frequency`,  \n" +
"		`c`.`salesacctId` AS `salesacctId`,  \n" +
"        `c`.`purchaseacctId` AS `purchaseacctId`,  \n" +
"		`c`.`isReceiveBulkItem` AS `isReceiveBulkItem`,  \n" +
"        `c`.`dateCodeFormatID` AS `dateCodeFormatID`,  \n" +
"        `c`.`isDateCodeFormat` AS `isDateCodeFormat`,  \n" +
"        `c`.`unqDate` AS `unqDate`,  \n" +
"		 `c`.`isDeleted` AS `isDeleted`,  \n" +
"        `c`.`createdBy` AS `createdBy`,  \n" +
"        `c`.`createdAt` AS `createdAt`,  \n" +
"        `c`.`createByRoleId` AS `createByRoleId`,  \n" +
"        `c`.`updatedBy` AS `updatedBy`,  \n" +
"        `c`.`updatedAt` AS `updatedAt`,  \n" +
"        `c`.`updateByRoleId` AS `updateByRoleId`,  \n" +
"        `c`.`deletedBy` AS `deletedBy`,  \n" +
"        `c`.`deletedAt` AS `deletedAt`,  \n" +
"        `c`.`deleteByRoleId` AS `deleteByRoleId`,  \n" +
"        `ca`.`packaginggroupID` AS `packaginggroupID`,  \n" +
"        `ca`.`isCloudApiUpdateAttribute` AS `isCloudApiUpdateAttribute`,  \n" +
"        `ca`.`functionalCategoryID` AS `functionalCategoryID`,  \n" +
"        `ca`.`functionalCategoryText` AS `functionalCategoryText`,  \n" +
"        `ca`.`mountingTypeID` AS `mountingTypeID`,  \n" +
"        `ca`.`mountingTypeText` AS `mountingTypeText`,  \n" +
"        `ca`.`isEpoxyMount` AS `isEpoxyMount`,  \n" +
"        `ca`.`partPackageID` AS `partPackageID`,  \n" +
"        `ca`.`partPackage` AS `partPackage`,  \n" +
"        `ca`.`connecterTypeID` AS `connecterTypeID`,  \n" +
"        `ca`.`connectorTypeText` AS `connectorTypeText`,  \n" +
"        `ca`.`feature` AS `feature`,  \n" +
"        `ca`.`noOfPosition` AS `noOfPosition`,  \n" +
"        `ca`.`noOfPositionText` AS `noOfPositionText`,  \n" +
"        `ca`.`noOfRows` AS `noOfRows`,  \n" +
"        `ca`.`noOfRowsText` AS `noOfRowsText`,  \n" +
"        `ca`.`operatingTemp` AS `operatingTemp`,  \n" +
"        `ca`.`minOperatingTemp` AS `minOperatingTemp`,  \n" +
"        `ca`.`maxOperatingTemp` AS `maxOperatingTemp`,  \n" +
"        `ca`.`temperatureCoefficient` AS `temperatureCoefficient`,  \n" +
"        `ca`.`temperatureCoefficientValue` AS `temperatureCoefficientValue`,  \n" +
"        `ca`.`temperatureCoefficientUnit` AS `temperatureCoefficientUnit`,  \n" +
"        `ca`.`pitch` AS `pitch`,  \n" +
"        `ca`.`pitchMating` AS `pitchMating`,  \n" +
"        `ca`.`sizeDimension` AS `sizeDimension`,  \n" +
"        `ca`.`length` AS `length`,  \n" +
"        `ca`.`width` AS `width`,  \n" +
"        `ca`.`height` AS `height`,  \n" +
"        `ca`.`heightText` AS `heightText`,  \n" +
"        `ca`.`tolerance` AS `tolerance`,  \n" +
"        `ca`.`voltage` AS `voltage`,  \n" +
"        `ca`.`value` AS `value`,  \n" +
"        `ca`.`powerRating` AS `powerRating`,  \n" +
"        `ca`.`weight` AS `weight`,  \n" +
"        `ca`.`color` AS `color`,  \n" +
"        `ca`.`isTemperatureSensitive` AS `isTemperatureSensitive`,  \n" +
"        IFNULL(`cb`.`bomLock`, 0) AS `bomLock`,  \n" +
"        `cb`.`liveInternalVersion` AS `liveInternalVersion`,  \n" +
"        `cb`.`exteranalAPICallStatus` AS `exteranalAPICallStatus`,  \n" +
"        `cb`.`isBOMVerified` AS `isBOMVerified`,  \n" +
"        `cb`.`liveVersion` AS `liveVersion`,  \n" +
"        `cb`.`isActivityStart` AS `isActivityStart`,  \n" +
"        `cb`.`activityStartBy` AS `activityStartBy`,  \n" +
"        `cb`.`activityStartAt` AS `activityStartAt`,  \n" +
"        `cb`.`activityStopAt` AS `activityStopAt`,  \n" +
"		`cs`.`functionalTypePartRequired` AS `functionalTypePartRequired`,  \n" +
"		`cs`.`mountingTypePartRequired` AS `mountingTypePartRequired`,  \n" +
"		`cs`.`businessRisk` AS `businessRisk`,  \n" +
"		`cs`.`totalSolderPoints` AS `totalSolderPoints`,  \n" +
"		`cs`.`trackSerialNumber` AS `trackSerialNumber`,  \n" +
"		`cs`.`umidVerificationRequire` AS `umidVerificationRequire`,  \n" +
"		`cs`.`isAutoVerificationOfAllAssemblyParts` AS `isAutoVerificationOfAllAssemblyParts`,  \n" +
"		`cs`.`restrictUSEwithpermission` AS `restrictUSEwithpermission`,  \n" +
"		`cs`.`restrictPackagingUseWithpermission` AS `restrictPackagingUseWithpermission`,  \n" +
"		`cs`.`restrictUsePermanently` AS `restrictUsePermanently`,  \n" +
"		`cs`.`restrictPackagingUsePermanently` AS `restrictPackagingUsePermanently`,  \n" +
"		`cs`.`scrapRatePercentagePerBuild` AS `scrapRatePercentagePerBuild`,  \n" +
"		`cs`.`scrapValuePerBuild` AS `scrapValuePerBuild`,  \n" +
"		`cs`.`plannedOverRunPercentagePerBuild` AS `plannedOverRunPercentagePerBuild`,  \n" +
"		`cs`.`plannedValuePerBuild` AS `plannedValuePerBuild`,  \n" +
"		`cs`.`selfLifeDays` AS `selfLifeDays`,  \n" +
"		`cs`.`shelfLifeAcceptanceDays` AS `shelfLifeAcceptanceDays`,  \n" +
"		`cs`.`shelfListDaysThresholdPercentage` AS `shelfListDaysThresholdPercentage`,  \n" +
"		`cs`.`maxShelfLifeAcceptanceDays` AS `maxShelfLifeAcceptanceDays`,  \n" +
"		`cs`.`maxShelfListDaysThresholdPercentage` AS `maxShelfListDaysThresholdPercentage`,  \n" +
"		`cs`.`shelfLifeDateType` AS `shelfLifeDateType`,  \n" +
"		`cs`.`alertExpiryDays` AS `alertExpiryDays`,  \n" +
"		`cs`.`programingRequired` AS `programingRequired`,  \n" +
"		`cs`.`driverToolRequired` AS `driverToolRequired`,  \n" +
"		`cs`.`matingPartRquired` AS `matingPartRquired`,  \n" +
"		`cs`.`pickupPadRequired` AS `pickupPadRequired`,  \n" +
"		`cs`.`functionalTestingRequired` AS `functionalTestingRequired`,  \n" +
"		`cs`.`requiredTestTime` AS `requiredTestTime`,  \n" +
"		`cs`.`saftyStock` AS `saftyStock`,  \n" +
"		`cs`.`eau` AS `eau`,  \n" +
"		`cs`.`packagingWeight` AS `packagingWeight`,  \n" +
"		`cs`.`packagingWeightUom` AS `packagingWeightUom`,  \n" +
"		`cs`.`grossWeight` AS `grossWeight`,  \n" +
"		`cs`.`grossWeightUom` AS `grossWeightUom`,  \n" +
"		`cs`.`maxPriceLimit` AS `maxPriceLimit`,  \n" +
"		`cs`.`maxQtyonHand` AS `maxQtyonHand`  \n" +
"    FROM  \n" +
"        `component` `c`  \n" +
"        INNER JOIN `component_attributes` `ca` ON (`ca`.`refComponentID` = (CASE WHEN (`c`.`mfgType` = 'MFG') THEN `c`.`id` ELSE `c`.`refSupplierMfgpnComponentID` END))  \n" +
"        LEFT JOIN `component_bomsetting` `cb` ON (`cb`.`refComponentID` = (CASE WHEN (`c`.`mfgType` = 'MFG') THEN `c`.`id` ELSE `c`.`refSupplierMfgpnComponentID` END))  \n" +
"        LEFT JOIN component_settings cs  ON (`cs`.`refComponentID` = (CASE WHEN (`c`.`mfgType` = 'MFG') THEN `c`.`id` ELSE `c`.`refSupplierMfgpnComponentID` END))  \n" +
"    WHERE (`c`.`isDeleted` = 0) ; \n" +
"create or replace view vu_component_mpn as    SELECT  \n" +
"        `c`.`id` AS `id`,  \n" +
"		`c`.`mfgType` AS `mfgType`,  \n" +
"		`c`.`refMfgPNMfgCodeId` AS `refMfgPNMfgCodeId`,  \n" +
"		`c`.`refSupplierMfgpnComponentID` AS `refSupplierMfgpnComponentID`,  \n" +
"        `c`.`isCPN` AS `isCPN`,  \n" +
"        `c`.`isCustom` AS `isCustom`,  \n" +
"		`c`.`rfqOnly` AS `rfqOnly`,  \n" +
"		`c`.`category` AS `category`,  \n" +
"		`c`.`partType` AS `partType`,  \n" +
"        `c`.`epicorType` AS `epicorType`,  \n" +
"        `c`.`dataSheetLink` AS `dataSheetLink`,  \n" +
"		`c`.`imageURL` AS `imageURL`,  \n" +
"        `c`.`assemblyType` AS `assemblyType`,  \n" +
"        `c`.`mfgcodeID` AS `mfgcodeID`,  \n" +
"        `c`.`mfrNameText` AS `mfrNameText`,  \n" +
"         `c`.`custAssyPN` AS `custAssyPN`,  \n" +
"        `c`.`rev` AS `rev`,  \n" +
"		`c`.`mfgPN` AS `mfgPN`,  \n" +
"        `c`.`assyCode` AS `assyCode`,  \n" +
"        `c`.`nickName` AS `nickName`,  \n" +
"		`c`.`PIDCode` AS `PIDCode`,  \n" +
"        `c`.`isPIDManual` AS `isPIDManual`,  \n" +
"		`c`.`productionPN` AS `productionPN`,  \n" +
"		`c`.`costCategoryID` AS `costCategoryID`,  \n" +
"		`c`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
"		`c`.`detailDescription` AS `detailDescription`,  \n" +
"        `c`.`specialNote` AS `specialNote`,  \n" +
"        `c`.`purchasingComment` AS `purchasingComment`,  \n" +
"        `c`.`partStatus` AS `partStatus`,  \n" +
"		`c`.`partStatusText` AS `partStatusText`,  \n" +
"        `c`.`ltbDate` AS `ltbDate`,  \n" +
"        `c`.`eolDate` AS `eolDate`,  \n" +
"		`c`.`obsoleteDate` AS `obsoleteDate`,  \n" +
"        `c`.`reversalDate` AS `reversalDate`,  \n" +
"		`c`.`isReversal` AS `isReversal`,  \n" +
"		`c`.`predictedObsolescenceYear` AS `predictedObsolescenceYear`,  \n" +
"        `c`.`leadTime` AS `leadTime`,  \n" +
"		`c`.`rfqNumber` AS `rfqNumber`,  \n" +
"		`c`.`quoteValidTillDate` AS `quoteValidTillDate`,  \n" +
"        `c`.`internalReference` AS `internalReference`,  \n" +
"		`c`.`serialNumber` AS `serialNumber`,  \n" +
"		`c`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
"        `c`.`rohsText` AS `rohsText`,  \n" +
"		`c`.`rohsDeviation` AS `rohsDeviation`,  \n" +
"		`c`.`isHazmatMaterial` AS `isHazmatMaterial`,  \n" +
"        `c`.`mslID` AS `mslID`,  \n" +
"		`c`.`isWaterSoluble` AS `isWaterSoluble`,  \n" +
"        `c`.`isNoClean` AS `isNoClean`,  \n" +
"        `c`.`isFluxNotApplicable` AS `isFluxNotApplicable`,  \n" +
"		`c`.`packageQty` AS `packageQty`,  \n" +
"	    `c`.`countryOfOrigin` AS `countryOfOrigin`,  \n" +
"        `c`.`htsCode` AS `htsCode`,  \n" +
"		`c`.`deviceMarking` AS `deviceMarking`,  \n" +
"        `c`.`packagingID` AS `packagingID`,  \n" +
"		`c`.`packaging` AS `packaging`,  \n" +
"        `c`.`minimum` AS `minimum`,  \n" +
"        `c`.`mult` AS `mult`,  \n" +
"        `c`.`umidSPQ` AS `umidSPQ`,  \n" +
"        `c`.`unit` AS `unit`,  \n" +
"		`c`.`uomClassID` AS `uomClassID`,  \n" +
"		`c`.`uom` AS `uom`,  \n" +
"        `c`.`uomText` AS `uomText`,  \n" +
"		`c`.`pcbPerArray` AS `pcbPerArray`,  \n" +
"        `c`.`price` AS `price`,  \n" +
"		`c`.`isGoodPart` AS `isGoodPart`,  \n" +
"		`c`.`replacementPartID` AS `replacementPartID`,  \n" +
"		`c`.`systemGenerated` AS `systemGenerated`,  \n" +
"        `c`.`documentPath` AS `documentPath`,  \n" +
"        `c`.`frequencyType` AS `frequencyType`,  \n" +
"		`c`.`frequency` AS `frequency`,  \n" +
"		`c`.`salesacctId` AS `salesacctId`,  \n" +
"        `c`.`purchaseacctId` AS `purchaseacctId`,  \n" +
"		`c`.`isReceiveBulkItem` AS `isReceiveBulkItem`,  \n" +
"        `c`.`dateCodeFormatID` AS `dateCodeFormatID`,  \n" +
"        `c`.`isDateCodeFormat` AS `isDateCodeFormat`,  \n" +
"        `c`.`unqDate` AS `unqDate`,  \n" +
"		 `c`.`isDeleted` AS `isDeleted`,  \n" +
"        `c`.`createdBy` AS `createdBy`,  \n" +
"        `c`.`createdAt` AS `createdAt`,  \n" +
"        `c`.`createByRoleId` AS `createByRoleId`,  \n" +
"        `c`.`updatedBy` AS `updatedBy`,  \n" +
"        `c`.`updatedAt` AS `updatedAt`,  \n" +
"        `c`.`updateByRoleId` AS `updateByRoleId`,  \n" +
"        `c`.`deletedBy` AS `deletedBy`,  \n" +
"        `c`.`deletedAt` AS `deletedAt`,  \n" +
"        `c`.`deleteByRoleId` AS `deleteByRoleId`,  \n" +
"        `ca`.`packaginggroupID` AS `packaginggroupID`,  \n" +
"        `ca`.`isCloudApiUpdateAttribute` AS `isCloudApiUpdateAttribute`,  \n" +
"        `ca`.`functionalCategoryID` AS `functionalCategoryID`,  \n" +
"        `ca`.`functionalCategoryText` AS `functionalCategoryText`,  \n" +
"        `ca`.`mountingTypeID` AS `mountingTypeID`,  \n" +
"        `ca`.`mountingTypeText` AS `mountingTypeText`,  \n" +
"        `ca`.`isEpoxyMount` AS `isEpoxyMount`,  \n" +
"        `ca`.`partPackageID` AS `partPackageID`,  \n" +
"        `ca`.`partPackage` AS `partPackage`,  \n" +
"        `ca`.`connecterTypeID` AS `connecterTypeID`,  \n" +
"        `ca`.`connectorTypeText` AS `connectorTypeText`,  \n" +
"        `ca`.`feature` AS `feature`,  \n" +
"        `ca`.`noOfPosition` AS `noOfPosition`,  \n" +
"        `ca`.`noOfPositionText` AS `noOfPositionText`,  \n" +
"        `ca`.`noOfRows` AS `noOfRows`,  \n" +
"        `ca`.`noOfRowsText` AS `noOfRowsText`,  \n" +
"        `ca`.`operatingTemp` AS `operatingTemp`,  \n" +
"        `ca`.`minOperatingTemp` AS `minOperatingTemp`,  \n" +
"        `ca`.`maxOperatingTemp` AS `maxOperatingTemp`,  \n" +
"        `ca`.`temperatureCoefficient` AS `temperatureCoefficient`,  \n" +
"        `ca`.`temperatureCoefficientValue` AS `temperatureCoefficientValue`,  \n" +
"        `ca`.`temperatureCoefficientUnit` AS `temperatureCoefficientUnit`,  \n" +
"        `ca`.`pitch` AS `pitch`,  \n" +
"        `ca`.`pitchMating` AS `pitchMating`,  \n" +
"        `ca`.`sizeDimension` AS `sizeDimension`,  \n" +
"        `ca`.`length` AS `length`,  \n" +
"        `ca`.`width` AS `width`,  \n" +
"        `ca`.`height` AS `height`,  \n" +
"        `ca`.`heightText` AS `heightText`,  \n" +
"        `ca`.`tolerance` AS `tolerance`,  \n" +
"        `ca`.`voltage` AS `voltage`,  \n" +
"        `ca`.`value` AS `value`,  \n" +
"        `ca`.`powerRating` AS `powerRating`,  \n" +
"        `ca`.`weight` AS `weight`,  \n" +
"        `ca`.`color` AS `color`,  \n" +
"        `ca`.`isTemperatureSensitive` AS `isTemperatureSensitive`,  \n" +
"        IFNULL(`cb`.`bomLock`, 0) AS `bomLock`,  \n" +
"        `cb`.`liveInternalVersion` AS `liveInternalVersion`,  \n" +
"        `cb`.`exteranalAPICallStatus` AS `exteranalAPICallStatus`,  \n" +
"        `cb`.`isBOMVerified` AS `isBOMVerified`,  \n" +
"        `cb`.`liveVersion` AS `liveVersion`,  \n" +
"        `cb`.`isActivityStart` AS `isActivityStart`,  \n" +
"        `cb`.`activityStartBy` AS `activityStartBy`,  \n" +
"        `cb`.`activityStartAt` AS `activityStartAt`,  \n" +
"        `cb`.`activityStopAt` AS `activityStopAt`,  \n" +
"		`cs`.`functionalTypePartRequired` AS `functionalTypePartRequired`,  \n" +
"		`cs`.`mountingTypePartRequired` AS `mountingTypePartRequired`,  \n" +
"		`cs`.`businessRisk` AS `businessRisk`,  \n" +
"		`cs`.`totalSolderPoints` AS `totalSolderPoints`,  \n" +
"		`cs`.`trackSerialNumber` AS `trackSerialNumber`,  \n" +
"		`cs`.`umidVerificationRequire` AS `umidVerificationRequire`,  \n" +
"		`cs`.`isAutoVerificationOfAllAssemblyParts` AS `isAutoVerificationOfAllAssemblyParts`,  \n" +
"		`cs`.`restrictUSEwithpermission` AS `restrictUSEwithpermission`,  \n" +
"		`cs`.`restrictPackagingUseWithpermission` AS `restrictPackagingUseWithpermission`,  \n" +
"		`cs`.`restrictUsePermanently` AS `restrictUsePermanently`,  \n" +
"		`cs`.`restrictPackagingUsePermanently` AS `restrictPackagingUsePermanently`,  \n" +
"		`cs`.`scrapRatePercentagePerBuild` AS `scrapRatePercentagePerBuild`,  \n" +
"		`cs`.`scrapValuePerBuild` AS `scrapValuePerBuild`,  \n" +
"		`cs`.`plannedOverRunPercentagePerBuild` AS `plannedOverRunPercentagePerBuild`,  \n" +
"		`cs`.`plannedValuePerBuild` AS `plannedValuePerBuild`,  \n" +
"		`cs`.`selfLifeDays` AS `selfLifeDays`,  \n" +
"		`cs`.`shelfLifeAcceptanceDays` AS `shelfLifeAcceptanceDays`,  \n" +
"		`cs`.`shelfListDaysThresholdPercentage` AS `shelfListDaysThresholdPercentage`,  \n" +
"		`cs`.`maxShelfLifeAcceptanceDays` AS `maxShelfLifeAcceptanceDays`,  \n" +
"		`cs`.`maxShelfListDaysThresholdPercentage` AS `maxShelfListDaysThresholdPercentage`,  \n" +
"		`cs`.`shelfLifeDateType` AS `shelfLifeDateType`,  \n" +
"		`cs`.`alertExpiryDays` AS `alertExpiryDays`,  \n" +
"		`cs`.`programingRequired` AS `programingRequired`,  \n" +
"		`cs`.`driverToolRequired` AS `driverToolRequired`,  \n" +
"		`cs`.`matingPartRquired` AS `matingPartRquired`,  \n" +
"		`cs`.`pickupPadRequired` AS `pickupPadRequired`,  \n" +
"		`cs`.`functionalTestingRequired` AS `functionalTestingRequired`,  \n" +
"		`cs`.`requiredTestTime` AS `requiredTestTime`,  \n" +
"		`cs`.`saftyStock` AS `saftyStock`,  \n" +
"		`cs`.`eau` AS `eau`,  \n" +
"		`cs`.`packagingWeight` AS `packagingWeight`,  \n" +
"		`cs`.`packagingWeightUom` AS `packagingWeightUom`,  \n" +
"		`cs`.`grossWeight` AS `grossWeight`,  \n" +
"		`cs`.`grossWeightUom` AS `grossWeightUom`,  \n" +
"		`cs`.`maxPriceLimit` AS `maxPriceLimit`,  \n" +
"		`cs`.`maxQtyonHand` AS `maxQtyonHand`  \n" +
"    FROM  \n" +
"        `component` `c`  \n" +
"        inner JOIN `component_attributes` `ca` ON `c`.`id` = `ca`.`refComponentID`  \n" +
"        LEFT JOIN `component_bomsetting` `cb` ON `c`.`id` = `cb`.`refComponentID`  \n" +
"		LEFT JOIN component_settings cs  ON  `c`.`id` =`cs`.`refComponentID`  \n" +
"    WHERE `c`.`mfgType` = 'MFG'  \n" +
"            AND `c`.`isDeleted` = 0;  \n" +
            /* **************************** Add Script Version -> 21-03-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (6026,'2.00','V1',' Change view vu_component_mpn,vu_component - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6026:
        allDbChangesArray.push(
        /* **************************** New Script -> 21-03-2022 *********************************** */

        "DROP PROCEDURE IF EXISTS Sproc_GetPermissionsPageListByRole;  \n" +
        "CREATE PROCEDURE `Sproc_GetPermissionsPageListByRole`(  \n" +
        "	IN ppageIndex INT,  \n" +
        "	IN precordPerPage INT,  \n" +
        "	IN pOrderBy VARCHAR(255),  \n" +
        "	IN pWhereClause VARCHAR(16383),  \n" +
        "	IN pUserId INT,  \n" +
        "	IN pRoleId INT,  \n" +
        "	IN isShowDefault INT  \n" +
        ")  \n" +
        "BEGIN  \n" +
        "  \n" +
        "	DECLARE pOffset INT;  \n" +
        "	DECLARE rowNumWhere VARCHAR(255);  \n" +
        "	DROP TEMPORARY TABLE IF EXISTS PageResults;  \n" +
        "	SELECT COUNT(*) INTO @result1 FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL;  \n" +
        "  \n" +
        " 	IF (isShowDefault = 1) THEN  \n" +
        " 		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS  \n" +
        " 			SELECT `pd`.`pageRoute`,`rp`.`roleID`, `rp`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `rp`.`RO`, `rp`.`RW`, `rp`.`isActive`, `rp`.`IsShortcut`,  \n" +
        " 			`rp`.`isHelpBlog` , `pd`.`parentPageID`, `pd`.`isDisplay`, `pd`.`hasChild`,`pd`.`menuRoute`,`pd`.`pageURL`, `pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`, `pd`.`paramDet`, 0 AS 'rightsCount'  \n" +
        " 			FROM `rolepagedetail` AS `rp`  \n" +
        " 			LEFT JOIN `page_detail` AS `pd` ON `rp`.`pageID` = `pd`.`pageID`  \n" +
        " 			WHERE `rp`.`roleID` = pRoleId  \n" +
        " 			AND `rp`.`deletedAt` IS NULL  \n" +
        " 			AND `pd`.`deletedAt` IS NULL  \n" +
        " 			AND `pd`.`isActive` = 1;  \n" +
        "  \n" +
        " 			INSERT INTO PageResults (pageRoute, roleID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass, paramDet)  \n" +
        " 			SELECT pageRoute, pRoleId AS roleID, pageID, pageName,menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass, paramDet  \n" +
        " 			FROM page_detail  \n" +
        " 			WHERE deletedAt IS NULL  \n" +
        " 			AND isActive = 1  \n" +
        " 			AND pageID NOT IN (SELECT pageID FROM rolepagedetail  \n" +
        " 			WHERE roleID = pRoleId AND deletedAt IS NULL);  \n" +
        " 	ELSE  \n" +
        "		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS  \n" +
        "			SELECT `pd`.`pageRoute`, `up`.`roleID`, `up`.`userID`, `up`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `up`.`RO`, `up`.`RW`, `up`.`isActive`,  \n" +
        "			`up`.`IsShortcut` , `up`.`isHelpBlog` , `pd`.`parentPageID`, `pd`.`isDisplay`,`up`.`IsShowInHomePage`,`pd`.`hasChild`,`pd`.`menuRoute`, `pd`.`pageURL`,`pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`, `pd`.`paramDet`, 0 AS 'rightsCount'  \n" +
        "			FROM `userpagedetail` AS `up`  \n" +
        "			LEFT JOIN `page_detail` AS `pd` ON `up`.`pageID` = `pd`.`pageID`  \n" +
        "			WHERE `up`.`userID` = pUserId  \n" +
        "			AND `up`.`roleID` = pRoleId  \n" +
        "			AND `up`.`deletedAt` IS NULL  \n" +
        "			AND `pd`.`deletedAt` IS NULL  \n" +
        "			AND `pd`.`isActive` = 1;  \n" +
        "  \n" +
        "		INSERT INTO PageResults (pageRoute,roleID, userID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass, paramDet)  \n" +
        "		SELECT pageRoute, pRoleId AS roleID, pUserId AS userID, pageID, pageName, menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass, paramDet  \n" +
        "		FROM page_detail WHERE deletedAt IS NULL AND isActive = 1 AND pageID NOT IN (SELECT pageID FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL);  \n" +
        " 	END IF;  \n" +
        "  \n" +
        "    UPDATE PageResults pr  \n" +
        "	SET pr.rightsCount = 1  \n" +
        "    WHERE EXISTS (select 1 from userpagedetail upd  \n" +
        "					JOIN users us ON us.id = upd.userID  AND us.isDeleted = 0  \n" +
        "					JOIN employees e ON us.employeeID = e.id AND e.isDeleted = 0 and e.isActive = 1  \n" +
        "				WHERE  \n" +
        "				upd.isActive = 1 AND upd.userID <> pUserId  AND pr.pageID = upd.pageID AND upd.isDeleted = 0);  \n" +
        "	 ##upd.roleID = pRoleId  \n" +
        "  \n" +
        "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
        "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pageName ASC\");  \n" +
        "	ELSE  \n" +
        "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
        "	END IF;  \n" +
        "  \n" +
        "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
        "		SET pWhereClause = '1=1' ;  \n" +
        "	END IF;  \n" +
        "  \n" +
        "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
        "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
        "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
        "	ELSE  \n" +
        "		SET rowNumWhere = '';  \n" +
        "	END IF;  \n" +
        "  \n" +
        "	/* to get total count of rows */  \n" +
        "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PageResults where \", pWhereClause );  \n" +
        "	PREPARE query1 FROM @SQLStatement1;  \n" +
        "	EXECUTE query1;  \n" +
        "	DEALLOCATE PREPARE query1;  \n" +
        "  \n" +
        "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PageResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
        "	PREPARE query2 FROM @SQLStatement2;  \n" +
        "	EXECUTE query2;  \n" +
        "	DEALLOCATE PREPARE query2;  \n" +
        "  \n" +
        "	DROP TEMPORARY TABLE IF EXISTS PageResults;  \n" +
        "END;  \n" +

        /* **************************** Add Script Version -> 21-03-2022 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (6027,'2.00','V1',' 41100 Page Rights - Allow to select multiple personnel and features/pages - Jay Solanki'," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 6027:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-03-2022  *********************************** */
				"DROP PROCEDURE IF EXISTS Sproc_GetFeaturesPageListByRole;  \n" +
				"CREATE PROCEDURE `Sproc_GetFeaturesPageListByRole`(  \n" +
				"	IN ppageIndex INT(11),  \n" +
				"	IN precordPerPage INT(11),  \n" +
				"	IN pOrderBy VARCHAR(255),  \n" +
				"	IN pWhereClause VARCHAR(16383),  \n" +
				"	IN pUserId INT(11),  \n" +
				"	IN pRoleId INT(11),  \n" +
				"	IN isShowDefault INT(1)  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE pOffset INT(11);  \n" +
				"	DECLARE rowNumWhere VARCHAR(255);  \n" +
				"  \n" +
				"	SELECT COUNT(*) INTO @result1 FROM feature_user_mapping WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL;  \n" +
				"  \n" +
				"	-- IF (@result1 = 0) THEN  \n" +
				"	IF (isShowDefault = 1) THEN  \n" +
				"		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS  \n" +
				"			SELECT `frm`.`roleID`, `frm`.`featureID`, `fm`.`featureName`, `frm`.`isActive`, 0 AS 'rightsCount' FROM `feature_role_mapping` AS `frm`  \n" +
				"			LEFT JOIN `feature_mst` AS `fm` ON `frm`.`featureID` = `fm`.`featureID`  \n" +
				"			WHERE `frm`.`roleID` = pRoleId AND `frm`.`deletedAt` IS NULL AND `fm`.`deletedAt` IS NULL AND `fm`.`isActive` = 1;  \n" +
				"  \n" +
				"			INSERT INTO PageResults (roleID, featureID, featureName, isActive)  \n" +
				"			SELECT pRoleId AS roleID, featureID, featureName, 0 AS isActive  \n" +
				"			FROM feature_mst WHERE deletedAt IS NULL AND isActive = 1 AND featureID NOT IN (SELECT featureID FROM feature_role_mapping WHERE roleID = pRoleId AND deletedAt IS NULL);  \n" +
				"	ELSE  \n" +
				"		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS  \n" +
				"			SELECT `fum`.`roleID`, `fum`.`userID`, `fum`.`featureID`, `fm`.`featureName`, `fum`.`isActive`, 0 AS 'rightsCount' FROM `feature_user_mapping` AS `fum`  \n" +
				"			LEFT JOIN `feature_mst` AS `fm` ON `fum`.`featureID` = `fm`.`featureID`  \n" +
				"			WHERE `fum`.`userID` = pUserId AND `fum`.`roleID` = pRoleId AND `fum`.`deletedAt` IS NULL AND `fm`.`deletedAt` IS NULL AND `fm`.`isActive` = 1;  \n" +
				"  \n" +
				"  \n" +
				"			INSERT INTO PageResults (roleID, userID, featureID, featureName, isActive)  \n" +
				"			SELECT pRoleId AS roleID, pUserId AS userID, featureID, featureName, 0 AS isActive  \n" +
				"			FROM feature_mst WHERE deletedAt IS NULL AND isActive = 1 AND featureID NOT IN (SELECT featureID FROM feature_user_mapping WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL);  \n" +
				"  \n" +
				"    END IF;  \n" +
				"  \n" +
				"    UPDATE PageResults pr  \n" +
				"	SET pr.rightsCount = 1  \n" +
				"    WHERE EXISTS (select 1 from feature_user_mapping fum  \n" +
				"					JOIN users us ON us.id = fum.userID  AND us.isDeleted = 0  \n" +
				"					JOIN employees e ON us.employeeID = e.id AND e.isDeleted = 0 and e.isActive = 1  \n" +
				"				WHERE  \n" +
				"				fum.isActive = 1 AND fum.userID <> pUserId  AND pr.featureID = fum.featureID AND fum.isDeleted = 0);  \n" +
				"    ##upd.roleID = pRoleId  \n" +
				"  \n" +
				"    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , \"featureName ASC\");  \n" +
				"	ELSE  \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
				"		SET pWhereClause = '1=1' ;  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
				"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
				"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
				"	ELSE  \n" +
				"		SET rowNumWhere = '';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	/* to get total count of rows */  \n" +
				"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PageResults where \", pWhereClause );  \n" +
				"	PREPARE query1 FROM @SQLStatement1;  \n" +
				"	EXECUTE query1;  \n" +
				"	DEALLOCATE PREPARE query1;  \n" +
				"  \n" +
				"	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PageResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
				"	PREPARE query2 FROM @SQLStatement2;  \n" +
				"	EXECUTE query2;  \n" +
				"	DEALLOCATE PREPARE query2;  \n" +
				"  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS PageResults;  \n" +
				"  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 21-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6028,'2.00','V1',' 41100 Page Rights - Allow to select multiple personnel and features/pages - Jay Solanki'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
        break; 
        case 6028:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-03-2022  *********************************** */
				"DROP PROCEDURE IF EXISTS Sproc_retrieveEmployeeListForRights;  \n" +
				"CREATE PROCEDURE `Sproc_retrieveEmployeeListForRights`(  \n" +
				"IN pPageID INT,  \n" +
				"IN pRoleID INT)  \n" +
				"BEGIN  \n" +
				"	DECLARE v_dynamicColumn VARCHAR(500) default '';  \n" +
				"    DECLARE v_dynamicJOIN VARCHAR(1000);  \n" +
				"    DECLARE v_empFormat VARCHAR(5);  \n" +
				"	SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
				"  \n" +
				"    SET @SQLStatement1 = \"SELECT emp.id,  \n" +
				"				emp.firstName,  \n" +
				"				emp.middleName,  \n" +
				"				emp.lastName,  \n" +
				"				emp.initialName,  \n" +
				"				emp.profileImg,  \n" +
				"                us.username,  \n" +
				"				fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName, \";  \n" +
				"                SET @SQLStatement1 = CONCAT(@SQLStatement1 , v_empFormat, \") AS empCodeName, us.id AS userID\");  \n" +
				"                SET v_dynamicJOIN = \" FROM employees AS emp  \n" +
				"				INNER JOIN users AS us ON emp.id = us.employeeID  \n" +
				"                AND us.isDeleted = 0 AND emp.isDeleted = 0 AND emp.isActive = 1\";  \n" +
				"  \n" +
				"    IF pRoleID IS NOT NULL THEN  \n" +
				"			SET v_dynamicJOIN = CONCAT(v_dynamicJOIN , \" JOIN users_roles ur ON us.id = ur.userId  \n" +
				"        AND ur.isDeleted = 0 AND ur.roleId = \" , pRoleID);  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    IF pPageID IS NOT NULL THEN  \n" +
				"			SET v_dynamicJOIN = CONCAT(v_dynamicJOIN , \" JOIN   (SELECT upd.userID, group_concat(r.name SEPARATOR ', ') AS rolelist FROM roles r  \n" +
				"																	JOIN userpagedetail upd ON r.id = upd.roleID AND upd.isDeleted = 0 AND upd.isActive = 1  \n" +
				"                                                                    WHERE upd.pageID = \" , pPageID ) ;  \n" +
				"			IF 	pRoleID is not null THEN  \n" +
				"					SET v_dynamicJOIN = CONCAT(v_dynamicJOIN , \" AND upd.roleID = \" , pRoleID );  \n" +
				"			END IF;  \n" +
				"			SET v_dynamicJOIN = CONCAT(v_dynamicJOIN ,\" AND r.isActive = 1 AND r.isDeleted = 0 GROUP BY upd.userID) a ON a.userID = us.id\");  \n" +
				"            SET v_dynamicColumn = concat(v_dynamicColumn,\" ,a.rolelist\");  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    if v_dynamicColumn is not null  then  \n" +
				"		SET @SQLStatement1 = CONCAT(@SQLStatement1, v_dynamicColumn);  \n" +
				"	end if;  \n" +
				"	SET @SQLStatement1 = CONCAT(@SQLStatement1, v_dynamicJOIN);  \n" +
				"  \n" +
				"    PREPARE mainQuery FROM @SQLStatement1;  \n" +
				"	EXECUTE mainQuery;  \n" +
				"	DEALLOCATE PREPARE mainQuery;  \n" +
				"  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 21-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6029,'2.00','V1',' 41100 Page Rights - Allow to select multiple personnel and features/pages - Jay Solanki'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
        break;
        case 6029:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-03-2022  *********************************** */
				"DROP PROCEDURE IF EXISTS Sproc_retrieveEmployeeListForFeatureRights;  \n" +
				"CREATE PROCEDURE `Sproc_retrieveEmployeeListForFeatureRights`(  \n" +
				"IN pFeatureID INT,  \n" +
				"IN pRoleID INT)  \n" +
				"BEGIN  \n" +
				"	DECLARE v_dynamicColumn VARCHAR(500) default '';  \n" +
				"    DECLARE v_dynamicJOIN VARCHAR(1000);  \n" +
				"    DECLARE v_empFormat VARCHAR(5);  \n" +
				"	SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
				"  \n" +
				"    SET @SQLStatement1 = CONCAT(\"SELECT emp.id,  \n" +
				"				emp.firstName,  \n" +
				"				emp.middleName,  \n" +
				"				emp.lastName,  \n" +
				"				emp.initialName,  \n" +
				"				emp.profileImg,  \n" +
				"                us.username,  \n" +
				"				fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName, \", v_empFormat, \") AS empCodeName, us.id AS userID\");  \n" +
				"                SET v_dynamicJOIN = \" FROM employees AS emp  \n" +
				"				INNER JOIN users AS us ON emp.id = us.employeeID  \n" +
				"                AND us.isDeleted = 0 AND emp.isDeleted = 0 AND emp.isActive = 1\";  \n" +
				"  \n" +
				"    IF pRoleID IS NOT NULL THEN  \n" +
				"			SET v_dynamicJOIN = CONCAT(v_dynamicJOIN , \" JOIN users_roles ur ON us.id = ur.userId  \n" +
				"        AND ur.isDeleted = 0 AND ur.roleId = \" , pRoleID);  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    IF pFeatureID IS NOT NULL THEN  \n" +
				"			SET v_dynamicJOIN = CONCAT(v_dynamicJOIN , \" JOIN   (SELECT fum.userID, group_concat(r.name SEPARATOR ', ') AS rolelist FROM roles r  \n" +
				"																	JOIN feature_user_mapping fum ON r.id = fum.roleID AND fum.isDeleted = 0 AND fum.isActive = 1  \n" +
				"                                                                    WHERE fum.featureID = \" , pFeatureID ) ;  \n" +
				"			IF 	pRoleID is not null THEN  \n" +
				"					SET v_dynamicJOIN = CONCAT(v_dynamicJOIN , \" AND fum.roleID = \" , pRoleID );  \n" +
				"			END IF;  \n" +
				"			SET v_dynamicJOIN = CONCAT(v_dynamicJOIN ,\" AND r.isActive = 1 AND r.isDeleted = 0 GROUP BY fum.userID) a ON a.userID = us.id\");  \n" +
				"            SET v_dynamicColumn = concat(v_dynamicColumn,\" ,a.rolelist\");  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    if v_dynamicColumn is not null  then  \n" +
				"		SET @SQLStatement1 = CONCAT(@SQLStatement1, v_dynamicColumn);  \n" +
				"	end if;  \n" +
				"	SET @SQLStatement1 = CONCAT(@SQLStatement1, v_dynamicJOIN);  \n" +
				"  \n" +
				"    PREPARE mainQuery FROM @SQLStatement1;  \n" +
				"	EXECUTE mainQuery;  \n" +
				"	DEALLOCATE PREPARE mainQuery;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 21-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6030,'2.00','V1',' 41100 Page Rights - Allow to select multiple personnel and features/pages - Jay Solanki'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
        break;
        case 6030:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-03-2022  *********************************** */
				"DROP PROCEDURE IF EXISTS Sproc_updateMulitpleUserPagePermision;  \n" +
				"CREATE PROCEDURE `Sproc_updateMulitpleUserPagePermision`(  \n" +
				"	IN pSelectedRole varchar(255),  \n" +
				"	IN pSelectedPages varchar(5000),  \n" +
				"	IN pSelectedUsers varchar(5000),  \n" +
				"    IN pCreatedBy INT,  \n" +
				"    IN pRightsPermission varchar(15),  \n" +
				"    IN pCreatedByRoleId INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE Counter INT;  \n" +
				"	DECLARE	pagesOfUser VARCHAR(5000);  \n" +
				"	DECLARE startPos, endPos, maxLength INT ;  \n" +
				"    DECLARE userid varchar(10);  \n" +
				"    DECLARE exist INT;  \n" +
				"  \n" +
				"    DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
				"	BEGIN  \n" +
				"		ROLLBACK;  \n" +
				"		RESIGNAL;  \n" +
				"	END;  \n" +
				"	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
				"	  BEGIN  \n" +
				"		ROLLBACK;  \n" +
				"		RESIGNAL;  \n" +
				"	END;  \n" +
				"    SET startPos = 0;  \n" +
				"	SET maxLength = Length(pSelectedUsers);  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempUserPageDetail;  \n" +
				"	CREATE TEMPORARY TABLE tempUserPageDetail( pageId INT , userId INT, notExistsInUserRights INT);  \n" +
				"  \n" +
				"	REPEAT  \n" +
				"		SET endPos = LOCATE(',',pSelectedUsers,startPos);  \n" +
				"		IF endPos = 0 THEN  \n" +
				"			SET userid = SUBSTR(pSelectedUsers,startPos);  \n" +
				"		ELSE  \n" +
				"			SET userid = SUBSTR(pSelectedUsers,startPos,endPos-startPos);  \n" +
				"		END IF;  \n" +
				"        IF userid THEN  \n" +
				"            # this will insert pageid without entry in userpagedetails  \n" +
				"            INSERT INTO tempUserPageDetail  \n" +
				"            SELECT pd.pageID, userid , 1  \n" +
				"			FROM page_detail pd  \n" +
				"			WHERE  pd.isDeleted = 0  AND pd.isActive = 1  \n" +
				"			AND find_in_set(pd.pageID,pSelectedPages)  \n" +
				"			AND NOT EXISTS (SELECT 1 FROM userpagedetail upgd WHERE upgd.pageID = pd.pageID AND upgd.isDeleted = 0  \n" +
				"			AND upgd.userID = userid AND upgd.roleID = pSelectedRole);  \n" +
				"  \n" +
				"            # this will insert pageid without entry in userpagedetails  \n" +
				"			INSERT INTO tempUserPageDetail  \n" +
				"            SELECT pd.pageID, userid , 0  \n" +
				"			FROM page_detail pd  \n" +
				"			WHERE  pd.isDeleted = 0 AND pd.isActive = 1  \n" +
				"			AND find_in_set(pd.pageID,pSelectedPages)  \n" +
				"			AND EXISTS (SELECT 1 FROM userpagedetail upgd WHERE upgd.pageID = pd.pageID AND upgd.isDeleted = 0  \n" +
				"			AND upgd.userID = userid AND upgd.roleID = pSelectedRole);  \n" +
				"        END IF;  \n" +
				"  \n" +
				"        IF endPos = 0  AND startPos > 0 THEN  \n" +
				"			SET startPos = maxLength;  \n" +
				"		ELSE  \n" +
				"			SET startPos = endPos + 1;  \n" +
				"		END IF;  \n" +
				"	UNTIL startPos >=  maxLength END REPEAT;  \n" +
				"  \n" +
				"	#select * from tempUserPageDetail;  \n" +
				"  \n" +
				"    IF(Select count(1) tempUserPageDetail) > 0 THEN  \n" +
				"		INSERT INTO userpagedetail (pageID, userID, roleID, isActive, RO, RW, `createdBy`, `createdAt`, `createByRoleId`, `updatedBy`,`updatedAt`,`updateByRoleId`)  \n" +
				"		SELECT sub.pageId, sub.userId, pSelectedRole, 1, 0 , 0, pCreatedBy, fun_DatetimetoUTCDateTime(), pCreatedByRoleId,  pCreatedBy, fun_DatetimetoUTCDateTime(), pCreatedByRoleId  FROM tempUserPageDetail sub WHERE notExistsInUserRights =1 ;  \n" +
				"  \n" +
				"        IF (pRightsPermission = 'Add' OR pRightsPermission = 'AddAll') THEN  \n" +
				"			UPDATE userpagedetail ud  \n" +
				"			JOIN tempUserPageDetail temp ON temp.pageID = ud.pageID AND temp.userID = ud.userID AND pSelectedRole = ud.roleID  \n" +
				"			SET ud.isActive = 1 ,  \n" +
				"            ud.isHelpBlog = 1,  \n" +
				"            ud.RO = 0,  \n" +
				"            ud.RW = 0,  \n" +
				"			ud.updatedBy = pCreatedBy,  \n" +
				"			ud.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
				"			ud.updateByRoleId = pCreatedByRoleId  \n" +
				"			WHERE ud.isDeleted = 0;  \n" +
				"        END IF;  \n" +
				"  \n" +
				"        IF (pRightsPermission = 'Remove' OR pRightsPermission = 'RemoveAll') THEN  \n" +
				"			UPDATE userpagedetail ud  \n" +
				"			JOIN tempUserPageDetail temp ON temp.pageID = ud.pageID AND temp.userID = ud.userID AND pSelectedRole = ud.roleID  \n" +
				"			SET ud.isActive = 0,  \n" +
				"			ud.isHelpBlog = 0,  \n" +
				"			ud.updatedBy = pCreatedBy,  \n" +
				"			ud.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
				"			ud.updateByRoleId = pCreatedByRoleId  \n" +
				"            WHERE ud.isDeleted = 0;  \n" +
				"        END IF;  \n" +
				"    END IF;  \n" +
				"  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 21-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6031,'2.00','V1',' 41100 Page Rights - Allow to select multiple personnel and features/pages  - Jay Solanki '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
        break;
        case 6031:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-03-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_updateMulitpleUserFeaturePermision;  \n" +
                "CREATE PROCEDURE `Sproc_updateMulitpleUserFeaturePermision`(  \n" +
                "	IN pSelectedRole varchar(255),  \n" +
                "	IN pSelectedFeatures varchar(255),  \n" +
                "	IN pSelectedUsers varchar(5000),  \n" +
                "    IN pCreatedBy INT,  \n" +
                "	IN pRightsPermission varchar(15),  \n" +
                "    IN pCreatedByRoleId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE Counter INT;  \n" +
                "	DECLARE	featuresOfUser VARCHAR(5000);  \n" +
                "	DECLARE startPos, endPos, maxLength INT ;  \n" +
                "    DECLARE userid varchar(10);  \n" +
                "    DECLARE exist INT;  \n" +
                "  \n" +
                "    DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	  BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "  \n" +
                "    SET startPos = 0;  \n" +
                "	SET maxLength = Length(pSelectedUsers);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUserFeatureDetail;  \n" +
                "	CREATE TEMPORARY TABLE tempUserFeatureDetail( featureId INT , userId INT, notExistsInUserRights INT);  \n" +
                "  \n" +
                "	REPEAT  \n" +
                "		SET endPos = LOCATE(',',pSelectedUsers,startPos);  \n" +
                "		IF endPos = 0 THEN  \n" +
                "			SET userid = SUBSTR(pSelectedUsers,startPos);  \n" +
                "		ELSE  \n" +
                "			SET userid = SUBSTR(pSelectedUsers,startPos,endPos-startPos);  \n" +
                "		END IF;  \n" +
                "        IF userid THEN  \n" +
                "			# this will insert featureid without entry in feature_user_mapping  \n" +
                "            INSERT INTO tempUserFeatureDetail  \n" +
                "            SELECT fm.featureID, userid , 1  \n" +
                "			FROM feature_mst fm  \n" +
                "			WHERE  fm.isDeleted = 0 AND fm.isActive = 1  \n" +
                "			AND find_in_set(fm.featureID,pSelectedFeatures)  \n" +
                "			AND NOT EXISTS (SELECT 1 FROM feature_user_mapping fum WHERE fum.featureID = fm.featureID AND fum.isDeleted = 0  \n" +
                "			AND fum.userID = userid AND fum.roleID = pSelectedRole);  \n" +
                "  \n" +
                "            # this will insert featureid without entry in feature_user_mapping  \n" +
                "			INSERT INTO tempUserFeatureDetail  \n" +
                "            SELECT fm.featureID, userid , 0  \n" +
                "			FROM feature_mst fm  \n" +
                "			WHERE  fm.isDeleted = 0  AND fm.isActive = 1  \n" +
                "			AND find_in_set(fm.featureID,pSelectedFeatures)  \n" +
                "			AND exists (select 1 from feature_user_mapping fum WHERE fum.featureID = fm.featureID AND fum.isDeleted = 0  \n" +
                "			AND fum.userID = userid AND fum.roleID = pSelectedRole);  \n" +
                "        END IF;  \n" +
                "  \n" +
                "        IF endPos = 0  AND startPos > 0 THEN  \n" +
                "			SET startPos = maxLength;  \n" +
                "		ELSE  \n" +
                "			SET startPos = endPos + 1;  \n" +
                "		END IF;  \n" +
                "	UNTIL startPos >=  maxLength END REPEAT;  \n" +
                "  \n" +
                "	SELECT * FROM tempUserFeatureDetail;  \n" +
                "  \n" +
                "    IF(Select count(1) tempUserFeatureDetail) > 0 THEN  \n" +
                "		INSERT INTO feature_user_mapping (featureID, userID, roleID, isActive, `createdBy`, `createdAt`, `createByRoleId`, `updatedBy`,`updatedAt`,`updateByRoleId`)  \n" +
                "		SELECT sub.featureId, sub.userId, pSelectedRole, 1, pCreatedBy, fun_DatetimetoUTCDateTime(), pCreatedByRoleId,  pCreatedBy, fun_DatetimetoUTCDateTime(), pCreatedByRoleId FROM tempUserFeatureDetail sub WHERE notExistsInUserRights = 1 ;  \n" +
                "  \n" +
                "        IF (pRightsPermission = 'Add' OR pRightsPermission = 'AddAll') then  \n" +
                "			UPDATE feature_user_mapping fum  \n" +
                "			JOIN tempUserFeatureDetail temp ON temp.featureID = fum.featureID AND temp.userID = fum.userID AND pSelectedRole = fum.roleID  \n" +
                "			SET fum.isActive = 1 ,  \n" +
                "			fum.updatedBy = pCreatedBy,  \n" +
                "			fum.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			fum.updateByRoleId = pCreatedByRoleId  \n" +
                "			WHERE fum.isDeleted = 0;  \n" +
                "        END IF;  \n" +
                "  \n" +
                "        IF (pRightsPermission = 'Remove' OR pRightsPermission = 'RemoveAll') then  \n" +
                "			UPDATE feature_user_mapping fum  \n" +
                "			JOIN tempUserFeatureDetail temp ON temp.featureID = fum.featureID AND temp.userID = fum.userID AND pSelectedRole = fum.roleID  \n" +
                "			SET fum.isActive = 0,  \n" +
                "			fum.updatedBy = pCreatedBy,  \n" +
                "			fum.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			fum.updateByRoleId = pCreatedByRoleId  \n" +
                "            WHERE fum.isDeleted = 0;  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6032,'2.00','V1','41100 Page Rights - Allow to select multiple personnel and features/pages - Jay Solanki '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
        break;
        case 6032:
        allDbChangesArray.push(
        /* **************************** New Script -> 21-03-2022 *********************************** */
            "alter table systemconfigrations add column inputControlName varchar(100);  \n" +
        /* **************************** Add Script Version -> 28-12-2021 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (6033,'2.00','V1',' Add column in to system configuration  '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 6033:
 allDbChangesArray.push(
 /* **************************** New Script -> 21-03-2022 *********************************** */
 "CREATE TRIGGER `Trg_AI_component_Insert_attribute` AFTER INSERT ON `component` FOR EACH ROW BEGIN  \n" +
"declare vCount int ;  \n" +
"	if   (new.mfgtype = 'MFG' ) then  \n" +
"  \n" +
"					select count(1) into vCount from component_attributes where refcomponentid  = new.id ;  \n" +
"						if ( vCount = 0 )then  \n" +
"								insert into  component_attributes  \n" +
"											(refComponentID,		packaginggroupID,				isCloudApiUpdateAttribute,	functionalCategoryID,  \n" +
"                                            functionalCategoryText,	mountingTypeID,					mountingTypeText,			isEpoxyMount,  \n" +
"                                            partPackageID,			partPackage,					connecterTypeID,			connectorTypeText,  \n" +
"                                            feature,				noOfPosition,					noOfPositionText,			noOfRows,  \n" +
"                                            noOfRowsText,			operatingTemp,					minOperatingTemp,			maxOperatingTemp,  \n" +
"                                            temperatureCoefficient,	temperatureCoefficientValue,	temperatureCoefficientUnit,	pitch,  \n" +
"                                            pitchMating,			sizeDimension,					length,						width,  \n" +
"                                            height,					heightText,						tolerance,					voltage,  \n" +
"                                            `value`,					powerRating,					weight,						color,  \n" +
"                                            isTemperatureSensitive,	isDeleted,						createdBy,					createdAt,  \n" +
"                                            createByRoleId  \n" +
"											)  \n" +
"									values(new.id, 					new.packaginggroupID,				new.isCloudApiUpdateAttribute,	new.functionalCategoryID,  \n" +
"                                            new.functionalCategoryText,	new.mountingTypeID,					new.mountingTypeText,			new.isEpoxyMount,  \n" +
"                                            new.partPackageID,			new.partPackage,					new.connecterTypeID,			new.connectorTypeText,  \n" +
"                                            new.feature,				new.noOfPosition,					new.noOfPositionText,			new.noOfRows,  \n" +
"                                            new.noOfRowsText,			new.operatingTemp,					new.minOperatingTemp,			new.maxOperatingTemp,  \n" +
"                                            new.temperatureCoefficient,	new.temperatureCoefficientValue,	new.temperatureCoefficientUnit,	new.pitch,  \n" +
"                                            new.pitchMating,			new.sizeDimension,					new.length,						new.width,  \n" +
"                                            new.height,					new.heightText,						new.tolerance,					new.voltage,  \n" +
"                                            new.value,					new.powerRating,					new.weight,						new.color,  \n" +
"                                            new.isTemperatureSensitive,	new.isDeleted,  				new.createdBy,						new.createdAt,  \n" +
"                                            new.createByRoleId);  \n" +
"						end if;  \n" +
"			end if;  \n" +
"	END  ;\n" +
"drop trigger Trg_AU_component_Update_attribute;  \n" +
"CREATE TRIGGER `Trg_AU_component_Update_attribute` AFTER UPDATE ON `component` FOR EACH ROW BEGIN  \n" +
"declare vCount int ;  \n" +
"	if   (new.mfgtype = 'MFG' ) then  \n" +
"  \n" +
"			if (  ifnull(old.packaginggroupID,0)  != ifnull(new.packaginggroupID,0) or			ifnull(old.isCloudApiUpdateAttribute,0) != ifnull(new.isCloudApiUpdateAttribute,0) or  \n" +
"				ifnull(old.functionalCategoryID,0) != ifnull(new.functionalCategoryID,0) or		ifnull(old.functionalCategoryText,0) != ifnull(new.functionalCategoryText,0) or  \n" +
"                ifnull(old.mountingTypeID,0) != ifnull(new.mountingTypeID,0) or 				ifnull(old.mountingTypeText,0) != ifnull(new.mountingTypeText,0) or  \n" +
"				ifnull(old.isEpoxyMount,0) != ifnull(new.isEpoxyMount,0) 	or					ifnull(old.partPackageID,0) != ifnull(new.partPackageID,0) or  \n" +
"				ifnull(old.partPackage ,0) != ifnull(new.partPackage ,0) or						ifnull(old.connecterTypeID,0) != ifnull(new.connecterTypeID,0) or  \n" +
"				ifnull(old.connectorTypeText,0) != ifnull(new.connectorTypeText,0) or			ifnull(old.feature,0) != ifnull(new.feature,0) or  \n" +
"				ifnull(old.noOfPosition,0) !=ifnull(new.noOfPosition,0) or						ifnull(old.noOfPositionText,0) != ifnull(new.noOfPositionText,0) or  \n" +
"				ifnull(old.noOfRows,0) != ifnull(new.noOfRows,0) or								ifnull(old.noOfRowsText,0) != ifnull(new.noOfRowsText,0) or  \n" +
"				ifnull(old.operatingTemp,0) != ifnull(new.operatingTemp ,0) or					ifnull(old.minOperatingTemp,0) != ifnull(new.minOperatingTemp,0) or  \n" +
"				ifnull(old.maxOperatingTemp,0) != ifnull(new.maxOperatingTemp,0) or 			ifnull(old.temperatureCoefficient,0) != ifnull(new.temperatureCoefficient,0) or  \n" +
"				ifnull(old.temperatureCoefficientValue,0) != ifnull(new.temperatureCoefficientValue,0) or	ifnull(old.temperatureCoefficientUnit,0) != ifnull(new.temperatureCoefficientUnit,0) or  \n" +
"				ifnull(old.pitch ,0) != ifnull(new.pitch ,0) or				ifnull(old.pitchMating,0) != ifnull(new.pitchMating ,0) or  ifnull(old.sizeDimension ,0) != ifnull(new.sizeDimension ,0) or  \n" +
"				ifnull(old.length ,0) != ifnull(new.length,0) or 			ifnull(old.width ,0) != ifnull(new.width,0) or 				ifnull(old.height ,0) != ifnull(new.height,0) or  \n" +
"				ifnull(old.heightText ,0) != ifnull(new.heightText ,0) or 	ifnull(old.tolerance,0) != ifnull(new.tolerance,0) or 		ifnull(old.voltage,0) != ifnull(new.voltage,0) or  \n" +
"				ifnull(old.`value` ,0) != ifnull(new.`value`,0) or 			ifnull(old.powerRating,0) != ifnull(new.powerRating,0) or 	ifnull(old.weight ,0) != ifnull(new.weight,0) or  \n" +
"				ifnull(old.color ,0) != ifnull(new.color ,0) or 			ifnull(old.isTemperatureSensitive,0) != ifnull(new.isTemperatureSensitive,0)) then  \n" +
"  \n" +
"					select count(1) into vCount from component_attributes where refcomponentid  = new.id ;  \n" +
"						if ( vCount = 0 )then  \n" +
"								insert into  component_attributes  \n" +
"											(refComponentID,		packaginggroupID,				isCloudApiUpdateAttribute,	functionalCategoryID,  \n" +
"                                            functionalCategoryText,	mountingTypeID,					mountingTypeText,			isEpoxyMount,  \n" +
"                                            partPackageID,			partPackage,					connecterTypeID,			connectorTypeText,  \n" +
"                                            feature,				noOfPosition,					noOfPositionText,			noOfRows,  \n" +
"                                            noOfRowsText,			operatingTemp,					minOperatingTemp,			maxOperatingTemp,  \n" +
"                                            temperatureCoefficient,	temperatureCoefficientValue,	temperatureCoefficientUnit,	pitch,  \n" +
"                                            pitchMating,			sizeDimension,					length,						width,  \n" +
"                                            height,					heightText,						tolerance,					voltage,  \n" +
"                                            `value`,					powerRating,					weight,						color,  \n" +
"                                            isTemperatureSensitive,	isDeleted,						createdBy,					createdAt,  \n" +
"                                            createByRoleId  \n" +
"											)  \n" +
"									values(new.id, 					new.packaginggroupID,				new.isCloudApiUpdateAttribute,	new.functionalCategoryID,  \n" +
"                                            new.functionalCategoryText,	new.mountingTypeID,					new.mountingTypeText,			new.isEpoxyMount,  \n" +
"                                            new.partPackageID,			new.partPackage,					new.connecterTypeID,			new.connectorTypeText,  \n" +
"                                            new.feature,				new.noOfPosition,					new.noOfPositionText,			new.noOfRows,  \n" +
"                                            new.noOfRowsText,			new.operatingTemp,					new.minOperatingTemp,			new.maxOperatingTemp,  \n" +
"                                            new.temperatureCoefficient,	new.temperatureCoefficientValue,	new.temperatureCoefficientUnit,	new.pitch,  \n" +
"                                            new.pitchMating,			new.sizeDimension,					new.length,						new.width,  \n" +
"                                            new.height,					new.heightText,						new.tolerance,					new.voltage,  \n" +
"                                            new.value,					new.powerRating,					new.weight,						new.color,  \n" +
"                                            new.isTemperatureSensitive,	new.isDeleted,  				new.createdBy,						new.createdAt,  \n" +
"                                            new.createByRoleId);  \n" +
"  \n" +
"						else  \n" +
"								update component_attributes  \n" +
"									set	 packaginggroupID  = new.packaginggroupID,			isCloudApiUpdateAttribute = new.isCloudApiUpdateAttribute,  \n" +
"										functionalCategoryID = new.functionalCategoryID,			functionalCategoryText = new.functionalCategoryText,  \n" +
"										mountingTypeID = new.mountingTypeID,				mountingTypeText = new.mountingTypeText ,  \n" +
"										isEpoxyMount = new.isEpoxyMount, 				partPackageID = new.partPackageID,  \n" +
"										partPackage  = new.partPackage ,			connecterTypeID = new.connecterTypeID ,  \n" +
"										connectorTypeText = new.connectorTypeText,			feature = new.feature ,  \n" +
"										noOfPosition =new.noOfPosition,			noOfPositionText = new.noOfPositionText ,  \n" +
"										noOfRows = new.noOfRows,			noOfRowsText = new.noOfRowsText ,  \n" +
"										operatingTemp = new.operatingTemp ,			minOperatingTemp = new.minOperatingTemp ,  \n" +
"										maxOperatingTemp = new.maxOperatingTemp,				temperatureCoefficient = new.temperatureCoefficient ,  \n" +
"										temperatureCoefficientValue = new.temperatureCoefficientValue,temperatureCoefficientUnit = new.temperatureCoefficientUnit ,  \n" +
"										pitch  = new.pitch ,pitchMating = new.pitchMating , sizeDimension  = new.sizeDimension ,  \n" +
"										length  = new.length,width  = new.width,height  = new.height,  \n" +
"										heightText  = new.heightText ,tolerance = new.tolerance,  \n" +
"                                        voltage = new.voltage,  \n" +
"										`value`  = new.`value`,powerRating = new.powerRating,weight  = new.weight ,  \n" +
"										color  = new.color,  \n" +
"										isTemperatureSensitive = new.isTemperatureSensitive  \n" +
"										where refcomponentid = new.id;  \n" +
"						end if;  \n" +
"			end if;  \n" +
"  \n" +
"		end if;  \n" +
"	END ; \n" +
"CREATE or replace VIEW `vu_component` AS  \n" +
"    SELECT  \n" +
"        `c`.`id` AS `id`,  \n" +
"        `c`.`mfgType` AS `mfgType`,  \n" +
"        `c`.`refMfgPNMfgCodeId` AS `refMfgPNMfgCodeId`,  \n" +
"        `c`.`refSupplierMfgpnComponentID` AS `refSupplierMfgpnComponentID`,  \n" +
"        `c`.`isCPN` AS `isCPN`,  \n" +
"        `c`.`isCustom` AS `isCustom`,  \n" +
"        `c`.`rfqOnly` AS `rfqOnly`,  \n" +
"        `c`.`category` AS `category`,  \n" +
"        `c`.`partType` AS `partType`,  \n" +
"        `c`.`epicorType` AS `epicorType`,  \n" +
"        `c`.`dataSheetLink` AS `dataSheetLink`,  \n" +
"        `c`.`imageURL` AS `imageURL`,  \n" +
"        `c`.`assemblyType` AS `assemblyType`,  \n" +
"        `c`.`mfgcodeID` AS `mfgcodeID`,  \n" +
"        `c`.`mfrNameText` AS `mfrNameText`,  \n" +
"        `c`.`custAssyPN` AS `custAssyPN`,  \n" +
"        `c`.`rev` AS `rev`,  \n" +
"        `c`.`mfgPN` AS `mfgPN`,  \n" +
"        `c`.`assyCode` AS `assyCode`,  \n" +
"        `c`.`nickName` AS `nickName`,  \n" +
"        `c`.`PIDCode` AS `PIDCode`,  \n" +
"        `c`.`isPIDManual` AS `isPIDManual`,  \n" +
"        `c`.`productionPN` AS `productionPN`,  \n" +
"        `c`.`costCategoryID` AS `costCategoryID`,  \n" +
"        `c`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
"        `c`.`detailDescription` AS `detailDescription`,  \n" +
"        `c`.`specialNote` AS `specialNote`,  \n" +
"        `c`.`purchasingComment` AS `purchasingComment`,  \n" +
"        `c`.`partStatus` AS `partStatus`,  \n" +
"        `c`.`partStatusText` AS `partStatusText`,  \n" +
"        `c`.`ltbDate` AS `ltbDate`,  \n" +
"        `c`.`eolDate` AS `eolDate`,  \n" +
"        `c`.`obsoleteDate` AS `obsoleteDate`,  \n" +
"        `c`.`reversalDate` AS `reversalDate`,  \n" +
"        `c`.`isReversal` AS `isReversal`,  \n" +
"        `c`.`predictedObsolescenceYear` AS `predictedObsolescenceYear`,  \n" +
"        `c`.`leadTime` AS `leadTime`,  \n" +
"        `c`.`rfqNumber` AS `rfqNumber`,  \n" +
"        `c`.`quoteValidTillDate` AS `quoteValidTillDate`,  \n" +
"        `c`.`internalReference` AS `internalReference`,  \n" +
"        `c`.`serialNumber` AS `serialNumber`,  \n" +
"        `c`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
"        `c`.`rohsText` AS `rohsText`,  \n" +
"        `c`.`rohsDeviation` AS `rohsDeviation`,  \n" +
"        `c`.`isHazmatMaterial` AS `isHazmatMaterial`,  \n" +
"        `c`.`mslID` AS `mslID`,  \n" +
"        `c`.`isWaterSoluble` AS `isWaterSoluble`,  \n" +
"        `c`.`isNoClean` AS `isNoClean`,  \n" +
"        `c`.`isFluxNotApplicable` AS `isFluxNotApplicable`,  \n" +
"        `c`.`packageQty` AS `packageQty`,  \n" +
"        `c`.`countryOfOrigin` AS `countryOfOrigin`,  \n" +
"        `c`.`htsCode` AS `htsCode`,  \n" +
"        `c`.`deviceMarking` AS `deviceMarking`,  \n" +
"        `c`.`packagingID` AS `packagingID`,  \n" +
"        `c`.`packaging` AS `packaging`,  \n" +
"        `c`.`minimum` AS `minimum`,  \n" +
"        `c`.`mult` AS `mult`,  \n" +
"        `c`.`umidSPQ` AS `umidSPQ`,  \n" +
"        `c`.`unit` AS `unit`,  \n" +
"        `c`.`uomClassID` AS `uomClassID`,  \n" +
"        `c`.`uom` AS `uom`,  \n" +
"        `c`.`uomText` AS `uomText`,  \n" +
"        `c`.`pcbPerArray` AS `pcbPerArray`,  \n" +
"        `c`.`price` AS `price`,  \n" +
"        `c`.`isGoodPart` AS `isGoodPart`,  \n" +
"        `c`.`replacementPartID` AS `replacementPartID`,  \n" +
"        `c`.`systemGenerated` AS `systemGenerated`,  \n" +
"        `c`.`documentPath` AS `documentPath`,  \n" +
"        `c`.`frequencyType` AS `frequencyType`,  \n" +
"        `c`.`frequency` AS `frequency`,  \n" +
"        `c`.`salesacctId` AS `salesacctId`,  \n" +
"        `c`.`purchaseacctId` AS `purchaseacctId`,  \n" +
"        `c`.`isReceiveBulkItem` AS `isReceiveBulkItem`,  \n" +
"        `c`.`dateCodeFormatID` AS `dateCodeFormatID`,  \n" +
"        `c`.`isDateCodeFormat` AS `isDateCodeFormat`,  \n" +
"        `c`.`unqDate` AS `unqDate`,  \n" +
"        `c`.`isDeleted` AS `isDeleted`,  \n" +
"        `c`.`createdBy` AS `createdBy`,  \n" +
"        `c`.`createdAt` AS `createdAt`,  \n" +
"        `c`.`createByRoleId` AS `createByRoleId`,  \n" +
"        `c`.`updatedBy` AS `updatedBy`,  \n" +
"        `c`.`updatedAt` AS `updatedAt`,  \n" +
"        `c`.`updateByRoleId` AS `updateByRoleId`,  \n" +
"        `c`.`deletedBy` AS `deletedBy`,  \n" +
"        `c`.`deletedAt` AS `deletedAt`,  \n" +
"        `c`.`deleteByRoleId` AS `deleteByRoleId`,  \n" +
"        `ca`.`packaginggroupID` AS `packaginggroupID`,  \n" +
"        `ca`.`isCloudApiUpdateAttribute` AS `isCloudApiUpdateAttribute`,  \n" +
"        `ca`.`functionalCategoryID` AS `functionalCategoryID`,  \n" +
"        `ca`.`functionalCategoryText` AS `functionalCategoryText`,  \n" +
"        `ca`.`mountingTypeID` AS `mountingTypeID`,  \n" +
"        `ca`.`mountingTypeText` AS `mountingTypeText`,  \n" +
"        `ca`.`isEpoxyMount` AS `isEpoxyMount`,  \n" +
"        `ca`.`partPackageID` AS `partPackageID`,  \n" +
"        `ca`.`partPackage` AS `partPackage`,  \n" +
"        `ca`.`connecterTypeID` AS `connecterTypeID`,  \n" +
"        `ca`.`connectorTypeText` AS `connectorTypeText`,  \n" +
"        `ca`.`feature` AS `feature`,  \n" +
"        `ca`.`noOfPosition` AS `noOfPosition`,  \n" +
"        `ca`.`noOfPositionText` AS `noOfPositionText`,  \n" +
"        `ca`.`noOfRows` AS `noOfRows`,  \n" +
"        `ca`.`noOfRowsText` AS `noOfRowsText`,  \n" +
"        `ca`.`operatingTemp` AS `operatingTemp`,  \n" +
"        `ca`.`minOperatingTemp` AS `minOperatingTemp`,  \n" +
"        `ca`.`maxOperatingTemp` AS `maxOperatingTemp`,  \n" +
"        `ca`.`temperatureCoefficient` AS `temperatureCoefficient`,  \n" +
"        `ca`.`temperatureCoefficientValue` AS `temperatureCoefficientValue`,  \n" +
"        `ca`.`temperatureCoefficientUnit` AS `temperatureCoefficientUnit`,  \n" +
"        `ca`.`pitch` AS `pitch`,  \n" +
"        `ca`.`pitchMating` AS `pitchMating`,  \n" +
"        `ca`.`sizeDimension` AS `sizeDimension`,  \n" +
"        `ca`.`length` AS `length`,  \n" +
"        `ca`.`width` AS `width`,  \n" +
"        `ca`.`height` AS `height`,  \n" +
"        `ca`.`heightText` AS `heightText`,  \n" +
"        `ca`.`tolerance` AS `tolerance`,  \n" +
"        `ca`.`voltage` AS `voltage`,  \n" +
"        `ca`.`value` AS `value`,  \n" +
"        `ca`.`powerRating` AS `powerRating`,  \n" +
"        `ca`.`weight` AS `weight`,  \n" +
"        `ca`.`color` AS `color`,  \n" +
"        `ca`.`isTemperatureSensitive` AS `isTemperatureSensitive`,  \n" +
"        IFNULL(`cb`.`bomLock`, 0) AS `bomLock`,  \n" +
"        `cb`.`liveInternalVersion` AS `liveInternalVersion`,  \n" +
"        `cb`.`exteranalAPICallStatus` AS `exteranalAPICallStatus`,  \n" +
"        `cb`.`isBOMVerified` AS `isBOMVerified`,  \n" +
"        `cb`.`liveVersion` AS `liveVersion`,  \n" +
"        `cb`.`isActivityStart` AS `isActivityStart`,  \n" +
"        `cb`.`activityStartBy` AS `activityStartBy`,  \n" +
"        `cb`.`activityStartAt` AS `activityStartAt`,  \n" +
"        `cb`.`activityStopAt` AS `activityStopAt`,  \n" +
"        `cs`.`functionalTypePartRequired` AS `functionalTypePartRequired`,  \n" +
"        `cs`.`mountingTypePartRequired` AS `mountingTypePartRequired`,  \n" +
"        `cs`.`businessRisk` AS `businessRisk`,  \n" +
"        `cs`.`totalSolderPoints` AS `totalSolderPoints`,  \n" +
"        IFNULL(`cs`.`trackSerialNumber`, 0) AS `trackSerialNumber`,  \n" +
"        IFNULL(`cs`.`umidVerificationRequire`, 0) AS `umidVerificationRequire`,  \n" +
"        `cs`.`isAutoVerificationOfAllAssemblyParts` AS `isAutoVerificationOfAllAssemblyParts`,  \n" +
"        IFNULL(`cs`.`restrictUSEwithpermission`, 0) AS `restrictUSEwithpermission`,  \n" +
"        IFNULL(`cs`.`restrictPackagingUseWithpermission`,  \n" +
"                0) AS `restrictPackagingUseWithpermission`,  \n" +
"        ifnull(`cs`.`restrictUsePermanently`,0) AS `restrictUsePermanently`,  \n" +
"        IFNULL(`cs`.`restrictPackagingUsePermanently`,  \n" +
"                0) AS `restrictPackagingUsePermanently`,  \n" +
"        `cs`.`scrapRatePercentagePerBuild` AS `scrapRatePercentagePerBuild`,  \n" +
"        `cs`.`scrapValuePerBuild` AS `scrapValuePerBuild`,  \n" +
"        `cs`.`plannedOverRunPercentagePerBuild` AS `plannedOverRunPercentagePerBuild`,  \n" +
"        `cs`.`plannedValuePerBuild` AS `plannedValuePerBuild`,  \n" +
"        `cs`.`selfLifeDays` AS `selfLifeDays`,  \n" +
"        `cs`.`shelfLifeAcceptanceDays` AS `shelfLifeAcceptanceDays`,  \n" +
"        `cs`.`shelfListDaysThresholdPercentage` AS `shelfListDaysThresholdPercentage`,  \n" +
"        `cs`.`maxShelfLifeAcceptanceDays` AS `maxShelfLifeAcceptanceDays`,  \n" +
"        `cs`.`maxShelfListDaysThresholdPercentage` AS `maxShelfListDaysThresholdPercentage`,  \n" +
"        `cs`.`shelfLifeDateType` AS `shelfLifeDateType`,  \n" +
"        `cs`.`alertExpiryDays` AS `alertExpiryDays`,  \n" +
"        `cs`.`programingRequired` AS `programingRequired`,  \n" +
"        `cs`.`driverToolRequired` AS `driverToolRequired`,  \n" +
"        `cs`.`matingPartRquired` AS `matingPartRquired`,  \n" +
"        `cs`.`pickupPadRequired` AS `pickupPadRequired`,  \n" +
"        `cs`.`functionalTestingRequired` AS `functionalTestingRequired`,  \n" +
"        `cs`.`requiredTestTime` AS `requiredTestTime`,  \n" +
"        `cs`.`saftyStock` AS `saftyStock`,  \n" +
"        `cs`.`eau` AS `eau`,  \n" +
"        `cs`.`packagingWeight` AS `packagingWeight`,  \n" +
"        `cs`.`packagingWeightUom` AS `packagingWeightUom`,  \n" +
"        `cs`.`grossWeight` AS `grossWeight`,  \n" +
"        `cs`.`grossWeightUom` AS `grossWeightUom`,  \n" +
"        `cs`.`maxPriceLimit` AS `maxPriceLimit`,  \n" +
"        `cs`.`maxQtyonHand` AS `maxQtyonHand`  \n" +
"    FROM  \n" +
"        (((`component` `c`  \n" +
"        JOIN `component_attributes` `ca` ON ((`ca`.`refComponentID` = (CASE  \n" +
"            WHEN (`c`.`mfgType` = 'MFG') THEN `c`.`id`  \n" +
"            ELSE `c`.`refSupplierMfgpnComponentID`  \n" +
"        END))))  \n" +
"        LEFT JOIN `component_bomsetting` `cb` ON ((`cb`.`refComponentID` = (CASE  \n" +
"            WHEN (`c`.`mfgType` = 'MFG') THEN `c`.`id`  \n" +
"            ELSE `c`.`refSupplierMfgpnComponentID`  \n" +
"        END))))  \n" +
"        LEFT JOIN `component_settings` `cs` ON ((`cs`.`refComponentID` = (CASE  \n" +
"            WHEN (`c`.`mfgType` = 'MFG') THEN `c`.`id`  \n" +
"            ELSE `c`.`refSupplierMfgpnComponentID`  \n" +
"        END))))  \n" +
"    WHERE  \n" +
"        (`c`.`isDeleted` = 0);  \n" +
"CREATE or replace VIEW `vu_component_mpn` AS  \n" +
"    SELECT  \n" +
"           `c`.`id` AS `id`,  \n" +
"        `c`.`mfgType` AS `mfgType`,  \n" +
"        `c`.`refMfgPNMfgCodeId` AS `refMfgPNMfgCodeId`,  \n" +
"        `c`.`refSupplierMfgpnComponentID` AS `refSupplierMfgpnComponentID`,  \n" +
"        `c`.`isCPN` AS `isCPN`,  \n" +
"        `c`.`isCustom` AS `isCustom`,  \n" +
"        `c`.`rfqOnly` AS `rfqOnly`,  \n" +
"        `c`.`category` AS `category`,  \n" +
"        `c`.`partType` AS `partType`,  \n" +
"        `c`.`epicorType` AS `epicorType`,  \n" +
"        `c`.`dataSheetLink` AS `dataSheetLink`,  \n" +
"        `c`.`imageURL` AS `imageURL`,  \n" +
"        `c`.`assemblyType` AS `assemblyType`,  \n" +
"        `c`.`mfgcodeID` AS `mfgcodeID`,  \n" +
"        `c`.`mfrNameText` AS `mfrNameText`,  \n" +
"        `c`.`custAssyPN` AS `custAssyPN`,  \n" +
"        `c`.`rev` AS `rev`,  \n" +
"        `c`.`mfgPN` AS `mfgPN`,  \n" +
"        `c`.`assyCode` AS `assyCode`,  \n" +
"        `c`.`nickName` AS `nickName`,  \n" +
"        `c`.`PIDCode` AS `PIDCode`,  \n" +
"        `c`.`isPIDManual` AS `isPIDManual`,  \n" +
"        `c`.`productionPN` AS `productionPN`,  \n" +
"        `c`.`costCategoryID` AS `costCategoryID`,  \n" +
"        `c`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
"        `c`.`detailDescription` AS `detailDescription`,  \n" +
"        `c`.`specialNote` AS `specialNote`,  \n" +
"        `c`.`purchasingComment` AS `purchasingComment`,  \n" +
"        `c`.`partStatus` AS `partStatus`,  \n" +
"        `c`.`partStatusText` AS `partStatusText`,  \n" +
"        `c`.`ltbDate` AS `ltbDate`,  \n" +
"        `c`.`eolDate` AS `eolDate`,  \n" +
"        `c`.`obsoleteDate` AS `obsoleteDate`,  \n" +
"        `c`.`reversalDate` AS `reversalDate`,  \n" +
"        `c`.`isReversal` AS `isReversal`,  \n" +
"        `c`.`predictedObsolescenceYear` AS `predictedObsolescenceYear`,  \n" +
"        `c`.`leadTime` AS `leadTime`,  \n" +
"        `c`.`rfqNumber` AS `rfqNumber`,  \n" +
"        `c`.`quoteValidTillDate` AS `quoteValidTillDate`,  \n" +
"        `c`.`internalReference` AS `internalReference`,  \n" +
"        `c`.`serialNumber` AS `serialNumber`,  \n" +
"        `c`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
"        `c`.`rohsText` AS `rohsText`,  \n" +
"        `c`.`rohsDeviation` AS `rohsDeviation`,  \n" +
"        `c`.`isHazmatMaterial` AS `isHazmatMaterial`,  \n" +
"        `c`.`mslID` AS `mslID`,  \n" +
"        `c`.`isWaterSoluble` AS `isWaterSoluble`,  \n" +
"        `c`.`isNoClean` AS `isNoClean`,  \n" +
"        `c`.`isFluxNotApplicable` AS `isFluxNotApplicable`,  \n" +
"        `c`.`packageQty` AS `packageQty`,  \n" +
"        `c`.`countryOfOrigin` AS `countryOfOrigin`,  \n" +
"        `c`.`htsCode` AS `htsCode`,  \n" +
"        `c`.`deviceMarking` AS `deviceMarking`,  \n" +
"        `c`.`packagingID` AS `packagingID`,  \n" +
"        `c`.`packaging` AS `packaging`,  \n" +
"        `c`.`minimum` AS `minimum`,  \n" +
"        `c`.`mult` AS `mult`,  \n" +
"        `c`.`umidSPQ` AS `umidSPQ`,  \n" +
"        `c`.`unit` AS `unit`,  \n" +
"        `c`.`uomClassID` AS `uomClassID`,  \n" +
"        `c`.`uom` AS `uom`,  \n" +
"        `c`.`uomText` AS `uomText`,  \n" +
"        `c`.`pcbPerArray` AS `pcbPerArray`,  \n" +
"        `c`.`price` AS `price`,  \n" +
"        `c`.`isGoodPart` AS `isGoodPart`,  \n" +
"        `c`.`replacementPartID` AS `replacementPartID`,  \n" +
"        `c`.`systemGenerated` AS `systemGenerated`,  \n" +
"        `c`.`documentPath` AS `documentPath`,  \n" +
"        `c`.`frequencyType` AS `frequencyType`,  \n" +
"        `c`.`frequency` AS `frequency`,  \n" +
"        `c`.`salesacctId` AS `salesacctId`,  \n" +
"        `c`.`purchaseacctId` AS `purchaseacctId`,  \n" +
"        `c`.`isReceiveBulkItem` AS `isReceiveBulkItem`,  \n" +
"        `c`.`dateCodeFormatID` AS `dateCodeFormatID`,  \n" +
"        `c`.`isDateCodeFormat` AS `isDateCodeFormat`,  \n" +
"        `c`.`unqDate` AS `unqDate`,  \n" +
"        `c`.`isDeleted` AS `isDeleted`,  \n" +
"        `c`.`createdBy` AS `createdBy`,  \n" +
"        `c`.`createdAt` AS `createdAt`,  \n" +
"        `c`.`createByRoleId` AS `createByRoleId`,  \n" +
"        `c`.`updatedBy` AS `updatedBy`,  \n" +
"        `c`.`updatedAt` AS `updatedAt`,  \n" +
"        `c`.`updateByRoleId` AS `updateByRoleId`,  \n" +
"        `c`.`deletedBy` AS `deletedBy`,  \n" +
"        `c`.`deletedAt` AS `deletedAt`,  \n" +
"        `c`.`deleteByRoleId` AS `deleteByRoleId`,  \n" +
"        `ca`.`packaginggroupID` AS `packaginggroupID`,  \n" +
"        `ca`.`isCloudApiUpdateAttribute` AS `isCloudApiUpdateAttribute`,  \n" +
"        `ca`.`functionalCategoryID` AS `functionalCategoryID`,  \n" +
"        `ca`.`functionalCategoryText` AS `functionalCategoryText`,  \n" +
"        `ca`.`mountingTypeID` AS `mountingTypeID`,  \n" +
"        `ca`.`mountingTypeText` AS `mountingTypeText`,  \n" +
"        `ca`.`isEpoxyMount` AS `isEpoxyMount`,  \n" +
"        `ca`.`partPackageID` AS `partPackageID`,  \n" +
"        `ca`.`partPackage` AS `partPackage`,  \n" +
"        `ca`.`connecterTypeID` AS `connecterTypeID`,  \n" +
"        `ca`.`connectorTypeText` AS `connectorTypeText`,  \n" +
"        `ca`.`feature` AS `feature`,  \n" +
"        `ca`.`noOfPosition` AS `noOfPosition`,  \n" +
"        `ca`.`noOfPositionText` AS `noOfPositionText`,  \n" +
"        `ca`.`noOfRows` AS `noOfRows`,  \n" +
"        `ca`.`noOfRowsText` AS `noOfRowsText`,  \n" +
"        `ca`.`operatingTemp` AS `operatingTemp`,  \n" +
"        `ca`.`minOperatingTemp` AS `minOperatingTemp`,  \n" +
"        `ca`.`maxOperatingTemp` AS `maxOperatingTemp`,  \n" +
"        `ca`.`temperatureCoefficient` AS `temperatureCoefficient`,  \n" +
"        `ca`.`temperatureCoefficientValue` AS `temperatureCoefficientValue`,  \n" +
"        `ca`.`temperatureCoefficientUnit` AS `temperatureCoefficientUnit`,  \n" +
"        `ca`.`pitch` AS `pitch`,  \n" +
"        `ca`.`pitchMating` AS `pitchMating`,  \n" +
"        `ca`.`sizeDimension` AS `sizeDimension`,  \n" +
"        `ca`.`length` AS `length`,  \n" +
"        `ca`.`width` AS `width`,  \n" +
"        `ca`.`height` AS `height`,  \n" +
"        `ca`.`heightText` AS `heightText`,  \n" +
"        `ca`.`tolerance` AS `tolerance`,  \n" +
"        `ca`.`voltage` AS `voltage`,  \n" +
"        `ca`.`value` AS `value`,  \n" +
"        `ca`.`powerRating` AS `powerRating`,  \n" +
"        `ca`.`weight` AS `weight`,  \n" +
"        `ca`.`color` AS `color`,  \n" +
"        `ca`.`isTemperatureSensitive` AS `isTemperatureSensitive`,  \n" +
"        IFNULL(`cb`.`bomLock`, 0) AS `bomLock`,  \n" +
"        `cb`.`liveInternalVersion` AS `liveInternalVersion`,  \n" +
"        `cb`.`exteranalAPICallStatus` AS `exteranalAPICallStatus`,  \n" +
"        `cb`.`isBOMVerified` AS `isBOMVerified`,  \n" +
"        `cb`.`liveVersion` AS `liveVersion`,  \n" +
"        `cb`.`isActivityStart` AS `isActivityStart`,  \n" +
"        `cb`.`activityStartBy` AS `activityStartBy`,  \n" +
"        `cb`.`activityStartAt` AS `activityStartAt`,  \n" +
"        `cb`.`activityStopAt` AS `activityStopAt`,  \n" +
"        `cs`.`functionalTypePartRequired` AS `functionalTypePartRequired`,  \n" +
"        `cs`.`mountingTypePartRequired` AS `mountingTypePartRequired`,  \n" +
"        `cs`.`businessRisk` AS `businessRisk`,  \n" +
"        `cs`.`totalSolderPoints` AS `totalSolderPoints`,  \n" +
"        IFNULL(`cs`.`trackSerialNumber`, 0) AS `trackSerialNumber`,  \n" +
"        IFNULL(`cs`.`umidVerificationRequire`, 0) AS `umidVerificationRequire`,  \n" +
"        `cs`.`isAutoVerificationOfAllAssemblyParts` AS `isAutoVerificationOfAllAssemblyParts`,  \n" +
"        IFNULL(`cs`.`restrictUSEwithpermission`, 0) AS `restrictUSEwithpermission`,  \n" +
"        IFNULL(`cs`.`restrictPackagingUseWithpermission`,  \n" +
"                0) AS `restrictPackagingUseWithpermission`,  \n" +
"        ifnull(`cs`.`restrictUsePermanently`,0) AS `restrictUsePermanently`,  \n" +
"        IFNULL(`cs`.`restrictPackagingUsePermanently`,  \n" +
"                0) AS `restrictPackagingUsePermanently`,  \n" +
"        `cs`.`scrapRatePercentagePerBuild` AS `scrapRatePercentagePerBuild`,  \n" +
"        `cs`.`scrapValuePerBuild` AS `scrapValuePerBuild`,  \n" +
"        `cs`.`plannedOverRunPercentagePerBuild` AS `plannedOverRunPercentagePerBuild`,  \n" +
"        `cs`.`plannedValuePerBuild` AS `plannedValuePerBuild`,  \n" +
"        `cs`.`selfLifeDays` AS `selfLifeDays`,  \n" +
"        `cs`.`shelfLifeAcceptanceDays` AS `shelfLifeAcceptanceDays`,  \n" +
"        `cs`.`shelfListDaysThresholdPercentage` AS `shelfListDaysThresholdPercentage`,  \n" +
"        `cs`.`maxShelfLifeAcceptanceDays` AS `maxShelfLifeAcceptanceDays`,  \n" +
"        `cs`.`maxShelfListDaysThresholdPercentage` AS `maxShelfListDaysThresholdPercentage`,  \n" +
"        `cs`.`shelfLifeDateType` AS `shelfLifeDateType`,  \n" +
"        `cs`.`alertExpiryDays` AS `alertExpiryDays`,  \n" +
"        `cs`.`programingRequired` AS `programingRequired`,  \n" +
"        `cs`.`driverToolRequired` AS `driverToolRequired`,  \n" +
"        `cs`.`matingPartRquired` AS `matingPartRquired`,  \n" +
"        `cs`.`pickupPadRequired` AS `pickupPadRequired`,  \n" +
"        `cs`.`functionalTestingRequired` AS `functionalTestingRequired`,  \n" +
"        `cs`.`requiredTestTime` AS `requiredTestTime`,  \n" +
"        `cs`.`saftyStock` AS `saftyStock`,  \n" +
"        `cs`.`eau` AS `eau`,  \n" +
"        `cs`.`packagingWeight` AS `packagingWeight`,  \n" +
"        `cs`.`packagingWeightUom` AS `packagingWeightUom`,  \n" +
"        `cs`.`grossWeight` AS `grossWeight`,  \n" +
"        `cs`.`grossWeightUom` AS `grossWeightUom`,  \n" +
"        `cs`.`maxPriceLimit` AS `maxPriceLimit`,  \n" +
"        `cs`.`maxQtyonHand` AS `maxQtyonHand`  \n" +
"    FROM  \n" +
"        (((`component` `c`  \n" +
"        JOIN `component_attributes` `ca` ON ((`c`.`id` = `ca`.`refComponentID`)))  \n" +
"        LEFT JOIN `component_bomsetting` `cb` ON ((`c`.`id` = `cb`.`refComponentID`)))  \n" +
"        LEFT JOIN `component_settings` `cs` ON ((`c`.`id` = `cs`.`refComponentID`)))  \n" +
"    WHERE  \n" +
"        ((`c`.`mfgType` = 'MFG')  \n" +
"            AND (`c`.`isDeleted` = 0));  \n" +
 /* **************************** Add Script Version -> 21-03-2022 *********************************** */
 "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
 "VALUES (6034,'2.00','V1',' create new trigger Trg_AI_component_Insert_attribute,Trg_AU_component_Update_attribute,vu_component - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
 );
break;
case 6034:
	allDbChangesArray.push(
	/* **************************** New Script -> 22-03-2022 *********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_GetAssemblyWOStockDetails;  \n" +
	"CREATE PROCEDURE `Sproc_GetAssemblyWOStockDetails`(  \n" +
	"	IN ppageIndex INT,  \n" +
	"	IN pRecordPerPage INT,  \n" +
	"	IN pOrderBy VARCHAR(255),  \n" +
	"	IN pWhereClause VARCHAR(16383),  \n" +
	"	IN pPartID INT,  \n" +
	"	IN pWoID INT ,  \n" +
	"    IN pPONumber VARCHAR(255),  \n" +
	"    IN pIsShowAllWO TINYINT,  \n" +
	"    IN pSONumber VARCHAR(255))  \n" +
	"BEGIN  \n" +
	"	DECLARE pOffset INT;  \n" +
	"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
	"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
	"	DECLARE v_TimeZone VARCHAR(50);  \n" +
	"	DECLARE whereClause1 VARCHAR(500);  \n" +
	"	SET whereClause1 = \"where 1=1\";  \n" +
	"  \n" +
	"    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
	"		SET pWhereClause = '1=1' ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
	"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
	"  \n" +
	"    IF pPartID IS NOT NULL THEN  \n" +
	"		SET whereClause1 = CONCAT(whereClause1,\" AND PartID = \", pPartID);  \n" +
	"	END IF;  \n" +
	"  \n" +
	"    IF pWoID IS NOT NULL THEN  \n" +
	"		SET whereClause1 = CONCAT(whereClause1,\" AND vu_wss.woID = \", pWoID);  \n" +
	"	END IF;  \n" +
	"  \n" +
	"    IF (pPONumber IS NOT NULL) THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND c.poNumber like \"%' ,pPONumber,'%\" and c.soNumbers like \"%' ,pSONumber,'%\" ' );  \n" +
	"	END IF;  \n" +
	"  \n" +
	"     IF (pIsShowAllWO = FALSE)  THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND remaningtotalQty > 0 ');  \n" +
	"    END IF;  \n" +
	"  \n" +
	"	SET @Sproc_GetAssemblyWOStockDetails = CONCAT(\"SELECT vu_wss.* ,  \n" +
	"						(vu_wss.readytoShipQty + vu_wss.shippedQty) AS movedToStockQty ,  \n" +
	"						vu_wosod.totalPOQty, vu_wosod.POQtyValues soPOQty,  \n" +
	"						 vu_wosod.totalMRPQty, vu_wosod.MRPQtyValues soMRPQty,  \n" +
	"                         (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.initialStockPoQty ELSE vu_wss.poQty END) AS initialWOStockPOQty ,  \n" +
	"						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
	"							(select group_concat(poNumberList SEPARATOR ',') FROM (  \n" +
	"								SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT poNumber SEPARATOR ', ')  \n" +
	"								else GROUP_CONCAT(DISTINCT poNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end	) poNumberList  \n" +
	"								 FROM `assemblystock`  \n" +
	"								 WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS' and partID = vu_wss.partID  \n" +
	"								 GROUP BY refSalesOrderID, poNumber) a)  \n" +
	"							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.poNumber ELSE parentSaleDtl.poNumber END)  \n" +
	"						   END) poNumber,  \n" +
	"						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
	"							(select group_concat(if(soNumberList='',null,soNumberList) SEPARATOR ',') FROM (  \n" +
	"								SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT soNumber SEPARATOR ', ')  \n" +
	"									 else GROUP_CONCAT(DISTINCT soNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end)  soNumberList  \n" +
	"									FROM `assemblystock`  \n" +
	"									WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS' and partID = vu_wss.partID  \n" +
	"								 GROUP BY refSalesOrderID, soNumber) a)  \n" +
	"							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END)  \n" +
	"                            END) soNumbers,  \n" +
	"						vu_wosod.lineID, vu_wosod.salesOrderMstIDs, vu_wosod.SOPOQtyValues ,  \n" +
	"						(CASE WHEN vu_wss.woid IS NULL THEN 'Initial Stock' ELSE 'Work Order Stock' END) AS stockTypeName ,  \n" +
	"                        (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END) AS excessFreetoUseQty,  \n" +
	"                        (CASE WHEN vu_wss.woid IS NULL THEN ((vu_wss.readytoShipQty + vu_wss.shippedQty + vu_wss.stockAdjustmentQty) - (vu_wss.shippedQty)) ELSE ((vu_wss.buildQty) - (vu_wss.scrapQty + vu_wss.shippedQty + vu_wss.readytoShipQty)) END) AS remaningtotalQty  ,  \n" +
	"                        (CASE WHEN (CASE WHEN vu_wss.woid IS NULL THEN ((vu_wss.readytoShipQty + vu_wss.shippedQty + vu_wss.stockAdjustmentQty) - (vu_wss.shippedQty)) ELSE ((vu_wss.buildQty) - (vu_wss.scrapQty + vu_wss.shippedQty + vu_wss.readytoShipQty)) END) = 0 THEN 'Completed' ELSE '' END) workOrderStatus  \n" +
	"					FROM vu_workorder_summary_stk vu_wss  \n" +
	"						LEFT JOIN (SELECT woID AS woMstID, terminateWOID, isRevisedWO FROM workorder WHERE deletedAt IS NULL) AS wo  \n" +
	"								ON vu_wss.woid = wo.woMstID  \n" +
	"						LEFT JOIN vu_workorder_salesorder_details vu_wosod ON vu_wss.woid =  vu_wosod.woID  \n" +
	"						LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON wo.terminateWOID = parentSaleDtl.woID  \n" +
	"					\", whereClause1);  \n" +
	"  \n" +
	"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
	"		SET pOrderBy = CONCAT(\"ORDER BY woid ASC\");  \n" +
	"	ELSE  \n" +
	"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
	"		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
	"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
	"	ELSE  \n" +
	"		SET rowNumWhere = '';  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyWOStockDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
	"	PREPARE query1 FROM @SQLStatement1;  \n" +
	"	EXECUTE query1;  \n" +
	"	DEALLOCATE PREPARE query1;  \n" +
	"	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyWOStockDetails,\" ) c where \" , pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
	"    PREPARE query2 FROM @SQLStatement2;  \n" +
	"	EXECUTE query2;  \n" +
	"	DEALLOCATE PREPARE query2;  \n" +
	"END;  \n" +
	/* **************************** Add Script Version -> 22-03-2022  *********************************** */
		"INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
		"VALUES (6035,'2.00','V1','Sproc_GetAssemblyWOStockDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
	);
break;   
  case 6035:
    allDbChangesArray.push(
          /* **************************** New Script -> 21-03-2022 *********************************** */
          "Drop Procedure if exists `Sproc_RemoveMPNFromCPNMapping`;  \n" +
        "CREATE PROCEDURE `Sproc_RemoveMPNFromCPNMapping`(  \n" +
        "	IN prefCompID INT,  \n" +
        "	IN prefCPNID INT,  \n" +
        "    IN pUserID INT,  \n" +
        "    IN pRoleID INT,  \n" +
        "    IN pDeleteRequest TINYINT,  \n" +
        "    IN pDeleteMPNFrom TINYINT,  \n" +
        "    IN preason VARCHAR(1200)  \n" +
        ")  \n" +
        "BEGIN  \n" +
        "DECLARE vLiveInternalVersion INT;  \n" +
        "DECLARE vLiveInternalVersionMethod VARCHAR(50);  \n" +
        "DECLARE vLiveInternalVersionDateFormate VARCHAR(50);  \n" +
        "DECLARE vInternalVersion VARCHAR(100);  \n" +
        "DECLARE vMFGPN VARCHAR(100);  \n" +
        "DECLARE subAssyType INT;  \n" +
        "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
        "	BEGIN  \n" +
        "		ROLLBACK;  \n" +
        "		RESIGNAL;  \n" +
        "	END;  \n" +
        "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
        "	  BEGIN  \n" +
        "		ROLLBACK;  \n" +
        "		RESIGNAL;  \n" +
        "	END;  \n" +
        "	START TRANSACTION;  \n" +
        "    SET  subAssyType = 3;  \n" +
        "	# get Internal version format  \n" +
        "		 SELECT  `values` INTO vLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
        "			IF vLiveInternalVersionMethod = \"P\" THEN  \n" +
        "				SELECT `values` INTO vInternalVersion FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
        "			ELSE  \n" +
        "				SELECT `values` INTO vLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
        "				IF vLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
        "					SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO vInternalVersion;  \n" +
        "				ELSE  \n" +
        "					SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO vInternalVersion;  \n" +
        "				END IF;  \n" +
        "			END IF;  \n" +
        "  \n" +
        "		SELECT IFNULL(k.liveInternalVersion, 0) INTO vLiveInternalVersion FROM component_bomsetting k WHERE k.refComponentID = prefCPNID;  \n" +
        "        SET vLiveInternalVersion  = vLiveInternalVersion  + 1;  \n" +
        "  \n" +
        "  	DROP TEMPORARY TABLE IF EXISTS  tempRfqLineItems;  \n" +
        "	CREATE TEMPORARY TABLE IF NOT EXISTS tempRfqLineItems AS  \n" +
        "	SELECT  rl.partID  \n" +
        "	FROM rfq_lineitems AS rl  \n" +
        "	WHERE rl.custPNID = prefCPNID AND rl.isDeleted = 0  \n" +
        "	GROUP BY rl.partID;  \n" +
        "  \n" +
        "  \n" +
        "	DROP TEMPORARY TABLE IF EXISTS  tempRefComponentIds;  \n" +
        "	CREATE TEMPORARY TABLE IF NOT EXISTS tempRefComponentIds AS(  \n" +
        "		WITH RECURSIVE cte AS  \n" +
        "		(  \n" +
        "		  SELECT  c.Id AS partId, c.id AS childPartId, cb.liveinternalversion AS liveinternalversion  \n" +
        "		  FROM COMPONENT c  \n" +
        "		  JOIN component_bomsetting cb ON cb.refComponentID=c.id  \n" +
        "		  JOIN tempRfqLineItems trla ON trla.partID = c.id  \n" +
        "		  WHERE c.category = subAssyType AND c.isdeleted = 0  \n" +
        "  \n" +
        "		  UNION ALL  \n" +
        "		  SELECT rlp.partId AS partId, child.partId AS childPartId,  cb.liveinternalversion AS liveinternalversion  \n" +
        "		  FROM rfq_lineitems rlp  \n" +
        "		  INNER JOIN rfq_lineitems_alternatepart rlap ON rlap.rfqLineItemsID = rlp.id  \n" +
        "		  INNER JOIN COMPONENT cp ON cp.id = rlap.mfgPNID  \n" +
        "		  LEFT JOIN component_bomsetting cb ON cb.refComponentID=rlap.mfgPNID  \n" +
        "		  INNER JOIN cte child ON child.partID = rlap.mfgPNID AND cp.category = subAssyType  \n" +
        "		  WHERE cp.isdeleted = 0 AND rlp.isdeleted = 0 AND rlap.isdeleted = 0  \n" +
        "		)  \n" +
        "	SELECT DISTINCT partId FROM cte);  \n" +
        "  \n" +
        "   	UPDATE component_bomsetting  cb  \n" +
        "		INNER JOIN tempRefComponentIds trc on cb.refComponentID = trc.partId  \n" +
        "		SET  \n" +
        "			liveinternalversion = IF(ISNULL(cb.liveinternalversion),0, (cb.liveinternalversion + 1)) ,  \n" +
        "			liveVersion = CONCAT(fun_getInternalVersionTextforUpdatePartInternalVersion(cb.refComponentID),'-',CAST(IF(ISNULL(cb.liveinternalversion),0, (cb.liveinternalversion + 1)) AS CHAR));  \n" +
        "  \n" +
        "	DROP TEMPORARY TABLE IF EXISTS  tempRefComponentIds;  \n" +
        "        /* Revert below code and remove 'tempRefComponentIds' table After remove trigger code(Trg_AU_Component_Bomsetting) for update Interal version into component table. */  \n" +
        "        /* WHERE refComponentID  IN(  \n" +
        "		WITH RECURSIVE cte AS  \n" +
        "		(  \n" +
        "		  SELECT  c.Id AS partId, c.id AS childPartId, cb.liveinternalversion AS liveinternalversion  \n" +
        "		  FROM COMPONENT c  \n" +
        "		  JOIN component_bomsetting cb ON cb.refComponentID=c.id  \n" +
        "		  JOIN tempRfqLineItems trla ON trla.partID = c.id  \n" +
        "		  WHERE c.category = subAssyType AND c.isdeleted = 0  \n" +
        "  \n" +
        "		  UNION ALL  \n" +
        "		  SELECT rlp.partId AS partId, child.partId AS childPartId,  cb.liveinternalversion AS liveinternalversion  \n" +
        "		  FROM rfq_lineitems rlp  \n" +
        "          INNER JOIN rfq_lineitems_alternatepart rlap ON rlap.rfqLineItemsID = rlp.id  \n" +
        "          INNER JOIN COMPONENT cp ON cp.id = rlap.mfgPNID  \n" +
        "          LEFT JOIN component_bomsetting cb ON cb.refComponentID=rlap.mfgPNID  \n" +
        "          INNER JOIN cte child ON child.partID = rlap.mfgPNID AND cp.category = subAssyType  \n" +
        "		  WHERE cp.isdeleted = 0 AND rlp.isdeleted = 0 AND rlap.isdeleted = 0  \n" +
        "		)  \n" +
        "		SELECT DISTINCT partId FROM cte);  */  \n" +
        "  \n" +
        "		SELECT  j.mfgPN INTO vMFGPN FROM COMPONENT j WHERE j.id = prefCompID;  \n" +
        "        INSERT INTO rfq_assembly_history  \n" +
        "		(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion,DESCRIPTION, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
        "		VALUES (\"component\", prefCPNID, NULL,NULL, prefCPNID, \"MPN\",  vMFGPN ,NULL, CONCAT(vInternalVersion,'-',CAST(vLiveInternalVersion AS CHAR)),  \n" +
        "        CONCAT('Delete Request From: ',(CASE WHEN pDeleteRequest = 1 THEN 'Internal Error' WHEN pDeleteRequest = 2 THEN 'Customer Request' END), '<br/> Reason: ', preason),  \n" +
        "        fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);  \n" +
        "  \n" +
        "    UPDATE component_bomsetting  \n" +
        "	SET liveInternalVersion = vLiveInternalVersion, liveVersion = CONCAT(vInternalVersion,'-',CAST(vLiveInternalVersion AS CHAR))  \n" +
        "    WHERE refComponentID = prefCPNID;  \n" +
        "  \n" +
        "	# remove CPN entry from CPN mapping  \n" +
        "        UPDATE component_cust_alias_rev_pn  \n" +
        "        SET isdeleted = 1,  \n" +
        "			deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
        "			deletedBy = pUserID,  \n" +
        "			deleteByRoleId = pRoleID  \n" +
        "        WHERE refComponentID = prefCompID AND refCPNPartID = prefCPNID AND isdeleted = 0;  \n" +
        "  \n" +
        "	# Manage History for Change  \n" +
        "  \n" +
        "    IF pDeleteMPNFrom = 1 THEN  \n" +
        "	 # Update CPNMPN Mapping flage value in BOM  \n" +
        "        UPDATE rfq_lineitems_alternatepart rla  \n" +
        "        JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
        "        SET rla.isMPNAddedinCPN = 0,  \n" +
        "			rla.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
        "            rla.updatedBy = pUserID,  \n" +
        "            rla.updateByRoleId = pRoleID  \n" +
        "        WHERE rla.mfgPNID = prefCompID AND rl.custPNID = prefCPNID AND rla.isdeleted = 0;  \n" +
        "  \n" +
        "  \n" +
        "	ELSEIF pDeleteMPNFrom = 2 THEN  \n" +
        "	 # Update CPNMPN Mapping flage value in BOM  \n" +
        "        UPDATE rfq_lineitems_alternatepart rla  \n" +
        "        JOIN  ( SELECT COUNT(1) OVER(PARTITION BY rla.rfqLineItemsID) alternatepartCount, rla.* FROM rfq_lineitems_alternatepart rla WHERE  rla.isdeleted = 0 )a ON a.id = rla.id  \n" +
        "		JOIN rfq_lineitems rl ON rl.id = a.rfqLineItemsID AND a.isDeleted = 0  \n" +
        "        SET rla.isDeleted = 1,  \n" +
        "			rla.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
        "            rla.deletedBy = pUserID,  \n" +
        "            rla.deleteByRoleId = pRoleID  \n" +
        "        WHERE a.mfgPNID = prefCompID AND rl.custPNID = prefCPNID AND a.alternatepartCount>1 AND a.isdeleted = 0;  \n" +
        "  \n" +
        "		UPDATE rfq_lineitems_alternatepart rla  \n" +
        "        JOIN ( SELECT COUNT(1) OVER(PARTITION BY rla.rfqLineItemsID) alternatepartCount, rla.* FROM rfq_lineitems_alternatepart rla WHERE  rla.isdeleted = 0 ) a ON a.id = rla.id  \n" +
        "		JOIN rfq_lineitems rl ON rl.id = a.rfqLineItemsID AND a.isDeleted = 0  \n" +
        "        SET  \n" +
        "			rla.distributor = NULL, rla.distMfgCodeID = NULL, rla.distPN = NULL, rla.distMfgPNID = NULL, rla.mfgCode = NULL, rla.mfgCodeID = NULL,  \n" +
        "            rla.mfgPN = NULL, rla.mfgPNID = NULL, rla.description = NULL, rla.RoHSStatusID = NULL, rla.customerApproval = 'P',  \n" +
        "            rla.customerApprovalBy  = NULL, rla.customerApprovalDate = NULL, rla.badMfgPN = NULL, rla.userData1 = NULL, rla.userData2 = NULL,  \n" +
        "			rla.userData3 = NULL, rla.userData4 = NULL, rla.userData5 = NULL, rla.userData6 = NULL, rla.userData7 = NULL, rla.userData8 = NULL,  \n" +
        "            rla.userData9 = NULL, rla.userData10 = NULL, rla.updatedAt = fun_DatetimetoUTCDateTime(), rla.updatedBy  = pUserID, rla.updateByRoleId = pRoleID  \n" +
        "        WHERE a.mfgPNID = prefCompID AND rl.custPNID = prefCPNID AND a.alternatepartCount = 1 AND rla.isdeleted = 0;  \n" +
        "  \n" +
        "	END IF;  \n" +
        "  \n" +
        "COMMIT;  \n" +
        "  \n" +
        "END;  \n" +
          /* **************************** New Script -> 21-03-2022 *********************************** */
          "Drop procedure if exists `Sproc_DeleteRFQ_LineItems_AlternatePart_CPN`;  \n" +
        "CREATE PROCEDURE `Sproc_DeleteRFQ_LineItems_AlternatePart_CPN`(  \n" +
        "	IN pPartID INT,  \n" +
        "	IN pUserID INT  \n" +
        ")  \n" +
        "BEGIN  \n" +
        "	DECLARE totalCount INT DEFAULT 0;  \n" +
        "	DECLARE totalCPNCount INT DEFAULT 0;  \n" +
        "	DECLARE currIndex INT DEFAULT 0;  \n" +
        "	DECLARE currCPNIndex INT DEFAULT 0;  \n" +
        "	DECLARE totalMFGPNCount INT DEFAULT 0;  \n" +
        "	DECLARE currMFGPNIndex INT DEFAULT 0;  \n" +
        "	DECLARE currLineID INT;  \n" +
        "	DECLARE currPartID INT;  \n" +
        "	DECLARE currMFGPNID INT;  \n" +
        "	DECLARE currCustPNID INT;  \n" +
        "	DECLARE countAlternatePart INT DEFAULT 0;  \n" +
        "	DECLARE totMFGPN INT DEFAULT 0;  \n" +
        "	DECLARE mfgPnIndex INT DEFAULT 0;  \n" +
        "	DECLARE currMFGPN TEXT;  \n" +
        "	DECLARE currCustMFGPNID INT;  \n" +
        "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
        "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
        "	DECLARE pCompanyName VARCHAR(100);  \n" +
        "	DECLARE pLiveInternalVersion INT;  \n" +
        "  \n" +
        "	DROP TEMPORARY TABLE IF EXISTS temp_component_update_bom_list;  \n" +
        "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_update_bom_list (partId INT);  \n" +
        "  \n" +
        "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
        "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
        "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
        "	ELSE  \n" +
        "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
        "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
        "			SELECT DATE_FORMAT(UTC_DATE(), '%y%m%d') INTO pCompanyName ;  \n" +
        "		ELSE  \n" +
        "			SELECT DATE_FORMAT(UTC_DATE(), '%m%d%y') INTO pCompanyName ;  \n" +
        "		END IF;  \n" +
        "	END IF;  \n" +
        "  \n" +
        "	CREATE TEMPORARY TABLE IF NOT EXISTS existBOMCPNResult AS  \n" +
        "	SELECT  rl.id id,  rl.custPNID  \n" +
        "	FROM rfq_lineitems AS rl  \n" +
        "	WHERE partId = pPartID AND rl.isDeleted = 0 AND rl.custPNID IS NOT NULL;  \n" +
        "  \n" +
        "	-- SELECT * FROM existBOMCPNResult;  \n" +
        "	SELECT COUNT(1) INTO totalCPNCount FROM existBOMCPNResult;  \n" +
        "	IF totalCPNCount > 0 THEN  \n" +
        "		WHILE currCPNIndex < totalCPNCount DO  \n" +
        "		SELECT a.custPNID  \n" +
        "			INTO 	currCustPNID  \n" +
        "			FROM 	existBOMCPNResult a LIMIT currCPNIndex, 1;  \n" +
        "  \n" +
        "		CREATE TEMPORARY TABLE IF NOT EXISTS existCPNResult AS  \n" +
        "		SELECT id , refComponentID FROM component_cust_alias_rev_pn  \n" +
        "		WHERE refCPNPartID = currCustPNID AND isDeleted = 0 AND  \n" +
        "		refComponentID NOT IN (  \n" +
        "			SELECT rla.mfgPNID FROM rfq_lineitems_alternatepart rla  \n" +
        "			WHERE rla.partId = pPartID AND rla.rfqLineItemsID IN (  \n" +
        "				SELECT id FROM rfq_lineitems  \n" +
        "				WHERE partId = pPartID AND custPNID = currCustPNID AND isDeleted = 0  \n" +
        "				)  \n" +
        "			AND rla.isDeleted = 0);  \n" +
        "  \n" +
        "		CREATE TEMPORARY TABLE IF NOT EXISTS existBOMResult AS  \n" +
        "		SELECT  rl.id id,  rl.partID  \n" +
        "		FROM rfq_lineitems AS rl  \n" +
        "		WHERE partId != pPartID AND rl.custPNID =  currCustPNID AND rl.isDeleted = 0 ;  \n" +
        "  \n" +
        "		SELECT COUNT(1) INTO totalCount FROM existBOMResult;  \n" +
        "		IF totalCount > 0 THEN  \n" +
        "			WHILE currIndex < totalCount DO  \n" +
        "				SELECT  a.id,		a.partID  \n" +
        "				INTO 	currLineID	,currPartID  \n" +
        "				FROM 	existBOMResult a LIMIT currIndex, 1;  \n" +
        "  \n" +
        "				CREATE TEMPORARY TABLE IF NOT EXISTS existAlternateResult AS  \n" +
        "				SELECT id, mfgPNID FROM rfq_lineitems_alternatepart rla  \n" +
        "				WHERE rfqLineItemsID IN (  \n" +
        "					SELECT id FROM rfq_lineitems  \n" +
        "					WHERE partId = currPartID AND custPNID = currCustPNID  \n" +
        "					AND isDeleted = 0  \n" +
        "					)  \n" +
        "				AND mfgPNID IN (SELECT refComponentID FROM existCPNResult) AND isDeleted = 0;  \n" +
        "  \n" +
        "				SET countAlternatePart = 0;  \n" +
        "				SELECT COUNT(1) INTO countAlternatePart FROM existAlternateResult;  \n" +
        "  \n" +
        "				-- IF (countAlternatePart > 0) THEN  \n" +
        "				-- 	CALL Sproc_UpdatePartInternalVersion (currPartID);  \n" +
        "				-- 	UPDATE rfq_lineitems_alternatepart SET isDeleted = 1 , deletedAt = fun_DatetimetoUTCDateTime(), deletedBy = pUserID WHERE id IN (SELECT id FROM existAlternateResult);  \n" +
        "				-- END IF;  \n" +
        "  \n" +
        "				DROP TEMPORARY TABLE existAlternateResult;  \n" +
        "				SET currIndex = currIndex + 1;  \n" +
        "  \n" +
        "			END WHILE;  \n" +
        "		END IF;  \n" +
        "  \n" +
        "		SET currCPNIndex = currCPNIndex + 1;  \n" +
        "  \n" +
        "		DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;  \n" +
        "		CREATE TEMPORARY TABLE t_CustMFGPn(cpnID INT,  txt TEXT );  \n" +
        "		INSERT INTO t_CustMFGPn(cpnID, txt)  \n" +
        "		SELECT cpn.refCPNPartID, GROUP_CONCAT(c.mfgPN SEPARATOR ', ') FROM component_cust_alias_rev_pn cpn  \n" +
        "		JOIN vu_component c ON c.id = cpn.refComponentID  \n" +
        "		WHERE cpn.deletedAt IS NULL AND cpn.id IN (SELECT es.refComponentID FROM existCPNResult as es) GROUP BY refCPNPartID;  \n" +
        "    		select 4;  \n" +
        "		/* add all mapping mfgPN history with internal version */  \n" +
        "		SELECT COUNT(*) FROM t_CustMFGPn INTO totMFGPN;  \n" +
        "  \n" +
        "		WHILE mfgPnIndex < totMFGPN DO  \n" +
        "  \n" +
        "		SELECT  a.txt,		a.cpnID  \n" +
        "		INTO 	currMFGPN	,currCustMFGPNID  \n" +
        "		FROM 	t_CustMFGPn a LIMIT mfgPnIndex, 1;  \n" +
        "  \n" +
        "		SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM vu_component WHERE id = currCustMFGPNID;  \n" +
        "		SET pLiveInternalVersion  = pLiveInternalVersion  + 1;  \n" +
        "  /*  \n" +
        "		INSERT INTO rfq_assembly_history (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
        "							oldValue,newValue,description, changeVersion,createdAt,createdBy)  \n" +
        "		VALUES 	(\"component\", currCustMFGPNID, NULL,NULL, currCustMFGPNID, \"MPN\",  \n" +
        "			NULL, NULL ,CONCAT(\"MFG PN \",currMFGPN, \" Deleted\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)) , fun_DatetimetoUTCDateTime(),puserID);  \n" +
        "  \n" +
        "		UPDATE component  \n" +
        "		SET liveInternalVersion = pLiveInternalVersion, liveVersion = CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)) WHERE id = currCustMFGPNID;  \n" +
        "  */  \n" +
        "		SET mfgPnIndex = mfgPnIndex + 1;  \n" +
        "		END WHILE;  \n" +
        "  \n" +
        "		-- UPDATE component_cust_alias_rev_pn SET isDeleted = 1 , deletedAt = fun_DatetimetoUTCDateTime(), deletedBy = pUserID WHERE id IN (SELECT id FROM existCPNResult);  \n" +
        "  \n" +
        "		DROP TEMPORARY TABLE t_CustMFGPn;  \n" +
        "		DROP TEMPORARY TABLE existBOMResult;  \n" +
        "		DROP TEMPORARY TABLE existCPNResult;  \n" +
        "  \n" +
        "		-- INSERT INTO temp_component_update_bom_list  \n" +
        "		-- values EXECUTE Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
        "		CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID,FALSE);  \n" +
        "  \n" +
        "		INSERT INTO temp_component_update_bom_list(partId) SELECT partId FROM temp_component_update_bom;  \n" +
        "  \n" +
        "		END WHILE;  \n" +
        "		SELECT DISTINCT * FROM temp_component_update_bom_list;  \n" +
        "	END IF;  \n" +
        "  \n" +
        "END;  \n" +
          /* **************************** New Script -> 21-03-2022 *********************************** */
        "Drop procedure if exists `Sproc_ManageBOMCustPN`;  \n" +
        "CREATE PROCEDURE `Sproc_ManageBOMCustPN`(  \n" +
        "IN pPartID INT,  \n" +
        "IN pUserID INT,  \n" +
        "IN pRoleID INT  \n" +
        ")  \n" +
        "BEGIN  \n" +
        "DECLARE totalCount INT DEFAULT 0;  \n" +
        "DECLARE currIndex INT DEFAULT 0;  \n" +
        "DECLARE prevLineID INT;  \n" +
        "DECLARE currCustPNID INT;  \n" +
        "DECLARE currMFGPNID INT;  \n" +
        "DECLARE currLineID INT;  \n" +
        "DECLARE mountingTypeID INT;  \n" +
        "DECLARE functionalCategoryID INT;  \n" +
        "DECLARE rohsStatusID INT;  \n" +
        "DECLARE categoryID INT;  \n" +
        "DECLARE partTypeID INT;  \n" +
        "DECLARE statusID INT;  \n" +
        "DECLARE mfgPNID INT;  \n" +
        "DECLARE pisMPNAddedinCPN TINYINT;  \n" +
        "DECLARE currCustRev VARCHAR(10);  \n" +
        "DECLARE currCustPN VARCHAR(500);  \n" +
        "DECLARE currCustomerPartDesc TEXT;  \n" +
        "DECLARE mfgPN VARCHAR(500);  \n" +
        "DECLARE mfgPID VARCHAR(500);  \n" +
        "DECLARE maxDisplayOrder DECIMAL;  \n" +
        "DECLARE pLiveInternalVersion INT;  \n" +
        "DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
        "DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
        "DECLARE pCompanyName VARCHAR(100);  \n" +
        "DECLARE pMFGPN VARCHAR(100);  \n" +
        "DECLARE pEpicoreType VARCHAR(100);  \n" +
        "DECLARE vSerialNumer VARCHAR(20);  \n" +
        "DECLARE v_message VARCHAR(20);  \n" +
        "DECLARE maxPartId INT;  \n" +
        "SET categoryID = 2;  \n" +
        "SET partTypeID = 2;  \n" +
        "	SELECT  epicorType INTO pEpicoreType FROM rfq_partcategory WHERE id = categoryID;  \n" +
        "	SELECT  `values` INTO pLiveInternalVersionMethod FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
        "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
        "		SELECT `values` INTO pCompanyName FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
        "	ELSE  \n" +
        "		SELECT `values` INTO pLiveInternalVersionDateFormate FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
        "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
        "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;  \n" +
        "		ELSE  \n" +
        "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;  \n" +
        "		END IF;  \n" +
        "	END IF;  \n" +
        "  \n" +
        "	DROP TEMPORARY TABLE IF EXISTS temp_new_cpn_id;  \n" +
        "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_new_cpn_id (partId INT);  \n" +
        "  \n" +
        "	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
        "	DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
        "  \n" +
        "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_vesrion_update (cpnID INT);  \n" +
        "  \n" +
        "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (  \n" +
        "	SELECT   rla.id,     rla.rfqLineItemsID,     rl.custPNID,     rl.custPN,     rl.customerRev,     rl.customerPartDesc,  \n" +
        "		rla.mfgPNID,    c.RoHSStatusID , rla.isMPNAddedinCPN  \n" +
        "	FROM rfq_lineitems_alternatepart rla  \n" +
        "	JOIN rfq_lineitems rl ON rla.rfqLineItemsID = rl.id  \n" +
        "	JOIN COMPONENT c ON c.id = rla.mfgPNID  \n" +
        "	WHERE rl.custPN IS NOT NULL AND rl.custPN <> \"\" AND rla.mfgPNID IS NOT NULL  \n" +
        "	AND rl.partID = pPartID  \n" +
        "	AND rla.isdeleted = 0  \n" +
        "    );  \n" +
        "  \n" +
        "	SELECT  COUNT(1) INTO totalCount FROM temp_component_cust_alias_rev;  \n" +
        "    IF totalCount > 0 THEN  \n" +
        "		SELECT mfgCodeID INTO @mfgCodeID FROM COMPONENT WHERE id = pPartID;  \n" +
        "		SELECT  id INTO functionalCategoryID FROM rfq_parttypemst WHERE partTypeName = 'CPN' AND isDeleted = 0;  \n" +
        "		SELECT  id INTO mountingTypeID FROM rfq_mountingtypemst WHERE `name` = 'CPN' AND isDeleted = 0;  \n" +
        "		SELECT  id INTO statusID FROM component_partstatusmst WHERE `name` = 'Active';  \n" +
        "		IF functionalCategoryID IS NULL THEN  \n" +
        "			SELECT MAX(displayOrder) INTO maxDisplayOrder FROM rfq_parttypemst;  \n" +
        "			INSERT INTO rfq_parttypemst(partTypeName, displayOrder, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
        "			VALUES('CPN', (maxDisplayOrder + 1), 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
        "			SELECT LAST_INSERT_ID() INTO functionalCategoryID;  \n" +
        "		END IF;  \n" +
        "  \n" +
        "		IF mountingTypeID IS NULL THEN  \n" +
        "			INSERT INTO rfq_mountingtypemst(`name`, isActive, createdBy,createByRoleId,updatedBy,updateByRoleId)VALUES('CPN', 1, pUserID,pRoleID,pUserID,pRoleID);  \n" +
        "			SELECT LAST_INSERT_ID() INTO mountingTypeID;  \n" +
        "		END IF;  \n" +
        "		SET prevLineID = 0;  \n" +
        "		WHILE currIndex < totalCount DO  \n" +
        "			SET currCustPN = NULL;  \n" +
        "			SET currCustRev = NULL;  \n" +
        "			SET currCustomerPartDesc = NULL;  \n" +
        "  \n" +
        "            SELECT  a.custPN, a.custPNID,    a.customerRev,    a.mfgPNID,    a.rfqLineItemsID,    a.customerPartDesc, a.isMPNAddedinCPN  \n" +
        "					INTO currCustPN , currCustPNID , currCustRev , currMFGPNID , currLineID , currCustomerPartDesc, pisMPNAddedinCPN  \n" +
        "            FROM temp_component_cust_alias_rev a LIMIT CURRINDEX , 1;  \n" +
        "  \n" +
        "			SET currIndex = currIndex + 1;  \n" +
        "  \n" +
        "            SET pLiveInternalVersion = 0;  \n" +
        "  \n" +
        "            IF((SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE custPN = currCustPN AND customerRev = currCustRev AND rfqLineItemsID != currLineID) = 0) THEN  \n" +
        "				IF (currCustPNID IS NOT NULL) THEN  \n" +
        "					IF (currMFGPNID > 0 AND pisMPNAddedinCPN = 1 AND currMFGPNID <> currCustPNID AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = currCustPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
        "						INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (currCustPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
        "  \n" +
        "                        SELECT  IFNULL(k.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component_bomsetting k WHERE k.refComponentID = currCustPNID;  \n" +
        "  \n" +
        "                        SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
        "  \n" +
        "                        INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( currCustPNID );  \n" +
        "  \n" +
        "                        SELECT  j.mfgPN INTO pMFGPN FROM COMPONENT j WHERE j.id = currMFGPNID;  \n" +
        "						INSERT INTO rfq_assembly_history  \n" +
        "                        (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName, oldValue,newValue,changeVersion, createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
        "						VALUES (\"component\", currCustPNID, NULL,NULL, currCustPNID, \"MPN\", NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),fun_DatetimetoUTCDateTime(),pUserID,pRoleID,fun_DatetimetoUTCDateTime(),pUserID,pRoleID);  \n" +
        "  \n" +
        "						-- Update All Assembly for CPN change  \n" +
        "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
        "					END IF;  \n" +
        "				END IF;  \n" +
        "				IF (currCustPNID IS NULL) THEN  \n" +
        "  \n" +
        "					# check conditions is Extra??.  \n" +
        "					IF(SELECT COUNT(1) FROM temp_component_cust_alias_rev WHERE rfqLineItemsID = currLineID AND RoHSStatusID = 0) > 0 THEN  \n" +
        "						SET rohsStatusID = 0;  \n" +
        "					ELSE  \n" +
        "						SET rohsStatusID = 1;  \n" +
        "					END IF;  \n" +
        "					IF (currCustRev IS NULL OR currCustRev = \"\") THEN  \n" +
        "						SET currCustRev = \"-\";  \n" +
        "					END IF;  \n" +
        "					SET mfgPN = CONCAT(currCustPN , \" Rev\" , currCustRev);  \n" +
        "					SELECT  mfgCode, mfgType INTO @mfgCode , @mfgType FROM mfgcodemst WHERE id = @mfgCodeID;  \n" +
        "					SET mfgPID =CONCAT( @mfgCode , \"+\" , mfgPN);  \n" +
        "					SET mfgPNID = NULL;  \n" +
        "  \n" +
        "                    # Check here no need to execute query from component direct put ' @mfgCodeID'.  \n" +
        "                    SELECT  d.id INTO mfgPNID FROM COMPONENT d WHERE d.mfgPN = mfgPN AND mfgCodeID = (SELECT  mfgCodeID FROM COMPONENT WHERE id = pPartID) AND d.isDeleted = 0 LIMIT 1;  \n" +
        "					-- SELECT   mfgPNID;  \n" +
        "					IF mfgPNID IS NULL THEN  \n" +
        "					-- SELECT   mfgPNID;  \n" +
        "                        CALL Sproc_GenerateIncrementalNumber(CASE WHEN @mfgType = 'MFG' THEN   'MPNSystemID'   ELSE 'SPNSystemID' END,   TRUE);  \n" +
        "						SELECT  systemID, message INTO vSerialNumer , v_message FROM temp_serialNumber;  \n" +
        "                        INSERT INTO COMPONENT(custAssyPN, rev, mfgPN, PIDCode, partStatus,  \n" +
        "							isCPN, isCustom, mfgCodeID, createdBy,createByRoleId,updatedBy,updateByRoleId,updatedAt,  \n" +
        "							RoHSStatusID, mountingTypeID, functionalCategoryID, category,  \n" +
        "							createdAt, partType, uom, epicorType,unit,serialNumber, uomClassID, mfgPNDescription,mfgType)  \n" +
        "						VALUES (currCustPN, currCustRev, mfgPN, mfgPID, statusID,  \n" +
        "							1,1,@mfgCodeID,pUserID,pRoleID,pUserID,pRoleID,fun_DatetimetoUTCDateTime(),  \n" +
        "							rohsStatusID, mountingTypeID, functionalCategoryID, categoryID,  \n" +
        "							fun_DatetimetoUTCDateTime(), partTypeID, -1, IFNULL(pEpicoreType,'Purchased'), 1, vSerialNumer, -1, IFNULL(currCustomerPartDesc, '-'), @mfgType);  \n" +
        "  \n" +
        "                        SELECT LAST_INSERT_ID() INTO maxPartId;  \n" +
        "						/* Note: Once insert record into component_bomsetting from Component Table trigger code is removed then remove below Condition for Check Record is exists or not,after remove trigger code we can direct add record. */  \n" +
        "						IF(not exists(select 1 from component_bomsetting where refComponentID = maxPartId and isDeleted = 0)) THEN  \n" +
        "							INSERT INTO component_bomsetting (refComponentID  , liveInternalVersion ,  \n" +
        "								isDeleted ,createdBy ,createdAt ,  \n" +
        "								createByRoleId , updatedBy , updatedAt , updateByRoleId )  \n" +
        "							VALUES (maxPartId, 0,  \n" +
        "							0,pUserID,fun_DatetimetoUTCDateTime(),  \n" +
        "							pRoleID,pUserID,fun_DatetimetoUTCDateTime(),pRoleID);  \n" +
        "                        END IF;  \n" +
        "  \n" +
        "						IF(currMFGPNID > 0 AND pisMPNAddedinCPN = 1) THEN  \n" +
        "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy,createByRoleId,updatedBy,updateByRoleId) VALUES (maxPartId , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
        "						END IF;  \n" +
        "                        SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component_bomsetting z WHERE z.refComponentID = maxPartId;  \n" +
        "						SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
        "						INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( maxPartId );  \n" +
        "						SELECT  t.mfgPN INTO pMFGPN FROM COMPONENT t WHERE t.id = maxPartId;  \n" +
        "						INSERT INTO rfq_assembly_history  \n" +
        "							(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
        "							oldValue,newValue,changeVersion,  \n" +
        "							createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
        "						VALUES (\"component\", maxPartId, NULL,NULL, maxPartId, \"MPN\",  \n" +
        "							NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
        "							fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
        "						UPDATE rfq_lineitems  SET  custPNID = maxPartId, customerRev = currCustRev WHERE id = currLineID;  \n" +
        "						INSERT INTO temp_new_cpn_id(partId) VALUES (maxPartId);  \n" +
        "					ELSE  \n" +
        "						IF (currMFGPNID > 0 AND pisMPNAddedinCPN = 1 AND (SELECT COUNT(1) FROM component_cust_alias_rev_pn WHERE refComponentID = currMFGPNID AND refCPNPartID = mfgPNID AND IFNULL(isDeleted,0) = 0) = 0) THEN  \n" +
        "							INSERT INTO component_cust_alias_rev_pn (refCPNPartID,refComponentID,createdBy, createByRoleId,updatedBy,updateByRoleId) VALUES (mfgPNID , currMFGPNID, pUserID,pRoleID,pUserID,pRoleID);  \n" +
        "							SET currCustPNID = mfgPNID;  \n" +
        "							SELECT  IFNULL(z.liveInternalVersion, 0) INTO pLiveInternalVersion FROM component_bomsetting z WHERE z.refComponentID  = mfgPNID;  \n" +
        "							SET pLiveInternalVersion = pLiveInternalVersion + 1;  \n" +
        "							INSERT INTO temp_component_vesrion_update(cpnID) VALUES ( mfgPNID );  \n" +
        "							SELECT  t.mfgPN INTO pMFGPN FROM COMPONENT t WHERE t.id = currMFGPNID;  \n" +
        "							INSERT INTO rfq_assembly_history  \n" +
        "								(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
        "								oldValue,newValue,changeVersion,  \n" +
        "								createdAt,createdBy,createByRoleId,updatedBy,updateByRoleId)  \n" +
        "							VALUES (\"component\", mfgPNID, NULL,NULL, currCustPNID, \"MPN\",  \n" +
        "								NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),  \n" +
        "								fun_DatetimetoUTCDateTime(),pUserID,pRoleID,pUserID,pRoleID);  \n" +
        "							UPDATE rfq_lineitems  SET  custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
        "						-- Update All Assembly for CPN change  \n" +
        "						-- CALL Sproc_UpdateRFQ_LineItems_AlternatePart_CPN(currCustPNID, pUserID);  \n" +
        "						ELSE  \n" +
        "							UPDATE rfq_lineitems SET custPNID = mfgPNID, customerRev = currCustRev WHERE id = currLineID;  \n" +
        "						END IF;  \n" +
        "					END IF;  \n" +
        "				END IF;  \n" +
        "			END IF;  \n" +
        "			END WHILE;  \n" +
        "			UPDATE component_bomsetting  \n" +
        "			SET  liveInternalVersion = (liveInternalVersion + 1),  \n" +
        "				 liveVersion = CONCAT(pCompanyName, '-', CAST(liveInternalVersion AS CHAR))  \n" +
        "			 WHERE refComponentID  IN (SELECT  cpnID FROM temp_component_vesrion_update);  \n" +
        "		END IF;  \n" +
        "		DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
        "		DROP TEMPORARY TABLE IF EXISTS temp_component_vesrion_update;  \n" +
        "  \n" +
        "		SELECT  * FROM temp_new_cpn_id;  \n" +
        "			-- CALL Sproc_DeleteRFQ_LineItems_AlternatePart_CPN(pPartID,pUserID);  \n" +
        "END;  \n" +
      /* **************************** Add Script Version -> 21-03-2022 *********************************** */
      "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
      "VALUES (6036,'2.00','V1',' Bug 42358: QA Testing findings for User Story 42082: Part Master : Separate BOMSetting fields from part mas - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
    );
    break;
    case 6036:
        allDbChangesArray.push(
        /* **************************** New Script -> 21-03-2022 *********************************** */
        "DROP procedure IF EXISTS `Sproc_RetrievePackagingParts`;  \n" +
        "CREATE PROCEDURE `Sproc_RetrievePackagingParts`(  \n" +
        "	IN pPageIndex INT(11),  \n" +
        "	IN pRecordPerPage INT(11),  \n" +
        "	IN pOrderBy VARCHAR(255),  \n" +
        "	IN pWhereClause VARCHAR(16383),  \n" +
        "    IN pComponentID int(11)  \n" +
        ")  \n" +
        "BEGIN  \n" +
        "	DECLARE pOffset INT(11);  \n" +
        "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
        "	DECLARE vMfgCodeFormat INT;  \n" +
        "  \n" +
        "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
        "	SELECT packaginggroupID INTO @packagingGroupID FROM component WHERE id = pComponentID;  \n" +
        "  \n" +
        "	CREATE TEMPORARY TABLE IF NOT EXISTS packagingPartResults AS  \n" +
        "    SELECT 	c.ID,  						c.PIDCode,					c.mfgPNDescription,  \n" +
        "			c.isGoodPart,		c.custAssyPN,	c.rev,		c.liveVersion,  \n" +
        "			c.restrictPackagingUsePermanently,  \n" +
        "			c.restrictPackagingUseWithpermission,  \n" +
        "			c.mfgcodeID,				m.mfgCode, fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,vMfgCodeFormat) as mfrCode,  \n" +
        "            m.mfgType,				c.mfgPN,  \n" +
        "            c.RoHSStatusID,				rohs.rohsIcon, 				rohs.name rohsName,  \n" +
        "            c.functionalCategoryID,		pt.partTypeName functionalTypeInternal,	c.functionalCategoryText functionalTypeExternal,  \n" +
        "			c.mountingTypeID,			mt.name mountingTypeInternal,	c.mountingTypeText mountingTypeExternal,  \n" +
        "            c.operatingTemp,			c.minOperatingTemp,								c.maxOperatingTemp,  \n" +
        "            c.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	c.connectorTypeText,  \n" +
        "            c.noOfPositionText,	        c.noOfRows,		c.pitch,				c.pitchMating,  \n" +
        "            c.sizeDimension,			c.length,		c.width,  \n" +
        "            c.heightText,				c.height,  \n" +
        "            c.temperatureCoefficient,	c.temperatureCoefficientValue,					c.temperatureCoefficientUnit,  \n" +
        "           	c.tolerance,				c.voltage,		c.value,				c.partPackage,  \n" +
        "            c.powerRating,				c.weight,		c.feature,				c.color  ,  \n" +
        "            (CASE WHEN (c.isEpoxyMount = 1) THEN 'Yes' ELSE 'No' END) AS isEpoxyMount  \n" +
        "    FROM 	vu_component_mpn c  \n" +
        "    join  component_packagingalias cp  on c.id = cp.componentID  \n" +
        "    join  mfgcodemst m on c.mfgcodeID = m.id  \n" +
        "    left join rfq_mountingtypemst mt on c.mountingTypeID = mt.id  \n" +
        "    left join rfq_parttypemst pt on c.functionalCategoryID = pt.id  \n" +
        "    left join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
        "	WHERE  	c.isDeleted = 0  \n" +
        "    AND		cp.componentID != pComponentID  \n" +
        "    AND		cp.aliasgroupID = @packagingGroupID  \n" +
        "    AND 	cp.isDeleted = 0;  \n" +
        "  \n" +
        "    IF (pOrderBy IS NOT NULL) THEN  \n" +
        "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
        "	ELSE  \n" +
        "		SET pOrderBy = \"ORDER BY id\";  \n" +
        "	END IF;  \n" +
        "  \n" +
        "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
        "		SET pWhereClause = '1=1';  \n" +
        "	END IF;  \n" +
        "  \n" +
        "    IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
        "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
        "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
        "	ELSE  \n" +
        "		SET rowNumWhere = '';  \n" +
        "	END IF;  \n" +
        "  \n" +
        "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM packagingPartResults where \", pWhereClause );  \n" +
        "    PREPARE query1 FROM @SQLStatement1;  \n" +
        "	EXECUTE query1;  \n" +
        "	DEALLOCATE PREPARE query1;  \n" +
        "  \n" +
        "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM packagingPartResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
        "    PREPARE query2 FROM @SQLStatement2;  \n" +
        "	EXECUTE query2;  \n" +
        "	DEALLOCATE PREPARE query2;  \n" +
        "  \n" +
        "    DROP TEMPORARY TABLE packagingPartResults;  \n" +
        "END;  \n" +
        "DROP procedure IF EXISTS `Sproc_RetrieveComponentPossibleAlternetPart`;  \n" +
"CREATE PROCEDURE `Sproc_RetrieveComponentPossibleAlternetPart`(  \n" +
"	IN ppageIndex INT,  \n" +
"	IN precordPerPage INT,  \n" +
"	IN pOrderBy VARCHAR(255),  \n" +
"	IN pWhereClause VARCHAR(16383),  \n" +
"	IN pComponentID INT  \n" +
"	)  \n" +
"BEGIN  \n" +
"	DECLARE pOffset INT;  \n" +
"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
"	DECLARE pTolerance VARCHAR(50);  \n" +
"	DECLARE pVoltage VARCHAR(50);  \n" +
"	DECLARE pValue VARCHAR(50);  \n" +
"	DECLARE pOperatingTemp VARCHAR(50);  \n" +
"        DECLARE pCategory INT;  \n" +
"        DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
"	DECLARE v_TimeZone VARCHAR(50);  \n" +
"	DECLARE vMfgCodeFormat INT;  \n" +
"  \n" +
"	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
"	SELECT c.tolerance,  \n" +
"		c.voltage,  \n" +
"		c.value,  \n" +
"		c.operatingTemp,  \n" +
"        c.category  \n" +
"		INTO pTolerance,pVoltage,pValue,pOperatingTemp,pCategory  \n" +
"	FROM component c  \n" +
"	WHERE c.id = pComponentID;  \n" +
"  \n" +
"	SET @temp_Sproc_RetrieveComponentPossibleAlternetPart = CONCAT(\"SELECT 	c.ID,c.mfgPN AS `mfgPN`,c.mfgcodeID, c.PIDCode, c.isCustom,  \n" +
"    fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") as mfrCode, c.mfgPNDescription,  c.custAssyPN, c.rev, c.liveVersion,  \n" +
"	c.isGoodPart,        c.restrictUsePermanently,        c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
"    m.mfgCode AS `mfgCode`,m.mfgType,c.operatingTemp AS `operatingTemp`,c.minOperatingTemp AS `minOperatingTemp`,  \n" +
"    c.maxOperatingTemp AS `maxOperatingTemp`,c.tolerance AS `tolerance`,c.voltage AS `voltage`,c.value AS `value`,  \n" +
"    c.partPackage AS `partPackage`,c.powerRating AS `powerRating`,c.weight AS `weight`,c.feature AS `feature`,  \n" +
"    c.functionalCategoryText AS `functionalTypeExternal`,functional.partTypeName AS `functionalTypeInternal`,  \n" +
"    c.mountingTypeText AS `mountingTypeExternal`,mounting.name AS `mountingTypeInternal`,ro.rohsIcon,ro.name rohsName,  \n" +
"    fun_getUserNameByID(c.updatedBy) updatedby,  \n" +
"	fun_getUserNameByID(c.createdBy) createdby,  \n" +
"	fun_getRoleByID(c.createByRoleId) createdbyRole,  \n" +
"	fun_getRoleByID(c.updateByRoleId) updatedbyRole,  \n" +
"	fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
"	fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
"    FROM vu_component_mpn c  \n" +
"    LEFT OUTER JOIN mfgcodemst m ON c.mfgcodeID=m.id  \n" +
"    LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = c.functionalCategoryID  \n" +
"    LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = c.mountingTypeID  \n" +
"    LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
"    WHERE m.mfgType='MFG'  \n" +
"    AND NOT EXISTS (SELECT 1 FROM component_alternatepn ap WHERE ap.componentID = c.id AND ap.type = 1 AND ap.isDeleted = 0)  \n" +
"    AND c.id != \",pComponentID);  \n" +
"  IF(pTolerance IS NOT NULL AND pTolerance != '') THEN  \n" +
"	SET @temp_Sproc_RetrieveComponentPossibleAlternetPart = CONCAT(@temp_Sproc_RetrieveComponentPossibleAlternetPart,' AND c.tolerance= ''',pTolerance,''' ');  \n" +
"  END IF;  \n" +
"  IF(pVoltage IS NOT NULL AND pVoltage != '') THEN  \n" +
"	SET @temp_Sproc_RetrieveComponentPossibleAlternetPart = CONCAT(@temp_Sproc_RetrieveComponentPossibleAlternetPart,' AND c.voltage= ''',pVoltage,''' ');  \n" +
"  END IF;  \n" +
"  IF(pValue IS NOT NULL AND pValue != '') THEN  \n" +
"	SET @temp_Sproc_RetrieveComponentPossibleAlternetPart = CONCAT(@temp_Sproc_RetrieveComponentPossibleAlternetPart,' AND c.value= ''',pValue,''' ');  \n" +
"  END IF;  \n" +
"  IF(pOperatingTemp IS NOT NULL AND pOperatingTemp != '') THEN  \n" +
"	SET @temp_Sproc_RetrieveComponentPossibleAlternetPart = CONCAT(@temp_Sproc_RetrieveComponentPossibleAlternetPart,' AND c.operatingTemp= ''',pOperatingTemp,''' ');  \n" +
"  END IF;  \n" +
"  IF(pCategory IS NOT NULL AND pCategory != '') THEN  \n" +
"	SET @temp_Sproc_RetrieveComponentPossibleAlternetPart = CONCAT(@temp_Sproc_RetrieveComponentPossibleAlternetPart,' AND c.Category = ''',pCategory,''' ');  \n" +
"  END IF;  \n" +
"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
"		SET pOrderBy = \"ORDER BY mfgPN ASC\";  \n" +
"	ELSE  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
"		SET pWhereClause = '1=1' ;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
"	ELSE  \n" +
"		SET rowNumWhere = '';  \n" +
"	END IF;  \n" +
"  \n" +
"	/* to get total count of rows */  \n" +
"		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveComponentPossibleAlternetPart,\" ) c where 1=1 and \", pWhereClause);  \n" +
"		PREPARE query2 FROM @SQLStatement2;  \n" +
"		EXECUTE query2;  \n" +
"		DEALLOCATE PREPARE query2;  \n" +
"  \n" +
"		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveComponentPossibleAlternetPart,\" ) c  \n" +
"			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
"		PREPARE query1 FROM @SQLStatement2;  \n" +
"		EXECUTE query1;  \n" +
"		DEALLOCATE PREPARE query1;  \n" +
"  \n" +
"END;  \n" +
"DROP procedure IF EXISTS `Sproc_RetrieveComponentAlternetPart`;  \n" +
"CREATE PROCEDURE `Sproc_RetrieveComponentAlternetPart`(  \n" +
"	IN ppageIndex INT,  \n" +
"	IN precordPerPage INT,  \n" +
"	IN pOrderBy VARCHAR(255),  \n" +
"	IN pWhereClause VARCHAR(16383),  \n" +
"    IN pType INT,  \n" +
"	IN pComponentID INT  \n" +
"	)  \n" +
"BEGIN  \n" +
"		DECLARE pOffset INT;  \n" +
"		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
"		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
"	        DECLARE v_TimeZone VARCHAR(50);  \n" +
"	DECLARE vMfgCodeFormat INT;  \n" +
"  \n" +
"	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
"  \n" +
"		SET @temp_Sproc_RetrieveComponentAlternetPart = CONCAT(\"SELECT  \n" +
"        c.ID,						c.mfgPN AS `mfgPN`,							c.mfgcodeID,		m.mfgCode AS `mfgCode`,   			c.PIDCode,  \n" +
"        fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") as mfrCode, c.mfgPNDescription,   c.custAssyPN, c.rev, c.liveVersion,  \n" +
"        c.isGoodPart,        c.restrictUsePermanently,        c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
"		m.mfgType,					c.operatingTemp AS `operatingTemp`,			c.minOperatingTemp AS `minOperatingTemp`,				c.maxOperatingTemp AS `maxOperatingTemp`,  \n" +
"        c.tolerance AS `tolerance`,	c.voltage AS `voltage`,c.value AS `value`,	c.partPackage AS `partPackage`,							c.powerRating AS `powerRating`,  \n" +
"        c.weight AS `weight`,		c.feature AS `feature`,						c.functionalCategoryText AS `functionalTypeExternal`,	functional.partTypeName AS `functionalTypeInternal`,  \n" +
"        c.mountingTypeText AS `mountingTypeExternal`,							mounting.name AS `mountingTypeInternal`,				ro.rohsIcon,ro.name rohsName,  \n" +
"        c.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	c.connectorTypeText,  								c.noOfPosition,  \n" +
"        c.noOfPositionText,	        c.noOfRows,									c.noOfRowsText,											c.pitch,  \n" +
"        c.pitchMating,				c.sizeDimension,								(CASE WHEN (c.isEpoxyMount = 1) THEN 'Yes' ELSE 'No' END) AS isEpoxyMount,  \n" +
"        c.length,		            c.width,	c.heightText,						c.height, 												c.color,  \n" +
"        c.temperatureCoefficient,	c.temperatureCoefficientValue,					c.temperatureCoefficientUnit,  \n" +
"        fun_getUserNameByID(a.updatedBy) updatedby,								fun_getUserNameByID(a.createdBy) createdby, 			fun_getRoleByID(a.createByRoleId) createdbyRole,  \n" +
"		fun_getRoleByID(a.updateByRoleId) updatedbyRole,    					fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
"		fun_ApplyCommonDateTimeFormatByParaValue(a.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
"        FROM component_alternatepn a  \n" +
"        JOIN vu_component_mpn c ON a.ComponentID = c.ID  \n" +
"        JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
"        LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
"        LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = c.functionalCategoryID  \n" +
"        LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = c.mountingTypeID  \n" +
"        WHERE a.refComponentID = \",pComponentID,\" AND a.Type = \", pType,\" AND a.isDeleted = 0\");  \n" +
"  \n" +
"		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
"			SET pOrderBy = \"ORDER BY mfgPN ASC\";  \n" +
"		ELSE  \n" +
"			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
"		END IF;  \n" +
"  \n" +
"		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
"			SET pWhereClause = '1=1' ;  \n" +
"		END IF;  \n" +
"  \n" +
"		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
"			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
"			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
"		ELSE  \n" +
"			SET rowNumWhere = '';  \n" +
"		END IF;  \n" +
"		/* to get total count of rows */  \n" +
"		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveComponentAlternetPart,\" ) c where 1=1 and \", pWhereClause);  \n" +
"		PREPARE query2 FROM @SQLStatement2;  \n" +
"		EXECUTE query2;  \n" +
"		DEALLOCATE PREPARE query2;  \n" +
"  \n" +
"		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveComponentAlternetPart,\" ) c  \n" +
"			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
"		PREPARE query1 FROM @SQLStatement2;  \n" +
"		EXECUTE query1;  \n" +
"		DEALLOCATE PREPARE query1;  \n" +
"  \n" +
"    END;  \n" +
"DROP procedure IF EXISTS `Sproc_RetriveWhereUsedComponents`;  \n" +
"CREATE PROCEDURE `Sproc_RetriveWhereUsedComponents`(  \n" +
"	IN pPageIndex INT,  \n" +
"	IN pRecordPerPage INT,  \n" +
"	IN pOrderBy VARCHAR(255),  \n" +
"	IN pWhereClause VARCHAR(16383),  \n" +
"    IN pPartID INT  \n" +
")  \n" +
"BEGIN  \n" +
"	DECLARE pOffset INT;  \n" +
"	DECLARE rowNumWhere VARCHAR(255);  \n" +
"	DECLARE vMfgCodeFormat INT;  \n" +
"  \n" +
"	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
"    DROP TEMPORARY TABLE IF EXISTS componentResult;  \n" +
"  \n" +
"	set @temp_Sproc_RetriveWhereUsedComponents1 = concat(\"  \n" +
"		select id, rfqLineItemsID, mfgPN, PIDCode, nickname, partID, refDesig, qpa,dnpQty, dnpDesig, MID, mfgCode, mfgType, partStatus, partStatusValue, totalUsage,  \n" +
"        annualUsage, rohsIcon, rohsName, whereUsed, isBOM, isCustom,mfrCode,mfgPNDescription,restrictUsePermanently, restrictUSEwithpermission, custAssyPN,	rev, liveVersion  \n" +
"			from  \n" +
"			(SELECT 	rla.id id, 		rla.rfqLineItemsID,             c.restrictUsePermanently, c.restrictUSEwithpermission,  \n" +
"						c.isGoodPart,	c.restrictPackagingUsePermanently,	c.restrictPackagingUseWithpermission,  \n" +
"						c.mfgPN , 		c.PIDCode ,		c.nickname,  c.mfgPNDescription, c.custAssyPN,	c.rev,		c.liveVersion,  \n" +
"						rla.partID, 	rl.refDesig,	IFNULL(rl.qpa,0) qpa, IFNULL(rl.dnpQty,0) dnpQty, rl.dnpDesig ,  \n" +
"						m.id MID, 		m.mfgCode,		m.mfgType,  \n" +
"						c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,  \n" +
"						0 totalUsage,  \n" +
"						0 annualUsage,  \n" +
"						ro.rohsIcon,  \n" +
"						ro.name rohsName,  \n" +
"						'Bill of Material' whereUsed,  \n" +
"						true isBOM,  \n" +
"						c.isCustom,  \n" +
"                        fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") as mfrCode,  \n" +
"                        rank() over(partition by rla.rfqLineItemsID, c.id, rla.partID, rl.refDesig order by rla.id) rnk  \n" +
"				FROM rfq_lineitems_alternatepart AS rla  \n" +
"				inner JOIN rfq_lineitems AS rl ON rl.id = rla.rfqLineItemsID  \n" +
"				inner JOIN vu_component_mpn AS c ON c.id = rla.partID AND c.isDeleted = 0  \n" +
"				inner JOIN mfgCodemst AS m ON m.id = c.mfgcodeID AND  m.isDeleted = 0  \n" +
"				inner JOIN rfq_rohsmst ro ON ro.id = c.RoHSStatusID  \n" +
"				WHERE (rla.mfgPNID = \",pPartID,\"  OR  \n" +
"					  rla.distMfgPNID = \",pPartID,\"  OR  \n" +
"                      rl.custPNID = \",pPartID,\" OR  \n" +
"					  exists (  \n" +
"							SELECT 1  \n" +
"							FROM rfq_lineitems_alternatepart AS cassy  \n" +
"							WHERE cassy.partID = rla.mfgPNID  \n" +
"							AND 	(cassy.mfgPNID = \",pPartID,\" OR  cassy.distMfgPNID = \",pPartID,\")  \n" +
"							AND  	cassy.isDeleted = 0  \n" +
"					  ))  \n" +
"					AND  rla.isDeleted = 0  \n" +
"                    and rl.isDeleted = 0) a  \n" +
"			where rnk = 1\");  \n" +
"  \n" +
"	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE componentResult AS  \n" +
"							\",@temp_Sproc_RetriveWhereUsedComponents1,\" \");  \n" +
"    PREPARE query1 FROM @SQLStatement1;  \n" +
"	EXECUTE query1;  \n" +
"	DEALLOCATE PREPARE query1;  \n" +
"  \n" +
"    UPDATE componentResult c  \n" +
"		SET c.totalUsage = (c.qpa * IFNULL((SELECT SUM(w.buildQty)  \n" +
"										FROM	workorder w  \n" +
"										WHERE	w.partID = c.partID  \n" +
"										AND 	w.isDeleted = 0  \n" +
"										), 0));  \n" +
"  \n" +
"	UPDATE 	componentResult c  \n" +
"		SET c.annualUsage = (c.qpa * IFNULL((SELECT SUM(w.buildQty)  \n" +
"									FROM (  \n" +
"                                    SELECT 	w.buildQty, TIMESTAMPDIFF(MONTH, w.createdAt, fun_DatetimetoUTCDateTime()) createdBefore  \n" +
"									FROM	workorder w  \n" +
"									WHERE	w.partID = c.partID  \n" +
"									AND 	w.isDeleted = 0  \n" +
"                                    ) w WHERE w.createdBefore <= 12), 0));  \n" +
"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , \"whereUsed ASC\") ;  \n" +
"	ELSE  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
"		SET pWhereClause = '1=1' ;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
"		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
"	ELSE  \n" +
"		SET rowNumWhere = '';  \n" +
"	END IF;  \n" +
"  \n" +
"	/* to get total count of rows */  \n" +
"	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM componentResult where \", pWhereClause );  \n" +
"	PREPARE query4 FROM @SQLStatement4;  \n" +
"	EXECUTE query4;  \n" +
"	DEALLOCATE PREPARE query4;  \n" +
"  \n" +
"	SET @SQLStatement5 = CONCAT(\" SELECT * FROM  componentResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
"	PREPARE query5 FROM @SQLStatement5;  \n" +
"	EXECUTE query5;  \n" +
"	DEALLOCATE PREPARE query5;  \n" +
"  \n" +
"    DROP TEMPORARY TABLE IF EXISTS componentResult;  \n" +
"  \n" +
"END;  \n" +
"DROP procedure IF EXISTS `Sproc_RetrieveComponentGroupList`;  \n" +
"CREATE PROCEDURE `Sproc_RetrieveComponentGroupList`(  \n" +
"	IN ppageIndex INT,  \n" +
"	IN precordPerPage INT,  \n" +
"	IN pOrderBy VARCHAR(255),  \n" +
"	IN pWhereClause VARCHAR(16383),  \n" +
"    IN pComponentId varchar(50),  \n" +
"    IN pIsFetchAll TINYINT  \n" +
"	)  \n" +
"BEGIN  \n" +
"	DECLARE pOffset INT;  \n" +
"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
"	DECLARE v_TimeZone VARCHAR(50);  \n" +
"	DECLARE vMfgCodeFormat INT;  \n" +
"    DECLARE v_refSupplierMfgpnComponentID INT;  \n" +
"  \n" +
"    SELECT CASE WHEN (mfgType = 'MFG')  \n" +
"				THEN id  \n" +
"                ELSE refSupplierMfgpnComponentID  \n" +
"			END  \n" +
"		INTO  v_refSupplierMfgpnComponentID from component where id = pComponentId;  \n" +
"  	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
"  \n" +
"	SET @temp_Sproc_RetrieveAssyRevision = CONCAT(\"SELECT  \n" +
"	c.ID,						c.mfgPN AS `mfgPN`,		c.imageURL,						c.mfgcodeID,		m.mfgCode AS `mfgCode`,   			c.PIDCode,  \n" +
"	fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") as mfrCode, c.mfgPNDescription,   c.custAssyPN, c.rev, c.liveVersion,  \n" +
"	c.isGoodPart,        c.restrictUsePermanently,        c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
"	m.mfgType,					c.operatingTemp AS `operatingTemp`,			c.minOperatingTemp AS `minOperatingTemp`,				c.maxOperatingTemp AS `maxOperatingTemp`,  \n" +
"	c.tolerance AS `tolerance`,	c.voltage AS `voltage`,c.value AS `value`,	c.partPackage AS `partPackage`,							c.powerRating AS `powerRating`,  \n" +
"	c.weight AS `weight`,		c.feature AS `feature`,						c.functionalCategoryText AS `functionalTypeExternal`,	functional.partTypeName AS `functionalTypeInternal`,  \n" +
"	c.mountingTypeText AS `mountingTypeExternal`,							mounting.name AS `mountingTypeInternal`,				ro.rohsIcon,ro.name rohsName,  \n" +
"	c.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	c.connectorTypeText,  								c.noOfPosition,  \n" +
"	c.noOfPositionText,	        c.noOfRows,									c.noOfRowsText,											c.pitch,  \n" +
"	c.pitchMating,				c.sizeDimension,								(CASE WHEN (c.isEpoxyMount = 1) THEN 'Yes' ELSE 'No' END) AS isEpoxyMount,  \n" +
"	c.length,		            c.width,	c.heightText,						c.height, 												c.color,  \n" +
"	c.temperatureCoefficient,	c.temperatureCoefficientValue,					c.temperatureCoefficientUnit,  \n" +
"	fun_getUserNameByID(c.updatedBy) updatedby,								fun_getUserNameByID(c.createdBy) createdby, 			fun_getRoleByID(c.createByRoleId) createdbyRole,  \n" +
"	fun_getRoleByID(c.updateByRoleId) updatedbyRole,    					fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
"	fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  , c.isCustom  \n" +
"	FROM vu_component c  \n" +
"	JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
"	LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
"	LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = c.functionalCategoryID  \n" +
"	LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = c.mountingTypeID  \n" +
"	WHERE c.isDeleted = 0 and c.id != \", pComponentId , \" AND c.refSupplierMfgpnComponentID = \", v_refSupplierMfgpnComponentID);  \n" +
"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
"		SET pOrderBy = \"ORDER BY mfgPN ASC\";  \n" +
"	ELSE  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
"	END IF;  \n" +
"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
"		SET pWhereClause = '1=1' ;  \n" +
"	END IF;  \n" +
"	IF(pIsFetchAll = false and  ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
"	ELSE  \n" +
"		SET rowNumWhere = '';  \n" +
"	END IF;  \n" +
"	/* to get total count of rows */  \n" +
"	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveAssyRevision,\" ) c where 1=1 and \", pWhereClause);  \n" +
"	PREPARE query2 FROM @SQLStatement2;  \n" +
"	EXECUTE query2;  \n" +
"	DEALLOCATE PREPARE query2;  \n" +
"	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveAssyRevision,\" ) c  \n" +
"		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
"	PREPARE query1 FROM @SQLStatement2;  \n" +
"	EXECUTE query1;  \n" +
"	DEALLOCATE PREPARE query1;  \n" +
"END;  \n" +
"DROP procedure IF EXISTS `Sproc_GetComponentCustAliasRev`;  \n" +
"CREATE PROCEDURE `Sproc_GetComponentCustAliasRev`(  \n" +
"	IN ppageIndex INT,  \n" +
"	IN precordPerPage INT,  \n" +
"	IN pOrderBy VARCHAR(255),  \n" +
"	IN pWhereClause VARCHAR(16383),  \n" +
"	IN pcustomerID VARCHAR(255),  \n" +
"    IN pComponentId INT  \n" +
")  \n" +
"BEGIN  \n" +
"	DECLARE pOffset INT;  \n" +
"	DECLARE rowNumWhere VARCHAR(255);  \n" +
"	DECLARE vMfgCodeFormat INT;  \n" +
"	DROP TEMPORARY TABLE IF EXISTS tempComponentCPNPart;  \n" +
"  \n" +
"	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
"  \n" +
"    set @temp_Sproc_GetComponentCustAliasRev = concat(\"  \n" +
"    SELECT co.id,co.custAssyPN,co.mfgcodeID,co.rev,co.liveVersion,co.mfgPN, co.restrictUsePermanently,  \n" +
"    fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") as customer,co.mfgType,  \n" +
"	co.restrictUSEwithpermission  , ro.rohsIcon , ro.name AS `rohsComplientConvertedValue`, co.isCPN, co.isCustom, co.category, co.partType,  \n" +
"	co.PIDCode,  \n" +
"	co.isGoodPart,  \n" +
"	co.restrictPackagingUsePermanently,  \n" +
"	co.restrictPackagingUseWithpermission,  \n" +
"    (case when co.isCustom = 1 then 'Yes' else 'No' end) as isCustomValue,  \n" +
"    (case when co.isCPN = 1 then 'Yes' else 'No' end) as isCPNValue, pc.categoryName ,co.mfgPNDescription  \n" +
"    FROM vu_component_mpn co  \n" +
"    JOIN mfgcodemst m ON co.mfgcodeID = m.id  \n" +
"	Inner JOIN rfq_rohsmst ro ON ro.id = co.RoHSStatusID AND ro.isDeleted = 0  \n" +
"    Inner Join rfq_partcategory pc on pc.id = co.partType  \n" +
"	WHERE co.isDeleted = 0  \n" +
"	AND (co.isCPN = 1 or co.isCustom = 1 or co.category = 3 )\");  \n" +
"  \n" +
"	IF(pComponentId IS NOT NULL) THEN  \n" +
"		CREATE TEMPORARY TABLE tempComponentCPNPart(refCPNPartID INT);  \n" +
"  \n" +
"		INSERT INTO tempComponentCPNPart  \n" +
"        SELECT refCPNPartID FROM component_cust_alias_rev_pn WHERE isDeleted = 0 AND refComponentID = pComponentId;  \n" +
"  \n" +
"		set @temp_Sproc_GetComponentCustAliasRev = CONCAT(@temp_Sproc_GetComponentCustAliasRev,' AND co.id IN (select refCPNPartID  from tempComponentCPNPart)');  \n" +
"    END IF;  \n" +
"	IF(pcustomerID IS NOT NULL) THEN  \n" +
"    	set @temp_Sproc_GetComponentCustAliasRev = CONCAT(@temp_Sproc_GetComponentCustAliasRev,' AND co.mfgCodeID = ' , pcustomerID);  \n" +
"	END IF;  \n" +
"	IF (pOrderBy IS NOT NULL) THEN  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
"	ELSE  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , \"rev ASC\") ;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
"		SET pWhereClause = '1=1' ;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
"	ELSE  \n" +
"		SET rowNumWhere = '';  \n" +
"	END IF;  \n" +
"  \n" +
"	/* to get total count of rows */  \n" +
"	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetComponentCustAliasRev,\" ) c where 1=1 and \", pWhereClause);  \n" +
"    PREPARE query2 FROM @SQLStatement2;  \n" +
"	EXECUTE query2;  \n" +
"	DEALLOCATE PREPARE query2;  \n" +
"  \n" +
"	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetComponentCustAliasRev,\" ) c  \n" +
"		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
"	PREPARE query1 FROM @SQLStatement2;  \n" +
"	EXECUTE query1;  \n" +
"	DEALLOCATE PREPARE query1;  \n" +
"    END;  \n" +
"DROP procedure IF EXISTS `Sproc_RetriveWhereUsedComponentsOther`;  \n" +
"CREATE PROCEDURE `Sproc_RetriveWhereUsedComponentsOther`(  \n" +
"	IN pPageIndex INT,  \n" +
"	IN pRecordPerPage INT,  \n" +
"	IN pOrderBy VARCHAR(255),  \n" +
"	IN pWhereClause VARCHAR(16383),  \n" +
"    IN pPartID INT  \n" +
")  \n" +
"BEGIN  \n" +
"	DECLARE pOffset INT;  \n" +
"	DECLARE rowNumWhere VARCHAR(255);  \n" +
"    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
"  \n" +
"    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
"  \n" +
"    DROP TEMPORARY TABLE IF EXISTS componentWhereUsedOther;  \n" +
"    CREATE TEMPORARY TABLE componentWhereUsedOther AS  \n" +
"    select ca.id, ca.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID, c.custAssyPN, c.rev, c.liveVersion,  \n" +
"			m.id MID, 		m.mfgCode,		m.mfgType,  \n" +
"            fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) mfrCode,  \n" +
"			c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,  \n" +
"			ro.rohsIcon,	ro.name rohsName,  \n" +
"			case when ca.Type=1 then  \n" +
"					'Alternate Parts'  \n" +
"				  when ca.Type=2 then  \n" +
"					'Pickup Pad'  \n" +
"				  when ca.Type=3 then  \n" +
"					'Program'  \n" +
"				  when ca.Type=4 then  \n" +
"					'Functional Testing Tools'  \n" +
"				  when ca.Type=5 then  \n" +
"					'Require Mating Parts'  \n" +
"					end whereUsed,  \n" +
"			case when ca.Type=1 then  \n" +
"					1  \n" +
"				  when ca.Type=2 then  \n" +
"					7  \n" +
"				  when ca.Type=4 then  \n" +
"					8  \n" +
"				  when ca.Type=5 then  \n" +
"					6  \n" +
"					end whereUsedOrder,  \n" +
"			false isBOM,  \n" +
"            c.isCustom,  \n" +
"            c.mfgcodeID,  \n" +
"			c.mfgPNDescription,  \n" +
"			c.isGoodPart,  \n" +
"            c.restrictUsePermanently,  \n" +
"			c.restrictUSEwithpermission,  \n" +
"			c.restrictPackagingUsePermanently,  \n" +
"			c.restrictPackagingUseWithpermission  \n" +
"		from component_alternatepn ca  \n" +
"		join vu_component_mpn c ON c.id = ca.refComponentID  \n" +
"		JOIN mfgCodemst AS m ON c.mfgcodeID = m.id  \n" +
"		JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
"	  where ca.componentID = pPartID  \n" +
"         and ca.isDeleted = 0  \n" +
"         and c.isDeleted = 0  \n" +
"		 union all  \n" +
"		 select cp.id, cp.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID,  c.custAssyPN, c.rev, c.liveVersion,  \n" +
"				m.id MID, 		m.mfgCode,		m.mfgType,  \n" +
"                fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) mfrCode,  \n" +
"				c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,  \n" +
"				ro.rohsIcon,  \n" +
"				ro.name rohsName,  \n" +
"				'Process Material' whereUsed,  \n" +
"                4 whereUsedOrder,  \n" +
"				false isBOM,  \n" +
"				c.isCustom,  \n" +
"			c.mfgPNDescription,  \n" +
"			c.isGoodPart,  \n" +
"            c.mfgcodeID,  \n" +
"            c.restrictUsePermanently,  \n" +
"			c.restrictUSEwithpermission,  \n" +
"			c.restrictPackagingUsePermanently,  \n" +
"			c.restrictPackagingUseWithpermission  \n" +
"		   from component_processmaterial cp  \n" +
"		   join vu_component_mpn c ON c.id = cp.refComponentID  \n" +
"		   JOIN mfgCodemst AS m ON c.mfgcodeID = m.id AND m.isDeleted = 0  \n" +
"		   JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
"		  where cp.componentID = pPartID  \n" +
"            and cp.isDeleted = 0  \n" +
"		    and c.isDeleted = 0  \n" +
"		union all  \n" +
"        select cd.id, cd.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID,      c.custAssyPN, c.rev, c.liveVersion,  \n" +
"				m.id MID, 		m.mfgCode,		m.mfgType,  \n" +
"                fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) mfrCode,  \n" +
"				c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,  \n" +
"				ro.rohsIcon,  \n" +
"				ro.name rohsName,  \n" +
"				'Drive Tools' whereUsed,  \n" +
"                3 whereUsedOrder,  \n" +
"				false isBOM,  \n" +
"				c.isCustom ,  \n" +
"            c.mfgcodeID,  \n" +
"			c.mfgPNDescription,  \n" +
"			c.isGoodPart,  \n" +
"            c.restrictUsePermanently,  \n" +
"			c.restrictUSEwithpermission,  \n" +
"			c.restrictPackagingUsePermanently,  \n" +
"			c.restrictPackagingUseWithpermission  \n" +
"		   from component_drivetools cd  \n" +
"		   join vu_component_mpn c ON c.id = cd.refComponentID  \n" +
"			JOIN mfgCodemst AS m ON c.mfgcodeID = m.id AND m.isDeleted = 0  \n" +
"			JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
"		  where cd.componentID = pPartID  \n" +
"            and cd.isDeleted = 0  \n" +
"		    and c.isDeleted = 0  \n" +
"		union all  \n" +
"        select cc.id, cc.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID,    c.custAssyPN, c.rev, c.liveVersion,  \n" +
"				m.id MID, 		m.mfgCode,		m.mfgType,  \n" +
"                fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) mfrCode,  \n" +
"				c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,  \n" +
"				ro.rohsIcon,  \n" +
"				ro.name rohsName,  \n" +
"				'Customer CPN' whereUsed,  \n" +
"                5 whereUsedOrder,  \n" +
"				false isBOM,  \n" +
"				c.isCustom   ,  \n" +
"            c.mfgcodeID,  \n" +
"			c.mfgPNDescription,  \n" +
"			c.isGoodPart,  \n" +
"            c.restrictUsePermanently,  \n" +
"			c.restrictUSEwithpermission,  \n" +
"			c.restrictPackagingUsePermanently,  \n" +
"			c.restrictPackagingUseWithpermission  \n" +
"		   from component_cust_alias_rev_pn cc  \n" +
"		   join vu_component_mpn c ON c.id = cc.refCPNPartID  \n" +
"			JOIN mfgCodemst AS m ON c.mfgcodeID = m.id AND m.isDeleted = 0  \n" +
"			JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
"		  where cc.refComponentID = pPartID  \n" +
"            and cc.isDeleted = 0  \n" +
"			and c.isDeleted = 0;  \n" +
"  \n" +
"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , \"whereUsedOrder ASC\") ;  \n" +
"	ELSE  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
"		SET pWhereClause = '1=1' ;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
"		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
"	ELSE  \n" +
"		SET rowNumWhere = '';  \n" +
"	END IF;  \n" +
"  \n" +
"	/* to get total count of rows */  \n" +
"	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM componentWhereUsedOther where \", pWhereClause );  \n" +
"	PREPARE query4 FROM @SQLStatement4;  \n" +
"	EXECUTE query4;  \n" +
"	DEALLOCATE PREPARE query4;  \n" +
"  \n" +
"	SET @SQLStatement5 = CONCAT(\" SELECT * FROM  componentWhereUsedOther where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
"	PREPARE query5 FROM @SQLStatement5;  \n" +
"	EXECUTE query5;  \n" +
"	DEALLOCATE PREPARE query5;  \n" +
"  \n" +
"	DROP TEMPORARY TABLE IF EXISTS componentWhereUsedOther;  \n" +
"  \n" +
"END;  \n" +
"DROP procedure IF EXISTS `Sproc_GetComponentAssyProgramList`;  \n" +
"CREATE PROCEDURE `Sproc_GetComponentAssyProgramList`(  \n" +
"	IN pPageIndex INT,  \n" +
"	IN pRecordPerPage INT,  \n" +
"	IN pOrderBy VARCHAR(255),  \n" +
"	IN pWhereClause VARCHAR(16383),  \n" +
"    IN pPartId INT  \n" +
")  \n" +
"BEGIN  \n" +
"	DECLARE pOffset INT;  \n" +
"	DECLARE rowNumWhere VARCHAR(255);  \n" +
"	DECLARE vMfgCodeFormat INT;  \n" +
"  \n" +
"	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
"    DROP TEMPORARY TABLE IF EXISTS componentResult;  \n" +
"  \n" +
"	set @temp_Sproc_RetriveWhereUsedComponents1 = concat(\"  \n" +
"		select a.*,concat(a.PIDCode,' : ',a.refDES,' : ',format(a.qpa,6),' : ',a.programingStatus,' : ',a.progName,' : ',a.assyPartStatus) valueString  \n" +
"    from  \n" +
"    (  \n" +
"          select  \n" +
"				assy.id  \n" +
"                ,fun_GetFormattedMfgCode(assyMfg.mfgCode, assyMfg.mfgName,\", vMfgCodeFormat,\") as mfrCode  \n" +
"                ,assyMfg.id as mfgCodeID  \n" +
"                ,assyMfg.mfgType  \n" +
"				,assy.mfgPN  \n" +
"                ,assy.custAssyPN  \n" +
"                ,assy.rev  \n" +
"                ,assy.PIDCode  \n" +
"                ,assy.liveVersion  \n" +
"                ,assy.mfgPNDescription  \n" +
"                ,assy.nickName  \n" +
"                ,assyRo.rohsIcon as assyRohsIcon  \n" +
"                ,assyRo.name as assyRohsName  \n" +
"                ,assy.isGoodPart  \n" +
"                ,assy.isCustom  \n" +
"                ,assy.restrictUsePermanently as assyRestrictUsePermanently  \n" +
"                ,assy.restrictUSEwithpermission as assyRestrictUSEwithpermission  \n" +
"                ,assy.restrictPackagingUsePermanently as assyRestrictPackagingUsePermanently  \n" +
"                ,assy.restrictPackagingUseWithpermission as assyRestrictPackagingUseWithpermission  \n" +
"                ,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
"					prog.id  \n" +
"					else com.id  \n" +
"					end programId  \n" +
"				,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
"					progMFG.id  \n" +
"					else comMfg.id  \n" +
"					end programMfrId  \n" +
"				,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
"					progMFG.mfgType  \n" +
"					else comMfg.mfgType  \n" +
"					end programMfgType  \n" +
"                ,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
"					fun_GetFormattedMfgCode(progMFG.mfgCode, progMFG.mfgName,\", vMfgCodeFormat,\")  \n" +
"					else fun_GetFormattedMfgCode(comMfg.mfgCode, comMfg.mfgName,\", vMfgCodeFormat,\")  \n" +
"					end programMfrCode  \n" +
"                ,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
"					prog.mfgPN  \n" +
"					else com.mfgPN  \n" +
"					end programMfgPN  \n" +
"				,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
"					prog.mfgPNDescription  \n" +
"					else com.mfgPNDescription  \n" +
"					end programMfgPNDescription  \n" +
"				,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
"					prgramRo.rohsIcon  \n" +
"					else comRo.rohsIcon  \n" +
"					end programRoHSIcon  \n" +
"				,case when rlaPart.mfgPNID= \", pPartId ,\" then  \n" +
"					prgramRo.name  \n" +
"					else comRo.name  \n" +
"					end programRoHSName  \n" +
"				,case when rlaPart.mfgPNID= \", pPartId ,\" then  \n" +
"					prog.restrictUsePermanently  \n" +
"					else com.restrictUsePermanently  \n" +
"					end programRestrictUsePermanently  \n" +
"				,case when rlaPart.mfgPNID= \", pPartId ,\" then  \n" +
"					prog.restrictUSEwithpermission  \n" +
"					else com.restrictUSEwithpermission  \n" +
"					end programRestrictUSEwithpermission  \n" +
"				,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
"					prog.restrictPackagingUsePermanently  \n" +
"					else com.restrictPackagingUsePermanently  \n" +
"					end programRestrictPackagingUsePermanently  \n" +
"				,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
"					prog.restrictPackagingUseWithpermission  \n" +
"					else com.restrictPackagingUseWithpermission  \n" +
"					end programRestrictPackagingUseWithpermission  \n" +
"  \n" +
"                ,pm.softwareRefDesg as refDES  \n" +
"                ,format(rl.qpa,6) as qpa  \n" +
"                ,rl.lineID as lineItemID  \n" +
"                , (CASE WHEN rlPart.programingStatus = 1 THEN 'Pre-Assy'  \n" +
"				WHEN rlPart.programingStatus = 2 THEN 'Post-Assy'  \n" +
"				WHEN rlPart.programingStatus = 3 THEN 'Cust will program'  \n" +
"				WHEN rlPart.programingStatus = 4 THEN 'Pre-Programmed'  \n" +
"				ELSE 'N/A' END) AS programingStatus  \n" +
"                ,case when rlaPart.mfgPNID = \", pPartId ,\"  then  \n" +
"					prog.PIDCode  \n" +
"				else com.PIDCode  \n" +
"				end progName  \n" +
"                ,cp.name assyPartStatus  \n" +
"	  from rfq_lineitem_programming_mapping pm  \n" +
"	  join rfq_lineitems rlPart on rlPart.id = pm.rfqLineItemID and rlPart.isDeleted = 0  \n" +
"      join rfq_lineitems_alternatepart rlaPart ON rlaPart.rfqLineItemsID = rlPart.id and rlaPart.isDeleted = 0  \n" +
"	  join rfq_lineitems rl on rl.id = pm.softwareRFQLineItemID and rl.isDeleted = 0  \n" +
"	  join rfq_lineitems_alternatepart rla ON rla.rfqLineItemsID = rl.id and rla.isDeleted = 0  \n" +
"	  join vu_component_mpn assy ON assy.id = pm.partID and assy.isDeleted = 0  \n" +
"      inner JOIN rfq_rohsmst assyRo ON assyRo.id = assy.RoHSStatusID  \n" +
"      inner JOIN mfgCodemst AS assyMfg ON assyMfg.id = assy.mfgcodeID  \n" +
"	  join component_partstatusmst cp ON cp.id = assy.partStatus and cp.isDeleted = 0  \n" +
"  \n" +
"	  join vu_component_mpn prog ON prog.id = rla.mfgPNID and prog.isDeleted = 0  \n" +
"      inner JOIN mfgCodemst AS progMFG ON progMFG.id = prog.mfgcodeID  \n" +
"      inner JOIN rfq_rohsmst prgramRo ON prgramRo.id = prog.RoHSStatusID  \n" +
"  \n" +
"      join vu_component_mpn com ON com.id = rlaPart.mfgPNID and com.isDeleted = 0  \n" +
"      inner JOIN mfgCodemst AS comMfg ON comMfg.id = com.mfgcodeID  \n" +
"      inner JOIN rfq_rohsmst comRo ON comRo.id = com.RoHSStatusID  \n" +
"	  where pm.isDeleted = 0  \n" +
"                    and (rlaPart.mfgPNID = \", pPartId , \" /*component part where software used*/  \n" +
"			or rla.mfgPNID = \", pPartId , \"/*software part*/)  \n" +
"        ) a \");  \n" +
"  \n" +
"	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE componentResult AS  \n" +
"							\",@temp_Sproc_RetriveWhereUsedComponents1,\" \");  \n" +
"    PREPARE query1 FROM @SQLStatement1;  \n" +
"	EXECUTE query1;  \n" +
"	DEALLOCATE PREPARE query1;  \n" +
"  \n" +
"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN ASC\") ;  \n" +
"	ELSE  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
"		SET pWhereClause = '1=1' ;  \n" +
"	END IF;  \n" +
"  \n" +
"	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
"		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
"	ELSE  \n" +
"		SET rowNumWhere = '';  \n" +
"	END IF;  \n" +
"  \n" +
"	/* to get total count of rows */  \n" +
"	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM componentResult where \", pWhereClause );  \n" +
"	PREPARE query4 FROM @SQLStatement4;  \n" +
"	EXECUTE query4;  \n" +
"	DEALLOCATE PREPARE query4;  \n" +
"  \n" +
"	SET @SQLStatement5 = CONCAT(\" SELECT * FROM  componentResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
"	PREPARE query5 FROM @SQLStatement5;  \n" +
"	EXECUTE query5;  \n" +
"	DEALLOCATE PREPARE query5;  \n" +
"  \n" +
"    DROP TEMPORARY TABLE IF EXISTS componentResult;  \n" +
"  \n" +
"END;  \n" +
"DROP procedure IF EXISTS `Sproc_RetrieveGoodBadParts`;  \n" +
"CREATE PROCEDURE `Sproc_RetrieveGoodBadParts`(  \n" +
"	IN ppageIndex INT,  \n" +
"	IN precordPerPage INT,  \n" +
"	IN pOrderBy VARCHAR(255),  \n" +
"	IN pWhereClause VARCHAR(16383),  \n" +
"	IN pComponentID INT,  \n" +
"    IN pIsFetchAll TINYINT  \n" +
"	)  \n" +
"BEGIN  \n" +
"	DECLARE pOffset INT;  \n" +
"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
"	DECLARE v_TimeZone VARCHAR(50);  \n" +
"    DECLARE v_whereCluase VARCHAR(255) ;  \n" +
"	DECLARE vMfgCodeFormat INT;  \n" +
"    DECLARE v_replacementPartID INT;  \n" +
"    DECLARE v_isGoodPart INT;  \n" +
"  \n" +
"    -- ----  '1' - Good Part, '2' - Incorrect Part, '3' - TBS(Unknown) Part  \n" +
"    SELECT replacementPartID , isGoodPart  \n" +
"		INTO  v_replacementPartID,v_isGoodPart from component where id = pComponentID;  \n" +
"	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
"  \n" +
"  set v_whereCluase = (SELECT CASE WHEN (v_isGoodPart = 1) THEN CONCAT(' and c.replacementPartID = ', pComponentID)  \n" +
"									WHEN (v_isGoodPart = 2)  THEN CONCAT(' and  c.id = ', v_replacementPartID)  \n" +
"                                    ELSE ''  \n" +
"                                    END);  \n" +
"  \n" +
"	SET @temp_Sproc_RetrieveComponentAlternetPart = CONCAT(\"SELECT  \n" +
"	c.ID,						c.mfgPN AS `mfgPN`,							c.mfgcodeID,		m.mfgCode AS `mfgCode`,   			c.PIDCode,  \n" +
"	fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") as mfrCode, c.mfgPNDescription,   c.custAssyPN, c.rev, c.liveVersion,  \n" +
"		(CASE WHEN (`c`.`isGoodPart` = 1) THEN 'Correct Part'  \n" +
"					WHEN (`c`.`isGoodPart` = 2) THEN 'Incorrect Part'  \n" +
"					WHEN (`c`.`isGoodPart` = 3) THEN 'TBD Part'  \n" +
"					ELSE '' END) AS `isGoodPartValue`,  \n" +
"	c.isGoodPart,        c.restrictUsePermanently,        c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
"	m.mfgType,					c.operatingTemp AS `operatingTemp`,			c.minOperatingTemp AS `minOperatingTemp`,				c.maxOperatingTemp AS `maxOperatingTemp`,  \n" +
"	c.tolerance AS `tolerance`,	c.voltage AS `voltage`,c.value AS `value`,	c.partPackage AS `partPackage`,							c.powerRating AS `powerRating`,  \n" +
"	c.weight AS `weight`,		c.feature AS `feature`,						c.functionalCategoryText AS `functionalTypeExternal`,	functional.partTypeName AS `functionalTypeInternal`,  \n" +
"	c.mountingTypeText AS `mountingTypeExternal`,							mounting.name AS `mountingTypeInternal`,				ro.rohsIcon,ro.name rohsName,  \n" +
"	c.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	c.connectorTypeText,  								c.noOfPosition,  \n" +
"	c.noOfPositionText,	        c.noOfRows,									c.noOfRowsText,											c.pitch,  \n" +
"	c.pitchMating,				c.sizeDimension,								(CASE WHEN (c.isEpoxyMount = 1) THEN 'Yes' ELSE 'No' END) AS isEpoxyMount,  \n" +
"	c.length,		            c.width,	c.heightText,						c.height, 												c.color,  \n" +
"	c.temperatureCoefficient,	c.temperatureCoefficientValue,					c.temperatureCoefficientUnit,  \n" +
"	fun_getUserNameByID(c.updatedBy) updatedby,								fun_getUserNameByID(c.createdBy) createdby, 			fun_getRoleByID(c.createByRoleId) createdbyRole,  \n" +
"	fun_getRoleByID(c.updateByRoleId) updatedbyRole,    					fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
"	fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
"	FROM vu_component c  \n" +
"	JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
"	LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
"	LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = c.functionalCategoryID  \n" +
"	LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = c.mountingTypeID  \n" +
"	WHERE c.isDeleted = 0\", v_whereCluase);  \n" +
"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
"		SET pOrderBy = \"ORDER BY mfgPN ASC\";  \n" +
"	ELSE  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
"	END IF;  \n" +
"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
"		SET pWhereClause = '1=1' ;  \n" +
"	END IF;  \n" +
"	IF(pIsFetchAll = false and ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
"	ELSE  \n" +
"		SET rowNumWhere = '';  \n" +
"	END IF;  \n" +
"	/* to get total count of rows */  \n" +
"	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveComponentAlternetPart,\" ) c where 1=1 and \", pWhereClause);  \n" +
"	PREPARE query2 FROM @SQLStatement2;  \n" +
"	EXECUTE query2;  \n" +
"	DEALLOCATE PREPARE query2;  \n" +
"	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveComponentAlternetPart,\" ) c  \n" +
"		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
"	PREPARE query1 FROM @SQLStatement2;  \n" +
"	EXECUTE query1;  \n" +
"	DEALLOCATE PREPARE query1;  \n" +
"END;  \n" +
        /* **************************** Add Script Version -> 21-03-2022 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (6037,'2.00','V1',' Change SP replace component view instead of component table Part master detail tab - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 6037:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-03-2022  *********************************** */
				"DROP PROCEDURE IF EXISTS Sproc_RetrieveSettings;  \n" +
				"CREATE PROCEDURE `Sproc_RetrieveSettings`(  \n" +
				"	IN ppageIndex INT(11),  \n" +
				"	IN precordPerPage INT(11),  \n" +
				"	IN pOrderBy VARCHAR(255),  \n" +
				"	IN pWhereClause VARCHAR(16383)  \n" +
				")  \n" +
				"BEGIN  \n" +
				"		DECLARE pOffset INT(12);  \n" +
				"		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
				"		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
				"		DECLARE v_TimeZone VARCHAR(50);  \n" +
				"  \n" +
				"		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
				"		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
				"  \n" +
				"		SET @temp_Sproc_RetrieveSettings = CONCAT(\"  \n" +
				"			SELECT id,`key` AS datakey,`values` AS datavalues, inputControlName,clusterName,isEncrypted,isActive,isEditable,description,displayName,  \n" +
				"				fun_getUserNameByID(updatedBy) updatedby,  \n" +
				"				fun_getUserNameByID(createdBy) createdby,  \n" +
				"				fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
				"				fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
				"				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
				"				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
				"			count(1) over(partition by clusterName) as clusterCount  \n" +
				"        FROM `systemconfigrations`  \n" +
				"			WHERE `deletedAt` IS NULL AND isActive=1  \n" +
				"		\");  \n" +
				"  \n" +
				"		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
				"			SET pOrderBy = CONCAT(\"ORDER BY id ASC\") ;  \n" +
				"		ELSE  \n" +
				"			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
				"		END IF;  \n" +
				"  \n" +
				"  \n" +
				"		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
				"			SET pWhereClause = '1=1' ;  \n" +
				"		END IF;  \n" +
				"  \n" +
				"		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
				"			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
				"			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
				"		ELSE  \n" +
				"			SET rowNumWhere = '';  \n" +
				"		END IF;  \n" +
				"  \n" +
				"		/* to get total count of rows */  \n" +
				"		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSettings,\" ) c where 1=1 and \", pWhereClause);  \n" +
				"		PREPARE query2 FROM @SQLStatement2;  \n" +
				"		EXECUTE query2;  \n" +
				"		DEALLOCATE PREPARE query2;  \n" +
				"  \n" +
				"		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveSettings,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
				"		PREPARE query1 FROM @SQLStatement2;  \n" +
				"		EXECUTE query1;  \n" +
				"		DEALLOCATE PREPARE query1;  \n" +
				"  \n" +
				"    END;  \n" +
				/* **************************** Add Script Version -> 21-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6038,'2.00','V1','User Story 40123: Data key Page: Implementation of control with sample data - Jay Solanki '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
        break;
          case 6038:
            allDbChangesArray.push(
              /* **************************** New Script -> 22-03-2022 *********************************** */
              "DROP TRIGGER IF EXISTS `Trg_AI_component`;  \n" +
            "CREATE TRIGGER `Trg_AI_component` AFTER INSERT ON `component` FOR EACH ROW BEGIN  \n" +
            "	IF(New.isCustom=1 AND New.category=3) THEN  \n" +
            "	INSERT INTO binmst (`name`,warehouseID,isActive,isPermanentBin,systemGenerated,createdBy,updatedBy,isRandom,createByRoleId,updateByRoleId)VALUES  \n" +
            "		  (UPPER(NEW.Pidcode),-5,1,1,1,New.createdBy,New.updatedBy,1,New.createByRoleId,New.updateByRoleId);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* Once remove Below insert query plese revert code in 'Sproc_RemoveMPNFromCPNMapping' & 'Sproc_UpdatePartInternalVersion' SP for update component_bomsetting setting table. direct update table instead of fetch update partids in temp table. */  \n" +
            "	IF(New.category=3 OR New.iscpn=1) THEN  \n" +
            "	  INSERT INTO component_bomsetting(refComponentID,liveInternalVersion,bomLock,isBOMVerified,isDeleted,createdBy,createdAt,createByRoleId,  \n" +
            "	  updatedBy,updatedAt,updateByRoleId) VALUES (NEW.id,0,0,0,0,NEW.createdBy,NEW.createdAt,NEW.createByRoleId,  \n" +
            "	  NEW.updatedBy,NEW.updatedAt,NEW.updateByRoleId);  \n" +
            "	END IF;  \n" +
            "END;  \n" +
              /* **************************** New Script -> 22-03-2022 *********************************** */
            "Drop procedure if exists `Sproc_UpdatePartInternalVersion`;  \n" +
            "CREATE PROCEDURE `Sproc_UpdatePartInternalVersion`(  \n" +
            "    IN pPartId INT  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "	DECLARE subAssyType INT;  \n" +
            "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
            "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
            "	DECLARE pCompanyName VARCHAR(100);  \n" +
            "  \n" +
            "	SET  subAssyType = 3;  \n" +
            "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
            "	IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
            "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
            "	ELSE  \n" +
            "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
            "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
            "			SELECT DATE_FORMAT(UTC_DATE(), '%y%m%d') INTO pCompanyName ;  \n" +
            "		ELSE  \n" +
            "			SELECT DATE_FORMAT(UTC_DATE(), '%m%d%y') INTO pCompanyName ;  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS  tempComponentIds;  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS tempComponentIds AS(  \n" +
            "		WITH RECURSIVE cte AS  \n" +
            "		(  \n" +
            "		 SELECT  c.id AS partId, c.id AS childPartId, cb.liveinternalversion AS liveinternalversion  \n" +
            "			  FROM COMPONENT c JOIN  \n" +
            "			  component_bomsetting cb ON cb.refComponentID=c.id  \n" +
            "			  WHERE   c.id = pPartId AND c.category=subAssyType AND c.deletedAt IS NULL  \n" +
            "  \n" +
            "			  UNION ALL  \n" +
            "			  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
            "			  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, COMPONENT cp ,component_bomsetting cb, cte child  \n" +
            "			  WHERE   rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType  AND cb.refComponentID = cp.id  \n" +
            "			  AND cp.deletedAt IS NULL AND rlp.deletedAt IS NULL AND rlap.deletedAt IS NULL  \n" +
            "		)  \n" +
            "	SELECT DISTINCT partId FROM cte);  \n" +
            "  \n" +
            "	UPDATE component_bomsetting  cb  \n" +
            "		INNER JOIN tempComponentIds t on cb.refComponentID = t.partId  \n" +
            "	SET cb.liveinternalversion = IF(ISNULL(cb.liveinternalversion),0, (cb.liveinternalversion + 1)) ,  \n" +
            "    cb.liveVersion = CONCAT(pCompanyName,'-',CAST(IF(ISNULL(cb.liveinternalversion),0, (cb.liveinternalversion + 1)) AS CHAR));  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS  tempComponentIds;  \n" +
            "  \n" +
            "    /* Revert below code and remove 'tempComponentIds' table After remove trigger code(Trg_AU_Component_Bomsetting) for update Interal version into component table. */  \n" +
            "	/* WHERE refComponentID IN(  \n" +
            "	WITH RECURSIVE cte AS  \n" +
            "	(  \n" +
            "	  SELECT  c.id AS partId, c.id AS childPartId, cb.liveinternalversion AS liveinternalversion  \n" +
            "	  FROM COMPONENT c JOIN  \n" +
            "	  component_bomsetting cb ON cb.refComponentID=c.id  \n" +
            "	  WHERE   c.id = pPartId AND c.category=subAssyType AND c.deletedAt IS NULL  \n" +
            "  \n" +
            "	  UNION ALL  \n" +
            "	  SELECT rlp.partId AS partId, child.partId AS childPartId,  cp.liveinternalversion AS liveinternalversion  \n" +
            "	  FROM rfq_lineitems rlp , rfq_lineitems_alternatepart rlap, COMPONENT cp ,component_bomsetting cb, cte child  \n" +
            "	  WHERE   rlp.Id = rlap.rfqLineItemsID AND rlap.mfgPNID = cp.Id AND rlap.mfgPNID = child.partId AND cp.category=subAssyType  AND cb.refComponentID = cp.id  \n" +
            "	  AND cp.deletedAt IS NULL AND rlp.deletedAt IS NULL AND rlap.deletedAt IS NULL  \n" +
            "	)  \n" +
            "	SELECT DISTINCT partId FROM cte);  */  \n" +
            "    END;  \n" +
              /* **************************** Add Script Version -> 22-03-2022 *********************************** */
              "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
              "VALUES (6039,'2.00','V1',' Bug 42358: QA Testing findings for User Story 42082: Part Master : Separate BOMSetting fields from part mas. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
          case 6039:
            allDbChangesArray.push(
              /* **************************** New Script -> 23-03-2022 *********************************** */
              "SELECT pageID INTO @paretID FROM page_detail WHERE pageName = 'Developer';  \n" +
              "INSERT INTO page_detail (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `orderBy`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`)  \n" +
              "VALUES ('Assign Rights & Features', '0', '0', 'setting.system.developer.assignrightsandfetures', 'app.assignrightsandfetures', '/assignrightsandfetures', 'Assign Rights & Features', @paretID, '0', '8.16000000', 't-icons-assignrightsandfeatures', '1', '1', '0', '1', 'Assign Rights & Features', '1');  \n" +
              /* **************************** Add Script Version -> 23-03-2022 *********************************** */
              "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
              "VALUES (6040,'2.00','V1','41100 Page Rights - Allow to select multiple personnel and features/pages - Jay Solanki '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6040:
            allDbChangesArray.push(
            /* **************************** New Script -> 23-03-2022 *********************************** */
            "drop procedure if exists `Sproc_GetRFQLineItems`;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQLineItems`(  \n" +
            "	IN ppageIndex INT,  \n" +
            "	IN precordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pPartID INT,  \n" +
            "	IN pPackaging TINYINT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
            "  \n" +
            "  SET SESSION group_concat_max_len = 5000000000;  \n" +
            "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS Temp_Sproc_GetRFQLineItems;  \n" +
            "           set @RFQLineItemDetail = concat(\"CREATE TEMPORARY TABLE IF NOT EXISTS Temp_Sproc_GetRFQLineItems AS  \n" +
            "			select  rl.id,  IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep, IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,  \n" +
            "			IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
            "			rl.lineID,  fun_getAssyPIDCodeByID(rl.custPNID) CPNPID, rl.qpa, rl.refDesig,rl.isPurchase, rl.isInstall, rl.dnpQty, rl.dnpDesig,  \n" +
            "			(CASE WHEN rl.isBuyDNPQty = 'Y' THEN 'YES'  \n" +
            "            WHEN rl.isBuyDNPQty = 'C' THEN 'Customer Consigned'  \n" +
            "            WHEN rl.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'  \n" +
            "            ELSE 'NO' END) AS isBuyDNPQty,  \n" +
            "			fun_getUnitNameByID(rl.uomID) unitName, fun_GetBOMLineMountingType(rl.id) as `name`,fun_GetBOMLineFunctionalType(rl.id) as `partTypeName`,  \n" +
            "			CONCAT(GROUP_CONCAT(IFNULL(REPLACE(ra.description,'\n','<br/><br/>'),'') SEPARATOR '<br/>'),(CASE WHEN GROUP_CONCAT(IFNULL(ra.description,'') SEPARATOR '<br/>') = ''  THEN '' ELSE '<br/><br/>'END), IFNULL(REPLACE(rl.description,'','<br/>'),'')) AS internalComment,  \n" +
            "			rl.numOfPosition, /*com.PIDCode,*/ com.category, rl.cust_lineID, rl.uomID, rl.partID, /*ra.mfgPNID,*/  \n" +
            "			b.mfgPN, b.PIDList  \n" +
            "			from rfq_lineitems rl  \n" +
            "			LEFT JOIN rfq_lineitems_alternatepart ra ON rl.id =ra.rfqLineItemsID AND rl.isDeleted = 0  \n" +
            "			LEFT JOIN component com ON com.id = ra.mfgPNID AND com.isDeleted = 0  \n" +
            "			inner join  \n" +
            "				(select a.id, a.partid,  \n" +
            "                GROUP_CONCAT(DISTINCT(IFNULL(REPLACE(REPLACE(a.PIDCode,',','***'),',','..'),'N/A')),'@@@',  \n" +
            "                a.RoHSStatusID,'@@@',IFNULL(a.name,''),'@@@', IFNULL(a.rohsIcon,''),'@@@',IFNULL(a.isCustom,0),  \n" +
            "                '@@@',REPLACE(IFNULL(a.feature,''),',',''),'@@@',IFNULL(a.partStatusname,''),'@@@',  \n" +
            "				REPLACE(IFNULL(a.partStatusColor,''),',','***'),'@@@',REPLACE(IFNULL(a.partTBD,''),',','***'),'@@@',  \n" +
            "				IFNULL(a.restrictUseInBOMStep,0) ,'@@@',  \n" +
            "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),'@@@',  \n" +
            "				IFNULL(a.restrictUsePermanentlyStep,1) ,'@@@',  \n" +
            "				IFNULL(a.restrictUseWithPermissionStep,1),'@@@',  \n" +
            "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),'@@@',  \n" +
            "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),'@@@',  \n" +
            "				IFNULL(a.restrictUseExcludingAliasStep,1),'@@@',  \n" +
            "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),'@@@',  \n" +
            "				IFNULL(REPLACE(REPLACE(a.description,',','***'),'\n','<br/><br/>'),''),'@@@','','@@@','','@@@',  \n" +
            "				IFNULL(a.approvedMountingType,0),'@@@',  \n" +
            "				IFNULL(a.mismatchMountingTypeStep,1),'@@@' ,  \n" +
            "				REPLACE(a.mfgPN,',','***'),'@@@',  \n" +
            "				a.mfgCode,'@@@',  \n" +
            "				a.mfgPNID,'@@@',  \n" +
            "                IFNULL(a.isDocumentUpload,0), '@@@',  \n" +
            "                ifnull(a.custAssyPN,''),'@@@' ,   IFNULL(a.mismatchFunctionalCategoryStep,1)  \n" +
            "				ORDER BY a.mfgPN asc separator '\",v_GroupConcatSeparator,\"') AS mfgPn ,  \n" +
            "				GROUP_CONCAT(a.PIDCode) PIDList  \n" +
            "				from (  \n" +
            "					SELECT  `z`.`id` AS `id`, `z`.`partid` AS `partid`, `z`.`isBomLine` AS `isBomLine`, `z`.`mfgPNID` AS `mfgPNID`, `z`.`PIDCode` AS `PIDCode`,  \n" +
            "					`z`.`RoHSStatusID` AS `RoHSStatusID`, FUN_GETROHSNAMEBYID(`z`.`RoHSStatusID`) AS `name`, FUN_GETROHSICONBYID(`z`.`RoHSStatusID`) AS `rohsIcon`,  \n" +
            "					FUN_GETPARTSTATUSNAMEBYID(`z`.`partStatus`) AS `partStatusName`, `z`.`approvedMountingType` AS `approvedMountingType`, `z`.`mismatchMountingTypeStep` AS `mismatchMountingTypeStep`, `z`.`mismatchFunctionalCategoryStep` as mismatchFunctionalCategoryStep,  \n" +
            "					FUN_GETPARTSTATUSCOLORBYID(`z`.`partStatus`) AS `partStatusColor`, FUN_GETPARTTBDDETAILS(`z`.`mfgPNID`) AS `partTBD`, FUN_GETMFGCODEBYID(`z`.`mfgCodeID`) AS `mfgCode`,  \n" +
            "					`z`.`isCustom` AS `iscustom`, `z`.`custAssyPN` as custAssyPN, `z`.`feature` AS `feature`, `z`.`mfgPN` AS `mfgpn`, `z`.`isDocumentUpload` AS `isDocumentUpload`, `z`.`description` AS `description`,  \n" +
            "					MAX(`z`.`restrictUseInBOMStep`) AS `restrictUseInBOMStep`,  \n" +
            "					MAX(`z`.`restrictUseInBOMWithPermissionStep`) AS `restrictUseInBOMWithPermissionStep`,  \n" +
            "					MIN(`z`.`restrictUsePermanentlyStep`) AS `restrictUsePermanentlyStep`,  \n" +
            "					MIN(`z`.`restrictUseWithPermissionStep`) AS `restrictUseWithPermissionStep`,  \n" +
            "					MAX(`z`.`restrictUseInBOMExcludingAliasStep`) AS `restrictUseInBOMExcludingAliasStep`,  \n" +
            "					MAX(`z`.`restrictUseInBOMExcludingAliasWithPermissionStep`) AS `restrictUseInBOMExcludingAliasWithPermissionStep`,  \n" +
            "					MIN(`z`.`restrictUseExcludingAliasStep`) AS `restrictUseExcludingAliasStep`,  \n" +
            "					MIN(`z`.`restrictUseExcludingAliasWithPermissionStep`) AS `restrictUseExcludingAliasWithPermissionStep`  \n" +
            "					FROM  \n" +
            "					(SELECT  `l`.`id` AS `id`, `l`.`partID` AS `partid`, IFNULL(`d`.`id`, `c1`.`id`) AS `mfgPNID`,  \n" +
            "							IF((`c1`.`id` = IFNULL(`d`.`id`, `c1`.`id`)), TRUE, FALSE) AS `isBomLine`,  \n" +
            "							IFNULL(`d`.`mfgcodeID`, `c1`.`mfgcodeID`) AS `mfgCodeID`,  \n" +
            "							IFNULL(`d`.`mfgPN`, `c1`.`mfgPN`) AS `mfgPN`,  \n" +
            "							IFNULL(`d`.`PIDCode`, `c1`.`PIDCode`) AS `PIDCode`,  \n" +
            "							IFNULL(`d`.`RoHSStatusID`, `c1`.`RoHSStatusID`) AS `RoHSStatusID`,  \n" +
            "							IFNULL(`d`.`feature`, `ca1`.`feature`) AS `feature`,  \n" +
            "							IFNULL(`d`.`isCustom`, `c1`.`isCustom`) AS `isCustom`,  \n" +
            "                            IFNULL(`d`.`custAssyPN`, `c1`.`custAssyPN`) AS `custAssyPN`,  \n" +
            "							IFNULL(`d`.`partStatus`, `c1`.`partStatus`) AS `partStatus`,  \n" +
            "							IFNULL(`al`.`restrictUseInBOMStep`, 0) AS `restrictUseInBOMStep`,  \n" +
            "							IFNULL(`al`.`restrictUseInBOMWithPermissionStep`, 0) AS `restrictUseInBOMWithPermissionStep`,  \n" +
            "							IF((`c1`.`id` = IFNULL(`d`.`id`, `c1`.`id`)), `al`.`description`, '') AS `description`,  \n" +
            "							(CASE  \n" +
            "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUsePermanentlyStep`, 1)  \n" +
            "								ELSE (CASE  \n" +
            "									WHEN (IFNULL(`d`.`restrictUsePermanently`, 0) = 1) THEN 0  \n" +
            "									ELSE 1  \n" +
            "								END)  \n" +
            "							END) AS `restrictUsePermanentlyStep`,  \n" +
            "							IFNULL(`al`.`restrictUseWithPermissionStep`, 1) AS `restrictUseWithPermissionStep`,  \n" +
            "							(CASE  \n" +
            "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseInBOMExcludingAliasStep`, 0)  \n" +
            "								ELSE (CASE  \n" +
            "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 1  \n" +
            "									ELSE 0  \n" +
            "								END)  \n" +
            "							END) AS `restrictUseInBOMExcludingAliasStep`,  \n" +
            "							(CASE  \n" +
            "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseInBOMExcludingAliasWithPermissionStep`, 0)  \n" +
            "								ELSE (CASE  \n" +
            "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 1  \n" +
            "									ELSE 0  \n" +
            "								END)  \n" +
            "							END) AS `restrictUseInBOMExcludingAliasWithPermissionStep`,  \n" +
            "							(CASE  \n" +
            "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseExcludingAliasStep`, 1)  \n" +
            "								ELSE (CASE  \n" +
            "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 0  \n" +
            "									ELSE 1  \n" +
            "								END)  \n" +
            "							END) AS `restrictUseExcludingAliasStep`,  \n" +
            "							(CASE  \n" +
            "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseExcludingAliasWithPermissionStep`, 1)  \n" +
            "								ELSE (CASE  \n" +
            "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 0  \n" +
            "									ELSE 1  \n" +
            "								END)  \n" +
            "							END) AS `restrictUseExcludingAliasWithPermissionStep`,  \n" +
            "							IFNULL(`al`.`approvedMountingType`, 0) AS `approvedMountingType`,  \n" +
            "							IFNULL(`al`.`mismatchMountingTypeStep`, 1) AS `mismatchMountingTypeStep`,  \n" +
            "                            IFNULL(`al`.`mismatchFunctionalCategoryStep`, 1) AS `mismatchFunctionalCategoryStep`,  \n" +
            "							IFNULL(`ccl`.`isDocumentUpload`, IFNULL(`ccld`.`isDocumentUpload`, 0)) AS `isDocumentUpload`  \n" +
            "					FROM `rfq_lineitems` `l`  \n" +
            "					JOIN `rfq_lineitems_alternatepart` `al` ON `l`.`id` = `al`.`rfqLineItemsID` AND `l`.`isDeleted` = 0 AND `al`.`isDeleted` = 0  \n" +
            "						AND `al`.`mfgPNID` IS NOT NULL  \n" +
            "					join `component` `c1` ON `al`.`mfgPNID` = `c1`.`id`  \n" +
            "					JOIN `component_attributes` `ca1` ON `ca1`.`refComponentID` = (CASE WHEN (`c1`.`mfgType` = 'MFG') THEN `c1`.`id` ELSE `c1`.`refSupplierMfgpnComponentID` END)  \n" +
            "					LEFT JOIN `vu_component` `d` ON `d`.`packaginggroupID` = `ca1`.`packaginggroupID`  \n" +
            "						AND NOT EXISTS (SELECT  1 FROM `rfq_lineitems_alternatepart` `x`  \n" +
            "						WHERE `x`.`rfqLineItemsID` = `al`.`rfqLineItemsID` AND `x`.`mfgPNID` = `d`.`id` AND `d`.`id` <> `c1`.`id` and `x`.`isDeleted` = 0)  \n" +
            "					LEFT JOIN `component_customer_loa` `ccl` ON `ccl`.`componentID` = `c1`.`id`  \n" +
            "						AND exists (SELECT 1 FROM `component` WHERE `component`.`id` = `l`.`partID` and `component`.`mfgcodeID` = `ccl`.`customerID`)  \n" +
            "						AND `ccl`.`isDeleted` = 0  \n" +
            "					LEFT JOIN `component_customer_loa` `ccld` ON `ccld`.`componentID` = `d`.`id`  \n" +
            "						AND exists (SELECT 1 FROM `component` WHERE `component`.`id` = `l`.`partID` and `component`.`mfgcodeID` = `ccld`.`customerID`)  \n" +
            "						AND `ccld`.`isDeleted` = 0  \n" +
            "						where l.partID = \", pPartID ,\"  \n" +
            "				) `z`  \n" +
            "				GROUP BY `z`.`id` , `z`.`partid` , `z`.`isBomLine` , `z`.`mfgPNID` , `z`.`mfgCodeID` , `z`.`PIDCode` , `z`.`RoHSStatusID` , `z`.`description` , `z`.`partStatus` , `z`.`approvedMountingType` , `z`.`mismatchMountingTypeStep` , `z`.mismatchFunctionalCategoryStep, `z`.`isCustom`, `z`.`custAssyPN`, `z`.`feature` , `z`.`mfgPN` , `z`.`isDocumentUpload`  \n" +
            "				) a  \n" +
            "			where partID = \", pPartID,\" and (case when \",pPackaging,\" = 1 then 1=1 else a.isBomLine = 1 end)  \n" +
            "				Group by id, partid  \n" +
            "			) b on rl.id = b.id  \n" +
            "			WHERE  rl.partID = \", pPartID ,\" and ra.mfgPNID is not null and ra.isDeleted = 0  \n" +
            "			GROUP BY rl.id, rl.restrictCPNUseInBOMStep, rl.restrictCPNUsePermanentlyStep, rl.restrictCPNUseWithPermissionStep, rl.lineID,  \n" +
            "					rl.custPNID, rl.qpa, rl.refDesig, rl.isPurchase, rl.isInstall, rl.dnpQty, rl.dnpDesig, rl.isBuyDNPQty,  \n" +
            "					rl.uomID, ra.description, rl.numOfPosition,  /*com.PIDCode,*/ com.category, rl.cust_lineID, rl.uomID, rl.partID, /*ra.mfgPNID,*/ b.mfgPN, b.PIDList  \n" +
            "			ORDER BY rl.lineID \");  \n" +
            "  \n" +
            "            PREPARE RFQLineItemDetail FROM @RFQLineItemDetail;  \n" +
            "			EXECUTE RFQLineItemDetail;  \n" +
            "			DEALLOCATE PREPARE RFQLineItemDetail;  \n" +
            "  \n" +
            "			IF (pOrderBy IS NOT NULL) THEN  \n" +
            "				SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "			ELSE  \n" +
            "				SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;  \n" +
            "			END IF;  \n" +
            "  \n" +
            "  \n" +
            "			IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "				SET pWhereClause = '1=1' ;  \n" +
            "			END IF;  \n" +
            "  \n" +
            "  \n" +
            "			IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "				SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "				SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "			ELSE  \n" +
            "				SET rowNumWhere = '';  \n" +
            "			END IF;  \n" +
            "  \n" +
            "  \n" +
            "			/* to get total count of rows */  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM Temp_Sproc_GetRFQLineItems where \", pWhereClause );  \n" +
            "			PREPARE query1 FROM @SQLStatement1;  \n" +
            "			EXECUTE query1;  \n" +
            "			DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM Temp_Sproc_GetRFQLineItems where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "			PREPARE query2 FROM @SQLStatement2;  \n" +
            "			EXECUTE query2;  \n" +
            "			DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "			SET @SQLStatement3= (SELECT fun_getRestrictedPartsinPlannBOM(IFNULL(pPartID,0)));  \n" +
            "			PREPARE query3 FROM @SQLStatement3;  \n" +
            "			EXECUTE query3;  \n" +
            "			DEALLOCATE PREPARE query3;  \n" +
            "			DROP TEMPORARY TABLE Temp_Sproc_GetRFQLineItems;  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 23-03-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (6041,'2.00','V1','User Story 42507: Apply Part master normalization effect in Costing Module - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6041:
              allDbChangesArray.push(
              /* **************************** New Script -> 23-03-2022 *********************************** */
              "DROP procedure IF EXISTS `Sproc_GetPackingSlipInvoicePaymentToInformation`;  \n" +
              "CREATE PROCEDURE `Sproc_GetPackingSlipInvoicePaymentToInformation`(  \n" +
              "	IN pPaymentId INT,  \n" +
              "	IN pMfgCodeId INT  \n" +
              ")  \n" +
              "BEGIN  \n" +
              "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
              "	DECLARE v_TimeZone VARCHAR(50);  \n" +
              "    DECLARE v_mfgNameFormat INT;  \n" +
              "	SELECT FUN_GETMFGCODENAMEFORMAT() INTO v_mfgNameFormat;  \n" +
              "	IF pPaymentId IS NOT NULL THEN  \n" +
              "        SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
              "		SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
              "		SELECT  \n" +
              "			pi.systemId,  \n" +
              "			pi.id paymentId,  \n" +
              "			pi.accountReference,  \n" +
              "			pi.mfgcodeID,  \n" +
              "			m.mfgCode,  \n" +
              "			m.mfgName,  \n" +
              "			FUN_GETFORMATTEDMFGCODE(m.mfgCode, m.mfgName, v_mfgNameFormat) fullMfgName,  \n" +
              "			pi.paymentType,  \n" +
              "			FUN_GETGENERICCATEGORYNAMEBYID(pi.paymentType) paymentTypeName,  \n" +
              "			pi.paymentNumber,  \n" +
              "			pi.bankAccountMasID,  \n" +
              "			pi.bankName,  \n" +
              "			pi.bankAccountNo,  \n" +
              "			pi.paymentDate,  \n" +
              "			pi.paymentAmount,  \n" +
              "			pi.payToName,  \n" +
              "			pi.payToAddress,  \n" +
              "			pi.payToAddressID,  \n" +
              "			pi.payToContactPersonID,  \n" +
              "			pi.remark,  \n" +
              "			pi.isPaymentVoided,  \n" +
              "			pi.voidPaymentReason,  \n" +
              "			pi.billToName,  \n" +
              "			pi.billToAddress,  \n" +
              "			pi.billToAddressID,  \n" +
              "			pi.billToContactPersonID,  \n" +
              "			pi.lockStatus,  \n" +
              "			FUN_GETUSERNAMEBYID(pi.lockedBy) lockByName,  \n" +
              "			FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pi.lockedAt,v_TimeZone,v_DateTimeDisplayFormat) lockedAt,  \n" +
              "			PI.refPaymentMode  \n" +
              "		FROM  \n" +
              "			packingslip_invoice_payment PI  \n" +
              "				INNER JOIN  \n" +
              "			mfgcodemst m ON m.id = pi.mfgcodeID  \n" +
              "		WHERE  \n" +
              "			pi.isDeleted = 0  \n" +
              "				AND PI.refPaymentMode = 'P'  \n" +
              "				AND pi.id = pPaymentId;  \n" +
              "	ELSE  \n" +
              "		SELECT 		m.accountRef accountReference,  \n" +
              "				m.id mfgcodeID,  \n" +
              "				m.mfgCode,  \n" +
              "				m.mfgName,  \n" +
              "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) fullMfgName,  \n" +
              "				m.paymentMethodID paymentType,  \n" +
              "				p.gencCategoryName paymentTypeName,  \n" +
              "				NULL paymentNumber,  \n" +
              "				b.id bankAccountMasID,  \n" +
              "				b.bankName,  \n" +
              "				b.accountCode bankAccountNo,  \n" +
              "				NULL paymentDate,  \n" +
              "				NULL paymentAmount,  \n" +
              "				ca.bankRemitToName payToName,  \n" +
              "				fun_getAddressbyIDForCheckPrint(ca.id, ca.defaultContactPersonID) payToAddress,  \n" +
              "				NULL remark,  \n" +
              "				0 isPaymentVoided,  \n" +
              "				NULL voidPaymentReason,  \n" +
              "				cb.companyName billToName,  \n" +
              "				fun_getAddressbyIDForCheckPrint(cb.id, cb.defaultContactPersonID) billToAddress,  \n" +
              "				NULL lockStatus,  \n" +
              "				NULL lockByName,  \n" +
              "				NULL lockedAt  \n" +
              "		FROM 		mfgcodemst m  \n" +
              "		LEFT JOIN 	genericcategory p ON p.gencCategoryID = m.paymentMethodID  \n" +
              "        LEFT JOIN 	bank_mst b ON b.id = p.bankid AND b.isDeleted = 0 AND b.isActive = 1  \n" +
              "		LEFT JOIN 	customer_addresses ca ON ca.customerId = m.id AND ca.isDeleted = 0 AND ca.addressType = 'P' AND ca.isDefault = 1  \n" +
              "		LEFT JOIN 	customer_addresses cb ON cb.customerId = m.id AND cb.isDeleted = 0 AND cb.addressType = 'BU' AND cb.isDefault = 1  \n" +
              "		WHERE 		m.isDeleted = 0  \n" +
              "					AND m.id = pMfgCodeId;  \n" +
              "	END IF;  \n" +
              "END;  \n" +
              /* **************************** New Script -> 23-03-2022 *********************************** */
              "DROP procedure IF EXISTS `Sproc_RetrieveSupplierInvoicePaymentLines`;  \n" +
              "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePaymentLines`(  \n" +
              "	IN pPaymentID INT  \n" +
              ")  \n" +
              "BEGIN  \n" +
              "	SELECT  \n" +
              "		ps.id,  \n" +
              "            ps.systemId,  \n" +
              "            psd.totalExtendedAmount,  \n" +
              "            psd.totalDiscount,  \n" +
              "            ps.receiptType,  \n" +
              "            ps.invoiceNumber,  \n" +
              "            ps.invoiceDate,  \n" +
              "            ps.creditMemoNumber,  \n" +
              "            ps.creditMemoDate,  \n" +
              "            ps.debitMemoNumber,  \n" +
              "            ps.debitMemoDate,  \n" +
              "            psr.invoiceNumber refInvoiceNumber,  \n" +
              "            ps.refParentCreditDebitInvoiceno,  \n" +
              "            pid.totalPaidAmount,  \n" +
              "            IFNULL(pid.paymentAmount, 0) paymentAmount,  \n" +
              "            IFNULL(ps.markedForRefundAmt, 0) markedForRefundAmt,  \n" +
              "            ps.isDeleted,  \n" +
              "            (IFNULL(psd.totalExtendedAmount, 0) - IFNULL(pid.totalPaidAmount, 0) + IFNULL(ps.markedForRefundAmt, 0)) balanceToPayAmount  \n" +
              "    FROM packing_slip_material_receive ps  \n" +
              "		LEFT JOIN packing_slip_material_receive psr ON psr.id = ps.refParentCreditDebitInvoiceno  \n" +
              "		JOIN (  \n" +
              "           select paymentAmount,  \n" +
              "           refPayementid,  \n" +
              "			refPackingslipInvoiceID,  \n" +
              "            	ifnull(  \n" +
              "					sum(case  \n" +
              "						when isPaymentVoided = 0 and isDeleted = 0 and refCustPackingslipInvoiceID is null  \n" +
              "							then paymentAmount  \n" +
              "					   else 0  \n" +
              "				   end) over (partition by refPackingslipInvoiceID),0) as totalPaidAmount  \n" +
              "					  from packingslip_invoice_payment_det  \n" +
              "        ) pid ON pid.refPackingslipInvoiceID = ps.id  \n" +
              "		LEFT JOIN (SELECT  \n" +
              "			psd.refPackingSlipMaterialRecID,  \n" +
              "				psd.isDeleted,  \n" +
              "				SUM(psd.extendedPrice) totalExtendedAmount,  \n" +
              "				SUM(psd.discount) totalDiscount  \n" +
              "			FROM  \n" +
              "				packing_slip_material_receive_det psd  \n" +
              "			GROUP BY psd.refPackingSlipMaterialRecID , psd.isDeleted  \n" +
              "		) psd ON psd.refPackingSlipMaterialRecID = ps.id AND psd.isDeleted = CASE WHEN ps.isDeleted = 0 THEN 0 ELSE psd.isDeleted END  \n" +
              "			where pid.refPayementid = pPaymentID AND exists (SELECT  1 FROM packingslip_invoice_payment X WHERE x.id = pid.refPayementid AND x.refPaymentMode = 'P');  \n" +
              "END;  \n" +
              /* **************************** Add Script Version -> 23-03-2022 *********************************** */
              "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
              "VALUES (6042,'2.00','V1',' Task 42428: Performance tunning supplier payment and refund manage page queries - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
              );
            break;
            case 6042:
            allDbChangesArray.push(
            /* **************************** New Script -> 23-03-2022 *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasPartsSearch`;  \n" +
            "CREATE PROCEDURE `Sproc_GetComponentMFGAliasPartsSearch`(  \n" +
            "	IN pGoodPart VARCHAR(100),  \n" +
            "	IN pSearch VARCHAR(500),  \n" +
            "	IN pId INT,  \n" +
            "	IN pMfgType VARCHAR(50),  \n" +
            "	IN pMfgCodeId INT,  \n" +
            "	IN pMountingType VARCHAR(50),  \n" +
            "	IN pMountingTypeId INT,  \n" +
            "	IN pCategoryID INT,  \n" +
            "	IN pRohsMainCategoryID INT,  \n" +
            "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
            "	IN pstrictCustomPart TINYINT,  \n" +
            "    IN pAlternatePartFilter TINYINT,  \n" +
            "    IN pPackagingAliasFilter TINYINT,  \n" +
            "    IN pRoHReplacementPartFilter TINYINT,  \n" +
            "    IN pDriveToolsPartFilter TINYINT,  \n" +
            "    IN pProcessMaterialPartFilter TINYINT,  \n" +
            "    IN pRequireMatingPartFilter TINYINT,  \n" +
            "    IN pPickupPadPartFilter TINYINT,  \n" +
            "    IN pRequireFunctionalPartFilter TINYINT,  \n" +
            "	IN pCurrentPartId INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE vRohsMainCategoryID INT;  \n" +
            "	DECLARE vPackaginggroupID INT;  \n" +
            "	SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
            "	/*===>this logic is added to compare invert rohs category*/  \n" +
            "	IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
            "		IF pRohsMainCategoryID = -1 THEN  \n" +
            "			SET vRohsMainCategoryID = -2;  \n" +
            "		ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
            "			SET vRohsMainCategoryID = -1;  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	/*<===this logic is added to compare invert rohs category*/  \n" +
            "	IF(pCurrentPartId is not null) THEN  \n" +
            "		select packaginggroupID INTO vPackaginggroupID from component_attributes where refComponentID = pCurrentPartId;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  SET @SQLStatement1=CONCAT(\" select *  from  (  \n" +
            "			select 	c.id, 						CONCAT('(' ,m.mfgCode,') ', c.mfgPN) mfgPN,					c.mfgPN orgMfgPN,			c.packaginggroupID,		c.PIDCode,  	c.partStatus,	c.partPackageID,  \n" +
            "					c.isGoodPart,				c.RoHSStatusID,						c.mfgcodeID,				c.mfgType,  				c.partType,				c.isCustom,  	c.uom,		c.uomClassID,  \n" +
            "					c.category,					c.functionalCategoryID,				c.mountingTypeID,			c.connecterTypeID ,			r.rohsIcon,				r.name AS rohsName, c.minOperatingTemp,  \n" +
            "                    c.maxOperatingTemp,			c.temperatureCoefficientValue,		c.temperatureCoefficientUnit,	c.noOfPosition,			c.noOfRows,				c.pitch,		c.pitchMating,		c.length,  \n" +
            "                    c.width,					c.height,							c.tolerance,					c.voltage,				c.value,				powerRating,	c.weight,		c.feature,  \n" +
            "                    c.color,					c.packageQty,						c.umidSPQ,						c.restrictPackagingUsePermanently,	c.restrictPackagingUseWithpermission,  \n" +
            "                    c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.partPackage,				c.isNoClean,				c.isWaterSoluble,		c.isFluxNotApplicable,	c.mfgPNDescription,  \n" +
            "                    c.detailDescription,		c.isHazmatMaterial,					c.isReceiveBulkItem,		c.isEpoxyMount  \n" +
            "			from vu_component_mpn c  \n" +
            "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID  \n" +
            "            JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID \");  \n" +
            "  \n" +
            "		IF pMountingType is not null THEN  \n" +
            "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND mt.name = pMountingType\");  \n" +
            "		end if;  \n" +
            "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  WHERE c.isdeleted = 0 \");  \n" +
            "		IF pId is not null THEN  \n" +
            "			set @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.id = pId \");  \n" +
            "		end if;  \n" +
            "  \n" +
            "		IF pMfgType is not null THEN  \n" +
            "			set @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mfgType = '\",pMfgType,\"' \");  \n" +
            "		end if;  \n" +
            "		IF pCurrentPartId is not null THEN  \n" +
            "			set @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.id != \",pCurrentPartId);  \n" +
            "		end if;  \n" +
            "		IF pGoodPart is not null THEN  \n" +
            "			set @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.isGoodPart = \",pGoodPart);  \n" +
            "		end if;  \n" +
            "		IF pMountingTypeId is not null THEN  \n" +
            "			set @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mountingTypeID = \",pMountingTypeId);  \n" +
            "		end if;  \n" +
            "		IF pMfgCodeId is not null THEN  \n" +
            "			set @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mfgcodeID = \",pMfgCodeId);  \n" +
            "		end if;  \n" +
            "		IF pCategoryID is not null THEN  \n" +
            "			set @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.category = \",pCategoryID);  \n" +
            "		end if;  \n" +
            "		IF vRohsMainCategoryID is not null THEN  \n" +
            "			set @SQLStatement1=CONCAT(@SQLStatement1,\" AND r.refMainCategoryID = \",vRohsMainCategoryID);  \n" +
            "		end if;  \n" +
            "		IF pstrictCustomPart = 0 THEN  \n" +
            "			set @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.iscustom = 0  \");  \n" +
            "		end if;  \n" +
            "  \n" +
            "	IF pPackagingAliasFilter = 1  and vPackaginggroupID is not null THEN  \n" +
            "			set @SQLStatement1=CONCAT(@SQLStatement1,\" AND (not exists (select 1 from component_packagingalias cp where cp.componentID = c.id and cp.aliasgroupID = \",vPackaginggroupID,\" and cp.isDeleted = 0))  \");  \n" +
            "		end if;  \n" +
            "  \n" +
            "	IF pAlternatePartFilter = 1  THEN  \n" +
            "			set @SQLStatement1=CONCAT(@SQLStatement1,\" AND (not exists (select 1 from component_alternatepn ca where ca.type = 1 and ca.componentID = c.id and ca.refComponentID = \",pCurrentPartId,\" and ca.isDeleted = 0)) \");  \n" +
            "		end if;  \n" +
            "  \n" +
            "        IF pPickupPadPartFilter = 1  THEN  \n" +
            "			set @SQLStatement1=CONCAT(@SQLStatement1,\" AND (not exists (select 1 from component_alternatepn ca where ca.type = 2 and ca.componentID = c.id and ca.refComponentID = \",pCurrentPartId ,\" and ca.isDeleted = 0)) \");  \n" +
            "		end if;  \n" +
            "  \n" +
            "        IF pRequireFunctionalPartFilter = 1  THEN  \n" +
            "			set @SQLStatement1=CONCAT(@SQLStatement1,\" AND (not exists (select 1 from component_alternatepn ca where ca.type = 4 and ca.componentID = c.id and ca.refComponentID = \",pCurrentPartId ,\" and ca.isDeleted = 0)) \");  \n" +
            "		end if;  \n" +
            "  \n" +
            "        IF pProcessMaterialPartFilter = 1  THEN  \n" +
            "			set @SQLStatement1=CONCAT(@SQLStatement1,\" AND (not exists (select 1 from component_alternatepn ca where ca.type = 5 and ca.componentID = c.id and ca.refComponentID = \",pCurrentPartId ,\" and ca.isDeleted = 0)) \");  \n" +
            "		end if;  \n" +
            "		IF pRoHReplacementPartFilter = 1  THEN  \n" +
            "		set @SQLStatement1=CONCAT(@SQLStatement1,\" AND  (not exists (select 1 from component_alternatepn ca where ca.type = 6 and ca.componentID = c.id and ca.refComponentID = \",pCurrentPartId,\" and ca.isDeleted = 0))\");  \n" +
            "		end if;  \n" +
            "		IF pDriveToolsPartFilter = 1  THEN  \n" +
            "		set @SQLStatement1=CONCAT(@SQLStatement1,\" AND (not exists (select 1 from component_drivetools cd where cd.isDeleted = 0 and cd.componentID = c.id and cd.refComponentID =\", pCurrentPartId, \"))\");  \n" +
            "		end if;  \n" +
            "	set @SQLStatement1=CONCAT(@SQLStatement1,\" ) AS a  \");  \n" +
            "		IF pSearch is not null  THEN  \n" +
            "		set @SQLStatement1=CONCAT(@SQLStatement1,\" where EXISTS( SELECT  1  from (select a.mfgPN from dual  \n" +
            "											 union  \n" +
            "											 select name as mfgPN from component_otherpn opn  WHERE 	opn.refcomponentid = a.id  \n" +
            "											 ) a where 	a.MfgPN  LIKE CONCAT('%','\", pSearch,\"','%'))  \");  \n" +
            "		end if;  \n" +
            "  \n" +
            "		set @SQLStatement1=CONCAT(@SQLStatement1,\" ORDER BY mfgPN  Limit 100 \");  \n" +
            "		#select @SQLStatement1;  \n" +
            "        PREPARE query1 FROM @SQLStatement1;  \n" +
            "		EXECUTE query1;  \n" +
            "		DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "END;  \n" +
            "DROP procedure IF EXISTS `Sproc_GetDriveToolListByComponentId`;  \n" +
            "CREATE PROCEDURE `Sproc_GetDriveToolListByComponentId`(  \n" +
            "	IN pRefComponentID INT,  \n" +
            "	IN ppageIndex INT,  \n" +
            "	IN precordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "    IN pWithStock TINYINT(1)  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "	DECLARE vMfgCodeFormat INT;  \n" +
            "  \n" +
            "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
            "  \n" +
            "  SET @SQLStatement1=\"  \n" +
            "		select cd.id, cd.refComponentID, cd.componentID, co.imageURL, co.documentPath, mf.id mfgCodeId, mf.mfgCode, mf.mfgType, co.mfgPN, co.isCustom, co.PIDCode,  \n" +
            "                co.custAssyPN,	co.rev,		co.liveVersion, \";  \n" +
            "	IF (pWithStock IS NOT NULL AND pWithStock != '') THEN  \n" +
            "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" fun_getComponentStock(co.id) partStock, \");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
            "				co.functionalCategoryID,  \n" +
            "				co.functionalCategoryText,  \n" +
            "				pt.partTypeName functionalCategoryName,  \n" +
            "                co.mountingTypeID,  \n" +
            "				co.mountingTypeText,  \n" +
            "				mt.name mountingTypeName,  \n" +
            "				ro.rohsIcon,  \n" +
            "				ro.name rohsName  ,  \n" +
            "                fun_GetFormattedMfgCode(mf.mfgCode, mf.mfgName,\", vMfgCodeFormat,\") as mfrCode, co.mfgPNDescription,  \n" +
            "				co.isGoodPart,        co.restrictUsePermanently,        co.restrictUSEwithpermission,		co.restrictPackagingUsePermanently,		co.restrictPackagingUseWithpermission  \n" +
            "		  from vu_component_mpn co  \n" +
            "		  JOIN mfgcodemst mf ON co.mfgcodeID = mf.id  \n" +
            "		  JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
            "		  JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID  \n" +
            "		  join component_drivetools cd ON cd.componentID = co.id and cd.isDeleted = 0  \n" +
            "          LEFT JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id  \n" +
            "		 where co.isdeleted = 0 and cd.refComponentID = \",pRefComponentID);  \n" +
            "  \n" +
            "	IF (pOrderBy IS NOT NULL) THEN  \n" +
            "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  /* to get total count of rows */  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "    PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @SQLStatement1,\" ) c  \n" +
            "		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "  \n" +
            "    /*main query create temp table*/  \n" +
            "	PREPARE query1 FROM @SQLStatement2;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 23-03-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (6043,'2.00','V1',' Change Sproc_GetDriveToolListByComponentId,Sproc_GetComponentMFGAliasPartsSearch - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 6043:
            allDbChangesArray.push(
            /* **************************** New Script -> 23-03-2022 *********************************** */
            "ALTER TABLE `component_attributes`  \n" +
            "ADD INDEX `idx_component_attribute_packaginggroupID` (`packaginggroupID` ASC) VISIBLE;  \n" +
            /* **************************** Add Script Version -> 23-03-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (6044,'2.00','V1',' Create new index idx_component_attribute_packaginggroupID- DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 6044:
			  allDbChangesArray.push(
              /* **************************** Add Script Version -> 23-03-2022 *********************************** */
				        "DROP VIEW IF EXISTS `vu_component_packingalias` ;  \n" +
				        "CREATE VIEW `vu_component_packingalias` AS  \n" +
				        "    SELECT  \n" +
				        "        `c`.`refComponentID` AS `refComponentID`,  \n" +
				        "        `c`.`packaginggroupID` AS `packaginggroupID`,  \n" +
				        "        IFNULL(GROUP_CONCAT(DISTINCT `d`.`refComponentID`  \n" +
				        "                    SEPARATOR ','),  \n" +
				        "                `c`.`refComponentID`) AS `packingAliasParts`  \n" +
				        "    FROM  \n" +
				        "        (`component_attributes` `c`  \n" +
				        "        LEFT JOIN `component_attributes` `d` ON ((`c`.`packaginggroupID` = `d`.`packaginggroupID`)))  \n" +
				        "    WHERE  \n" +
				        "        (`c`.`isDeleted` = 0)  \n" +
				        "    GROUP BY `c`.`refComponentID` , `c`.`packaginggroupID`;  \n" +
			  /* **************************** Add Script Version -> 23-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_perjob_shortage` ;  \n" +
				"CREATE VIEW `vu_perjob_shortage` AS  \n" +
				"    SELECT  \n" +
				"        `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"        `k`.`soNumber` AS `soNumber`,  \n" +
				"        `k`.`poNumber` AS `poNumber`,  \n" +
				"        `k`.`assyID` AS `assyID`,  \n" +
				"        `k`.`assyNickname` AS `assyNickname`,  \n" +
				"        `k`.`assyPIDCode` AS `assyPIDCode`,  \n" +
				"        (`k`.`kitAllocationTotalLine` - `k`.`notRequireKitAllocationTotalLine`) AS `totalLine`,  \n" +
				"        `k`.`shortageLine` AS `shortageLine`,  \n" +
				"        `k`.`kitAllocationPercentage` AS `kitAllocationPercentage`  \n" +
				"    FROM  \n" +
				"        (SELECT  \n" +
				"            `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"                `s`.`salesOrderNumber` AS `soNumber`,  \n" +
				"                `s`.`poNumber` AS `poNumber`,  \n" +
				"                `k`.`assyID` AS `assyID`,  \n" +
				"                `c`.`nickName` AS `assyNickname`,  \n" +
				"                `c`.`PIDCode` AS `assyPIDCode`,  \n" +
				"                COUNT(1) AS `kitAllocationTotalLine`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`k`.`isNotRequiredKitAllocation` = 1) THEN 1  \n" +
				"                    ELSE 0  \n" +
				"                END)) AS `notRequireKitAllocationTotalLine`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`k`.`shortage` > 0) THEN 1  \n" +
				"                    ELSE 0  \n" +
				"                END)) AS `shortageLine`,  \n" +
				"                ROUND(IFNULL(AVG((CASE  \n" +
				"                    WHEN (`k`.`allocationPer` > 100) THEN 100  \n" +
				"                    ELSE ROUND(IFNULL(`k`.`allocationPer`, 0), 2)  \n" +
				"                END)), 0), 2) AS `kitAllocationPercentage`  \n" +
				"        FROM  \n" +
				"            ((((SELECT  \n" +
				"            `vu_kit_allocation_detail`.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
				"                `vu_kit_allocation_detail`.`assyID` AS `assyID`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedpin`, 0)) / ((`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)) * `vu_kit_allocation_detail`.`bomNumOfPosition`))  \n" +
				"                    ELSE ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedunit`, 0)) / (`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)))  \n" +
				"                END) AS `allocationPer`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN `vu_kit_allocation_detail`.`shortagePins`  \n" +
				"                    ELSE `vu_kit_allocation_detail`.`shortage`  \n" +
				"                END) AS `shortage`,  \n" +
				"                `vu_kit_allocation_detail`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
				"        FROM  \n" +
				"            `vu_kit_allocation_detail`) `k`  \n" +
				"        JOIN `salesorderdet` `sd` ON (((`k`.`refSalesOrderDetID` = `sd`.`id`)  \n" +
				"            AND (`sd`.`partCategory` = 3))))  \n" +
				"        JOIN `salesordermst` `s` ON ((`sd`.`refSalesOrderID` = `s`.`id`)))  \n" +
				"        JOIN `component` `c` ON ((`k`.`assyID` = `c`.`id`)))  \n" +
				"        GROUP BY `k`.`refSalesOrderDetID`) `k`  \n" +
				"    ORDER BY `k`.`soNumber` , `k`.`poNumber` , `k`.`assyPIDCode`;  \n" +
				/* **************************** Add Script Version -> 23-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
				"CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
				"    SELECT  \n" +
				"        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
				"        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
				"        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
				"        `a`.`poNumber` AS `Po Number`,  \n" +
				"        `a`.`poDate` AS `Po Date`,  \n" +
				"        `a`.`customerID` AS `Customer ID`,  \n" +
				"        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
				"        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
				"        `a`.`status` AS `Sales Order Status`,  \n" +
				"        `a`.`revision` AS `Revision`,  \n" +
				"        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
				"        `a`.`termsID` AS `Terms ID`,  \n" +
				"        `a`.`soDate` AS `So Date`,  \n" +
				"        `a`.`partID` AS `PartID`,  \n" +
				"        `a`.`PIDCode` AS `Assy ID`,  \n" +
				"        `a`.`mfgPN` AS `Assy Name`,  \n" +
				"        `a`.`rev` AS `Assy Revision`,  \n" +
				"        `a`.`custAssyPN` AS `custAssyPN`,  \n" +
				"        `a`.`nickName` AS `NickName`,  \n" +
				"        `a`.`liveVersion` AS `liveVersion`,  \n" +
				"        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
				"        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
				"        `a`.`qty` AS `PO Qty`,  \n" +
				"        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
				"        `a`.`shippingQty` AS `shippingQty`,  \n" +
				"        `a`.`companyName` AS `Company Name`,  \n" +
				"        `a`.`internalPO` AS `internalPO`,  \n" +
				"        `a`.`mfgCode` AS `mfgCode`,  \n" +
				"        `a`.`fullName` AS `Full Name`,  \n" +
				"        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
				"        `a`.`isCancle` AS `isCancle`,  \n" +
				"        `a`.`cancleReason` AS `cancleReason`,  \n" +
				"        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
				"        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
				"        `a`.`shippingDate` AS `shippingDate`,  \n" +
				"        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
				"        `a`.`remark` AS `remark`,  \n" +
				"        `a`.`price` AS `price`,  \n" +
				"        `a`.`mrpQty` AS `mrpQty`,  \n" +
				"        `a`.`kitQty` AS `kitQty`,  \n" +
				"        `a`.`isHotJob` AS `isHotJob`,  \n" +
				"        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
				"        `a`.`RoHSName` AS `RoHSName`,  \n" +
				"        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
				"        `a`.`lineID` AS `lineID`,  \n" +
				"        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
				"        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
				"        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
				"            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
				"            ELSE 'In Progress'  \n" +
				"        END) AS `Status`,  \n" +
				"        `a`.`modifyDate` AS `modifyDate`,  \n" +
				"        `a`.`createdDate` AS `createdDate`,  \n" +
				"        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
				"        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
				"        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
				"        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
				"        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
				"        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
				"        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
				"        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
				"        `a`.`kitnumber` AS `kitnumber`,  \n" +
				"        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
				"        `a`.`partDescription` AS `partDescription`,  \n" +
				"        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
				"        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
				"        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
				"        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
				"        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
				"        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
				"        `a`.`internalComment` AS `internalComment`,  \n" +
				"        `a`.`partCategory` AS `partCategory`,  \n" +
				"        `a`.`serialNumber` AS `serialNumber`,  \n" +
				"        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
				"        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
				"        `a`.`rmaNumber` AS `rmaNumber`,  \n" +
				"        `a`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
				"        `a`.`debitedByCustText` AS `debitedByCustText`,  \n" +
				"        `a`.`rmaOrgPONumber` AS `rmaOrgPONumber`,  \n" +
				"        `a`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
				"        `a`.`isReworkRequired` AS `isReworkRequired`,  \n" +
				"        `a`.`reworkReqText` AS `reworkReqText`,  \n" +
				"        `a`.`reworkPONumber` AS `reworkPONumber`,  \n" +
				"        `a`.`poRevision` AS `poRevision`,  \n" +
				"        `a`.`partType` AS `partType`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
				"            ELSE `a`.`salesOrderDetStatus`  \n" +
				"        END) AS `salesOrderDetStatus`,  \n" +
				"        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
				"        `a`.`frequency` AS `frequency`,  \n" +
				"        `a`.`refSODetID` AS `refSODetID`,  \n" +
				"        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
				"        `a`.`originalPODate` AS `originalPODate`,  \n" +
				"        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
				"        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
				"        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
				"        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
				"        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
				"        `a`.`frequencyType` AS `frequencyType`,  \n" +
				"        `a`.`assignQty` AS `assignQty`,  \n" +
				"        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
				"        `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
				"        `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
				"        `a`.`blanketPOOption` AS `blanketPOOption`,  \n" +
				"        `a`.`blanketPOOptionText` AS `blanketPOOptionText`,  \n" +
				"        `a`.`requestedBPOStartDate` AS `requestedBPOStartDate`,  \n" +
				"        `a`.`blanketPOEndDate` AS `blanketPOEndDate`,  \n" +
				"        `a`.`linkToBlanketPO` AS `linkToBlanketPO`,  \n" +
				"        `a`.`linkToBlanketPOText` AS `linkToBlanketPOText`,  \n" +
				"        `a`.`mfgName` AS `mfgName`  \n" +
				"    FROM  \n" +
				"        (SELECT  \n" +
				"            `sm`.`id` AS `salesOrderId`,  \n" +
				"                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
				"                `sm`.`poNumber` AS `poNumber`,  \n" +
				"                `sm`.`poDate` AS `poDate`,  \n" +
				"                `sm`.`customerID` AS `customerID`,  \n" +
				"                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
				"                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
				"                `sm`.`status` AS `status`,  \n" +
				"                `sm`.`revision` AS `revision`,  \n" +
				"                `sm`.`shippingComment` AS `shippingComment`,  \n" +
				"                `sm`.`termsID` AS `termsID`,  \n" +
				"                `sm`.`soDate` AS `soDate`,  \n" +
				"                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
				"                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
				"                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
				"                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
				"                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
				"                `sm`.`serialNumber` AS `serialNumber`,  \n" +
				"                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
				"                `sm`.`rmaNumber` AS `rmaNumber`,  \n" +
				"                `sm`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`sm`.`isDebitedByCustomer` = 1) THEN 'Yes'  \n" +
				"                    ELSE 'No'  \n" +
				"                END) AS `debitedByCustText`,  \n" +
				"                `sm`.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
				"                `sm`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
				"                `sm`.`isReworkRequired` AS `isReworkRequired`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`sm`.`isReworkRequired` = 1) THEN 'Yes'  \n" +
				"                    ELSE 'No'  \n" +
				"                END) AS `reworkReqText`,  \n" +
				"                `sm`.`reworkPONumber` AS `reworkPONumber`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
				"                    ELSE 'No'  \n" +
				"                END) AS `blanketPOText`,  \n" +
				"                `sm`.`poRevision` AS `poRevision`,  \n" +
				"                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
				"                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
				"                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
				"                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
				"                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
				"                `sm`.`createdAt` AS `createdDate`,  \n" +
				"                `sm`.`updatedAt` AS `modifyDate`,  \n" +
				"                `co`.`PIDCode` AS `PIDCode`,  \n" +
				"                `co`.`mfgPN` AS `mfgPN`,  \n" +
				"                `co`.`rev` AS `rev`,  \n" +
				"                `co`.`nickName` AS `nickName`,  \n" +
				"                `co`.`liveVersion` AS `liveVersion`,  \n" +
				"                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
				"                `co`.`isCustom` AS `isCustomPart`,  \n" +
				"                `co`.`custAssyPN` AS `custAssyPN`,  \n" +
				"                `co`.`partType` AS `partType`,  \n" +
				"                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
				"                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
				"                `cu`.`mfgCode` AS `mfgCode`,  \n" +
				"                `cu`.`mfgName` AS `mfgName`,  \n" +
				"                `cu`.`isCompany` AS `internalPO`,  \n" +
				"                `mg`.`mfgName` AS `manufacturerName`,  \n" +
				"                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
				"                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
				"                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
				"                `roh`.`name` AS `RoHSName`,  \n" +
				"                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
				"                `a`.`qty` AS `qty`,  \n" +
				"                `a`.`id` AS `salesOrderDetailId`,  \n" +
				"                `a`.`kitNumber` AS `kitnumber`,  \n" +
				"                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
				"                `a`.`partDescription` AS `partDescription`,  \n" +
				"                `a`.`partID` AS `partID`,  \n" +
				"                `a`.`isCancle` AS `isCancle`,  \n" +
				"                `a`.`isHotJob` AS `isHotJob`,  \n" +
				"                `a`.`cancleReason` AS `cancleReason`,  \n" +
				"                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
				"                `sh`.`shippingDate` AS `shippingDate`,  \n" +
				"                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
				"                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
				"                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
				"                `a`.`remark` AS `remark`,  \n" +
				"                `a`.`price` AS `price`,  \n" +
				"                `a`.`mrpQty` AS `mrpQty`,  \n" +
				"                `a`.`kitQty` AS `kitQty`,  \n" +
				"                `a`.`shippingQty` AS `shippingQty`,  \n" +
				"                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
				"                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
				"                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
				"                `a`.`internalComment` AS `internalComment`,  \n" +
				"                `a`.`partCategory` AS `partCategory`,  \n" +
				"                `a`.`lineID` AS `lineID`,  \n" +
				"                `sm`.`originalPODate` AS `originalPODate`,  \n" +
				"                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
				"                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
				"                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
				"                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
				"                `soh`.`assignQty` AS `assignQty`,  \n" +
				"                `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
				"                    ELSE 'NO'  \n" +
				"                END) AS `rmaPOText`,  \n" +
				"                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
				"                    ELSE 'NO'  \n" +
				"                END) AS `legacyPOText`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
				"                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
				"                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
				"                    ELSE ''  \n" +
				"                END) AS `frequency`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
				"                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
				"                    ELSE ''  \n" +
				"                END) AS `frequencyType`,  \n" +
				"                `a`.`refSODetID` AS `refSODetID`,  \n" +
				"                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
				"                `a`.`requestedBPOStartDate` AS `requestedBPOStartDate`,  \n" +
				"                `a`.`blanketPOEndDate` AS `blanketPOEndDate`,  \n" +
				"                `sm`.`linkToBlanketPO` AS `linkToBlanketPO`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`sm`.`linkToBlanketPO` = 1) THEN 'Yes'  \n" +
				"                    ELSE 'No'  \n" +
				"                END) AS `linkToBlanketPOText`,  \n" +
				"                IFNULL((CASE  \n" +
				"                    WHEN (`sm`.`blanketPOOption` = 2) THEN `sqt`.`BPOShippedQty`  \n" +
				"                    ELSE `sq`.`ShippedQty`  \n" +
				"                END), 0) AS `ShippedQty`,  \n" +
				"                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
				"                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
				"                `sm`.`blanketPOOption` AS `blanketPOOption`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`sm`.`blanketPOOption` = 1) THEN 'Use This Blanket PO# for All Releases'  \n" +
				"                    WHEN (`sm`.`blanketPOOption` = 2) THEN 'Link Future PO(s) to This Blanket PO'  \n" +
				"                    WHEN (`sm`.`blanketPOOption` = 3) THEN 'Use Blanket PO# and Release# for All Releases'  \n" +
				"                    ELSE ''  \n" +
				"                END) AS `blanketPOOptionText`  \n" +
				"        FROM  \n" +
				"            (((((((((((((`salesordermst` `sm`  \n" +
				"        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
				"            AND (`a`.`isDeleted` = 0)  \n" +
				"            AND (`sm`.`isDeleted` = 0))))  \n" +
				"        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
				"            AND (`cu`.`isDeleted` = 0))))  \n" +
				"        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
				"        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
				"            AND (`mg`.`isDeleted` = 0))))  \n" +
				"        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
				"            AND (`roh`.`isDeleted` = 0))))  \n" +
				"        LEFT JOIN `contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
				"            AND (`cc`.`isDeleted` = 0))))  \n" +
				"        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
				"            AND (`gc`.`isDeleted` = 0))))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            IFNULL(SUM(`sbt`.`ShippedQty`), 0) AS `BPOShippedQty`,  \n" +
				"                `sbt`.`refBlanketPOID` AS `blanketPOSoDetID`  \n" +
				"        FROM  \n" +
				"            (SELECT  \n" +
				"            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
				"                `sdd`.`refBlanketPOID` AS `refBlanketPOID`,  \n" +
				"                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
				"        FROM  \n" +
				"            ((`customer_packingslip_det` `cpd`  \n" +
				"        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
				"        JOIN `salesorderdet` `sdd` ON (((`sdd`.`id` = `cpd`.`refSalesorderDetid`)  \n" +
				"            AND (`sdd`.`isDeleted` = 0))))  \n" +
				"        WHERE  \n" +
				"            ((`cps`.`transType` = 'P')  \n" +
				"                AND (`cpd`.`isDeleted` = 0))  \n" +
				"        GROUP BY `cpd`.`refSalesorderDetid` , `sdd`.`refBlanketPOID`) `sbt`  \n" +
				"        GROUP BY `sbt`.`refBlanketPOID`) `sqt` ON ((`sqt`.`blanketPOSoDetID` = `a`.`id`)))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
				"                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
				"        FROM  \n" +
				"            (`customer_packingslip_det` `cpd`  \n" +
				"        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
				"        WHERE  \n" +
				"            ((`cps`.`transType` = 'P')  \n" +
				"                AND (`cpd`.`isDeleted` = 0))  \n" +
				"        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
				"                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
				"        FROM  \n" +
				"            `workorder_salesorder_details` `x`  \n" +
				"        WHERE  \n" +
				"            (`x`.`isDeleted` = 0)  \n" +
				"        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            `ssm`.`sDetID` AS `sDetID`,  \n" +
				"                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
				"        FROM  \n" +
				"            `salesshippingmst` `ssm`  \n" +
				"        WHERE  \n" +
				"            (`ssm`.`isDeleted` = 0)  \n" +
				"        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
				"                `sod`.`refBlanketPOID` AS `refsalesOrderID`  \n" +
				"        FROM  \n" +
				"            `salesorderdet` `sod`  \n" +
				"        WHERE  \n" +
				"            (`sod`.`isDeleted` = 0)  \n" +
				"        GROUP BY `sod`.`refBlanketPOID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
				"                `s`.`refAssyId` AS `refAssyId`,  \n" +
				"                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
				"                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
				"                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
				"                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
				"        FROM  \n" +
				"            (`salesorder_plan_detailsmst` `s`  \n" +
				"        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
				"        GROUP BY `s`.`salesOrderDetID` , `s`.`refAssyId`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
				"        WHERE  \n" +
				"            (`sm`.`isDeleted` = 0)) `a`;  \n" +
				/* **************************** Add Script Version -> 23-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_perjob_shortage_with_sub_assembly` ;  \n" +
				"CREATE VIEW `vu_perjob_shortage_with_sub_assembly` AS  \n" +
				"    SELECT  \n" +
				"        `y`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"        `y`.`soNumber` AS `soNumber`,  \n" +
				"        `y`.`poNumber` AS `poNumber`,  \n" +
				"        `y`.`assyID` AS `subAssyID`,  \n" +
				"        `y`.`assyNickname` AS `subAssyNickname`,  \n" +
				"        `y`.`assyPIDCode` AS `subAssyPIDCode`,  \n" +
				"        `y`.`mainAssyID` AS `assyID`,  \n" +
				"        (`y`.`kitAllocationTotalLine` - `y`.`notRequireKitAllocationTotalLine`) AS `totalLine`,  \n" +
				"        `y`.`shortageLine` AS `shortageLine`,  \n" +
				"        `y`.`kitAllocationPercentage` AS `kitAllocationPercentage`,  \n" +
				"        FUN_GETASSYNICKNAMEBYID(`y`.`mainAssyID`) AS `assyNickname`,  \n" +
				"        FUN_GETASSYPIDCODEBYID(`y`.`mainAssyID`) AS `assyPIDCode`  \n" +
				"    FROM  \n" +
				"        (SELECT  \n" +
				"            `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"                `k`.`soNumber` AS `soNumber`,  \n" +
				"                `k`.`poNumber` AS `poNumber`,  \n" +
				"                `k`.`assyID` AS `assyID`,  \n" +
				"                `k`.`assyNickname` AS `assyNickname`,  \n" +
				"                `k`.`assyPIDCode` AS `assyPIDCode`,  \n" +
				"                (SELECT  \n" +
				"                        `kit_allocation_assy_detail`.`partId`  \n" +
				"                    FROM  \n" +
				"                        `kit_allocation_assy_detail`  \n" +
				"                    WHERE  \n" +
				"                        ((`kit_allocation_assy_detail`.`refSalesOrderDetID` = `k`.`refSalesOrderDetID`)  \n" +
				"                            AND (`kit_allocation_assy_detail`.`bomAssyLevel` = 0)  \n" +
				"                            AND (`kit_allocation_assy_detail`.`deletedAt` IS NULL))  \n" +
				"                    LIMIT 1) AS `mainAssyID`,  \n" +
				"                `k`.`kitAllocationTotalLine` AS `kitAllocationTotalLine`,  \n" +
				"                `k`.`notRequireKitAllocationTotalLine` AS `notRequireKitAllocationTotalLine`,  \n" +
				"                `k`.`shortageLine` AS `shortageLine`,  \n" +
				"                `k`.`kitAllocationPercentage` AS `kitAllocationPercentage`  \n" +
				"        FROM  \n" +
				"            (SELECT  \n" +
				"            `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"                `s`.`salesOrderNumber` AS `soNumber`,  \n" +
				"                `s`.`poNumber` AS `poNumber`,  \n" +
				"                `k`.`assyID` AS `assyID`,  \n" +
				"                `c`.`nickName` AS `assyNickname`,  \n" +
				"                `c`.`PIDCode` AS `assyPIDCode`,  \n" +
				"                COUNT(1) AS `kitAllocationTotalLine`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`k`.`isNotRequiredKitAllocation` = 1) THEN 1  \n" +
				"                    ELSE 0  \n" +
				"                END)) AS `notRequireKitAllocationTotalLine`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`k`.`shortage` > 0) THEN 1  \n" +
				"                    ELSE 0  \n" +
				"                END)) AS `shortageLine`,  \n" +
				"                ROUND(IFNULL(AVG((CASE  \n" +
				"                    WHEN (`k`.`allocationPer` > 100) THEN 100  \n" +
				"                    ELSE ROUND(IFNULL(`k`.`allocationPer`, 0), 2)  \n" +
				"                END)), 0), 2) AS `kitAllocationPercentage`  \n" +
				"        FROM  \n" +
				"            ((((SELECT  \n" +
				"            `vu_kit_allocation_detail`.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
				"                `vu_kit_allocation_detail`.`assyID` AS `assyID`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedpin`, 0)) / ((`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)) * `vu_kit_allocation_detail`.`bomNumOfPosition`))  \n" +
				"                    ELSE ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedunit`, 0)) / (`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)))  \n" +
				"                END) AS `allocationPer`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN `vu_kit_allocation_detail`.`shortagePins`  \n" +
				"                    ELSE `vu_kit_allocation_detail`.`shortage`  \n" +
				"                END) AS `shortage`,  \n" +
				"                `vu_kit_allocation_detail`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
				"        FROM  \n" +
				"            `vu_kit_allocation_detail`) `k`  \n" +
				"        JOIN `salesorderdet` `sd` ON (((`k`.`refSalesOrderDetID` = `sd`.`id`)  \n" +
				"            AND (`sd`.`partCategory` = 3))))  \n" +
				"        JOIN `salesordermst` `s` ON ((`sd`.`refSalesOrderID` = `s`.`id`)))  \n" +
				"        JOIN `component` `c` ON ((`k`.`assyID` = `c`.`id`)))  \n" +
				"        GROUP BY `k`.`refSalesOrderDetID` , `k`.`assyID` , `s`.`salesOrderNumber` , `s`.`poNumber` , `c`.`nickName` , `c`.`PIDCode`) `k`  \n" +
				"        ORDER BY `k`.`soNumber` , `k`.`poNumber` , `k`.`assyPIDCode`) `y`;  \n" +
				/* **************************** Add Script Version -> 23-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_deducted_allocation_available_stock` ;  \n" +
				"CREATE VIEW `vu_deducted_allocation_available_stock` AS  \n" +
				"    SELECT  \n" +
				"        `a`.`id` AS `id`,  \n" +
				"        `a`.`uid` AS `Uid`,  \n" +
				"        `a`.`refcompid` AS `refcompid`,  \n" +
				"        `c`.`noOfPosition` AS `noOfPosition`,  \n" +
				"        `c`.`connecterTypeID` AS `connecterTypeID`,  \n" +
				"        `a`.`pkgUnit` AS `pkgunit`,  \n" +
				"        `b`.`allocatedUnit` AS `allocatedunit`,  \n" +
				"        (`a`.`pkgUnit` - IFNULL(`b`.`allocatedUnit`, 0)) AS `Availablestock`,  \n" +
				"        `c`.`unit` AS `unit`,  \n" +
				"        `c`.`uom` AS `uom`,  \n" +
				"        `a`.`receiveMaterialType` AS `receiveMaterialType`,  \n" +
				"        `a`.`customerID` AS `customerID`,  \n" +
				"        `a`.`customerConsign` AS `customerConsign`  \n" +
				"    FROM  \n" +
				"        ((`component_sid_stock` `a`  \n" +
				"        JOIN `vu_component_mpn` `c` ON ((`a`.`refcompid` = `c`.`id`)))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            `css`.`id` AS `id`,  \n" +
				"                SUM(`k`.`allocatedQty`) AS `beforCovertAllocatedUnit`,  \n" +
				"                SUM(FUN_CONVERTUOM(`k`.`allocatedUOM`, `css`.`uom`, `k`.`allocatedUnit`)) AS `allocatedUnit`  \n" +
				"        FROM  \n" +
				"            (`component_sid_stock` `css`  \n" +
				"        JOIN `kit_allocation` `k` ON (((`k`.`refUIDId` = `css`.`id`)  \n" +
				"            AND (`k`.`STATUS` = 'A'))))  \n" +
				"        WHERE  \n" +
				"            ((`css`.`isinStk` = 1)  \n" +
				"                AND (`css`.`isDeleted` = 0))  \n" +
				"        GROUP BY `css`.`id`) `b` ON ((`a`.`id` = `b`.`id`)))  \n" +
				"    WHERE  \n" +
				"        ((`a`.`isDeleted` = 0)  \n" +
				"            AND ((`a`.`pkgUnit` - IFNULL(`b`.`allocatedUnit`, 0)) > 0))  \n" +
				"    UNION ALL SELECT  \n" +
				"        0 AS `id`,  \n" +
				"        '-' AS `uid`,  \n" +
				"        `c`.`id` AS `id`,  \n" +
				"        `c`.`noOfPosition` AS `noOfPosition`,  \n" +
				"        `c`.`connecterTypeID` AS `connecterTypeID`,  \n" +
				"        (IFNULL(`vu`.`BalanceQty`, 1) * IFNULL(`c`.`unit`, 1)) AS `PkgUnit`,  \n" +
				"        0 AS `allocatedunit`,  \n" +
				"        (IFNULL(`vu`.`BalanceQty`, 1) * IFNULL(`c`.`unit`, 1)) AS `availableStock`,  \n" +
				"        `c`.`unit` AS `unit`,  \n" +
				"        `c`.`uom` AS `uom`,  \n" +
				"        NULL AS `receiveMaterialType`,  \n" +
				"        NULL AS `customerID`,  \n" +
				"        0 AS `customerConsign`  \n" +
				"    FROM  \n" +
				"        (`vu_umid_creation_pending` `vu`  \n" +
				"        JOIN `vu_component_mpn` `c` ON ((`c`.`id` = `vu`.`PartId`)))  \n" +
				"    WHERE  \n" +
				"        (`vu`.`BalanceQty` > 0);  \n" +
				/* **************************** Add Script Version -> 23-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_material_consumption_scrapped_det` ;  \n" +
				"CREATE VIEW `vu_material_consumption_scrapped_det` AS  \n" +
				"    SELECT  \n" +
				"        `a`.`id` AS `kitallocationId`,  \n" +
				"        `sdm`.`id` AS `refSalesOrderId`,  \n" +
				"        `sdm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
				"        `sdm`.`soDate` AS `sodate`,  \n" +
				"        `sdm`.`poNumber` AS `ponumber`,  \n" +
				"        `sdm`.`revision` AS `revision`,  \n" +
				"        `sdd`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
				"        `sdd`.`kitNumber` AS `kitNumber`,  \n" +
				"        `sdd`.`kitQty` AS `kitQty`,  \n" +
				"        `cassy`.`id` AS `assypartid`,  \n" +
				"        `cassy`.`mfgPN` AS `assyPN`,  \n" +
				"        `cassy`.`mfgcodeID` AS `custid`,  \n" +
				"        `cassy`.`PIDCode` AS `AssyID`,  \n" +
				"        `cassy`.`nickName` AS `nickName`,  \n" +
				"        `b`.`id` AS `id`,  \n" +
				"        `b`.`mfgPN` AS `mfgPN`,  \n" +
				"        `b`.`mfgcodeID` AS `mfgcodeID`,  \n" +
				"        `b`.`PIDCode` AS `PIDCode`,  \n" +
				"        `b`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
				"        `b`.`mountingTypeID` AS `mountingTypeID`,  \n" +
				"        `b`.`functionalCategoryID` AS `functionalCategoryID`,  \n" +
				"        `css`.`id` AS `umidid`,  \n" +
				"        `css`.`uid` AS `umid`,  \n" +
				"        `css`.`costCategoryID` AS `costcategoryid`,  \n" +
				"        `css`.`packaging` AS `packaging`,  \n" +
				"        `css`.`orgPkgUnit` AS `orgPkgUnit`,  \n" +
				"        `a`.`STATUS` AS `status`,  \n" +
				"        `a`.`returnDate` AS `returndate`,  \n" +
				"        IFNULL(`a`.`allocatedQty`, 0) AS `allocatedqty`,  \n" +
				"        IFNULL(`a`.`allocatedUnit`, 0) AS `allocatedunit`,  \n" +
				"        `a`.`allocatedUOM` AS `allocateduom`,  \n" +
				"        IFNULL(`a`.`consumeQty`, 0) AS `consumeqty`,  \n" +
				"        IFNULL(`a`.`consumeUnit`, 0) AS `consumeunit`,  \n" +
				"        IFNULL(`a`.`scrapExpiredQty`, 0) AS `scrapExpiredqty`,  \n" +
				"        IFNULL(`a`.`scrapExpiredUnit`, 0) AS `scrapExpiredunit`,  \n" +
				"        `a`.`scrapExpiredUOM` AS `scrapexpireduom`,  \n" +
				"        `a`.`componentSIDStockHistoryID` AS `componentSIDStockHistoryID`,  \n" +
				"        ((CASE  \n" +
				"            WHEN ((IFNULL(`a`.`consumeQty`, 0) - IFNULL(`a`.`allocatedQty`, 0)) < 0) THEN 0  \n" +
				"            ELSE (IFNULL(`a`.`consumeQty`, 0) - IFNULL(`a`.`allocatedQty`, 0))  \n" +
				"        END) + IFNULL(`a`.`scrapExpiredQty`, 0)) AS `scrappedQty`,  \n" +
				"        ((CASE  \n" +
				"            WHEN ((IFNULL(`a`.`consumeUnit`, 0) - IFNULL(`a`.`allocatedUnit`, 0)) < 0) THEN 0  \n" +
				"            ELSE (IFNULL(`a`.`consumeUnit`, 0) - IFNULL(`a`.`allocatedUnit`, 0))  \n" +
				"        END) + IFNULL(`a`.`scrapExpiredUnit`, 0)) AS `scrappedunit`  \n" +
				"    FROM  \n" +
				"        (((((`kit_allocation` `a`  \n" +
				"        JOIN `component_sid_stock` `css` ON ((`a`.`refUIDId` = `css`.`id`)))  \n" +
				"        JOIN `vu_component_mpn` `b` ON ((`css`.`refcompid` = `b`.`id`)))  \n" +
				"        JOIN `component` `cassy` ON ((`a`.`assyID` = `cassy`.`id`)))  \n" +
				"        JOIN `salesorderdet` `sdd` ON ((`a`.`refSalesOrderDetID` = `sdd`.`id`)))  \n" +
				"        JOIN `salesordermst` `sdm` ON ((`sdd`.`refSalesOrderID` = `sdm`.`id`)))  \n" +
				"    WHERE  \n" +
				"        ((`a`.`STATUS` = 'R')  \n" +
				"            AND (`css`.`isDeleted` = 0));  \n" +
				/* **************************** Add Script Version -> 23-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_plan_kit_report` ;  \n" +
				"CREATE VIEW `vu_plan_kit_report` AS select `k`.`id` AS `id`,`k`.`plannKitNumber` AS `plannKitNumber`,`k`.`salesOrderDetID` AS `salesOrderDetID`,`k`.`salesOrderNumber` AS `salesOrderNumber`,`k`.`poNumber` AS `poNumber`,`k`.`refAssyId` AS `refAssyId`,`k`.`assyPIDCode` AS `assyPIDCode`,`k`.`assyNickName` AS `assyNickName`,`k`.`assyMFRPN` AS `assyMFRPN`,`k`.`subAssyID` AS `subAssyID`,`k`.`subAssyPIDCode` AS `subAssyPIDCode`,`k`.`subAssyNickName` AS `subAssyNickName`,`k`.`subAssyMFRPN` AS `subAssyMFRPN`,`k`.`poQty` AS `poQty`,`k`.`mrpQty` AS `mrpQty`,`k`.`kitQty` AS `kitQty`,`k`.`kitNumber` AS `kitNumber`,`k`.`planPOQty` AS `planPOQty`,`k`.`kitReleaseQty` AS `kitReleaseQty`,`k`.`poDueDate` AS `poDueDate`,`k`.`mfrLeadTime` AS `mfrLeadTime`,`k`.`kitReleaseDate` AS `kitReleaseDate`,`k`.`materialDockDate` AS `materialDockDate`,`k`.`releaseKitNumber` AS `releaseKitNumber`,`k`.`actualKitReleaseDate` AS `actualKitReleaseDate`,`k`.`releasedBy` AS `releasedBy`,`k`.`releasedByName` AS `releasedByName`,`k`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,`k`.`woID` AS `woID`,`k`.`workorderNumber` AS `workorderNumber`,`k`.`releasedNote` AS `releasedNote`,`k`.`kitStatus` AS `kitStatus`,`k`.`kitReturnStatus` AS `kitReturnStatus`,`k`.`kitReturnDate` AS `kitReturnDate`,`k`.`refPlanId` AS `refPlanId`,`k`.`totalPlanKitQty` AS `totalPlanKitQty`,`k`.`kitFeasibility` AS `kitFeasibility`,`k`.`perJobShortage` AS `perJobShortage`,(case when (`k`.`totalPlanKitQty` > `k`.`kitFeasibility`) then (case when ((`k`.`kitReleaseQty` - (`k`.`totalPlanKitQty` - `k`.`kitFeasibility`)) > 0) then (`k`.`kitReleaseQty` - (`k`.`totalPlanKitQty` - `k`.`kitFeasibility`)) else 0 end) else `k`.`kitReleaseQty` end) AS `buildFeasibilityRealTime`,(case when (`k`.`totalPlanKitQty` > `k`.`kitFeasibility`) then (case when ((`k`.`kitReleaseQty` - (`k`.`totalPlanKitQty` - `k`.`kitFeasibility`)) > 0) then (`k`.`kitReleaseQty` - (`k`.`kitReleaseQty` - (`k`.`totalPlanKitQty` - `k`.`kitFeasibility`))) else `k`.`kitReleaseQty` end) else (`k`.`kitReleaseQty` - `k`.`kitReleaseQty`) end) AS `shortageQty` from (select `a`.`id` AS `id`,`a`.`plannKitNumber` AS `plannKitNumber`,`a`.`salesOrderDetID` AS `salesOrderDetID`,`s`.`salesOrderNumber` AS `salesOrderNumber`,`s`.`poNumber` AS `poNumber`,`a`.`refAssyId` AS `refAssyId`,`c`.`PIDCode` AS `assyPIDCode`,`c`.`nickName` AS `assyNickName`,`c`.`mfgPN` AS `assyMFRPN`,`a`.`subAssyID` AS `subAssyID`,`sc`.`PIDCode` AS `subAssyPIDCode`,`sc`.`nickName` AS `subAssyNickName`,`sc`.`mfgPN` AS `subAssyMFRPN`,`sd`.`qty` AS `poQty`,`sd`.`mrpQty` AS `mrpQty`,`sd`.`kitQty` AS `kitQty`,(case when (`a`.`subAssyID` is not null) then concat(`sd`.`kitNumber`,'+',`sc`.`PIDCode`) else `sd`.`kitNumber` end) AS `kitNumber`,`a`.`planPOQty` AS `planPOQty`,`a`.`kitReleaseQty` AS `kitReleaseQty`,`a`.`poDueDate` AS `poDueDate`,`a`.`mfrLeadTime` AS `mfrLeadTime`,`a`.`kitReleaseDate` AS `kitReleaseDate`,`a`.`materialDockDate` AS `materialDockDate`,`a`.`releaseKitNumber` AS `releaseKitNumber`,`a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,`a`.`releasedBy` AS `releasedBy`,`FUN_GETUSERNAMEBYID`(`a`.`releasedBy`) AS `releasedByName`,`a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,`a`.`woID` AS `woID`,`FUN_GETWORKORDERNUMBERBYID`(`a`.`woID`) AS `workorderNumber`,`a`.`releasedNote` AS `releasedNote`,(case when (`a`.`kitStatus` = 'R') then 'Released' when (`a`.`kitStatus` = 'P') then 'In Progress' else '-' end) AS `kitStatus`,(case when (`a`.`kitReturnStatus` is not null) then `a`.`kitReturnStatus` when (`a`.`kitStatus` = 'R') then 'NR' else 'NA' end) AS `kitReturnStatus`,`a`.`kitReturnDate` AS `kitReturnDate`,`a`.`refPlanId` AS `refPlanId`,`a`.`totalPlanKitQty` AS `totalPlanKitQty`,`FUN_GETTOTALKITFEASIBILITY`(`a`.`salesOrderDetID`,ifnull(`a`.`subAssyID`,`a`.`refAssyId`)) AS `kitFeasibility`,`FUN_GETTOTALSHORTAGELINEOFPLANFORREPORT`(`a`.`salesOrderDetID`,ifnull(`a`.`subAssyID`,`a`.`refAssyId`),`a`.`totalPlanKitQty`) AS `perJobShortage` from (((((select `s`.`id` AS `id`,`s`.`plannKitNumber` AS `plannKitNumber`,`s`.`salesOrderDetID` AS `salesOrderDetID`,`s`.`refAssyId` AS `refAssyId`,`s`.`subAssyID` AS `subAssyID`,`s`.`poQty` AS `planPOQty`,`s`.`kitReleaseQty` AS `kitReleaseQty`,`s`.`poDueDate` AS `poDueDate`,`s`.`mfrLeadTime` AS `mfrLeadTime`,`s`.`kitReleaseDate` AS `kitReleaseDate`,`s`.`materialDockDate` AS `materialDockDate`,`s`.`releaseKitNumber` AS `releaseKitNumber`,`s`.`actualKitReleaseDate` AS `actualKitReleaseDate`,`s`.`releasedBy` AS `releasedBy`,`s`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,`s`.`woID` AS `woID`,`s`.`releasedNote` AS `releasedNote`,`s`.`kitStatus` AS `kitStatus`,`s`.`kitReturnStatus` AS `kitReturnStatus`,`s`.`kitReturnDate` AS `kitReturnDate`,`s`.`refPlanId` AS `refPlanId`,sum(`s`.`kitReleaseQty`) OVER (PARTITION BY `s`.`salesOrderDetID` ORDER BY `s`.`plannKitNumber` )  AS `totalPlanKitQty` from `salesorder_plan_detailsmst` `s` where (`s`.`isDeleted` = 0) union all select `s`.`id` AS `id`,`s`.`plannKitNumber` AS `plannKitNumber`,`s`.`salesOrderDetID` AS `salesOrderDetID`,`s`.`refAssyId` AS `refAssyId`,`kassy`.`partId` AS `subAssyID`,(`kassy`.`perAssyBuildQty` * `s`.`poQty`) AS `planPOQty`,(`kassy`.`perAssyBuildQty` * `s`.`kitReleaseQty`) AS `kitReleaseQty`,`s`.`poDueDate` AS `poDueDate`,`s`.`mfrLeadTime` AS `mfrLeadTime`,`s`.`kitReleaseDate` AS `kitReleaseDate`,`s`.`materialDockDate` AS `materialDockDate`,(case when (`kassy`.`partId` = `s`.`subAssyID`) then `s`.`releaseKitNumber` else NULL end) AS `releaseKitNumber`,(case when (`kassy`.`partId` = `s`.`subAssyID`) then `s`.`actualKitReleaseDate` else NULL end) AS `actualKitReleaseDate`,(case when (`kassy`.`partId` = `s`.`subAssyID`) then `s`.`releasedBy` else NULL end) AS `releasedBy`,(case when (`kassy`.`partId` = `s`.`subAssyID`) then `s`.`releaseTimeFeasibility` else NULL end) AS `releaseTimeFeasibility`,(case when (`kassy`.`partId` = `s`.`subAssyID`) then `s`.`woID` else NULL end) AS `woID`,(case when (`kassy`.`partId` = `s`.`subAssyID`) then `s`.`releasedNote` else NULL end) AS `releasedNote`,(case when (`kassy`.`partId` = `s`.`subAssyID`) then `s`.`kitStatus` else 'P' end) AS `kitStatus`,(case when (`kassy`.`partId` = `s`.`subAssyID`) then `s`.`kitReturnStatus` else NULL end) AS `kitReturnStatus`,(case when (`kassy`.`partId` = `s`.`subAssyID`) then `s`.`kitReturnDate` else NULL end) AS `kitReturnDate`,`s`.`refPlanId` AS `refPlanId`,sum((`kassy`.`perAssyBuildQty` * `s`.`kitReleaseQty`)) OVER (PARTITION BY `s`.`salesOrderDetID` ORDER BY `s`.`plannKitNumber` )  AS `totalPlanKitQty` from (`kit_allocation_assy_detail` `kassy` left join `salesorder_plan_detailsmst` `s` on(((`s`.`salesOrderDetID` = `kassy`.`refSalesOrderDetID`) and (`s`.`subAssyID` is null)))) where ((`kassy`.`isDeleted` = 0) and (`kassy`.`bomAssyLevel` = 1) and exists(select 'Y' from `salesorder_plan_detailsmst` `sp` where ((`sp`.`isDeleted` = 0) and (`sp`.`refPlanId` = `s`.`id`) and (`kassy`.`partId` = `sp`.`subAssyID`))) is false)) `a` join `salesorderdet` `sd` on(((`a`.`salesOrderDetID` = `sd`.`id`) and (`sd`.`partCategory` = 3)))) join `salesordermst` `s` on((`sd`.`refSalesOrderID` = `s`.`id`))) join `component` `c` on((`a`.`refAssyId` = `c`.`id`))) left join `component` `sc` on((`a`.`subAssyID` = `sc`.`id`))) where ((`a`.`salesOrderDetID` is not null) and  (`a`.`refAssyId` is not null)) order by `a`.`salesOrderDetID`,`a`.`refAssyId`,`a`.`subAssyID`) `k`;  \n" +
				/* **************************** Add Script Version -> 23-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_kit_plan_release_status_report` ;  \n" +
				"CREATE VIEW `vu_kit_plan_release_status_report` AS  \n" +
				"    SELECT  \n" +
				"        `a`.`id` AS `id`,  \n" +
				"        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
				"        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
				"        `s`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
				"        `s`.`poNumber` AS `poNumber`,  \n" +
				"        `a`.`refAssyId` AS `refAssyId`,  \n" +
				"        `c`.`PIDCode` AS `assyPIDCode`,  \n" +
				"        `c`.`nickName` AS `assyNickName`,  \n" +
				"        `c`.`mfgPN` AS `assyMFRPN`,  \n" +
				"        `a`.`subAssyID` AS `subAssyID`,  \n" +
				"        `sc`.`PIDCode` AS `subAssyPIDCode`,  \n" +
				"        `sc`.`nickName` AS `subAssyNickName`,  \n" +
				"        `sc`.`mfgPN` AS `subAssyMFRPN`,  \n" +
				"        `sd`.`qty` AS `poQty`,  \n" +
				"        `sd`.`mrpQty` AS `mrpQty`,  \n" +
				"        `sd`.`kitQty` AS `kitQty`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`a`.`subAssyID` IS NOT NULL) THEN CONCAT(`sd`.`kitNumber`, '+', `sc`.`PIDCode`)  \n" +
				"            ELSE `sd`.`kitNumber`  \n" +
				"        END) AS `kitNumber`,  \n" +
				"        `a`.`planPOQty` AS `planPOQty`,  \n" +
				"        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
				"        `a`.`poDueDate` AS `poDueDate`,  \n" +
				"        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
				"        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
				"        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
				"        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
				"        `a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
				"        `a`.`releasedBy` AS `releasedBy`,  \n" +
				"        `a`.`kitReturnBy` AS `kitReturnBy`,  \n" +
				"        FUN_GETUSERNAMEBYID(`a`.`kitReturnBy`) AS `kitReturnByName`,  \n" +
				"        FUN_GETUSERNAMEBYID(`a`.`releasedBy`) AS `releasedByName`,  \n" +
				"        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
				"        `a`.`woID` AS `woID`,  \n" +
				"        FUN_GETWORKORDERNUMBERBYID(`a`.`woID`) AS `workorderNumber`,  \n" +
				"        `a`.`releasedNote` AS `releasedNote`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`a`.`kitStatus` = 'R') THEN 'Released'  \n" +
				"            WHEN (`a`.`kitStatus` = 'P') THEN 'In Progress'  \n" +
				"            ELSE '-'  \n" +
				"        END) AS `kitStatus`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN `a`.`kitReturnStatus`  \n" +
				"            WHEN (`a`.`kitStatus` = 'R') THEN 'NR'  \n" +
				"            ELSE 'NA'  \n" +
				"        END) AS `kitReturnStatus`,  \n" +
				"        `a`.`kitReturnDate` AS `kitReturnDate`,  \n" +
				"        `a`.`refPlanId` AS `refPlanId`  \n" +
				"    FROM  \n" +
				"        (((((SELECT  \n" +
				"            `s`.`id` AS `id`,  \n" +
				"                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
				"                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
				"                `s`.`refAssyId` AS `refAssyId`,  \n" +
				"                `s`.`subAssyID` AS `subAssyID`,  \n" +
				"                `s`.`poQty` AS `planPOQty`,  \n" +
				"                `s`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
				"                `s`.`poDueDate` AS `poDueDate`,  \n" +
				"                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
				"                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
				"                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
				"                `s`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
				"                `s`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
				"                `s`.`releasedBy` AS `releasedBy`,  \n" +
				"                `s`.`kitReturnBy` AS `kitReturnBy`,  \n" +
				"                `s`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
				"                `s`.`woID` AS `woID`,  \n" +
				"                `s`.`releasedNote` AS `releasedNote`,  \n" +
				"                `s`.`kitStatus` AS `kitStatus`,  \n" +
				"                `s`.`kitReturnStatus` AS `kitReturnStatus`,  \n" +
				"                `s`.`kitReturnDate` AS `kitReturnDate`,  \n" +
				"                `s`.`refPlanId` AS `refPlanId`  \n" +
				"        FROM  \n" +
				"            `salesorder_plan_detailsmst` `s`  \n" +
				"        WHERE  \n" +
				"            (`s`.`isDeleted` = 0) UNION ALL SELECT  \n" +
				"            `s`.`id` AS `id`,  \n" +
				"                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
				"                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
				"                `s`.`refAssyId` AS `refAssyId`,  \n" +
				"                `kassy`.`partId` AS `subAssyID`,  \n" +
				"                (`kassy`.`perAssyBuildQty` * `s`.`poQty`) AS `planPOQty`,  \n" +
				"                (`kassy`.`perAssyBuildQty` * `s`.`kitReleaseQty`) AS `kitReleaseQty`,  \n" +
				"                `s`.`poDueDate` AS `poDueDate`,  \n" +
				"                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
				"                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
				"                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseKitNumber`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `releaseKitNumber`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`actualKitReleaseDate`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `actualKitReleaseDate`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedBy`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `releasedBy`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnBy`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `kitReturnBy`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseTimeFeasibility`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `releaseTimeFeasibility`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`woID`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `woID`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedNote`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `releasedNote`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitStatus`  \n" +
				"                    ELSE 'P'  \n" +
				"                END) AS `kitStatus`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnStatus`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `kitReturnStatus`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnDate`  \n" +
				"                    ELSE NULL  \n" +
				"                END) AS `kitReturnDate`,  \n" +
				"                `s`.`refPlanId` AS `refPlanId`  \n" +
				"        FROM  \n" +
				"            (`kit_allocation_assy_detail` `kassy`  \n" +
				"        LEFT JOIN `salesorder_plan_detailsmst` `s` ON (((`s`.`salesOrderDetID` = `kassy`.`refSalesOrderDetID`)  \n" +
				"            AND (`s`.`subAssyID` IS NULL))))  \n" +
				"        WHERE  \n" +
				"            ((`kassy`.`isDeleted` = 0)  \n" +
				"                AND (`kassy`.`bomAssyLevel` = 1)  \n" +
				"                AND EXISTS( SELECT  \n" +
				"                    'Y'  \n" +
				"                FROM  \n" +
				"                    `salesorder_plan_detailsmst` `sp`  \n" +
				"                WHERE  \n" +
				"                    ((`sp`.`isDeleted` = 0)  \n" +
				"                        AND (`sp`.`refPlanId` = `s`.`id`)  \n" +
				"                        AND (`kassy`.`partId` = `sp`.`subAssyID`)))  \n" +
				"                IS FALSE)) `a`  \n" +
				"        JOIN `salesorderdet` `sd` ON (((`a`.`salesOrderDetID` = `sd`.`id`)  \n" +
				"            AND (`sd`.`partCategory` = 3))))  \n" +
				"        JOIN `salesordermst` `s` ON ((`sd`.`refSalesOrderID` = `s`.`id`)))  \n" +
				"        JOIN `component` `c` ON ((`a`.`refAssyId` = `c`.`id`)))  \n" +
				"        LEFT JOIN `component` `sc` ON ((`a`.`subAssyID` = `sc`.`id`)))  \n" +
				"    WHERE  \n" +
				"        ((`a`.`salesOrderDetID` IS NOT NULL)  \n" +
				"            AND (`a`.`refAssyId` IS NOT NULL))  \n" +
				"    ORDER BY `a`.`salesOrderDetID` , `a`.`refAssyId` , `a`.`subAssyID`;  \n" +
				/* **************************** Add Script Version -> 23-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_kit_feasibility_detail` ;  \n" +
				"CREATE VIEW `vu_kit_feasibility_detail` AS with `temp_getavilablestockwithpackagingalias` as (select `vu_deducted_allocation_available_stock`.`id` AS `id`,`vu_deducted_allocation_available_stock`.`Uid` AS `Uid`,`vu_deducted_allocation_available_stock`.`refcompid` AS `refcompid`,`vu_deducted_allocation_available_stock`.`noOfPosition` AS `noOfPosition`,`vu_deducted_allocation_available_stock`.`connecterTypeID` AS `connecterTypeID`,`vu_deducted_allocation_available_stock`.`pkgunit` AS `pkgunit`,`vu_deducted_allocation_available_stock`.`allocatedunit` AS `allocatedunit`,`vu_deducted_allocation_available_stock`.`Availablestock` AS `Availablestock`,`vu_deducted_allocation_available_stock`.`unit` AS `unit`,`vu_deducted_allocation_available_stock`.`uom` AS `uom`,`vu_deducted_allocation_available_stock`.`receiveMaterialType` AS `receiveMaterialType`,`vu_deducted_allocation_available_stock`.`customerID` AS `customerID`,`vu_deducted_allocation_available_stock`.`customerConsign` AS `customerConsign` from `vu_deducted_allocation_available_stock`) select `e`.`refRfqLineitem` AS `refRfqLineitem`,`e`.`refSalesOrderDetID` AS `refSalesOrderDetID`,`e`.`assyid` AS `assyid`,`e`.`lineID` AS `lineID`,`e`.`totalAssyBuildQty` AS `totalAssyBuildQty`,`e`.`qpawithdnp` AS `qpawithdnp`,`e`.`kitQty` AS `kitQty`,`e`.`reqqty` AS `reqqty`,`e`.`requnits` AS `requnits`,`e`.`allocatedqty` AS `allocatedqty`,`e`.`allocatedunit` AS `allocatedunit`,`e`.`allocatedpin` AS `allocatedpin`,`e`.`shortage` AS `shortage`,`e`.`availableStock` AS `availableStock`,(case when ((`e`.`BOMnumofPosition` is null) or (`e`.`BOMnumofPosition` = 0) or (`e`.`connecterTypeID` <> -(2))) then (ifnull(`e`.`allocatedunit`,0) / ifnull(`e`.`qpawithdnp`,0)) else (`e`.`allocatedPins` / (ifnull(`e`.`qpawithdnp`,0) * ifnull(`e`.`BOMnumofPosition`,0))) end) AS `feasibility`,(case when ((`e`.`BOMnumofPosition` is null) or (`e`.`BOMnumofPosition` = 0) or (`e`.`connecterTypeID` <> -(2))) then ((ifnull(`e`.`allocatedunit`,0) + ifnull(`e`.`availableStock`,0)) / ifnull(`e`.`qpawithdnp`,0)) else ((`e`.`allocatedPins` + ifnull(`e`.`availableStockInPin`,0)) / (ifnull(`e`.`qpawithdnp`,0) * ifnull(`e`.`BOMnumofPosition`,0))) end) AS `feasibilityWithAvailable`,(case when ((`e`.`BOMnumofPosition` is null) or (`e`.`BOMnumofPosition` = 0) or (`e`.`connecterTypeID` <> -(2))) then (case when ((((ifnull(`e`.`allocatedunit`,0) + ifnull(`e`.`availableStock`,0)) / ifnull(`e`.`qpawithdnp`,0)) - ifnull(`e`.`totalAssyBuildQty`,0)) > 0) then 0 else (((ifnull(`e`.`allocatedunit`,0) + ifnull(`e`.`availableStock`,0)) / ifnull(`e`.`qpawithdnp`,0)) - ifnull(`e`.`totalAssyBuildQty`,0)) end) else (case when (((`e`.`allocatedPins` + ifnull(`e`.`availableStockInPin`,0)) / (ifnull(`e`.`qpawithdnp`,0) * ifnull(`e`.`BOMnumofPosition`,0))) > 0) then 0 else ((`e`.`allocatedPins` + ifnull(`e`.`availableStockInPin`,0)) / (ifnull(`e`.`qpawithdnp`,0) * ifnull(`e`.`BOMnumofPosition`,0))) end) end) AS `shortageForAvailable`,`e`.`mountingTypeID` AS `mountingTypeID`,`e`.`approvedmountingtypeID` AS `approvedmountingtypeID`,`e`.`connecterTypeID` AS `connecterTypeID`,`e`.`BOMnumofPosition` AS `BOMnumofPosition` from (select `d`.`refRfqLineitem` AS `refRfqLineitem`,`d`.`refSalesOrderDetID` AS `refSalesOrderDetID`,`d`.`assyid` AS `assyid`,`d`.`lineID` AS `lineID`,`d`.`uomID` AS `uomID`,`d`.`totalAssyBuildQty` AS `totalAssyBuildQty`,`d`.`kitQty` AS `kitQty`,ifnull((`d`.`totalAssyBuildQty` * ifnull(`d`.`qpawithdnp`,0)),0) AS `reqqty`,ifnull((`d`.`totalAssyBuildQty` * ifnull(`d`.`qpawithdnp`,0)),0) AS `requnits`,`d`.`qpawithdnp` AS `qpawithdnp`,`d`.`allocatedqty` AS `allocatedqty`,`d`.`allocatedunit` AS `allocatedunit`,`d`.`allocatedpin` AS `allocatedpin`,`FUN_GETSHORTAGEPERBUILD`(`d`.`qpawithdnp`,`d`.`kitQty`,`d`.`assyid`,`d`.`refSalesOrderDetID`,`d`.`refRfqLineitem`) AS `shortage`,(select sum(ifnull((case when (`temp_getavilablestockwithpackagingalias`.`uom` = `d`.`uomID`) then `temp_getavilablestockwithpackagingalias`.`Availablestock` else `fun_convertUOM`(`temp_getavilablestockwithpackagingalias`.`uom`,`d`.`uomID`,ifnull(`temp_getavilablestockwithpackagingalias`.`Availablestock`,0)) end),0)) from `temp_getavilablestockwithpackagingalias` where (0 <> find_in_set(`temp_getavilablestockwithpackagingalias`.`refcompid`,`d`.`mfgPNIDs`))) AS `availableStock`,(case when (`d`.`connecterTypeID` = -(2)) then (select sum(((floor((ifnull(`temp_getavilablestockwithpackagingalias`.`noOfPosition`,0) / ifnull(`d`.`bomnumofPosition`,0))) * ifnull(`d`.`bomnumofPosition`,0)) * ifnull(`temp_getavilablestockwithpackagingalias`.`Availablestock`,0))) from `temp_getavilablestockwithpackagingalias` where (0 <> find_in_set(`temp_getavilablestockwithpackagingalias`.`refcompid`,`d`.`mfgPNIDs`))) else 0 end) AS `availableStockInPin`,`d`.`mountingTypeID` AS `mountingTypeID`,`d`.`approvedmountingtypeID` AS `approvedmountingtypeID`,`d`.`connecterTypeID` AS `connecterTypeID`,`d`.`bomnumofPosition` AS `BOMnumofPosition`,(case when (`d`.`connecterTypeID` = -(2)) then `FUN_GETKITALLOCATEDPIN`(`d`.`assyid`,`d`.`refSalesOrderDetID`,`d`.`refRfqLineitem`,NULL,`d`.`bomnumofPosition`,false) else 0 end) AS `allocatedPins` from (select `a`.`refRfqLineitem` AS `refRfqLineitem`,`a`.`refSalesOrderDetID` AS `refSalesOrderDetID`,`a`.`assyid` AS `assyid`,`a`.`lineID` AS `lineID`,`a`.`uomID` AS `uomID`,`a`.`totalAssyBuildQty` AS `totalAssyBuildQty`,`a`.`kitQty` AS `kitQty`,`a`.`qpawithdnp` AS `qpawithdnp`,`c`.`allocatedqty` AS `allocatedqty`,`c`.`allocatedunit` AS `allocatedunit`,`c`.`allocatedpin` AS `allocatedpin`,`ka`.`mountingTypeID` AS `mountingTypeID`,`ka`.`approvedmountingtypeID` AS `approvedmountingtypeID`,`ka`.`connecterTypeID` AS `connecterTypeID`,`a`.`bomnumofPosition` AS `bomnumofPosition`,concat_ws(',',group_concat(distinct `ka`.`packingAliasParts` separator ','),group_concat(distinct `a`.`custPNID` separator ',')) AS `mfgPNIDs` from (((select `b`.`refRfqLineitem` AS `refRfqLineitem`,`b`.`refSalesOrderDetID` AS `refSalesOrderDetID`,`b`.`partID` AS `assyid`,`b`.`lineID` AS `lineID`,`b`.`uomID` AS `uomID`,`b`.`custPNID` AS `custPNID`,`b`.`numOfPosition` AS `bomnumofPosition`,`a`.`totalAssyBuildQty` AS `totalAssyBuildQty`,`a`.`kitQty` AS `kitQty`,(case when ((`b`.`isPurchase` = 1) or (`b`.`isInstall` = 1)) then (ifnull(`b`.`qpa`,0) + if(((`b`.`isBuyDNPQty` = 'Y') or (`b`.`isBuyDNPQty` = 'C')),ifnull(`b`.`dnpQty`,0),0)) else if(((`b`.`isBuyDNPQty` = 'Y') or (`b`.`isBuyDNPQty` = 'C')),ifnull(`b`.`dnpQty`,0),0) end) AS `qpawithdnp` from (`kit_allocation_assy_detail` `a` join `kit_allocation_lineitems` `b` on(((`a`.`refSalesOrderDetID` = `b`.`refSalesOrderDetID`) and (`a`.`partId` = `b`.`partID`) and (`b`.`isNotRequiredKitAllocation` <> 1) and (`b`.`isDeleted` = 0))))) `a` left join (select `ka`.`refSalesOrderDetID` AS `refSalesOrderDetID`,`ka`.`refRfqLineitem` AS `refRfqLineitem`,(case when (max(`cp`.`mountingTypeID`) = min(`cp`.`mountingTypeID`)) then min(`cp`.`mountingTypeID`) else -(2) end) AS `mountingTypeID`,max((case when ((`ka`.`mismatchMountingTypeStep` = 1) and (`ka`.`approvedMountingType` = 1)) then `cp`.`mountingTypeID` else NULL end)) AS `approvedmountingtypeID`,min(`cp`.`connecterTypeID`) AS `connecterTypeID`,min(`cp`.`noOfRows`) AS `noOfRows`,`vcp`.`packingAliasParts` AS `packingAliasParts` from ((`kit_allocation_lineitems_alternatepart` `ka` left join `component_attributes` `cp` on((`ka`.`mfgPNID` = `cp`.`refComponentID`))) left join `vu_component_packingalias` `vcp` on((`ka`.`mfgPNID` = `vcp`.`refComponentID`))) group by `ka`.`refSalesOrderDetID`,`ka`.`refRfqLineitem`,`vcp`.`packingAliasParts`) `ka` on(((`a`.`refSalesOrderDetID` = `ka`.`refSalesOrderDetID`) and (`a`.`refRfqLineitem` = `ka`.`refRfqLineitem`)))) left join (select `ka`.`refSalesOrderDetID` AS `refsalesorderdetid`,`ka`.`assyID` AS `assyid`,`ka`.`refBOMLineID` AS `refbomlineid`,sum((case when (`ka`.`STATUS` = 'R') then `ka`.`consumeQty` when (`ka`.`STATUS` = 'D') then 0 else `ka`.`allocatedQty` end)) AS `allocatedqty`,sum((case when (`ka`.`STATUS` = 'R') then `ka`.`consumeUnit` when (`ka`.`STATUS` = 'D') then 0 else `ka`.`allocatedUnit` end)) AS `allocatedunit`,sum((case when (`cp`.`connecterTypeID` = -(2)) then (case when (`ka`.`STATUS` = 'R') then ((ifnull(`ka`.`consumeUnit`,0) * ifnull(`cp`.`noOfPosition`,0)) / (case when (ifnull(`cp`.`noOfRows`,0) > 1) then `cp`.`noOfRows` else 1 end)) when (`ka`.`STATUS` = 'D') then 0 else (ifnull(`ka`.`allocatedUnit`,0) * ifnull(`cp`.`noOfPosition`,0)) end) else 0 end)) AS `allocatedpin` from (`kit_allocation` `ka` join `component` `cp` on((`ka`.`partId` = `cp`.`id`))) group by `ka`.`refSalesOrderDetID`,`ka`.`assyID`,`ka`.`refBOMLineID`) `c` on(((`a`.`refSalesOrderDetID` = `c`.`refsalesorderdetid`) and (`a`.`refRfqLineitem` = `c`.`refbomlineid`) and (`a`.`assyid` = `c`.`assyid`)))) group by `a`.`refRfqLineitem`,`a`.`refSalesOrderDetID`,`a`.`assyid`,`a`.`lineID`,`a`.`uomID`,`a`.`totalAssyBuildQty`,`a`.`kitQty`,`a`.`qpawithdnp`,`c`.`allocatedqty`,`c`.`allocatedunit`,`c`.`allocatedpin`,`ka`.`mountingTypeID`,`ka`.`approvedmountingtypeID`, `ka`.`connecterTypeID`,`a`.`bomnumofPosition`) `d`) `e`;  \n" +
				/* **************************** Add Script Version -> 23-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_kit_allocation_summary` ;  \n" +
				"CREATE VIEW `vu_kit_allocation_summary` AS  \n" +
				"    SELECT  \n" +
				"        `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"        `k`.`assyID` AS `assyID`,  \n" +
				"        `k`.`refMongoTrnsID` AS `refMongoTrnsID`,  \n" +
				"        `k`.`refBOMLineID` AS `refBOMLineID`,  \n" +
				"        `k`.`allocatedUOM` AS `allocatedUOM`,  \n" +
				"        SUM(`k`.`allocatedQty`) AS `allocatedQty`,  \n" +
				"        SUM(`k`.`allocatedUnit`) AS `allocatedUnit`,  \n" +
				"        SUM(`k`.`allocatedPin`) AS `allocatedPins`,  \n" +
				"        SUM(`k`.`consumeQty`) AS `consumeQty`,  \n" +
				"        SUM(`k`.`consumeUnit`) AS `consumeUnits`,  \n" +
				"        SUM(`k`.`consumePin`) AS `consumePin`,  \n" +
				"        SUM(`k`.`scrapedPin`) AS `scrapedPins`,  \n" +
				"        SUM(`k`.`convertedallocatedSTKPositionUnits`) AS `allocatedSTKPosition`,  \n" +
				"        SUM(`k`.`allocated_shared`) AS `allocated_shared`  \n" +
				"    FROM  \n" +
				"        (SELECT  \n" +
				"            `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"                `k`.`assyID` AS `assyID`,  \n" +
				"                `k`.`refBOMLineID` AS `refBOMLineID`,  \n" +
				"                `k`.`partId` AS `partId`,  \n" +
				"                `kal`.`refMongoTrnsID` AS `refMongoTrnsID`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`k`.`STATUS` = 'A') THEN `k`.`allocatedQty`  \n" +
				"                    ELSE 0  \n" +
				"                END) AS `allocatedQty`,  \n" +
				"                (CASE  \n" +
				"                    WHEN (`k`.`STATUS` = 'A') THEN FUN_CONVERTUOM(`k`.`allocatedUOM`, `kal`.`uomID`, `k`.`allocatedUnit`)  \n" +
				"                    ELSE 0  \n" +
				"                END) AS `allocatedUnit`,  \n" +
				"                `kal`.`uomID` AS `allocatedUOM`,  \n" +
				"                IFNULL(`k`.`consumeQty`, 0) AS `consumeQty`,  \n" +
				"                FUN_CONVERTUOM(`k`.`consumeUOM`, `kal`.`uomID`, IFNULL(`k`.`consumeUnit`, 0)) AS `consumeUnit`,  \n" +
				"                `k`.`consumeUOM` AS `consumeUOM`,  \n" +
				"                FUN_CONVERTUOM(`cs`.`uom`, `kal`.`uomID`, `cs`.`pkgUnit`) AS `convertedallocatedSTKPositionUnits`,  \n" +
				"                `shared`.`allocated_shared` AS `allocated_shared`,  \n" +
				"                (CASE  \n" +
				"                    WHEN  \n" +
				"                        ((`k`.`STATUS` = 'A')  \n" +
				"                            AND (`c`.`connecterTypeID` = -(2)))  \n" +
				"                    THEN  \n" +
				"                        ((FLOOR((IFNULL(`c`.`noOfPosition`, 0) / IFNULL(`kal`.`numOfPosition`, 0))) * IFNULL(`kal`.`numOfPosition`, 0)) * IFNULL(`k`.`allocatedUnit`, 0))  \n" +
				"                    ELSE 0  \n" +
				"                END) AS `allocatedPin`,  \n" +
				"                (CASE  \n" +
				"                    WHEN  \n" +
				"                        ((`k`.`STATUS` = 'R')  \n" +
				"                            AND (`c`.`connecterTypeID` = -(2)))  \n" +
				"                    THEN  \n" +
				"                        ((FLOOR((IFNULL(`c`.`noOfPosition`, 0) / IFNULL(`kal`.`numOfPosition`, 0))) * IFNULL(`kal`.`numOfPosition`, 0)) * IFNULL(`k`.`consumeUnit`, 0))  \n" +
				"                    ELSE 0  \n" +
				"                END) AS `consumePin`,  \n" +
				"                (CASE  \n" +
				"                    WHEN  \n" +
				"                        ((`k`.`STATUS` = 'A')  \n" +
				"                            AND (`c`.`connecterTypeID` = -(2)))  \n" +
				"                    THEN  \n" +
				"                        (FLOOR((`c`.`noOfPosition` % IFNULL(`kal`.`numOfPosition`, 0))) * IFNULL(`k`.`allocatedUnit`, 0))  \n" +
				"                    ELSE 0  \n" +
				"                END) AS `scrapedPin`  \n" +
				"        FROM  \n" +
				"            ((((`kit_allocation` `k`  \n" +
				"        LEFT JOIN `component_attributes` `c` ON ((`k`.`partId` = `c`.`refComponentID`)))  \n" +
				"        JOIN `kit_allocation_lineitems` `kal` ON (((`k`.`refSalesOrderDetID` = `kal`.`refSalesOrderDetID`)  \n" +
				"            AND (`k`.`assyID` = `kal`.`partID`)  \n" +
				"            AND (`k`.`refBOMLineID` = `kal`.`refRfqLineitem`))))  \n" +
				"        LEFT JOIN `component_sid_stock` `cs` ON ((`cs`.`id` = `k`.`refUIDId`)))  \n" +
				"        LEFT JOIN `vu_umid_allocatedtoshared` `shared` ON ((`k`.`id` = `shared`.`id`)))  \n" +
				"        WHERE  \n" +
				"            ((`c`.`isDeleted` = 0)  \n" +
				"                AND (`kal`.`isDeleted` = 0)  \n" +
				"                AND (`k`.`STATUS` <> 'D'))) `k`  \n" +
				"    GROUP BY `k`.`refSalesOrderDetID` , `k`.`assyID` , `k`.`refBOMLineID` , `k`.`allocatedUOM` , `k`.`refMongoTrnsID`;  \n" +
				/* **************************** Add Script Version -> 23-03-2022 *********************************** */
				"DROP VIEW IF EXISTS `vu_kit_allocation_detail` ;  \n" +
				"CREATE VIEW `vu_kit_allocation_detail` AS  \n" +
				"    SELECT  \n" +
				"        `k`.`refSalesorderdetid` AS `refSalesorderdetid`,  \n" +
				"        `k`.`assyID` AS `assyID`,  \n" +
				"        `k`.`lineID` AS `lineID`,  \n" +
				"        `k`.`totalAssyBuildQty` AS `totalAssyBuildQty`,  \n" +
				"        `k`.`kitQty` AS `kitQty`,  \n" +
				"        `k`.`mrpQty` AS `mrpQty`,  \n" +
				"        `k`.`refRfqLineitem` AS `refRfqLineitem`,  \n" +
				"        `k`.`qpa` AS `qpa`,  \n" +
				"        `k`.`dnpQty` AS `dnpQty`,  \n" +
				"        `k`.`qpaWithDnp` AS `qpaWithDnp`,  \n" +
				"        `k`.`isPurchase` AS `isPurchase`,  \n" +
				"        `k`.`isInstall` AS `isInstall`,  \n" +
				"        `k`.`isBuyDNPQty` AS `isBuyDNPQty`,  \n" +
				"        `k`.`numOfPosition` AS `numOfPosition`,  \n" +
				"        `k`.`reqQty` AS `reqQty`,  \n" +
				"        `k`.`reqUnits` AS `reqUnits`,  \n" +
				"        `k`.`reqPins` AS `reqPins`,  \n" +
				"        `k`.`uomid` AS `uomid`,  \n" +
				"        `k`.`connecterTypeID` AS `connecterTypeID`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN `k`.`allocatedQty`  \n" +
				"            ELSE 0  \n" +
				"        END) AS `allocatedQty`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN `k`.`allocatedunit`  \n" +
				"            ELSE 0  \n" +
				"        END) AS `allocatedunit`,  \n" +
				"        (CASE  \n" +
				"            WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN `k`.`allocatedpin`  \n" +
				"            ELSE 0  \n" +
				"        END) AS `allocatedpin`,  \n" +
				"        (CASE  \n" +
				"            WHEN  \n" +
				"                (`k`.`isNotRequiredKitAllocation` <> 1)  \n" +
				"            THEN  \n" +
				"                (CASE  \n" +
				"                    WHEN ((`k`.`reqUnits` - `k`.`allocatedunit`) > 0) THEN (`k`.`reqUnits` - `k`.`allocatedunit`)  \n" +
				"                    ELSE 0  \n" +
				"                END)  \n" +
				"            ELSE 0  \n" +
				"        END) AS `shortage`,  \n" +
				"        (CASE  \n" +
				"            WHEN  \n" +
				"                (`k`.`isNotRequiredKitAllocation` <> 1)  \n" +
				"            THEN  \n" +
				"                (CASE  \n" +
				"                    WHEN ((`k`.`reqPins` - `k`.`allocatedpin`) > 0) THEN (`k`.`reqPins` - `k`.`allocatedpin`)  \n" +
				"                    ELSE 0  \n" +
				"                END)  \n" +
				"            ELSE 0  \n" +
				"        END) AS `shortagePins`,  \n" +
				"        (CASE  \n" +
				"            WHEN  \n" +
				"                ((CASE  \n" +
				"                    WHEN  \n" +
				"                        (`k`.`isNotRequiredKitAllocation` <> 1)  \n" +
				"                    THEN  \n" +
				"                        (CASE  \n" +
				"                            WHEN ((`k`.`reqUnits` - `k`.`allocatedunit`) > 0) THEN (`k`.`reqUnits` - `k`.`allocatedunit`)  \n" +
				"                            ELSE 0  \n" +
				"                        END)  \n" +
				"                    ELSE 0  \n" +
				"                END) > 0)  \n" +
				"            THEN  \n" +
				"                1  \n" +
				"            ELSE 0  \n" +
				"        END) AS `shortageLine`,  \n" +
				"        (CASE  \n" +
				"            WHEN  \n" +
				"                ((CASE  \n" +
				"                    WHEN  \n" +
				"                        (`k`.`isNotRequiredKitAllocation` <> 1)  \n" +
				"                    THEN  \n" +
				"                        (CASE  \n" +
				"                            WHEN ((`k`.`reqPins` - `k`.`allocatedpin`) > 0) THEN (`k`.`reqPins` - `k`.`allocatedpin`)  \n" +
				"                            ELSE 0  \n" +
				"                        END)  \n" +
				"                    ELSE 0  \n" +
				"                END) > 0)  \n" +
				"            THEN  \n" +
				"                1  \n" +
				"            ELSE 0  \n" +
				"        END) AS `shortagelinePins`,  \n" +
				"        (CASE  \n" +
				"            WHEN  \n" +
				"                (`k`.`connecterTypeID` = -(2))  \n" +
				"            THEN  \n" +
				"                ((`k`.`allocatedpin` / (CASE  \n" +
				"                    WHEN (IFNULL(`k`.`reqPins`, 0) = 0) THEN 1  \n" +
				"                    ELSE `k`.`reqPins`  \n" +
				"                END)) * 100)  \n" +
				"            ELSE ((`k`.`allocatedunit` / (CASE  \n" +
				"                WHEN (IFNULL(`k`.`reqUnits`, 0) = 0) THEN 1  \n" +
				"                ELSE `k`.`reqUnits`  \n" +
				"            END)) * 100)  \n" +
				"        END) AS `AllocationPercPerLine`,  \n" +
				"        `k`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`,  \n" +
				"        `k`.`bomNumOfPosition` AS `bomNumOfPosition`  \n" +
				"    FROM  \n" +
				"        (SELECT  \n" +
				"            `k`.`refSalesorderdetid` AS `refSalesorderdetid`,  \n" +
				"                `k`.`assyID` AS `assyID`,  \n" +
				"                `k`.`lineID` AS `lineID`,  \n" +
				"                `k`.`totalAssyBuildQty` AS `totalAssyBuildQty`,  \n" +
				"                `k`.`kitQty` AS `kitQty`,  \n" +
				"                `k`.`mrpQty` AS `mrpQty`,  \n" +
				"                `k`.`refRfqLineitem` AS `refRfqLineitem`,  \n" +
				"                `k`.`qpa` AS `qpa`,  \n" +
				"                `k`.`dnpQty` AS `dnpQty`,  \n" +
				"                `k`.`qpaWithDnp` AS `qpaWithDnp`,  \n" +
				"                `k`.`numOfPosition` AS `numOfPosition`,  \n" +
				"                IFNULL((`k`.`totalAssyBuildQty` * IFNULL(`k`.`qpaWithDnp`, 0)), 0) AS `reqQty`,  \n" +
				"                IFNULL((`k`.`totalAssyBuildQty` * IFNULL(`k`.`qpaWithDnp`, 0)), 0) AS `reqUnits`,  \n" +
				"                IFNULL(((`k`.`totalAssyBuildQty` * IFNULL(`k`.`qpaWithDnp`, 0)) * IFNULL(`k`.`bomNumOfPosition`, 0)), 0) AS `reqPins`,  \n" +
				"                `k`.`uomid` AS `uomid`,  \n" +
				"                `k`.`connecterTypeID` AS `connecterTypeID`,  \n" +
				"                `k`.`allocatedQty` AS `allocatedQty`,  \n" +
				"                `k`.`allocatedunit` AS `allocatedunit`,  \n" +
				"                `k`.`allocatedpin` AS `allocatedpin`,  \n" +
				"                `k`.`isPurchase` AS `isPurchase`,  \n" +
				"                `k`.`isInstall` AS `isInstall`,  \n" +
				"                `k`.`isBuyDNPQty` AS `isBuyDNPQty`,  \n" +
				"                `k`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`,  \n" +
				"                `k`.`bomNumOfPosition` AS `bomNumOfPosition`  \n" +
				"        FROM  \n" +
				"            (SELECT  \n" +
				"            `a`.`refSalesOrderDetID` AS `refSalesorderdetid`,  \n" +
				"                `a`.`partId` AS `assyID`,  \n" +
				"                `b`.`lineID` AS `lineID`,  \n" +
				"                `a`.`totalAssyBuildQty` AS `totalAssyBuildQty`,  \n" +
				"                `a`.`kitQty` AS `kitQty`,  \n" +
				"                `a`.`mrpQty` AS `mrpQty`,  \n" +
				"                `b`.`refRfqLineitem` AS `refRfqLineitem`,  \n" +
				"                `b`.`qpa` AS `qpa`,  \n" +
				"                `b`.`dnpQty` AS `dnpQty`,  \n" +
				"                (CASE  \n" +
				"                    WHEN  \n" +
				"                        ((`b`.`isPurchase` = 1)  \n" +
				"                            OR (`b`.`isInstall` = 1))  \n" +
				"                    THEN  \n" +
				"                        (IFNULL(`b`.`qpa`, 0) + IF(((`b`.`isBuyDNPQty` = 'Y')  \n" +
				"                            OR (`b`.`isBuyDNPQty` = 'C')), IFNULL(`b`.`dnpQty`, 0), 0))  \n" +
				"                    ELSE IF(((`b`.`isBuyDNPQty` = 'Y')  \n" +
				"                        OR (`b`.`isBuyDNPQty` = 'C')), IFNULL(`b`.`dnpQty`, 0), 0)  \n" +
				"                END) AS `qpaWithDnp`,  \n" +
				"                `b`.`numOfPosition` AS `numOfPosition`,  \n" +
				"                `b`.`uomID` AS `uomid`,  \n" +
				"                `c`.`connecterTypeID` AS `connecterTypeID`,  \n" +
				"                IFNULL(`c`.`allocatedQty`, 0) AS `allocatedQty`,  \n" +
				"                IFNULL(`c`.`allocatedunit`, 0) AS `allocatedunit`,  \n" +
				"                IFNULL(`c`.`allocatedpin`, 0) AS `allocatedpin`,  \n" +
				"                `b`.`isPurchase` AS `isPurchase`,  \n" +
				"                `b`.`isInstall` AS `isInstall`,  \n" +
				"                `b`.`isBuyDNPQty` AS `isBuyDNPQty`,  \n" +
				"                `b`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`,  \n" +
				"                `b`.`numOfPosition` AS `bomNumOfPosition`  \n" +
				"        FROM  \n" +
				"            ((`kit_allocation_assy_detail` `a`  \n" +
				"        JOIN `kit_allocation_lineitems` `b` ON (((`a`.`refSalesOrderDetID` = `b`.`refSalesOrderDetID`)  \n" +
				"            AND (`a`.`partId` = `b`.`partID`)  \n" +
				"            AND (`b`.`isDeleted` = 0))))  \n" +
				"        LEFT JOIN (SELECT  \n" +
				"            `ka`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
				"                `ka`.`assyID` AS `assyid`,  \n" +
				"                `ka`.`refBOMLineID` AS `refBOMLineID`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`ka`.`STATUS` = 'R') THEN `ka`.`consumeQty`  \n" +
				"                    WHEN (`ka`.`STATUS` = 'D') THEN 0  \n" +
				"                    ELSE `ka`.`allocatedQty`  \n" +
				"                END)) AS `allocatedQty`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`ka`.`STATUS` = 'R') THEN `ka`.`consumeUnit`  \n" +
				"                    WHEN (`ka`.`STATUS` = 'D') THEN 0  \n" +
				"                    ELSE `ka`.`allocatedUnit`  \n" +
				"                END)) AS `allocatedunit`,  \n" +
				"                SUM((CASE  \n" +
				"                    WHEN (`ka`.`STATUS` = 'R') THEN (`ka`.`consumeUnit` * IFNULL(`c`.`noOfPosition`, 0))  \n" +
				"                    WHEN (`ka`.`STATUS` = 'D') THEN 0  \n" +
				"                    ELSE (`ka`.`allocatedUnit` * IFNULL(`c`.`noOfPosition`, 0))  \n" +
				"                END)) AS `allocatedpin`,  \n" +
				"                `c`.`connecterTypeID` AS `connecterTypeID`  \n" +
				"        FROM  \n" +
				"            (`kit_allocation` `ka`  \n" +
				"        LEFT JOIN `component_attributes` `c` ON ((`c`.`refComponentID` = `ka`.`partId`)))  \n" +
				"        WHERE  \n" +
				"            (`c`.`isDeleted` = 0)  \n" +
				"        GROUP BY `ka`.`refSalesOrderDetID` , `ka`.`assyID` , `ka`.`refBOMLineID` , `c`.`connecterTypeID`) `c` ON (((`a`.`refSalesOrderDetID` = `c`.`refSalesOrderDetID`)  \n" +
				"            AND (`a`.`partId` = `c`.`assyid`)  \n" +
				"            AND (`b`.`refRfqLineitem` = `c`.`refBOMLineID`))))  \n" +
				"        WHERE  \n" +
				"            ((`a`.`isDeleted` = 0)  \n" +
				"                AND EXISTS( SELECT  \n" +
				"                    'Y'  \n" +
				"                FROM  \n" +
				"                    `kit_allocation_lineitems_alternatepart` `d`  \n" +
				"                WHERE  \n" +
				"                    (EXISTS( SELECT  \n" +
				"                            'Y'  \n" +
				"                        FROM  \n" +
				"                            `component` `e`  \n" +
				"                        WHERE  \n" +
				"                            ((`e`.`id` = `d`.`mfgPNID`)  \n" +
				"                                AND (`e`.`category` <> 3)))  \n" +
				"                        AND (`b`.`refSalesOrderDetID` = `d`.`refSalesOrderDetID`)  \n" +
				"                        AND (`b`.`refRfqLineitem` = `d`.`refRfqLineitem`)  \n" +
				"                        AND (`b`.`partID` = `d`.`partID`))))) `k`) `k`;  \n" +
				/* **************************** Add Script Version -> 23-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_RetrivePurchaseConsolidatedList`;  \n" +
				"CREATE PROCEDURE `Sproc_RetrivePurchaseConsolidatedList`(  \n" +
				"	IN pPageIndex INT,  \n" +
				"	IN pRecordPerPage INT,  \n" +
				"	IN pOrderBy VARCHAR(255),  \n" +
				"	IN pWhereClause VARCHAR(16383),  \n" +
				"	IN pPartId INT,  \n" +
				"	IN pKitQty INT,  \n" +
				"    IN pPOQty INT,  \n" +
				"    IN pMRPQty INT,  \n" +
				"	IN pPackagingAlias BOOLEAN,  \n" +
				"	IN pRefSalesOrderDetID INT,  \n" +
				"    IN pLineId INT,  \n" +
				"    IN pCustomerId INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE pOffset INT;  \n" +
				"	DECLARE rowNumWhere VARCHAR(255);  \n" +
				"    DECLARE pWhereLineId VARCHAR(500);  \n" +
				"  \n" +
				"	IF (pLineId != 0) THEN  \n" +
				"		SET pWhereLineId = CONCAT(\" AND rl.lineID = \",pLineId);  \n" +
				"	ELSE  \n" +
				"		SET pWhereLineId = ' AND 1=1';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF (pOrderBy IS NOT NULL) THEN  \n" +
				"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
				"	ELSE  \n" +
				"		SET pOrderBy = \"ORDER BY lineID ASC\";  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(pWhereClause IS NULL OR pWhereClause = \"\") THEN  \n" +
				"		SET pWhereClause = ' 1=1';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
				"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
				"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
				"	ELSE  \n" +
				"		SET rowNumWhere = '';  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
				"	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
				"	SELECT * FROM kit_allocation_consolidate_Line_detail WHERE refSalesOrderDetID = pRefSalesOrderDetID AND isAssembly = 0 AND isDeleted = 0;  \n" +
				"  \n" +
				"	SET @vFromSQLQuery = CONCAT('  \n" +
				"		SELECT	*  \n" +
				"		FROM	(  \n" +
				"			SELECT 	id,			lineId AS lineID,		refAssyId,				refSalesOrderDetId,  \n" +
				"				rfqLineItemsId,		consolidatedpartlineID,		consolidateRestrictPartDetail,		ConsolidatedLineItemIDs,  \n" +
				"				custPNID,		custPN,    			custPIDCode,    			1 custIsCustom,  \n" +
				"				restrictCPNUseWithPermissionStep,  			restrictCPNUsePermanentlyStep,  \n" +
				"				restrictCPNUseInBOMStep,     				cpnRoHsIcon,    			cpnRoHsName,  \n" +
				"				isNotRequiredKitAllocation,				isNotRequiredKitAllocationValue,  \n" +
				"				notRequiredKitAllocationReason, 			uomMismatchedStep,			mfgPart,  \n" +
				"				qpa,		 	consolidatedQPA,  \n" +
				"				uomID, 			unitName,    			isInstall,				connecterTypeID,  \n" +
				"				parttypeID,   		partTypeName,         		mountingTypeID,  			mountingTypeName,  \n" +
				"				mfgPN,    		numOfPosition, 			requireQty,    				requirePins,  \n" +
				"				allocatedQty,		allocatedUnit,			consumeUnits,    			consumeQty,  \n" +
				"				allocatedPins,		scrapedPins,  \n" +
				"				(  \n" +
				"					CASE  \n" +
				"						WHEN uomMismatchedStep = 0 THEN 0  \n" +
				"						ELSE  \n" +
				"							CASE  \n" +
				"								WHEN connecterTypeID = -2 THEN  \n" +
				"									CASE WHEN (((IFNULL(qpa, 0) * ', pMRPQty ,' * IFNULL(numOfPosition, 0)) - allocatedPins) < 0) THEN 0 ELSE ((IFNULL(qpa, 0) * ', pMRPQty ,' * IFNULL(numOfPosition, 0)) - allocatedPins) END  \n" +
				"								ELSE  \n" +
				"									CASE WHEN (((IFNULL(qpa, 0) * ', pMRPQty ,') - allocatedUnit) < 0) THEN 0 ELSE ((IFNULL(qpa, 0) * ', pMRPQty ,') - allocatedUnit) END  \n" +
				"							END  \n" +
				"					END  \n" +
				"				) shortagePerBuild,  \n" +
				"                isPurchaseWithDNP isPurchase,  \n" +
				"                refMongoTrnsID  \n" +
				"			FROM	(  \n" +
				"				SELECT  	a.id,			a.lineId AS lineID,		a.refAssyId,				a.refSalesOrderDetId,  \n" +
				"						a.rfqLineItemsId,	a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,  \n" +
				"						a.custPNID,  \n" +
				"						(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getMFGPNByID(a.custPNID) END) custPN,  \n" +
				"						(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getAssyPIDCodeByID(a.custPNID) END) custPIDCode,  \n" +
				"						1 custIsCustom,       	a.restrictCPNUseWithPermissionStep,  					a.restrictCPNUsePermanentlyStep,  \n" +
				"						a.restrictCPNUseInBOMStep,  \n" +
				"						(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSIconByPartID(a.custPNID) END) cpnRoHsIcon,  \n" +
				"						(CASE WHEN a.custPNID IS NULL THEN NULL ELSE fun_getRoHSNameByID(a.custPNID) END) cpnRoHsName,  \n" +
				"						a.isNotRequiredKitAllocation,	(CASE WHEN a.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
				"						a.notRequiredKitAllocationReason, 	a.uomMismatchedStep,		a.consolidatedMfgPNIDs mfgPart,  \n" +
				"						IFNULL(a.qpa, 0) qpa,	IFNULL(a.qpa, 0) consolidatedQPA,  \n" +
				"						a.uomID, 			fun_getUnitNameByID(a.uomID) unitName,  \n" +
				"						a.isInstall,		a.isPurchaseWithDNP,		a.connecterTypeID,  \n" +
				"						a.partType parttypeID,   	fun_getPartTypeNameByID(a.partType) partTypeName,  \n" +
				"						a.mountingTypeID,  		fun_getMountingTypeNameByID(a.mountingTypeID) mountingTypeName,  \n" +
				"						',fun_getConsolidateLineMFGPNWithPackagingforkit(pPackagingAlias, pRefSalesOrderDetID, pCustomerId),',  \n" +
				"						a.numOfPosition,  \n" +
				"						(CASE WHEN a.uomMismatchedStep = 0 THEN 0  ELSE (IFNULL(a.qpa, 0) * ', pMRPQty ,') END) requireQty,  \n" +
				"						(CASE WHEN (a.uomMismatchedStep = 1 AND a.connecterTypeID = -2) THEN ((IFNULL(a.qpa, 0) * ', pMRPQty ,') * IFNULL(a.numOfPosition, 0)) ELSE 0 END) requirePins,  \n" +
				"						b.allocatedQty,			b.allocatedUnit,		b.consumeUnits,  \n" +
				"						b.consumeQty,			b.allocatedPins,		b.scrapedPins,  \n" +
				"                        refMongoTrnsID  \n" +
				"				FROM 		kit_allocation_consolidate_Line_detail a  \n" +
				"				INNER JOIN 	(  \n" +
				"							SELECT 		a.refSalesOrderDetid, 			a.rfqLineItemsId, 			a.consolidatedLineItemIDs,  min(b.refMongoTrnsID) refMongoTrnsID,  \n" +
				"									SUM(b.allocatedQty) allocatedQty, 	SUM(b.allocatedunit) allocatedUnit,	SUM(b.ConsumeQty) consumeQty,  \n" +
				"									SUM(b.ConsumeUnits) consumeUnits,	SUM(b.AllocatedPins ) allocatedPins, 	SUM(b.scrapedPins) scrapedPins  \n" +
				"							FROM 		temp_Kit_Consolidate_Detail a  \n" +
				"							LEFT JOIN 	vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)  \n" +
				"							GROUP BY 	a.refSalesOrderDetid, a.rfqLineItemsId, a.consolidatedLineItemIDs  \n" +
				"						) b ON a.refSalesOrderDetId = b.refSalesOrderDetId AND a.rfqLineItemsId = b.rfqLineItemsId AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs  \n" +
				"				WHERE 		a.refSalesOrderDetID = ', pRefSalesOrderDetID ,' AND a.isAssembly = 0 AND a.isDeleted = 0 ', pWhereLineId ,'  \n" +
				"			) AS  subData  \n" +
				"		)  \n" +
				"		AS  mainData  \n" +
				"		WHERE', pWhereClause  \n" +
				"	);  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS ConsolidatedResult;  \n" +
				"	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS ConsolidatedResult AS \", @vFromSQLQuery, \" \", pOrderBy, \" \", rowNumWhere);  \n" +
				"	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
				"	EXECUTE mainQuery;  \n" +
				"	DEALLOCATE PREPARE mainQuery;  \n" +
				"  \n" +
				"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
				"	PREPARE query1 FROM @SQLStatement1;  \n" +
				"	EXECUTE query1;  \n" +
				"	DEALLOCATE PREPARE query1;  \n" +
				"  \n" +
				"	SET @SQLStatement2 = \" SELECT * FROM ConsolidatedResult \";  \n" +
				"	PREPARE query2 FROM @SQLStatement2;  \n" +
				"	EXECUTE query2;  \n" +
				"	DEALLOCATE PREPARE query2;  \n" +
				"  \n" +
				"	SET @SQLStatement3 = (SELECT fun_lastPricingStatus(pRefSalesOrderDetID,0,1));  \n" +
				"	PREPARE query3 FROM @SQLStatement3;  \n" +
				"	EXECUTE query3;  \n" +
				"	DEALLOCATE PREPARE query3;  \n" +
				"  \n" +
				"	#DROP TEMPORARY TABLE Results_Sproc_RetrivePurchaseConsolidatedList;  \n" +
				"	DROP TEMPORARY TABLE ConsolidatedResult;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 23-03-2022 *********************************** */
				"DROP function IF EXISTS `fun_getAvilableStockWithPackagingAlias`;  \n" +
				"DROP function IF EXISTS `fun_getAvilableStockWithPackagingAliasInPins`;  \n" +
				/* **************************** Add Script Version -> 23-03-2022 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (6045,'2.00','V1',' Task 42513: Resolve performance issue of vu_kit_feasibility_detail view - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
        case 6045:
            allDbChangesArray.push(
            /* **************************** New Script -> 23-03-2022 *********************************** */
            "drop procedure if exists `Sproc_CreateRfqConsolidateLineItem`;  \n" +
            "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(  \n" +
            "	IN prfqAssyID INT,  \n" +
            "    IN ppartID INT,  \n" +
            "	IN puserID INT,  \n" +
            "    IN pBOMVersion VARCHAR(50)  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
            "BEGIN  \n" +
            "	ROLLBACK;  \n" +
            "	RESIGNAL;  \n" +
            "END;  \n" +
            "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
            "  BEGIN  \n" +
            "	ROLLBACK;  \n" +
            "	RESIGNAL;  \n" +
            "END;  \n" +
            " DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqConsolidateLineItem;  \n" +
            "  \n" +
            "  START TRANSACTION;  \n" +
            "	SET SESSION group_concat_max_len = 500000;  \n" +
            "# consoliadte select  \n" +
            "		 DROP TEMPORARY TABLE IF EXISTS tempconsolidate;  \n" +
            "		 CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidate AS  \n" +
            "		 SELECT id FROM  rfq_consolidated_mfgpn_lineitem WHERE isDeleted=0 AND rfqAssyID = prfqAssyID;  \n" +
            "  \n" +
            "  /* call SP for generate consolidated data in temp_Sproc_CreateRfqConsolidateLineItem temporary table */  \n" +
            "        CALL Sproc_CreateConsolidateDataForPart(prfqAssyID, ppartID);  \n" +
            "  \n" +
            "# Delete consolidated lineItem if consolidatedLineItemIDs  change  \n" +
            "		UPDATE rfq_consolidated_mfgpn_lineitem cl  \n" +
            "        SET  \n" +
            "        cl.isDeleted = TRUE,  \n" +
            "        cl.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        cl.deletedBy = puserID  \n" +
            "        WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0  \n" +
            "        AND NOT EXISTS (  \n" +
            "			SELECT  1 FROM (  \n" +
            "				SELECT rcl.id FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
            "				INNER JOIN temp_Sproc_CreateRfqConsolidateLineItem R ON R.rfqAssyIDORrefSalesOrderdetID = rcl.rfqAssyID AND rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND R.category <> 3  \n" +
            "				WHERE rcl.rfqAssyID = prfqAssyID  \n" +
            "				AND rcl.isDeleted = 0  \n" +
            "			)a WHERE a.id = cl.id  \n" +
            "        );  \n" +
            "  \n" +
            "# insert Consolidated lineItems  \n" +
            "		INSERT INTO `rfq_consolidated_mfgpn_lineitem`  \n" +
            "        (`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`rfqLineItemID`,`uomID`,  \n" +
            "        `qpa`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`numOfPosition`,`isMultiple`,`consolidatedLineItemIDs`,`refDesig`,`consolidatedpartlineID`,`isqpaMismatch`,  \n" +
            "        `restrictCPNUseInBOMStep`, `restrictCPNUsePermanentlyStep`, `restrictCPNUseWithPermissionStep`, `custPNID`,`consolidateRestrictPartDetail`,`consolidatedPartWithFlagDetail`)  \n" +
            "        SELECT R.`lineID`,R.`isInstall`,R.`isPurchaseWithDNP`,prfqAssyID `rfqAssyID`,  \n" +
            "        R.`rfqLineItemsID`,R.`uomID`, R.`qpa`, fun_DatetimetoUTCDateTime() `createdAt`, puserID `createdBy`, fun_DatetimetoUTCDateTime() `updatedAt`,  \n" +
            "        puserID `updatedBy`, R.`numOfPosition`,(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`,  \n" +
            "        R.`consolidatedLineItemIDs`, R.`consolidatedrefDesig`,R.`consolidatedpartlineID`,R.`isqpaMismatch`, R.`restrictCPNUseInBOMStep`, R.`restrictCPNUsePermanentlyStep`,  \n" +
            "        R.`restrictCPNUseWithPermissionStep`, R.`custPNID`,R.`consolidateRestrictPartDetail`, R.`consolidatedPartWithFlagDetail`  \n" +
            "        FROM temp_Sproc_CreateRfqConsolidateLineItem R  \n" +
            "        LEFT JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.rfqAssyID = prfqAssyID  \n" +
            "        AND cl.rfqAssyID = R.rfqAssyIDORrefSalesOrderdetID AND cl.isDeleted = 0  \n" +
            "        WHERE cl.id IS NULL AND R.category <> 3;  \n" +
            "# insert Consolidated lineItems Quentity  \n" +
            "		INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`  \n" +
            "        (`qtyID`,`consolidateID`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`rfqPriceGroupId`,`rfqPriceGroupDetailId`)  \n" +
            "        SELECT rq.id `qtyID`, cl.id `consolidateID`,puserID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`, puserID `updatedBy`,fun_DatetimetoUTCDateTime() `updatedAt`,rq.rfqPriceGroupId ,rq.rfqPriceGroupDetailId  \n" +
            "        FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
            "        JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND rq.isDeleted = 0  \n" +
            "        LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id  \n" +
            "        WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND clq.id IS NULL;  \n" +
            "# Update Consilidated LineItems Quantity  \n" +
            "  \n" +
            "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT qpa,consolidatedLineItemIDs FROM temp_Sproc_CreateRfqConsolidateLineItem WHERE category <> 3) Rs,  \n" +
            "        (  \n" +
            "			SELECT cl.id ,cl.qpa,cl.consolidatedLineItemIDs,consolidateRestrictPartDetail FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
            "			WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND cl.id  IS NOT NULL  \n" +
            "		) rcl  \n" +
            "        SET  \n" +
            "        rq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        rq.updatedBy = puserID,  \n" +
            "        rq.unitPrice= (CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.unitPrice ELSE NULL END),  \n" +
            "        rq.quoteqty=(CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.quoteqty ELSE NULL END),  \n" +
            "        rq.rfqQtySupplierID= (CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.rfqQtySupplierID ELSE NULL END),  \n" +
            "        rq.finalPrice = (CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE NULL END)  \n" +
            "        WHERE rq.consolidateID = rcl.id AND rcl.qpa <> Rs.qpa AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs  \n" +
            "        AND rq.isDeleted = 0;  \n" +
            "  \n" +
            "# Update Consilidated LineItems Quantity  \n" +
            "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT numOfPosition, consolidatedLineItemIDs FROM temp_Sproc_CreateRfqConsolidateLineItem WHERE category <> 3) Rs,  \n" +
            "        (  \n" +
            "			SELECT cl.id ,IFNULL(cl.numOfPosition,0) AS numOfPosition, cl.consolidatedLineItemIDs,consolidateRestrictPartDetail FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
            "            WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND cl.id IS NOT NULL  \n" +
            "		) rcl  \n" +
            "        SET  \n" +
            "        rq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        rq.updatedBy = puserID,  \n" +
            "        rq.unitPrice= (CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.unitPrice ELSE NULL END),  \n" +
            "        rq.quoteqty=(CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.quoteqty ELSE NULL END),  \n" +
            "        rq.rfqQtySupplierID= (CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.rfqQtySupplierID ELSE NULL END),  \n" +
            "        rq.finalPrice = (CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.finalPrice ELSE NULL END)  \n" +
            "        WHERE rq.consolidateID = rcl.id AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs AND rq.isDeleted = 0  \n" +
            "        AND IFNULL(rcl.numOfPosition,0)  <> Rs.numOfPosition;  \n" +
            "# Update Consilidated LineItems Quantity  \n" +
            "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT consolidatedLineItemIDs, consolidateRestrictPartDetail FROM temp_Sproc_CreateRfqConsolidateLineItem WHERE category <> 3) Rs,  \n" +
            "        (  \n" +
            "			SELECT rl.id, rl.consolidatedLineItemIDs, rl.consolidateRestrictPartDetail  \n" +
            "            FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
            "            WHERE rl.rfqAssyID = prfqAssyID AND rl.isDeleted = 0  \n" +
            "		) rcl  \n" +
            "         SET  \n" +
            "        rq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        rq.updatedBy = puserID,  \n" +
            "        rq.isBomUpdate=(CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN 0  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN 1 ELSE 0 END),  \n" +
            "        rq.unitPrice= (CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.unitPrice ELSE NULL END),  \n" +
            "        rq.quoteqty= (CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.quoteqty ELSE NULL END),  \n" +
            "        rq.rfqQtySupplierID= (CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.rfqQtySupplierID ELSE NULL END),  \n" +
            "        rq.finalPrice =(CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.finalPrice ELSE NULL END)  \n" +
            "        WHERE rq.consolidateID = rcl.id AND rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs  \n" +
            "        AND rq.isDeleted = 0;  \n" +
            "  \n" +
            "# Update Consilidated LineItems  \n" +
            "		UPDATE rfq_consolidated_mfgpn_lineitem cl,  \n" +
            "        (  \n" +
            "			SELECT isInstall, isPurchaseWithDNP, numOfPosition, rfqLineItemsID, qpa, uomID, consolidatedrefDesig, lineID, consolidatedLineItemIDs,  \n" +
            "				   consolidatedpartlineID, consolidateRestrictPartDetail, restrictCPNUseWithPermissionStep, restrictCPNUsePermanentlyStep, restrictCPNUseInBOMStep,  \n" +
            "                   custPNID, isqpaMismatch, consolidatedPartWithFlagDetail  \n" +
            "			FROM temp_Sproc_CreateRfqConsolidateLineItem WHERE category <> 3  \n" +
            "		) R  \n" +
            "        SET  \n" +
            "        cl.isInstall = R.isInstall ,  \n" +
            "        cl.isPurchase = R.isPurchaseWithDNP,  \n" +
            "        cl.numOfPosition = R.numOfPosition,  \n" +
            "        cl.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        cl.rfqLineItemID = R.rfqLineItemsID,  \n" +
            "        cl.qpa = R.qpa,  \n" +
            "        cl.uomID = R.uomID,  \n" +
            "        cl.refDesig = R.consolidatedrefDesig,  \n" +
            "        cl.lineID = R.lineID,  \n" +
            "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,  \n" +
            "        cl.consolidatedpartlineID = R.consolidatedpartlineID,  \n" +
            "        cl.consolidateRestrictPartDetail = R.consolidateRestrictPartDetail,  \n" +
            "        cl.updatedBy = puserID,  \n" +
            "        cl.restrictCPNUseWithPermissionStep = R.restrictCPNUseWithPermissionStep,  \n" +
            "        cl.restrictCPNUsePermanentlyStep = R.restrictCPNUsePermanentlyStep,  \n" +
            "        cl.restrictCPNUseInBOMStep = R.restrictCPNUseInBOMStep,  \n" +
            "        cl.custPNID = R.custPNID,  \n" +
            "        cl.isqpaMismatch = R.isqpaMismatch,  \n" +
            "        cl.consolidatedPartWithFlagDetail = R.consolidatedPartWithFlagDetail  \n" +
            "        WHERE cl.rfqAssyID = prfqAssyID AND cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.id  IS NOT NULL  \n" +
            "        AND cl.isDeleted = 0;  \n" +
            "  \n" +
            "     # Manage table before executing alternate part table  \n" +
            "                DROP TEMPORARY TABLE IF EXISTS tempconsolidateAlternatePart;  \n" +
            "		 CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidateAlternatePart AS  \n" +
            "		 SELECT rcml.id,rcml.consolidateID,rcml.mfgPNID,rcml.approvedMountingType FROM  rfq_consolidated_mfgpn_lineitem_alternate rcml WHERE rcml.consolidateID IN (SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqassyid=prfqAssyID AND isdeleted=0) AND isDeleted=0;  \n" +
            "# Update Consilidated LineItems alternate part  \n" +
            "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cla,  \n" +
            "		(SELECT cl.id `consolidateID`, ap.`mfgPNID`, MIN(ap.`customerApproval`) customerApproval,  \n" +
            "				IFNULL(ap.restrictUseInBOMStep,0) restrictUseInBOMStep, IFNULL(ap.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,IFNULL(ap.restrictUseWithPermissionStep,1)restrictUseWithPermissionStep,  \n" +
            "				IFNULL(ap.restrictUsePermanentlyStep,1)restrictUsePermanentlyStep,IFNULL(ap.restrictUseExcludingAliasStep,1)restrictUseExcludingAliasStep,  \n" +
            "				IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1)restrictUseExcludingAliasWithPermissionStep,IFNULL(ap.restrictUseInBOMExcludingAliasStep,0)restrictUseInBOMExcludingAliasStep,  \n" +
            "				IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0)restrictUseInBOMExcludingAliasWithPermissionStep, IFNULL(ap.approvedMountingType,0)approvedMountingType,  \n" +
            "				IFNULL(ap.mismatchMountingTypeStep,1)mismatchMountingTypeStep,  \n" +
            "                IFNULL(ap.mismatchFunctionalCategoryStep,1)mismatchFunctionalCategoryStep  \n" +
            "		FROM rfq_lineitems_alternatepart ap  \n" +
            "		JOIN (  \n" +
            "			SELECT rcl.id, rcl.consolidatedLineItemIDs  \n" +
            "			FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
            "			JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID AND rl.isdeleted = 0  \n" +
            "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isdeleted = 0  \n" +
            "		) cl ON FIND_IN_SET(ap.rfqLineitemsID,cl.consolidatedLineItemIDs)  \n" +
            "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0  \n" +
            "		WHERE ap.isdeleted = 0 AND cap.consolidateID IS NOT NULL  \n" +
            "		GROUP BY cl.id, ap.`mfgPNID`, IFNULL(ap.restrictUseInBOMStep,0), IFNULL(ap.restrictUseInBOMWithPermissionStep,0),IFNULL(ap.restrictUseWithPermissionStep,1),IFNULL(ap.restrictUsePermanentlyStep,1),  \n" +
            "				IFNULL(ap.restrictUseExcludingAliasStep,1), IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1),IFNULL(ap.restrictUseInBOMExcludingAliasStep,0),IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0),  \n" +
            "				IFNULL(ap.approvedMountingType,0), IFNULL(ap.mismatchMountingTypeStep,1), IFNULL(ap.mismatchFunctionalCategoryStep,1)  \n" +
            "		)b  \n" +
            "		SET  \n" +
            "			cla.customerApproval = b.customerApproval,  \n" +
            "			cla.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "			cla.updatedBy = puserID,  \n" +
            "			cla.restrictUseInBOMStep =  b.restrictUseInBOMStep,  \n" +
            "			cla.restrictUseInBOMWithPermissionStep = b.restrictUseInBOMWithPermissionStep,  \n" +
            "			cla.restrictUseWithPermissionStep = b.restrictUseWithPermissionStep,  \n" +
            "			cla.restrictUsePermanentlyStep = b.restrictUsePermanentlyStep,  \n" +
            "			cla.restrictUseExcludingAliasStep =  b.restrictUseExcludingAliasStep,  \n" +
            "			cla.restrictUseExcludingAliasWithPermissionStep = b.restrictUseExcludingAliasWithPermissionStep,  \n" +
            "			cla.restrictUseInBOMExcludingAliasStep = b.restrictUseInBOMExcludingAliasStep,  \n" +
            "			cla.restrictUseInBOMExcludingAliasWithPermissionStep = b.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "			cla.approvedMountingType = b.approvedMountingType,  \n" +
            "			cla.mismatchMountingTypeStep = b.mismatchMountingTypeStep,  \n" +
            "			cla.mismatchFunctionalCategoryStep = b.mismatchFunctionalCategoryStep  \n" +
            "		WHERE cla.consolidateID = b.consolidateID AND  cla.mfgPNID = b.mfgPNID AND  cla.isDeleted = 0;  \n" +
            "# delete from consolidated Alternatepart if lineItem removed  \n" +
            "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap  \n" +
            "        SET  \n" +
            "        cap.isDeleted = TRUE,  \n" +
            "        cap.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        cap.deletedBy = puserID  \n" +
            "        WHERE EXISTS (SELECT 1 FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id = cap.consolidateID  AND cl.isDeleted = 1)  \n" +
            "        AND cap.isdeleted = 0;  \n" +
            "  \n" +
            "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem  \n" +
            "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap,  \n" +
            "			(  \n" +
            "				SELECT DISTINCT (rcla.id) capID FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
            "				INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcla.consolidateID = rcl.id AND rcla.isdeleted = 0  \n" +
            "				INNER JOIN rfq_lineitems_alternatepart rla ON rla.mfgPNID = rcla.mfgPNID AND FIND_IN_SET(rla.rfqLineitemsID,rcl.consolidatedLineItemIDs) AND rla.isdeleted = 1  \n" +
            "				WHERE rcl.rfqAssyID = prfqAssyID AND rcl.isdeleted = 0  \n" +
            "            )AS rcap  \n" +
            "        SET  \n" +
            "        cap.isDeleted = TRUE,  \n" +
            "        cap.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        cap.deletedBy = puserID  \n" +
            "        WHERE cap.id = rcap.capID AND cap.isdeleted = 0;  \n" +
            "  \n" +
            "# delete Consolidated lineItems Quentity  if rfq Quantity remove  \n" +
            "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT id,rfqAssyID FROM rfq_assy_quantity q WHERE q.rfqAssyID = prfqAssyID AND q.isDeleted = 1 ) rq  \n" +
            "        SET  \n" +
            "        cq.isDeleted = TRUE,  \n" +
            "        cq.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        cq.deletedBy = puserID  \n" +
            "        WHERE cq.qtyID = rq.id AND cq.isDeleted= 0;  \n" +
            "  \n" +
            "  \n" +
            "# delete Consolidated lineitem Quantity if Consolidate lineitem remove  \n" +
            "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = prfqAssyID AND isDeleted = 1 ) rcl  \n" +
            "        SET  \n" +
            "        cq.isDeleted = TRUE,  \n" +
            "        cq.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        cq.deletedBy = puserID  \n" +
            "        WHERE cq.consolidateID = rcl.id AND cq.isDeleted= 0;  \n" +
            "  \n" +
            "# delete Consolidate lineItems  \n" +
            "		UPDATE rfq_consolidated_mfgpn_lineitem cl  \n" +
            "        SET  \n" +
            "        cl.isDeleted = TRUE,  \n" +
            "        cl.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        cl.deletedBy = puserID  \n" +
            "        WHERE  cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0  \n" +
            "        AND NOT EXISTS (SELECT 1 FROM temp_Sproc_CreateRfqConsolidateLineItem tcd WHERE  tcd.rfqLineItemsID = cl.rfqLineItemID AND tcd.category <> 3);  \n" +
            "  \n" +
            "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part  \n" +
            "		INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`  \n" +
            "        (`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`customerApproval`,  \n" +
            "        `restrictUseInBOMStep`, `restrictUseInBOMWithPermissionStep`,`restrictUseWithPermissionStep`,`restrictUsePermanentlyStep`,  \n" +
            "        `restrictUseExcludingAliasStep`,`restrictUseExcludingAliasWithPermissionStep`, `restrictUseInBOMExcludingAliasStep`, `restrictUseInBOMExcludingAliasWithPermissionStep`,`approvedMountingType`, `mismatchMountingTypeStep`,`mismatchFunctionalCategoryStep`)  \n" +
            "        SELECT ap.`mfgPN`, cl.id `consolidateID`, ap.`mfgPNID`,ap.`mfgCodeID`, fun_getAssyPIDCodeByID(ap.`mfgPNID`) AS `PIDCode`,  \n" +
            "		puserID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`,puserID `updatedBy`,fun_DatetimetoUTCDateTime() `updatedAt`, MIN(ap.`customerApproval`),  \n" +
            "				IFNULL(ap.restrictUseInBOMStep,0), IFNULL(ap.restrictUseInBOMWithPermissionStep,0),IFNULL(ap.restrictUseWithPermissionStep,1),IFNULL(ap.restrictUsePermanentlyStep,1),  \n" +
            "				IFNULL(ap.restrictUseExcludingAliasStep,1), IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1),IFNULL(ap.restrictUseInBOMExcludingAliasStep,0),IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0),  \n" +
            "				IFNULL(ap.approvedMountingType,0), IFNULL(ap.mismatchMountingTypeStep,1), IFNULL(ap.mismatchFunctionalCategoryStep,1)  \n" +
            "		FROM rfq_lineitems_alternatepart ap  \n" +
            "		JOIN (  \n" +
            "			SELECT rcl.id, rcl.consolidatedLineItemIDs  \n" +
            "			FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
            "			JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID AND rl.isdeleted = 0  \n" +
            "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isdeleted = 0  \n" +
            "		) cl ON FIND_IN_SET(ap.rfqLineitemsID,cl.consolidatedLineItemIDs)  \n" +
            "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0  \n" +
            "		WHERE IFNULL(ap.mfgGoodPartMappingStep,1) = 1 AND IFNULL(ap.suggestedGoodPartStep,1) = 1 AND IFNULL(ap.distGoodPartMappingStep,1) = 1 AND IFNULL(ap.suggestedGoodDistPartStep,1) = 1 AND ap.isdeleted = 0 AND cap.consolidateID IS NULL  \n" +
            "		GROUP BY cl.id, ap.`mfgPN`, ap.`mfgPNID`, ap.`mfgCodeID`,  \n" +
            "				IFNULL(ap.restrictUseInBOMStep,0), IFNULL(ap.restrictUseInBOMWithPermissionStep,0),IFNULL(ap.restrictUseWithPermissionStep,1),IFNULL(ap.restrictUsePermanentlyStep,1),  \n" +
            "				IFNULL(ap.restrictUseExcludingAliasStep,1), IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1),IFNULL(ap.restrictUseInBOMExcludingAliasStep,0),IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0),  \n" +
            "				IFNULL(ap.approvedMountingType,0), IFNULL(ap.mismatchMountingTypeStep,1), IFNULL(ap.mismatchFunctionalCategoryStep,1);  \n" +
            "# Delete consolidated mfgPart if mfgPart Changed  \n" +
            "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (SELECT a.id FROM rfq_consolidated_mfgpn_lineitem a WHERE a.rfqAssyID = prfqAssyID AND a.isDeleted = 0) rcl  \n" +
            "        SET  \n" +
            "        cap.isDeleted = TRUE,  \n" +
            "        cap.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        cap.deletedBy = puserID  \n" +
            "		WHERE cap.consolidateID = rcl.id  \n" +
            "        AND cap.id NOT IN (  \n" +
            "			SELECT capid FROM(  \n" +
            "				SELECT  DISTINCT(rcap.id) AS capid  \n" +
            "				FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
            "				INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate rcap ON rcap.consolidateID = cl.id AND rcap.isdeleted = 0  \n" +
            "				JOIN rfq_lineitems_alternatepart ap ON ap.mfgPNID = rcap.mfgPNID AND FIND_IN_SET(ap.rfqLineitemsID,cl.consolidatedLineItemIDs) AND ap.isdeleted = 0  \n" +
            "				WHERE cl.rfqAssyID = prfqAssyID AND cl.isdeleted = 0  \n" +
            "            ) rcap  \n" +
            "		);  \n" +
            "  \n" +
            " # delete Consolidated lineitem Quantity if selected alternate part remove  \n" +
            "       UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,  \n" +
            "        (SELECT id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 ) rcl  \n" +
            "        SET  \n" +
            "        cq.finalPrice = NULL,  \n" +
            "        cq.selectedPIDCode = NULL,  \n" +
            "        cq.selectedMpn = NULL,  \n" +
            "        cq.selectionMode = NULL,  \n" +
            "        cq.supplier = NULL,  \n" +
            "        cq.refSupplierID=NULL,  \n" +
            "        cq.supplierStock = NULL,  \n" +
            "        cq.currentStock = NULL,  \n" +
            "        cq.grossStock = NULL,  \n" +
            "        cq.leadTime = NULL,  \n" +
            "        cq.rfqQtySupplierID=NULL,  \n" +
            "        cq.min = NULL,  \n" +
            "        cq.mult = NULL,  \n" +
            "        cq.unitPrice = NULL,  \n" +
            "        cq.quoteqty=NULL,  \n" +
            "        cq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        cq.updatedBy = puserID  \n" +
            "        WHERE cq.consolidateID = (rcl.id) AND NOT EXISTS  \n" +
            "         (SELECT 1 FROM rfq_consolidated_mfgpn_lineitem_alternate rc JOIN tempconsolidateAlternatePart ta ON rc.id=ta.id WHERE rc.mfgPNID = cq.componentID AND rc.consolidateid = rcl.id AND rc.isDeleted = 0 AND rc.approvedMountingType =ta.approvedMountingType )  \n" +
            "        AND cq.isDeleted= 0;  \n" +
            "  \n" +
            " # remove pricing if selected alternate part remove  \n" +
            "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,  \n" +
            "       (SELECT rcla.consolidateID , COUNT(1) alternateline FROM rfq_consolidated_mfgpn_lineitem_alternate rcla  \n" +
            "       WHERE rcla.consolidateID IN (SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0)  \n" +
            "       AND approvedMountingType = 1 AND rcla.isdeleted = 0 GROUP BY rcla.consolidateID) rcl  \n" +
            "        SET  \n" +
            "        cq.finalPrice = NULL,  \n" +
            "        cq.selectedPIDCode = NULL,  \n" +
            "        cq.selectedMpn = NULL,  \n" +
            "        cq.selectionMode = NULL,  \n" +
            "        cq.supplier = NULL,  \n" +
            "        cq.refSupplierID=NULL,  \n" +
            "        cq.supplierStock = NULL,  \n" +
            "        cq.currentStock = NULL,  \n" +
            "        cq.grossStock = NULL,  \n" +
            "        cq.leadTime = NULL,  \n" +
            "        cq.rfqQtySupplierID=NULL,  \n" +
            "        cq.min = NULL,  \n" +
            "        cq.mult = NULL,  \n" +
            "        cq.unitPrice = NULL,  \n" +
            "        cq.quoteqty=NULL,  \n" +
            "        cq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        cq.updatedBy = puserID  \n" +
            "        WHERE cq.consolidateID = (rcl.consolidateID)  \n" +
            "        AND (CASE WHEN rcl.alternateline > 0 THEN  \n" +
            "			cq.componentID NOT IN (SELECT rc.mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate rc JOIN tempconsolidateAlternatePart ta ON rc.id=ta.id WHERE rc.consolidateid = rcl.consolidateID AND rc.isDeleted = 0 AND rc.approvedMountingType = ta.approvedMountingType)  \n" +
            "		ELSE 1=1 END)  \n" +
            "        AND cq.isDeleted= 0;  \n" +
            "  \n" +
            "# remove pricing for Change is buy  \n" +
            "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,  \n" +
            "        (SELECT id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0  \n" +
            "        AND (cl.isPurchase = 0 OR restrictCPNUseInBOMStep = 1 OR restrictCPNUsePermanentlyStep = 0 OR restrictCPNUseWithPermissionStep= 0)) rcl  \n" +
            "        SET  \n" +
            "        cq.finalPrice = NULL,  \n" +
            "        cq.selectedPIDCode = NULL,  \n" +
            "        cq.selectedMpn = NULL,  \n" +
            "        cq.selectionMode = NULL,  \n" +
            "        cq.supplier = NULL,  \n" +
            "        cq.refSupplierID=NULL,  \n" +
            "        cq.supplierStock = NULL,  \n" +
            "        cq.currentStock = NULL,  \n" +
            "        cq.grossStock = NULL,  \n" +
            "        cq.leadTime = NULL,  \n" +
            "        cq.min = NULL,  \n" +
            "        cq.mult = NULL,  \n" +
            "        cq.quoteqty=NULL,  \n" +
            "        cq.unitPrice = NULL,  \n" +
            "        cq.rfqQtySupplierID=NULL,  \n" +
            "        cq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        cq.updatedBy = puserID  \n" +
            "        WHERE cq.consolidateID IN(rcl.id) AND cq.isDeleted= 0;  \n" +
            "  \n" +
            "# Delete summary details if exists  \n" +
            "		UPDATE `rfq_assy_quotations` rq ,  \n" +
            "			( SELECT rq.qtyID,rl.requestQty,(SUM(rq.unitPrice * ra.qpa * IFNULL(ra.numOfPosition,1))) AS TotalExtendedPrice  \n" +
            "				FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
            "				JOIN rfq_assy_quantity rl ON rl.id = rq.qtyID AND rl.isDeleted = 0  \n" +
            "				JOIN rfq_consolidated_mfgpn_lineitem ra ON ra.id = rq.consolidateID AND ra.isdeleted = 0  \n" +
            "				WHERE  rl.rfqAssyid = prfqAssyID AND ra.isPurchase = 1 AND rq.isDeleted = 0  \n" +
            "				GROUP BY rq.qtyID, rl.requestQty  \n" +
            "			) qtychange  \n" +
            "        SET  \n" +
            "        rq.`unitPrice` = (CASE WHEN CONVERT(rq.unitPrice, DECIMAL(10,2)) != ROUND(qtychange.TotalExtendedPrice,2) THEN 0 ELSE CONVERT(rq.unitPrice, DECIMAL(10,2)) END),  \n" +
            "        rq.`updatedBy` = puserID,  \n" +
            "        rq.`updatedAt` = fun_DatetimetoUTCDateTime()  \n" +
            "        WHERE rq.rfqAssyID = prfqAssyID AND rq.rfqAssyQtyID = qtychange.qtyID AND  CONVERT(rq.unitPrice, DECIMAL(10,2)) != ROUND(qtychange.TotalExtendedPrice,2)  \n" +
            "        AND rq.refSubmittedQuoteID IS NULL AND rq.isDeleted = 0;  \n" +
            "  \n" +
            "# update rfq assembly pricing status  \n" +
            "  \n" +
            "        UPDATE rfq_assemblies  \n" +
            "        SET isReadyForPricing = TRUE,  \n" +
            "        partCostingBOMInternalVersion = pBOMVersion,  \n" +
            "        updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        updatedBy = puserID  \n" +
            "        WHERE id = prfqAssyID AND isDeleted = 0;  \n" +
            "  \n" +
            "# update rfq assembly pricing status  \n" +
            "  \n" +
            "        UPDATE rfq_lineitem_autopricingstatus rlas  \n" +
            "        SET `status` = NULL  \n" +
            "        WHERE rlas.rfqAssyID = prfqAssyID  \n" +
            "        AND EXISTS (SELECT id FROM tempconsolidate tc WHERE tc.id = rlas.consolidateID  \n" +
            "        AND NOT EXISTS (SELECT 1 FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.id = tc.id AND rl.rfqassyId = prfqAssyID AND isdeleted=0));  \n" +
            "--        AND rlas.consolidateID IN (SELECT id FROM tempconsolidate WHERE id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId = prfqAssyID AND isdeleted=0));  \n" +
            "  \n" +
            "#==================================  \n" +
            "/*  Submit Data for Labor Costing */  \n" +
            "#==================================  \n" +
            "        DROP TEMPORARY TABLE IF EXISTS laborResult;  \n" +
            "        CREATE TEMPORARY TABLE IF NOT EXISTS laborResult AS  \n" +
            "        SELECT prfqAssyID AS rfqAssyID, ppartID AS partID, refComponentID AS parPartID, refComponentID AS subAssyID, 1 AS perBuildQty, liveVersion AS BOMinternalversion, 0 isMismatchQPA,1 originalQPA, 0 LEVEL,0 isInstall  \n" +
            "        FROM component_bomsetting WHERE refComponentID = ppartID AND isDeleted = 0  \n" +
            "        UNION  \n" +
            "        SELECT prfqAssyID AS rfqAssyID, ppartID AS partID, partID AS parPartID, mfgPNID AS subAssyID, QPA1 AS perBuildQty, liveVersion BOMinternalversion,  \n" +
            "        (CASE WHEN actualQPA != actualDesgCount THEN 1 ELSE 0 END) isMismatchQPA, (CASE WHEN actualQPA >= actualDesgCount THEN actualQPA ELSE actualDesgCount END) originalQPA, LEVEL, isInstall  \n" +
            "        FROM leveldata  \n" +
            "        WHERE category = 3;  \n" +
            "  \n" +
            "#  delete Labor assy Qty detail when line item removed from assy BOM  \n" +
            "  \n" +
            "        UPDATE rfq_labor_assy_qpa_detail rla  \n" +
            "        SET  \n" +
            "        rla.isDeleted = 1,  \n" +
            "        rla.deletedBy = puserID,  \n" +
            "        rla.deletedAt = fun_DatetimetoUTCDateTime()  \n" +
            "        WHERE rla.partID = ppartID AND rla.rfqAssyID = prfqAssyID AND rla.isDeleted  = 0  \n" +
            "        AND NOT EXISTS(SELECT 1 FROM laborResult lr WHERE lr.subAssyID = rla.subAssyID AND lr.parPartID = rla.parPartID  \n" +
            "        AND rla.rfqAssyID = prfqAssyID AND rla.partID = ppartID AND rla.level = lr.level);  \n" +
            "# Insert Data in to rfq_labor_assy_qpa_detail table for  \n" +
            "        INSERT INTO `rfq_labor_assy_qpa_detail`  \n" +
            "        (`rfqAssyID`,`partID`,`parPartID`,`subAssyID`,`level`,`perBuildQty`,`bomInternalVersion`, `originalQPA`, `isMismatchQPA`,`createdBy`,`updatedBy`,`createdAt`,`updatedAt`)  \n" +
            "		SELECT rfqAssyID, partID, parPartID,subAssyID,LEVEL ,perBuildQty, BOMinternalversion, originalQPA, isMismatchQPA, puserID `createdBy`, puserID `updatedBy`,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime()  \n" +
            "		FROM laborResult lr  \n" +
            "		WHERE NOT EXISTS(SELECT 1 FROM rfq_labor_assy_qpa_detail rla WHERE rla.isDeleted = 0 AND lr.subAssyID = rla.subAssyID  \n" +
            "		AND lr.parPartID = rla.parPartID AND rla.rfqAssyID = prfqAssyID AND rla.partID = ppartID AND lr.level = rla.level);  \n" +
            "  \n" +
            "# Update Data in rfq_labor_assy_qpa_detail table updated record  \n" +
            "		UPDATE rfq_labor_assy_qpa_detail rlaqd,  \n" +
            "        (SELECT parPartID, subAssyID, LEVEL, perBuildQty, bomInternalVersion, originalQPA, isMismatchQPA, isInstall  \n" +
            "        FROM laborResult) lr  \n" +
            "        SET  \n" +
            "        rlaqd.perBuildQty = lr.perBuildQty,  \n" +
            "        rlaqd.bomInternalVersion = lr.bomInternalVersion,  \n" +
            "        rlaqd.originalQPA = lr.originalQPA,  \n" +
            "        rlaqd.isMismatchQPA = lr.isMismatchQPA,  \n" +
            "        rlaqd.isInstall = lr.isInstall,  \n" +
            "        updatedBy = puserID,  \n" +
            "        updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "        WHERE rlaqd.rfqAssyID = prfqAssyID AND rlaqd.partID = ppartID AND lr.parPartID = rlaqd.parPartID AND lr.subAssyID = rlaqd.subAssyID AND lr.level = rlaqd.level AND rlaqd.isDeleted = 0  \n" +
            "        AND (rlaqd.perBuildQty != lr.perBuildQty OR rlaqd.bomInternalVersion != lr.bomInternalVersion OR rlaqd.originalQPA != lr.originalQPA OR rlaqd.isMismatchQPA != lr.isMismatchQPA OR rlaqd.isInstall != lr.isInstall);  \n" +
            "# create temporary table for mounting type wise detail  \n" +
            "        DROP TEMPORARY TABLE IF EXISTS assyBOMMountingTypeDet;  \n" +
            "        CREATE TEMPORARY TABLE IF NOT EXISTS assyBOMMountingTypeDet AS  \n" +
            "		SELECT prfqAssyID `rfqAssyID`, partID AS parPartID, mountingTypeID, `mountingType`,`lineCount`,`totalQPA`,NULL `subAssyID`, isInstall AS `isInstall`  \n" +
            "		FROM (  \n" +
            "			(  \n" +
            "				SELECT  SUM(qpa) AS `totalQPA`, COUNT(a.id) AS `lineCount`,  fun_getMountingTypeNameByID(mountingTypeID) AS mountingType, mountingTypeID, partID, isinstall  \n" +
            "				FROM  \n" +
            "				(  \n" +
            "					SELECT rl.id,(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
            "								(CASE WHEN rl.qpa < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE rl.qpa END)  \n" +
            "							ELSE rl.qpa END) AS qpa, rl.partID, rl.isInstall  \n" +
            "					FROM rfq_lineitems rl  \n" +
            "					WHERE rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
            "				) a  \n" +
            "				INNER JOIN  \n" +
            "				(  \n" +
            "					SELECT 	rl.id,  \n" +
            "					CASE WHEN IFNULL(MAX(com.mountingtypeID),'Unknown') = IFNULL(MIN(com.mountingtypeID),'Unknown')  THEN  \n" +
            "							MAX(com.mountingtypeID)  \n" +
            "						ELSE (SELECT id FROM rfq_mountingtypemst WHERE NAME = \"Mismatched\" LIMIT 1)  END  AS mountingTypeID  \n" +
            "					FROM rfq_lineitems rl  \n" +
            "					INNER JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0  \n" +
            "					LEFT JOIN vu_COMPONENT com ON com.id = (CASE WHEN ra.mfgPNID = -3 AND rl.custPNID IS NOT NULL THEN rl.custPNID ELSE ra.mfgPNID END) AND com.isGoodPart <> 2  \n" +
            "					WHERE rl.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
            "					AND IFNULL(ra.mfgGoodPartMappingStep,1) = 1 AND IFNULL(ra.suggestedGoodPartStep,1) = 1 AND IFNULL(ra.distGoodPartMappingStep,1) = 1 AND IFNULL(ra.suggestedGoodDistPartStep,1) = 1  \n" +
            "					AND rl.isDeleted = 0  AND com.category != 3 AND com.isGoodPart <> 2   AND (IFNULL(ra.mismatchMountingTypeStep,0) = 1 OR ra.approvedMountingType = 1)  \n" +
            "					GROUP BY rl.id  \n" +
            "                    HAVING IFNULL(MAX(com.mountingtypeID),-100) = IFNULL(MIN(com.mountingtypeID),-100) OR (IFNULL(MAX(com.mountingtypeID),-100) != IFNULL(MIN(com.mountingtypeID),-100) AND MAX(IFNULL(ra.approvedMountingType,0)) = 1)  \n" +
            "				) b ON a.id = b.id  \n" +
            "				GROUP BY a.partID , b.mountingTypeID, a.isinstall  \n" +
            "				)  \n" +
            "				UNION  \n" +
            "				(SELECT  SUM(qpa) AS `totalQPA`, COUNT(a.id) AS `lineCount`,  fun_getMountingTypeNameByID(mountingTypeID) AS mountingType, mountingTypeID, partID,isinstall  \n" +
            "				FROM  \n" +
            "				(  \n" +
            "					SELECT rl.id,(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
            "								(CASE WHEN rl.qpa < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE rl.qpa END)  \n" +
            "							ELSE rl.qpa END) AS qpa, rl.partID, rl.isInstall  \n" +
            "					FROM rfq_lineitems rl  \n" +
            "					WHERE rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
            "				) a  \n" +
            "				INNER JOIN  \n" +
            "				(  \n" +
            "					SELECT 	rl.id,  \n" +
            "					(SELECT id FROM rfq_mountingtypemst WHERE NAME = \"Mismatched\" LIMIT 1) AS mountingTypeID  \n" +
            "					FROM rfq_lineitems rl  \n" +
            "					INNER JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0  \n" +
            "					LEFT JOIN vu_COMPONENT com ON com.id = (CASE WHEN ra.mfgPNID = -3 AND rl.custPNID IS NOT NULL THEN rl.custPNID ELSE ra.mfgPNID END) AND com.isGoodPart <> 2  \n" +
            "					WHERE rl.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
            "                    AND IFNULL(ra.mfgGoodPartMappingStep,1) = 1 AND IFNULL(ra.suggestedGoodPartStep,1) = 1 AND IFNULL(ra.distGoodPartMappingStep,1) = 1 AND IFNULL(ra.suggestedGoodDistPartStep,1) = 1  \n" +
            "					AND rl.isDeleted = 0  AND com.category != 3 AND com.isGoodPart <> 2  \n" +
            "					GROUP BY rl.id  \n" +
            "					HAVING IFNULL(MAX(com.mountingtypeID),-100) != IFNULL(MIN(com.mountingtypeID),-100) AND MAX(IFNULL(ra.approvedMountingType,0)) != 1  \n" +
            "				) b ON a.id = b.id  \n" +
            "				GROUP BY a.partID , b.mountingTypeID, a.isInstall)  \n" +
            "			)a  \n" +
            "			UNION  \n" +
            "			(  \n" +
            "				SELECT rfqAssyID AS `rfqAssyID`,parPartID, NULL `mountingTypeID`, NULL mountingType, 1 AS `lineCount`,originalQPA AS `totalQPA`,subAssyID AS `subAssyID`, isInstall AS `isInstall`  \n" +
            "				FROM  \n" +
            "				(  \n" +
            "					SELECT rfqAssyID, parPartID, originalQPA,subAssyID,isInstall  \n" +
            "					FROM rfq_labor_assy_qpa_detail lr  \n" +
            "					WHERE lr.isDeleted = 0 AND lr.parpartId != lr.subAssyId AND lr.rfqAssyID = prfqAssyID  \n" +
            "				)b  \n" +
            "			);  \n" +
            "  \n" +
            "# delete assy Labor Mounting type wise Qty detail when line item removed from assy BOM  \n" +
            "# Note: -100 value is set for null value for mountingtypeID join purpose(in case of mounting type mismatch)  \n" +
            "  		UPDATE rfq_assy_labor_bom_mountingtype_qpa_detail rlmd  \n" +
            "        SET  \n" +
            "        rlmd.isDeleted = 1,  \n" +
            "        rlmd.deletedBy = puserID,  \n" +
            "        rlmd.deletedAt = fun_DatetimetoUTCDateTime()  \n" +
            "        WHERE rlmd.isDeleted = 0 AND rlmd.rfqAssyID = prfqAssyID  \n" +
            "        AND NOT EXISTS (SELECT 1 FROM assyBOMMountingTypeDet amd  \n" +
            "        WHERE rlmd.rfqAssyID = prfqAssyID AND amd.parPartID = rlmd.partID AND (IFNULL(rlmd.mountingTypeID,-100) = IFNULL(amd.mountingtypeID,-100) AND IFNULL(rlmd.subAssyID,-100) = IFNULL(amd.subAssyID,-100)));  \n" +
            "# Insert Data for assy Labor Mounting type wise Qty detail for new added data.  \n" +
            "# Note: -100 value is set for null value for mountingtypeID for join purpose(in case of mounting type mismatch)  \n" +
            "		INSERT INTO `rfq_assy_labor_bom_mountingtype_qpa_detail`  \n" +
            "        (`rfqAssyID`,`partID`,`subAssyID`,`mountingTypeID`,`lineCount`,`totalQPA`, `isInstall`, `createdBy`,`updatedBy`,`createdAt`,`updatedAt`)  \n" +
            "        SELECT rfqAssyID,parPartID,subAssyID,mountingtypeID,lineCount,totalQPA, isInstall, puserID `createdBy`,puserID `updatedBy`, fun_DatetimetoUTCDateTime() `createdAt`, fun_DatetimetoUTCDateTime() `updatedAt`  \n" +
            "		FROM assyBOMMountingTypeDet amd  \n" +
            "		WHERE NOT EXISTS(SELECT 1 FROM rfq_assy_labor_bom_mountingtype_qpa_detail rlmd  \n" +
            "		WHERE rlmd.rfqAssyID = prfqAssyID AND amd.parPartID = rlmd.partID AND rlmd.isDeleted = 0 AND (IFNULL(rlmd.mountingTypeID,-100) = IFNULL(amd.mountingtypeID,-100) AND IFNULL(rlmd.subAssyID,-100) = IFNULL(amd.subAssyID,-100) ));  \n" +
            "  \n" +
            "  \n" +
            "# Update Data for assy Labor Mounting type wise QPA detail for Updated line item when QPA and line count change.  \n" +
            "# Note: -100 value is set for null value for mountingtypeID for join purpose(in case of mounting type mismatch)  \n" +
            "		UPDATE rfq_assy_labor_bom_mountingtype_qpa_detail rlmd,  \n" +
            "        (SELECT lineCount,totalQPA,isInstall,mountingtypeID,subAssyID,parPartID FROM assyBOMMountingTypeDet) amd  \n" +
            "        SET  \n" +
            "        rlmd.lineCount = amd.lineCount,  \n" +
            "        rlmd.totalQPA = amd.totalQPA,  \n" +
            "        rlmd.isInstall = amd.isInstall,  \n" +
            "        rlmd.updatedby = puserID,  \n" +
            "        rlmd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
            "        WHERE  rlmd.rfqAssyID = prfqAssyID AND amd.parPartID = rlmd.partID AND rlmd.isDeleted = 0 AND (IFNULL(rlmd.mountingTypeID,-100) = IFNULL(amd.mountingtypeID,-100) AND IFNULL(rlmd.subAssyID,-100) = IFNULL(amd.subAssyID,-100))  \n" +
            "        AND (IFNULL(rlmd.lineCount,0) != IFNULL(amd.lineCount,0) OR IFNULL(rlmd.totalQPA,0) != IFNULL(amd.totalQPA,0) OR IFNULL(rlmd.isInstall,0) != IFNULL(amd.isInstall,1));  \n" +
            "  \n" +
            "# delete data from labor costing detail table if mounting type data deleted  \n" +
            "		UPDATE rfq_assy_qtywise_bom_laborcosting_detail raql  \n" +
            "        SET  \n" +
            "        raql.isDeleted = 1,  \n" +
            "        raql.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        raql.deletedBy = puserID  \n" +
            "        WHERE EXISTS (SELECT  1 FROM rfq_assy_labor_bom_mountingtype_qpa_detail ramd  \n" +
            "        WHERE ramd.id = raql.rfqAssyBOMMountingID AND ramd.isDeleted = 1 AND ramd.rfqAssyID = prfqAssyID)  \n" +
            "        AND raql.isDeleted = 0;  \n" +
            "# delete data from labor costing detail table if rfq assy quantity data deleted  \n" +
            "		UPDATE rfq_assy_qtywise_bom_laborcosting_detail raql  \n" +
            "        SET  \n" +
            "        raql.isDeleted = 1,  \n" +
            "        raql.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        raql.deletedBy = puserID  \n" +
            "        WHERE EXISTS (SELECT  1 FROM rfq_assy_quantity raq  \n" +
            "        WHERE raq.id = raql.rfqAssyQtyID AND raq.isDeleted = 1 AND raq.rfqAssyID = prfqAssyID)  \n" +
            "        AND raql.isDeleted = 0;  \n" +
            "  \n" +
            "# Insert New Data which are added in rfq_assy_labor_bom_mountingtype_qpa_detail and not in labor costing detail table  \n" +
            "		INSERT INTO `rfq_assy_qtywise_bom_laborcosting_detail`  \n" +
            "        (`rfqAssyQtyID`,`rfqAssyBOMMountingID`,`price`,`perAssyPrice`,`createdBy`,`updatedBy`,`createdAt`,`updatedAt`,`rfqPriceGroupId`,`rfqPriceGroupDetailId`)  \n" +
            "        SELECT raq.id `rfqAssyQtyID`,ramd.id `rfqAssyBOMMountingID`,0 `price`,0 `perAssyPrice`,puserID `createdBy`,puserID `updatedBy`,  \n" +
            "        fun_DatetimetoUTCDateTime() `createdAt`, fun_DatetimetoUTCDateTime() `updatedAt`,raq.rfqPriceGroupId,raq.rfqPriceGroupDetailId  \n" +
            "        FROM rfq_assy_labor_bom_mountingtype_qpa_detail ramd  \n" +
            "        JOIN rfq_assy_quantity raq ON ramd.rfqAssyID = raq.rfqAssyID AND raq.rfqAssyId = prfqAssyID AND raq.isDeleted = 0  \n" +
            "        WHERE ramd.rfqAssyId = prfqAssyID  \n" +
            "        AND NOT EXISTS (SELECT 1 FROM rfq_assy_qtywise_bom_laborcosting_detail raql WHERE raql.rfqAssyBOMMountingID = ramd.id AND raql.isDeleted = 0 AND raql.rfqAssyQtyID = raq.id)  \n" +
            "		AND ramd.isDeleted = 0;  \n" +
            "  \n" +
            "# update labor costing detail if there is any change in Mounting type wise QPA for update per assy price detail  \n" +
            "        UPDATE rfq_assy_qtywise_bom_laborcosting_detail raql,  \n" +
            "        (SELECT id,totalQPA,lineCount,mountingTypeID,partID,subAssyID FROM rfq_assy_labor_bom_mountingtype_qpa_detail ramd WHERE ramd.isDeleted = 0 AND ramd.rfqAssyID = prfqAssyID AND ramd.subAssyID IS NULL) ralmd,  \n" +
            "        (SELECT id FROM rfq_assy_quantity WHERE isDeleted = 0 AND rfqAssyID = prfqAssyID) raq  \n" +
            "        SET  \n" +
            "        raql.perAssyPrice = CAST((raql.price * IFNULL(ralmd.totalQPA,0)) AS DECIMAL(16,6)),  \n" +
            "        raql.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
            "        raql.updatedBy = puserID  \n" +
            "        WHERE ralmd.id = raql.rfqAssyBOMMountingID AND raq.id = raql.rfqAssyQtyID AND raql.isDeleted = 0 AND ralmd.subAssyID IS NULL  \n" +
            "        AND raql.perAssyPrice != CAST((raql.price * IFNULL(ralmd.totalQPA,0)) AS DECIMAL(16,6));  \n" +
            "# update Sub Assembly price based on qpa change  \n" +
            "		CALL `Sproc_getAllAssyLaborDetails`(NULL,prfqAssyID);  \n" +
            "  \n" +
            "#==================================  \n" +
            "/* End for Submit Data for Labor Costing */  \n" +
            "#==================================  \n" +
            "  \n" +
            "    -- Create consolidate qty for price group wise on same assembly,  \n" +
            "		CALL Sproc_CreateRfqConsolidateLineItem_Qty_With_All_RFQ(prfqAssyID,puserID);  \n" +
            "   COMMIT;  \n" +
            "    SELECT id FROM tempconsolidate WHERE id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId = prfqAssyID AND isdeleted=0);  \n" +
            "  \n" +
            "  \n" +
            "/*  UNION  \n" +
            "	SELECT rq.consolidateID AS id FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
            "    LEFT JOIN  rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
            "    WHERE rq.isdeleted=0 AND rq.finalprice IS NULL AND rl.rfqAssyID = prfqAssyID AND  (TIMESTAMPDIFF(SECOND, rq.updatedAt,fun_DatetimetoUTCDateTime())<120) AND (TIMESTAMPDIFF(SECOND, rq.createdAt,fun_DatetimetoUTCDateTime())>120);  \n" +
            "*/  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqConsolidateLineItem;  \n" +
            "    DROP TEMPORARY  TABLE IF EXISTS tempconsolidate;  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS leveldata;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 23-03-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (6046,'2.00','V1','User Story 42507: Apply Part master normalization effect in Costing Module - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6046:
            allDbChangesArray.push(
            /* **************************** New Script -> 23-03-2022 *********************************** */
            "drop procedure if exists `Sproc_CreateRfqConsolidateLineItem_Qty_With_All_RFQ`;  \n" +
            "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem_Qty_With_All_RFQ`(  \n" +
            "	IN prfqAssyID INT,  \n" +
            "	IN puserID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE v_GroupConcatSeparator text;  \n" +
            "	SET SESSION group_concat_max_len = 500000;  \n" +
            "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
            "  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS priceGroupleveldata;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS priceGroupleveldata AS  \n" +
            "		WITH RECURSIVE cte AS  \n" +
            "		(  \n" +
            "			(  \n" +
            "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,1 AS LEVEL, com.category,rla.rfqLineItemsID,  \n" +
            "				rl.refDesig,IFNULL(rl.qpa,0) AS qpacount, IFNULL(rl.qpa,0) AS kitqpacount, IFNULL(rl.dnpQty,0) dnpQty, IFNULL(rl.dnpQty,0) kitdnpQty,  \n" +
            "                rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,  \n" +
            "				(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS qpa1,  \n" +
            "				(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS kitqpa1,  \n" +
            "				(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS dnpQPA1,  \n" +
            "				(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS kitdnpQPA1,  \n" +
            "				IFNULL(rl.refDesigCount,0) refDesigCount, IFNULL(rl.refDesigCount,0) kitrefDesigCount, IFNULL(rl.dnpDesigCount,0) dnpDesigCount, IFNULL(rl.dnpDesigCount,0) kitdnpDesigCount, rl.qpaDesignatorStep, rl.custPNID,  \n" +
            "				IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep,IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep, IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
            "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,  \n" +
            "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,  \n" +
            "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,  \n" +
            "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
            "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,  \n" +
            "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,  \n" +
            "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,  \n" +
            "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,  \n" +
            "				rl.isInstall, rl.isPurchase,rl.lineID,rl.numOfPosition, ra.id AS rfqAssyID,  \n" +
            "				rl.uomID, fun_getAssyPIDCodeByID(rl.partID) PIDCode, com.liveVersion, rl.isNotRequiredKitAllocation,  \n" +
            "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN  \n" +
            "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
            "				ELSE '' END) AS notRequiredKitAllocationReason,  \n" +
            "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep, com.connecterTypeID  \n" +
            "				FROM  rfq_lineitems rl  \n" +
            "				JOIN rfq_lineitems_alternatepart rla ON rla.rfqLineItemsID = rl.id AND rl.isDeleted = 0  \n" +
            "                join rfq_assemblies ra on ra.partID = rl.partID and ra.isDeleted = 0  \n" +
            "				INNER JOIN vu_component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2  \n" +
            "				/*INNER JOIN component comp ON comp.id = rl.partID  */  \n" +
            "				WHERE ra.rfqrefID in (select rfqrefID from rfq_assemblies where id = prfqAssyID) AND rla.isDeleted = 0  \n" +
            "			)  \n" +
            "			UNION ALL  \n" +
            "			(  \n" +
            "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,cte.level+1 AS LEVEL, com.category,rla.rfqLineItemsID, rl.refDesig,  \n" +
            "				(  \n" +
            "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "					END) * IFNULL(rl.qpa,0)  \n" +
            "				) AS qpacount,  \n" +
            "                (  \n" +
            "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							0  \n" +
            "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "						ELSE  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "					END) * IFNULL(rl.qpa,0)  \n" +
            "				) AS kitqpacount,  \n" +
            "				(  \n" +
            "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "					END) * IFNULL(rl.dnpQty,0)  \n" +
            "				) AS dnpQty,  \n" +
            "                (  \n" +
            "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							0  \n" +
            "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "						ELSE  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "					END) * IFNULL(rl.dnpQty,0)  \n" +
            "				) AS kitdnpQty,  \n" +
            "				rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,  \n" +
            "				(  \n" +
            "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "					END)*  \n" +
            "					(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
            "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN  \n" +
            "								IFNULL(rl.refDesigCount,0)  \n" +
            "							ELSE IFNULL(rl.qpa,0)  \n" +
            "						END)  \n" +
            "						ELSE IFNULL(rl.qpa,0)  \n" +
            "					END)  \n" +
            "				) AS qpa1,  \n" +
            "                (  \n" +
            "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							0  \n" +
            "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "						ELSE  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "					END)*  \n" +
            "                    (CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
            "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END)  \n" +
            "					ELSE  \n" +
            "						IFNULL(rl.qpa,0)  \n" +
            "                    END)  \n" +
            "				) AS kitqpa1,  \n" +
            "				(  \n" +
            "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "					END)*  \n" +
            "					(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
            "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN  \n" +
            "								IFNULL(rl.dnpDesigCount,0)  \n" +
            "							ELSE IFNULL(rl.dnpQty,0)  \n" +
            "						END)  \n" +
            "						ELSE IFNULL(rl.dnpQty,0)  \n" +
            "					END)  \n" +
            "				) AS dnpQPA1,  \n" +
            "                (  \n" +
            "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							0  \n" +
            "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "						ELSE  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "					END) *  \n" +
            "                    (CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
            "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END)  \n" +
            "					ELSE  \n" +
            "						IFNULL(rl.dnpQty,0)  \n" +
            "					END)  \n" +
            "				) AS kitdnpQPA1,  \n" +
            "				(  \n" +
            "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "					END) *  \n" +
            "					IFNULL(rl.refDesigCount,0)  \n" +
            "				) refDesigCount,  \n" +
            "                (  \n" +
            "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							0  \n" +
            "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "						ELSE  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "					END) * IFNULL(rl.refDesigCount,0)  \n" +
            "				) AS kitrefDesigCount,  \n" +
            "				(  \n" +
            "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "					END) *  \n" +
            "					IFNULL(rl.dnpDesigCount,0)  \n" +
            "				) dnpDesigCount,  \n" +
            "                (  \n" +
            "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							0  \n" +
            "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "						ELSE  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "					END) *  \n" +
            "					IFNULL(rl.dnpDesigCount,0)  \n" +
            "				) kitdnpDesigCount,  \n" +
            "				(CASE WHEN rl.qpaDesignatorStep != cte.qpaDesignatorStep THEN  \n" +
            "						0  \n" +
            "					ELSE rl.qpaDesignatorStep  \n" +
            "				END) AS qpaDesignatorStep ,  \n" +
            "				rl.custPNID, IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep, IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,  \n" +
            "				IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
            "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,  \n" +
            "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,  \n" +
            "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,  \n" +
            "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
            "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,  \n" +
            "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,  \n" +
            "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,  \n" +
            "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,  \n" +
            "				rl.isInstall, rl.isPurchase, rl.lineID,rl.numOfPosition, cte.rfqAssyID AS rfqAssyID,  \n" +
            "				rl.uomID, fun_getAssyPIDCodeByID(rl.partID) PIDCode, com.liveVersion,rl.isNotRequiredKitAllocation,  \n" +
            "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN  \n" +
            "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
            "				ELSE '' END) AS notRequiredKitAllocationReason,  \n" +
            "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep,com.connecterTypeID  \n" +
            "				FROM  rfq_lineitems rl  \n" +
            "				INNER JOIN rfq_lineitems_alternatepart rla ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
            "				INNER JOIN vu_component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2  \n" +
            "				/*INNER JOIN component comp ON comp.id = rl.partID  */  \n" +
            "				JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID AND (cte.isPurchase = 1 OR (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P'))  \n" +
            "				WHERE rla.isDeleted =0  \n" +
            "			)  \n" +
            "		)  \n" +
            "		SELECT cte.* FROM cte  \n" +
            "		ORDER BY lineItemID;  \n" +
            "  \n" +
            "	-- Create Temporary table for Alternate part with packaging alias grouping by lineitem  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_LevleWisePriceGroupAlternatepartwithPackagingGroup;  \n" +
            "		set @consolidateAlternatePartDetail = concat(\"CREATE TEMPORARY TABLE temp_LevleWisePriceGroupAlternatepartwithPackagingGroup AS  \n" +
            "		SELECT a.rfqAssyID, a.level, a.category, a.rfqlineitemsid, a.partid,  \n" +
            "        (CASE WHEN MIN(a.mountingTypeID) = MAX(a.mountingTypeID) THEN  /* Matched Mounting Type */  \n" +
            "					MIN(a.mountingTypeID)  \n" +
            "			WHEN MIN(a.mountingTypeID) !=  MAX(a.mountingTypeID)  AND MAX(approvedMountingType) = 1 THEN /*Mismatched with Approval Mounting Type */  \n" +
            "					MAX(approvedMountingTypeID)  \n" +
            "			ELSE  -1  /*-1 is TBD in case of Mismatched we need to display TBD mounting type*/ END) mountingtypeID,  \n" +
            "         (CASE WHEN MIN(a.partType) = MAX(a.partType) THEN /* Matched funcitonal Type */  \n" +
            "			MIN(a.partType)  \n" +
            "		ELSE  \n" +
            "			-1   /*-1 is TBD in case of Mismatched we need to display TBD functional type*/  \n" +
            "		END) partType,  \n" +
            "        (CASE WHEN MIN(a.connecterTypeID) = MAX(a.connecterTypeID) THEN  /* Matched connector Type */  \n" +
            "			MIN(a.connecterTypeID)  \n" +
            "		ELSE  \n" +
            "			-1  /*-1 is TBD in case of Mismatched we need to display TBD connector type*/  \n" +
            "		END) AS connecterTypeID,  \n" +
            "        MIN(a.uomMismatchedStep) AS uomMismatchedStep, MIN(a.mismatchFunctionalCategoryStep) AS mismatchFunctionalCategoryStep , MIN(a.mismatchMountingTypeStep) AS mismatchMountingTypeStep,  \n" +
            "        GROUP_CONCAT(a.mfgPNID ORDER BY a.mfgPNID) AS mfgpnIDs,  \n" +
            "        GROUP_CONCAT(CONCAT(a.mfgCodeID, ' | ', a.mfgPNID, ' | ', a.restrictUseInBOMExcludingAliasStep, ' | ',  \n" +
            "						a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | ', a.restrictUseInBOMStep, ' | ',  \n" +
            "						a.restrictUseInBOMWithPermissionStep, ' | ', a.restrictUseExcludingAliasStep, ' | ',  \n" +
            "						a.restrictUseExcludingAliasWithPermissionStep, ' | ', a.restrictUsePermanentlyStep, ' | ',  \n" +
            "						a.restrictUseWithPermissionStep, ' | ', a.connecterTypeID, ' | ', a.partType, ' | ',a.mountingTypeID, ' | ',  \n" +
            "                        a.approvedMountingType ) ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') Part,  \n" +
            "		GROUP_CONCAT(CONCAT('{ Level:', a.level, ' | AssyID:', a.AssyID, ' | Item:', TRIM(a.lineID) + 0, ' | PIDCode:', FUN_GETASSYPIDCODEBYID(a.mfgPNID),  \n" +
            "						' | mfgPNID: ', a.mfgPNID, ' | restrictUseInBOMExcludingAliasStep: ', a.restrictUseInBOMExcludingAliasStep,  \n" +
            "						' | restrictUseInBOMExcludingAliasWithPermissionStep:', a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | restrictUseInBOMStep:', a.restrictUseInBOMStep,  \n" +
            "						' | restrictUseInBOMWithPermissionStep:', a.restrictUseInBOMWithPermissionStep, ' | restrictUseExcludingAliasStep:', a.restrictUseExcludingAliasStep,  \n" +
            "						' | restrictUseExcludingAliasWithPermissionStep:', a.restrictUseExcludingAliasWithPermissionStep, ' | restrictUsePermanentlyStep:', a.restrictUsePermanentlyStep,  \n" +
            "						' | restrictUseWithPermissionStep:', a.restrictUseWithPermissionStep, ' |Connector Type:', fun_getConnectorTypeNameByID(a.connecterTypeID) ,  \n" +
            "                        ' | Functional Type:', fun_getPartTypeNameByID(a.partType), ' | Mounting Type:', fun_getMountingTypeNameByID(a.mountingTypeID),  \n" +
            "                        ' | Approved Mounting Type:', approvedMountingTypeName,'}') ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') AS mfgPartsWithPackagings  \n" +
            "		FROM  \n" +
            "			(SELECT x.rfqAssyID, x.level, x.category, x.rfqlineitemsid, x.partid, x.AssyID, x.lineid, x.mfgPNID, x.mfgCodeID, x.mfgPN,  \n" +
            "					x.PIDCode, x.RoHSStatusID, x.feature, x.isCustom, x.partStatus, x.restrictUseInBOMStep, x.restrictUseInBOMWithPermissionStep,  \n" +
            "					x.restrictUsePermanentlyStep, x.restrictUseWithPermissionStep, x.restrictUseInBOMExcludingAliasStep, x.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "					x.restrictUseExcludingAliasStep, x.restrictUseExcludingAliasWithPermissionStep, x.isDocumentUpload, x.mountingTypeID, x.partType,  \n" +
            "                    x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep,  \n" +
            "                    x.approvedMountingTypeID, x.approvedMountingTypeName  \n" +
            "				FROM  \n" +
            "				(SELECT al.rfqAssyID, al.level, al.category, al.rfqlineitemsid, al.lineid, al.partid, al.pidCode AS AssyID, IFNULL(d.id, c.id) AS mfgPNID,  \n" +
            "						IF((c.id = IFNULL(d.id, c.id)), TRUE, FALSE) isBomLine, IFNULL(c.mfgcodeID, d.mfgCodeId) mfgCodeID, IFNULL(d.mfgPN, c.mfgPN) AS mfgPN,  \n" +
            "						IFNULL(d.PIDCode, c.PIDCode) AS PIDCode, IFNULL(d.RoHSStatusID, c.RoHSStatusID) AS RoHSStatusID, IFNULL(d.feature, c.feature) AS feature,  \n" +
            "						IFNULL(d.isCustom, c.isCustom) AS isCustom, IFNULL(d.partStatus, d.partStatus) AS partStatus,  \n" +
            "						IFNULL(d.mountingTypeID,c.mountingTypeID) AS mountingTypeID, IFNULL(d.functionalCategoryID,c.functionalCategoryID) AS partType,  \n" +
            "                        IFNULL(d.connecterTypeID,IFNULL(c.connecterTypeID,-1)) AS connecterTypeID,  \n" +
            "						al.uomMismatchedStep, al.mismatchFunctionalCategoryStep, al.approvedMountingType,  \n" +
            "                        (CASE WHEN al.approvedMountingType = 1 THEN c.mountingTypeID ELSE -1 END) approvedMountingTypeID,  \n" +
            "                        (CASE WHEN al.approvedMountingType = 1 THEN fun_getMountingTypeNameByID(c.mountingTypeID) ELSE '' END) approvedMountingTypeName,  \n" +
            "                        al.mismatchMountingTypeStep,  \n" +
            "						IFNULL(al.restrictUseInBOMStep, 0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
            "						IFNULL(al.restrictUseInBOMWithPermissionStep, 0) restrictUseInBOMWithPermissionStep,  \n" +
            "						(CASE  \n" +
            "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part */  \n" +
            "								IFNULL(al.restrictUsePermanentlyStep, 1)  \n" +
            "							ELSE	 /*Packaging Alias*/  \n" +
            "								(CASE WHEN IFNULL(d.restrictUsePermanently, 0) = 1 THEN 0 ELSE 1 END)  /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
            "						END) AS restrictUsePermanentlyStep,  \n" +
            "						IFNULL(al.restrictUseWithPermissionStep, 1) restrictUseWithPermissionStep, 	/*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
            "						(CASE  \n" +
            "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN  /*BOM Part*/  \n" +
            "								IFNULL(al.restrictUseInBOMExcludingAliasStep, 0)	 /*Ui side 1 equal to restrict value*/  \n" +
            "							ELSE  \n" +
            "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END) /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "						END) AS restrictUseInBOMExcludingAliasStep,  \n" +
            "						(CASE  \n" +
            "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/  \n" +
            "								IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep, 0)  \n" +
            "							ELSE   /*Packaging Alias*/  \n" +
            "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "						END) AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "						(CASE  \n" +
            "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN 	/*Bom Part*/  \n" +
            "								IFNULL(al.restrictUseExcludingAliasStep, 1)		/*UI Side 0 equal to restrict*/  \n" +
            "							ELSE  \n" +
            "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "						END) AS restrictUseExcludingAliasStep,  \n" +
            "						(CASE  \n" +
            "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/  \n" +
            "								IFNULL(al.restrictUseExcludingAliasWithPermissionStep, 1)	 /*UI Side 0 equal to restrict*/  \n" +
            "							ELSE  \n" +
            "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "						END) AS restrictUseExcludingAliasWithPermissionStep,  \n" +
            "						IFNULL(ccl.isDocumentUpload, IFNULL(ccld.isDocumentUpload, 0)) AS isDocumentUpload  \n" +
            "				FROM  \n" +
            "					priceGroupleveldata al  \n" +
            "				INNER JOIN vu_component c ON al.mfgPNID = c.id  \n" +
            "				LEFT JOIN vu_Component d ON c.packagingGroupid = d.packagingGroupid and d.isGoodPart <> 2  \n" +
            "				LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id  \n" +
            "					AND ccl.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccl.isDeleted = 0  \n" +
            "				LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id  \n" +
            "					AND ccld.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccld.isDeleted = 0  \n" +
            "			) AS X  \n" +
            "			GROUP BY x.rfqAssyID , x.level , x.category, x.rfqlineitemsid , x.partid , x.AssyID , x.lineid , x.mfgPNID , x.mfgCodeID , x.mfgPN , x.PIDCode , x.RoHSStatusID , x.feature , x.isCustom , x.partStatus , x.restrictUseInBOMStep , x.restrictUseInBOMWithPermissionStep ,  \n" +
            "			x.restrictUsePermanentlyStep , x.restrictUseWithPermissionStep , x.restrictUseInBOMExcludingAliasStep ,  \n" +
            "			x.restrictUseInBOMExcludingAliasWithPermissionStep , x.restrictUseExcludingAliasStep , x.restrictUseExcludingAliasWithPermissionStep , x.isDocumentUpload,  \n" +
            "			x.mountingTypeID, x.partType, x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep ,x.approvedMountingTypeID, x.approvedMountingTypeName  \n" +
            "		) a  \n" +
            "		GROUP BY a.rfqAssyID , a.level , a.category, a.rfqlineitemsid , a.partid , a.lineid\");  \n" +
            "  \n" +
            "		PREPARE query2 FROM @consolidateAlternatePartDetail;  \n" +
            "		EXECUTE query2;  \n" +
            "		DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "	-- Create Temporary table for level wise lineitem detail  \n" +
            "        DROP TEMPORARY TABLE IF EXISTS temp_LevleWisePriceGroupLineItemDetail;  \n" +
            "		CREATE TEMPORARY TABLE temp_LevleWisePriceGroupLineItemDetail AS  \n" +
            "		SELECT a.rfqAssyID, a.level, a.rfqlineitemsid, a.partid, a.lineID, a.uomID, a.isInstall,a.numOfPosition,  \n" +
            "				(CASE WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 1  \n" +
            "					THEN (a.qpa1 + IFNULL(a.dnpQPA1, 0))  \n" +
            "				WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 0  \n" +
            "					THEN (IFNULL(a.dnpQPA1, 0))  \n" +
            "				WHEN (a.isBuyDNPQty = 'N' OR a.isBuyDNPQty = 'C') AND a.isPurchase = 1  \n" +
            "					THEN (a.qpa1)  \n" +
            "				ELSE (a.qpa1 + IFNULL(a.dnpQPA1, 0))  \n" +
            "				END) qpa,  /* QPA count for Pricing */  \n" +
            "                (CASE WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty = 'N')) THEN  \n" +
            "							0  \n" +
            "						WHEN ((a.isPurchase = 1 OR a.isInstall = 1) AND (a.isBuyDNPQty = 'N')) THEN  \n" +
            "							(a.kitqpa1)  \n" +
            "						WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty <> 'N')) THEN  \n" +
            "							(a.kitdnpQPA1)  \n" +
            "						ELSE  \n" +
            "							(a.kitdnpQPA1 + a.kitqpa1)  \n" +
            "				END) AS KitqpawithDNP, /* QPA count for Kit Allocation */  \n" +
            "                (CASE WHEN a.isBuyDNPQty = 'N' THEN  \n" +
            "							0  \n" +
            "						ELSE  \n" +
            "							a.kitdnpQPA1  \n" +
            "				END) AS kitdnpWithoutQPA , /* QPA count for Kit Allocation */  \n" +
            "                IFNULL(a.refDesig, '') AS refDesig, IFNULL(dnpDesig, '') AS dnpDesig, a.qpaDesignatorStep, a.custPNID,  \n" +
            "				a.restrictCPNUseInBOMStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseWithPermissionStep, a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason,  \n" +
            "				CONCAT('{ Level:', a.level, ' | Part:', a.PIDCode, ' | Item:', TRIM(a.lineID) + 0, ' | QPA:', TRIM(a.qpacount) + 0, ' | DNP QPA:', TRIM(a.dnpQty) + 0,  \n" +
            "						' | Buy DNP QPA:', (CASE WHEN a.isBuyDNPQty = 'Y' THEN 'Yes' WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned' WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM' ELSE 'No' END),  \n" +
            "						' | RefDes Count:', TRIM(a.refDesigCount) + 0, ' | Buy QPA:', a.isPurchase, ' | DNP RefDes Count:', TRIM(a.dnpDesigCount) + 0, ' | POPULATE:', a.isInstall,  \n" +
            "						' | PartID:', a.partID, ' | KitAllocationNotRequire:',a.isNotRequiredKitAllocation, '}') AS partlineID,  \n" +
            "				(CASE WHEN a.qpaDesignatorStep = 0 AND a.uomID = - 1  \n" +
            "					THEN (CASE WHEN a.qpacount != IFNULL(a.refDesigCount, 0) THEN 1 ELSE 0 END)  \n" +
            "				ELSE 0  \n" +
            "				END) isqpaMismatchflag,  \n" +
            "				(CASE WHEN a.qpaDesignatorStep = 0 AND a.uomID = - 1  \n" +
            "					THEN (CASE WHEN a.dnpQty != IFNULL(a.dnpDesigCount, 0) THEN 1 ELSE 0 END)  \n" +
            "				ELSE 0  \n" +
            "				END) isdnpQPAMismatchflag,  \n" +
            "				(CASE WHEN isBuyDNPQty = 'Y' OR isBuyDNPQty = 'P' OR isPurchase = 1  \n" +
            "					THEN 1  \n" +
            "				ELSE 0  \n" +
            "				END) isPurchaseWithDNP  \n" +
            "		FROM  \n" +
            "			priceGroupleveldata a  \n" +
            "		GROUP BY a.rfqAssyID , a.level , a.rfqlineitemsid , a.partid , a.lineID , a.uomID , a.isInstall ,  \n" +
            "         a.numOfPosition , a.isBuyDNPQty , a.isPurchase , a.qpa1 , a.dnpQPA1 , a.refDesig , a.dnpDesig , a.qpaDesignatorStep ,  \n" +
            "        a.custPNID , a.restrictCPNUseInBOMStep , a.restrictCPNUsePermanentlyStep , a.restrictCPNUseWithPermissionStep , a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "        -- Create Consolidated data in temp table  \n" +
            "        DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqPriceGroupConsolidateLineItem;  \n" +
            "		set @finalConsolidateDetail = concat(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_CreateRfqPriceGroupConsolidateLineItem AS  \n" +
            "		SELECT tl.rfqAssyID, 		tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID,  \n" +
            "				tl.numOfPosition, 	tl.custPNID, 			tl.restrictCPNUseInBOMStep, 	tl.restrictCPNUsePermanentlyStep,  \n" +
            "				tl.restrictCPNUseWithPermissionStep, tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason,  \n" +
            "				mfgpnIDs AS consolidatedmfgPNIDs, tal.Part AS consolidatedPartWithFlagDetail, tal.category, tal.mountingtypeID mountingTypeID,  \n" +
            "                tal.partType, tal.connecterTypeID, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,  \n" +
            "				MIN(tl.rfqlineitemsid) AS rfqlineitemsid,  (SELECT MIN(lineID) FROM priceGroupleveldata WHERE rfqLineitemsID = MIN(tl.rfqlineitemsid)) lineid,  \n" +
            "				(CASE WHEN MAX(tl.isqpaMismatchflag) OR MAX(tl.isdnpQPAMismatchflag) THEN 1 ELSE 0 END) isqpaMismatch,  \n" +
            "				SUM(tl.qpa) qpa, SUM(tl.KitqpawithDNP) KitqpawithDNP, SUM(tl.kitdnpWithoutQPA) kitdnpWithoutQPA,  \n" +
            "				GROUP_CONCAT((CASE WHEN tl.dnpDesig = '' THEN tl.refDesig ELSE CONCAT(tl.refDesig,',',tl.dnpDesig) END)) AS consolidatedrefDesig,  \n" +
            "				GROUP_CONCAT(tl.rfqLineItemsID) AS consolidatedLineItemIDs,  \n" +
            "				COUNT(tl.rfqLineItemsID) AS multiple,  \n" +
            "				GROUP_CONCAT(tl.partlineID SEPARATOR '\",v_GroupConcatSeparator,\"') AS consolidatedpartlineID,  \n" +
            "				GROUP_CONCAT(tal.mfgPartsWithPackagings) AS consolidateRestrictPartDetail  \n" +
            "		FROM  \n" +
            "				temp_LevleWisePriceGroupLineItemDetail tl  \n" +
            "				INNER JOIN temp_LevleWisePriceGroupAlternatepartwithPackagingGroup tal ON tal.rfqLineItemsID = tl.rfqLineItemsID AND tal.level = tl.level  \n" +
            "		GROUP BY  \n" +
            "					tl.rfqAssyID, 	tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID, 			tl.numOfPosition,  \n" +
            "					tl.custPNID, 	tl.restrictCPNUseInBOMStep, 		tl.restrictCPNUsePermanentlyStep, 		tl.restrictCPNUseWithPermissionStep,  \n" +
            "					tal.Part, tal.category, tal.mountingtypeID, tal.partType, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,  \n" +
            "                     tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason  \n" +
            "		ORDER BY rfqlineitemsid\");  \n" +
            "  \n" +
            "		PREPARE query3 FROM @finalConsolidateDetail;  \n" +
            "		EXECUTE query3;  \n" +
            "		DEALLOCATE PREPARE query3;  \n" +
            "						#SELECT * FROM temp_Sproc_CreateRfqPriceGroupConsolidateLineItem;  \n" +
            "  \n" +
            "			# delete record which are deleted  \n" +
            "			UPDATE rfq_consolidate_price_group_mfgpn_lineitem_quantity rcplq,  \n" +
            "				(SELECT  rclq.id FROM rfq_consolidate_mfgpn_lineitem_quantity rclq  \n" +
            "				JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.id = rclq.consolidateID  \n" +
            "				WHERE rcl.rfqAssyID = prfqAssyID AND rclq.isDeleted = 1) drclq  \n" +
            "			SET  \n" +
            "				isDeleted = 0,  \n" +
            "				deletedAt = FUN_DATETIMETOUTCDATETIME(),  \n" +
            "				deletedBy = puserID  \n" +
            "			WHERE rcplq.refConsolidateLineitemQtyId = drclq.id AND rcplq.isDeleted = 0;  \n" +
            "  \n" +
            "	# update Existing record  \n" +
            "			UPDATE rfq_consolidate_price_group_mfgpn_lineitem_quantity rcplq,  \n" +
            "				(SELECT rcl.rfqAssyID, rclq.id, rclq.qtyid, rq.requestQty, rq.rfqPriceGroupId, rcl.consolidatedPartWithFlagDetail,rcl.isInstall,rcl.isPurchase  \n" +
            "					FROM rfq_consolidate_mfgpn_lineitem_quantity rclq  \n" +
            "					JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.id = rclq.consolidateID AND rcl.isDeleted = 0  \n" +
            "					JOIN rfq_assy_quantity rq ON rq.id = rclq.qtyID AND rq.isDeleted = 0 AND rq.rfqPriceGroupID IS NOT NULL  \n" +
            "					WHERE rcl.rfqAssyID = prfqAssyID AND rclq.isDeleted = 0) rclq,  \n" +
            "				(SELECT  rq.rfqAssyID, trcl.qpa, rq.id AS qtyID, rq.requestQty, rq.rfqpriceGroupID, SUM(trcl.qpa * rq.requestQty) consolidatePriceGroupQty,  \n" +
            "					trcl.consolidatedPartWithFlagDetail,trcl.isInstall,trcl.isPurchaseWithDNP  \n" +
            "					FROM temp_Sproc_CreateRfqPriceGroupConsolidateLineItem trcl  \n" +
            "					JOIN rfq_assy_quantity rq ON rq.rfqAssyID = trcl.rfqAssyID AND rq.isDeleted = 0 AND rq.rfqpriceGroupID IS NOT NULL  \n" +
            "					GROUP BY rq.rfqpriceGroupID , trcl.consolidatedPartWithFlagDetail) trclq  \n" +
            "			SET  \n" +
            "				consolidatedQty = trclq.consolidatePriceGroupQty  \n" +
            "			WHERE rclq.rfqAssyID = trclq.rfqAssyID AND rclq.consolidatedPartWithFlagDetail = trclq.consolidatedPartWithFlagDetail  \n" +
            "            AND rclq.qtyID = trclq.qtyID AND rcplq.refConsolidateLineitemQtyId = rclq.id  \n" +
            "            and rclq.isInstall = trclq.isInstall and rclq.isPurchase = trclq.isPurchaseWithDNP;  \n" +
            "  \n" +
            "			# insert New record which are not exists  \n" +
            "			INSERT INTO `rfq_consolidate_price_group_mfgpn_lineitem_quantity`  \n" +
            "			(`refConsolidateLineitemQtyId`,`consolidatedQty`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`)  \n" +
            "			select rclq.id, consolidatePriceGroupQPA, puserID, fun_DatetimetoUTCDateTime(), puserID, fun_DatetimetoUTCDateTime()  \n" +
            "			from rfq_consolidate_mfgpn_lineitem_quantity rclq  \n" +
            "			join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rclq.consolidateID  \n" +
            "			join rfq_assy_quantity rq on rq.id = rclq.qtyID and rq.rfqPriceGroupID is not Null  \n" +
            "			join (  \n" +
            "					select rq.rfqAssyID,trcl.qpa, rq.requestQty, rq.rfqpriceGroupID, sum(trcl.qpa * rq.requestQty) as consolidatePriceGroupQPA,  \n" +
            "					trcl.consolidatedPartWithFlagDetail,trcl.isInstall,trcl.isPurchaseWithDNP  \n" +
            "					from temp_Sproc_CreateRfqPriceGroupConsolidateLineItem trcl  \n" +
            "					join rfq_assy_quantity rq on rq.rfqAssyID = trcl.rfqAssyID and rq.isDeleted = 0 and rq.rfqpriceGroupID is not null  \n" +
            "					group by rq.rfqpriceGroupID,trcl.consolidatedPartWithFlagDetail  \n" +
            "				) trclq on rclq.rfqPriceGroupID = trclq.rfqPriceGroupID  \n" +
            "			where rcl.rfqAssyID = prfqAssyID and trclq.consolidatedPartWithFlagDetail = rcl.consolidatedPartWithFlagDetail and  rclq.isDeleted = 0  \n" +
            "            and rcl.isInstall = trclq.isInstall and rcl.isPurchase = trclq.isPurchaseWithDNP  \n" +
            "			and not exists (  \n" +
            "			select 1 from rfq_consolidate_price_group_mfgpn_lineitem_quantity  \n" +
            "			where refConsolidateLineitemQtyId = rclq.id and isDeleted = 0  \n" +
            "			);  \n" +
            "		# Update price Group BOM version  \n" +
            "		update rfq_assemblies ra, component_bomsetting c, (select rfqrefID from rfq_assemblies where id = prfqAssyID) rfq  \n" +
            "		set ra.priceGroupInternalVersion = c.liveVersion  \n" +
            "		where ra.partID = c.refComponentID and ra.rfqrefID = rfq.rfqrefID and ra.isdeleted = 0;  \n" +
            "  \n" +
            "  \n" +
            "        DROP TEMPORARY TABLE IF EXISTS priceGroupleveldata;  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqPriceGroupConsolidateLineItem;  \n" +
            "        DROP TEMPORARY TABLE IF EXISTS temp_LevleWisePriceGroupLineItemDetail;  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_LevleWisePriceGroupAlternatepartwithPackagingGroup;  \n" +
            "  \n" +
            "	END;  \n" +
            /* **************************** Add Script Version -> 23-03-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (6047,'2.00','V1','User Story 42507: Apply Part master normalization effect in Costing Module - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6047:
            allDbChangesArray.push(
            /* **************************** New Script -> 24-03-2022 *********************************** */
            "DROP TRIGGER IF EXISTS `Trg_AU_Component_Bomsetting`;  \n" +
            "CREATE TRIGGER `Trg_AU_Component_Bomsetting` AFTER UPDATE ON `component_bomsetting` FOR EACH ROW BEGIN  \n" +
            "  \n" +
            "        DECLARE pOldValue TEXT;  \n" +
            "	DECLARE pNewValue TEXT;  \n" +
            "	IF IFNULL(OLD.liveVersion,\"\") != IFNULL(NEW.liveVersion,\"\") THEN  \n" +
            "	       INSERT INTO Component_History  \n" +
            "			(refComponentID,                tableName,                 	Colname,  \n" +
            "			Oldval, 			Newval, 			createdBy,  \n" +
            "			createdAt,  			updatedAt, 			Updatedby,  \n" +
            "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
            "	       VALUES(NEW.refComponentID,				'component',			'Live Version',  \n" +
            "			CAST(OLD.liveVersion AS CHAR), 	CAST(NEW.liveVersion AS CHAR),	 OLD.createdBy,  \n" +
            "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
            "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component_bomsetting','liveVersion'));  \n" +
            "  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF IFNULL(OLD.liveInternalVersion,\"\") != IFNULL(NEW.liveInternalVersion,\"\") THEN  \n" +
            "	       INSERT INTO Component_History  \n" +
            "			(refComponentID,                tableName,                 	Colname,  \n" +
            "			Oldval, 			Newval, 			createdBy,  \n" +
            "			createdAt,  			updatedAt, 			Updatedby,  \n" +
            "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
            "	       VALUES(NEW.refComponentID,				'component',			'Live Internal Version',  \n" +
            "			CAST(OLD.liveInternalVersion AS CHAR), 	CAST(NEW.liveInternalVersion AS CHAR),	 OLD.createdBy,  \n" +
            "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
            "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component_bomsetting','liveInternalVersion'));  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	IF IFNULL(OLD.isBOMVerified,\"\") != IFNULL(NEW.isBOMVerified,\"\") THEN  \n" +
            "		IF OLD.isBOMVerified IS NOT NULL THEN  \n" +
            "				SET pOldValue = CASE WHEN OLD.isBOMVerified = 1 THEN  \n" +
            "											'Yes'  \n" +
            "									WHEN OLD.isBOMVerified = 0 THEN  \n" +
            "											'No'  \n" +
            "									ELSE '' END;  \n" +
            "			END IF;  \n" +
            "		IF NEW.isBOMVerified IS NOT NULL THEN  \n" +
            "			SET pNewValue = CASE WHEN NEW.isBOMVerified = 1 THEN  \n" +
            "										'Yes'  \n" +
            "								WHEN NEW.isBOMVerified = 0 THEN  \n" +
            "										'No'  \n" +
            "								ELSE '' END;  \n" +
            "		END IF;  \n" +
            "	       INSERT INTO Component_History  \n" +
            "			(refComponentID,                tableName,                 	Colname,  \n" +
            "			Oldval, 			Newval, 			createdBy,  \n" +
            "			createdAt,  			updatedAt, 			Updatedby,  \n" +
            "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
            "	       VALUES(NEW.refComponentID,				'component',			'BOM Verified',  \n" +
            "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
            "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
            "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
            "         UPDATE COMPONENT SET isBOMVerified= NEW.isBOMVerified WHERE id=NEW.refComponentID;  \n" +
            "	END IF;  \n" +
            "	IF IFNULL(OLD.exteranalAPICallStatus,\"\") != IFNULL(NEW.exteranalAPICallStatus,\"\") THEN  \n" +
            "	       INSERT INTO Component_History  \n" +
            "			(refComponentID,                tableName,                 	Colname,  \n" +
            "			Oldval, 			Newval, 			createdBy,  \n" +
            "			createdAt,  			updatedAt, 			Updatedby,  \n" +
            "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
            "	       VALUES(NEW.refComponentID,				'component',			'Exteranal API Call Status',  \n" +
            "			CAST(OLD.exteranalAPICallStatus AS CHAR), 	CAST(NEW.exteranalAPICallStatus AS CHAR),	 OLD.createdBy,  \n" +
            "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
            "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component_bomsetting','exteranalAPICallStatus'));  \n" +
            "        UPDATE COMPONENT SET exteranalAPICallStatus= NEW.exteranalAPICallStatus WHERE id=NEW.refComponentID;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 24-03-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (6048,'2.00','V1',' Bug 42488: Facing error while updating part details which is used in BOM. - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
          case 6048:
             allDbChangesArray.push(
             /* **************************** New Script -> 24-03-2022 *********************************** */
             "DROP FUNCTION IF EXISTS `fun_calculateDPMOForWO` ;  \n" +
             "CREATE FUNCTION `fun_calculateDPMOForWO`(  \n" +
             "	 pwoID INT  \n" +
             "    ) RETURNS DECIMAL(18,2)  \n" +
             "BEGIN  \n" +
             "  \n" +
             "	DECLARE v_buildQty INT;  \n" +
             "	DECLARE v_totalSolderPoints INT;  \n" +
             "	DECLARE v_totDefectCntOfReworkOps INT;  \n" +
             "  \n" +
             "	SELECT wo.buildQty ,  \n" +
             "		(SELECT totalSolderPoints FROM `component_settings` WHERE deletedAt IS NULL AND `refComponentID` = wo.partID) totalSolderPoints  \n" +
             "		INTO v_buildQty , v_totalSolderPoints  \n" +
             "	FROM workorder wo  \n" +
             "	WHERE wo.deletedAt IS NULL  \n" +
             "	AND wo.woID = pwoID ;  \n" +
             "  \n" +
             "	SELECT SUM(defectCnt) totDefectCntOfReworkOps INTO v_totDefectCntOfReworkOps  \n" +
             "	FROM workorder_trans_assy_defectdet  \n" +
             "	WHERE deletedAt IS NULL  \n" +
             "	AND woID = pwoID  \n" +
             "	AND opID IN (SELECT opID FROM workorder_operation WHERE deletedAt IS NULL AND woID = pwoID AND isRework = 1)  \n" +
             "	AND isRework = 1  ;  \n" +
             "  \n" +
             "	/* DPMO =   (1000000 * Total Found defect) / (Total solder points * WO Build qty) */  \n" +
             "	RETURN ROUND((1000000 * v_totDefectCntOfReworkOps) / (v_totalSolderPoints * v_buildQty),2);  \n" +
             "    END;  \n" +
             /* **************************** New Script -> 24-03-2022 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorder` ;  \n" +
             "CREATE PROCEDURE `Sproc_GetWorkorder`(  \n" +
             "	IN ppageIndex INT,  \n" +
             "	IN precordPerPage INT,  \n" +
             "	IN pOrderBy VARCHAR(255),  \n" +
             "	IN pWhereClause VARCHAR(16383),  \n" +
             "	IN pWOId INT,  \n" +
             "        IN woSubstatusIds LONGTEXT,  \n" +
             "        IN woTypeIds LONGTEXT,  \n" +
             "        IN rohsStatusIds LONGTEXT,  \n" +
             "        IN assyTypeIds LONGTEXT,  \n" +
             "        IN stdCertificationIds LONGTEXT,  \n" +
             "        IN stdclassIds LONGTEXT,  \n" +
             "        IN isPendingSoMapping TINYINT,  \n" +
             "        IN isPendingkitMapping TINYINT,  \n" +
             "        IN isRunningwo TINYINT,  \n" +
             "        IN isTrackBySerialNumber TINYINT,  \n" +
             "        IN isrushJob TINYINT,  \n" +
             "        IN isstoppedWo TINYINT,  \n" +
             "        IN isnewWo TINYINT,  \n" +
             "        IN isWaterSoluble TINYINT,  \n" +
             "        IN isecodfm TINYINT,  \n" +
             "        IN isOpenWo TINYINT,  \n" +
             "	IN isInterBuildFilter TINYINT,  \n" +
             "        IN customerIds LONGTEXT,  \n" +
             "        IN salesOrderdetails LONGTEXT,  \n" +
             "        IN assyIds LONGTEXT ,  \n" +
             "        IN assyNicknameIds LONGTEXT,  \n" +
             "        IN operationIds LONGTEXT,  \n" +
             "        IN employeeIds LONGTEXT ,  \n" +
             "	IN equipmentIds LONGTEXT,  \n" +
             "	IN materialIds LONGTEXT,  \n" +
             "	IN umidIds LONGTEXT,  \n" +
             "	IN isNoClean TINYINT,  \n" +
             "	IN isFluxNotApplicable TINYINT,  \n" +
             "	IN isKitNotRequired TINYINT  \n" +
             "    )  \n" +
             "BEGIN  \n" +
             "	DECLARE pOffset INT;  \n" +
             "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
             "	DECLARE v_WorkOrderDetailWhere VARCHAR(1000);  \n" +
             "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
             "	DECLARE vMfgNameFormat INT;  \n" +
             "	DECLARE vTimeZone VARCHAR(50);  \n" +
             "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
             "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
             "	SELECT fun_getMFGCodeNameFormat() INTO vMfgNameFormat;  \n" +
             "###  \n" +
             "	SET @temp_Sproc_GetWorkorder = CONCAT(\"  \n" +
             "	SELECT 	wo.woID,			wo.woNumber,				wo.customerID,  \n" +
             "		wo.buildQty,			wo.startTime,				wo.endTime,  \n" +
             "		wo.masterTemplateID,		wo.refrenceWOID,			wo.createdAt,  \n" +
             "		wo.createdBy,			wo.updatedAt,				wo.updatedBy,  \n" +
             "		wo.woStatus,			wo.isDeleted,				wo.excessQty,  \n" +
             "		wo.isClusterApplied,		wo.RoHSStatusID,			wo.woVersion,  \n" +
             "		wo.isWatersoluble,		wo.isOperationTrackBySerialNo,		wo.ECORemark,  \n" +
             "		wo.FCORemark,			wo.isStopWorkorder,			wo.isRevisedWO,  \n" +
             "		wo.isMFGQty,			wo.isOperationsVerified,		wo.terminateWOID,  \n" +
             "		wo.woType,			wo.ecoReqID,				wo.partID,  \n" +
             "		wo.locationDetails,		wo.isHotJob,				wo.initialInternalVersion,  \n" +
             "		wo.terminateWOOPID,		wo.isIncludeSubAssembly,		wo.documentPath,  \n" +
             "		wo.isRackTrackingRequired,	wo.isStrictlyFollowRackValidation,	wo.createByRoleId,  \n" +
             "		wo.updateByRoleId,		wo.selectedSampleID,			wo.isNoClean,  wo.isFluxNotApplicable ,  \n" +
             "		wo.isInternalBuild,		wo.proposedUmidQty,  \n" +
             "		wo.woSubStatus,(case when wo.isRackTrackingRequired=1 then 'Yes' else 'No' end) as   rackTrackingRequired,  \n" +
             "		(case when wo.isStrictlyFollowRackValidation=1 then 'Yes' else 'No' end) as   strictlyFollowRackValidation,  \n" +
             "		fun_getIntToText(wo.isInternalBuild) as  isInternalBuildConvertedValue,  \n" +
             "		fun_getUserNameByID(wo.updatedBy) woModifiedBy,  \n" +
             "		fun_getUserNameByID(wo.createdBy) woCreatedBy,  \n" +
             "		fun_getRoleByID(wo.updateByRoleId) updatedbyRole,  \n" +
             "		fun_getRoleByID(wo.createByRoleId) createdbyRole,  \n" +
             "		fun_ApplyCommonDateTimeFormatByParaValue(wo.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') woCreatedAt,  \n" +
             " 		fun_ApplyCommonDateTimeFormatByParaValue(wo.updatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') woUpdatedAt,  \n" +
             "		fun_GetFormattedMfgCode(mf.mfgCode,mf.mfgName, '\", vMfgNameFormat, \"') mfgCodeName,  \n" +
             "		vu_compn.PIDCODE AS PIDCode,  \n" +
             "		vu_compn.mfgPN AS mfgPN,  \n" +
             "		vu_compn.nickname AS nickName,  \n" +
             "		vu_compn.mfgPNDescription AS mfgPNDescription,  \n" +
             "		vu_compn.rev AS rev,  \n" +
             "		vu_compn.liveVersion AS liveVersion,  \n" +
             "		vu_compn.isCustom,  \n" +
             "		wthu.woTransHoldUnholdId,  \n" +
             "		vuwosummstk.shippedQty,  \n" +
             "		vuwosummstk.readytoShipQty,  \n" +
             "		vuwosummstk.scrapQty AS scrappedQty ,  \n" +
             "		`vuwosummstk`.`stockAdjustmentQty`,  \n" +
             "		`tmp_vuwotransfer`.`OP Name` AS fromOpName,  \n" +
             "		`tmp_vuwotransfer`.`OP Number` AS fromOpNumber,  \n" +
             "		`tmp_vuwotransfer`.`woOPID Identity` AS fromWOOPID,  \n" +
             "		`tmp_vuwotransfer`.`TransferQty` AS transferQty,  \n" +
             "		`tmp_vuwotransfer`.`To WO Number` AS transferWoNumber,  \n" +
             "		`tmp_vuwotransfer`.`To WO Version` AS transferWoVersion,  \n" +
             "		fun_getWoSubStatusNameByID(`wo`.`woSubStatus`) AS `woSubStatusConvertedValue`,  \n" +
             "		-- fun_getReadyStock(`wo`.`woID`) AS returnPending,  \n" +
             "		(IFNULL(vuwosummstk.buildQty,0) - IFNULL(vuwosummstk.firstOPtotalQty,0)) AS returnPending,  \n" +
             "		CAST(fun_getMinShippingDateByWOID(`wo`.`woID`) AS DATETIME) AS shippingDate,  \n" +
             "		ro.rohsIcon,  \n" +
             "		`ro`.`name` AS `rohsName` ,  \n" +
             "		tmp_workorder_operation.opCount opCount,  \n" +
             "		tmp_workorder_reqforreview.woReviewChangesCount woReviewChangesCount,  \n" +
             "		tmp_eco_request.ecoRequestCount ecoRequestCount,  \n" +
             "		tmp_eco_request.dfmRequestCount as dfmRequestCount,  \n" +
             "		tmp_workorder_cluster.parallelClusterCount,  \n" +
             "		fun_getSampleAvailableConvertedValueByAssyID(wo.partID) AS `isSampleAvailableConvertedValue` ,  \n" +
             "		fun_getIntToText(wo.isHotJob) AS `isHotJobConvertedValue`,  \n" +
             "		fun_getIntToText(`wo`.`isOperationTrackBySerialNo`) AS `isOperationTrackBySerialNoConvertedValue`,  \n" +
             "		fun_getwoTypeNameByType(`wo`.`woType`) AS `woTypeConvertedText`,  \n" +
             "		fun_getIntToText(`wo`.`isStopWorkorder`) AS `isHalt`,  \n" +
             "		fun_getWOHoldUnholdReason(wo.woID,wo.isStopWorkorder,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS reasonDetails,  \n" +
             "		tmp_workorder_operation.stopOperationCount as stopOperationCount,  \n" +
             "		vusalesorderdet.totalPOQty,  \n" +
             "		vusalesorderdet.POQtyValues soPOQty,  \n" +
             "   		vusalesorderdet.totalMRPQty,  \n" +
             "   		vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
             "   		CASE WHEN wo.isRevisedWO = 1 THEN parentSODtl.poNumber ELSE vusalesorderdet.poNumber END poNumber,  \n" +
             "		CASE WHEN wo.isRevisedWO = 1 THEN parentSODtl.salesOrderNumber ELSE vusalesorderdet.salesOrderNumber END salesOrderNumber,  \n" +
             "		vusalesorderdet.lineID ,  \n" +
             "		 vusalesorderdet.salesOrderMstIDs,  \n" +
             "		 vusalesorderdet.SOPOQtyValues ,  \n" +
             "		fun_getKitReleaseStatusByWoID(wo.woID) kitReleaseStatus,  \n" +
             "		(CASE WHEN vu_compn.totalSolderPoints > 0 THEN fun_calculateDPMOForWO(wo.woID) ELSE NULL END) AS DPMO  ,  \n" +
             "		tmp_workorder_reqrevcomments.pendingWOReqThreadCount as pendingWOReqThreadCount,  \n" +
             "		fun_getAssyTypeByID(vu_compn.assemblyType) as assyTypeName ,  \n" +
             "		wo.isKitAllocationNotRequired,  \n" +
             "		Round(((IFNULL(vuwosummstk.readytoShipQty,0) + IFNULL(vuwosummstk.scrapQty,0) + IFNULL(vuwosummstk.shippedQty,0))/IFNULL(wo.buildQty,0))*100,2) AS `woCompletionPercentage`,  \n" +
             "		fun_getIntToText(wo.isKitAllocationNotRequired) isKitAllocationNotRequiredConvertedValue,  \n" +
             "        (CASE WHEN vu_compn.isFluxNotApplicable = 1 THEN 'NA'  \n" +
             "				  WHEN vu_compn.isNoClean = 0 AND vu_compn.isWaterSoluble = 1 THEN 'WS'  \n" +
             "                  WHEN vu_compn.isNoClean = 1 AND vu_compn.isWaterSoluble = 0 THEN 'NC'  \n" +
             "                  WHEN vu_compn.isNoClean = 1 AND vu_compn.isWaterSoluble = 1 THEN 'BOTH' ELSE 'NCF'  END) assyFluxType,  \n" +
             "            (CASE WHEN vu_compn.isFluxNotApplicable = 1 THEN 'Not Applicable'  \n" +
             "				  WHEN vu_compn.isNoClean = 0 AND vu_compn.isWaterSoluble = 1 THEN 'Water-Soluble'  \n" +
             "                  WHEN vu_compn.isNoClean = 1 AND vu_compn.isWaterSoluble = 0 THEN 'No-Clean'  \n" +
             "                  WHEN vu_compn.isNoClean = 1 AND vu_compn.isWaterSoluble = 1 THEN 'Water-Soluble and No-Clean'  \n" +
             "                  ELSE 'No-Configured' END ) assyFluxTypeConvertedValue ,  \n" +
             "                wo.systemID systemID  \n" +
             "	FROM  \n" +
             "		workorder wo  \n" +
             "		INNER JOIN vu_component_mpn vu_compn ON wo.partID = vu_compn.id AND IFNULL(vu_compn.isdeleted,0) = 0 AND IFNULL(vu_compn.category,0) = 3  \n" +
             "		INNER JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
             "		LEFT OUTER JOIN vu_workorder_summary_stk vuwosummstk ON (vuwosummstk.woid = wo.woID)  \n" +
             "		LEFT OUTER JOIN mfgCodeMst mf ON wo.customerID = mf.id  \n" +
             "		LEFT OUTER JOIN workorder_trans_hold_unhold wthu ON wo.woID = wthu.woID AND wthu.isDeleted = 0  AND wthu.endDate IS NULL  \n" +
             "		LEFT OUTER JOIN (  \n" +
             "			SELECT  \n" +
             "				`wotransfer`.`OP Name`,  \n" +
             "				`wotransfer`.`OP Number`,  \n" +
             "				`wotransfer`.`woOPID Identity`,  \n" +
             "				`wotransfer`.`To WO Number`,  \n" +
             "				`wotransfer`.`To WO Version`,  \n" +
             "				`wotransfer`.`woID Identity` AS woID,  \n" +
             "				SUM(`wotransfer`.`Transfer Qty`) `TransferQty`  \n" +
             "			FROM  \n" +
             "				vu_workorder_transfer_report wotransfer  \n" +
             "			GROUP BY  \n" +
             "				`wotransfer`.`OP Name`,  \n" +
             "				`wotransfer`.`OP Number`,  \n" +
             "				`wotransfer`.`woOPID Identity`,  \n" +
             "				`wotransfer`.`To WO Number`,  \n" +
             "				`wotransfer`.`To WO Version`,  \n" +
             "				`wotransfer`.`woID Identity`  \n" +
             "		) as tmp_vuwotransfer ON `tmp_vuwotransfer`.`woID` = wo.woID  \n" +
             "		LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
             "		LEFT OUTER JOIN (  \n" +
             "			SELECT  \n" +
             "				woID,  \n" +
             "				SUM(IF(er.requestType = 1, 1,0)) AS  ecoRequestCount,  \n" +
             "				SUM(IF(er.requestType = 2, 1,0)) AS dfmRequestCount  \n" +
             "			FROM  \n" +
             "				eco_request er  \n" +
             "			WHERE  er.isDeleted  = 0  \n" +
             "			GROUP BY woID) as tmp_eco_request ON tmp_eco_request.woID = wo.woID  \n" +
             "		LEFT OUTER JOIN (  \n" +
             "			SELECT  \n" +
             "				woID, COUNT(1) AS parallelClusterCount  \n" +
             "			FROM  \n" +
             "				workorder_cluster woc  \n" +
             "			WHERE  \n" +
             "				woc.isDeleted = 0 AND woc.isParellelOperation = 1  \n" +
             "				GROUP BY woID  \n" +
             "		) as tmp_workorder_cluster ON tmp_workorder_cluster.woID = wo.woID  \n" +
             "		LEFT OUTER JOIN (  \n" +
             "			SELECT  \n" +
             "				woID, COUNT(1)  AS woReviewChangesCount  \n" +
             "			FROM  \n" +
             "				workorder_reqforreview  \n" +
             "			WHERE  isDeleted = 0  \n" +
             "			GROUP BY woID  \n" +
             "		) as tmp_workorder_reqforreview ON tmp_workorder_reqforreview.woID = wo.woID  \n" +
             "		LEFT OUTER JOIN (  \n" +
             "			SELECT  \n" +
             "				woID,  \n" +
             "				COUNT(*) AS opCount,  \n" +
             "				SUM(IF(isStopOperation = 1,1,0)) AS stopOperationCount  \n" +
             "			FROM  \n" +
             "				workorder_operation  \n" +
             "			WHERE  isDeleted = 0  \n" +
             "			GROUP BY woID  \n" +
             "		) as tmp_workorder_operation ON tmp_workorder_operation.woID = wo.woID  \n" +
             "		LEFT OUTER JOIN (  \n" +
             "			SELECT  \n" +
             "				wr.woID, COUNT(1) AS pendingWOReqThreadCount  \n" +
             "			FROM  \n" +
             "				workorder AS wo  \n" +
             "				INNER JOIN workorder_reqrevcomments AS wr ON wo.woID = wr.woID  \n" +
             "			WHERE  \n" +
             "				wr.isDeleted = 0  AND wr.accRejStatus = 'P'  \n" +
             "				AND wr.commentemployeeID != fun_getEmployeeIDByUserID(wo.createdBy)  \n" +
             "			GROUP BY woID) as tmp_workorder_reqrevcomments  ON tmp_workorder_reqrevcomments.woID = wo.woID  \n" +
             "		LEFT JOIN vu_workorder_salesorder_details parentSODtl ON parentSODtl.woID = wo.terminateWOID  \n" +
             "	WHERE  \n" +
             "		wo.isdeleted = 0\");  \n" +
             " ##select @temp_Sproc_GetWorkorder;  \n" +
             "  IF(woSubstatusIds IS NOT NULL AND woSubstatusIds!='') THEN  \n" +
             "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.woSubStatus in (', woSubstatusIds, ' )');  \n" +
             "  END IF;  \n" +
             "  IF(woTypeIds IS NOT NULL AND woTypeIds!='') THEN  \n" +
             "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.woType in (', woTypeIds, ' )');  \n" +
             "  END IF;  \n" +
             "  IF(rohsStatusIds IS NOT NULL AND rohsStatusIds!='') THEN  \n" +
             "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.RoHSStatusID in (', rohsStatusIds, ' )');  \n" +
             "  END IF;  \n" +
             "  IF(assyTypeIds IS NOT NULL AND assyTypeIds!='') THEN  \n" +
             "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.partId IN (SELECT c.id FROM component c WHERE c.isDeleted = 0 and c.assemblyType IN (',assyTypeIds,'))');  \n" +
             "  END IF;  \n" +
             "IF (stdCertificationIds IS NOT NULL AND stdCertificationIds != '' AND  \n" +
             "		stdclassIds IS NOT NULL AND stdclassIds != '') THEN  \n" +
             "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_certification wc where wc.woID = wo.woID and wc.isDeleted = 0 and wc.certificatestandardID in (', stdCertificationIds, ' ) and wc.classIds in (', stdclassIds, ' )) ');  \n" +
             "	ELSEIF (stdCertificationIds IS NOT NULL AND stdCertificationIds != '') THEN  \n" +
             "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_certification wc where wc.woID = wo.woID and wc.isDeleted = 0 and wc.certificatestandardID in (', stdCertificationIds, ' )) ');  \n" +
             "	ELSEIF (stdclassIds IS NOT NULL AND stdclassIds != '') THEN  \n" +
             "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_certification wc where wc.woID = wo.woID and wc.isDeleted = 0 and wc.classIds in (', stdclassIds, ' )) ');  \n" +
             "    END IF;  \n" +
             "  IF(isPendingSoMapping=1)THEN  \n" +
             "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND NOT exists (select 1 from workorder_salesorder_details ws where ws.woID = wo.woID and ws.isDeleted = 0 ) ');  \n" +
             "  END IF;  \n" +
             "  IF(isPendingkitMapping=1)THEN  \n" +
             "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND NOT exists (select 1 from salesorder_plan_detailsmst sp where sp.woID = wo.woID and sp.isDeleted = 0 ) ');  \n" +
             "  END IF;  \n" +
             "IF(isRunningwo=1)THEN  \n" +
             "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_trans wt where wt.woID = wo.woID and wt.isDeleted = 0 and wt.checkinTime is not null and wt.checkoutTime is null) ');  \n" +
             "END IF;  \n" +
             "IF(isTrackBySerialNumber=1)THEN  \n" +
             "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isOperationTrackBySerialNo=1');  \n" +
             "END IF;  \n" +
             "IF(isrushJob=1)THEN  \n" +
             "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isHotJob=1');  \n" +
             "END IF;  \n" +
             "IF(isstoppedWo=1)THEN  \n" +
             "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isStopWorkorder=1');  \n" +
             "END IF;  \n" +
             "  IF(isnewWo IS NOT NULL)THEN  \n" +
             "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isRevisedWO=',isnewWo,'');  \n" +
             "  END IF;  \n" +
             "  IF(isecodfm=1)THEN  \n" +
             "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from eco_request er where er.woID = wo.woID and er.isDeleted = 0 ) ');  \n" +
             "  END IF;  \n" +
             "  IF(isWaterSoluble = 1)THEN  \n" +
             "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isWatersoluble=1');  \n" +
             "  END IF;  \n" +
             "  IF(isNoClean = 1)THEN  \n" +
             "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isNoClean=1');  \n" +
             "  END IF;  \n" +
             "  IF(isFluxNotApplicable = 1)THEN  \n" +
             "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isFluxNotApplicable=1');  \n" +
             "  END IF;  \n" +
             "  IF(isOpenWo IS NOT NULL)THEN  \n" +
             "	IF(isOpenWo=1)THEN  \n" +
             "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from eco_request er where er.woID = wo.woID and er.isDeleted = 0 and er.finalStatus=\"P\") ');  \n" +
             "	ELSE  \n" +
             "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from eco_request er where er.woID = wo.woID and er.isDeleted = 0 and er.finalStatus!=\"P\") ');  \n" +
             "	END IF;  \n" +
             "  END IF;  \n" +
             "   IF(isInterBuildFilter =1)THEN  \n" +
             "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND isInternalBuild = 1 ');  \n" +
             "	END IF;  \n" +
             "    IF(isKitNotRequired =1)THEN  \n" +
             "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND isKitAllocationNotRequired = 1 ');  \n" +
             "	END IF;  \n" +
             "  IF(customerIds IS NOT NULL AND customerIds!='')THEN  \n" +
             "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.customerID in (', customerIds, ' )');  \n" +
             "  END IF;  \n" +
             "  IF(salesOrderdetails IS NOT NULL AND salesOrderdetails!='')THEN  \n" +
             "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_salesorder_details ws where ws.woID = wo.woID and ws.isDeleted = 0  and ws.salesorderdetailID in (select sd.id from salesorderdet sd where sd.isDeleted = 0 and sd.refSalesOrderID in (',salesOrderdetails,'))) ');  \n" +
             "  END IF;  \n" +
             "  IF(assyIds IS NOT NULL AND assyIds!='') THEN  \n" +
             "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder,' and wo.partID in (', assyIds, ' )');  \n" +
             "  END IF;  \n" +
             "  IF(assyNicknameIds IS NOT NULL AND assyNicknameIds!='') THEN  \n" +
             "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.partID in (select c.id from component c where c.nickname in (', assyNicknameIds, ' ))');  \n" +
             "  END IF;  \n" +
             "  IF (operationIds IS NOT NULL AND operationIds != '') THEN  \n" +
             "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_operation woop where woop.woID = wo.woID and woop.isDeleted = 0 and woop.opID in (', operationIds, ' )) ');  \n" +
             "  END IF;  \n" +
             "  IF (employeeIds IS NOT NULL AND employeeIds != '' AND operationIds IS NOT NULL AND operationIds != '') THEN  \n" +
             "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_employee woe where woe.woID = wo.woID and woe.isDeleted = 0 and woe.opID in (',operationIds,') and woe.employeeID in (', employeeIds, ' ))  \n" +
             "	OR  exists (select 1 from  workorder_trans_empinout wte where wte.woID = wo.woID and wte.isDeleted = 0 and wte.opID in (',operationIds,') and wte.employeeID in (', employeeIds, ' )))');  \n" +
             "  ELSEIF(employeeIds IS NOT NULL AND employeeIds != '') THEN  \n" +
             "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_employee woe where woe.woID = wo.woID and woe.isDeleted = 0  and woe.employeeID in (', employeeIds, ' ))  \n" +
             "            OR  exists(select 1 from workorder_trans_empinout wte where wte.woID = wo.woID and wte.isDeleted = 0 and  wte.employeeID in (', employeeIds, ' ))  \n" +
             "            OR  exists(select 1 from workorder_trans_umid_details wtu where wtu.woTransID in (select wt.woTransID from  workorder_trans wt where wt.isDeleted = 0 and wt.woID=wo.woID) and wtu.isDeleted = 0 and  wtu.employeeID in (', employeeIds, ' )))');  \n" +
             "  END IF;  \n" +
             "  IF(equipmentIds IS NOT NULL AND equipmentIds != '') THEN  \n" +
             "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_equipment woe where woe.woID = wo.woID and woe.isDeleted = 0  and woe.eqpID in (', equipmentIds, ' ))  \n" +
             "            OR  exists(select 1 from workorder_trans wt where wt.woID = wo.woID and wt.isDeleted = 0 and  wt.equipmentID in (', equipmentIds, ' ))  \n" +
             "            OR exists(select 1 from workorder_operation_equipment_feeder_details woef where woef.woopeqpid in (select woe.woOpEqpID from workorder_operation_equipment woe where woe.woID=wo.woID and woe.isDeleted = 0) and woef.isDeleted = 0 and  woef.eqpID in (', equipmentIds, ' )))');  \n" +
             "  END IF;  \n" +
             "  IF(materialIds IS NOT NULL AND materialIds != '') THEN  \n" +
             "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_part wop where wop.woID = wo.woID and wop.isDeleted = 0  and wop.partID in (', materialIds, ' ))  \n" +
             "            OR exists(select 1 from workorder_trans_umid_details wtu where wtu.woTransID in (select wt.woTransID from  workorder_trans wt where wt.isDeleted = 0 and wt.woID=wo.woID) and wtu.isDeleted = 0 and  wtu.mfgpnid in (', materialIds, ' )))');  \n" +
             "  END IF;  \n" +
             "  IF(umidIds IS NOT NULL AND umidIds != '') THEN  \n" +
             "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists(select 1 from workorder_trans_umid_details wtu where wtu.woTransID in (select wt.woTransID from  workorder_trans wt where wt.isDeleted = 0 and wt.woID=wo.woID) and wtu.isDeleted = 0 and  wtu.refsidid in (select csd.id from component_sid_stock csd where csd.uid in (', umidIds, ' ) and csd.isDeleted = 0))');  \n" +
             "  END IF;  \n" +
             "	IF (pOrderBy IS NOT NULL) THEN  \n" +
             "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
             "	ELSE  \n" +
             "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"nickName ASC\") ;  \n" +
             "	END IF;  \n" +
             "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
             "		SET pWhereClause = '1=1' ;  \n" +
             "	END IF;  \n" +
             "    IF (pWOId != 0) THEN  \n" +
             "		SET v_WorkOrderDetailWhere = CONCAT(\" AND woID = \", pWOId);  \n" +
             "	END IF;  \n" +
             "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
             "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
             "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
             "	ELSE  \n" +
             "		SET rowNumWhere = '';  \n" +
             "	END IF;  \n" +
             "	  /* to get total count of rows */  \n" +
             "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetWorkorder,\" ) c where 1=1 and \", pWhereClause,IFNULL(v_WorkOrderDetailWhere, ''));  \n" +
             "	PREPARE query2 FROM @SQLStatement2;  \n" +
             "	EXECUTE query2;  \n" +
             "	DEALLOCATE PREPARE query2;  \n" +
             "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetWorkorder,\" ) c  where \", pWhereClause,IFNULL(v_WorkOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
             "	PREPARE query1 FROM @SQLStatement2;  \n" +
             "	EXECUTE query1;  \n" +
             "	DEALLOCATE PREPARE query1;  \n" +
             "	/* to get total count of rows of workorder table */  \n" +
             "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) FROM workorder where isDeleted = 0\" );  \n" +
             "	PREPARE query3 FROM @SQLStatement3;  \n" +
             "	EXECUTE query3;  \n" +
             "	DEALLOCATE PREPARE query3;  \n" +
             "  \n" +
             "    END;  \n" +
             /* **************************** New Script -> 24-03-2022 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetWOHeaderDisplayDetails` ;  \n" +
             "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(  \n" +
             "	IN pwoID INT,  \n" +
             "	IN pwoOPID INT,  \n" +
             "	IN pwoTransID INT,  \n" +
             "	IN pWaterSolubleCleanType VARCHAR(5),  \n" +
             "	IN pNoCleanCleanType VARCHAR(5),  \n" +
             "	IN pwoAssyID INT ,  \n" +
             "	IN pemployeeIDOfWOOP INT  \n" +
             "    )  \n" +
             "BEGIN  \n" +
             "	DECLARE vMfgNameFormat INT;  \n" +
             "    SELECT fun_getMFGCodeNameFormat() INTO vMfgNameFormat;  \n" +
             "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN  \n" +
             "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`, `wo`.`woStatus`, `wo`.`woSubStatus`,  \n" +
             "			`wo`.`FCORemark`, `wo`.`buildQty`, `wo`.`woVersion`,  \n" +
             "			`wo`.`isOperationTrackBySerialNo`,  \n" +
             "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
             "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
             "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
             "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
             "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
             "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isFluxNotApplicable`, `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`, `wo`.`isRevisedWO`,  \n" +
             "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
             "				WHERE woTransEmpinout.isDeleted=0  \n" +
             "				AND woTransEmpinout.woID=pwoID  \n" +
             "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
             "			`wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
             "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
             "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
             "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
             "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
             "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
             "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers ,  \n" +
             "			`vu_compn`.`PIDCode` ,  IFNULL(`vusalesorderdet`.`partDescription`,  `vu_compn`.`mfgPNDescription`) AS partDescription,  \n" +
             "			`vu_compn`.`liveVersion` AS liveVersion,  \n" +
             "			`vu_compn`.`mfgPN`, `vu_compn`.`nickName`, `vu_compn`.`custAssyPN`, `vu_compn`.`rev`, `vu_compn`.`RoHSStatusID` ,  \n" +
             "			`vu_compn`.specialNote, vu_compn.totalSolderPoints, `vu_compn`.isCustom ,  \n" +
             "			`ro`.`rohsIcon`,`ro`.`name` AS `rohsName`,  \n" +
             "			    `vu_compn`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
             "			    `vu_compn`.`isNoClean` AS `assyNoClean`,  \n" +
             "			    `vu_compn`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
             "			    `mf`.mfgType,  \n" +
             "			    fun_getSamplePicturesUploadCount(`vu_compn`.id) sampleImageCnt,  \n" +
             "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,  \n" +
             "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
             "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
             "			     CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
             "			     CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.soType ELSE parentSaleDtl.soType END soType,  \n" +
             "			     vusalesorderdet.lineID,  \n" +
             "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues,  \n" +
             "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
             "					THEN `wo`.isHotJob  \n" +
             "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
             "   			 (CASE WHEN `vu_compn`.totalSolderPoints IS NOT NULL  \n" +
             "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
             "				ELSE NULL END) AS DPMO,  \n" +
             "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
             "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
             "				WHERE refWOID = pwoID)  \n" +
             "			) AS parentWorkorders  ,  \n" +
             "			wo.terminateWOID refWOId,  \n" +
             "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
             "			    fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp ,  \n" +
             "			    wo.customerID,  \n" +
             "			    fun_GetFormattedMfgCode(mf.mfgCode,mf.mfgName,vMfgNameFormat)  formattedCustomerName  \n" +
             "		FROM workorder AS `wo`  \n" +
             "			LEFT OUTER JOIN  \n" +
             "			(SELECT a.woID, GROUP_CONCAT(b.fullName,' ' ,  \n" +
             "				CASE WHEN a.classIDs IS NULL THEN ''  \n" +
             "					ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
             "				ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
             "			FROM `workorder_certification` a  \n" +
             "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
             "			 WHERE a.isDeleted=0 AND a.woID = pwoID  \n" +
             "			 GROUP BY a.woID  \n" +
             "			) AS `wocerti`  \n" +
             "			ON `wo`.`woID` = `wocerti`.`woID`  \n" +
             "			LEFT OUTER JOIN `vu_component_mpn` AS `vu_compn` ON `wo`.`partID` = `vu_compn`.`id` AND `vu_compn`.`isDeleted`=0  \n" +
             "			LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  AND `ro`.`isDeleted`=0  \n" +
             "			LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
             "			LEFT OUTER JOIN mfgCodeMst mf ON vu_compn.mfgcodeID = mf.id  \n" +
             "			LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
             "		WHERE `wo`.`isDeleted`=0 AND `wo`.`woID` = pwoID;  \n" +
             "		-- GROUP BY `wo`.`woID` ;  \n" +
             "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN  \n" +
             "		SELECT  \n" +
             "			`wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,`wo`.`woStatus`, `wo`.`woSubStatus`, `wo`.`isRevisedWO`,  \n" +
             "			`wo`.`isOperationTrackBySerialNo`,  \n" +
             "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
             "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
             "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
             "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
             "				WHERE woTransEmpinout.isDeleted=0  \n" +
             "				AND woTransEmpinout.woID=pwoID  \n" +
             "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
             "			`wo`.`FCORemark`, `wo`.`buildQty`,`wo`.`woVersion`,  \n" +
             "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
             "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
             "			`wo`.`isNoClean`, `wo`.`isWatersoluble` ,`wo`.`isFluxNotApplicable` , `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`,  \n" +
             "			 `wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
             "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
             "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
             "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
             "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
             "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
             "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers,  \n" +
             "			`woop`.opName , `woop`.opNumber, `woop`.opVersion, `woop`.opStatus,  `woop`.`opID`,  \n" +
             "			`woop`.isTeamOperation , `woop`.isRework, `woop`.isIssueQty,  \n" +
             "			`woop`.qtyControl , `woop`.isStopOperation, `woop`.isPreProgrammingComponent, `woop`.isMoveToStock,  \n" +
             "			`woop`.isPlacementTracking,  \n" +
             "			`woop`.isLoopOperation,  \n" +
             "			`woop`.isAllowFinalSerialMapping,  \n" +
             "			`woop`.isTrackBySerialNo,  `woop`.isEnablePreProgrammingPart ,  \n" +
             "			`woop`.colorCode,  \n" +
             "			`woop`.`isFluxNotApplicable` AS `opFluxNotApplicable`,  \n" +
             "			`woop`.`isNoClean` AS `opNoClean`,  \n" +
             "			`woop`.`isWaterSoluble` AS `opWaterSoluble`,  \n" +
             "			`vu_compn`.`PIDCode`,  IFNULL(`vusalesorderdet`.`partDescription`,  `vu_compn`.`mfgPNDescription`) AS partDescription,  \n" +
             "			`vu_compn`.`liveVersion` AS liveVersion,  \n" +
             "			`vu_compn`.`mfgPN`, `vu_compn`.`nickName`, `vu_compn`.`custAssyPN`, `vu_compn`.`rev`,   `vu_compn`.specialNote ,  \n" +
             "			`vu_compn`.`RoHSStatusID`, `vu_compn`.isCustom ,  \n" +
             "			`vu_compn`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
             "			`vu_compn`.`isNoClean` AS `assyNoClean`,  \n" +
             "			`vu_compn`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
             "			`ro`.`rohsIcon`, vu_compn.totalSolderPoints,`ro`.`name` AS `rohsName`,  \n" +
             "			`mf`.mfgType,  \n" +
             "			fun_getSamplePicturesUploadCount(`vu_compn`.id) sampleImageCnt,  \n" +
             "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,/*wo-so-po-qty*/  \n" +
             "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
             "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
             "			CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
             "			vusalesorderdet.lineID,  \n" +
             "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues, /*so-po-qty*/  \n" +
             "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
             "					THEN `wo`.isHotJob  \n" +
             "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
             "			 (SELECT wc.isParellelOperation FROM workorder_cluster wc  \n" +
             "				WHERE wc.clusterID  \n" +
             "					IN (SELECT clusterID FROM workorder_operation_cluster woc  \n" +
             "						WHERE woc.woopid=pwoOPID AND `woc`.isDeleted=0)  \n" +
             "				 AND wc.isDeleted=0 AND wc.woID = pwoID  \n" +
             "			) isParellelOperation,  \n" +
             "			(CASE WHEN `vu_compn`.totalSolderPoints IS NOT NULL  \n" +
             "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
             "				ELSE NULL END) AS DPMO,  \n" +
             "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
             "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
             "				WHERE refWOID = pwoID)  \n" +
             "			) AS parentWorkorders  ,  \n" +
             "			wo.terminateWOID refWOId,  \n" +
             "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
             "			fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp,  \n" +
             "			fun_getRequireMachineVerificationLogicalValue(woop.woOPID,wo.partID) requireMachineVerification ,  \n" +
             "			wo.customerID,  \n" +
             "			fun_GetFormattedMfgCode(mf.mfgCode,mf.mfgName,vMfgNameFormat)  formattedCustomerName  \n" +
             "		FROM workorder AS `wo`  \n" +
             "			LEFT OUTER JOIN  \n" +
             "				(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''  \n" +
             "								ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
             "								ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
             "				FROM `workorder_certification` a  \n" +
             "				JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
             "				 WHERE a.isDeleted=0 AND a.woID = pwoID  \n" +
             "				GROUP BY a.woID  \n" +
             "				) AS `wocerti`  \n" +
             "			ON `wo`.`woID` = `wocerti`.`woID`  \n" +
             "			LEFT OUTER JOIN `workorder_operation` AS `woop`  \n" +
             "			ON `wo`.`woID` = `woop`.`woID` AND `woop`.isDeleted=0 AND `woop`.`woOPID` = pwoOPID  \n" +
             "			LEFT OUTER JOIN `vu_component_mpn` AS `vu_compn`  \n" +
             "			ON `wo`.`partID` = `vu_compn`.`id` AND `vu_compn`.isDeleted=0  \n" +
             "			LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
             "			AND `ro`.isDeleted=0  \n" +
             "			LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
             "			LEFT OUTER JOIN mfgCodeMst mf  ON vu_compn.mfgcodeID = mf.id  \n" +
             "			LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
             "				WHERE `wo`.isDeleted=0 AND `wo`.`woID` = pwoID ;  \n" +
             "		-- GROUP BY `wo`.`woID` ;  \n" +
             "	END IF ;  \n" +
             "  \n" +
             "	/********************************* 2.current data ****************************************************/  \n" +
             "	CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, NULL);  \n" +
             "	/********************************* 2.current data ****************************************************/  \n" +
             "  \n" +
             "	-- IF(IFNULL(pwoTransID,0) > 0) THEN  \n" +
             "		/********************************** 3.current data ***************************************************/  \n" +
             "		CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, pwoTransID);  \n" +
             "		/********************************** 3.current data ***************************************************/  \n" +
             "        -- END IF;  \n" +
             "  \n" +
             "	# last ECO request data  \n" +
             "        SELECT * FROM eco_request WHERE requestType = 1 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
             "        # last DFM request data  \n" +
             "        SELECT * FROM eco_request WHERE requestType = 2 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
             "  \n" +
             "        # is export controlled assembly  \n" +
             "        SELECT (CASE WHEN  \n" +
             "	(SELECT COUNT(1) FROM certificate_standards  \n" +
             "	WHERE isDeleted=0  \n" +
             "	AND isExportControlled = 1  \n" +
             "	AND certificateStandardID IN (	SELECT certificateStandardID FROM component_standard_details  \n" +
             "					WHERE isDeleted=0  \n" +
             "					AND componentID IN (  \n" +
             "								SELECT DISTINCT mfgPNID AS partMasterID FROM rfq_lineitems_alternatepart  \n" +
             "								WHERE isDeleted=0  \n" +
             "								AND partID IN (SELECT prPerPartID FROM part_sub_assy_relationship  \n" +
             "										WHERE isDeleted=0 AND partID = pwoAssyID)  \n" +
             "								UNION  \n" +
             "								SELECT DISTINCT partID AS partMasterID FROM workorder_operation_part  \n" +
             "								WHERE isDeleted=0 AND woID = pwoID  \n" +
             "								UNION  \n" +
             "								SELECT DISTINCT pwoAssyID AS partMasterID  \n" +
             "							   )  \n" +
             "					) > 0) THEN 1  \n" +
             "		ELSE 0 END) AS isExportControlledAssembly  ;  \n" +
             "  \n" +
             "  \n" +
             "	#  7. get wo op empl wise total time consumption details  \n" +
             "	# include both setup and production activity  \n" +
             "	CALL Sproc_GetWOOPEmpWiseTotTimeConsumptionDet(pWOOPID, pemployeeIDOfWOOP);  \n" +
             "  END;  \n" +
             /* **************************** New Script -> 24-03-2022 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetWOHeaderAllIconList` ;  \n" +
             "CREATE PROCEDURE `Sproc_GetWOHeaderAllIconList`(  \n" +
             "IN pwoAssyID INT ,  \n" +
             "IN pwoID INT  \n" +
             ")  \n" +
             "BEGIN  \n" +
             "	DECLARE totalCount INT DEFAULT 0;  \n" +
             "  \n" +
             "        DROP TEMPORARY TABLE IF EXISTS temp_IconList;  \n" +
             "	CREATE TEMPORARY TABLE temp_IconList(iconType VARCHAR(200), icon VARCHAR(500), tooltip VARCHAR(500));  \n" +
             "  \n" +
             "	# get all BOM and work order supplies, materials and tool parts  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS temp_allBOMWOPartList;  \n" +
             "	CREATE TEMPORARY TABLE temp_allBOMWOPartList AS  \n" +
             "		SELECT DISTINCT mfgPNID AS partMasterID  \n" +
             "		FROM rfq_lineitems_alternatepart  \n" +
             "		WHERE deletedAt IS NULL  \n" +
             "		AND partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE deletedAt IS NULL AND partID = pwoAssyID)  \n" +
             "		UNION  \n" +
             "		SELECT DISTINCT partID AS partMasterID  \n" +
             "		FROM workorder_operation_part  \n" +
             "		WHERE deletedAt IS NULL AND woID = pwoID  \n" +
             "		UNION  \n" +
             "		SELECT DISTINCT pwoAssyID AS partMasterID  \n" +
             "		;  \n" +
             "  \n" +
             "	# RoHS icon  \n" +
             "	INSERT INTO temp_IconList (iconType, icon, tooltip)  \n" +
             "	SELECT 'RoHS', IFNULL(rohsIcon, 'noimage.png'), `name`  \n" +
             "	FROM rfq_rohsmst  \n" +
             "	WHERE deletedAt IS NULL  \n" +
             "	AND id IN (	SELECT RoHsStatusID FROM COMPONENT  \n" +
             "			WHERE id IN (SELECT partMasterID FROM temp_allBOMWOPartList)  \n" +
             "		);  \n" +
             "  \n" +
             "  \n" +
             "	# Export Conrolled icon  \n" +
             "	SELECT COUNT(cs.isExportControlled) INTO totalCount  \n" +
             "	FROM COMPONENT c  \n" +
             "		LEFT JOIN component_standard_details csd ON csd.componentID = c.id AND csd.deletedAt IS NULL  \n" +
             "		LEFT JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID  \n" +
             "					AND cs.isExportControlled = 1 AND cs.deletedAt IS NULL  \n" +
             "	WHERE c.deletedAt IS NULL  \n" +
             "	AND c.id IN (SELECT partMasterID FROM temp_allBOMWOPartList);  \n" +
             "  \n" +
             "	IF(totalCount > 0) THEN  \n" +
             "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('ExportControl', NULL, 'Export Conrolled');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	# Require Drive Tools icon  \n" +
             "	SET totalCount = 0;  \n" +
             "  \n" +
             "	SELECT COUNT(1) INTO totalCount  \n" +
             "	FROM `component` co  \n" +
             "		LEFT JOIN `component_settings` cs ON co.id = cs.`refComponentID` AND cs.isDeleted = 0  \n" +
             "	WHERE co.deletedAt IS NULL  \n" +
             "	AND co.id IN (SELECT partMasterID FROM temp_allBOMWOPartList)  \n" +
             "	AND cs.driverToolRequired = 1;  \n" +
             "  \n" +
             "	IF(totalCount > 0) THEN  \n" +
             "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('DriverTool', NULL, 'Require Drive Tools');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	#Require Mating Part icon  \n" +
             "	SET totalCount = 0;  \n" +
             "  \n" +
             "	SELECT COUNT(1) INTO totalCount  \n" +
             "	FROM `component` co  \n" +
             "		LEFT JOIN `component_settings` cs ON co.id = cs.`refComponentID` AND cs.isDeleted = 0  \n" +
             "	WHERE co.deletedAt IS NULL  \n" +
             "	AND co.id IN (SELECT partMasterID FROM temp_allBOMWOPartList)  \n" +
             "	AND cs.matingPartRquired = 1;  \n" +
             "  \n" +
             "	IF(totalCount > 0) THEN  \n" +
             "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('matingPart', NULL, 'Require Mating Part');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "	# Require Pickup Pad icon  \n" +
             "	SET totalCount = 0;  \n" +
             "  \n" +
             "	SELECT COUNT(1) INTO totalCount  \n" +
             "	FROM `component` co  \n" +
             "		LEFT JOIN `component_settings` cs ON co.id = cs.`refComponentID` AND cs.isDeleted = 0  \n" +
             "	WHERE co.deletedAt IS NULL  \n" +
             "	AND co.id IN (SELECT partMasterID FROM temp_allBOMWOPartList)  \n" +
             "	AND cs.pickupPadRequired = 1;  \n" +
             "  \n" +
             "	IF(totalCount > 0) THEN  \n" +
             "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('pickupPad', NULL, 'Require Pickup Pad');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	# Require Programing icon  \n" +
             "	SET totalCount = 0;  \n" +
             "  \n" +
             "	SELECT COUNT(1) INTO totalCount  \n" +
             "	FROM `component` co  \n" +
             "		LEFT JOIN `component_settings` cs ON co.id = cs.`refComponentID` AND cs.isDeleted = 0  \n" +
             "	WHERE co.deletedAt IS NULL  \n" +
             "	AND co.id IN (SELECT partMasterID FROM temp_allBOMWOPartList)  \n" +
             "	AND cs.programingRequired = 1;  \n" +
             "  \n" +
             "	IF(totalCount > 0) THEN  \n" +
             "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('programing', NULL, 'Require Programing');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	# Obsolete  \n" +
             "	SET totalCount = 0;  \n" +
             "  \n" +
             "	SELECT MAX(CASE WHEN (co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR  \n" +
             "			EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0)  \n" +
             "			THEN 1 ELSE 0 END) INTO totalCount  \n" +
             "	FROM COMPONENT co  \n" +
             "	WHERE co.deletedAt IS NULL  \n" +
             "	AND co.id IN (SELECT partMasterID FROM temp_allBOMWOPartList);  \n" +
             "  \n" +
             "	IF(totalCount > 0) THEN  \n" +
             "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('obsolete', NULL, 'Obsolete');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "	# Tmax is not Defined icon (TmaxWarn)  \n" +
             "	SET totalCount = 0;  \n" +
             "  \n" +
             "	SELECT COUNT(1) INTO totalCount  \n" +
             "	FROM COMPONENT  \n" +
             "	WHERE deletedAt IS NULL  \n" +
             "	AND id IN (SELECT partMasterID FROM temp_allBOMWOPartList)  \n" +
             "	AND id NOT IN (  \n" +
             "			SELECT c.refComponentID  \n" +
             "			FROM component_temperature_sensitive_data c  \n" +
             "			WHERE c.deletedAt IS NULL  \n" +
             "			AND c.refComponentID IN (  \n" +
             "							SELECT DISTINCT mfgPNID AS partMasterID  \n" +
             "							FROM rfq_lineitems_alternatepart  \n" +
             "							WHERE deletedAt IS NULL  \n" +
             "							AND partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE deletedAt IS NULL AND partID = pwoAssyID)  \n" +
             "							UNION  \n" +
             "							SELECT DISTINCT partID AS partMasterID  \n" +
             "							FROM workorder_operation_part  \n" +
             "							WHERE deletedAt IS NULL AND woID = pwoID  \n" +
             "							UNION  \n" +
             "							SELECT DISTINCT pwoAssyID AS partMasterID  \n" +
             "						)  \n" +
             "			)  \n" +
             "	AND functionalCategoryID IN (SELECT id FROM rfq_parttypemst WHERE deletedAt IS NULL AND isTemperatureSensitive = 1);  \n" +
             "  \n" +
             "	IF(totalCount > 0) THEN  \n" +
             "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('TmaxWarn', NULL, 'Tmax is not Defined');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "  \n" +
             "	# Tmax icon (TmaxRed)  \n" +
             "	SET totalCount = 0;  \n" +
             "  \n" +
             "	SELECT COUNT(1) INTO totalCount  \n" +
             "	FROM component_temperature_sensitive_data  \n" +
             "	WHERE deletedAt IS NULL  \n" +
             "	AND refComponentID IN (SELECT partMasterID FROM temp_allBOMWOPartList);  \n" +
             "  \n" +
             "	IF(totalCount > 0) THEN  \n" +
             "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('TmaxRed', NULL, 'Tmax');  \n" +
             "	END IF;  \n" +
             "  \n" +
             "  \n" +
             "  \n" +
             "	# Operational Attribute icon  \n" +
             "	SET totalCount = 0;  \n" +
             "  \n" +
             "	INSERT INTO temp_IconList (iconType, icon, tooltip)  \n" +
             "	SELECT 'OperationalAttribute', IFNULL(icon, 'noimage.png'), `description`  \n" +
             "	FROM component_dynamic_attribute  \n" +
             "	WHERE deletedAt IS NULL  \n" +
             "	AND id IN (  \n" +
             "			SELECT attributeID  \n" +
             "			FROM component_dynamic_attribute_mapping_part  \n" +
             "			WHERE mfgPNID IN (SELECT partMasterID FROM temp_allBOMWOPartList)  \n" +
             "			AND deletedAt IS NULL  \n" +
             "		) ;  \n" +
             "  \n" +
             "	SELECT * FROM temp_IconList;  \n" +
             "  \n" +
             "END;  \n" +
             /* **************************** Add Script Version -> 24-03-2022 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (6049,'2.00','V1',' work order list header sps for part normalization - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
             );
            break;  
            case 6049:
             allDbChangesArray.push(
             /* **************************** New Script -> 25-03-2022 *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_addresses` ;  \n" +
             "CREATE PROCEDURE `Sproc_checkDelete_customer_addresses`(  \n" +
             "	IN tableName VARCHAR(255),  \n" +
             "	IN IDs LONGTEXT,  \n" +
             "	IN deletedBy INT,  \n" +
             "	IN entityID VARCHAR(255),  \n" +
             "	IN refrenceIDs LONGTEXT,  \n" +
             "	IN countList INT,  \n" +
             "	IN pRoleID INT  \n" +
             "    )  \n" +
             "BEGIN  \n" +
             "  \n" +
             "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as  \n" +
             "  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0  \n" +
             "				AND (billingAddressID IN (',IDs,') OR shippingAddressID IN (',IDs,') OR intermediateShipmentId IN (',IDs,')) LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesshippingmst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0  \n" +
             "				AND (shippingAddressID IN (',IDs,')) LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0  \n" +
             "				AND (custShippingAddressID IN (',IDs,') OR custBillingAddressID IN (',IDs,')) LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"P\"  \n" +
             "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"CR\"  \n" +
             "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_debit_memo\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"D\"  \n" +
             "				AND (billToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_supplier_rma\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"R\"  \n" +
             "				AND (rmaShippingAddressId IN (',IDs,') OR rmaMarkForAddressId IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_line_release_det\" else \"\" end as msg FROM purchase_order_line_release_det WHERE isDeleted = 0  \n" +
             "				AND (shippingAddressID IN (',IDs,')) LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted = 0  \n" +
             "				AND (supplierAddressID IN (',IDs,') OR shippingAddressID IN (',IDs,') OR intermediateShipmentID IN (',IDs,')) LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0  \n" +
             "				AND (shippingAddressID IN (',IDs,') OR billingAddressID IN (',IDs,')) LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE isDeleted = 0  \n" +
             "				AND (defaultIntermediateAddressID IN (',IDs,')) LIMIT 1)  \n" +
             "  \n" +
             "		    ');  \n" +
             "  \n" +
             "	/* (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			 (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND billingAddressID IN (',IDs,') LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingAddressID IN (',IDs,') LIMIT 1)  */  \n" +
             "  \n" +
             "	PREPARE stmt FROM @SQL;  \n" +
             "	EXECUTE stmt;  \n" +
             "	IF (countList=FALSE) THEN  \n" +
             "		IF (SELECT SUM(t.cnt) FROM tempcustomer_addresses t)=0 THEN  \n" +
             "			/* check any record is - isDefault from delete list */  \n" +
             "			DROP TEMPORARY TABLE IF EXISTS temp_SetIsDefaultAddrList ;  \n" +
             "			CREATE TEMPORARY TABLE temp_SetIsDefaultAddrList AS  \n" +
             "				SELECT customerId, addressType  \n" +
             "				FROM customer_addresses  \n" +
             "				WHERE FIND_IN_SET(id, IDs)  \n" +
             "				AND isDefault = 1 AND isDeleted = 0 ;  \n" +
             "  \n" +
             "			SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
             "			PREPARE stmt1 FROM @SQL1;  \n" +
             "			EXECUTE stmt1;  \n" +
             "			DEALLOCATE PREPARE stmt1;  \n" +
             "  \n" +
             "			/* if any record is - isDefault from delete list then apply new isDefault */  \n" +
             "			 IF (EXISTS (SELECT 1 FROM temp_SetIsDefaultAddrList)) THEN  \n" +
             "				DROP TEMPORARY TABLE IF EXISTS temp_NewDefaultAddrIdList;  \n" +
             "				CREATE TEMPORARY TABLE temp_NewDefaultAddrIdList AS  \n" +
             "					(SELECT MIN(ca.id) addrMstId  \n" +
             "					  FROM customer_addresses ca  \n" +
             "					WHERE EXISTS (  \n" +
             "							SELECT 1 FROM temp_SetIsDefaultAddrList tmca  \n" +
             "							WHERE tmca.customerId = ca.customerId  \n" +
             "							AND tmca.addressType = ca.addressType  \n" +
             "							)  \n" +
             "					AND ca.isActive = 1  \n" +
             "					AND ca.isDeleted = 0  \n" +
             "					GROUP BY ca.customerId  \n" +
             "					);  \n" +
             "  \n" +
             "				UPDATE customer_addresses  \n" +
             "				SET isDefault = 1 , updatedBy = deletedBy,  updateByRoleId = pRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "				WHERE id IN (SELECT addrMstId FROM temp_NewDefaultAddrIdList);  \n" +
             "  \n" +
             "				DROP TEMPORARY TABLE IF EXISTS temp_NewDefaultAddrIdList;  \n" +
             "			END IF;  \n" +
             "  \n" +
             "			SELECT * FROM tempcustomer_addresses WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
             "		ELSE  \n" +
             "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomer_addresses t;  \n" +
             "  \n" +
             "		END IF;  \n" +
             "	ELSE  \n" +
             "		SELECT SUM(t1.cnt) AS cnt,t2.display_page_name AS msg  \n" +
             "                FROM tempcustomer_addresses t1  \n" +
             "                   INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
             "                WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
             "		GROUP BY t2.display_page_name  \n" +
             "                ORDER BY t2.display_page_name  \n" +
             "                 ;  \n" +
             "	END IF;  \n" +
             "	DROP TEMPORARY TABLE tempcustomer_addresses;  \n" +
             "END;  \n" +
             /* **************************** New Script -> 25-03-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_contactperson` ;  \n" +
             "CREATE PROCEDURE `Sproc_checkDelete_contactperson`(  \n" +
             "	IN tableName VARCHAR(255),  \n" +
             "	IN IDs LONGTEXT,  \n" +
             "	IN deletedBy INT,  \n" +
             "	IN entityID VARCHAR(255),  \n" +
             "	IN refrenceIDs LONGTEXT,  \n" +
             "	IN countList INT,  \n" +
             "    IN pRoleID INT  \n" +
             "    )  \n" +
             "BEGIN  \n" +
             "DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
             "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempContactperson as  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"contactperson\" else \"\" end as msg FROM employee_contactperson WHERE contactPersonId IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_supplier_rma\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"R\" AND (rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_debit_memo\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"D\" AND billToContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment  WHERE (billToContactPersonID IN (',IDs,') OR payToContactPersonID IN (',IDs,')) AND refPaymentMode = \"CR\" AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"P\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_invoice\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"I\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_creditmemo\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"C\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE  (supplierContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_line_release_det WHERE shippingContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0 AND (custBillingContactPersonID IN (',IDs,') OR custShippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR contactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0 AND shippingContactPersonID IN (',IDs,') LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE isDeleted = 0 AND defaultIntermediateContactPersonID IN (',IDs,') LIMIT 1)  \n" +
             "		');  \n" +
             "/*	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive\" else \"\" end as msg FROM packing_slip_material_receive WHERE isDeleted = 0 AND (billToConactPerson IN (',IDs,')  \n" +
             "			OR shipToContactPersonID IN (',IDs,') OR rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
             "      UNION ALL  \n" +
             "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted = 0 AND (payToContactPersonID IN (',IDs,') OR billToContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
             "      UNION ALL  \n" +
             "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE isDeleted = 0 AND (custBillingConactPersonID IN (',IDs,') OR custShippingConactPersonID IN (',IDs,')) LIMIT 1)  \n" +
             "  */  \n" +
             "  \n" +
             "  	PREPARE stmt FROM @SQL;  \n" +
             "	EXECUTE stmt;  \n" +
             "  \n" +
             "    IF(countList=FALSE) THEN  \n" +
             "		IF(SELECT SUM(t.cnt) FROM tempContactperson t)=0 THEN  \n" +
             "			CREATE TEMPORARY TABLE IF NOT EXISTS tempSetIsDefaultContactperson AS  \n" +
             "				SELECT cp.refTransID,cp.refTableName FROM contactperson cp  WHERE FIND_IN_SET(cp.personId,IDs) AND cp.isDeleted = 0  GROUP BY cp.refTransID,cp.refTableName;  \n" +
             "  \n" +
             "			SET @SQl1 = CONCAT('update contactperson set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where personId in(',IDs,') and deletedAt is NULL');  \n" +
             "			PREPARE stmt1 FROM @SQL1;  \n" +
             "			EXECUTE stmt1;  \n" +
             "  \n" +
             "            # If Default Contact person is Deleted then Set new Default Contact Person.  \n" +
             "            IF(EXISTS (SELECT 1 FROM tempSetIsDefaultContactperson)) THEN  \n" +
             "				CREATE TEMPORARY TABLE IF NOT EXISTS tempPersonId AS (SELECT MIN(cp.personId) personId, COUNT(cp.personId) activePersonCnt FROM contactperson cp  \n" +
             "						WHERE EXISTS (  \n" +
             "							SELECT 1 FROM tempSetIsDefaultContactperson tcp WHERE tcp.refTransID = cp.refTransID AND tcp.refTableName = cp.refTableName  \n" +
             "							) AND cp.isDeleted = 0 AND cp.isActive = 1 GROUP BY cp.refTransID,cp.refTableName);  \n" +
             "				UPDATE contactperson SET isDefault =1 WHERE personId IN  \n" +
             "					(SELECT personId FROM tempPersonId WHERE activePersonCnt = 1);  \n" +
             "				DROP TEMPORARY TABLE IF EXISTS tempPersonId;  \n" +
             "			END IF;  \n" +
             "			DROP TEMPORARY TABLE IF EXISTS tempSetIsDefaultContactperson;  \n" +
             "  \n" +
             "			SELECT * FROM tempContactperson WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
             "		ELSE  \n" +
             "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempContactperson t;  \n" +
             "		END IF;  \n" +
             "	ELSE  \n" +
             "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
             "		FROM tempContactperson t1  \n" +
             "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
             "			WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
             "			ORDER BY t2.display_page_name;  \n" +
             "	END IF;  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
             "END;  \n" +
             /* **************************** Add Script Version -> 25-03-2022 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (6050,'2.00','V1',' #41484 - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
             );
            break;
            case 6050:
			  allDbChangesArray.push(
				/* **************************** Add Script Version -> 25-03-2022 *********************************** */
				//"INSERT INTO `table_mapping_details` (`tabel_name`, `display_page_name`) VALUES ('systemconfigrations', 'Data Keys');  \n" +
				/* **************************** Add Script Version -> 25-03-2022 *********************************** */
				//"ALTER TABLE component_sid_stock ADD COLUMN fromDateCodeFormat INT NOT NULL DEFAULT 1;  \n" +
				/* **************************** Add Script Version -> 25-03-2022 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (6051,'2.00','V1',' Task 42517: Create View for get packaging alias detail of part and replace with existing code into RCV flow - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
case 6051:
			  allDbChangesArray.push(
				/* **************************** Add Script Version -> 25-03-2022 *********************************** */
				"UPDATE `systemconfigrations` SET `key` = 'UMIDInternalDateCodeFormat' WHERE `key` = 'UMIDLotCodeFormat';  \n" +
				/* **************************** Add Script Version -> 25-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_GetUMIDDetailsByID`;  \n" +
				"CREATE PROCEDURE `Sproc_GetUMIDDetailsByID`(  \n" +
				"	IN pUIDId INT,  \n" +
				"	IN pUID VARCHAR(15)  \n" +
				")  \n" +
				"BEGIN  \n" +
				"		DECLARE vMfgCodeFormat INT;  \n" +
				"        SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
				"  \n" +
				"		IF(pUIDId IS NULL) THEN  \n" +
				"			SET pUIDId = (SELECT cs.id FROM component_sid_stock cs WHERE cs.uid = pUID AND cs.isDeleted = 0);  \n" +
				"        END IF;  \n" +
				"  \n" +
				"		SELECT 	css.id AS uidId, 		css.uid, 		css.orgqty AS orgQty,			css.pkgQty, 		css.orgPkgUnit,			css.pkgUnit,  \n" +
				"				css.prefix,		css.uidPrefix,	css.sealDate,		css.cpn,			css.RefCPNMFGPNID,		css.mfgAvailabel,  \n" +
				"                css.assyID AS uidAssyID,		css.receiveMaterialType,				css.refSupplierPartId,	css.customerConsign,  \n" +
				"				css.spq, 		css.uom,		css.dateCode, 		css.packaging,		css.stockInventoryType, css.specialNote,  \n" +
				"                css.mfrDateCodeFormatID,		css.mfrDateCode,	css.woID,			css.dateCodeFormatID,	css.fromDateCodeFormat,  \n" +
				"                u.unitName,				u.measurementTypeID AS uomClassID,  \n" +
				"                css.woNumber, 	css.fromUIDId, 	css.fromUID, 		css.parentUIDId,		css.parentUID,		css.pcbPerArray,  \n" +
				"                (CASE WHEN css.fromUIDId IS NOT NULL AND css.parentUIDId IS NOT NULL THEN TRUE ELSE FALSE END) AS isSplitUID,	css.isReservedStock,  \n" +
				"                css.customerID,	css.scanlabel,	css.costCategoryID,  \n" +
				"                CONCAT(coc.categoryName, ' (', coc.`from`, ' - ', coc.`to`, ' )') costCategoryName,  \n" +
				"                css.lotCode,			css.dateCode,  \n" +
				"                css.nickName,	c.isCustom,    /*css.selfLifeDays,			css.shelfLifeAcceptanceDays,	css.maxShelfLifeAcceptanceDays,*/  \n" +
				"                c.selfLifeDays, 				c.maxShelfLifeAcceptanceDays, 			c.shelfLifeAcceptanceDays,  \n" +
				"				css.binID,				b.name AS currentBinName, 	css.orgRecBin, 		from_bin.Name AS fromBinName,  \n" +
				"                #org_bin.Name AS orgBinName,  \n" +
				"                w.Name AS currentWHName,							pw.Name AS currentParentWHName,  \n" +
				"                css.orgRecWarehouse,	css.orgRecDepartment,		css.fromBin,		css.fromWarehouse,		css.fromDepartment,  \n" +
				"				w.warehouseType,  		css.refcompid, 		c.mfgcodeID, 			c.mfgPN,					c.unit AS componentUnit,  \n" +
				"                c.PIDCode, 				c.mfgPNDescription,			c.imageURL, 		m.mfgName,				c.mfgType,  		c.custAssyPN,  \n" +
				" 				m.mfgCode, 				c.mountingTypeID,			cp.sourceName, 		cp.name packagingName,  \n" +
				"                c.partPackage, 			pc.Name AS externalPartPackage,  \n" +
				"                css.rohsStatusID AS uidRohsStatusID, 				umid_rohs.Name umidRohsName,				umid_rohs.rohsIcon umidRohsIcon,  \n" +
				"                c.rohsStatusID,			rohs.Name rohsName, 		rohs.rohsIcon, 								mt.hasLimitedShelfLife,  \n" +
				"				vu.packingSlipID,		vu.packingSlipSerialNumber, vu.packingSlipNumber,   					vu.packingSlipDetID,  \n" +
				"                vu.UMIDCreatedQty, 		vu.returnQty,  				vu.InQty, 			vu.BalanceQty,			vu.receivedStatus,  \n" +
				"                vu.packingSlipModeStatus,							fun_GetFormattedMfgCode(m.mfgCode,  m.mfgName, vMfgCodeFormat) as mfgCodeName,  \n" +
				"                (CASE WHEN (css.stockInventoryType = 'NI') THEN  \n" +
				"					CONCAT(mcm.mfgCode, vu.packingSlipNumber)  \n" +
				"				ELSE NULL END) As cofcCode,  \n" +
				"               CONCAT(cmsl.levelRating, '-', cmsl.`code`) AS mslLevel,  \n" +
				"               IFNULL(wo.woAvailableQty,0) AS woAvailableQty  \n" +
				"		FROM component_sid_stock css  \n" +
				"			JOIN component c ON css.refcompid = c.id AND c.isDeleted = 0  \n" +
				"			JOIN mfgcodemst m on c.mfgcodeID = m.id  AND m.isDeleted = 0  \n" +
				"			JOIN rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  AND c.isDeleted = 0  \n" +
				"			JOIN rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  AND umid_rohs.isDeleted = 0  \n" +
				"            LEFT JOIN component_mslmst cmsl on c.mslID = cmsl.id  \n" +
				"			JOIN component_packagingmst cp on css.packaging = cp.id  AND cp.isDeleted = 0  \n" +
				"            LEFT JOIN rfq_packagecasetypemst pc ON c.partPackageID = pc.id AND pc.isDeleted = 0  \n" +
				"            JOIN cost_category coc ON css.costCategoryID = coc.id AND coc.isDeleted = 0  \n" +
				"            JOIN uoms u ON css.uom = u.id AND u.isDeleted = 0  \n" +
				"            JOIN rfq_mountingtypemst mt ON c.mountingTypeID = mt.id AND mt.isDeleted = 0  \n" +
				"			JOIN binmst b on css.binID = b.id AND b.isDeleted = 0  \n" +
				"            JOIN binmst from_bin on css.fromBin = from_bin.id AND from_bin.isdeleted = 0  \n" +
				"			JOIN warehousemst w ON b.WarehouseID = w.id AND w.isDeleted = 0  \n" +
				"			JOIN warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0  \n" +
				"            LEFT JOIN component_sid_stock_packing_detail csp ON css.id = csp.refComponentSidStockID AND csp.isDeleted = 0  \n" +
				"            LEFT JOIN vu_umid_creation_pending vu ON csp.refPackingSlipDetailID = vu.packingSlipDetID  \n" +
				"            LEFT JOIN mfgcodemst mcm ON mcm.id = vu.mfgCodeID AND mcm.isDeleted = 0  \n" +
				"            LEFT JOIN (	SELECT     atk.woID,  \n" +
				"							((SUM(atk.openingStock) - (SELECT  \n" +
				"									IFNULL(SUM(ss.shippedqty), 0)  \n" +
				"								FROM  \n" +
				"									shippedassembly ss  \n" +
				"								WHERE  \n" +
				"									((ss.isDeleted = 0)  \n" +
				"										AND (ss.woNumber = atk.woNumber)  \n" +
				"										AND (ss.partID = atk.partID)))) - IFNULL(css.pkgQty, 0)) AS woAvailableQty  \n" +
				"						FROM assemblystock atk  \n" +
				"						LEFT JOIN (SELECT  \n" +
				"										cs.woID, SUM(cs.pkgQty) AS pkgQty  \n" +
				"									FROM  \n" +
				"									component_sid_stock cs  \n" +
				"									WHERE cs.isDeleted = 0 AND cs.woID IS NOT NULL GROUP BY cs.woID) css ON css.woID = atk.woID  \n" +
				"						WHERE atk.isDeleted = 0  \n" +
				"						GROUP BY atk.woNumber,atk.partID,atk.whID,atk.binID,atk.woID,atk.woNumber,css.pkgQty  \n" +
				"					) wo ON wo.woID = css.woID  \n" +
				"		WHERE css.id =  (CASE WHEN pUIDId IS NOT NULL THEN pUIDId  \n" +
				"				ELSE (SELECT cs.id FROM component_sid_stock cs WHERE cs.uid = pUID AND cs.isDeleted = 0) END);  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 25-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_GenerateInternalDateCodeFromMFRDateCode`;  \n" +
				"CREATE PROCEDURE `Sproc_GenerateInternalDateCodeFromMFRDateCode`(  \n" +
				"	IN pMFRDateCodeFormatId INT,  \n" +
				"	IN pMFRDateCode VARCHAR(50),  \n" +
				"	IN pIsCallFromAPI BOOLEAN  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE vInternalDateCodeFormatID INT;  \n" +
				"    DECLARE vCategory VARCHAR(2);  \n" +
				"    DECLARE vInitDateCodeFormat VARCHAR(50);  \n" +
				"    DECLARE vMFRDateCodeFormat VARCHAR(50);  \n" +
				"    DECLARE vInitalMfrDateCode VARCHAR(50) DEFAULT pMFRDateCode;  \n" +
				"    DECLARE vCOUNT INT DEFAULT 1;  \n" +
				"    DECLARE vDayValue VARCHAR(5) DEFAULT NULL;  \n" +
				"    DECLARE vJulianDayValue VARCHAR(5) DEFAULT NULL;  \n" +
				"    DECLARE vMonthValue VARCHAR(5) DEFAULT NULL;  \n" +
				"    DECLARE vWeekValue VARCHAR(5) DEFAULT NULL;  \n" +
				"    DECLARE vYearValue VARCHAR(5) DEFAULT NULL;  \n" +
				"    DECLARE vFullYearValue VARCHAR(5) DEFAULT NULL;  \n" +
				"    DECLARE vIntialCode VARCHAR(2);  \n" +
				"    DECLARE vCounterValue VARCHAR(5);  \n" +
				"    DECLARE vLoopValue VARCHAR(5);  \n" +
				"    DECLARE vFinalInternalDateCode VARCHAR(50);  \n" +
				"  \n" +
				"    DECLARE EXIT HANDLER FOR 1411,1406  \n" +
				"	BEGIN  \n" +
				"		SELECT 	pMFRDateCodeFormatId mfrDateCodeFormatId,  \n" +
				"			(SELECT dateCodeFormat FROM date_code_format WHERE id = pMFRDateCodeFormatId) mfrDateCodeFormat,  \n" +
				"			pMFRDateCode mfrDateCode,  \n" +
				"			(SELECT sys.`values` FROM systemconfigrations sys WHERE sys.`key` = 'UMIDInternalDateCodeFormat') internalDateCodeFormat,  \n" +
				"			NULL internalDateCode,  \n" +
				"			'ERROR01' errorMessageCode;  \n" +
				"	END;  \n" +
				"  \n" +
				"  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempDateCodeFormats;  \n" +
				"	CREATE TEMPORARY TABLE tempDateCodeFormats (datecodeformat VARCHAR(5), formatvalue VARCHAR(5));  \n" +
				"	INSERT INTO tempDateCodeFormats VALUES ('DD', NULL), ('DDD', NULL), ('MM', NULL), ('WW', NULL), ('YY', NULL), ('YYYY', NULL);  \n" +
				"  \n" +
				"	SET vInternalDateCodeFormatID = (SELECT sys.`values` FROM systemconfigrations sys WHERE sys.`key` = 'UMIDInternalDateCodeFormat');  \n" +
				"    SELECT dateCodeFormat, category INTO vInitDateCodeFormat, vCategory FROM date_code_format WHERE id = vInternalDateCodeFormatID;  \n" +
				"    SELECT dateCodeFormat INTO vMFRDateCodeFormat FROM date_code_format WHERE id = pMFRDateCodeFormatId;  \n" +
				"  \n" +
				"	WHILE LENGTH(vMFRDateCodeFormat) > 0 DO  \n" +
				"		SET vIntialCode = SUBSTRING(vMFRDateCodeFormat,1,1);  \n" +
				"		SET vCounterValue = SUBSTRING(vMFRDateCodeFormat, LOCATE(vIntialCode,vMFRDateCodeFormat), CHAR_LENGTH(vMFRDateCodeFormat) - LOCATE(vIntialCode, REVERSE(vMFRDateCodeFormat))+1);  \n" +
				"		SET vLoopValue = SUBSTRING(vInitalMfrDateCode,1,LENGTH(vCounterValue));  \n" +
				"		UPDATE tempDateCodeFormats tmp SET tmp.formatValue = vLoopValue WHERE  tmp.datecodeformat = vCounterValue;  \n" +
				"        SET vInitalMfrDateCode = SUBSTRING(vInitalMfrDateCode,LENGTH(vCounterValue)+1);  \n" +
				"        SET vMFRDateCodeFormat = REPLACE(vMFRDateCodeFormat,SUBSTRING(vMFRDateCodeFormat,1,LENGTH(vCounterValue)),'');  \n" +
				"  \n" +
				"        SET vCounterValue = vLoopValue = vIntialCode = NULL;  \n" +
				"	END WHILE;  \n" +
				"  \n" +
				"	SET vCounterValue = vLoopValue = vIntialCode = NULL;  \n" +
				"  \n" +
				"    SELECT formatvalue INTO vFullYearValue FROM tempDateCodeFormats WHERE datecodeformat = 'YYYY';  \n" +
				"    SELECT formatvalue INTO vYearValue FROM tempDateCodeFormats WHERE datecodeformat = 'YY';  \n" +
				"	SELECT formatvalue INTO vMonthValue FROM tempDateCodeFormats WHERE datecodeformat = 'MM';  \n" +
				"    SELECT formatvalue INTO vWeekValue FROM tempDateCodeFormats WHERE datecodeformat = 'WW';  \n" +
				"	SELECT formatvalue INTO vJulianDayValue FROM tempDateCodeFormats WHERE datecodeformat = 'DDD';  \n" +
				"    SELECT formatvalue INTO vDayValue FROM tempDateCodeFormats WHERE datecodeformat = 'DD';  \n" +
				"  \n" +
				"	IF(vFullYearValue IS NULL) THEN  \n" +
				"		SET vFullYearValue = (SELECT YEAR(STR_TO_DATE(vYearValue,'%Y')));  \n" +
				"	ELSEIF(vYearValue IS NULL) THEN  \n" +
				"		SET vYearValue = (SELECT RIGHT(vFullYearValue, 2));  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(vFullYearValue IS NOT NULL AND vJulianDayValue IS NOT NULL) THEN  \n" +
				"		SET vMonthValue = (SELECT LPAD(MONTH(MAKEDATE(vFullYearValue,vJulianDayValue)),2,'0'));  \n" +
				"        SET vDayValue = (SELECT DATE_FORMAT(MAKEDATE(@vFullYearValue,@vJulianDayValue),'%d'));  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(vMonthValue IS NULL AND vWeekValue IS NOT NULL) THEN  \n" +
				"		SET vMonthValue = (SELECT LPAD(MONTH(STR_TO_DATE(GROUP_CONCAT(vFullYearValue,LPAD((vWeekValue + 1),2,'0'),' Sunday'),'%X%V %W')),2,'0'));  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(vWeekValue IS NULL AND vMonthValue IS NOT NULL) THEN  \n" +
				"		SET vWeekValue = (SELECT LPAD(WEEK(STR_TO_DATE(GROUP_CONCAT(vFullYearValue,'-',vMonthValue,'-',IF(vDayValue IS NOT NULL, vDayValue, '01')),'%Y-%m-%d')),2,'0'));  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(vDayValue IS NULL AND vWeekValue IS NOT NULL) THEN  \n" +
				"		SET vDayValue = (SELECT LPAD(DATE_FORMAT(STR_TO_DATE(GROUP_CONCAT(vFullYearValue,LPAD((vWeekValue + 1),2,'0'),' Sunday'), '%X%V %W'),'%d'),2,'0'));  \n" +
				"	END IF;  \n" +
				"  \n" +
				"	IF(vJulianDayValue IS NULL) THEN  \n" +
				"		SET vJulianDayValue = (SELECT LPAD(DAYOFYEAR(STR_TO_DATE(GROUP_CONCAT(vFullYearValue,'-',vMonthValue,'-',IF(vDayValue IS NOT NULL, vDayValue, '01')),'%Y-%m-%d')),3,'0'));  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    # Set Internal Date Code  \n" +
				"    SET vFinalInternalDateCode = vInitDateCodeFormat;  \n" +
				"    SET vFinalInternalDateCode = Replace(vFinalInternalDateCode,'YYYY',vFullYearValue);  \n" +
				"    SET vFinalInternalDateCode = Replace(vFinalInternalDateCode,'YY',vYearValue);  \n" +
				"    SET vFinalInternalDateCode = Replace(vFinalInternalDateCode,'MM',vMonthValue);  \n" +
				"    SET vFinalInternalDateCode = Replace(vFinalInternalDateCode,'WW',vWeekValue);  \n" +
				"    IF(vCategory = 'J') THEN  \n" +
				"		SET vFinalInternalDateCode = Replace(vFinalInternalDateCode,'DDD',vJulianDayValue);  \n" +
				"	ELSE  \n" +
				"		SET vFinalInternalDateCode = Replace(vFinalInternalDateCode,'DD',vDayValue);  \n" +
				"    END IF;  \n" +
				"  \n" +
				"    DROP TEMPORARY TABLE IF EXISTS temp_InternalDateCodeFromMFRDateCode;  \n" +
				"	CREATE 	TEMPORARY TABLE IF NOT EXISTS temp_InternalDateCodeFromMFRDateCode AS  \n" +
				"	SELECT 	pMFRDateCodeFormatId mfrDateCodeFormatId,  \n" +
				"			(SELECT dateCodeFormat FROM date_code_format WHERE id = pMFRDateCodeFormatId) mfrDateCodeFormat,  \n" +
				"			pMFRDateCode mfrDateCode,  \n" +
				"			vInitDateCodeFormat internalDateCodeFormat,  \n" +
				"			vFinalInternalDateCode AS internalDateCode,  \n" +
				"            vWeekValue AS dateCodeWeek,  \n" +
				"            vYearValue AS dateCodeYear;  \n" +
				"	IF (pIsCallFromAPI) THEN  \n" +
				"		SELECT * FROM temp_InternalDateCodeFromMFRDateCode;  \n" +
				"	END IF;  \n" +
				"    DROP TEMPORARY TABLE IF EXISTS tempDateCodeFormats;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 25-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
				"CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(  \n" +
				"    IN pWhereClause VARCHAR(16383),  \n" +
				"    IN puserID VARCHAR(50),  \n" +
				"    IN pnickName VARCHAR(20),  \n" +
				"    IN pprefix VARCHAR(20),  \n" +
				"    IN pIsFromUID TINYINT,  \n" +
				"    IN pComponentID INT,  \n" +
				"    IN pCustomerID INT,  \n" +
				"    IN pCPN BOOL,  \n" +
				"    IN pMFGAvailabel BOOL,  \n" +
				"    IN pRefCpnMfgID INT,  \n" +
				"    IN pAssyID INT,  \n" +
				"    IN pSalesOrderDetailID INT,  \n" +
				"    IN pReceiveMaterialType VARCHAR(255),  \n" +
				"    IN pkitAssemblyID INT,  \n" +
				"    IN pBarcodeID INT,  \n" +
				"    IN pBOMLineID INT,  \n" +
				"    IN pSupplierID INT,  \n" +
				"    IN pCategory VARCHAR(2),  \n" +
				"    IN pInventoryType VARCHAR(2),  \n" +
				"    IN pCallFrom VARCHAR(50),  \n" +
				"    IN pExcludeStatus INT,  \n" +
				"    IN pBinID INT  \n" +
				")  \n" +
				"BEGIN  \n" +
				"	DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
				"	DECLARE v_delimiter VARCHAR(10);  \n" +
				"	DECLARE v_length INT;  \n" +
				"	DECLARE v_fieldType INT;  \n" +
				"	DECLARE v_entityId INT;  \n" +
				"	DECLARE v_dataElementId INT;  \n" +
				"	DECLARE v_displayOrder DECIMAL(6,2);  \n" +
				"	DECLARE delimiter_value_data VARCHAR(1000);  \n" +
				"	DECLARE strLabel VARCHAR(2000);  \n" +
				"	DECLARE QueryForStatic  VARCHAR(2000);  \n" +
				"	DECLARE StaticField VARCHAR(100);  \n" +
				"	DECLARE DynamicField VARCHAR(100);  \n" +
				"	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';  \n" +
				"	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');  \n" +
				"	DECLARE plen,slen INT;  \n" +
				"	DECLARE pbr_template_ID INT DEFAULT 0;  \n" +
				"	DECLARE pbr_Separator VARCHAR(50);  \n" +
				"	DECLARE barcode_type_id INT;  \n" +
				"	DECLARE MFG_Part_No VARCHAR(16383);  \n" +
				"	DECLARE UpdateValue VARCHAR(16383);  \n" +
				"	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';  \n" +
				"	DECLARE v_SupplierID INT;  \n" +
				"	DECLARE v_BarcodeType VARCHAR(20);  \n" +
				"	DECLARE v_barcode_id INT;  \n" +
				"	DECLARE v_barcode_count INT;  \n" +
				"	DECLARE v_NumberOfPart INT;  \n" +
				"	DECLARE v_rfqLineItemsID INT;  \n" +
				"	DECLARE v_componentCount INT;  \n" +
				"	DECLARE v_componentId INT;  \n" +
				"	DECLARE v_mfgPartNO VARCHAR(100);  \n" +
				"	DECLARE v_partMFG INT;  \n" +
				"	DECLARE v_isGoodPart TINYINT;  \n" +
				"	DECLARE v_restrictUsePermanently TINYINT;  \n" +
				"	DECLARE v_restrictUSEwithpermission TINYINT;  \n" +
				"	DECLARE v_restrictUseInBOM TINYINT;  \n" +
				"	DECLARE v_isInstall TINYINT;  \n" +
				"	DECLARE v_isBOMLineClean TINYINT;  \n" +
				"	DECLARE v_BOMLineId INT;  \n" +
				"	DECLARE v_restrictPackagingAliasPermanently TINYINT;  \n" +
				"	DECLARE v_restrictPackagingAliasPermission TINYINT;  \n" +
				"	DECLARE v_bomErrorDescription LONGTEXT;  \n" +
				"	DECLARE v_PIDCode VARCHAR(110);  \n" +
				"	DECLARE v_isPurchase TINYINT;  \n" +
				"	DECLARE v_isBuyDNPQty VARCHAR(5);  \n" +
				"	DECLARE v_BOMLineItemNo DECIMAL(16,8);  \n" +
				"	DECLARE v_BOMLineCount INT;  \n" +
				"	DECLARE v_AlternateLineId INT;  \n" +
				"	DECLARE v_MFRPackagingId VARCHAR(1000);  \n" +
				"	DECLARE v_BOMAssyId INT;  \n" +
				"	DECLARE v_BOMAssyIds VARCHAR(1000);  \n" +
				"	DECLARE v_restrictUsePackagingInBOM TINYINT;  \n" +
				"	DECLARE v_restrictUseCPNInBOM TINYINT;  \n" +
				"	DECLARE v_isCPNFlag TINYINT;  \n" +
				"	DECLARE v_dateCodeFormatID INT;  \n" +
				"	DECLARE v_InternalDateCode VARCHAR(50);  \n" +
				"  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);  \n" +
				"	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;  \n" +
				"	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;  \n" +
				"	DECLARE v_MFRList VARCHAR(10000);  \n" +
				"	DECLARE v_barcode_status INT;  \n" +
				"	DECLARE v_category INT;  \n" +
				"	DECLARE v_partType INT;  \n" +
				"    DECLARE v_pendingPartCount INT;  \n" +
				"    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
				"  \n" +
				"	SET v_SupplierQuoteMFRIsNotCustomPart = 0;  \n" +
				"	SET v_MfrNotFoundForSupplierQuote = 0;  \n" +
				"    SET v_dateCodeFormatID = (SELECT sys.`values` FROM systemconfigrations sys WHERE sys.`key` = 'UMIDInternalDateCodeFormat');  \n" +
				"  \n" +
				"    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;  \n" +
				"	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error  \n" +
				"	(  \n" +
				"		errorText LONGTEXT,  \n" +
				"		IsSuccess VARCHAR (2),  \n" +
				"		MFGPart VARCHAR(10000)  \n" +
				"	);  \n" +
				"  \n" +
				"	/* Temp table for Packing Slip */  \n" +
				"	IF (pCategory = 'P') THEN  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;  \n" +
				"		CREATE TEMPORARY TABLE temp_packing_slip_material_receive  \n" +
				"		(  \n" +
				"			scanlabel VARCHAR(1000),  \n" +
				"			poNumber VARCHAR(100),  \n" +
				"			supplierSONumber VARCHAR(100),  \n" +
				"			packingSlipNumber VARCHAR(50),  \n" +
				"			invoiceNumber VARCHAR(50)  \n" +
				"		);  \n" +
				"	ELSE /* Temp table for MFR */  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;  \n" +
				"		CREATE TEMPORARY TABLE temp_Component_Sid_Stock  \n" +
				"		(  \n" +
				"			refcompid INT,  \n" +
				"            dateCodeFormatID INT,  \n" +
				"			pkgQty DECIMAL(18,6),  \n" +
				"			dateCode VARCHAR(10),  \n" +
				"			lotCode VARCHAR(255),  \n" +
				"			scanlabel VARCHAR(1000),  \n" +
				"			createdBy VARCHAR(255),  \n" +
				"			uid VARCHAR(14),  \n" +
				"			prefix VARCHAR(20),  \n" +
				"			nickName VARCHAR(50),  \n" +
				"			cpn TINYINT,  \n" +
				"			mfgAvailabel TINYINT,  \n" +
				"			refCPNMFGPNID INT,  \n" +
				"			customerID INT,  \n" +
				"			assyID INT,  \n" +
				"			receiveMaterialType VARCHAR(255),  \n" +
				"			refSupplierPartId INT,  \n" +
				"			mfrDateCode VARCHAR(50),  \n" +
				"			poNumber VARCHAR(50),  \n" +
				"			supplierSONumber VARCHAR(50),  \n" +
				"			packingSlipNumber VARCHAR(50),  \n" +
				"			invoiceNumber VARCHAR(50),  \n" +
				"			binName VARCHAR(100),  \n" +
				"			packaging VARCHAR(100),  \n" +
				"			packingSlipDetailNickname VARCHAR(50)  \n" +
				"		);  \n" +
				"  \n" +
				"		/* Temp table for data element value */  \n" +
				"		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;  \n" +
				"		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values  \n" +
				"		(  \n" +
				"			entityid INT,  \n" +
				"			dataelementid INT,  \n" +
				"			`value` LONGTEXT,  \n" +
				"			createdBy VARCHAR(255)  \n" +
				"		);  \n" +
				"    END IF;  \n" +
				"	-- get data from barcode templates with seprator  \n" +
				"	# return error code  \n" +
				"	# 0: Mfgcode and MfgpartNO is not Found  \n" +
				"	# 0: Barcode template does not exist, Please add template  \n" +
				"	# 1: Validation Clear  \n" +
				"	# 2: Mfgcode and Mfg partNO are avialable but not matched in component  \n" +
				"	# 3: Mfgcode is not found  \n" +
				"	# 4: MFG PN does not exist  \n" +
				"	# 5: Multiple MFG PN found  \n" +
				"	# 6: CPN MFG Part is mismatch with CPN MFG Code  \n" +
				"	# 7: MFG PN or CPN is not found in bom of this assembly  \n" +
				"	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer  \n" +
				"	# 9:  Multiple barcode template found.  \n" +
				"	# 10: Scanned MFG Part is not CPN, Please check  \n" +
				"	# 11: MFG PN is incorrect part  \n" +
				"	# 12: PID PID1 was restricted part at part master level.  \n" +
				"	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
				"	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.  \n" +
				"	# 15: BOM line have not clean. So, you can not allocate to kit.  \n" +
				"	# 16: PID PID1 was restricted packaging alias part at part master level.  \n" +
				"	# 17: PID is contain more than 1 BOM line.  \n" +
				"	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.  \n" +
				"	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
				"	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.  \n" +
				"	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.  \n" +
				"	# 22: You cannot create UMID for assembly from Existing Stock.  \n" +
				"	# 23: In UMID Management screen not allow to scan which part's part type is Other  \n" +
				"    # 24: In UMID Management screen if pending stock is not exists for stockinventory NI then not allow to scan part  \n" +
				"    # 25: In UMID Management screen if pending stock PS status is Draft then not allow to scan part  \n" +
				"    # 24: In UMID Management screen if pending stock PS Line received status is Pending or Rejected then not allow to scan part  \n" +
				"  \n" +
				"	block1: BEGIN  \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");   \n" +
				"		IF (pBarcodeID IS NULL) THEN  \n" +
				"			/* Get barcode from labelstring */  \n" +
				"            SELECT COUNT(*) INTO v_barcode_count  \n" +
				"			  FROM br_label_template  \n" +
				"             WHERE isDeleted=0  \n" +
				"               AND barcodeCategory = pCategory  \n" +
				"               AND `status`=1  \n" +
				"               AND pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
				"  \n" +
				"			SELECT id, barcodeType, `name`, `status`  \n" +
				"              INTO v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status  \n" +
				"			  FROM br_label_template  \n" +
				"             WHERE isDeleted=0  \n" +
				"               AND barcodeCategory = pCategory  \n" +
				"               AND `status`=1  \n" +
				"               AND pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) limit 1;  \n" +
				"			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN  \n" +
				"				/* Get More than 1 barcode then give validation */  \n" +
				"				IF (v_barcode_count > 1) THEN  \n" +
				"					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
				"					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
				"  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
				"					('Multiple barcode template found.',9,@multiple_barcode_string);  \n" +
				"  \n" +
				"					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
				"					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
				"					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"				ELSE  \n" +
				"					SET pBarcodeID = v_barcode_id;  \n" +
				"				END IF;  \n" +
				"			END IF;  \n" +
				"		ELSE  \n" +
				"			/* Get data from barcode id */  \n" +
				"			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;  \n" +
				"		END IF;  \n" +
				"  \n" +
				"		/* If data not get from barcode then concat none in label string find in table */  \n" +
				"		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN  \n" +
				"			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);  \n" +
				"			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name  \n" +
				"			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
				"			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
				"			SET pBarcodeID = v_barcode_id;  \n" +
				"		END IF;  \n" +
				"  \n" +
				"		IF(barcode_type_id=2)THEN    /* barcode 2D */  \n" +
				"			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID  \n" +
				"			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;  \n" +
				"			SET v_BarcodeType = '2D';  \n" +
				"		ELSE /* barcode 1D */  \n" +
				"			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template  \n" +
				"			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;  \n" +
				"			SET v_BarcodeType = '1D';  \n" +
				"		END IF;  \n" +
				"	END block1;  \n" +
				"  \n" +
				"	/* If error is not found then continue else select error */  \n" +
				"	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
				"		block2: BEGIN  \n" +
				"			-- declare cusrsor barcode match on all barcode template delimiter record found  \n" +
				"			DECLARE  barcodeMatch_cursor CURSOR FOR  \n" +
				"				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter  \n" +
				"				WHERE refbrID = pBarcodeID AND isDeleted = 0;  \n" +
				"			-- declare exit loop if data not found  \n" +
				"			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
				"			-- if any record match found than  check for delimiter and its value  \n" +
				"			IF (pbr_template_ID > 0) THEN  \n" +
				"				-- create temporary table for deliemeter and component dataelement  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;  \n" +
				"				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(  \n" +
				"					pentityId INT,  \n" +
				"					pdataElementId INT,  \n" +
				"					pdelimiter_value VARCHAR(200)  \n" +
				"				);  \n" +
				"				-- create temporary table for separator string values  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;  \n" +
				"				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));  \n" +
				"  \n" +
				"				-- prefix length and suffix lenght to get actual string  \n" +
				"				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength  \n" +
				"				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;  \n" +
				"				-- open cursor  \n" +
				"				OPEN barcodeMatch_cursor;  \n" +
				"				-- set str label as whereclause  \n" +
				"				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter  \n" +
				"				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");  \n" +
				"				-- if prefix is found than remove those from actual string match  \n" +
				"				IF(IFNULL(@pprefixlength,0) > 0) THEN  \n" +
				"					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));  \n" +
				"					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));  \n" +
				"				 END IF;  \n" +
				"  \n" +
				"				-- if suffix is found than remove those from actual string match  \n" +
				"				 IF(IFNULL(@psuffixlength,0) > 0) THEN  \n" +
				"					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
				"					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
				"				 END IF;  \n" +
				"				-- insert all values after seprator split  \n" +
				"				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");  \n" +
				"				PREPARE stmt1 FROM @SQL;  \n" +
				"				EXECUTE stmt1;  \n" +
				"				DEALLOCATE PREPARE stmt1;  \n" +
				"				IF (pCategory = 'P') THEN  \n" +
				"					-- create dynamic query to insert in packing slip  \n" +
				"					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';  \n" +
				"				ELSE  \n" +
				"					-- create dynamic query to insert in recieving material  \n" +
				"					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';  \n" +
				"				END IF;  \n" +
				"  \n" +
				"  \n" +
				"				-- loop item till all records found in string match of barcode template  \n" +
				"				barcodeMatch_loop:LOOP  \n" +
				"					-- get all five selected values  \n" +
				"					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;  \n" +
				"					-- exit loop if no record found for barcode match  \n" +
				"					IF exit_loop THEN  \n" +
				"						CLOSE barcodeMatch_cursor;  \n" +
				"						LEAVE barcodeMatch_loop;  \n" +
				"					END IF;  \n" +
				"					-- dynamic query to get dellimeter string with values from string  \n" +
				"					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');  \n" +
				"					PREPARE stmtdelimiter FROM @sqlGetdelimiter;  \n" +
				"					EXECUTE stmtdelimiter;  \n" +
				"					DEALLOCATE PREPARE stmtdelimiter;  \n" +
				"  \n" +
				"					-- get delimiter values from string  \n" +
				"					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));  \n" +
				"					-- check for field type is static or dynamic  \n" +
				"					-- if static field than check for mfg code and mfg part number  \n" +
				"					IF v_fieldType = 0  THEN  \n" +
				"						-- component_sid_stock  \n" +
				"						-- get static field name from barcode table delimiter data element id  \n" +
				"						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);  \n" +
				"						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys  \n" +
				"						IF(StaticField=\"scanmfgpn\") THEN  \n" +
				"							SET MFG_Part_No = delimiter_value_data;  \n" +
				"							/* If component id is not found */  \n" +
				"							IF(pComponentID = 0)  \n" +
				"                            THEN  \n" +
				"								/* Get component data */  \n" +
				"								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;  \n" +
				"								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS  \n" +
				"								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM  \n" +
				"								(  \n" +
				"									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 	component c  \n" +
				"									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
				"									UNION  \n" +
				"									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 		component_otherpn co  \n" +
				"									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0  \n" +
				"									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0  \n" +
				"								) a  \n" +
				"								UNION  \n" +
				"								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM  \n" +
				"								(  \n" +
				"									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 	component c  \n" +
				"									WHERE 	c.mfgPN=delimiter_value_data AND  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0  \n" +
				"									UNION  \n" +
				"									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
				"									FROM 		component_otherpn co  \n" +
				"									LEFT JOIN 	component c ON c.id = co.refComponentID  \n" +
				"									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  \n" +
				"                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0  \n" +
				"								) a  \n" +
				"								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;  \n" +
				"  \n" +
				"								IF (pSupplierID IS NOT NULL) THEN  \n" +
				"									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID  AND s.isCustMapping=0  \n" +
				"								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;  \n" +
				"								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail;  \n" +
				"									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  \n" +
				"								   ELSE  \n" +
				"									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;  \n" +
				"								END IF;  \n" +
				"  \n" +
				"								IF (v_componentCount > 1) THEN  \n" +
				"									/* If component is more that one then remove supplier from list */  \n" +
				"									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;  \n" +
				"									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS  \n" +
				"									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;  \n" +
				"  \n" +
				"									/* After remove supplier if get only one record then  */  \n" +
				"									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;  \n" +
				"									IF (v_componentCount < 2) THEN  \n" +
				"										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
				"											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
				"										FROM 	temp_component_supplier_detail;  \n" +
				"									END IF;  \n" +
				"								ELSE  \n" +
				"									IF (pSupplierID IS NULL) THEN  \n" +
				"										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
				"											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
				"										FROM 	temp_component_detail;  \n" +
				"									ELSE  \n" +
				"										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN  \n" +
				"											SET v_MfrNotFoundForSupplierQuote = 1;  \n" +
				"										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN  \n" +
				"											SET v_componentCount=0;  \n" +
				"											SET v_SupplierQuoteMFRIsNotCustomPart = 1;  \n" +
				"										ELSE  \n" +
				"											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
				"												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
				"											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);  \n" +
				"										END IF;  \n" +
				"									END IF;  \n" +
				"								END IF;  \n" +
				"							ELSE  \n" +
				"                            	/* If component id is found */  \n" +
				"								SELECT 	COUNT(1) INTO v_componentCount  \n" +
				"								FROM 	component  \n" +
				"								WHERE 	id = pComponentID  \n" +
				"                                and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
				"  \n" +
				"							END IF;  \n" +
				"                            /* Remove from cursor if found more that one component */  \n" +
				"							IF v_componentCount > 1 THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"                            SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
				"									INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
				"								FROM 	component  \n" +
				"								WHERE 	id = pComponentID  \n" +
				"							and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
				"  \n" +
				"							/* If inventory is opening inventory and type is assembly */  \n" +
				"							IF(pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* If bad part found */  \n" +
				"							IF (v_isGoodPart != 1) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Check all type of restriction */  \n" +
				"							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Check all type of restriction with packaging */  \n" +
				"							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Barcode MFR and Part MFR mismatch */  \n" +
				"							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN  \n" +
				"								SET BarcodeMFGMatch = 'Mismatch';  \n" +
				"								CLOSE barcodeMatch_cursor;  \n" +
				"								LEAVE barcodeMatch_loop;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Found DIST then set id of MFR of that DIST */  \n" +
				"							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
				"							IF (@MFGType = 'DIST') THEN  \n" +
				"								SET v_SupplierID = v_componentId;  \n" +
				"								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and  \n" +
				"                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Check kit allocation */  \n" +
				"							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN  \n" +
				"								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */  \n" +
				"								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;  \n" +
				"								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId  \n" +
				"										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  \n" +
				"								FROM 	(  \n" +
				"										SELECT 	*  \n" +
				"										FROM  \n" +
				"											(  \n" +
				"												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
				"														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId  \n" +
				"												FROM 		component_packagingalias cp  \n" +
				"												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid  \n" +
				"												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id  \n" +
				"												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
				"												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
				"												UNION  \n" +
				"												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
				"														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
				"												FROM 		rfq_lineitems_alternatepart rla  \n" +
				"												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
				"												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0  \n" +
				"												UNION  \n" +
				"												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
				"														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
				"												FROM 		rfq_lineitems_alternatepart rla  \n" +
				"												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
				"												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL  \n" +
				"												#GROUP BY 	custPNID, rla.partID  \n" +
				"											) b  \n" +
				"										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)  \n" +
				"										#GROUP BY b.lineID, b.assyId  \n" +
				"									) a;  \n" +
				"  \n" +
				"								/* BOM line not found  */  \n" +
				"								IF (v_rfqLineItemsID IS NULL) THEN  \n" +
				"									CLOSE barcodeMatch_cursor;  \n" +
				"									LEAVE barcodeMatch_loop;  \n" +
				"								/* Found More then one BOM line */  \n" +
				"								ELSEIF (v_BOMLineCount > 1) THEN  \n" +
				"									CLOSE barcodeMatch_cursor;  \n" +
				"									LEAVE barcodeMatch_loop;  \n" +
				"								ELSE  \n" +
				"									/* Restrict use bom */  \n" +
				"									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN  \n" +
				"										CLOSE barcodeMatch_cursor;  \n" +
				"										LEAVE barcodeMatch_loop;  \n" +
				"									END IF;  \n" +
				"  \n" +
				"									/* BOM line contain any error */  \n" +
				"									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;  \n" +
				"									IF (v_isBOMLineClean = 0) THEN  \n" +
				"										CLOSE barcodeMatch_cursor;  \n" +
				"										LEAVE barcodeMatch_loop;  \n" +
				"									END IF;  \n" +
				"								END IF;  \n" +
				"  \n" +
				"								/* Part not install, purchase and not dnp  */  \n" +
				"								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN  \n" +
				"									CLOSE barcodeMatch_cursor;  \n" +
				"									LEAVE barcodeMatch_loop;  \n" +
				"								END IF;  \n" +
				"							END IF;  \n" +
				"  \n" +
				"							/* Set dynamic query for component */  \n" +
				"							IF  v_componentCount = 1 THEN  \n" +
				"								IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
				"									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"');  \n" +
				"								ELSE  \n" +
				"									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
				"									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"');  \n" +
				"								END IF;  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Not in use */  \n" +
				"						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys  \n" +
				"						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for pkgQty */  \n" +
				"						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for lotcode */  \n" +
				"						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for mfrdatecode and datecode */  \n" +
				"						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"							/* SELECT id INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0; Commented by CP - 08-03-2022 */  \n" +
				"							IF (v_dateCodeFormatID IS NOT NULL) THEN  \n" +
				"								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);  \n" +
				"								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');  \n" +
				"							ELSE  \n" +
				"								SET exit_loop = FALSE;  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for binid */  \n" +
				"						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for packaging */  \n" +
				"						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for nickname */  \n" +
				"						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for po number */  \n" +
				"						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for so number */  \n" +
				"						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for packing slip number */  \n" +
				"						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						/* Set dynamic query for invoice number */  \n" +
				"						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
				"							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
				"								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
				"							ELSE  \n" +
				"								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
				"								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
				"							END IF;  \n" +
				"						END IF;  \n" +
				"					ELSE  \n" +
				"						/* Set dynamic query for other than system generated */  \n" +
				"						SELECT entityID INTO v_entityId FROM dataelement WHERE  \n" +
				"							dataElementID=v_dataElementId AND isDeleted = 0;  \n" +
				"						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)  \n" +
				"							VALUES (v_entityId,v_dataElementId,delimiter_value_data);  \n" +
				"					END IF;  \n" +
				"				END LOOP barcodeMatch_loop;  \n" +
				"  \n" +
				"				-- check if mfg and component both found than  \n" +
				"				IF v_componentCount = 0 AND pSupplierID IS NULL THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
				"				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
				"				ELSEIF (v_componentCount > 1) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);  \n" +
				"				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);  \n" +
				"				ELSEIF(v_isGoodPart != 1) THEN  \n" +
				"					IF (v_isGoodPart = 2) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
				"					ELSE  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);  \n" +
				"				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
				"					IF (v_isCPNFlag = 1) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
				"					ELSE  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN  \n" +
				"				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN  \n" +
				"				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);  \n" +
				"				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN  \n" +
				"				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);  \n" +
				"				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);  \n" +
				"				ELSEIF (v_componentCount = 1 AND  pInventoryType = 'NI' AND pIsFromUID = 1) THEN  \n" +
				"					SELECT COUNT(1) INTO v_pendingPartCount FROM vu_umid_creation_pending WHERE BalanceQty > 0 AND PartId = v_componentId AND BinID = pBinID;  \n" +
				"                    IF(v_pendingPartCount = 0) THEN  \n" +
				"						SELECT b.Name INTO @binName FROM binmst b WHERE b.id = pBinID;  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('<b>', v_PIDCode ,'</b> does not belong to the bin <b>', @binName ,'</b>. Review Pending UMID list should further investigation required.'),24,v_PIDCode);  \n" +
				"                    ELSEIF(v_pendingPartCount = 1) THEN  \n" +
				"						SELECT  ps.packingSlipModeStatus,  vu.receivedStatus, vu.packingSlipNumber, b.Name,  fun_getPackagingNameByID(vu.packagingID) AS packagingType  \n" +
				"								INTO @packingSlipModeStatus, @receivedStatus, @packingSlipNumber, @binName, @packagingType  \n" +
				"						FROM vu_umid_creation_pending vu  \n" +
				"                                INNER JOIN	packing_slip_material_receive ps on ps.id = vu.packingSlipID AND ps.isdeleted = 0  \n" +
				"                                INNER JOIN 	binmst b on b.id = vu.BinID AND b.isdeleted = 0  \n" +
				"								WHERE 		vu.BalanceQty > 0 AND vu.PartId = v_componentId AND vu.BinID = pBinID;  \n" +
				"						IF(@packingSlipModeStatus = 'D') THEN  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as packing slip# <b>', @packingSlipNumber ,'</b> is in <b>Draft</b> mode for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),25,v_PIDCode);  \n" +
				"                        ELSEIF(@receivedStatus = 'R' OR @receivedStatus = 'P') THEN  \n" +
				"							SET @receivedStatusValue = IF(@receivedStatus = 'P', 'Pending', 'Rejected');  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as line received status of packing slip# <b>', @packingSlipNumber ,'</b> is <b>',@receivedStatusValue,'</b> for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),26,v_PIDCode);  \n" +
				"                        END IF;  \n" +
				"                    END IF;  \n" +
				"                ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN  \n" +
				"					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;  \n" +
				"					IF @Mfgmatched = 0  THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				ELSE  \n" +
				"					IF @mfgCount = 0 THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"  \n" +
				"					IF  @mfgCount = 0 AND v_componentCount=0  THEN  \n" +
				"						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				END IF;  \n" +
				"				IF (pCPN = 1) THEN  \n" +
				"					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;  \n" +
				"					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;  \n" +
				"					IF (@codeFromPart != @codeFromMfg) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"  \n" +
				"					IF (@isCPNPart != 1) THEN  \n" +
				"						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);  \n" +
				"					END IF;  \n" +
				"				END IF;  \n" +
				"				IF (pIsFromUID = 1) THEN  \n" +
				"					/* If not fire any validation */  \n" +
				"					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
				"						-- must call statements in sequence  \n" +
				"						/* Add component sid stock in temp table of stock table and add in temp table */  \n" +
				"						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');  \n" +
				"                        PREPARE stmt1 FROM @SQL1;  \n" +
				"						EXECUTE stmt1;  \n" +
				"						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel );  \n" +
				"  \n" +
				"						IF (pprefix IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',prefix=','\"',pprefix,'\"');  \n" +
				"                        END IF;  \n" +
				"  \n" +
				"						IF (pnickName IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pRefCpnMfgID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pCustomerID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pAssyID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (pReceiveMaterialType IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						IF (v_SupplierID IS NOT NULL) THEN  \n" +
				"							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);  \n" +
				"						END IF;  \n" +
				"  \n" +
				"						SET @sql2 = UpdateValue;  \n" +
				"						PREPARE stmt2 FROM @SQL2;  \n" +
				"						EXECUTE stmt2;  \n" +
				"						DEALLOCATE PREPARE stmt2;  \n" +
				"  \n" +
				"						/* Add success result in save error table */  \n" +
				"						IF (pkitAssemblyID IS NULL) THEN  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
				"						ELSE  \n" +
				"							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));  \n" +
				"						END IF;  \n" +
				"						/* Add data in table of delimeter table */  \n" +
				"						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN  \n" +
				"							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)  \n" +
				"							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t;  \n" +
				"						END IF;  \n" +
				"						/* select detail of error table */  \n" +
				"						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"  \n" +
				"						/* select detail in temp table of component sid stock table  */  \n" +
				"						SELECT * FROM temp_Component_Sid_Stock;  \n" +
				"						/* Select data of component */  \n" +
				"						SELECT 	c.*,  \n" +
				"							fun_getDateCodeFormatById(c.dateCodeFormatID) dateCodeFormat,  \n" +
				"							mg.mfgcode AS mfgCode,  \n" +
				"							mg.mfgName AS mfgName,  \n" +
				"                            fun_GetFormattedMfgCode(mg.mfgCode, mg.mfgName, v_mfgNameFormat) mfgCodeName,  \n" +
				"							cp.name AS packagingName,  \n" +
				"							cp.sourceName,  \n" +
				"							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
				"							csup.packageQty AS supplierPkgQty,  \n" +
				"                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
				"							csup.mfgcodeID AS supplierMfgId,  \n" +
				"							mcm.mfgcode AS supplierMFGCode,  \n" +
				"							mcm.mfgName AS supplierMFGName,  \n" +
				"                            fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) supplierMFGCodeName,  \n" +
				"							csup.mfgPN AS supplierMFGPN,  \n" +
				"							csup.packagingID AS supplierPackagingId,  \n" +
				"                            csp.name AS supplierPackagingName,  \n" +
				"							csp.sourceName AS supplierSourceName,  \n" +
				"							csup.minimum AS supplierMinimum,  \n" +
				"							ccpn.id AS cpnID,  \n" +
				"							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
				"							rfqroh.rohsIcon AS rohsIcon,  \n" +
				"							rfqroh.name AS rohsName,  \n" +
				"							rfqmou.name AS mountingTypeName,  \n" +
				"                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
				"							um.unitName AS uomName,  \n" +
				"							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
				"							fun_getDateCodeFormatById(mg.dateCodeFormatID) AS mfg_dateCodeFormat,  \n" +
				"							mg.dateCodeFormatID AS mfg_dateCodeFormatId,  \n" +
				"							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
				"						FROM component AS c  \n" +
				"						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
				"						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
				"						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
				"						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
				"						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
				"						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
				"                        LEFT JOIN component_packagingmst cp on cp.id = c.packagingID AND cp.isdeleted = 0  \n" +
				"                        LEFT JOIN component_packagingmst csp on csp.id = csup.packagingID AND csp.isdeleted = 0  \n" +
				"						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
				"						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
				"						WHERE c.id = v_componentId;  \n" +
				"  \n" +
				"						/* select data of data element of component sid stock */  \n" +
				"						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`  \n" +
				"						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv  \n" +
				"						LEFT OUTER JOIN `dataelement` AS dl  \n" +
				"						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;  \n" +
				"						/* select data of cpn */  \n" +
				"						SELECT 	id, refComponentID, refCPNPartID  \n" +
				"						FROM 	component_cust_alias_rev_pn  \n" +
				"						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;  \n" +
				"  \n" +
				"						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
				"							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0  \n" +
				"						) AND isDeleted = 0;  \n" +
				"  \n" +
				"						/* select detail of bom */  \n" +
				"						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,  \n" +
				"								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN  \n" +
				"						FROM 		rfq_lineitems_alternatepart rla  \n" +
				"						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
				"						WHERE 		rla.isDeleted = 0  \n" +
				"									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))  \n" +
				"									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)  \n" +
				"									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);  \n" +
				"  \n" +
				"					ELSE  \n" +
				"						/* Found any error then select error  */  \n" +
				"						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"					END IF;  \n" +
				"				ELSEIF(v_isGoodPart != 1) THEN  \n" +
				"					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"				ELSE  \n" +
				"					/* generate dynamic query and save in temp in case of packing slip */  \n" +
				"					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
				"						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');  \n" +
				"						PREPARE stmt1 FROM @SQL1;  \n" +
				"						EXECUTE stmt1;  \n" +
				"						DEALLOCATE PREPARE stmt1;  \n" +
				"					END IF;  \n" +
				"  \n" +
				"					/* Add success data in temp error table */  \n" +
				"					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
				"  \n" +
				"					/* Add success data in temp table for select in case of call from packing slip packing slip screen */  \n" +
				"					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
				"					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
				"					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */  \n" +
				"					IF (pCategory = 'M') THEN  \n" +
				"						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
				"						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
				"						SELECT 	c.*,  \n" +
				"							fun_getDateCodeFormatById(c.dateCodeFormatID) dateCodeFormat,  \n" +
				"							fun_GetFormattedMfgCode(mg.mfgCode, mg.mfgName, v_mfgNameFormat) mfgCodeName,  \n" +
				"							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
				"							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
				"							csup.packageQty AS supplierPkgQty,  \n" +
				"                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
				"							csup.mfgcodeID AS supplierMfgId,  \n" +
				"							mcm.mfgcode AS supplierMFGCode,  \n" +
				"							mcm.mfgName AS supplierMFGName,  \n" +
				"                            fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) supplierMFGCodeName,  \n" +
				"							csup.packagingID AS supplierPackagingId,  \n" +
				"							csup.mfgPN AS supplierMFGPN,  \n" +
				"							csup.id AS supplierMFGPNID,  \n" +
				"							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,  \n" +
				"							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,  \n" +
				"							ccpn.id AS cpnID,  \n" +
				"							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
				"							rfqroh.rohsIcon AS rohsIcon,  \n" +
				"							rfqroh.name AS rohsName,  \n" +
				"							rfqmou.name AS mountingTypeName,  \n" +
				"                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
				"							um.unitName AS uomName,  \n" +
				"							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
				"							fun_getDateCodeFormatById(mg.dateCodeFormatID) AS mfg_dateCodeFormat,  \n" +
				"							mg.dateCodeFormatID AS mfg_dateCodeFormatId,  \n" +
				"							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
				"						FROM component AS c  \n" +
				"						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
				"						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
				"						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
				"						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
				"						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
				"						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
				"						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
				"						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
				"						WHERE c.id = v_componentId;  \n" +
				"					END IF;  \n" +
				"				END IF;  \n" +
				"			ELSE  \n" +
				"				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
				"					('Barcode template does not exist, Please add template',0,MFG_Part_No);  \n" +
				"  \n" +
				"				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
				"				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
				"				SELECT 1;  \n" +
				"  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
				"				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
				"				SELECT 1;  \n" +
				"			END IF;  \n" +
				"  \n" +
				"		END block2;  \n" +
				"	ELSE  \n" +
				"		IF (pIsFromUID = 1) THEN  \n" +
				"			SELECT * FROM tempUIDSuccessDetail;  \n" +
				"		ELSE  \n" +
				"			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
				"			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
				"			SELECT 1;  \n" +
				"		END IF;  \n" +
				"	END IF;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 25-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_saveSplitUMIDDetail`;  \n" +
				"CREATE PROCEDURE `Sproc_saveSplitUMIDDetail`(  \n" +
				"	IN pUIDID INT,  \n" +
				"    IN pSplitUID VARCHAR(20),  \n" +
				"	IN pFromBinID INT,  \n" +
				"	IN pFromWHID INT,  \n" +
				"	IN pFromParentWH INT,  \n" +
				"	IN pToBinID INT,  \n" +
				"    IN pPackaging INT,  \n" +
				"    IN pInventoryType VARCHAR(10),  \n" +
				"	IN pSplitCount DECIMAL(18,8),  \n" +
				"	IN pSplitUnit DECIMAL(18,8),  \n" +
				"	IN pPkgCount DECIMAL(18,8),  \n" +
				"	IN pPkgUnit DECIMAL(18,8),  \n" +
				"    IN pIsKitAllocation TINYINT,  \n" +
				"    IN pUOM INT,  \n" +
				"	IN pUserID INT,  \n" +
				"    IN pUserRoleID INT,  \n" +
				"	IN pCountApprovalHistoryData JSON  \n" +
				"    )  \n" +
				"BEGIN  \n" +
				"  \n" +
				"    DECLARE v_approvalReason VARCHAR(1000);  \n" +
				"    DECLARE v_approvedBy VARCHAR(255);  \n" +
				"    DECLARE v_deallocatedKitDesc VARCHAR(1000);  \n" +
				"    DECLARE v_approvedByRoleId VARCHAR(255);  \n" +
				"    DECLARE v_isApproved TINYINT DEFAULT 0;  \n" +
				"    DECLARE v_approvedDate DATETIME;  \n" +
				"    DECLARE v_newUIDHistoryID INT;  \n" +
				"    DECLARE v_newSplitUID INT;  \n" +
				"    DECLARE v_maxKitList INT;  \n" +
				"    DECLARE v_consumedQtyDiff INT;  \n" +
				"    DECLARE v_kitID INT;  \n" +
				"    DECLARE v_kitAllocatedUnit DECIMAL(18,8);  \n" +
				"    DECLARE v_totalAllocatedUnits DECIMAL(18,8);  \n" +
				"  \n" +
				"    IF(pSplitUID IS NOT NULL) THEN  \n" +
				"			#Insert split umid into component_sid_stock table  \n" +
				"			DROP TEMPORARY TABLE IF EXISTS tempComponentSidStk;  \n" +
				"			CREATE TEMPORARY TABLE IF NOT EXISTS tempComponentSidStk AS  \n" +
				"			SELECT id,uid, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus,  \n" +
				"						costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
				"						mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate, dateCodeFormatID,	fromDateCodeFormat,  \n" +
				"						sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
				"						customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID, mfrDateCode,  \n" +
				"						rohsStatusID, woID, woNumber, fromUIDId, fromUID, parentUIDId, parentUID, selfLifeDays, shelfLifeAcceptanceDays,  \n" +
				"                        maxShelfLifeAcceptanceDays, isReservedStock  \n" +
				"			FROM component_sid_stock WHERE id = pUIDID;  \n" +
				"			INSERT INTO component_sid_stock  \n" +
				"			(  \n" +
				"					uid, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus, stockInventoryType,  \n" +
				"					costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
				"					mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate,  dateCodeFormatID, fromDateCodeFormat,  \n" +
				"					sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
				"					customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID,  \n" +
				"					mfrDateCode, rohsStatusID, woID, woNumber, fromUIDId, fromUID, parentUIDId, parentUID,  \n" +
				"					pkgQty, orgQty, pkgUnit, orgPkgUnit, binID, packaging, fromBin, orgRecBin, fromWarehouse, fromDepartment,  \n" +
				"					orgRecWarehouse, orgRecDepartment, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays,  \n" +
				"                    isReservedStock, isDeleted, createdBy, createByRoleId, createdAt, updatedBy, updateByRoleId, updatedAt  \n" +
				"			)  \n" +
				"			SELECT 	pSplitUID, refcompid, scanlabel, refinvno, refinvdate, isinStk, printStatus, pInventoryType,  \n" +
				"					costCategoryID, lotCode, dateCode, nickName, prefix, availableQty, uidPrefix, customerID,  \n" +
				"					mfgDate, expiryDate, pcbPerArray, isSharedInventory, MFGorExpiryDate,  \n" +
				"					sealDate, spq, cpn, RefCPNMFGPNID, mfgAvailabel, assyID, receiveMaterialType, uom, refSupplierPartId,  \n" +
				"					customerConsign, specialNote, initialQtyChangeRemark, refRestrictUMIDId, isUMIDRestrict, mfrDateCodeFormatID, mfrDateCode,  \n" +
				"					rohsStatusID, woID, woNumber, id, uid, IFNULL(parentUIDId,id), IFNULL(parentUID,uid),  \n" +
				"					pSplitCount, pSplitCount, pSplitUnit, pSplitUnit, pToBinID, pPackaging, pFromBinID, pFromBinID,  \n" +
				"					pFromWHID, pFromParentWH, pFromWHID, pFromParentWH, selfLifeDays, shelfLifeAcceptanceDays, maxShelfLifeAcceptanceDays,  \n" +
				"                    isReservedStock, 0 , pUserID, pUserRoleID, fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID, fun_DatetimetoUTCDateTime()  \n" +
				"			FROM tempComponentSidStk;  \n" +
				"			SET v_newSplitUID = LAST_INSERT_ID();  \n" +
				"	END IF;  \n" +
				"  \n" +
				"    IF(pUIDID IS NOT NULL) THEN  \n" +
				"			# have to update count/unit into parent umid after split  \n" +
				"			IF(pPkgCount IS NOT NULL AND pPkgUnit IS NOT NULL) THEN  \n" +
				"				UPDATE 	component_sid_stock  \n" +
				"				SET 	pkgUnit = pPkgUnit,  \n" +
				"						pkgQty = pPkgCount,  \n" +
				"						isinStk = 1,  \n" +
				"						updatedBy = pUserID,  \n" +
				"						updateByRoleId = pUserRoleID,  \n" +
				"						updatedAt = fun_DatetimetoUTCDateTime()  \n" +
				"				WHERE 	id = pUIDID;  \n" +
				"			END IF;  \n" +
				"  \n" +
				"			# If parent UMID is allocated to kit then remove allocation if remaining qty is less than allocated qty  \n" +
				"			IF(pIsKitAllocation = 1) THEN  \n" +
				"					#Insert current kit allocated id into table  \n" +
				"					DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
				"					CREATE TEMPORARY TABLE IF NOT EXISTS tempKitID (tempKitId INTEGER);  \n" +
				"  \n" +
				"					#Insert other kit detail in temp table  \n" +
				"					DROP TEMPORARY TABLE IF EXISTS tempOtherSharedKit;  \n" +
				"					CREATE TEMPORARY TABLE  tempOtherSharedKit AS  \n" +
				"					SELECT 	k.id, k.refSalesOrderDetID, k.allocatedUnit, k.status,  \n" +
				"							rp.promiseShipDate,  \n" +
				"							fun_convertUOM(k.allocatedUOM, pUOM, k.allocatedUnit) convertedTOUmidUomUnit  \n" +
				"					FROM 	kit_allocation k  \n" +
				"					LEFT JOIN (  \n" +
				"							SELECT 	salesOrderDetID,  \n" +
				"									(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
				"									MIN(poDueDate) promiseShipDate  \n" +
				"							FROM 	vu_kit_plans  \n" +
				"							GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
				"						) rp ON k.refSalesOrderDetID = rp.salesOrderDetID AND k.assyID = rp.assyID  \n" +
				"					WHERE 	k.status = 'A'  \n" +
				"					AND		k.refuidid = pUIDID  \n" +
				"					ORDER BY rp.promiseShipDate DESC;  \n" +
				"  \n" +
				"					SELECT IFNULL(SUM(convertedTOUmidUomUnit), 0) INTO v_totalAllocatedUnits FROM tempOtherSharedKit;  \n" +
				"					#Check remaining qty is less then allocated qty then adjust allocation based on long release time  \n" +
				"					IF(v_totalAllocatedUnits > pPkgUnit) THEN  \n" +
				"						SET v_consumedQtyDiff = v_totalAllocatedUnits - pSplitUnit;  \n" +
				"						WHILE v_consumedQtyDiff > 0 DO  \n" +
				"							IF((SELECT COUNT(1) FROM tempOtherSharedKit tk WHERE tk.status = 'A' LIMIT 1) > 0) THEN  \n" +
				"								SELECT 	tk.id, 	tk.allocatedUnit  \n" +
				"								INTO 	v_kitID,	v_kitAllocatedUnit  \n" +
				"								FROM 	tempOtherSharedKit tk  \n" +
				"								WHERE 	tk.status = 'A' LIMIT 1;  \n" +
				"  \n" +
				"								IF(v_kitID IS NOT NULL) THEN  \n" +
				"									UPDATE tempOtherSharedKit tk  \n" +
				"									SET 	tk.status = 'D'  \n" +
				"									WHERE 	tk.id = v_kitID;  \n" +
				"  \n" +
				"									UPDATE 	kit_allocation k  \n" +
				"									SET 	k.status = 'D',  \n" +
				"										k.remark = 'Auto Deallocated from Count Material.',  \n" +
				"										k.returnQty = pSplitCount,  \n" +
				"										k.returnUnit = pSplitUnit,  \n" +
				"										k.returnUOM = pUOM,  \n" +
				"										k.returnDate = fun_DatetimetoUTCDateTime(),  \n" +
				"										k.updatedBy = pUserID,  \n" +
				"										k.updateByRoleId = pUserRoleID,  \n" +
				"										k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
				"									WHERE 	k.id = v_kitID;  \n" +
				"  \n" +
				"									INSERT INTO tempKitID (tempKitId) VALUES (v_kitID);  \n" +
				"  \n" +
				"									SET v_consumedQtyDiff = v_consumedQtyDiff - v_kitAllocatedUnit;  \n" +
				"								END IF;  \n" +
				"							END IF;  \n" +
				"						END WHILE;  \n" +
				"					END IF;  \n" +
				"				END IF;  \n" +
				"  \n" +
				"			# Manage deallocation approval history data  \n" +
				"			IF(pCountApprovalHistoryData IS NOT NULL) THEN  \n" +
				"				#Insert selected count approval records in temp table to return count approval Data  \n" +
				"				DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
				"				CREATE TEMPORARY TABLE IF NOT EXISTS tempCountApprovalHistoryDetail AS  \n" +
				"				SELECT 	*  \n" +
				"				FROM JSON_TABLE(  \n" +
				"						pCountApprovalHistoryData,  \n" +
				"					\"$[*]\" COLUMNS(  \n" +
				"							approvalReason VARCHAR(1000) PATH \"$.approvalReason\",  \n" +
				"							approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
				"							deallocatedKitDesc VARCHAR(1000) PATH \"$.deallocatedKitDesc\",  \n" +
				"							approvedByRoleId VARCHAR(255) PATH \"$.approvedByRoleId\",  \n" +
				"							isApproved TINYINT PATH \"$.isApproved\"  \n" +
				"					)  \n" +
				"				) AS countApproval;  \n" +
				"				SELECT ap.approvalReason, ap.approvedBy, ap.deallocatedKitDesc,	ap.approvedByRoleId, ap.isApproved,  fun_DatetimetoUTCDateTime()  \n" +
				"						INTO v_approvalReason, v_approvedBy, v_deallocatedKitDesc,	v_approvedByRoleId, v_isApproved, v_approvedDate  \n" +
				"				FROM   tempCountApprovalHistoryDetail ap;  \n" +
				"			END IF;  \n" +
				"  \n" +
				"            # Insert log in UMID history page  for parent umid  \n" +
				"			INSERT INTO component_sid_stock_history  \n" +
				"				(  \n" +
				"					transType, 			actionPerformed, 	refUIDId, 			uid,  \n" +
				"					splitUIDId,			splitUID,			fromUIDId, 			fromUID,  \n" +
				"					parentUIDId, 		parentUID,  		refcompid, 			binID,  \n" +
				"					warehouseID, 		deptWHID, 			currentQty,		 	currentUnit,  \n" +
				"					splitQty,		 	splitUnit,			uom,  \n" +
				"					isDeleted,			createdBy, 			createdAt, 		  	createByRoleId,  \n" +
				"					updatedBy,			updatedAt,		 	updateByRoleId,		approvedDate,  \n" +
				"					approvalReason,	  	approvedBy,			deallocatedKitDesc, 	approvedByRoleId,  \n" +
				"					isApproved,			orgQty,				orgUnit  \n" +
				"				)  \n" +
				"			SELECT  \n" +
				"					'Split UMID',		'Split UMID',		pUIDID,		css.uid,		v_newSplitUID, 		pSplitUID,  \n" +
				"					css.fromUIDId, 		css.fromUID,		css.parentUIDId, 		css.parentUID, 			css.refcompid,  \n" +
				"					css.binID,			b.warehouseID,		w.parentWHID deptWHID,			pPkgCount,			pPkgUnit,  \n" +
				"					pSplitCount,		pSplitUnit,	  		css.uom,		  		0,  \n" +
				"					pUserID,			fun_DatetimetoUTCDateTime(),      		pUserRoleID,  \n" +
				"					pUserID,			fun_DatetimetoUTCDateTime(),	   pUserRoleID,			v_approvedDate,  \n" +
				"					v_approvalReason, 	v_approvedBy, 		v_deallocatedKitDesc,	v_approvedByRoleId,  \n" +
				"					v_isApproved,       css.orgQty,		css.orgPkgUnit  \n" +
				"			FROM  	component_sid_stock   css  \n" +
				"			JOIN 	binmst b ON css.binID = b.id  \n" +
				"			JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
				"			WHERE   css.isdeleted = 0  \n" +
				"			AND 	css.id = pUIDID;  \n" +
				"  \n" +
				"            IF(pIsKitAllocation = 1) THEN  \n" +
				"				/* Update Kit_allocation for set componentSIDStockHistoryID */  \n" +
				"				SET v_newUIDHistoryID = LAST_INSERT_ID();  \n" +
				"				UPDATE  kit_allocation SET  componentSIDStockHistoryID = v_newUIDHistoryID WHERE id IN (SELECT tempKitId FROM tempKitID);  \n" +
				"			END IF;  \n" +
				"    END IF;  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempComponentSidStk;  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempKitID;  \n" +
				"	DROP TEMPORARY TABLE IF EXISTS tempCountApprovalHistoryDetail;  \n" +
				"	SELECT cs.* FROM component_sid_stock cs WHERE cs.id = v_newSplitUID;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 25-03-2022 *********************************** */
				"DROP procedure IF EXISTS `Sproc_checkDelete_date_code_format`;  \n" +
				"CREATE PROCEDURE `Sproc_checkDelete_date_code_format`(  \n" +
				"		IN tableName VARCHAR(255),  \n" +
				"		IN IDs LONGTEXT,  \n" +
				"		IN deletedBy INT,  \n" +
				"		IN entityID VARCHAR(255),  \n" +
				"		IN refrenceIDs LONGTEXT,  \n" +
				"		IN countList INT,  \n" +
				"		IN pRoleID INT  \n" +
				"		)  \n" +
				"BEGIN  \n" +
				"  \n" +
				"SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcheckreference as  \n" +
				"		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"systemconfigrations\" else \"\" end as msg FROM systemconfigrations sys WHERE sys.isDeleted = 0 AND sys.key = \"UMIDInternalDateCodeFormat\" AND sys.values IN(',IDs,') LIMIT 1)  \n" +
				"		UNION ALL  \n" +
				"        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstManufacturer\" else \"\" end as msg FROM mfgcodemst WHERE isDeleted = 0 AND dateCodeFormatID IN(',IDs,') LIMIT 1)  \n" +
				"		UNION ALL  \n" +
				"        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"component\" else \"\" end as msg FROM component WHERE isDeleted = 0 AND dateCodeFormatID IN(',IDs,') LIMIT 1)  \n" +
				"        UNION ALL  \n" +
				"		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"component_sid_stock\" else \"\" end as msg FROM component_sid_stock WHERE isDeleted = 0 AND mfrDateCodeFormatID IN(',IDs,') LIMIT 1)  \n" +
				"        ');  \n" +
				"	PREPARE stmt FROM @SQL;  \n" +
				"	EXECUTE stmt;  \n" +
				"		IF (countList=FALSE) THEN  \n" +
				"			IF (SELECT SUM(t.cnt) FROM tempcheckreference t) = 0 THEN  \n" +
				"				SET @SQl1 = CONCAT('update date_code_format set isDeleted = 1, deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in(',IDs,') and isDeleted = 0');  \n" +
				"				PREPARE stmt1 FROM @SQL1;  \n" +
				"				EXECUTE stmt1;  \n" +
				"				DEALLOCATE PREPARE stmt1;  \n" +
				"				SELECT * FROM tempcheckreference WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
				"			ELSE  \n" +
				"				SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcheckreference t;  \n" +
				"			END IF;  \n" +
				"		ELSE  \n" +
				"			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
				"			   FROM tempcheckreference t1  \n" +
				"					INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
				"					WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
				"					ORDER BY t2.display_page_name;  \n" +
				"		END IF;  \n" +
				"    DROP TEMPORARY TABLE if exists tempcheckreference;  \n" +
				"END;  \n" +
				/* **************************** Add Script Version -> 25-03-2022 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (6052,'2.00','V1','Bug 42413: Qa Testing issues for #40723: UMID Create Page enhancement Points [Lot Code Changes] - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
       case 6052:
          allDbChangesArray.push(
          /* **************************** New Script -> 25-03-2022  *********************************** */
            "DROP procedure IF EXISTS `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
            "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(  \n" +
            "	IN ppageIndex INT,  \n" +
            "	IN precordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pSupplierIDs VARCHAR(16383),  \n" +
            "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
            "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
            "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
            "    IN pExactPaymentNumberSearch TINYINT,  \n" +
            "	IN pPaymentNumber VARCHAR(50),  \n" +
            "    IN pInvoiceNumber VARCHAR(50),  \n" +
            "	IN pExactPaymentAmountSearch TINYINT,  \n" +
            "	IN pAmount VARCHAR(50),  \n" +
            "	IN pFromDate DATE,  \n" +
            "	IN pToDate DATE,  \n" +
            "    IN pRefPaymentMode VARCHAR(2),  \n" +
            "    IN pLockStatusFilter VARCHAR(50),  \n" +
            "    IN pSelectedDateType VARCHAR(10),  \n" +
            "    IN pPaymentComments VARCHAR(1000),  \n" +
            "    IN pInvoiceAmount VARCHAR(50),  \n" +
            "    IN pExactInvoiceAmountSearch TINYINT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);  \n" +
            "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
            "  \n" +
            "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
            "  \n" +
            "	SET v_InvoiceNumberWhereClause= '';  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "  		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF(pPaymentComments IS NOT NULL AND pPaymentComments != '')THEN  \n" +
            "    	SET pWhereClause = CONCAT(pWhereClause,\" AND remark LIKE '%\",pPaymentComments,\"%'\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
            "    	SET pWhereClause = CONCAT(pWhereClause,\" AND lockStatus = '\", pLockStatusFilter ,\"'\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
            "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "			EXISTS (select 1  \n" +
            "					   from packing_slip_material_receive psd  \n" +
            "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "					  where psd.isDeleted = 0  \n" +
            "						and pdet.refPayementid = inv.id  \n" +
            "						AND (', CASE WHEN pRefPaymentMode = 'P' THEN  CONCAT(\"psd.invoiceNumber = '\",pInvoiceNumber,\"'\") ELSE  CONCAT(\"psd.creditMemoNumber = '\",pInvoiceNumber,\"' or psd.debitMemoNumber= '\",pInvoiceNumber,\"'\") END, ')  \n" +
            "				)'  \n" +
            "		);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pAmount IS NOT NULL OR pAmount = 0) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF(pInvoiceAmount IS NOT NULL OR pInvoiceAmount = 0) THEN  \n" +
            "		IF (pInvoiceAmount < 0) THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause, \" AND EXISTS (  \n" +
            "				  SELECT 1 FROM packingslip_invoice_payment_det b  \n" +
            "						JOIN packing_slip_material_receive a ON a.id = b.refPackingslipInvoiceID  \n" +
            "						WHERE b.refPayementid=c.id AND (a.receiptType='C' OR a.receiptType='D') AND a.invoiceTotalDue \",  \n" +
            "						CASE WHEN pExactInvoiceAmountSearch = TRUE THEN CONCAT(\" = '\", pInvoiceAmount * (-1) ,\"' \") ELSE CONCAT(\" LIKE '%\", pInvoiceAmount * (-1), \"%' \") END,  \n" +
            "						\")\"  \n" +
            "			);  \n" +
            "		ELSE  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause, \" AND EXISTS (  \n" +
            "				  SELECT 1 from packingslip_invoice_payment_det b  \n" +
            "						JOIN packing_slip_material_receive a ON a.id = b.refPackingslipInvoiceID  \n" +
            "						WHERE b.refPayementid=c.id AND a.receiptType='I' AND a.invoiceTotalDue \",  \n" +
            "						CASE WHEN pExactInvoiceAmountSearch = TRUE THEN CONCAT(\" = '\", pInvoiceAmount ,\"' \") ELSE CONCAT(\" LIKE '%\", pInvoiceAmount, \"%' \") END,  \n" +
            "						\")\");  \n" +
            "        END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF pFromDate IS NOT NULL AND pToDate IS NOT NULL THEN  \n" +
            "		IF pSelectedDateType = 'PO' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.poDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")\");  \n" +
            "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.receiptDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.packingSlipDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
            "		END IF;  \n" +
            "	ELSEIF pFromDate IS NOT NULL THEN  \n" +
            "		IF pSelectedDateType = 'PO' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.poDate = \"',pFromDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pFromDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.receiptDate = \"',pFromDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pFromDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.packingSlipDate = \"',pFromDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pFromDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.invoiceDate = \"',pFromDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pFromDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
            "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate = '\",pFromDate,\"')\");  \n" +
            "		END IF;  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"  \n" +
            "		SELECT		inv.id,  \n" +
            "				inv.systemId,  \n" +
            "				inv.mfgcodeID,  \n" +
            "				m.mfgCode supplier,  \n" +
            "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') supplierCodeName,  \n" +
            "				inv.isPaymentVoided,  \n" +
            "				case 	when inv.isPaymentVoided = 0 then  \n" +
            "						'Paid'  \n" +
            "					else  \n" +
            "						'Voided'  \n" +
            "				end isPaymentVoidedConvertedValue,  \n" +
            "				inv.voidPaymentReason,  \n" +
            "				inv.refVoidedPaymentNumber,  \n" +
            "                inv.refVoidedPaymentId,  \n" +
            "                (select c.lockStatus from packingslip_invoice_payment c  \n" +
            "					where c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,  \n" +
            "				inv.paymentNumber,  \n" +
            "				inv.bankName,  \n" +
            "				inv.bankAccountNo,  \n" +
            "				inv.paymentType,  \n" +
            "				inv.bankAccountMasID,  \n" +
            "				gc.gencCategoryName paymentMethod,  \n" +
            "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
            "				inv.paymentDate,  \n" +
            "				invdet.invoiceAmount,  \n" +
            "				inv.paymentAmount,  \n" +
            "				inv.payToName,  \n" +
            "                fun_getAddressbyIDForCheckPrint(inv.payToAddressID, inv.payToContactPersonID) payToAddress,  \n" +
            "                fun_getAddressbyIDForCheckPrint(inv.billToAddressID, inv.billToContactPersonID) billToAddress,  \n" +
            "                inv.refGencTransModeID,  \n" +
            "                gtm.modeName transactionModeName,  \n" +
            "                gtm.systemGenerated systemGeneratedTransactionMode,  \n" +
            "				inv.accountReference,  \n" +
            "				inv.remark,  \n" +
            "                inv.depositBatchNumber,  \n" +
            "                inv.offsetAmount,  \n" +
            "                inv.acctId,  \n" +
            "                fun_getChartOfAccountsCodeNameByID(inv.acctId) coaName,  \n" +
            "				fun_getUserNameByID(inv.createdBy) createdby,  \n" +
            "				fun_getUserNameByID(inv.updatedBy) updatedby,  \n" +
            "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
            "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,  \n" +
            "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
            "				inv.lockStatus,  \n" +
            "				(case when inv.lockStatus = 'NA' then 'Not Applicable'  \n" +
            "					when inv.lockStatus = 'RL' then 'Ready To Lock'  \n" +
            "					when inv.lockStatus = 'LC' then 'Locked'  \n" +
            "					else null end  \n" +
            "				) lockStatusValue,  \n" +
            "				fun_getUserNameByID(inv.lockedBy) lockByName,  \n" +
            "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,  \n" +
            "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
            "		FROM	packingslip_invoice_payment inv  \n" +
            "        join mfgcodemst m ON m.id = inv.mfgcodeID  \n" +
            "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID  \n" +
            "        left join generic_transmode_mst gtm ON gtm.id = inv.refGencTransModeID  \n" +
            "		left JOIN (  \n" +
            "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount  \n" +
            "					FROM 		packingslip_invoice_payment_det pid  \n" +
            "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0  \n" +
            "					WHERE 		pid.isDeleted = 0  \n" +
            "                       and		pid.isPaymentVoided = 0  \n" +
            "					GROUP BY 	pid.refPayementid  \n" +
            "				) invdet ON invdet.refPayementid = inv.id  \n" +
            "		WHERE 		inv.isDeleted = 0  \n" +
            "					AND inv.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
            "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause  \n" +
            "	);  \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "        PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	-- select @SQLStatement2;  \n" +
            "    PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "END;  \n" +
          /* **************************** Add Script Version -> 25-03-2022 *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (6053,'2.00','V1',' User Story 41825: [Main Branch] Add Invoice Amount Filter on Supplier Payment List Page - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
          );
        break;
        case 6053:
  allDbChangesArray.push(
  /* **************************** New Script -> 25-03-2022*********************************** */
  "DROP PROCEDURE IF EXISTS Sproc_GetActiveSalesOrderDetailList;  \n" +
	"CREATE PROCEDURE `Sproc_GetActiveSalesOrderDetailList`(  \n" +
	"	IN pPartID INT,  \n" +
	"	IN pWOID INT,  \n" +
	"	IN pCustomerID INT  \n" +
	")  \n" +
	"BEGIN  \n" +
	"	DECLARE whereClause VARCHAR(500);  \n" +
	"	SET whereClause = \"AND co.category = 3 AND co.deletedAt IS NULL\";  \n" +
	"  \n" +
	"	-- fca then default get all assy  \n" +
	"	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id = pCustomerID AND isCompany = 1) > 0 THEN  \n" +
	"	 	SET pCustomerID = NULL;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF pCustomerID IS NOT NULL THEN  \n" +
	"		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
	"		SET whereClause = CONCAT(whereClause,\" AND (co.mfgcodeID in ( select buyTo from acquireCustomers) or co.mfgcodeID in(select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\"  and smm.isCustMapping=0)) and  \n" +
	"		(sm.customerID=\",pCustomerID,\" or sm.customerID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\" and smm.isCustMapping=0)  \n" +
	"		)\");  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	SET @SQLStatement2 = CONCAT(\"  \n" +
	"		SELECT  	sd.id id,  \n" +
	"				sd.refSalesOrderID refSalesOrderID,  \n" +
	"				sd.qty qty,  \n" +
	"				sd.price price,  \n" +
	"				sd.mrpQty mrpQty,  \n" +
	"				sd.shippingQty shippingQty,  \n" +
	"				sd.remark remark,  \n" +
	"				sd.isHotJob isHotJob,  \n" +
	"				sd.partID partID,  \n" +
	"				sd.lineID lineID,  \n" +
	"				sd.isCancle isCancle,  \n" +
	"				sm.salesOrderNumber salesOrderNumber,  \n" +
	"				sm.poNumber poNumber,  \n" +
	"				sm.poDate poDate,  \n" +
	"				sm.customerID customerID,  \n" +
	"				sm.revision revision,  \n" +
	"				sm.status `status`,  \n" +
	"				sm.soDate soDate,  \n" +
	"				co.PIDCODE AS PIDCode,  \n" +
	"				co.mfgPN AS mfgPN,  \n" +
	"				ro.rohsIcon,  \n" +
	"				`ro`.`name` AS `rohsName` ,  \n" +
	"				(  \n" +
	"					CASE  \n" +
	"						WHEN 	sd.partID = \",pPartID,\" THEN  \n" +
	"								1  \n" +
	"						ELSE  \n" +
	"								2  \n" +
	"					END  \n" +
	"				) AS AssyType,  \n" +
	"				(  \n" +
	"					SELECT perAssyBuildQty  \n" +
	"					FROM 	kit_allocation_assy_detail  \n" +
	"					WHERE 	refSalesorderdetid = sd.id  \n" +
	"							AND partId = \",pPartID,\"  \n" +
	"							AND isDeleted = 0  \n" +
	"				) AS qpaa,  \n" +
	"				(  \n" +
	"					CASE 	WHEN 	\",IFNULL(pWOID,0),\" = 0 THEN 0  \n" +
	"						ELSE 	(  \n" +
	"								SELECT 	IFNULL(SUM(wsd.poQty),0) - IFNULL(SUM(wsd.scrapQty),0)  \n" +
	"								FROM 	workorder_salesorder_details wsd  \n" +
	"								WHERE 	wsd.salesOrderDetailID = sd.id  \n" +
	"										AND wsd.parentPartID = sd.partID  \n" +
	"										AND wsd.deletedAt IS NULL  \n" +
	"										AND IFNULL(wsd.isDeleted,0)= 0  \n" +
	"										AND wsd.woID <> \",IFNULL(pWOID,0),\"  \n" +
	"							)  \n" +
	"					END  \n" +
	"				) AS totalAssignedQty , astk.initialStockCount  \n" +
	"		FROM 		salesorderdet sd  \n" +
	"		LEFT JOIN 	salesordermst sm ON (sm.id = sd.refSalesOrderID AND sm.deletedAt IS NULL AND IFNULL(sm.isDeleted,0)=0)  \n" +
	"		LEFT JOIN 	component co ON sd.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3 and co.mfgType='MFG'  \n" +
	"		LEFT JOIN 	rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
	"		LEFT JOIN 	mfgcodemst mfg ON co.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
	"        LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
	"					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
	"                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
	"			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
	"		WHERE 		sd.isDeleted =0  \n" +
	"					AND sd.partCategory=3  \n" +
	"					AND IFNULL(sd.isCancle,0) = 0  \n" +
	"					AND sd.partID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\",pPartID,\")\",  \n" +
	"                    \"AND sd.salesOrderDetStatus = 1 \", whereClause,'  \n" +
	"		order by 	co.PIDCode  \n" +
	"	');  \n" +
	"	PREPARE query2 FROM @SQLStatement2;  \n" +
	"	EXECUTE query2;  \n" +
	"	DEALLOCATE PREPARE query2;  \n" +
	"END;  \n" +
  
  /* **************************** New Script -> 25-03-2022*********************************** */  
	"DROP PROCEDURE if exists Sproc_getBlanketPOAssyList;  \n" +
	"CREATE PROCEDURE `Sproc_getBlanketPOAssyList`(  \n" +
	"pCustomerID INT,  \n" +
	"pPartID INT,  \n" +
	"pblanketPOID INT  \n" +
	")  \n" +
	"BEGIN  \n" +
	"	         SELECT  \n" +
	"	          c.mfgPN,  \n" +
	"		  c.PIDCode,  \n" +
	"		  c.id partID,  \n" +
	"		  sd.qty,  \n" +
	"		  IFNULL(bp.assignPOQty,0) assignPOQty,  \n" +
	"		  (sd.qty - IFNULL(bp. assignPOQty,0))AS pendingToAssign,  \n" +
	"		  sm.salesOrderNumber,  \n" +
	"		  sm.poNumber,  \n" +
	"		  sm.id AS soID,  \n" +
	"		  sm.poDate,  \n" +
	"		  sm.poRevision,  \n" +
	"		  sm.revision,  \n" +
	"		  sd.price,  \n" +
	"		  sm.poRevisionDate,  \n" +
	"		  sd. quotefrom,  \n" +
	"		  sd.refRFQQtyTurnTimeID,  \n" +
	"		  sd.refAssyQtyTurnTimeID,  \n" +
	"		  sd.refRFQGroupID,  \n" +
	"		   sd.id,  \n" +
	"		   sd.quoteNumber,  \n" +
	"		   sd.assyQtyTurnTimeText,  \n" +
	"		 CONCAT('(',mg.mfgcode,') ',c.mfgPN,' | ',sm.salesOrderNumber,' | ',sm.poNumber) blanketAssy  \n" +
	"	         FROM salesorderdet sd  \n" +
	"	         JOIN COMPONENT c ON c.id=sd.partID AND c.isdeleted=0  AND c.mfgType='MFG'  \n" +
	"	         JOIN mfgcodemst mg ON mg.id=c.mfgcodeid AND mg.isdeleted=0  \n" +
	"	         JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isdeleted=0  \n" +
	"	         LEFT JOIN (  \n" +
	"	         SELECT  \n" +
	"			SUM(qty) AS assignPOQty,  \n" +
	"			sd.partID compID,sd.refBlanketPOID FROM salesorderdet sd JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isdeleted=0  \n" +
	"			WHERE sm.isBlanketPO=0 AND sd.refBlanketPOID IS NOT NULL AND sm.customerID=pCustomerID AND sd.partID=pPartID AND sd.isdeleted=0 GROUP BY sd.partID,sd.refBlanketPOID  \n" +
	"	         ) bp ON bp.refBlanketPOID=sd.id  \n" +
	"	         WHERE sm.customerID=pCustomerID AND sm.status=1 AND sd.partID=pPartID AND sm.blanketPOOption=2 AND sm.isBlanketPO=1 AND refSODetID IS NULL  \n" +
	"	                AND sd.isdeleted=0 AND (sd.id=IFNULL(pblanketPOID,0) OR (sd.qty - IFNULL(bp. assignPOQty,0))>0);  \n" +
	"  \n" +
	"    END;  \n" +
  /* **************************** New Script -> 25-03-2022*********************************** */
  "DROP PROCEDURE IF EXISTS Sproc_GetCopySalesOrderAssyMismatch;  \n" +
	"CREATE PROCEDURE `Sproc_GetCopySalesOrderAssyMismatch`(  \n" +
	"		IN pSOID INT  \n" +
	"	)  \n" +
	"BEGIN  \n" +
	"	DECLARE vIndex INT;  \n" +
	"	DECLARE vcount INT;  \n" +
	"	DECLARE vMfgPN VARCHAR(255);  \n" +
	"	DECLARE vmfgcodeID INT;  \n" +
	"	DECLARE vmfgPartID INT;  \n" +
	"	DECLARE vnewmfgPartID INT;  \n" +
	"	DECLARE vCurrentVersion VARCHAR(50);  \n" +
	"	DECLARE vNewVersion VARCHAR(50);  \n" +
	"	DECLARE vcurrPIDCode VARCHAR(255);  \n" +
	"	DECLARE vnewPIDCode VARCHAR(255);  \n" +
	"	DECLARE visMismatch TINYINT DEFAULT FALSE;  \n" +
	"	DECLARE vcurrRohsName VARCHAR(255);  \n" +
	"	DECLARE vnewRohsName VARCHAR(255);  \n" +
	"	DECLARE vcurrRohsIcon VARCHAR(255);  \n" +
	"	DECLARE vnewRohsIcon VARCHAR(255);  \n" +
	"	DECLARE vcurrAssyPN VARCHAR(255);  \n" +
	"	CREATE TEMPORARY TABLE  tempTableAssyList  \n" +
	"          (  \n" +
	"		currPartID INT,  \n" +
	"		newPartID INT,  \n" +
	"		mfgPN VARCHAR(255),  \n" +
	"		currPidCode VARCHAR(255),  \n" +
	"		newPidCode VARCHAR(255),  \n" +
	"		currRohs VARCHAR(255),  \n" +
	"		newRohs VARCHAR(255),  \n" +
	"		currRohsIcon VARCHAR(255),  \n" +
	"		newRohsIcon VARCHAR(255),  \n" +
	"		isMismatch TINYINT  \n" +
	"	   );  \n" +
	"		CREATE TEMPORARY TABLE IF NOT EXISTS tempCopySalesOrder AS  \n" +
	"  \n" +
	"		SELECT sod.id,row_number() over (PARTITION BY sod.refsalesOrderID) rowNumber,sod.partID,c.mfgPN,c.mfgcodeID,c.rev,c.PIDCode,rr.name,rr.rohsIcon,c.custAssyPN FROM salesorderdet sod  \n" +
	"			JOIN component c ON c.id = sod.partID AND c.partStatus != -3  and mfgType = 'MFG'  \n" +
	"			JOIN rfq_rohsmst rr ON rr.id=c.RoHSStatusID  AND rr.isdeleted=0  \n" +
	"			WHERE sod.refsalesOrderID=pSOID AND sod.isdeleted=0 AND c.iscustom=1;  \n" +
	"  \n" +
	"			SELECT COUNT(1) INTO vcount FROM tempCopySalesOrder;  \n" +
	"			SET vIndex=1;  \n" +
	"  \n" +
	"			  WHILE(vIndex <= vcount) DO  \n" +
	"				SELECT partID,mfgPN,mfgcodeID,rev,PIDCode,`name`,rohsIcon,custAssyPN INTO vmfgPartID,vMfgPN,vmfgcodeID,vCurrentVersion,vcurrPIDCode,vcurrRohsName,vcurrRohsIcon,vcurrAssyPN FROM tempCopySalesOrder WHERE rowNumber=(vIndex);  \n" +
	"  \n" +
	"			        SELECT c.id,c.rev,c.PIDCode,rr.`name`,rr.rohsIcon INTO vnewmfgPartID,vNewVersion,vnewPIDCode,vnewRohsName,vnewRohsIcon  \n" +
	"			        FROM component c JOIN rfq_rohsmst rr ON rr.id=c.RoHSStatusID  AND rr.isdeleted=0  \n" +
	"                    WHERE c.custAssyPN=vcurrAssyPN  AND c.mfgType ='MFG'  \n" +
	"                    AND c.mfgcodeID=vmfgcodeID AND c.isdeleted=0 ORDER BY c.createdAt DESC LIMIT 1;  \n" +
	"  \n" +
	"			          IF(IFNULL(vNewVersion,0)!=IFNULL(vCurrentVersion,0))THEN  \n" +
	"			           SET visMismatch=TRUE;  \n" +
	"			          END IF;  \n" +
	"  \n" +
	"			          INSERT INTO tempTableAssyList(currPartID,newPartID,mfgPN,currPidCode,newPidCode,currRohs,newRohs,currRohsIcon,newRohsIcon,isMismatch)VALUES  \n" +
	"			          (vmfgPartID,vnewmfgPartID,vMfgPN,vcurrPIDCode,vnewPIDCode,vcurrRohsName,vnewRohsName,vcurrRohsIcon,vnewRohsIcon,visMismatch);  \n" +
	"			  SET vIndex  =vIndex+1;  \n" +
	"			  END WHILE;  \n" +
	"  \n" +
	"			  SELECT * FROM tempTableAssyList;  \n" +
	"  \n" +
	"			  DROP TEMPORARY TABLE IF EXISTS tempTableAssyList;  \n" +
	"  \n" +
	"			 DROP TEMPORARY TABLE IF EXISTS tempCopySalesOrder;  \n" +
	"END;  \n" +	
  /* **************************** Add Script Version -> 25-03-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (6054,'2.00','V1','US 42411: Apply Part Master Normalization Effect in SO/CPS/CINV/CCM/ASSY STK Flow- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;

case 6054:
  allDbChangesArray.push(
	/* **************************** New Script -> 25-03-2022*********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_GetDuplicateSalesOrderCommentsList;  \n" +
	"CREATE PROCEDURE `Sproc_GetDuplicateSalesOrderCommentsList`(  \n" +
	"    IN pSOID INT  \n" +
	")  \n" +
	"BEGIN  \n" +
	"  /*DROP TEMPORARY TABLE IF EXISTS  tempComponents;  \n" +
	"	CREATE TEMPORARY TABLE IF NOT EXISTS  tempComponents AS  \n" +
	"	SELECT sod.partID FROM salesorderdet sod WHERE sod.refSalesOrderID=pSOID AND sod.isdeleted=0;  */  \n" +
	"  -- shipping comments for sales order  \n" +
	"	SELECT im.requirement,cid.partID,im.requiementType  \n" +
	"	FROM componenet_inspection_requirement_det cid  \n" +
	"	JOIN inspection_mst im ON cid.inspectionRequirementId=im.id AND cid.isdeleted=0  \n" +
	"	WHERE im.requiementType ='C' AND cid.category='S' AND im.isdeleted=0  \n" +
	"    AND  exists (SELECT sod.partID FROM salesorderdet sod WHERE sod.refSalesOrderID=pSOID AND sod.isdeleted=0 AND sod.partID = cid.partID);  \n" +
	"  \n" +
	"  -- internal comments for sales order  \n" +
	"  SELECT partID,`comment` FROM assembly_revision_comments  ac  \n" +
	"  WHERE exists 	(SELECT sod.partID FROM salesorderdet sod WHERE sod.refSalesOrderID=pSOID AND sod.isdeleted=0 AND sod.partID = ac.partID);  \n" +
	"  \n" +
	"  SELECT id,`mfgPNDescription`  \n" +
	"  FROM component co  \n" +
	"  WHERE exists (SELECT sod.partID FROM salesorderdet sod WHERE sod.refSalesOrderID=pSOID AND sod.isdeleted=0 AND sod.partID = co.id);  \n" +
	"END;  \n" +	
	/* **************************** New Script -> 25-03-2022*********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderHoldUnhold;  \n" +
	"CREATE PROCEDURE `Sproc_GetSalesOrderHoldUnhold`(  \n" +
	"	IN psalesorderID INT  \n" +
	")  \n" +
	"BEGIN  \n" +
	"			DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
	"	        DECLARE v_TimeZone VARCHAR(50);  \n" +
	"			DECLARE v_EmployeeFormatType INT;  \n" +
	"  \n" +
	"	        SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
	"	        SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
	"			SELECT fun_getEmployeeDisplayFormat() INTO v_EmployeeFormatType;  \n" +
	"  \n" +
	"	   SELECT ht.id,ht.`status`,  \n" +
	"	   fun_ApplyCommonDateTimeFormatByParaValue(ht.endDate,v_TimeZone, v_DateTimeDisplayFormat)endDate,  \n" +
	"	   ht.reason,  \n" +
	"	   ht.refTransid,  \n" +
	"	   ht.resumeReason,  \n" +
	"	   ht.holdEmployeeId,  \n" +
	"	   CASE WHEN ht.`status`='H' THEN CONCAT(ht.reason, ' - Halt by ',fun_getUserNameByEmployeID(ht.holdEmployeeId),' on ', fun_ApplyCommonDateTimeFormatByParaValue(startDate,v_TimeZone, v_DateTimeDisplayFormat)) ELSE '' END reasonPO,  \n" +
	"	   ht.unHoldEmployeeId,  \n" +
	"	   fun_GetEmployeeFormattedName(emp.firstName,emp.middleName,emp.lastName,emp.initialName,v_EmployeeFormatType) unHoldEmpName  \n" +
	"	   FROM holdunholdtrans  ht  \n" +
	"       LEFT JOIN employees emp on emp.id = ht.unHoldEmployeeId  \n" +
	"	   WHERE refType='PO' AND refTransid IN (SELECT sd.id FROM salesorderdet sd WHERE sd.refsalesorderid=psalesorderID) ;  \n" +
	"  \n" +
	"END;  \n" +
	/* **************************** New Script -> 25-03-2022*********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderStatus;  \n" +
	"CREATE PROCEDURE `Sproc_GetSalesOrderStatus`(  \n" +
	"	IN psalesId INT(11)  \n" +
	"    )  \n" +
	"BEGIN  \n" +
	"  \n" +
	"	SELECT w.woID,w.woNumber,sd.id,sh.shippingID FROM workorder_salesorder_details ws  \n" +
	"    INNER JOIN workorder w ON w.woID=ws.woID AND w.isdeleted=0  \n" +
	"	LEFT JOIN salesorderdet sd ON sd.id=ws.salesOrderDetailID AND sd.isDeleted=0 AND sd.partCategory=3  \n" +
	"	LEFT JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isDeleted=0  \n" +
	"	LEFT JOIN salesshippingmst sh ON sd.id=sh.sDetID AND sh.isDeleted=0  \n" +
	"	WHERE sm.id=psalesId AND w.woSubStatus NOT IN (0,5);  \n" +
	"  \n" +
	"	SELECT kitNumber,id AS SalesOrderDetailId FROM salesorderdet WHERE refsalesOrderID=psalesId AND salesOrderDetStatus=2 AND isdeleted=0;  \n" +
	"  \n" +
	"END;  \n" +
  /* **************************** Add Script Version -> 25-03-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (6055,'2.00','V1','US 42411: Apply Part Master Normalization Effect in SO/CPS/CINV/CCM/ASSY STK Flow- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;

case 6055:
  allDbChangesArray.push(
  /* **************************** New Script -> 25-03-2022*********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_GetPOStatusAssyWODetails;  \n" +
	"CREATE PROCEDURE `Sproc_GetPOStatusAssyWODetails`(  \n" +
	"	IN ppartID INT(11),  \n" +
	"	IN psalesOrderDetailID INT(11),  \n" +
	"	IN pcustomerID INT(11)  \n" +
	"    )  \n" +
	"BEGIN  \n" +
	"	# if first qty control op is with issue qty then consider first op issue qty for un process qty  \n" +
	"	# if first qty control op is not issue qty control then consider first op added total qty for un process qty  \n" +
	"  \n" +
	"	SELECT * ,  \n" +
	"		(CASE WHEN result.isFirstOpWithIssueQty = 0 THEN (IFNULL(result.buildQty,0) - IFNULL(result.firstOPtotalQty,0))  \n" +
	"			 WHEN result.isFirstOpWithIssueQty = 1 THEN (IFNULL(result.buildQty,0) - IFNULL(result.woFirstOpTotIssueQty,0))  \n" +
	"			ELSE 0 END) AS  unProcessQty ,  \n" +
	"		(CASE WHEN isFirstOpWithIssueQty = 0 THEN  \n" +
	"			 ((IFNULL(result.wipQty,0) - (IFNULL(result.buildQty,0) - IFNULL(result.firstOPtotalQty,0)))  \n" +
	"					 + IFNULL(result.readytoShipQty,0))  \n" +
	"			WHEN isFirstOpWithIssueQty = 1 THEN  \n" +
	"				((IFNULL(result.wipQty,0) - (IFNULL(result.buildQty,0) - IFNULL(result.woFirstOpTotIssueQty,0)))  \n" +
	"						 + IFNULL(result.readytoShipQty,0))  \n" +
	"			ELSE 0 END) AS displayWIPQtyForReport  \n" +
	"  \n" +
	"	FROM (  \n" +
	"		SELECT vuwoss.woid, vuwoss.woNumber, vuwoss.woVersion , vuwoss.buildQty, vuwoss.poQty, vuwoss.readytoShipQty ,  \n" +
	"			vuwoss.shippedQty, vuwoss.scrapQty, vuwoss.wipQty, vuwoss.firstOPtotalQty , vuwoss.partID ,  \n" +
	"			co.PIDCode , co.mfgPN , co.nickName , co.liveVersion , co.rev , co.isCustom ,  \n" +
	"			(CASE WHEN (SELECT COUNT(1) FROM workorder_salesorder_details WHERE deletedAt IS NULL  \n" +
	"					 AND salesOrderDetailID = psalesOrderDetailID  AND woID = vuwoss.woid  \n" +
	"					 AND partID = vuwoss.partID  AND parentPartID = vuwoss.partID LIMIT 1) > 0  \n" +
	"							THEN 0 ELSE 1 END) AS isSubAssembly ,  \n" +
	"			rr.name rohsStatus, rr.rohsIcon rohsIcon ,  \n" +
	"			(SELECT woSubStatus FROM workorder WHERE woID = vuwoss.woid) AS woSubStatus ,  \n" +
	"			(SELECT SUM(IFNULL(issueQty,0)) FROM workorder_trans WHERE deletedAt IS NULL  \n" +
	"				AND woID = vuwoss.woid AND opID = `fun_getFirstOperationID`(vuwoss.woid)) AS woFirstOpTotIssueQty,  \n" +
	"  \n" +
	"			(SELECT isIssueQty FROM workorder_operation WHERE deletedAt IS NULL  \n" +
	"			AND woID  = vuwoss.woid	AND opID = `fun_getFirstOperationID`(vuwoss.woid)) AS isFirstOpWithIssueQty  \n" +
	"  \n" +
	"			-- (IFNULL(vuwoss.buildQty,0) - IFNULL(vuwoss.firstOPtotalQty,0)) AS unProcessQty ,  \n" +
	"			-- ((IFNULL(vuwoss.wipQty,0) - (IFNULL(vuwoss.buildQty,0) - IFNULL(vuwoss.firstOPtotalQty,0)))  \n" +
	"					-- + IFNULL(vuwoss.readytoShipQty,0)) AS  displayWIPQtyForReport  \n" +
	"		FROM vu_workorder_summary_stk vuwoss  \n" +
	"			JOIN vu_component_mpn co ON co.id = vuwoss.partID AND co.deletedAt IS NULL  \n" +
	"			LEFT JOIN rfq_rohsmst rr ON rr.id = co.roHSStatusID AND co.deletedAt IS NULL  \n" +
	"		 WHERE vuwoss.partID = ppartID  \n" +
	"         and (woid IN (SELECT wosd.woID  \n" +
	"				FROM workorder_salesorder_details  wosd  \n" +
	"					JOIN workorder wo ON wo.woID = wosd.woID AND wo.customerID = pcustomerID AND wo.deletedAt IS NULL  \n" +
	"				WHERE wosd.deletedAt IS NULL  \n" +
	"				AND wosd.salesOrderDetailID = psalesOrderDetailID  \n" +
	"				AND wosd.partID = ppartID)                   )  \n" +
	"          UNION  ALL  \n" +
	"          SELECT ass.woid, ass.woNumber, null woVersion ,  0 buildQty, sum(ass.poQty) poQty,  0 readytoShipQty ,  \n" +
	"			(select sum(shippedqty) from shippedassembly sa where sa.partID = ass.partID and sa.woNumber = ass.woNumber and sa.isDeleted = 0 ) shippedQty,  \n" +
	"            0 scrapQty, sum(ass.openingStock) wipQty,  0 firstOPtotalQty , ass.partID ,  \n" +
	"			coa.PIDCode , coa.mfgPN , coa.nickName , coa.liveVersion , coa.rev , coa.isCustom ,  \n" +
	"			0 AS isSubAssembly ,  \n" +
	"			rra.name rohsStatus, rra.rohsIcon rohsIcon ,  \n" +
	"			null woSubStatus ,  \n" +
	"			0 woFirstOpTotIssueQty,  \n" +
	"			0 isFirstOpWithIssueQty  \n" +
	"          From assemblystock ass  \n" +
	"          left join vu_component_mpn coa on coa.id = ass.partID and coa.isDeleted = 0  \n" +
	"          LEFT JOIN rfq_rohsmst rra ON rra.id = coa.roHSStatusID AND rra.isDeleted = 0  \n" +
	"		  left join salesorderdet sod on sod.id = ass.refSalesOrderDetID and sod.isDeleted = 0  \n" +
	"          left join salesordermst som on som.id = ass.refSalesOrderID and som.isDeleted = 0  \n" +
	"		  where ass.woId is null and ass.type ='OS'  \n" +
	"			and ass.refSalesOrderDetID = psalesOrderDetailID  \n" +
	"			and ass.partID = ppartID  \n" +
	"            and som.customerID = pcustomerID  \n" +
	"          Group by ass.woid, ass.woNumber, ass.partID ,  \n" +
	"			coa.PIDCode , coa.mfgPN , coa.nickName , coa.liveVersion , coa.rev , coa.isCustom ,  \n" +
	"			rra.name , rra.rohsIcon  \n" +
	"		) result;  \n" +
	"END;  \n" +
	/* **************************** New Script -> 25-03-2022*********************************** */
	"drop procedure if exists Sproc_GetSubAsemblyDetailList;  \n" +
	"CREATE PROCEDURE `Sproc_GetSubAsemblyDetailList`(  \n" +
	"	IN pSODetID INT,  \n" +
	"	IN pPartID INT,  \n" +
	"	IN pWOID INT,  \n" +
	"	IN pCustomerID INT  \n" +
	")  \n" +
	"BEGIN  \n" +
	"		/* Get Acquire List Details from Temp Table*/  \n" +
	"		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
	"  \n" +
	"		SELECT  \n" +
	"			a.partID,  \n" +
	"			a.prPerPartID,  \n" +
	"			a.AssyType,  \n" +
	"			a.qpaQty,  \n" +
	"			co.PIDCode,  \n" +
	"			co.mfgCodeID,  \n" +
	"			co.mfgPN,  \n" +
	"			co.nickname AS nickName,  \n" +
	"			co.mfgPNDescription,  \n" +
	"			co.isCustom,  \n" +
	"			ro.rohsIcon,  \n" +
	"			ro.name,  \n" +
	"			(SELECT COUNT(1) FROM acquireCustomers WHERE buyTo=co.mfgCodeID > 0) AS isAddAllow,  \n" +
	"			SUM(wo.excessQty) excessQty,  \n" +
	"			GROUP_CONCAT(CONCAT(wo.woNumber,\"-\",wo.woVersion,\"####\", wo.woID)) refWorkOrders,  \n" +
	"			SUM(wo.buildQty) totalBuildQty,  \n" +
	"			SUM(vuwosummstk.readytoShipQty) availableQty  \n" +
	"		FROM (  \n" +
	"			SELECT  \n" +
	"				assyRel.partID,  \n" +
	"				assyRel.prPerPartID,  \n" +
	"				fun_getAssyOrSubAssyByPartID(assyRel.partID,assyRel.prPerPartID) AS AssyType,  \n" +
	"				SUM(ka.perAssyBuildQty) qpaQty  \n" +
	"				-- sum(kit.perAssyBuildQty) qpaQty  \n" +
	"			FROM part_sub_assy_relationship assyRel  \n" +
	"			LEFT JOIN kit_allocation_assy_detail ka ON ka.partId = assyRel.prPerPartID AND ka.refSalesorderdetid = pSODetID  \n" +
	"				WHERE assyRel.PartID = pPartID  \n" +
	"				AND assyRel.prPerPartID <> pPartID  \n" +
	"				AND assyRel.isDeleted=0  \n" +
	"			GROUP BY  \n" +
	"				assyRel.partID,  \n" +
	"				assyRel.prPerPartID  \n" +
	"		    ) a  \n" +
	"		INNER JOIN component co ON a.prPerPartID = co.id   and co.mfgType='MFG'  \n" +
	"		INNER JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id  \n" +
	"		LEFT JOIN workorder wo ON wo.partID = a.prPerPartID AND wo.isDeleted = 0  \n" +
	"		LEFT JOIN vu_workorder_summary_stk vuwosummstk ON vuwosummstk.woid = wo.woID  \n" +
	"			WHERE co.isdeleted = 0  \n" +
	"			AND ro.isdeleted = 0  \n" +
	"		GROUP BY  \n" +
	"			a.partID,  \n" +
	"			a.prPerPartID,  \n" +
	"			a.AssyType,  \n" +
	"			co.PIDCode,  \n" +
	"			co.mfgCodeID,  \n" +
	"			co.mfgPN,  \n" +
	"			co.nickname,  \n" +
	"			co.mfgPNDescription,  \n" +
	"			co.isCustom,  \n" +
	"			ro.rohsIcon,  \n" +
	"			ro.name;  \n" +
	"  \n" +
	"  \n" +
	"END;  \n" +
	/* **************************** New Script -> 25-03-2022*********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_GetSOPIDList;  \n" +
	"CREATE PROCEDURE `Sproc_GetSOPIDList`(  \n" +
	"	IN pCustomerID INT,  \n" +
	"	IN pPartID INT  ,  \n" +
	"	IN psubAssyID INT ,  \n" +
	"    IN pSearchObj VARCHAR(500),  \n" +
	"    IN pSalesOrderDetID INT  \n" +
	")  \n" +
	"BEGIN  \n" +
	"	DECLARE mfgCodeID INT;  \n" +
	"	DECLARE whereClause VARCHAR(2000);  \n" +
	"	DECLARE partStatusID INT;  \n" +
	"    DECLARE mfgNameFormat VARCHAR(100);  \n" +
	"  \n" +
	"    select fun_getMFGCodeNameFormat() into mfgNameFormat;  \n" +
	"	SELECT cp.id INTO partStatusID FROM component_partstatusmst cp WHERE cp.name= \"Obsolete\";  \n" +
	"	SET whereClause = \" a.partCategory = 3 \";  \n" +
	"  \n" +
	"	-- fca then default get all assy  \n" +
	"	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany=1)>0 THEN  \n" +
	"		SET pCustomerID=NULL;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF pCustomerID IS NOT NULL THEN  \n" +
	"		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
	"		SET whereClause = CONCAT(whereClause,\" AND (a.mfgcodeID in ( select buyTo from acquireCustomers) or a.mfgcodeid in  \n" +
	"		(select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and smm.isCustMapping=0 and  smm.supplierID=\",pCustomerID,\")) and  \n" +
	"		(a.customerID=\",pCustomerID,\" or a.customerID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and smm.isCustMapping=0 and  smm.supplierID=\",pCustomerID,\")  \n" +
	"		)\");  \n" +
	"		-- SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);  \n" +
	"	END IF;  \n" +
	"  -- Added to search  Sales order number  \n" +
	"    IF pSearchObj IS NOT NULL THEN  \n" +
	"		SET whereClause = CONCAT(whereClause,\" AND concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) like '%\",pSearchObj,\"%'\");  \n" +
	"    END IF;  \n" +
	"    IF pSalesOrderDetID IS NOT NULL THEN  \n" +
	"		SET whereClause = CONCAT(whereClause,\" AND a.id = \",pSalesOrderDetID);  \n" +
	"    END IF;  \n" +
	"	IF(pPartID IS NOT NULL) THEN  \n" +
	"		SET whereClause = CONCAT(whereClause,\" AND a.partID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\",pPartID,\") \");  \n" +
	"		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty,  \n" +
	"				sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
	"				c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
	"				c.partStatus, c.isGoodPart,  \n" +
	"				ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName,sm.customerID,  \n" +
	"				fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
	"				CASE WHEN sd.partID = \",pPartID,\" THEN 1 ELSE 2 END AS AssyType,  \n" +
	"				(SELECT  perAssyBuildQty  FROM 	kit_allocation_assy_detail  \n" +
	"					WHERE 	refSalesorderdetid = sd.id  AND 	partId = \",pPartID,\"  AND 	isDeleted = 0) AS qpaa,  \n" +
	"				CASE c.partStatus WHEN \", partStatusID, \" THEN FALSE ELSE TRUE END AS isActive,  \n" +
	"				sd.partCategory,  \n" +
	"				astk.initialStockCount  ,  \n" +
	"				fun_getPOTypeByID(sm.id) POType  \n" +
	"		FROM salesorderdet sd  \n" +
	"		LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.isDeleted = 0)  \n" +
	"		LEFT JOIN vu_component_mpn c ON (c.id = sd.partID AND c.isDeleted = 0)  \n" +
	"		LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.isDeleted = 0)  \n" +
	"		LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
	"		LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
	"					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
	"                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
	"			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
	"		WHERE IFNULL(sd.isCancle,0)=0 AND sd.isDeleted = 0 AND IFNULL(sm.status,0)=1  \n" +
	"		AND sd.salesOrderDetStatus = 1 \",' order by c.PIDCode');  \n" +
	"	        -- SELECT @SQLStatement2;  \n" +
	"  \n" +
	"        SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
	"									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
	"		-- 	 SELECT @SQLStatement2;  \n" +
	"	ELSE  \n" +
	"		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
	"			c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
	"			ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName, sm.customerID,  \n" +
	"            fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
	"			1 AssyType,  \n" +
	"			(SELECT  perAssyBuildQty  \n" +
	"				FROM 	kit_allocation_assy_detail  \n" +
	"				WHERE 	refSalesorderdetid = sd.id  \n" +
	"			AND 	partId = sd.partID  \n" +
	"				AND 	isDeleted = 0) AS qpaa,  \n" +
	"			CASE c.partStatus  \n" +
	"			WHEN \", partStatusID, \" THEN FALSE  \n" +
	"			ELSE TRUE  \n" +
	"			END AS isActive ,  \n" +
	"            sd.partCategory , c.partStatus , astk.initialStockCount ,  \n" +
	"			fun_getPOTypeByID(sm.id) POType  \n" +
	"			FROM salesorderdet sd  \n" +
	"			LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.isDeleted = 0)  \n" +
	"			LEFT JOIN vu_component_mpn c ON (c.id = sd.partID AND c.isDeleted = 0)  \n" +
	"			LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.isDeleted = 0)  \n" +
	"			LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
	"            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
	"					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
	"                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
	"			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
	"			WHERE IFNULL(sd.isCancle,0)=0 AND sd.isDeleted = 0 AND IFNULL(sm.status,0)=1 AND sd.partCategory=3  \n" +
	"				AND sd.salesOrderDetStatus = 1  \",' order by c.PIDCode');  \n" +
	"			SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,(case when a.POType <> '' then ' | ' else '' end), a.poType, ' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
	"									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
	"	END IF;  \n" +
	"	PREPARE query2 FROM @SQLStatement2;  \n" +
	"	EXECUTE query2;  \n" +
	"	DEALLOCATE PREPARE query2;  \n" +
	"END;  \n" +
  /* **************************** Add Script Version -> 25-03-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (6056,'2.00','V1','US 42411: Apply Part Master Normalization Effect in SO/CPS/CINV/CCM/ASSY STK Flow- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;

case 6056:
  allDbChangesArray.push(
  /* **************************** New Script -> 25-03-2022*********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_SOChangeHistory;  \n" +
	"CREATE PROCEDURE `Sproc_SOChangeHistory`(  \n" +
	"	IN psoID INT,  \n" +
	"	IN ppageIndex INT,  \n" +
	"	IN precordPerPage INT,  \n" +
	"	IN pOrderBy VARCHAR(255),  \n" +
	"	IN pTableName VARCHAR(255),  \n" +
	"	IN pWhereClause VARCHAR(16383)  \n" +
	"    )  \n" +
	"BEGIN  \n" +
	"  \n" +
	"	DECLARE pOffset INT;  \n" +
	"	DECLARE rowNumWhere VARCHAR(255);  \n" +
	"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
	"	DECLARE v_TimeZone VARCHAR(50);  \n" +
	"    DECLARE v_mfrFormatType INT;  \n" +
	"    DECLARE v_contactFormatType INT;  \n" +
	"  \n" +
	"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
	"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
	"	SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormatType;  \n" +
	"    SELECT fun_getContPersonNameDisplayFormat() INTO v_contactFormatType;  \n" +
	"  \n" +
	"	SET @temp_Sproc_SOChangeHistory = CONCAT(\"  \n" +
	"	SELECT dca.ID,  \n" +
	"		CASE  \n" +
	"		WHEN (dca.Colname ='SHIPPINGMETHODID') OR (dca.Colname ='TERMSID') THEN  \n" +
	"			fun_getGenericCategoryCodeNameByID(dca.Oldval)  \n" +
	"		WHEN dca.Colname = 'PARTID' THEN  \n" +
	"		  (SELECT CONCAT(nickName,' ',rev) AS OldValue FROM component WHERE id =dca.Oldval)  \n" +
	"		 WHEN  dca.Colname = 'SODATE' OR dca.Colname='PODATE' OR dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
	"		       DATE_FORMAT(dca.Oldval,'%m/%d/%Y %H:%i %p')  \n" +
	"		WHEN dca.Colname = 'CONTACTPERSONID' THEN  \n" +
	"		 (SELECT fun_GetFormattedContactPersonName(firstName,middleName,lastName,\",v_contactFormatType,\") AS OldValue FROM contactperson WHERE personId =dca.Oldval)  \n" +
	"		WHEN dca.Colname='STATUS' AND dca.Oldval=0 THEN 'Draft'  \n" +
	"		WHEN dca.Colname='STATUS' AND dca.Oldval=1 THEN 'Published'  \n" +
	"		-- Get shipping address details  \n" +
	"		WHEN dca.Colname='SHIPPINGADDRESSID' OR dca.Colname='BILLINGADDRESSID' THEN  \n" +
	"				fun_getAddressbyID(dca.Oldval)  \n" +
	"		WHEN dca.Colname='CUSTOMERID' THEN  \n" +
	"			(SELECT fun_GetFormattedMfgCode(mg.mfgCode,mg.mfgName,\",v_mfrFormatType,\") AS customer  \n" +
	"			FROM mfgcodemst mg WHERE id=dca.Oldval)  \n" +
	"		ELSE  \n" +
	"			dca.Oldval  \n" +
	"		END AS Oldval,  \n" +
	"		CASE  \n" +
	"		WHEN (dca.Colname ='SHIPPINGMETHODID') OR (dca.Colname ='TERMSID')  THEN  \n" +
	"		  (SELECT CONCAT('(', gencCategoryCode , ')',' ',gencCategoryName) AS Newval FROM genericcategory WHERE gencCategoryID =dca.Newval)  \n" +
	"		WHEN dca.Colname = 'PARTID' THEN  \n" +
	"		  (SELECT CONCAT(nickName,' ',rev) AS Newval FROM component WHERE id =dca.Newval)  \n" +
	"		 WHEN  dca.Colname = 'SODATE' OR dca.Colname='PODATE' OR dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
	"		       DATE_FORMAT(dca.Newval,'%m/%d/%Y %H:%i %p')  \n" +
	"		  WHEN dca.Colname = 'CONTACTPERSONID' THEN  \n" +
	"		 (SELECT CONCAT(firstName , ' ' ,IFNULL(middleName,''),' ' , lastName) AS Newval FROM contactperson WHERE personId =dca.Newval)  \n" +
	"		WHEN dca.Colname='STATUS' AND dca.Newval=0 THEN  'Draft'  \n" +
	"		WHEN dca.Colname='STATUS' AND dca.Newval=1 THEN  'Published'  \n" +
	"		 WHEN dca.Colname='ISDELETED' AND dca.Newval=0 THEN   			 'No'  \n" +
	"		WHEN dca.Colname='ISDELETED' AND dca.Newval=1 THEN  'Yes'  		-- Get shipping address details  \n" +
	"		WHEN dca.Colname='SHIPPINGADDRESSID' OR dca.Colname='BILLINGADDRESSID' THEN fun_getAddressbyID(dca.Newval)  \n" +
	"		WHEN dca.Colname='CUSTOMERID' THEN  \n" +
	"		(SELECT CONCAT('(',mfgCode,') ',mfgName) AS customer FROM mfgcodemst WHERE id=dca.Newval)  \n" +
	"		ELSE  dca.Newval  \n" +
	"		END AS Newval,  \n" +
	"			dca.Colname,dca.RefTransID,  \n" +
	"		fun_getUserNameByID(dca.updatedBy) updatedby,  \n" +
	"		fun_getUserNameByID(dca.createdBy) createdby,  \n" +
	"		fun_getRoleByID(dca.createByRoleId) createdbyRole,  \n" +
	"		fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
	"		fun_ApplyCommonDateTimeFormatByParaValue(dca.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
	"		fun_ApplyCommonDateTimeFormatByParaValue(dca.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
	"		FROM `dataentrychange_auditlog`  AS dca  \n" +
	"		WHERE `Tablename`='\",pTableName,\"'  AND `RefTransID`=\",psoID,\"  \n" +
	"		    UNION ALL  \n" +
	"		SELECT dca.ID,  \n" +
	"		 CASE  \n" +
	"		 WHEN dca.Colname = 'PARTID' THEN  \n" +
	"		  (SELECT CONCAT(nickName,' ',rev) AS OldValue FROM component WHERE id =dca.Oldval)  \n" +
	"		 WHEN  dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
	"		       DATE_FORMAT(dca.Oldval,'%m/%d/%Y %H:%i %p')  \n" +
	"		WHEN dca.Colname='ISDELETED' AND dca.Oldval=0 THEN  			 'No'  \n" +
	"		WHEN dca.Colname='ISDELETED' AND dca.Oldval=1 THEN  		       'Yes'  \n" +
	"		-- Get shipping address details  \n" +
	"		ELSE  \n" +
	"			dca.Oldval  \n" +
	"		END AS Oldval,  \n" +
	"		CASE  \n" +
	"		WHEN dca.Colname = 'PARTID' THEN  \n" +
	"		  (SELECT CONCAT(nickName,' ',rev) AS Newval FROM component WHERE id =dca.Newval)  \n" +
	"		WHEN  dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
	"		       DATE_FORMAT(dca.Newval,'%m/%d/%Y %H:%i %p')  \n" +
	"		 WHEN dca.Colname='STATUS' AND dca.Newval=0 THEN  'Draft'  \n" +
	"		WHEN dca.Colname='STATUS' AND dca.Newval=1 THEN  'Published'  \n" +
	"		WHEN dca.Colname='ISDELETED' AND dca.Newval=0 THEN  'No'  \n" +
	"		WHEN dca.Colname='ISDELETED' AND dca.Newval=1 THEN  'Yes'  \n" +
	"		ELSE  dca.Newval  \n" +
	"		END AS Newval,  \n" +
	"		dca.Colname,dca.RefTransID,  \n" +
	"		fun_getUserNameByID(dca.updatedBy) updatedby,  \n" +
	"		fun_getUserNameByID(dca.createdBy) createdby,  \n" +
	"		fun_getRoleByID(dca.createByRoleId) createdbyRole,  \n" +
	"		fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
	"		fun_ApplyCommonDateTimeFormatByParaValue(dca.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
	"		fun_ApplyCommonDateTimeFormatByParaValue(dca.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
	"		FROM dataentrychange_auditlog dca  \n" +
	"		WHERE tablename ='salesorderdet'  \n" +
	"	     AND RefTransID IN (SELECT id FROM salesorderdet t WHERE refSalesOrderID = \",psoID,\"  AND t.id = dca.RefTransID)  \n" +
	"         \");  \n" +
	"  \n" +
	"    IF (pOrderBy IS NOT NULL) THEN  \n" +
	"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
	"	ELSE  \n" +
	"		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
	"	END IF;  \n" +
	"  \n" +
	"  \n" +
	"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
	"		SET pWhereClause = '1=1' ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"  \n" +
	"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
	"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
	"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
	"	ELSE  \n" +
	"		SET rowNumWhere = '';  \n" +
	"	END IF;  \n" +
	"  \n" +
	"  \n" +
	"		/* to get total count of rows */  \n" +
	"		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_SOChangeHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
	"		PREPARE query2 FROM @SQLStatement2;  \n" +
	"		EXECUTE query2;  \n" +
	"		DEALLOCATE PREPARE query2;  \n" +
	"  \n" +
	"		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_SOChangeHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
	"		PREPARE query1 FROM @SQLStatement2;  \n" +
	"		EXECUTE query1;  \n" +
	"		DEALLOCATE PREPARE query1;  \n" +
	"    END;  \n" +
  /* **************************** Add Script Version -> 25-03-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (6057,'2.00','V1','US 42411: Apply Part Master Normalization Effect in SO/CPS/CINV/CCM/ASSY STK Flow- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;

case 6057:
  allDbChangesArray.push(
  /* **************************** New Script -> 25-03-2022*********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_GetSalesorderList;  \n" +
	"CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
	"	IN ppageIndex INT,  \n" +
	"	IN precordPerPage INT,  \n" +
	"	IN pOrderBy VARCHAR(255),  \n" +
	"	IN pWhereClause VARCHAR(16383),  \n" +
	"	/*IN pPlannedStatus VARCHAR(10),*/  \n" +
	"	IN pSalesOrderDetailId INT,  \n" +
	"	IN pIsPendingWOCreationList TINYINT,  \n" +
	"	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
	"	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
	"	IN pfilterStatus VARCHAR(100),  \n" +
	"	IN pcustomerIds VARCHAR(16000),  \n" +
	"	IN pshippingMethodId VARCHAR(16000),  \n" +
	"	IN ptermsIds VARCHAR(16000),  \n" +
	"	IN psearchposotext VARCHAR(1000),  \n" +
	"	IN psearchposotype VARCHAR(10),  \n" +
	"	IN pfromDate DATE,  \n" +
	"	IN ptoDate DATE,  \n" +
	"	IN prushJob TINYINT,  \n" +
	"	IN ppartIds VARCHAR(16000),  \n" +
	"	IN pworkorders VARCHAR(16000),  \n" +
	"	IN psearchextPricetext VARCHAR(1000),  \n" +
	"	IN psearchextPricetype VARCHAR(10),  \n" +
	"	/*IN pkitreturnStatus VARCHAR(100),  \n" +
	"	IN pkitReleaseStatus VARCHAR(100),  */  \n" +
	"    IN pfilterPOStatus VARCHAR(20) ,  \n" +
	"    IN pIsRmaPO TINYINT,  \n" +
	"    IN pDateType VARCHAR(10),  \n" +
	"    IN pSearchComments VARCHAR(200)  \n" +
	")  \n" +
	"BEGIN  \n" +
	"	DECLARE pOffset INT;  \n" +
	"	DECLARE rowNumWhere VARCHAR(255);  \n" +
	"	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
	"	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
	"	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
	"	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
	"	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
	"	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
	"    DECLARE vTimeZone VARCHAR(50);  \n" +
	"	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
	"	DECLARE v_mfrFormatType INT;  \n" +
	"  \n" +
	"	SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormatType;  \n" +
	"    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
	"	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
	"	SET v_PendingWOWhereClause='';  \n" +
	"  \n" +
	"  \n" +
	"		SET v_DynamicColumns=CONCAT(\",  \n" +
	"			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
	"			(  \n" +
	"				CASE  \n" +
	"					WHEN hut.status = 'H' THEN  \n" +
	"						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
	"					ELSE ''  \n" +
	"				END  \n" +
	"			) AS reasonPO  \n" +
	"		\");  \n" +
	"  \n" +
	"		SET v_DynamicJoin =CONCAT(\"  \n" +
	"			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
	"				SELECT 	MAX(ht.id)  \n" +
	"				FROM 	holdunholdtrans ht  \n" +
	"				WHERE 	hut.refTransId = ht.refTransId  \n" +
	"						AND ht.refType='PO'  \n" +
	"						AND ht.isdeleted=0  \n" +
	"					)  \n" +
	"				\") ;  \n" +
	"  \n" +
	"	IF(pIsPendingWOCreationList = 1) THEN  \n" +
	"		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
	"		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
	"		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
	"				SELECT 		co.PIDCODE AS PIDCode,  \n" +
	"						co.mfgPN AS mfgPN,  \n" +
	"						co.nickname AS nickName,  \n" +
	"						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
	"						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
	"						vusalesorderdet.poNumber,  \n" +
	"						vusalesorderdet.salesOrderNumber  \n" +
	"				FROM 		workorder wod  \n" +
	"				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
	"				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
	"				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
	"			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
	"		\");  \n" +
	"	END IF;  \n" +
	"    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
	"		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
	"								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
	"        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
	"									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
	"		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
	"        IF pOrderBy IS NULL THEN  \n" +
	"			SET pOrderBy = ' promisedShipDate asc ';  \n" +
	"        END IF;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
	"		SELECT  a.*,  \n" +
	"				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
	"                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
	"                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
	"		FROM  \n" +
	"			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
	"				(  \n" +
	"					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
	"							'No'  \n" +
	"						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
	"							'Yes'  \n" +
	"						ELSE  \n" +
	"							''  \n" +
	"					END  \n" +
	"				) AS `isHotJobValue`,  \n" +
	"				`vuss`.`isHotJob`,  \n" +
	"				`vuss`.`Sales Order ID` AS id,  \n" +
	"				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
	"				`vuss`.`Balanced Due Qty` as openQty,  \n" +
	"				`vuss`.frequency as frequencyName,  \n" +
	"				vuss.frequencyType as frequencyTypeName,  \n" +
	"                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
	"                  sr.salesRelease as salesRelease,  \n" +
	"				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
	"				`vuss`.`Po Number` AS poNumber,  \n" +
	"				`vuss`.`Po Date` AS poDate,  \n" +
	"				`vuss`.`Customer ID` AS customerID,  \n" +
	"				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
	"				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
	"				`vuss`.`Sales Order Status` AS `status`,  \n" +
	"				`vuss`.`Revision` AS revision,  \n" +
	"				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
	"				`vuss`.`Terms ID` AS termsID,  \n" +
	"				`vuss`.`So Date` AS soDate,  \n" +
	"				fun_GetFormattedMfgCode(vuss.mfgCode,vuss.mfgName,\",v_mfrFormatType,\") AS companyName,  \n" +
	"				`vuss`.`internalPO` AS internalPO,  \n" +
	"				`vuss`.`mfgCode` AS mfgCode,  \n" +
	"				`vuss`.`Full Name` AS fullName,  \n" +
	"				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
	"				`vuss`.`PO Qty` AS qty,  \n" +
	"				vuss.assignQty as assignBlanketPOQty,  \n" +
	"				case when vuss.isBlanketPO=1 and vuss.blanketPOOption=2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
	"				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
	"				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
	"				`vuss`.`mrpQty` AS mrpQty,  \n" +
	"				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
	"				`vuss`.`kitQty` AS kitQty, \",  \n" +
	"				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
	"				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
	"				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
	"				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
	"				`vuss`.`shippingQty` AS shippingQty,  \n" +
	"				`vuss`.`remark` AS remark,  \n" +
	"				`vuss`.`Assy ID` AS PIDCode,  \n" +
	"				`vuss`.`Assy Name` AS mfgPN,  \n" +
	"				 vuss.poRevisionDate  As poRevisionDate,  \n" +
	"				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
	"				`vuss`.`NickName` AS nickName,  \n" +
	"				`vuss`.`liveVersion` AS liveVersion,  \n" +
	"				`vuss`.`partDescription` AS partDescription,  \n" +
	"				`vuss`.`cancleReason` AS cancleReason,  \n" +
	"				vuss.blanketPOOption,  \n" +
	"				vuss.blanketPOOptionText,  \n" +
	"                \",  IF( pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
	"                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
	"                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
	"				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
	"				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
	"				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
	"				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
	"				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
	"				vuss.isBlanketPO,  \n" +
	"				vuss.blanketPOText,  \n" +
	"				vuss.poRevision,  \n" +
	"				vuss.partType,  \n" +
	"				vuss.isCancle,  \n" +
	"				vuss.mfgcodeID,  \n" +
	"				vuss.manufacturerName,  \n" +
	"				`vuss`.`PartID` AS partID,  \n" +
	"				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
	"				`vuss`.`kitNumber` AS kitNumber,  \n" +
	"				`vuss`.`serialNumber` AS serialNumber,  \n" +
	"				`vuss`.partCategory,  \n" +
	"				vuss.lineID,  \n" +
	"				vuss.internalCommentSo,  \n" +
	"				vuss.internalComment,  \n" +
	"				vuss.originalPODate,  \n" +
	"				vuss.linkToBlanketPO,  \n" +
	"				vuss.linkToBlanketPOText,  \n" +
	"				vuss.isRmaPO,  \n" +
	"				vuss.rmaPOText,  \n" +
	"				vuss.isLegacyPO,  \n" +
	"				vuss.legacyPOText,  \n" +
	"				vuss.originalPOQty,  \n" +
	"				vuss.requestedBPOStartDate,  \n" +
	"				 vuss.blanketPOEndDate,  \n" +
	"				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
	"				`vuss`.`Status` AS salesOrderDetStatusConvertedValues,  \n" +
	"				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
	"                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
	"				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
	"                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
	"                p.nextShipDate as nextShipDate,  \n" +
	"                wo.WONumber as workorders,  \n" +
	"                wo.WOIds as workorderIds,  \n" +
	"				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
	"				(  \n" +
	"					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
	"							'Draft'  \n" +
	"						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
	"							'Published'  \n" +
	"						ELSE  \n" +
	"							''  \n" +
	"					END  \n" +
	"				) AS `statusConvertedValue`,  \n" +
	"				hutkit.refType as refTypeKA,  \n" +
	"				hutkit.status as haltStatusKA,  \n" +
	"				(  \n" +
	"					CASE  \n" +
	"						WHEN 	hutkit.status = 'H' THEN  \n" +
	"								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
	"						ELSE 	''  \n" +
	"					END  \n" +
	"				) AS reasonKA,  \n" +
	"				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
	"				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
	"				(  \n" +
	"				CASE  \n" +
	"					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
	"						TRUE  \n" +
	"					ELSE  \n" +
	"						FALSE  \n" +
	"				END  \n" +
	"				) as isKitPlanningRequired,  \n" +
	"				(  \n" +
	"					CASE  \n" +
	"						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
	"							'Unplanned'  \n" +
	"						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
	"							'Partially Planned'  \n" +
	"						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
	"							'Fully Planned'  \n" +
	"						ELSE  \n" +
	"							NULL  \n" +
	"					END  \n" +
	"				) as kitPlanStatus,  \n" +
	"               fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToReturnCount,vrr.shortageReturnCount) as kitReturnStatus,  \n" +
	"			/* fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  */  \n" +
	"				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
	"				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
	"					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
	"				p.nextReleaseDate,  \n" +
	"				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
	"				/*p.releasedPlanCount totalkitRelease,  \n" +
	"				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  */  \n" +
	"				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
	"				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
	"				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
	"				vuss.releasedWorkorder,  \n" +
	"                ka.shortagePer,  \n" +
	"				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
	"                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
	"					 when vuss.partCategory <> 3 then 0  \n" +
	"                     else 1 end) isKitPlanAllowed,  \n" +
	"				vuss.releasedWorkorderNmberAndId , astk.initialStockCount ,  \n" +
	"				vuss.rmaNumber,vuss.isDebitedByCustomer, vuss.debitedByCustText,  \n" +
	"				vuss.rmaOrgPONumber,vuss.orgSalesOrderID,vuss.isReworkRequired,  \n" +
	"				vuss.reworkReqText, vuss.reworkPONumber,vuss.custOrgPOLineNumber \",v_DynamicColumns,  \n" +
	"		\" FROM  vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
	"	Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
	"					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
	"					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
	"	Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
	"					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
	"	Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
	"					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
	"					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
	"	Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
	"					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
	"					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
	"					group by wsd.salesOrderDetailID ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
	"        LEFT JOIN  	(  \n" +
	"					SELECT  salesOrderDetID,  refAssyId,  \n" +
	"                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
	"                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
	"                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
	"						count(1) totalPlan,  \n" +
	"						SUM(poQty) totalPOQty,  \n" +
	"						SUM(kitReleaseQty) totalKitQty,  \n" +
	"						/*SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  */  \n" +
	"						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
	"					FROM 	salesorder_plan_detailsmst  \n" +
	"					WHERE 	isDeleted = 0  \n" +
	"					AND 	subAssyID is null  \n" +
	"					GROUP BY salesOrderDetID, refAssyId  \n" +
	"				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
	"		LEFT JOIN (  \n" +
	"				SELECT	salesOrderDetID,  \n" +
	"						refAssyId,  \n" +
	"						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
	"						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
	"						SUM(CASE WHEN kitReturnStatus ='FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
	"						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount,  \n" +
	"						SUM(CASE WHEN kitReturnStatus ='RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
	"				FROM 	vu_release_plan_release_return_status_det  \n" +
	"                GROUP BY salesOrderDetID, refAssyId  \n" +
	"        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
	"		LEFT JOIN 	(  \n" +
	"						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
	"						`k`.`assyID` AS `assyID`,  \n" +
	"						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
	"						`k`.`shortageLine` AS `shortageLine`,  \n" +
	"						allocPermainAssy allocPerComponent,  \n" +
	"						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
	"						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`  \n" +
	"						FROM (  \n" +
	"							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
	"								mainAssy AS `assyID`,  \n" +
	"								COUNT(1) AS `totalLine`,  \n" +
	"								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
	"								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
	"								sum( k.shortageline) shortageline,  \n" +
	"								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
	"								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
	"							  FROM (  \n" +
	"  \n" +
	"									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
	"										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
	"										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
	"										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
	"										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
	"										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
	"										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
	"										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
	"									FROM  	`vu_kit_allocation_detail` vk  \n" +
	"									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
	"									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
	"								) `k`  \n" +
	"							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
	"						) `k`  \n" +
	"					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
	"			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
	"			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
	"            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
	"							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
	"                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
	"						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
	"		) AS a  \n" +
	"    \");  \n" +
	"  \n" +
	"  \n" +
	"	IF (pOrderBy IS NOT NULL) THEN  \n" +
	"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
	"	ELSE  \n" +
	"		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
	"		SET pWhereClause = '1=1' ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
	"		IF(pIsPendingWOCreationList=1)THEN  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
	"		ELSE  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
	"		END IF;  \n" +
	"	END IF;  \n" +
	"    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
	"          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
	"	  IF(psearchposotype='C')THEN  \n" +
	"             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
	"          ELSE  \n" +
	"             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
	"          END IF;  \n" +
	"	 END IF;  \n" +
	"    IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
	"	  IF(psearchextPricetype='C')THEN  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
	"		ELSE  \n" +
	"			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
	"		END IF;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(prushJob = 1) THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(pworkorders IS NOT NULL)THEN  \n" +
	"		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
	"	END IF;  \n" +
	"	IF(ppartIds IS NOT NULL)THEN  \n" +
	"		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	/*IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
	"	END IF;  \n" +
	"	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
	"	END IF;  */  \n" +
	"  \n" +
	"	IF(pIsRmaPO = 1) THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	-- from date to date filter  \n" +
	"	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
	"		IF pDateType='SO' THEN  \n" +
	"			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
	"        ELSEIF pDateType='PO' THEN  \n" +
	"			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromDate,''' and poDate<=''',ptoDate,''')');  \n" +
	"         ELSEIF pDateType='PR' THEN  \n" +
	"			SET pWhereClause=CONCAT(pWhereClause, ' and (poRevisionDate>=''',pfromDate,''' and poRevisionDate<=''',ptoDate,''')');  \n" +
	"         END IF;  \n" +
	"	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
	"		IF pDateType='SO' THEN  \n" +
	"			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
	"        ELSEIF pDateType='PO' THEN  \n" +
	"			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromDate,''')');  \n" +
	"         ELSEIF pDateType='PR' THEN  \n" +
	"            SET pWhereClause=CONCAT(pWhereClause, ' and (poRevisionDate>=''',pfromDate,''')');  \n" +
	"         END IF;  \n" +
	"	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
	"		IF pDateType='SO' THEN  \n" +
	"			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
	"        ELSEIF pDateType='PO' THEN  \n" +
	"			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoDate,''')');  \n" +
	"         ELSEIF pDateType='PR' THEN  \n" +
	"            SET pWhereClause=CONCAT(pWhereClause, ' and (poRevisionDate<=''',ptoDate,''')');  \n" +
	"         END IF;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF pSearchComments IS NOT NULL AND pSearchComments <> '' THEN  \n" +
	"		SET pWhereClause= CONCAT(pWhereClause, \" AND (remark like '%\", pSearchComments, \"%'  \n" +
	"									OR internalComment like '%\", pSearchComments, \"%'  \n" +
	"                                    OR internalCommentSO like '%\", pSearchComments, \"%'  \n" +
	"                                    OR shippingComment like '%\", pSearchComments, \"%'  \n" +
	"                                    OR partDescription like '%\", pSearchComments, \"%')\" );  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"	/*IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
	"		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
	"		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
	"			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
	"		END IF;  \n" +
	"		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
	"			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
	"		END IF;  \n" +
	"		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
	"			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
	"		END IF;  \n" +
	"        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
	"	END IF;  */  \n" +
	"  \n" +
	"	IF (pSalesOrderDetailId != 0) THEN  \n" +
	"		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
	"	END IF;  \n" +
	"  \n" +
	"  \n" +
	"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
	"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
	"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
	"	ELSE  \n" +
	"		SET rowNumWhere = '';  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	/* to get total count of rows */  \n" +
	"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
	"   PREPARE query1 FROM @SQLStatement1;  \n" +
	"	EXECUTE query1;  \n" +
	"	DEALLOCATE PREPARE query1;  \n" +
	"  \n" +
	"	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
	"    PREPARE query2 FROM @SQLStatement2;  \n" +
	"	EXECUTE query2;  \n" +
	"	DEALLOCATE PREPARE query2;  \n" +
	"END;  \n" +
  /* **************************** Add Script Version -> 25-03-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (6058,'2.00','V1','US 42411: Apply Part Master Normalization Effect in SO/CPS/CINV/CCM/ASSY STK Flow- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
case 6058:
  allDbChangesArray.push(
  /* **************************** New Script -> 25-03-2022*********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
	"CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
	"	IN ppageIndex INT,  \n" +
	"	IN precordPerPage INT,  \n" +
	"	IN pCustomerID INT,  \n" +
	"    IN pSearchText VARCHAR(1000) ,  \n" +
	"    IN pSoWorkingStatus TINYINT,  \n" +
	"    IN pAllowToUpdateComment TINYINT ,  \n" +
	"    IN pSortByColumn TINYINT  ,  \n" +
	"    IN pSoStatus TINYINT,  \n" +
	"    IN pSortingOrder TINYINT  \n" +
	")  \n" +
	"BEGIN  \n" +
	"	DECLARE vMfgCodeFormat INT;  \n" +
	"    DECLARE headerWhereClause VARCHAR(3000);  \n" +
	"   -- DECLARE detailWhereClause VARCHAR(1000);  \n" +
	"	DECLARE vOrderBy VARCHAR(200);  \n" +
	"   	DECLARE pOffset INT;  \n" +
	"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
	"	DECLARE vContactPersonFormat INT;  \n" +
	"  \n" +
	"    SELECT fun_getContPersonNameDisplayFormat() INTO vContactPersonFormat;  \n" +
	"	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
	"  \n" +
	"    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
	"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
	"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
	"	ELSE  \n" +
	"		SET rowNumWhere = '';  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF pSortByColumn = 1 THEN  \n" +
	"		SET vOrderBy =' order by customerName' ;  \n" +
	"    ELSEIF pSortByColumn = 2 THEN  \n" +
	"		SET vOrderBy =' order by poNumber ' ;  \n" +
	"    ELSEIF pSortByColumn = 3 THEN  \n" +
	"		SET vOrderBy =' order by poDate ' ;  \n" +
	"    ELSEIF pSortByColumn = 4 THEN  \n" +
	"		SET vOrderBy =' order by soDate ' ;  \n" +
	"    ELSE  \n" +
	"		SET vOrderBy =' order by soId Desc ' ;  \n" +
	"    END IF;  \n" +
	"    IF pSortingOrder = 2 THEN  \n" +
	"		SET vOrderBy = concat(vOrderBY , ' Desc');  \n" +
	"    ELSE  \n" +
	"		SET vOrderBy = concat(vOrderBY , ' Asc');  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF pCustomerID IS NOT NULL THEN  \n" +
	"		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
	"	ELSE  \n" +
	"		SET headerWhereClause = ' 1=1 ';  \n" +
	"    END IF;  \n" +
	"    IF pSoWorkingStatus IS  NULL OR pSoWorkingStatus = 0 THEN  \n" +
	"		SET headerWhereClause = concat(headerWhereClause, ' AND 1=1 ');  \n" +
	"	ELSE  \n" +
	"		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.workingStatus = ' , pSoWorkingStatus)  ;  \n" +
	"    END IF;  \n" +
	"    IF pSoStatus IS NULL OR pSoStatus <> -1 THEN  \n" +
	"		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.`status` = ' , pSoStatus)  ;  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF pSearchText IS NOT NULL  THEN  \n" +
	"		SET headerWhereClause = CONCAT(headerWhereClause ,\" AND  (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
	"									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
	"									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
	"                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
	"                                    or salesOrder.shippingComment like '%\",pSearchText,\"%' \",  \n" +
	"                                    CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR salesOrder.internalComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
	"                                    \" or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
	"														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0  and mfgType='MFG'  \n" +
	"                                                         left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
	"																	from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sodet.id  and workOrderDet.partID = sodet.partId  \n" +
	"														 where sodet.isDeleted = 0	and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%'  \n" +
	"																OR comp.nickName like '%\",pSearchText,\"%' OR sodet.woComment like '%\",pSearchText,\"%'  \n" +
	"                                                                OR sodet.internalComment like '%\",pSearchText,\"%'\",  \n" +
	"                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.remark like '%\",pSearchText,\"%'\") else '' END,  \n" +
	"                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.releaseLevelComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
	"                                                                \" OR workOrderDet.woList like '\",pSearchText,\"%'  )	))\");  \n" +
	"  \n" +
	"    END IF;  \n" +
	"    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
	"	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS  select soId, salesOrderNumber,  \n" +
	"						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
	"						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
	"                        soStatus, soStatusText,  shippingMethodID,termsID,freeOnBoardId, salesCommissionTo,contactPersonId,  \n" +
	"						customerID, mfgCode, mfgName, customerName,  \n" +
	"                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  CPSDraftCnt,  \n" +
	"                        billingAddressID, intermediateShipmentId,  \n" +
	"                        shippingAddressID,defaultAddress,  \n" +
	"                        companyName,street1,street2, street3,city, state,  \n" +
	"						postcode,countryName, isAddrDefault, isAddrActive,  \n" +
	"						firstName,lastName,middleName,personName,  \n" +
	"						mobile,mobileCountryCode,faxNumber,faxCountryCode,title,isContactDefault, isContactActive,  \n" +
	"						phoneNumber,email,division,emailList,phoneList,  \n" +
	"                        workingStatus, isLegacyPOText,isBlanketPOText,isRmaPOText,blanketPOOption, isAlreadyPublished  ,  \n" +
	"                        carrierID,carrierAccountNumber ,  \n" +
	"                        billingContactPersonID, intermediateContactPersonID, shippingContactPersonID,  \n" +
	"                        linkToBlanketPOText,shippingMethodText,carrierText  \n" +
	"    from (select som.id as soId, som.salesOrderNumber,  \n" +
	"            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
	"            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
	"            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
	"            som.status as soStatus ,(case when som.`status` = 1 then 'Published' else 'Draft' end) soStatusText,  \n" +
	"            som.shippingMethodID,som.termsID,som.freeOnBoardId, som.salesCommissionTo,som.contactPersonId,  \n" +
	"            som.billingAddressID, som.intermediateShipmentId,  \n" +
	"            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
	"            cpsDetails.lastCPSId,  \n" +
	"            cpsDetails.lastCPSNumber,  \n" +
	"            cpsDetails.lastCPSDate,  \n" +
	"			cpsDetails.lastCPSComment,  \n" +
	"            cpsDetails.CPSCount,  \n" +
	"            ifnull(cpsDetails.CPSDraftCnt,0) CPSDraftCnt,  \n" +
	"            som.shippingAddressID,  \n" +
	"            custAddr.isDefault as defaultAddress,  \n" +
	"            custAddr.companyName,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
	"            custAddr.postcode,country.countryName, custAddr.isDefault isAddrDefault, custAddr.isActive isAddrActive,  \n" +
	"            fun_GetFormattedContactPersonName(contactP.firstName, contactP.middleName,contactP.lastName,\",vContactPersonFormat,\") personName,  \n" +
	"            contactP.firstName,contactP.lastName,contactP.middleName,  \n" +
	"            contactP.mobile,contactP.mobileCountryCode,contactP.faxNumber,contactP.faxCountryCode,  \n" +
	"            contactP.title,contactP.isDefault isContactDefault, contactP.isActive isContactActive,  \n" +
	"            contactP.phoneNumber,contactP.email,contactP.division,  \n" +
	"            fun_convertJsonEmailToCommaSepList(contactP.email) emailList,  \n" +
	"            fun_convertJsonPhoneToCommaSepList(contactP.phoneNumber) phoneList,  \n" +
	"             (case when sodCnt.totalLineCount = sodCnt.completedLineCount  then 2  \n" +
	"				  when sodCnt.totalLineCount = sodCnt.canceledLineCount then -1  \n" +
	"                  else 1 end) workingStatus,  \n" +
	"            (case when som.isLegacyPO = 1 then 'Legacy PO' else '' end) isLegacyPOText,  \n" +
	"            (case when som.isRmaPO = 1 then 'RMA PO' else '' end) isRmaPOText,  \n" +
	"            (case when som.isBlanketPO = 1 then 'Blanket PO' else '' end) isBlanketPOText,  \n" +
	"            som.blanketPOOption,som.`status`,som.isAlreadyPublished ,  \n" +
	"            som.carrierID, som.carrierAccountNumber  ,  \n" +
	"            som.billingContactPersonID, som.intermediateContactPersonID, som.shippingContactPersonID,  \n" +
	"            (case when som.linkToBlanketPO = 1 then 'Linked to Blanket PO' else '' end) linkToBlanketPOText,  \n" +
	"             shippingMethod.gencCategoryName shippingMethodText, carrier.gencCategoryName carrierText  \n" +
	"	from salesordermst som  \n" +
	"    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
	"	left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
	"	left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
	"    left join contactperson contactP on contactP.personId = som.shippingContactPersonID and contactP.isDeleted = 0  \n" +
	"    left join genericcategory  shippingMethod on shippingMethod.gencCategoryID = som.shippingMethodID and shippingMethod.categoryType ='Shipping Methods' and shippingMethod.isDeleted = 0  \n" +
	"	left join genericcategory  carrier on carrier.gencCategoryID = som.termsID and carrier.categoryType ='Carrier' and shippingMethod.isDeleted = 0  \n" +
	"    left join ( select  a.refSalesOrderID, max(lastCPSId) lastCPSId, max(lastCPSNumber) lastCPSNumber,  \n" +
	"				max(lastCPSDate) lastCPSDate, max(lastCPSComment) lastCPSComment, max(CPSCount) CPSCount, max(CPSDraftCnt) CPSDraftCnt  \n" +
	"				from (select cps.refSalesOrderID, cps.id,cps.packingSlipNumber,cps.packingSlipDate,cps.packingSlipComment ,  \n" +
	"						LAST_VALUE(cps.id) over (partition by cps.refSalesOrderID) lastCPSId ,  \n" +
	"						LAST_VALUE(cps.packingSlipNumber) over (partition by cps.refSalesOrderID) lastCPSNumber,  \n" +
	"						LAST_VALUE(cps.packingSlipDate) over (partition by cps.refSalesOrderID) lastCPSDate,  \n" +
	"						LAST_VALUE(cps.packingSlipComment) over (partition by cps.refSalesOrderID) lastCPSComment,  \n" +
	"						count(1) over (partition by cps.refSalesOrderID) CPSCount,  \n" +
	"						cpd.draftCnt AS CPSDraftCnt  \n" +
	"				from customer_packingslip cps  \n" +
	"                left join (select custp.refSalesOrderID draftRefSoId, count(1) draftCnt from customer_packingslip custp  \n" +
	"						where custp.isDeleted = 0  and custp.substatus = 1 and transType ='P'  \n" +
	"						group by custp.refSalesOrderID) cpd on cpd.draftRefSoId = cps.refSalesOrderID  \n" +
	"                where cps.isDeleted = 0  and cps.transType = 'P' and cps.refsalesorderid is not null) a  \n" +
	"				group by a.refSalesOrderID) cpsDetails on cpsDetails.refSalesOrderID = som.id  \n" +
	"	left join (select sod.refSalesOrderID as soId ,  \n" +
	"				sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
	"				count(1) totalLineCount,  \n" +
	"				sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
	"				From salesorderdet sod where sod.isDeleted = 0  \n" +
	"				Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = som.id  \n" +
	"    where som.isDeleted = 0  \n" +
	"    ) salesOrder  \n" +
	"    where 1=1 and \", headerWhereClause,    vOrderBy , rowNumWhere) ;  \n" +
	"  \n" +
	"	PREPARE query1 FROM @SQLStatement1;  \n" +
	"	EXECUTE query1;  \n" +
	"	DEALLOCATE PREPARE query1;  \n" +
	"  \n" +
	"    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
	"    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
	"    select soDetId,  \n" +
	"				refSalesOrderID, partID, lineID, custPOQty, tbdComment, internalComment,  \n" +
	"				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
	"				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  isCustom,custAssyPN,partSpecialNote,  \n" +
	"                po_TBDQty,shippedQty AS shippedQty , woComment  ,  \n" +
	"                cancelStatus, isHotJob,isDetHalt,  \n" +
	"                soWorkingStatus, materialTentitiveDocDate  ,refSODetID,blanketSOId,  \n" +
	"                blanketPONumber  ,parentReleaseNumber,linkdPOCnt  \n" +
	"	from (select  sod.id as soDetId,  \n" +
	"				sod.refSalesOrderID,  \n" +
	"				sod.partID,  \n" +
	"				sod.lineID,  \n" +
	"				sod.qty as custPOQty,  \n" +
	"				sod.releaseLevelComment as tbdComment, -- TBD comments  \n" +
	"				sod.internalComment,  \n" +
	"				sod.remark as shippingComment,  \n" +
	"				sod.isCancle,  \n" +
	"                ifnull(sod.partDescription,'-') partDescription,  \n" +
	"                sod.salesOrderDetStatus,  \n" +
	"                sod.custPOLineNumber,  \n" +
	"				co.PIDCode,  \n" +
	"				co.mfgPN,  \n" +
	"                co.mfgcodeID,  \n" +
	"                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
	"				rohs.name AS rohsName,  \n" +
	"				rohs.rohsIcon,  \n" +
	"                co.nickName,  \n" +
	"                co.partType,  \n" +
	"                co.isCustom,  \n" +
	"                co.custAssyPN ,  \n" +
	"                co.specialNote partSpecialNote,  \n" +
	"				(sod.qty - ifnull(soDetQty.relQty,0)) po_TBDQty,  \n" +
	"                cpd.shippedQty,  \n" +
	"                ifnull(sod.woComment, workOrderDet.woList) woComment  ,  \n" +
	"                sod.isCancle cancelStatus,  \n" +
	"                sod.isHotJob,  \n" +
	"                (case when holdTrans.holdCnt > 0 then 1 else 0 end ) isDetHalt,  \n" +
	"                (CASE 	WHEN (sod.isCancle = 1) THEN 'Canceled'  \n" +
	"						WHEN (sod.`salesOrderDetStatus` = 1)   THEN 'In Progress'  \n" +
	"						ELSE 'Completed'  END) soWorkingStatus,  \n" +
	"                materialTentitiveDocDate ,  \n" +
	"                sod.refSODetID,  \n" +
	"                blanketPO.blanketSOId,  \n" +
	"                blanketPO.poNumber AS blanketPONumber  ,  \n" +
	"                soDetQty.parentReleaseNumber,  \n" +
	"                linkedPO.linkdPOCnt  \n" +
	"		from salesorderdet sod  \n" +
	"        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
	"		left join component co on co.id = sod.partID and co.isDeleted = 0 and mfgType='MFG'  \n" +
	"        left join (select shipChild.sDetID, sum(shipChild.qty) relQty, GROUP_CONCAT(shipParent.releaseNumber) parentReleaseNumber from salesshippingmst shipChild  \n" +
	"					LEFT JOIN salesshippingmst shipParent ON shipParent.refShippingLineID = shipChild.shippingID   AND shipParent.isDeleted = 0  \n" +
	"					where shipChild.isDeleted = 0  group by shipChild.sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
	"        left join (select refSalesorderDetid , sum(cpd.shipQty) shippedQty  \n" +
	"					from customer_packingslip_det  cpd  \n" +
	"					join customer_packingslip cps on cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0  \n" +
	"                    where cpd.isDeleted = 0 and cps.transType='P' group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
	"		left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
	"					from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sod.id  and workOrderDet.partID = sod.partId  \n" +
	"		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
	"        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
	"        left join (select refTransid ,count(1) holdCnt from holdunholdtrans where refType='PO' and isDeleted = 0 and endDate is NUll and `status` = 'H' group by refTransid) holdTrans  \n" +
	"			on holdTrans.refTransid = sod.id  \n" +
	"        left join (select blanketDet.id blanketDetId, blanketSO.id blanketSOId , blanketSO.poNumber from salesorderdet blanketDet  \n" +
	"				join salesordermst blanketSO on blanketSO.id = blanketDet.refSalesOrderID and blanketSO.isDeleted = 0  \n" +
	"                where blanketSO.isDeleted = 0) blanketPO on blanketPO.blanketDetId = sod.refBlanketPOID  \n" +
	"        left join (select childPO.refBlanketPOID , count(1) linkdPOCnt from salesorderdet childPO where childPO.isDeleted = 0 group by childPO.refBlanketPOID) linkedPO on linkedPO.refBlanketPOID = sod.id  \n" +
	"		where sod.isDeleted = 0  \n" +
	"	) a;  \n" +
	"  \n" +
	"    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
	"    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
	"    select soDetId,  \n" +
	"				packingSlipDate,  \n" +
	"				promisedShipDate,  \n" +
	"                refCustPackingSlipID, packingSlipDetId,  \n" +
	"                  row_number() over (partition by releaseId,soDetId order by packingSlipDate desc) cpsIndex,  \n" +
	"				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
	"				shippingComment, isCancle, releaseNumber, soReleaseQty,  \n" +
	"                shippedQty AS shippedQty,  \n" +
	"                 cpsDetailCnt,  \n" +
	"                 isReadyToShip  ,cpsDetailShippedQty  ,  \n" +
	"                (case when  (soReleaseQty - cpsDetailShippedQty) <= 0 then 1 else 0 end) relCompletedStatus,  \n" +
	"                cpsSubStatus  ,poReleaseNumber,salesOrderDetStatus,'completed ' as firstInsert, shippingDetailCnt  \n" +
	"	from (select  sod.id as soDetId,  \n" +
	"				sod.refSalesOrderID,  \n" +
	"				sod.partID,  \n" +
	"				sod.lineID,  \n" +
	"				sod.qty as custPOQty,  \n" +
	"				sod.internalComment,  \n" +
	"				sod.remark as shippingComment,  \n" +
	"                soship.releaseNotes releaseLineComment,  \n" +
	"				sod.isCancle,  \n" +
	"                soship.shippingID releaseId,  \n" +
	"				soship.releaseNumber,  \n" +
	"				soship.promisedShipDate,  \n" +
	"				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
	"				cpd.refCustPackingSlipID,  \n" +
	"                cpd.id packingSlipDetId,  \n" +
	"				cpd.shipQty AS shippedQty,  \n" +
	"                cp.packingSlipDate ,  \n" +
	"                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
	"                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
	"--                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
	"                soship.isReadyToShip,  \n" +
	"                cp.subStatus AS cpsSubStatus,  \n" +
	"                soship.poReleaseNumber,  \n" +
	"                sod.salesOrderDetStatus ,  \n" +
	"                sum(case when (soship.carrierAccountNumber is not null AND trim(soship.carrierAccountNumber) <>'')  OR soship.carrierID is not null OR  \n" +
	"                                soship.shippingMethodID is not null OR soship.shippingAddressID is not null OR  \n" +
	"                                soship.shippingContactPersonID is not null then 1 else 0 end) over (partition by soship.shippingID,sod.id) shippingDetailCnt  \n" +
	"		from salesorderdet sod  \n" +
	"        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
	"		left join component co on co.id = sod.partID and co.isDeleted = 0  AND co.mfgType='MFG'  \n" +
	"		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
	"		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
	"        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
	"		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
	"		where sod.isDeleted = 0  \n" +
	"	) a;  \n" +
	"  \n" +
	"  \n" +
	"	SELECT * from temp_so_mst;  \n" +
	"  \n" +
	"    SET @SQLStatement2 = CONCAT(\"SELECT soDetail.* from temp_so_detail AS soDetail  \n" +
	"								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID  \n" +
	"                                order by soDetail.salesOrderDetStatus, soDetail.soDetId\");  \n" +
	"	PREPARE query2 FROM @SQLStatement2;  \n" +
	"	EXECUTE query2;  \n" +
	"	DEALLOCATE PREPARE query2;  \n" +
	"  \n" +
	" 	SELECT * from temp_so_rel_detail order by relCompletedStatus,promisedShipDate;  \n" +
	"		-- order by soDetId,relCompletedStatus,promisedShipDate;  \n" +
	"  \n" +
	"	DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
	"	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
	"    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
	"END;  \n" +
  /* **************************** Add Script Version -> 25-03-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (6059,'2.00','V1','US 42411: Apply Part Master Normalization Effect in SO/CPS/CINV/CCM/ASSY STK Flow- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
case 6059:
  allDbChangesArray.push(
  /* **************************** New Script -> 01-03-2022*********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_GetShippedPackingSlipDetailBySoDetID;  \n" +
	"CREATE PROCEDURE `Sproc_GetShippedPackingSlipDetailBySoDetID`(  \n" +
	"	IN ppageIndex INT,  \n" +
	"	IN precordPerPage INT,  \n" +
	"	IN pOrderBy VARCHAR(255),  \n" +
	"    IN pWhereClause VARCHAR(16383),  \n" +
	"	IN psalesorderDetID INT,  \n" +
	"	IN preleaseLineId INT,  \n" +
	"    IN pSalesOrderID INT ,  \n" +
	"    IN pPackingSlipStatus INT  \n" +
	")  \n" +
	"BEGIN  \n" +
	"	DECLARE vMfgNameFormat INT;  \n" +
	"	DECLARE pOffset INT;  \n" +
	"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
	"  \n" +
	"  \n" +
	"SELECT FUN_GETMFGCODENAMEFORMAT() INTO vMfgNameFormat;  \n" +
	"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
	"		SET pOrderBy = \"ORDER BY c.packingSlipDate Desc\";  \n" +
	"	ELSE  \n" +
	"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
	"	END IF;  \n" +
	"    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
	"		SET pWhereClause = '1=1' ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
	"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
	"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
	"	ELSE  \n" +
	"		SET rowNumWhere = '';  \n" +
	"	END IF;  \n" +
	"  \n" +
	"    IF preleaseLineId IS NOT NULL THEN  \n" +
	"		SET @temp_Sproc_GetShippedPackingSlipDetailBySoDetID = concat(\"SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,  \n" +
	"				cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS refCustInvoiceID  ,  \n" +
	"				cpd.partId,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
	"                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,\",vMfgNameFormat,\") mfrName,  \n" +
	"                cpd.shippingNotes , cpd.internalComment ,  \n" +
	"                fun_getCustomerInvoiceSubStatusName(cp.subStatus,'P') statusName  \n" +
	"		FROM 	customer_packingslip_det cpd  \n" +
	"		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
	"		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
	"        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  AND co.mfgType = 'MFG'  \n" +
	"		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
	"        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
	"		WHERE   cpd.refsalesorderdetid= \", psalesorderDetID ,\"  \n" +
	"		AND 	cpd.shippingId= \", preleaseLineId, \"  \n" +
	"        AND  cpd.isdeleted = 0  \n" +
	"		AND     cp.transType = 'P' \");  \n" +
	"    ELSEIF pSalesOrderID IS NOT NULL AND psalesorderDetID IS NULL THEN  \n" +
	"		 SET @temp_Sproc_GetShippedPackingSlipDetailBySoDetID = concat(\"SELECT  cp.id, cp.packingSlipNumber,cp.packingSlipDate,  \n" +
	"				cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,  \n" +
	"				cp.refCustInvoiceID AS refCustInvoiceID, 	SUM(cpd.shipQty) AS shipQty,  \n" +
	"                cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
	"                co.mfgcodeID, fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,\",vMfgNameFormat,\") mfrName,  \n" +
	"                co.isCustom,co.custAssyPN,  \n" +
	"                cpd.shippingNotes , cpd.internalComment,  \n" +
	"                fun_getCustomerInvoiceSubStatusName(cp.subStatus,'P') statusName  \n" +
	"			FROM customer_packingslip cp  \n" +
	"            LEFT JOIN customer_packingslip_det cpd on cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
	"            LEFT JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  and co.mfgType = 'MFG'  \n" +
	"            LEFT JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
	"            LEFT JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
	"			LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
	"			WHERE   cp.refSalesOrderID= \", pSalesOrderID,\"  \n" +
	"            AND  cp.isdeleted = 0  \n" +
	"			AND     cp.transType = 'P'  \n" +
	"            AND  cp.subStatus = \",ifnull(pPackingSlipStatus,\"cp.subStatus\"),\"  \n" +
	"            group by cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID,  \n" +
	"				cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name`, rr.rohsIcon,co.isCustom,cpd.shippingNotes , cpd.internalComment			\");  \n" +
	"    ELSE  \n" +
	"       SET @temp_Sproc_GetShippedPackingSlipDetailBySoDetID =  concat(\"SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS refCustInvoiceID,  \n" +
	"				cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
	"                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,\",vMfgNameFormat,\") mfrName,co.isCustom,  \n" +
	"                cpd.shippingNotes , cpd.internalComment ,  \n" +
	"                fun_getCustomerInvoiceSubStatusName(cp.subStatus,'P') statusName  \n" +
	"		FROM 	customer_packingslip_det cpd  \n" +
	"		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
	"		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
	"        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0 and mfgType='MFG'  \n" +
	"		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
	"        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
	"		WHERE   cpd.refsalesorderdetid= \",psalesorderDetID,\"  \n" +
	"        AND  cpd.isdeleted = 0  \n" +
	"		AND     cp.transType = 'P' \");  \n" +
	"    END IF;  \n" +
	" -- select @temp_Sproc_GetShippedPackingSlipDetailBySoDetID;  \n" +
	"	 /* to get total count of rows */  \n" +
	"	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetShippedPackingSlipDetailBySoDetID,\" ) c where 1=1 and \", pWhereClause);  \n" +
	"    PREPARE query2 FROM @SQLStatement2;  \n" +
	"	EXECUTE query2;  \n" +
	"	DEALLOCATE PREPARE query2;  \n" +
	"  \n" +
	"	SET @SQLStatement2 = CONCAT(\"select c.* from ( \", @temp_Sproc_GetShippedPackingSlipDetailBySoDetID,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
	"-- select @SQLStatement2;  \n" +
	"    PREPARE query1 FROM @SQLStatement2;  \n" +
	"	EXECUTE query1;  \n" +
	"	DEALLOCATE PREPARE query1;  \n" +
	"END;  \n" +
  /* **************************** Add Script Version -> 01-03-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (6060,'2.00','V1','US 42411: Apply Part Master Normalization Effect in SO/CPS/CINV/CCM/ASSY STK Flow- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
case 6060:
 allDbChangesArray.push(
 /* **************************** New Script -> 23-03-2022 *********************************** */
 "create table kitmst  \n" +
 "(id int AUTO_INCREMENT,  \n" +
 "kitPartid	int,  \n" +
 "kitName	varchar(150),  \n" +
 "kitType char(2),  \n" +
 "refSalesOrderdetid	int,  \n" +
 "kitQty	int,  \n" +
 "`mrpqty` INT,  \n" +
 "stkAllocMode Varchar(5),  \n" +
 "isDeleted	tinyint(1) not null default 0,  \n" +
 "createdBy	varchar(255) not null,  \n" +
 "createdAt	datetime not null,  \n" +
 "createdByRoleId int,  \n" +
 "updatedBy	varchar(255),  \n" +
 "updatedAt	datetime,  \n" +
 "updatedByRoleId int,  \n" +
 "deletedBy	varchar(255),  \n" +
 "deletedAt	datetime,  \n" +
 "deleteByRoleId int,  \n" +
 "primary key (id),  \n" +
 "constraint foreign key fk_kitmst_kitpartid (kitpartid)  REFERENCES component(id),  \n" +
 "constraint foreign key fk_kitmst_refsalesorderdetid (refSalesOrderdetid) references salesorderdet(id));  \n" +
 "ALTER TABLE `kitmst`  \n" +
 "CHANGE COLUMN `kitType` `kitType` CHAR(2) NULL DEFAULT NULL COMMENT 'SO - Sales order Kit,MA - Manual Kit' ,  \n" +
 "CHANGE COLUMN `stkAllocMode` `stkAllocMode` VARCHAR(5) NULL DEFAULT NULL COMMENT 'BULK: Bulk allocation,UMID: UMID allocation,MIX: Both allocation ' ;  \n" +
 /* **************************** Add Script Version -> 23-03-2022 *********************************** */
 "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
 "VALUES (6061,'2.00','V1',' Create new table kitmst - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
 );
break;
case 6061:
  allDbChangesArray.push(
  /* **************************** New Script -> 26-03-2022 *********************************** */
 "ALTER TABLE component_attributes MODIFY COLUMN isCloudApiUpdateAttribute TINYINT(1) DEFAULT 1;  \n" +
"ALTER TABLE COMPONENT MODIFY COLUMN mountingTypeID INT NULL;  \n" +
"ALTER TABLE COMPONENT MODIFY COLUMN functionalCategoryID INT NULL;  \n" +
      "CREATE TABLE `supplier_external_api` (  \n" +
      "  `id` int NOT NULL AUTO_INCREMENT,  \n" +
      "  `refMpnComponentId` int NOT NULL,  \n" +
      "  `supplierId` int DEFAULT NULL,  \n" +
      "  `attributeJson` json DEFAULT NULL,  \n" +
      "  `isDeleted` tinyint(1) DEFAULT '0',  \n" +
      "  `createdBy` varchar(255) NOT NULL,  \n" +
      "  `createdAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
      "  `createByRoleId` int DEFAULT NULL,  \n" +
      "  `updatedBy` varchar(255) NOT NULL,  \n" +
      "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
      "  `updateByRoleId` int DEFAULT NULL,  \n" +
      "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
      "  `deletedAt` datetime DEFAULT NULL,  \n" +
      "  `deleteByRoleId` int DEFAULT NULL,  \n" +
      "  PRIMARY KEY (`id`),  \n" +
      "  KEY `FK_supplier_external_api_refMpnComponentId` (`refMpnComponentId`),  \n" +
      "  KEY `FK_supplier_external_api_supplierId` (`supplierId`),  \n" +
      "  CONSTRAINT `FK_supplier_external_api_refMpnComponentId` FOREIGN KEY (`refMpnComponentId`) REFERENCES `component` (`id`),  \n" +
      "  CONSTRAINT `FK_supplier_external_api_supplierId` FOREIGN KEY (`supplierId`) REFERENCES `mfgcodemst` (`id`)  \n" +
      ");  \n" +
  /* **************************** Add Script Version -> 26-03-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (6062,'2.00','V1',' Service Changes  - CC '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
case 6062:
  allDbChangesArray.push(
  /* **************************** New Script -> 26-03-2022 *********************************** */
 "DROP TRIGGER IF EXISTS Trg_AI_component_Insert_attribute;  \n" +
 "DROP PROCEDURE IF EXISTS `Sproc_updateSupplierExternalAPI` ;  \n" +
"CREATE PROCEDURE `Sproc_updateSupplierExternalAPI`(  \n" +
"	IN pPartID INT,  \n" +
"	IN pSupplierID INT,  \n" +
"	IN pJson JSON,  \n" +
"	IN proleId INT  \n" +
")  \n" +
"BEGIN  \n" +
"         IF((SELECT COUNT(1) FROM supplier_external_API WHERE refMpnComponentId=pPartID AND supplierId=pSupplierID AND isdeleted=0)>0) THEN  \n" +
"           UPDATE supplier_external_API SET attributeJson=pJson,updatedBy='Auto',updateByRoleId=proleId WHERE refMpnComponentId=pPartID AND supplierId=pSupplierID AND isdeleted=0;  \n" +
"         ELSE  \n" +
"           INSERT INTO supplier_external_API(refMpnComponentId,supplierId,attributeJson,isDeleted,createdBy,createByRoleId,updatedBy,updateByRoleId)VALUES  \n" +
"           (pPartID,pSupplierID,pJson,0,'Auto',proleId,'Auto',proleId);  \n" +
"         END IF;  \n" +
"  \n" +
"END;  \n" +
  /* **************************** Add Script Version -> 26-03-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (6063,'2.00','V1',' Service Changes  - CC '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
case 6063:
    allDbChangesArray.push(
        /* **************************** New Script -> 26-03-2022  *********************************** */
        "DROP PROCEDURE IF EXISTS Sproc_RetrieveSettings;  \n" +
		"CREATE PROCEDURE `Sproc_RetrieveSettings`(  \n" +
		"	IN ppageIndex INT(11),  \n" +
		"	IN precordPerPage INT(11),  \n" +
		"	IN pOrderBy VARCHAR(255),  \n" +
		"	IN pWhereClause VARCHAR(16383)  \n" +
		")  \n" +
		"BEGIN  \n" +
		"		DECLARE pOffset INT(12);  \n" +
		"		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
		"		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
		"		DECLARE v_TimeZone VARCHAR(50);  \n" +
		"  \n" +
		"		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
		"		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
		"  \n" +
		"		SET @temp_Sproc_RetrieveSettings = CONCAT(\"  \n" +
		"			SELECT sc.id, sc.key AS datakey, sc.values AS datavalues, sc.inputControlName, users.employeeID  \n" +
		"            as updatedByID, sc.clusterName, sc.isEncrypted, sc.isActive, sc.isEditable, sc.description, sc.displayName,  \n" +
		"				fun_getUserNameByID(sc.updatedBy) updatedby,  \n" +
		"				fun_getUserNameByID(sc.createdBy) createdby,  \n" +
		"				fun_getRoleByID(sc.createByRoleId) createdbyRole,  \n" +
		"				fun_getRoleByID(sc.updateByRoleId) updatedbyRole,  \n" +
		"				fun_ApplyCommonDateTimeFormatByParaValue(sc.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
		"				fun_ApplyCommonDateTimeFormatByParaValue(sc.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
		"			count(1) over(partition by sc.clusterName) as clusterCount  \n" +
		"			FROM `systemconfigrations` sc left join users on  users.id = sc.updatedby  \n" +
		"			WHERE sc.deletedAt IS NULL AND sc.isActive=1  \n" +
		"		\");  \n" +
		"  \n" +
		"		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
		"			SET pOrderBy = CONCAT(\"ORDER BY id ASC\") ;  \n" +
		"		ELSE  \n" +
		"			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
		"		END IF;  \n" +
		"  \n" +
		"  \n" +
		"		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
		"			SET pWhereClause = '1=1' ;  \n" +
		"		END IF;  \n" +
		"  \n" +
		"		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
		"			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
		"			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
		"		ELSE  \n" +
		"			SET rowNumWhere = '';  \n" +
		"		END IF;  \n" +
		"  \n" +
		"		/* to get total count of rows */  \n" +
		"		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSettings,\" ) c where 1=1 and \", pWhereClause);  \n" +
		"		PREPARE query2 FROM @SQLStatement2;  \n" +
		"		EXECUTE query2;  \n" +
		"		DEALLOCATE PREPARE query2;  \n" +
		"  \n" +
		"		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveSettings,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
		"		PREPARE query1 FROM @SQLStatement2;  \n" +
		"		EXECUTE query1;  \n" +
		"		DEALLOCATE PREPARE query1;  \n" +
		"  \n" +
		"    END;  \n" +
		/* **************************** Add Script Version -> 26-03-2022 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (6064,'2.00','V1','User Story 40123: Data key Page: Implementation of control with sample data - Jay Solanki'," + userid + ", '" + requiredDet.ipAddress + "');"
    );
break;
    case 6064:
			  allDbChangesArray.push(
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetAllocatedKitForComponent`;  \n" +
			"CREATE PROCEDURE `Sproc_GetAllocatedKitForComponent`(  \n" +
			"	IN pPageIndex INT,  \n" +
			"	IN pRecordPerPage INT,  \n" +
			"	IN pOrderBy VARCHAR(255),  \n" +
			"	IN pWhereClause VARCHAR(16383),  \n" +
			"	IN pPartID INT,  \n" +
			"	IN pShowPackagingAlias TINYINT(1)  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE pOffset INT;  \n" +
			"	DECLARE rowNumWhere VARCHAR(255);  \n" +
			"	DECLARE vFromSQLQuery VARCHAR(16383);  \n" +
			"  \n" +
			"	IF (pOrderBy IS NOT NULL) THEN  \n" +
			"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
			"	ELSE  \n" +
			"		SET pOrderBy = \"ORDER BY PIDCode, uid\";  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(pWhereClause IS NULL OR pWhereClause = '\"\"' OR pWhereClause = '') THEN  \n" +
			"		SET pWhereClause = ' 1=1';  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
			"		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
			"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
			"	ELSE  \n" +
			"		SET rowNumWhere = '';  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	SET vFromSQLQuery = CONCAT(\"  \n" +
			"		SELECT  \n" +
			"				id,				refSalesOrderDetID,			salesOrderNumber,			poNumber,  \n" +
			"				assyID,			nickname,					assyPIDCode,				assyPN,  \n" +
			"				assyRohsId,		assyRohsIcon,				assyRohsName,				kitName,  \n" +
			"				lineID,			refRfqLineitem,				qpa,						kitQty,  \n" +
			"				requireUnitsForBuild,						partId,						mfgPart,  \n" +
			"				component,    	mfgPN,						refUIDId,					uid,  \n" +
			"				pkgQty,			pkgUnit,					uom,						uomClassID,  \n" +
			"                allocatedQty,	allocatedUnit,				allocatedUOM,				allocatedUOMID,  \n" +
			"				allocatedUOMClassID,						allocatedPins,				receiveMaterialType  \n" +
			"			FROM  \n" +
			"				(SELECT  \n" +
			"					kl.id,		k.refSalesOrderDetID,		s.salesOrderNumber,			s.poNumber,  \n" +
			"					k.assyID,	assy.nickname,				assy.PIDCode assyPIDCode,  \n" +
			"					assy.mfgPN assyPN,						assy.rohsStatusId assyRohsId,  \n" +
			"					FUN_GETROHSICONBYID(assy.rohsStatusId) assyRohsIcon,  \n" +
			"					FUN_GETROHSNAMEBYID(assy.rohsStatusId) assyRohsName,  \n" +
			"					kl.lineID,	kl.refRfqLineitem,		   kl.qpa,						ka.kitQty,  \n" +
			"					CONCAT(s.poNumber, ', ', s.salesOrderNumber, ', ', assy.PIDCode) kitName,  \n" +
			"					(kl.qpa * ka.kitQty) requireUnitsForBuild,							k.partId,  \n" +
			"					(SELECT  \n" +
			"							GROUP_CONCAT(DISTINCT (p.mfgPNID))  \n" +
			"								FROM  \n" +
			"									(  \n" +
			"										SELECT kalt.mfgPNID  \n" +
			"										FROM kit_allocation_lineitems_alternatepart kalt  \n" +
			"											WHERE kalt.partID = k.assyID  \n" +
			"											AND kalt.refRfqLineitem = k.refBOMLineID  \n" +
			"									UNION  \n" +
			"										SELECT componentID AS mfgPNID	FROM component_packagingalias  \n" +
			"											WHERE aliasgroupID IN (  \n" +
			"																	SELECT aliasgroupID  \n" +
			"																		FROM component_packagingalias  \n" +
			"																		WHERE componentID IN (  \n" +
			"																								SELECT kalt.mfgPNID  \n" +
			"																								FROM kit_allocation_lineitems_alternatepart kalt  \n" +
			"																									WHERE kalt.partID = k.assyID  \n" +
			"																									AND kalt.refRfqLineitem = k.refBOMLineID  \n" +
			"																								)  \n" +
			"											AND isDeleted = 0)  \n" +
			"								AND isDeleted = 0)  \n" +
			"					AS p) mfgPart,  \n" +
			"					fun_getKitAllocationPIDsForComponent(kl.refRfqLineitem, k.refSalesOrderDetID, \", pShowPackagingAlias, \") component,  \n" +
			"					fun_getKitAllocationPIDsForMfgPN(kl.refRfqLineitem, k.refSalesOrderDetID, \", pShowPackagingAlias, \") mfgPN,  \n" +
			"					k.refUIDId,			csd.uid,		csd.pkgQty,			csd.pkgUnit,  \n" +
			"					u.unitName uom,    	u.measurementTypeID uomClassID,		csd.receiveMaterialType,  \n" +
			"					k.allocatedQty,		k.allocatedUnit,  \n" +
			"					ku.unitName allocatedUOM,    	ku.measurementTypeID allocatedUOMClassID,  \n" +
			"					k.allocatedUOM allocatedUOMID,  \n" +
			"					FUN_GETKITALLOCATEDPIN(k.assyID, k.refSalesOrderDetID, k.refBOMLineID, NULL, kl.numOfPosition, FALSE) allocatedPins  \n" +
			"				FROM  \n" +
			"					kit_allocation k  \n" +
			"				INNER JOIN kit_allocation_lineitems kl ON k.refBOMLineID = kl.refRfqLineitem  \n" +
			"					AND k.refSalesOrderDetID = kl.refSalesOrderDetID  \n" +
			"				INNER JOIN kit_allocation_assy_detail ka ON k.assyID = ka.partId  \n" +
			"					AND k.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
			"				INNER JOIN salesorderdet sd ON k.refSalesOrderDetID = sd.id  \n" +
			"					AND sd.partCategory = 3  \n" +
			"				INNER JOIN salesordermst s ON sd.refSalesOrderID = s.id  \n" +
			"				INNER JOIN component assy ON k.assyID = assy.id AND assy.isDeleted = 0 AND assy.mfgType = 'MFG'  \n" +
			"				INNER JOIN component_sid_stock csd ON k.refUIDId = csd.id  \n" +
			"				INNER JOIN uoms u ON u.id = csd.uom AND u.isDeleted = 0  \n" +
			"                INNER JOIN uoms ku ON ku.id = k.allocatedUOM AND ku.isDeleted = 0  \n" +
			"				WHERE	k.status = 'A'  \n" +
			"				AND (k.partId IN (SELECT  \n" +
			"									componentID  \n" +
			"								FROM component_packagingalias  \n" +
			"								WHERE aliasgroupID IN (SELECT aliasgroupID FROM component_packagingalias  \n" +
			"														WHERE componentID = \",pPartID,\" AND isDeleted = 0)  \n" +
			"								AND isDeleted = 0)  \n" +
			"				OR k.partId = \",pPartID,\")) AS tempUMID  \n" +
			"			WHERE  \n" +
			"				\", pWhereClause);  \n" +
			"  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_GetAllocatedKitForComponent;  \n" +
			"  \n" +
			"	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_GetAllocatedKitForComponent AS \", vFromSQLQuery, \" \" , rowNumWhere);  \n" +
			"	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
			"	EXECUTE mainQuery;  \n" +
			"	DEALLOCATE PREPARE mainQuery;  \n" +
			"  \n" +
			"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", vFromSQLQuery, \") as a\");  \n" +
			"	PREPARE query1 FROM @SQLStatement1;  \n" +
			"	EXECUTE query1;  \n" +
			"	DEALLOCATE PREPARE query1;  \n" +
			"  \n" +
			"	SET @SQLStatement2 = CONCAT(\" SELECT * FROM temp_Sproc_GetAllocatedKitForComponent \", pOrderBy);  \n" +
			"	PREPARE query2 FROM @SQLStatement2;  \n" +
			"	EXECUTE query2;  \n" +
			"	DEALLOCATE PREPARE query2;  \n" +
			"  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetAllocatedKitForUMID`;  \n" +
			"CREATE PROCEDURE `Sproc_GetAllocatedKitForUMID`(  \n" +
			"	pUMIDId INT  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	SELECT *,  \n" +
			"        fun_getKitReleaseStatus(allocPerWithSubAssy,totalKitQty,totalPOQty, assyKitQty, assyPOQty, releaseCount, pendingCount) as kitReleaseStatus  FROM  \n" +
			"(SELECT  \n" +
			"		ka.id,					ka.refSalesOrderDetID,		s.salesOrderNumber,  \n" +
			"		s.poNumber,             sd.materialTentitiveDocDate,  \n" +
			"		ka.assyID,				assy.nickname,				assy.PIDCode assyPIDCode,  \n" +
			"		CONCAT(s.poNumber, ', ', s.salesOrderNumber, ', ', assy.PIDCode, ', ', sd.qty) kitName,  \n" +
			"		ka.allocatedQty,		ka.allocatedUnit,  \n" +
			"        ka.allocatedUOMID, 		fun_getUnitNameByID(ka.allocatedUOMID) allocatedUOM,  \n" +
			"        u.measurementTypeID as uomClassID,  \n" +
			"		FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(rp.kitReleaseDate) kitReleaseDate,  \n" +
			"        rp.promiseShipDate,  \n" +
			"        k.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,sd.kitQty, sd.qty, p.releaseCount, p.pendingCount,  \n" +
			"        (a.perAssyBuildQty * sd.kitQty) AS assyKitQty,  \n" +
			"        (a.perAssyBuildQty *  sd.qty)AS assyPOQty  \n" +
			"	From (  \n" +
			"			SELECT 	k.id,			k.refSalesOrderDetID, k.assyID,  \n" +
			"					SUM(k.allocatedQty) allocatedQty,		SUM(k.allocatedUnit) allocatedUnit,  \n" +
			"					k.allocatedUOM allocatedUOMID  \n" +
			"			FROM 	kit_allocation k  \n" +
			"			WHERE 	k.id = k.id  \n" +
			"			AND 	k.refUIDId = pUMIDId  \n" +
			"			AND 	k.status = 'A'  \n" +
			"			GROUP BY k.id, k.refSalesOrderDetID, k.assyID, k.allocatedUOM  \n" +
			"		) ka  \n" +
			"	INNER JOIN 	salesorderdet sd ON ka.refSalesOrderDetID = sd.id  AND sd.partCategory = 3 AND sd.isDeleted = 0  \n" +
			"	INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id AND s.isDeleted = 0  \n" +
			"	INNER JOIN  component assy ON ka.assyID = assy.id AND assy.isDeleted = 0 AND assy.mfgType = 'MFG'  \n" +
			"	INNER JOIN 	uoms u ON u.id = ka.allocatedUOMID AND u.isDeleted = 0  \n" +
			"    JOIN (  \n" +
			"				SELECT  \n" +
			"					perAssyBuildQty, refSalesOrderDetID, partID AS refAssyId  \n" +
			"				FROM kit_allocation_assy_detail  \n" +
			"				WHERE isDeleted = 0  \n" +
			"				GROUP BY refSalesOrderDetID, partID, perAssyBuildQty  \n" +
			"			) AS a ON a.refSalesOrderDetID = ka.refSalesOrderDetID  AND ka.assyID = a.refAssyId  \n" +
			"    LEFT JOIN (  \n" +
			"					SELECT 	salesOrderDetID,  \n" +
			"							refAssyId,  \n" +
			"                            subAssyID,  \n" +
			"                            IFNULL(subAssyID, refAssyId) AS mainAssy,  \n" +
			"							SUM(CASE WHEN  kitStatus = 'R' THEN 1 ELSE 0 END) releaseCount,  \n" +
			"							SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount,  \n" +
			"							SUM(kitReleaseQty) totalKitQty,	SUM(poQty) totalPOQty  \n" +
			"					FROM 	salesorder_plan_detailsmst  \n" +
			"					WHERE 	isDeleted = 0  \n" +
			"					GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
			"				) AS p ON ka.refSalesOrderDetID = p.salesOrderDetID AND ka.assyID = p.mainAssy  \n" +
			"	LEFT JOIN (  \n" +
			"				SELECT 	k.refSalesorderdetid, k.assyID,  \n" +
			"						ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS allocPerWithSubAssy  \n" +
			"				FROM  \n" +
			"					(SELECT  vk.qpaWithDnp,   vk.refSalesorderdetid, vk.assyID,  \n" +
			"							vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation ,  \n" +
			"							IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.allocatedpin, 0) ELSE IFNULL(vk.allocatedunit, 0) END)) / (vk.totalAssyBuildQty * IFNULL(vk.qpaWithDnp, 0))), 0) AS allocationPer  \n" +
			"									FROM  		vu_kit_allocation_detail vk  \n" +
			"									INNER JOIN	salesorderdet sd on vk.refSalesorderdetid  = sd.id AND sd.isDeleted = 0  \n" +
			"									WHERE    	vk.isNotRequiredKitAllocation != 1 AND vk.qpaWithDnp != 0  \n" +
			"					) as k  GROUP BY k.refSalesOrderDetID, k.assyID  \n" +
			"			) k ON ka.refSalesOrderDetID = k.refSalesorderdetid AND ka.assyID = k.assyID  \n" +
			"	LEFT JOIN (  \n" +
			"		SELECT 	salesOrderDetID,  \n" +
			"				(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
			"				min(actualKitReleaseDate) kitReleaseDate,  \n" +
			"				MIN(poDueDate) promiseShipDate  \n" +
			"		FROM 	vu_kit_plans  \n" +
			"		GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
			"	) rp ON ka.refSalesOrderDetID = rp.salesOrderDetID AND ka.assyID = rp.assyID  \n" +
			"	) AS temp ORDER BY (kitReleaseDate IS NULL),  kitReleaseDate ASC, id ASC;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetAllocatedKitList`;  \n" +
			"CREATE PROCEDURE `Sproc_GetAllocatedKitList`()  \n" +
			"BEGIN  \n" +
			"	SELECT 		k.refSalesOrderDetID,	s.salesOrderNumber,		s.poNumber,   	s.customerID,  \n" +
			"				k.assyID,	 			c.nickname,				c.PIDCode,		sd.qty,  \n" +
			"				fun_GetSubAssyCount(k.refSalesOrderDetID) numberOfSubAssy,  \n" +
			"				kas.bomAssyLevel assyLevel,  \n" +
			"				fun_getParentAssyPIDCodeBySODetID(k.refSalesOrderDetID) parenetPIDCode  \n" +
			"	FROM (  \n" +
			"			SELECT 	k.refSalesOrderDetID, k.assyID  \n" +
			"			FROM 	kit_allocation k  \n" +
			"			WHERE 	k.status = 'A'  \n" +
			"			GROUP BY k.refSalesOrderDetID, k.assyID  \n" +
			"	) AS k  \n" +
			"	INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.isDeleted = 0 AND sd.partCategory=3  \n" +
			"	INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id AND s.isDeleted = 0  \n" +
			"	INNER JOIN	component c ON k.assyID = c.id AND c.isDeleted = 0 AND c.mfgType = 'MFG'  \n" +
			"	LEFT JOIN  kit_allocation_assy_detail kas ON k.refSalesOrderDetID = kas.refSalesOrderDetID AND k.assyID = kas.partId AND kas.isDeleted = 0  \n" +
			"	ORDER BY 	s.poNumber, s.salesOrderNumber, c.nickname;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetComponentKitAllocation`;  \n" +
			"CREATE PROCEDURE `Sproc_GetComponentKitAllocation`(  \n" +
			"	IN pPartID INT  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	SELECT CONCAT(s.poNumber, ', ', s.salesOrderNumber, ', ', c.PIDCode)  kitName, totalAllocatedQty  \n" +
			"	FROM (  \n" +
			"			SELECT 	k.refSalesOrderDetID, k.assyID, SUM(k.allocatedQty) totalAllocatedQty  \n" +
			"			FROM 	kit_allocation k  \n" +
			"			WHERE 	k.partId = pPartID  \n" +
			"			AND 	k.status = 'A'  \n" +
			"			GROUP BY k.refSalesOrderDetID, k.assyID  \n" +
			"	) AS k  \n" +
			"	INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.isDeleted = 0 AND sd.partCategory=3  \n" +
			"	INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id AND s.isDeleted = 0  \n" +
			"	INNER JOIN	component c ON k.assyID = c.id AND c.isDeleted = 0 AND c.mfgType = 'MFG';  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetKitAllocationFilterDetail`;  \n" +
			"CREATE PROCEDURE `Sproc_GetKitAllocationFilterDetail`(  \n" +
			"	IN pRefSalesOrderDetID INT,  \n" +
			"	IN pAssyId INT,  \n" +
			"	IN pIsConsolidated BOOLEAN  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE v_AssyId INT;  \n" +
			"  \n" +
			"    IF (pIsConsolidated) THEN  \n" +
			"		SET v_AssyId = NULL;  \n" +
			"	ELSE  \n" +
			"		SET v_AssyId = pAssyId;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"    IF(pIsConsolidated = 1) THEN  \n" +
			"		/* Get consolidated parts detail from consolidated table */  \n" +
			"		DROP TEMPORARY TABLE IF EXISTS tempKitLineDetail;  \n" +
			"		CREATE TEMPORARY TABLE IF NOT EXISTS tempKitLineDetail AS  \n" +
			"		SELECT 	k.mountingTypeID, k.partType as functionalCategoryID  \n" +
			"		FROM 	kit_allocation_consolidate_Line_detail k  \n" +
			"		WHERE 	k.refSalesOrderDetID = pRefSalesOrderDetID AND k.isAssembly = 0 AND k.isDeleted = 0;  \n" +
			"	ELSE  \n" +
			"		/* Get assembly parts detail from kit_allocation_lineitems and kit_allocation_lineitems_alternatepart table */  \n" +
			"		DROP TEMPORARY TABLE IF EXISTS tempKitLineDetail;  \n" +
			"		CREATE TEMPORARY TABLE IF NOT EXISTS tempKitLineDetail AS  \n" +
			"		SELECT 	(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
			"							then  min(c.mountingTypeID)  \n" +
			"						when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
			"							then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
			"						else  -1  \n" +
			"				end) mountingTypeID,  \n" +
			"                (case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
			"						then min(c.functionalCategoryID)  \n" +
			"						else -1 /* MisMatched */  \n" +
			"				end) functionalCategoryID  \n" +
			"		FROM 	kit_allocation_lineitems_alternatepart kal  \n" +
			"		JOIN 	component_attributes c on kal.mfgPNID = c.refComponentID  \n" +
			"		WHERE	kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
			"		AND 	kal.partID =  pAssyID  \n" +
			"		AND 	kal.isDeleted = 0  \n" +
			"		AND		c.isDeleted = 0  \n" +
			"        Group by kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	-- Get List of Functional Type  \n" +
			"	SELECT 	rf.id, 		rf.partTypeName, 	rf.isActive  \n" +
			"	FROM	rfq_parttypemst rf  \n" +
			"	WHERE   exists (select 1 from tempKitLineDetail t where t.functionalCategoryID = rf.id)  \n" +
			"    AND		rf.isDeleted = 0  \n" +
			"	AND 	rf.isActive = 1  \n" +
			"    group by rf.id, rf.partTypeName, rf.isActive  \n" +
			"	ORDER BY rf.partTypeName;  \n" +
			"  \n" +
			"    -- Get List of Mounting Type  \n" +
			"	SELECT 	rm.id, 		rm.`name`, 	rm.isActive  \n" +
			"	FROM 	rfq_mountingtypemst rm  \n" +
			"	WHERE   exists (select 1 from tempKitLineDetail t where t.mountingTypeID = rm.id)  \n" +
			"	AND   	rm.isDeleted = 0  \n" +
			"	and 	rm.isActive = 1  \n" +
			"    group by rm.id, rm.`name`, 	rm.isActive  \n" +
			"	ORDER BY rm.`name`;  \n" +
			"  \n" +
			"	-- Get List of Warehouse  \n" +
			"	SELECT 		wm.ID, wm.Name, wm.cartMfr, COUNT(1) AS totalReel  \n" +
			"    FROM 		binmst bm  \n" +
			"	INNER JOIN 	warehousemst wm ON wm.ID = bm.WarehouseID  \n" +
			"	INNER JOIN 	(  \n" +
			"				SELECT 	css.binID  \n" +
			"                FROM 	kit_allocation ka  \n" +
			"				inner JOIN component_sid_stock css ON css.id = ka.refUIDId  \n" +
			"				WHERE 	ka.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"                AND 	ka.assyID = IFNULL(v_AssyId, ka.assyID)  \n" +
			"                AND 	`status` = 'A'  \n" +
			"                AND 	css.isDeleted = 0  \n" +
			"				GROUP BY css.id  \n" +
			"			) tempKit ON tempKit.binID = bm.id  \n" +
			"	WHERE	bm.isDeleted = 0  \n" +
			"    AND		wm.isDeleted = 0  \n" +
			"	GROUP BY wm.ID, wm.Name, wm.cartMfr  \n" +
			"	ORDER BY wm.Name;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetKitallocationLineDetails`;  \n" +
			"CREATE PROCEDURE `Sproc_GetKitallocationLineDetails`(  \n" +
			"	IN pAssyID INT,  \n" +
			"	IN pRefSalesOrderDetID INT,  \n" +
			"	IN pkitAllocationLineItemId INT,  \n" +
			"    IN pIsConsolidated TINYINT  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE pKitqty INT DEFAULT 0;  \n" +
			"    DECLARE pCustomer VARCHAR(1000);  \n" +
			"    DECLARE pPIDCode VARCHAR(200);  \n" +
			"    DECLARE pCustomerID INT;  \n" +
			"    DECLARE pPartID INT;  \n" +
			"    DECLARE pRoHSName VARCHAR(100);  \n" +
			"    DECLARE pRoHSIcon VARCHAR(255);  \n" +
			"	DECLARE vMfgCodeFormat INT;  \n" +
			"	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
			"  \n" +
			"    IF(pAssyID = 0) THEN  \n" +
			"		SELECT 	IFNULL(s.kitQty,0),  \n" +
			"					fun_GetFormattedMfgCode(mf.mfgCode, mf.mfgName, vMfgCodeFormat),  \n" +
			"					sm.customerID,	c.PIDCode,	c.id,	r.name, r.rohsIcon  \n" +
			"				INTO pKitqty, pCustomer, pCustomerID, pPIDCode, pPartID, pRoHSName,	pRoHSIcon  \n" +
			"					FROM salesorderdet s  \n" +
			"					JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
			"					JOIN component c ON s.partID = c.id AND c.isDeleted = 0 AND c.mfgType = 'MFG'  \n" +
			"					JOIN mfgcodemst mf ON sm.customerID = mf.id  AND mf.isDeleted = 0  \n" +
			"                    JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
			"					WHERE s.id = pRefSalesOrderDetID AND s.isDeleted = 0 AND sm.isDeleted = 0;  \n" +
			"	ELSE  \n" +
			"		SELECT  IFNULL(k.totalAssyBuildQty,0),  \n" +
			"				fun_GetFormattedMfgCode(mf.mfgCode, mf.mfgName, vMfgCodeFormat),  \n" +
			"				sm.customerID,	c.PIDCode,	c.id,	r.name, r.rohsIcon  \n" +
			"			INTO pKitqty, pCustomer, pCustomerID, pPIDCode, pPartID, pRoHSName,	pRoHSIcon  \n" +
			"					FROM kit_allocation_assy_detail k  \n" +
			"					JOIN salesorderdet s ON s.id = k.refSalesOrderDetID  \n" +
			"					JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
			"                    JOIN mfgcodemst mf ON sm.customerID = mf.id  AND mf.isDeleted = 0  \n" +
			"                    JOIN component c ON s.partID = c.id AND c.isDeleted = 0  AND c.mfgType = 'MFG'  \n" +
			"                    JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
			"								AND k.partId = pAssyID  \n" +
			"								AND k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"								AND k.isDeleted = 0  AND s.isDeleted = 0  AND sm.isDeleted = 0;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"    IF(pIsConsolidated = 0) THEN  \n" +
			"		SELECT  \n" +
			"				c.id,			 	refSalesOrderDetID,		mfgPNID,  \n" +
			"                pPartID partID,								pPIDCode PIDCode,  \n" +
			"                pRoHSName rohsName,							pRoHSIcon rohsIcon,  \n" +
			"                pCustomer companyName, 						pCustomerID customerID,  \n" +
			"				lineID,			 	connecterTypeID,		numOfPosition,  \n" +
			"                uomID,			 	unitName,				uomClassID,  \n" +
			"				allocatedQty,		allocatedUnit,			allocatedPins,  \n" +
			"                consumeUnits, 		consumePin,  \n" +
			"				(CASE  \n" +
			"					WHEN uomMismatchedStep = 0 THEN 0  \n" +
			"					ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
			"				END) requiredQtyBuild,  \n" +
			"				(CASE  \n" +
			"					WHEN  \n" +
			"						(uomMismatchedStep = 0  \n" +
			"							OR connecterTypeID != - 2)  \n" +
			"					THEN  \n" +
			"						0  \n" +
			"					ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
			"				END) requirePinsBuild,  \n" +
			"                (CASE  \n" +
			"					WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
			"					ELSE  \n" +
			"						CASE  \n" +
			"							WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
			"							ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
			"						END  \n" +
			"				END) shortagePerBuildQty,  \n" +
			"				(CASE  \n" +
			"									WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
			"									ELSE  \n" +
			"										CASE  \n" +
			"											WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
			"											ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
			"										END  \n" +
			"				END) shortagePerQtyBuildPins  \n" +
			"			FROM  \n" +
			"				(SELECT  \n" +
			"						k.id,	 		k.refSalesOrderDetID,		kal.mfgPNID,  \n" +
			"                        k.lineID,		cp.connecterTypeID,  		k.numOfPosition,  \n" +
			"                        k.uomID,		u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
			"						(CASE  \n" +
			"							WHEN  \n" +
			"								k.isPurchase = 1 OR k.isInstall = 1  \n" +
			"							THEN  \n" +
			"								(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y'  \n" +
			"									OR k.isBuyDNPQty = 'P'  \n" +
			"									OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
			"							ELSE (IF(k.isBuyDNPQty = 'Y'  \n" +
			"								OR k.isBuyDNPQty = 'P'  \n" +
			"								OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
			"						END) AS qpa,  										k.refRfqLineitem AS rfqLineItemsId,  \n" +
			"						k.isNotRequiredKitAllocation,						kal.uomMismatchedStep,  \n" +
			"						IFNULL(ka.allocatedQty, 0) allocatedQty,			IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
			"						IFNULL(ka.allocatedPins, 0) allocatedPins,			IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
			"						IFNULL(ka.consumeQty, 0) consumeQty,				IFNULL(ka.consumePin, 0) consumePin  \n" +
			"				FROM  \n" +
			"					kit_allocation_lineitems k  \n" +
			"					INNER JOIN kit_allocation_lineitems_alternatepart kal ON kal.refKitAllocationLineItemId = k.id AND kal.isDeleted = 0  \n" +
			"                    LEFT JOIN component_attributes cp ON kal.mfgPNID = cp.refComponentID AND cp.isDeleted = 0  \n" +
			"                    INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
			"					LEFT JOIN vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  AND k.partID = ka.assyID  AND k.refRfqLineitem = ka.refBOMLineID  \n" +
			"					WHERE k.id = pkitAllocationLineItemId AND k.isDeleted = 0) AS c  \n" +
			"			GROUP BY id, refSalesOrderDetID, mfgPNID, qpa, lineID, uomID, unitName, uomClassID,  \n" +
			"					allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
			"					consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,  \n" +
			"					rfqLineItemsId, numOfPosition;  \n" +
			"		ELSE  \n" +
			"			SELECT  \n" +
			"					c.id,			 refSalesOrderDetID,		mfgPNID,  \n" +
			"					pPartID partID,								pPIDCode PIDCode,  \n" +
			"					pRoHSName rohsName,							pRoHSIcon rohsIcon,  \n" +
			"					pCustomer companyName, 						pCustomerID customerID,  \n" +
			"					lineID,			 	connecterTypeID,		numOfPosition,  \n" +
			"					uomID,			 	unitName,				uomClassID,  \n" +
			"					allocatedQty,		allocatedUnit,			allocatedPins,  \n" +
			"					consumeUnits, 		consumePin,  \n" +
			"					(CASE  \n" +
			"						WHEN uomMismatchedStep = 0 THEN 0  \n" +
			"						ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
			"					END) requiredQtyBuild,  \n" +
			"					(CASE  \n" +
			"						WHEN  \n" +
			"							(uomMismatchedStep = 0  \n" +
			"								OR connecterTypeID != - 2)  \n" +
			"						THEN  \n" +
			"							0  \n" +
			"						ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
			"					END) requirePinsBuild,  \n" +
			"                    (CASE  \n" +
			"					WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
			"					ELSE  \n" +
			"						CASE  \n" +
			"							WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
			"							ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
			"						END  \n" +
			"					END) shortagePerBuildQty,  \n" +
			"					(CASE  \n" +
			"						WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
			"						ELSE  \n" +
			"							CASE  \n" +
			"								WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
			"								ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
			"							END  \n" +
			"					END) shortagePerQtyBuildPins  \n" +
			"				FROM  \n" +
			"					(SELECT  \n" +
			"							k.id,	 		k.refSalesOrderDetID,	 	kal.mfgPNID,  \n" +
			"							k.lineID,		cp.connecterTypeID,  		k.numOfPosition,  \n" +
			"							k.uomID,		u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
			"							k.kitQPAWithDNP AS qpa,  					k.rfqLineItemsId AS rfqLineItemsId,  \n" +
			"							k.isNotRequiredKitAllocation,				k.uomMismatchedStep,  \n" +
			"							IFNULL(ka.allocatedQty, 0) allocatedQty,	IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
			"							IFNULL(ka.allocatedPins, 0) allocatedPins,	IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
			"							IFNULL(ka.consumeQty, 0) consumeQty,		IFNULL(ka.consumePin, 0) consumePin  \n" +
			"			FROM  \n" +
			"				kit_allocation_consolidate_line_detail k  \n" +
			"			INNER JOIN kit_allocation_consolidate_line_alternatepart kal ON kal.kitConsolidateID = k.id AND kal.isDeleted = 0  \n" +
			"			LEFT JOIN component_attributes cp ON kal.mfgPNID = cp.refComponentID AND cp.isDeleted = 0  \n" +
			"			INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
			"			LEFT JOIN 	vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  AND FIND_IN_SET(ka.refBOMLineID, k.consolidatedLineItemIDs)  \n" +
			"			WHERE k.id = pkitAllocationLineItemId AND k.isDeleted = 0) AS c  \n" +
			"		GROUP BY id, refSalesOrderDetID, mfgPNID, qpa, lineID, uomID, unitName, uomClassID,  \n" +
			"				allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
			"				consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,  \n" +
			"				rfqLineItemsId, numOfPosition;  \n" +
			"    END IF;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetKitAllocationLineItemsForExport`;  \n" +
			"CREATE PROCEDURE `Sproc_GetKitAllocationLineItemsForExport`(  \n" +
			"IN pPartID INT,  \n" +
			"IN pRefSalesOrderDetID INT,  \n" +
			"IN pIsConsolidated TINYINT,  \n" +
			"IN pCustomerId INT  \n" +
			")  \n" +
			"BEGIN  \n" +
			"  \n" +
			"	DECLARE pPOQty INT DEFAULT 0;  \n" +
			"	DECLARE pKitQty INT DEFAULT 0;  \n" +
			"	DECLARE pMrpQty INT DEFAULT 0;  \n" +
			"	DECLARE pAsyKitQty INT DEFAULT 0;  \n" +
			"    DECLARE pAssyQty INT DEFAULT 0;  \n" +
			"  \n" +
			"	IF(pPartID = 0) THEN  \n" +
			"		SELECT IFNULL(s.qty,0), IFNULL(s.mrpQty,0), IFNULL(s.kitQty,0) INTO pPOQty, pMrpQty, pKitQty  \n" +
			"			FROM salesorderdet s  WHERE s.id = pRefSalesOrderDetID AND s.isDeleted = 0;  \n" +
			"	ELSE  \n" +
			"		SELECT  IFNULL(s.qty,0), IFNULL(k.mrpQty,0), IFNULL(k.totalAssyBuildQty,0), IFNULL(k.perAssyBuildQty,0) INTO pPOQty, pMrpQty, pKitQty, pAssyQty  \n" +
			"			FROM kit_allocation_assy_detail k JOIN salesorderdet s ON s.id = k.refSalesOrderDetID  \n" +
			"						AND k.partId = pPartID  \n" +
			"						AND k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"						AND k.isDeleted = 0  AND s.isDeleted = 0;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF (pIsConsolidated = 0) THEN  \n" +
			"		SELECT * FROM  \n" +
			"			(SELECT  z.id AS id, z.refSalesOrderDetID, z.rfqLineItemsAlternateID, z.refRfqLineitem, z.mfgPNID,	z.partid, z.lineID AS _lineID,	z.cust_lineID, z.isBomLine,  \n" +
			"					(CASE  \n" +
			"						WHEN z.custPNID IS NULL THEN NULL  \n" +
			"						ELSE FUN_GETMFGPNBYID(z.custPNID)  \n" +
			"					END) custPN, z.restrictUseInBOMExcludingAliasStep,  z.restrictUseInBOMExcludingAliasWithPermissionStep, z.restrictUseInBOMStep, z.restrictUseInBOMWithPermissionStep,  \n" +
			"					z.isGoodPart, z.restrictPackagingUsePermanently, z.restrictPackagingUseWithpermission, z.restrictUsePermanently, z.restrictUSEwithpermission,  \n" +
			"					z.customerRev,	 z.customerDescription,	 z.qpa,	 z.refDesig, purchaseQty,  \n" +
			"                    FUN_GETUOMBYID(z.uomID) AS uom,  \n" +
			"					(CASE  \n" +
			"						WHEN z.isInstall = 1 THEN 'TRUE'  \n" +
			"						ELSE 'FALSE'  \n" +
			"					END) AS isInstall,  \n" +
			"					(CASE  \n" +
			"						WHEN z.isPurchase = 1 THEN 'TRUE'  \n" +
			"						ELSE 'FALSE'  \n" +
			"					END) AS isPurchase,  \n" +
			"					z.numOfRows,	z.numOfPosition,	z.dnpQty,	z.dnpDesig,  \n" +
			"					(CASE  \n" +
			"						WHEN z.substitutesAllow = 3 THEN 'Yes with Customer Approval'  \n" +
			"						WHEN z.substitutesAllow = 2 THEN 'No'  \n" +
			"						ELSE ''  \n" +
			"					END) AS substitutesAllow,  \n" +
			"					(CASE  \n" +
			"						WHEN z.isBuyDNPQty = 'Y' THEN 'YES'  \n" +
			"						WHEN z.isBuyDNPQty = 'C' THEN 'Customer Consigned'  \n" +
			"						WHEN z.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'  \n" +
			"						ELSE 'NO'  \n" +
			"					END) AS isBuyDNPQty,  \n" +
			"					(CASE  \n" +
			"						WHEN z.programingStatus = 1 THEN 'Pre-Assy'  \n" +
			"						WHEN z.programingStatus = 2 THEN 'Post-Assy'  \n" +
			"						WHEN z.programingStatus = 3 THEN 'Cust will program'  \n" +
			"						WHEN z.programingStatus = 4 THEN 'Pre-Programmed'  \n" +
			"						WHEN z.programingStatus = 5 THEN 'Who Will Program'  \n" +
			"						ELSE 'N/A'  \n" +
			"					END) AS programingStatus,  \n" +
			"					fun_getMfgNameByID(z.mfgCodeID) AS mfgName,		z.mfgPN,	z.customerPartDesc,	z.description AS description,  \n" +
			"					z.PIDCode , z.serialNumber , z.productionPN, z.deviceMarking, IF(z.partPackageID, fun_getPackageCaseNameByID(z.partPackageID), z.partPackage) AS partPackage,  \n" +
			"                    fun_getLatestCutomerCommentByLineWise(z.refRfqLineitem, z.rfqLineItemsAlternateID) AS customerApprovalComment,  \n" +
			"                    z.allocatedQty,		z.allocatedUnit,	z.allocatedPins,  z.customerApproval,  \n" +
			"					(CASE  \n" +
			"						WHEN z.uomMismatchedStep = 0 THEN 0  \n" +
			"						ELSE (IFNULL(purchaseQty, 0) * IFNULL(pKitQty, 0))  \n" +
			"					END) requiredKitQty,  \n" +
			"					(CASE  \n" +
			"						WHEN (z.uomMismatchedStep = 0 OR z.connecterTypeID != - 2) THEN  0  \n" +
			"						ELSE (IFNULL(purchaseQty, 0) * IFNULL(pKitQty, 0) * IFNULL(z.numOfPosition, 0))  \n" +
			"					END) requirePinsKitQty,  \n" +
			"                    (CASE  \n" +
			"						WHEN z.uomMismatchedStep = 0 THEN 0  \n" +
			"						ELSE (IFNULL(purchaseQty, 0) * IFNULL(pAssyQty, 0) * IFNULL(pMrpQty, 0))  \n" +
			"					END) requiredMrpQty,  \n" +
			"					(CASE  \n" +
			"						WHEN (z.uomMismatchedStep = 0 OR z.connecterTypeID != - 2) THEN  0  \n" +
			"						ELSE (IFNULL(purchaseQty, 0) * IFNULL(pAssyQty, 0) * IFNULL(pMrpQty, 0) * IFNULL(z.numOfPosition, 0))  \n" +
			"					END) requirePinsMrpQty,  \n" +
			"                    (CASE  \n" +
			"						WHEN (z.uomMismatchedStep = 0 OR z.isNotRequiredKitAllocation = 1) THEN  0  \n" +
			"						ELSE  \n" +
			"                        CASE WHEN z.connecterTypeID = - 2  \n" +
			"							THEN  \n" +
			"								CASE  \n" +
			"									WHEN (((IFNULL(purchaseQty, 0) * IFNULL(pKitQty, 0) * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + z.consumePin)) < 0) THEN 0  \n" +
			"									ELSE ((IFNULL(purchaseQty, 0) * IFNULL(pKitQty, 0) * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + + z.consumePin))  \n" +
			"								END  \n" +
			"							ELSE CASE  \n" +
			"								WHEN (((IFNULL(purchaseQty, 0) * IFNULL(pKitQty, 0)) - (z.allocatedUnit + z.consumeUnits)) < 0) THEN 0  \n" +
			"								ELSE ((IFNULL(purchaseQty, 0) * IFNULL(pKitQty, 0)) - (z.allocatedUnit + z.consumeUnits))  \n" +
			"							END  \n" +
			"						END  \n" +
			"					END) shortagePerKitQty,  \n" +
			"					(CASE  \n" +
			"						WHEN  \n" +
			"							z.uomMismatchedStep = 0  \n" +
			"								OR z.isNotRequiredKitAllocation = 1  \n" +
			"						THEN  \n" +
			"							0  \n" +
			"						ELSE CASE  \n" +
			"							WHEN  \n" +
			"								z.connecterTypeID = - 2  \n" +
			"							THEN  \n" +
			"								CASE  \n" +
			"									WHEN (((IFNULL(purchaseQty, 0) * IFNULL(pAssyQty, 0) * IFNULL(pMrpQty, 0) * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + z.consumePin)) < 0) THEN 0  \n" +
			"									ELSE ((IFNULL(purchaseQty, 0) * IFNULL(pAssyQty, 0) * IFNULL(pMrpQty, 0) * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + + z.consumePin))  \n" +
			"								END  \n" +
			"							ELSE CASE  \n" +
			"								WHEN (((IFNULL(purchaseQty, 0) * IFNULL(pAssyQty, 0) * IFNULL(pMrpQty, 0)) - (z.allocatedUnit + z.consumeUnits)) < 0) THEN 0  \n" +
			"								ELSE ((IFNULL(purchaseQty, 0) * IFNULL(pAssyQty, 0) * IFNULL(pMrpQty, 0)) - (z.allocatedUnit + z.consumeUnits))  \n" +
			"							END  \n" +
			"						END  \n" +
			"					END) shortageMrpQty, pKitQty AS kitQty, pMrpQty As mrpQty, pPOQty As poQty, pAssyQty AS qpaMultiplier,  \n" +
			"					SUM(IFNULL(FUN_CONVERTUOM(d.uom, z.uomID, IF(d.customerConsign = 0, IFNULL(d.availableStock, 0), 0)), 0)) availabelStock,  \n" +
			"					SUM(IFNULL(FUN_CONVERTUOM(d.uom, z.uomID, IF(d.customerConsign = 1 AND d.customerID = pCustomerId, IFNULL(d.availableStock, 0), 0)), 0)) availabelStockCustomerConsign  \n" +
			"			FROM  \n" +
			"				(SELECT l.id AS id,	l.refRfqLineitem,	l.refSalesOrderDetID,	al.refRfqLineItemAlternatePartId AS rfqLineItemsAlternateID,	l.partID AS partid,		l.lineID,  \n" +
			"					l.cust_lineID,		l.custPN,		l.custPNID,		l.customerRev,	l.customerDescription, l.qpa,	l.refDesig,		l.numOfPosition,  \n" +
			"					l.programingStatus,		l.substitutesAllow,		IFNULL(d.mfgPN, c.mfgPN) AS mfgPN,	l.uomID,  IFNULL(d.isGoodPart, c.isGoodPart) isGoodPart,  \n" +
			"					IFNULL(ds.restrictPackagingUseWithpermission, cs.restrictPackagingUseWithpermission) restrictPackagingUseWithpermission,  \n" +
			"					IFNULL(ds.restrictPackagingUsePermanently, cs.restrictPackagingUsePermanently) restrictPackagingUsePermanently, IF((c.id = IFNULL(d.id, c.id)), TRUE, FALSE) AS isBomLine,  \n" +
			"                    al.restrictUseInBOMExcludingAliasStep,  al.restrictUseInBOMExcludingAliasWithPermissionStep, al.restrictUseInBOMStep, al.restrictUseInBOMWithPermissionStep,  \n" +
			"					IFNULL(ds.restrictUsePermanently, cs.restrictUsePermanently) restrictUsePermanently, IFNULL(ds.restrictUSEwithpermission, cs.restrictUSEwithpermission) restrictUSEwithpermission,  \n" +
			"					CONCAT(l.description, '  ', al.description) AS description,		l.isInstall,	l.isPurchase,	l.dnpQty,	l.dnpDesig, IFNULL(da.partPackage, ca.partPackage) AS partPackage,  \n" +
			"					l.isBuyDNPQty,		l.numOfRows,	al.uomMismatchedStep,	l.customerPartDesc,		l.isNotRequiredKitAllocation,  IF((c.id = IFNULL(d.id, c.id)),   ca.partPackageID,da.partPackageID) AS partPackageID,  \n" +
			"					IFNULL(d.deviceMarking, c.deviceMarking) AS deviceMarking,   IFNULL(d.serialNumber, c.serialNumber) AS serialNumber,  IFNULL(d.PIDCode, c.PIDCode) AS PIDCode,  IFNULL(d.productionPN, c.productionPN) AS productionPN,  \n" +
			"                    IFNULL(d.id, c.id) AS mfgPNID,	IFNULL(d.mfgcodeID, c.mfgcodeID) AS mfgCodeID,	IFNULL(d.uom, c.uom) AS uom, ca.connecterTypeID,  \n" +
			"					IFNULL(da.noOfRows, ca.noOfRows) AS noOfRows,		IFNULL(ka.allocatedQty, 0) allocatedQty,	IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
			"					IFNULL(ka.allocatedPins, 0) allocatedPins,	IFNULL(ka.consumePin, 0) consumePin,	IFNULL(ka.consumeUnits, 0) consumeUnits,	IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
			"                    (CASE WHEN  l.isPurchase = 1 OR l.isInstall = 1  \n" +
			"						THEN  \n" +
			"							(IFNULL(l.qpa, 0) + IF(l.isBuyDNPQty = 'Y'  \n" +
			"								OR l.isBuyDNPQty = 'P'  \n" +
			"								OR l.isBuyDNPQty = 'C', IFNULL(l.dnpQty, 0), 0))  \n" +
			"						ELSE (IF(l.isBuyDNPQty = 'Y'  \n" +
			"							OR l.isBuyDNPQty = 'P'  \n" +
			"							OR l.isBuyDNPQty = 'C', IFNULL(l.dnpQty, 0), 0))  \n" +
			"					END) AS purchaseQty  , al.customerApproval  \n" +
			"			FROM  \n" +
			"				kit_allocation_lineitems l  \n" +
			"			JOIN kit_allocation_lineitems_alternatepart al ON l.id = al.refKitAllocationLineItemId AND l.isDeleted = 0 AND al.isDeleted = 0 AND al.mfgPNID IS NOT NULL  \n" +
			"            JOIN vu_component_mpn c ON al.mfgPNID = c.id  \n" +
			"			LEFT JOIN vu_component_mpn d ON c.packagingGroupid = d.packagingGroupid  \n" +
			"			LEFT OUTER JOIN vu_kit_allocation_summary ka ON al.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
			"				AND al.partID = ka.assyID  \n" +
			"				AND al.refRfqLineitem = ka.refBOMLineID  \n" +
			"				AND NOT EXISTS( SELECT  1 FROM  \n" +
			"					kit_allocation_lineitems_alternatepart `x`  \n" +
			"				WHERE x.refRfqLineitem = al.refRfqLineitem AND x.mfgPNID = d.id AND d.id <> c.id AND x.isDeleted = 0)  \n" +
			"			WHERE  \n" +
			"				l.partID = pPartID  \n" +
			"					AND l.refSalesOrderDetID = pRefSalesOrderDetID) z  \n" +
			"            LEFT JOIN vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNID) ELSE mfgPNID END))  \n" +
			"			GROUP BY z.id , z.rfqLineItemsAlternateID, z.refRfqLineitem, z.refSalesOrderDetID, z.mfgPNID, z.partid, isBomLine, z.lineID , z.cust_lineID , z.custPN , z.customerRev ,  \n" +
			"					z.isGoodPart, z.restrictPackagingUsePermanently, z.restrictPackagingUseWithpermission, z.restrictUsePermanently, z.restrictUSEwithpermission,  \n" +
			"					z.restrictUseInBOMExcludingAliasStep,  z.restrictUseInBOMExcludingAliasWithPermissionStep, z.restrictUseInBOMStep, z.restrictUseInBOMWithPermissionStep,  \n" +
			"					z.customerDescription , z.qpa , z.refDesig , z.uomID , z.isInstall , z.isPurchase , z.numOfRows , z.customerPartDesc , z.numOfPosition, z.purchaseQty,  \n" +
			"					z.isNotRequiredKitAllocation , z.dnpQty , z.dnpDesig , z.isBuyDNPQty , z.programingStatus , z.substitutesAllow, z.partPackageID, z.partPackage,  \n" +
			"                    z.PIDCode , z.serialNumber , z.productionPN, z.deviceMarking, z.mfgCodeID , z.mfgPN , z.noOfRows , z.mfgPNID , z.description,z.customerApproval,  \n" +
			"                    z.allocatedQty, z.allocatedUnit, z.allocatedPins, z.uomMismatchedStep, z.isNotRequiredKitAllocation, z.connecterTypeID,z.consumePin, z.consumeUnits) a;  \n" +
			"	ELSE  \n" +
			"  \n" +
			"        # Create Temp Table to Get partID from bifurcate consolidated MFR IDs - consolidatedMfgPNIDs  \n" +
			"  \n" +
			"			SELECT * FROM  \n" +
			"				(SELECT c.id,	 refSalesOrderDetID,	partid,		_lineID,	rfqLineItemsId,  \n" +
			"						fun_getMfgNameByPartID(partid) AS mfgName,	FUN_GETMFGPNBYID(partid) AS mfgPN,  \n" +
			"						custPNID,	qpa AS purchaseQty,	consolidatedQPA,	dnpQPA,		isInstall,  \n" +
			"                        PIDCode , serialNumber , productionPN, deviceMarking, fun_getPackageCaseNameByID(partPackageID) AS partPackage,  \n" +
			"						isGoodPart,  restrictUseWithPermissionStep, restrictUseInBOMStep, restrictUsePermanentlyStep, restrictUseInBOMWithPermissionStep,  \n" +
			"                        restrictUseExcludingAliasStep, restrictUseExcludingAliasWithPermissionStep, restrictUseInBOMExcludingAliasStep,  \n" +
			"                        restrictUseInBOMExcludingAliasWithPermissionStep,customerApproval,  \n" +
			"						FUN_GETUNITNAMEBYID(uomID) uom,		FUN_GETPARTTYPENAMEBYID(parttypeID) partTypeName,	FUN_GETMOUNTINGTYPENAMEBYID(mountingTypeID) mountingTypeName,  \n" +
			"						numOfPosition,	allocatedQty,	 c.allocatedUnit,	consumeUnits,   pKitQty AS kitQty, pMrpQty As mrpQty, pPOQty As poQty,  \n" +
			"						consumeQty,		consumePin,		allocatedPins,		scrapedPins,	notRequiredKitAllocationReason,  \n" +
			"                        (CASE  \n" +
			"								WHEN uomMismatchedStep = 0 THEN 0  \n" +
			"								ELSE (IFNULL(qpa, 0) * pKitQty)  \n" +
			"						END) AS requiredKitQty,  \n" +
			"							(CASE  \n" +
			"							WHEN  \n" +
			"								(uomMismatchedStep = 1  \n" +
			"									AND c.connecterTypeID = - 2)  \n" +
			"							THEN  \n" +
			"								((IFNULL(qpa, 0) * pKitQty) * IFNULL(numOfPosition, 0))  \n" +
			"							ELSE 0  \n" +
			"						END) AS requirePinsKitQty,  \n" +
			"                         (CASE  \n" +
			"								WHEN uomMismatchedStep = 0 THEN 0  \n" +
			"								ELSE (IFNULL(qpa, 0) * pMrpQty)  \n" +
			"						END) AS requiredMrpQty,  \n" +
			"							(CASE  \n" +
			"							WHEN  \n" +
			"								(uomMismatchedStep = 1  \n" +
			"									AND c.connecterTypeID = - 2)  \n" +
			"							THEN  \n" +
			"								((IFNULL(qpa, 0) * pMrpQty) * IFNULL(numOfPosition, 0))  \n" +
			"							ELSE 0  \n" +
			"						END) AS requirePinsMrpQty,  \n" +
			"						(CASE  \n" +
			"							WHEN custPNID IS NULL THEN NULL  \n" +
			"							ELSE FUN_GETMFGPNBYID(custPNID)  \n" +
			"						END) custPN,  \n" +
			"                        (CASE  \n" +
			"							WHEN isNotRequiredKitAllocation = 1 THEN 'Yes'  \n" +
			"							ELSE 'No'  \n" +
			"						END) AS isNotRequiredKitAllocationValue,  \n" +
			"						(CASE  \n" +
			"							WHEN  \n" +
			"								uomMismatchedStep = 0  \n" +
			"									OR isNotRequiredKitAllocation = 1  \n" +
			"							THEN  \n" +
			"								0  \n" +
			"							ELSE CASE  \n" +
			"								WHEN  \n" +
			"									c.connecterTypeID = - 2  \n" +
			"								THEN  \n" +
			"									CASE  \n" +
			"										WHEN (((IFNULL(c.qpa, 0) * pKitQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
			"										ELSE ((IFNULL(c.qpa, 0) * pKitQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin))  \n" +
			"									END  \n" +
			"								ELSE CASE  \n" +
			"									WHEN (((IFNULL(c.qpa, 0) * pKitQty) - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0  \n" +
			"									ELSE ((IFNULL(c.qpa, 0) * pKitQty) - (c.allocatedUnit + c.consumeUnits))  \n" +
			"								END  \n" +
			"							END  \n" +
			"						END) shortagePerKitQty,  \n" +
			"						(CASE  \n" +
			"							WHEN  \n" +
			"								uomMismatchedStep = 0  \n" +
			"									OR isNotRequiredKitAllocation = 1  \n" +
			"							THEN  \n" +
			"								0  \n" +
			"							ELSE CASE  \n" +
			"								WHEN  \n" +
			"									c.connecterTypeID = - 2  \n" +
			"								THEN  \n" +
			"									CASE  \n" +
			"										WHEN (((IFNULL(c.qpa, 0) * pMrpQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
			"										ELSE ((IFNULL(c.qpa, 0) * pMrpQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin))  \n" +
			"									END  \n" +
			"								ELSE CASE  \n" +
			"									WHEN (((IFNULL(c.qpa, 0) * pMrpQty) - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0  \n" +
			"									ELSE ((IFNULL(c.qpa, 0) * pMrpQty) - (c.allocatedUnit + c.consumeUnits))  \n" +
			"								END  \n" +
			"							END  \n" +
			"						END) shortageMrpQty  \n" +
			"				FROM  \n" +
			"					( SELECT      a.id, a.lineID as _lineID,		a.refSalesOrderDetId refSalesOrderDetID,	al.mfgPNID partid, b.refBOMLineID ,  \n" +
			"									a.rfqLineItemsId,		a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,  \n" +
			"									a.custPNID,		a.isNotRequiredKitAllocation,		a.notRequiredKitAllocationReason,	 a.uomMismatchedStep,  \n" +
			"									a.consolidatedMfgPNIDs mfgPart,		IFNULL(a.kitQPAWithDNP, 0) qpa,		IFNULL(a.kitQPAWithDNP, 0) consolidatedQPA,  \n" +
			"									IFNULL(a.kitDNPWithoutQPA, 0) dnpQPA,	a.uomID,	a.isInstall,	a.connecterTypeID,	 a.partType parttypeID,  \n" +
			"									a.mountingTypeID,	a.numOfPosition,  ca.partPackageID,  c.deviceMarking, c.serialNumber, c.PIDCode, c.productionPN,  \n" +
			"									c.isGoodPart, al.customerApproval,  \n" +
			"                                    al.restrictUseWithPermissionStep, al.restrictUseInBOMStep, al.restrictUsePermanentlyStep, al.restrictUseInBOMWithPermissionStep,  \n" +
			"                                    al.restrictUseExcludingAliasStep, al.restrictUseExcludingAliasWithPermissionStep, al.restrictUseInBOMExcludingAliasStep,  \n" +
			"                                    al.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
			"									IFNULL(SUM(b.allocatedQty), 0) allocatedQty,		IFNULL(SUM(b.allocatedunit), 0) allocatedUnit,	IFNULL(SUM(b.ConsumeUnits), 0) consumeUnits,  \n" +
			"									IFNULL(SUM(b.ConsumeQty), 0) consumeQty,		IFNULL(SUM(b.AllocatedPins), 0) allocatedPins,	IFNULL(SUM(b.consumePin), 0) consumePin,  \n" +
			"									IFNULL(SUM(b.scrapedPins), 0) scrapedPins  \n" +
			"						FROM    kit_allocation_consolidate_Line_detail a  \n" +
			"						INNER JOIN kit_allocation_consolidate_line_alternatepart al on al.kitConsolidateID = a.id and al.isDeleted = 0  \n" +
			"						JOIN component c ON c.id = al.mfgPNID AND c.isDeleted = 0  \n" +
			"                        JOIN component_attributes ca ON ca.refComponentID = c.id AND ca.isDeleted = 0  \n" +
			"						LEFT JOIN vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId  \n" +
			"										AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)   AND a.rfqLineItemsId = b.refBOMLineID  \n" +
			"						WHERE a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"						and a.isAssembly = 0 AND a.isDeleted = 0  \n" +
			"						GROUP BY  	a.id, a.lineID,		a.refSalesOrderDetId,	al.mfgPNID, b.refBOMLineID,  \n" +
			"									a.rfqLineItemsId,		a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,  \n" +
			"									a.custPNID,		a.isNotRequiredKitAllocation,		a.notRequiredKitAllocationReason,	 a.uomMismatchedStep,  \n" +
			"									a.consolidatedMfgPNIDs,		a.kitQPAWithDNP,		a.kitQPAWithDNP,	a.kitDNPWithoutQPA,  \n" +
			"									a.uomID,	a.isInstall,	a.connecterTypeID,	 a.partType,  \n" +
			"									a.mountingTypeID,	a.numOfPosition,  c.partPackageID,  c.deviceMarking, c.serialNumber, c.PIDCode, c.productionPN,  \n" +
			"									c.isGoodPart, al.customerApproval,  \n" +
			"                                    al.restrictUseWithPermissionStep, al.restrictUseInBOMStep, al.restrictUsePermanentlyStep, al.restrictUseInBOMWithPermissionStep,  \n" +
			"                                    al.restrictUseExcludingAliasStep, al.restrictUseExcludingAliasWithPermissionStep, al.restrictUseInBOMExcludingAliasStep,  \n" +
			"                                    al.restrictUseInBOMExcludingAliasWithPermissionStep) AS c  \n" +
			"				LEFT JOIN vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, mfgPart)  \n" +
			"				GROUP BY c.id , _lineID , refSalesOrderDetID , custPNID , isNotRequiredKitAllocation , uomMismatchedStep , qpa ,  rfqLineItemsId,  \n" +
			"						consolidatedQPA , dnpQPA , uomID , isInstall , c.connecterTypeID , parttypeID , mountingTypeID , numOfPosition ,  \n" +
			"						partPackageID,  deviceMarking, serialNumber, PIDCode, productionPN,customerApproval,  \n" +
			"						isGoodPart, restrictUseWithPermissionStep, restrictUseInBOMStep, restrictUsePermanentlyStep, restrictUseInBOMWithPermissionStep,  \n" +
			"                        restrictUseExcludingAliasStep, restrictUseExcludingAliasWithPermissionStep, restrictUseInBOMExcludingAliasStep,  \n" +
			"                        restrictUseInBOMExcludingAliasWithPermissionStep, allocatedQty , allocatedUnit , consumeUnits , consumeQty , allocatedPins , scrapedPins , c.partid  \n" +
			"				order by _lineID) AS mainQuery;  \n" +
			"    END IF;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetKitConsolidateData`;  \n" +
			"CREATE PROCEDURE `Sproc_GetKitConsolidateData`(  \n" +
			"	IN pPartId INT,  \n" +
			"	IN pIsAssyData BOOLEAN  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS leveldata;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS leveldata AS  \n" +
			"	WITH RECURSIVE cte AS  \n" +
			"	(  \n" +
			"		(  \n" +
			"			SELECT 		rl.partID,		rla.mfgPNID, 		rla.mfgPN, 		rla.mfgCodeID, 		rla.mfgCode, 		rl.id AS lineItemID, 	rla.id AS alternateID,	1 AS LEVEL, 	com.category,  \n" +
			"					rla.rfqLineItemsID, 	rl.refDesig,  \n" +
			"					IFNULL(rl.qpa,0) AS qpacount,  \n" +
			"					IFNULL(rl.dnpQty,0) dnpQty,  \n" +
			"					rl.isBuyDNPQty,  \n" +
			"					(  \n" +
			"						CASE 	WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
			"							(  \n" +
			"								CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END  \n" +
			"							)  \n" +
			"							ELSE  \n" +
			"								IFNULL(rl.qpa,0)  \n" +
			"							END  \n" +
			"					) AS qpa1,  \n" +
			"					(  \n" +
			"						CASE 	WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
			"							(  \n" +
			"								CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END  \n" +
			"							)  \n" +
			"							ELSE  \n" +
			"								IFNULL(rl.dnpQty,0)  \n" +
			"							END  \n" +
			"					) AS dnpQPA1,  \n" +
			"					IFNULL(rl.refDesigCount,0) refDesigCount, 	IFNULL(rl.dnpDesigCount,0) dnpDesigCount,  \n" +
			"					rl.qpaDesignatorStep,  \n" +
			"					IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep,  \n" +
			"					IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,  \n" +
			"					IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
			"					IFNULL(rla.restrictuseinbomstep,0) restrictuseinbomstep,  \n" +
			"					IFNULL(rla.restrictuseinbomwithpermissionstep,0) restrictuseinbomwithpermissionstep,  \n" +
			"					IFNULL(rla.restrictusepermanentlystep,1) restrictusepermanentlystep,  \n" +
			"					IFNULL(rla.restrictusewithpermissionstep,1) restrictusewithpermissionstep,  \n" +
			"					rl.isInstall, 		rl.isPurchase, rl.lineID,		rl.numOfPosition,	rl.uomID,		comp.PIDCode,  \n" +
			"					rl.partId AS rfqAssyID, 	rl.isNotRequiredKitAllocation  \n" +
			"			FROM 		rfq_lineitems_alternatepart rla  \n" +
			"			JOIN 		rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isdeleted = 0  \n" +
			"			INNER JOIN 	component com ON com.id = rla.mfgPNID  AND com.isdeleted = 0  \n" +
			"			INNER JOIN 	component comp ON comp.id = rl.partID  AND comp.isdeleted = 0  \n" +
			"			WHERE 		rl.partId = pPartId AND rla.isdeleted = 0  \n" +
			"		)  \n" +
			"		UNION ALL  \n" +
			"		(  \n" +
			"			SELECT 		rl.partID,	rla.mfgPNID, 		rla.mfgPN, 		rla.mfgCodeID, 		rla.mfgCode, 	rl.id AS lineItemID,	rla.id AS alternateID,	cte.level+1 AS LEVEL,  \n" +
			"					com.category, 	rla.rfqLineItemsID,  	rl.refDesig,  \n" +
			"					(  \n" +
			"						(  \n" +
			"							CASE 	WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
			"								(  \n" +
			"									cte.dnpQPA1 + cte.qpa1  \n" +
			"								)  \n" +
			"								WHEN cte.isPurchase = 1 AND cte.isBuyDNPQty != 'Y' THEN  \n" +
			"								(  \n" +
			"									cte.qpa1  \n" +
			"								)  \n" +
			"								WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
			"								(  \n" +
			"									cte.dnpQPA1 + cte.dnpQPA1  \n" +
			"								)  \n" +
			"							END  \n" +
			"						) * IFNULL(rl.qpa,0)  \n" +
			"					) AS qpacount,  \n" +
			"					(  \n" +
			"						(  \n" +
			"							CASE 	WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
			"								(  \n" +
			"									cte.dnpQPA1 + cte.qpa1  \n" +
			"								)  \n" +
			"								WHEN cte.isPurchase = 1 AND cte.isBuyDNPQty != 'Y' THEN  \n" +
			"								(  \n" +
			"									cte.qpa1  \n" +
			"								)  \n" +
			"								WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'Y') THEN  \n" +
			"								(  \n" +
			"									cte.dnpQPA1 + cte.qpa1  \n" +
			"								)  \n" +
			"							END  \n" +
			"						) * IFNULL(rl.dnpQty,0)  \n" +
			"					) AS dnpQty,  \n" +
			"					rl.isBuyDNPQty,  \n" +
			"					(  \n" +
			"						(  \n" +
			"							CASE 	WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
			"								(  \n" +
			"									cte.dnpQPA1 + cte.qpa1  \n" +
			"								)  \n" +
			"								WHEN cte.isPurchase = 1 AND cte.isBuyDNPQty != 'Y' THEN  \n" +
			"								(  \n" +
			"									cte.qpa1  \n" +
			"								)  \n" +
			"								WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
			"								(  \n" +
			"									cte.dnpQPA1 + cte.qpa1  \n" +
			"								)  \n" +
			"							END  \n" +
			"						)*  \n" +
			"						(  \n" +
			"							CASE 	WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
			"								(  \n" +
			"									CASE 	WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END  \n" +
			"								)  \n" +
			"								ELSE IFNULL(rl.qpa,0)  \n" +
			"							END  \n" +
			"						)  \n" +
			"					) AS qpa1,  \n" +
			"					(  \n" +
			"						(  \n" +
			"							CASE 	WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
			"								(  \n" +
			"									cte.dnpQPA1 + cte.qpa1  \n" +
			"								)  \n" +
			"								WHEN cte.isPurchase = 1 AND cte.isBuyDNPQty != 'Y' THEN  \n" +
			"								(  \n" +
			"									cte.qpa1  \n" +
			"								)  \n" +
			"								WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
			"								(  \n" +
			"									cte.dnpQPA1 + cte.qpa1  \n" +
			"								)  \n" +
			"							END  \n" +
			"						)*  \n" +
			"						(  \n" +
			"							CASE 	WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
			"								(  \n" +
			"									CASE 	WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END  \n" +
			"								)  \n" +
			"								ELSE  \n" +
			"									IFNULL(rl.dnpQty,0)  \n" +
			"							END  \n" +
			"						)  \n" +
			"					) AS dnpQPA1,  \n" +
			"					(  \n" +
			"						(  \n" +
			"							CASE 	WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
			"								(  \n" +
			"									cte.dnpQPA1 + cte.qpa1  \n" +
			"								)  \n" +
			"								WHEN cte.isPurchase = 1 AND cte.isBuyDNPQty != 'Y' THEN  \n" +
			"								(  \n" +
			"									cte.qpa1  \n" +
			"								)  \n" +
			"								WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
			"								(  \n" +
			"									cte.dnpQPA1 + cte.qpa1  \n" +
			"								)  \n" +
			"							END  \n" +
			"						) * IFNULL(rl.refDesigCount,0)  \n" +
			"					) AS refDesigCount,  \n" +
			"					(  \n" +
			"						(  \n" +
			"							CASE 	WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'C') THEN  \n" +
			"								(  \n" +
			"									cte.dnpQPA1 + cte.qpa1  \n" +
			"								)  \n" +
			"								WHEN cte.isPurchase = 1 AND cte.isBuyDNPQty != 'Y' THEN  \n" +
			"								(  \n" +
			"									cte.qpa1  \n" +
			"								)  \n" +
			"								WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'Y') THEN  \n" +
			"								(  \n" +
			"									cte.dnpQPA1 + cte.qpa1  \n" +
			"								)  \n" +
			"  \n" +
			"							END  \n" +
			"						) * IFNULL(rl.dnpDesigCount,0)  \n" +
			"					) AS dnpDesigCount,  \n" +
			"					(  \n" +
			"						CASE WHEN rl.qpaDesignatorStep != cte.qpaDesignatorStep THEN 0 ELSE rl.qpaDesignatorStep END  \n" +
			"					) AS qpaDesignatorStep,  \n" +
			"					IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep,  \n" +
			"					IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,  \n" +
			"					IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
			"					#concat(rla.mfgcodeid,' | ', rla.mfgpnid,' | ',ifnull(rla.restrictuseinbomstep,0),' | ',ifnull(rla.restrictuseinbomwithpermissionstep,0),' | ',ifnull(rla.restrictusepermanentlystep,1),' | ',ifnull(rla.restrictusewithpermissionstep,1)) AS part,  \n" +
			"					IFNULL(rla.restrictuseinbomstep,0) restrictuseinbomstep,  \n" +
			"					IFNULL(rla.restrictuseinbomwithpermissionstep,0) restrictuseinbomwithpermissionstep,  \n" +
			"					IFNULL(rla.restrictusepermanentlystep,1) restrictusepermanentlystep,  \n" +
			"					IFNULL(rla.restrictusewithpermissionstep,1) restrictusewithpermissionst,  \n" +
			"					rl.isInstall, 		rl.isPurchase,		rl.lineID,		rl.numOfPosition,	rl.uomID,		comp.PIDCode,  \n" +
			"					pPartId AS rfqAssyID,	rl.isNotRequiredKitAllocation  \n" +
			"			FROM 		rfq_lineitems_alternatepart rla  \n" +
			"			JOIN 		rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
			"			INNER JOIN 	component com ON com.id = rla.mfgPNID AND com.isDeleted = 0  \n" +
			"			INNER JOIN 	component comp ON comp.id = rl.partID AND comp.isDeleted = 0  \n" +
			"			JOIN 		cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID AND (cte.ispurchase = 1 OR cte.isbuydnpqty IN('Y','C','P'))  \n" +
			"			WHERE 		rla.isdeleted = 0  \n" +
			"		)  \n" +
			"	)  \n" +
			"  \n" +
			"	SELECT cte.* FROM cte  \n" +
			"	WHERE 	(  \n" +
			"			CASE 	WHEN pIsAssyData = TRUE THEN  \n" +
			"					cte.category = 3  \n" +
			"				WHEN pIsAssyData = FALSE THEN  \n" +
			"					cte.category != 3  \n" +
			"				ELSE  \n" +
			"					cte.category = cte.category  \n" +
			"			END  \n" +
			"		)  \n" +
			"	ORDER BY lineItemID;  \n" +
			"  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_GetKitConsolidateData;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_GetKitConsolidateData AS  \n" +
			"	SELECT  	GROUP_CONCAT(partlineID) AS consolidatedpartlineID, 		COUNT(b.rfqLineItemsID) AS multiple, 	GROUP_CONCAT(b.refDesig) AS consolidatedrefDesig,  \n" +
			"			GROUP_CONCAT(b.rfqLineItemsID) AS consolidatedLineItemIDs,	SUM(qpawithDNP) qpa,	SUM(qpa2) qpaWithoutDNP,	SUM(dnpQPA2) dnpWithoutQPA,  \n" +
			"			(  \n" +
			"				CASE WHEN MAX(isqpaMismatchflag) OR MAX(isdnpQPAMismatchflag) THEN 1 ELSE 0 END  \n" +
			"			) isqpaMismatch,  \n" +
			"			b.*  \n" +
			"	FROM  \n" +
			"	(  \n" +
			"		SELECT 		part AS part1,  \n" +
			"				(  \n" +
			"					CASE WHEN isPurchase = 1 OR isInstall = 1 THEN  \n" +
			"						(  \n" +
			"							qpa2 + IF(isBuyDNPQty = 'Y' OR isBuyDNPQty = 'C', dnpQPA2, 0)  \n" +
			"						)  \n" +
			"						ELSE  \n" +
			"						(  \n" +
			"							IF(isBuyDNPQty = 'Y' OR isBuyDNPQty = 'C', dnpQPA2, 0)  \n" +
			"						)  \n" +
			"					END  \n" +
			"				) qpawithDNP,  \n" +
			"				a.*  \n" +
			"		FROM 		(  \n" +
			"					SELECT  	CONCAT('{ Level:',a.level,' | Part:', a.PIDCode,' | Item:',TRIM(a.lineID)+0,' | QPA:',TRIM(SUM(a.qpacount))+0,' | DNP QPA:',TRIM(SUM(a.dnpQty))+0,' | Buy DNP QPA:',(CASE WHEN a.isBuyDNPQty = 'Y' THEN 'YES' WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned' ELSE 'NO' END),' | RefDes Count:',TRIM(SUM(a.refDesigCount))+0,' | Buy QPA:',a.isPurchase,' | DNP RefDes Count:',TRIM(SUM(a.dnpDesigCount))+0,' |POPULATE:',a.isinstall,'}') AS partlineID,  \n" +
			"							(  \n" +
			"								CASE 	WHEN a.qpaDesignatorStep = 0 AND a.uomID = -1 THEN  \n" +
			"									(  \n" +
			"										CASE WHEN a.qpacount != IFNULL(a.refDesigCount,0) THEN 1 ELSE 0 END  \n" +
			"									)  \n" +
			"									ELSE  \n" +
			"										0  \n" +
			"								END  \n" +
			"							) isqpaMismatchflag,  \n" +
			"							(  \n" +
			"								CASE 	WHEN a.qpaDesignatorStep = 0 AND a.uomID = -1 THEN  \n" +
			"									(  \n" +
			"										CASE WHEN a.dnpQty != IFNULL(a.dnpDesigCount,0) THEN 1 ELSE 0 END  \n" +
			"									)  \n" +
			"									ELSE  \n" +
			"										0  \n" +
			"								END  \n" +
			"							) isdnpQPAMismatchflag,  \n" +
			"							SUM(QPACount) QPACount1, 	SUM(dnpQty) DNPQPACount1, 	SUM(qpa1) qpa2, 	SUM(dnpQPA1) dnpQPA2, 	SUM(refDesigCount) refDesigCount1, 		SUM(dnpDesigCount) dnpDesigCount1, 	MIN(a.qpaDesignatorStep) qpaDesignatorStep1,  \n" +
			"							(  \n" +
			"								CASE 	WHEN isBuyDNPQty = 'Y' OR isBuyDNPQty = 'C' OR isPurchase = 1 THEN  \n" +
			"										1  \n" +
			"									ELSE  \n" +
			"										0  \n" +
			"								END  \n" +
			"							) isPurchaseWithDNP,  \n" +
			"							a.*  \n" +
			"					FROM  \n" +
			"					(  \n" +
			"						SELECT *,  \n" +
			"						(  \n" +
			"							SELECT  	GROUP_CONCAT(CONCAT(a.mfgcodeid,' | ', a.mfgpnid,' | ',IFNULL(a.restrictuseinbomstep,0),' | ',IFNULL(a.restrictuseinbomwithpermissionstep,0),' | ',IFNULL(a.restrictusepermanentlystep,1),' | ',IFNULL(a.restrictusewithpermissionstep,1)) ORDER BY mfgpnid) AS mfgpn  \n" +
			"							FROM     	(  \n" +
			"										SELECT 	DISTINCT IFNULL(d.id,c.id) mfgpnid, IFNULL(d.mfgcodeid, c.mfgcodeid) mfgcodeid, /*rla.mfgpnid,	rla.mfgcodeid,*/  \n" +
			"											IFNULL(rla.restrictuseinbomstep,0) restrictuseinbomstep,  \n" +
			"											IFNULL(rla.restrictuseinbomwithpermissionstep,0) restrictuseinbomwithpermissionstep,  \n" +
			"											IFNULL(rla.restrictusepermanentlystep,1) restrictusepermanentlystep,  \n" +
			"											IFNULL(rla.restrictusewithpermissionstep,1) restrictusewithpermissionstep  \n" +
			"										FROM  	rfq_lineitems_alternatepart rla  \n" +
			"										JOIN vu_component_mpn c ON rla.mfgpnid = c.id  \n" +
			"										LEFT JOIN vu_component_mpn d ON c.packagingGroupid = d.packagingGroupid  \n" +
			"                                        WHERE   rla.rfqlineitemsid = ld.rfqlineitemsid AND rla.isdeleted=0  \n" +
			"										)a  \n" +
			"									) AS part  \n" +
			"						FROM   leveldata ld  \n" +
			"					) a  \n" +
			"					WHERE 		(  \n" +
			"								CASE  \n" +
			"									WHEN pIsAssyData = TRUE THEN  \n" +
			"										a.category = 3  \n" +
			"									WHEN pIsAssyData = FALSE THEN  \n" +
			"										a.category != 3  \n" +
			"									ELSE  \n" +
			"										a.category = a.category  \n" +
			"								END  \n" +
			"							)  \n" +
			"					GROUP BY 	a.rfqLineItemsID, a.Level, a.PIDCode, a.LineID, a.uomID, part, alternateid, a.isBuyDNPQty ,a.isPurchase,a.isinstall,  \n" +
			"                    a.qpaDesignatorStep, a.uomID, a.refDesigCount, a.dnpQty, a.dnpDesigCount, a.qpacount, a.partID, a.mfgPNID, a.mfgPN, a.mfgCodeID,  \n" +
			"                    a.mfgCode, a.lineItemID, a.alternateID,  a.category, a.rfqLineItemsID, a.refDesig,	a.restrictCPNUseInBOMStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseWithPermissionStep,  \n" +
			"					a.restrictuseinbomstep, a.restrictuseinbomwithpermissionstep, a.restrictusepermanentlystep, a.qpa1, a.dnpQPA1,  \n" +
			"					a.restrictusewithpermissionstep, a.isInstall, a.isPurchase, a.lineID, a.numOfPosition,	a.uomID, a.PIDCode,  \n" +
			"					a.rfqAssyID, 	a.isNotRequiredKitAllocation  \n" +
			"					ORDER BY 	part  \n" +
			"				) a  \n" +
			"		# GROUP BY 	rfqLineItemsID, `LEVEL` Commented by CP: 22-03-2022  \n" +
			"	)b  \n" +
			"	GROUP BY  part1, qpawithDNP, partlineID, isqpaMismatchflag, isdnpQPAMismatchflag, QPACount1, DNPQPACount1, qpa2, dnpQPA2,  \n" +
			"    refDesigCount1, dnpDesigCount1, qpaDesignatorStep1, isPurchaseWithDNP, partID, mfgPNID, mfgPN, mfgCodeID, mfgCode, lineItemID,  \n" +
			"    alternateID, LEVEL, category, rfqLineItemsID, refDesig, qpacount, dnpQty, isBuyDNPQty, qpa1, dnpQPA1, refDesigCount,  \n" +
			"    dnpDesigCount, qpaDesignatorStep, restrictCPNUseInBOMStep, restrictCPNUsePermanentlyStep, restrictCPNUseWithPermissionStep,  \n" +
			"    restrictuseinbomstep, restrictuseinbomwithpermissionstep, restrictusepermanentlystep, restrictusewithpermissionstep, isInstall,  \n" +
			"    isPurchase, lineID, numOfPosition, uomID, PIDCode, rfqAssyID, isNotRequiredKitAllocation, part;  \n" +
			"  \n" +
			"	-- select * from Results;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetKitFeasibility`;  \n" +
			"CREATE PROCEDURE `Sproc_GetKitFeasibility`(  \n" +
			"	pRefSalesOrderDetID INT,  \n" +
			"	pAssyID INT,  \n" +
			"	pIsConsolidated TINYINT,  \n" +
			"	pInputQty DECIMAL(18,8)  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE vKitQty DECIMAL(18,8);  \n" +
			"	DECLARE vCustomerId INT;  \n" +
			"  \n" +
			"	SELECT kitQty INTO vKitQty FROM salesorderdet WHERE id = pRefSalesOrderDetID;  \n" +
			"	SELECT 		customerID  \n" +
			"	INTO		vCustomerId  \n" +
			"	FROM 		salesorderdet sd  \n" +
			"	INNER JOIN 	salesordermst s ON s.id = sd.refSalesOrderID  \n" +
			"	WHERE 		sd.id = pRefSalesOrderDetID;  \n" +
			"  \n" +
			"	IF(pIsConsolidated = 1) THEN  \n" +
			"		/* Get consolidated parts detail from consolidated table */  \n" +
			"		DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
			"		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
			"		SELECT 		k.id, 			k.refsalesORderDetid,		k.consolidatedLineItemIDs,  \n" +
			"				k.mountingTypeID, 	k.connecterTypeID,		k.consolidatedMfgPNIDs,  \n" +
			"				k.numOfPosition, 	k.kitQPAWithDNP,		k.uomMismatchedStep,  \n" +
			"				k.isNotRequiredKitAllocation,				k.uomID,  \n" +
			"				k.custPNID  \n" +
			"		FROM 	kit_allocation_consolidate_Line_detail k  \n" +
			"		WHERE 	k.refSalesOrderDetID = pRefSalesOrderDetID AND k.isAssembly = 0 AND k.isDeleted = 0;  \n" +
			"	ELSE  \n" +
			"		/* Get assembly parts detail from kit_allocation_lineitems and kit_allocation_lineitems_alternatepart table */  \n" +
			"		DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
			"		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
			"		SELECT 	k.id,					kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
			"			kl.mountingTypeID, 			kl.connecterTypeID, 		kl.consolidatedMfgPNIDs, 		k.numOfPosition,  \n" +
			"			(  \n" +
			"				CASE  \n" +
			"					WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
			"						(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
			"					ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
			"				END  \n" +
			"			) AS kitQPAWithDNP,  \n" +
			"			kl.uomMismatchedStep,  \n" +
			"			k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
			"		FROM 	(  \n" +
			"				SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
			"						(  \n" +
			"							CASE 	WHEN MIN(ca.mountingTypeID) = MAX(ca.mountingTypeID) /* Matched Mounting Type */  \n" +
			"									THEN  MIN(ca.mountingTypeID)  \n" +
			"								WHEN MIN(ca.mountingTypeID) !=  MAX(ca.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
			"									THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN ca.mountingTypeID ELSE NULL END))  \n" +
			"								ELSE  -1  \n" +
			"							END  \n" +
			"						) mountingTypeID,  \n" +
			"						IFNULL(MAX(ca.connecterTypeID), -1) connecterTypeID,  \n" +
			"						GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
			"						MIN(kal.uomMismatchedStep) uomMismatchedStep    /* Zero indicate to part value does not match with BOM UOM */  \n" +
			"				FROM kit_allocation_lineitems_alternatepart kal  \n" +
			"                JOIN vu_component_mpn c ON kal.mfgPNID = c.id  \n" +
			"				LEFT JOIN vu_component_mpn cp ON cp.packagingGroupid = c.packagingGroupid  \n" +
			"				WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
			"							AND 	kal.partID =  pAssyID  \n" +
			"							AND 	kal.isDeleted = 0  \n" +
			"				GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
			"		) AS kl  \n" +
			"		INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	/* Get available and allocated stock for selected assembly*/  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Stock_Det;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Stock_Det AS  \n" +
			"	SELECT  	r.consolidatedMfgPNIDs, 	r.id,  \n" +
			"			IFNULL(ks.allocatedUnit, 0) allocatedunit,  \n" +
			"			IFNULL(ks.allocatedPins,0) allocatedPin,  \n" +
			"			IFNULL(ks.consumeUnits, 0) consumeUnits,  \n" +
			"			IFNULL(ks.consumePin,0) consumePin,  \n" +
			"			SUM(IFNULL(fun_convertUOM(v.uom, IFNULL(ks.allocatedUOM, r.uomID), IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)),0)) availableStock,  \n" +
			"			SUM((FLOOR(IFNULL(v.noOfPosition, 0)/IFNULL(r.numOfPosition, 0)) * IFNULL(r.numOfPosition, 0)) * IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)) availableStockInPin  \n" +
			"	FROM 		temp_Kit_Consolidate_Detail r  \n" +
			"	LEFT JOIN 	vu_kit_allocation_summary ks ON r.refsalesORderDetid = ks.refsalesOrderDetId  \n" +
			"					AND ks.assyID = (CASE WHEN pIsConsolidated = 1 THEN ks.assyID ELSE pAssyID END)  \n" +
			"					AND FIND_IN_SET(ks.refBOMLineID, r.consolidatedLineItemIDs)  \n" +
			"	LEFT JOIN 	vu_deducted_allocation_available_Stock v ON FIND_IN_SET(v.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",consolidatedMfgPNIDs) ELSE consolidatedMfgPNIDs END))  \n" +
			"	WHERE 		r.isNotRequiredKitAllocation != 1  \n" +
			"	GROUP BY 	r.consolidatedMfgPNIDs, r.id, ks.allocatedUnit,	ks.allocatedPins, ks.consumeUnits, ks.consumePin, ks.allocatedUOM, r.uomID, v.uom, v.customerConsign, v.customerID, v.availableStock, r.numOfPosition;  \n" +
			"  \n" +
			"	/* Create temporary table to get avilable and allocated stock against each line with shortage*/  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempFeasibilityDetail;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempFeasibilityDetail AS  \n" +
			"	SELECT 		r.kitQPAWithDNP qpa,  \n" +
			"			t.allocatedUnit,		t.allocatedPin,  \n" +
			"			t.consumeUnits,			t.consumePin,  \n" +
			"			t.availableStock,		t.availableStockInPin,  \n" +
			"			r.mountingTypeID,   		(CASE WHEN r.connecterTypeID = -2 THEN r.connecterTypeID ELSE NULL END) connecterTypeID,  \n" +
			"			(  \n" +
			"				CASE  \n" +
			"					WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
			"						(t.allocatedUnit/r.kitQPAWithDNP)  \n" +
			"					ELSE (IFNULL(t.allocatedPin, 0) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
			"				END  \n" +
			"			) feasibilityWithAllocation,  \n" +
			"			(  \n" +
			"				CASE  \n" +
			"					WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
			"						((t.availableStock + t.allocatedUnit + t.consumeUnits)/r.kitQPAWithDNP)  \n" +
			"					ELSE ((IFNULL(t.availableStockInPin, 0) + IFNULL(t.allocatedPin, 0) + IFNULL(t.consumePin, 0)) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
			"				END  \n" +
			"			) feasibilityWithAvailableAndAllocatedStock,  \n" +
			"			(CASE  \n" +
			"				WHEN r.uomMismatchedStep = 0 THEN 0  \n" +
			"				ELSE  \n" +
			"					CASE  \n" +
			"						WHEN r.connecterTypeID = -2 THEN  \n" +
			"							(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * vKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0)) < 0)  \n" +
			"									THEN 0  \n" +
			"									ELSE ((IFNULL(r.kitQPAWithDNP, 0) * vKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0))  \n" +
			"							END)  \n" +
			"						ELSE  \n" +
			"							(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * vKitQty) - IFNULL(t.allocatedUnit, 0)) < 0)  \n" +
			"									THEN 0  \n" +
			"									ELSE ((IFNULL(r.kitQPAWithDNP, 0) * vKitQty) - IFNULL(t.allocatedUnit, 0))  \n" +
			"							END)  \n" +
			"					END  \n" +
			"			END) shortagePerBuild  \n" +
			"	FROM 		temp_Kit_Consolidate_Detail r  \n" +
			"	INNER JOIN 	temp_Kit_Stock_Det t ON r.id = t.id;  \n" +
			"  \n" +
			"	SELECT 		mountingTypeID,							fun_getMountingTypeNameByID(mountingTypeID) mountingType,  \n" +
			"			connecterTypeID, 						(CASE WHEN connecterTypeID IS NOT NULL THEN fun_getConnectorTypeNameByID(connecterTypeID) ELSE NULL END) connecterType,  \n" +
			"			MIN(feasibilityWithAllocation) feasibilityWithAllocation,	SUM(Shortage) shortageLine,  \n" +
			"			MIN(feasibilityWithAvailableAndAllocatedStock) feasibilityWithAvailableAndAllocatedStock,  \n" +
			"			SUM(ShortageWithAvailableQty) shortageWithAvailableQty,     	SUM(shortageForInputQty) shortageForInputQty,  \n" +
			"			0 releasedQty,		vKitQty pendingQty,			0 releasePercentage,		COUNT(1) totalLine  \n" +
			"	FROM    	(  \n" +
			"				SELECT 	mountingTypeID, 		connecterTypeID, 		availableStock,  \n" +
			"					IFNULL(feasibilityWithAllocation, 0) feasibilityWithAllocation,  \n" +
			"					CASE WHEN (shortagePerBuild > 0) THEN 1 ELSE 0 END Shortage,  \n" +
			"					CAST(IFNULL(feasibilityWithAvailableAndAllocatedStock, 0) AS DECIMAL(18,5)) feasibilityWithAvailableAndAllocatedStock,  \n" +
			"					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < vKitQty) THEN 1 ELSE 0 END ShortageWithAvailableQty,  \n" +
			"					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < pInputQty) THEN 1 ELSE 0 END shortageForInputQty  \n" +
			"				FROM 	tempFeasibilityDetail t  \n" +
			"			) AS feasibilityDet  \n" +
			"	GROUP BY 	mountingTypeID, connecterTypeID  \n" +
			"	ORDER BY 	mountingType;  \n" +
			"  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetKitList`;  \n" +
			"CREATE PROCEDURE `Sproc_GetKitList`(  \n" +
			"	IN ppageIndex INT,  \n" +
			"	IN precordPerPage INT,  \n" +
			"	IN pOrderBy VARCHAR(255),  \n" +
			"	IN pWhereClause VARCHAR(16383),  \n" +
			"	IN pIsSubAssembly TINYINT,  \n" +
			"	IN pPlannedStatus VARCHAR(10),  \n" +
			"	IN pSalesOrderDetailId INT,  \n" +
			"	IN pIsPendingWOCreationList TINYINT,  \n" +
			"	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
			"	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
			"	IN pfilterStatus VARCHAR(100),  \n" +
			"	IN pcustomerIds VARCHAR(16000),  \n" +
			"	IN pshippingMethodId VARCHAR(16000),  \n" +
			"	IN ptermsIds VARCHAR(16000),  \n" +
			"	IN psearchposotext VARCHAR(1000),  \n" +
			"	IN psearchposotype VARCHAR(10),  \n" +
			"	IN pfromDate DATE,  \n" +
			"	IN ptoDate DATE,  \n" +
			"	IN prushJob TINYINT,  \n" +
			"	IN ppartIds VARCHAR(16000),  \n" +
			"	IN pworkorders VARCHAR(16000),  \n" +
			"	IN pkitreturnStatus VARCHAR(100),  \n" +
			"	IN pkitReleaseStatus VARCHAR(100),  \n" +
			"    IN pfilterPOStatus VARCHAR(20) ,  \n" +
			"	IN pfromPODate DATE,  \n" +
			"	IN ptoPODate DATE,  \n" +
			"    IN pSubAssemblyTab TINYINT  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE pOffset INT;  \n" +
			"	DECLARE rowNumWhere VARCHAR(255);  \n" +
			"	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
			"	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
			"	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
			"	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
			"	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
			"	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
			"    DECLARE vTimeZone VARCHAR(50);  \n" +
			"	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
			"    DECLARE vMfgCodeFormat INT;  \n" +
			"  \n" +
			"    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
			"	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
			"    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
			"	SET v_PendingWOWhereClause='';  \n" +
			"  \n" +
			"	SET v_DynamicColumns = CONCAT(\",  \n" +
			"			hu.refType as refTypeKR,  \n" +
			"			hu.status as haltStatusKR,  \n" +
			"			(  \n" +
			"				CASE  \n" +
			"					WHEN hu.status = 'H' THEN  \n" +
			"						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
			"					ELSE ''  \n" +
			"				END  \n" +
			"			) AS reasonKR,  \n" +
			"			hutt.refType as refTypePO,  \n" +
			"			hutt.status as haltStatusPO,  \n" +
			"			(  \n" +
			"				CASE  \n" +
			"					WHEN hutt.status = 'H' THEN  \n" +
			"						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
			"					ELSE ''  \n" +
			"				END  \n" +
			"			) AS reasonPO,  \n" +
			"            (CASE WHEN kaad.bomAssyLevel = 0 THEN kaad.bomInternalVersionString ELSE 'N/A' END) AS kitAllocationInternalVersion,  \n" +
			"            kaad.bomAssyLevel  \n" +
			"		\");  \n" +
			"  \n" +
			"	SET v_DynamicJoin = CONCAT(\"  \n" +
			"			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
			"			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
			"            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND kaad.isDeleted = 0\") ;  \n" +
			"  \n" +
			"	IF(pIsPendingWOCreationList = 1) THEN  \n" +
			"		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
			"		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
			"		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
			"				SELECT 	co.PIDCODE AS PIDCode,  \n" +
			"						co.mfgPN AS mfgPN,  \n" +
			"						co.nickname AS nickName,  \n" +
			"						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
			"						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
			"						vusalesorderdet.poNumber,  \n" +
			"						vusalesorderdet.salesOrderNumber  \n" +
			"				FROM 		workorder wod  \n" +
			"				LEFT JOIN 	component co ON wod.partID = co.id AND co.isdeleted = 0 AND co.category = 3  \n" +
			"				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
			"				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
			"			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
			"		\");  \n" +
			"	END IF;  \n" +
			"    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
			"		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
			"								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
			"        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
			"									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
			"		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
			"        IF pOrderBy IS NULL THEN  \n" +
			"			SET pOrderBy = ' promisedShipDate asc ';  \n" +
			"        END IF;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	SET @temp_Sproc_GetKitList = CONCAT(\"  \n" +
			"		SELECT  t.*,  \n" +
			"				fun_getKitReleaseIndication(releaseDayDiffwithCurrentDate, shortagePer, isKitPlanningRequired) AS kitReleaseIndication,  \n" +
			"                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
			"                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
			"		FROM  \n" +
			"			(SELECT  a.*,  \n" +
			"					(CASE WHEN assyID = partID THEN 0 ELSE 1 END) AS isSubAssembly,  \n" +
			"					(  \n" +
			"					CASE  \n" +
			"						WHEN ((IFNULL(kitReleasePlanCount, 0) = 0) OR (IFNULL(kitReleasePlanCount, 0) > 0 AND (IFNULL(totalPOQty, 0) <> assyPOQty OR IFNULL(totalKitQty, 0) <> assyKitQty))) THEN  \n" +
			"							TRUE  \n" +
			"						ELSE  \n" +
			"							FALSE  \n" +
			"					END  \n" +
			"					) as isKitPlanningRequired,  \n" +
			"					(  \n" +
			"						CASE  \n" +
			"							WHEN ifnull(kitReleasePlanCount, 0) = 0 THEN  \n" +
			"								'Unplanned'  \n" +
			"							WHEN ifnull(kitReleasePlanCount, 0) > 0  AND  (IFNULL(totalPOQty, 0) <> assyPOQty OR IFNULL(totalKitQty, 0) <> assyKitQty) THEN  \n" +
			"								'Partially Planned'  \n" +
			"							WHEN ifnull(kitReleasePlanCount, 0) > 0 AND  IFNULL(totalPOQty, 0) = assyPOQty AND IFNULL(totalKitQty, 0) = assyKitQty THEN  \n" +
			"								'Fully Planned'  \n" +
			"							ELSE  \n" +
			"								NULL  \n" +
			"						END  \n" +
			"					) as kitPlanStatus,  \n" +
			"					fun_getKitReleaseStatus(subKitStatusPercentage,totalKitQty,totalPOQty,assyKitQty,assyPOQty,releasedPlanCount,pendingCount) AS  kitReleaseStatus,  \n" +
			"					fun_getKitReturnStatus(pendingReleaseCount,releasedNotReturnedCount,returnedCount,readyToReturnCount,shortageReturnCount) AS kitReturnStatus  \n" +
			"			FROM  \n" +
			"				(SELECT  \n" +
			"					`vuss`.`Sales Order ID` AS id,  \n" +
			"					`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
			"					`vuss`.`PartID` AS assyID,  \n" +
			"					kaad.partId AS partID,  \n" +
			"					`vuss`.`Status` AS completedStatus,  \n" +
			"					(  \n" +
			"						CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
			"								'Draft'  \n" +
			"							WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
			"								'Published'  \n" +
			"							ELSE  \n" +
			"								''  \n" +
			"						END  \n" +
			"					) AS `statusConvertedValue`,  \n" +
			"					ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
			"					ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
			"					ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
			"					td.releasedPlanCount,  \n" +
			"					td.pendingCount,  \n" +
			"					vrr.pendingReleaseCount,  \n" +
			"					vrr.releasedNotReturnedCount,  \n" +
			"					vrr.returnedCount,  \n" +
			"					vrr.readyToReturnCount,  \n" +
			"					vrr.shortageReturnCount,  \n" +
			"					CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
			"					td.nextReleaseDate,  \n" +
			"					`vuss`.`So Date` AS soDate,  \n" +
			"					`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
			"					`vuss`.`Revision` AS revision,  \n" +
			"					`vuss`.`Po Number` AS poNumber,  \n" +
			"					`vuss`.`Po Date` AS poDate,  \n" +
			"					`vuss`.`Assy ID` AS PIDCode,  \n" +
			"					`vuss`.`Assy Name` AS mfgPN,  \n" +
			"					ro.rohsIcon,  \n" +
			"					ro.name AS `rohsComplientConvertedValue`,  \n" +
			"					`vuss`.`isCustomPart` AS isCustomPart,  \n" +
			"					`vuss`.`custAssyPN` AS custAssyPN,  \n" +
			"					`vuss`.`liveVersion` AS liveVersion,  \n" +
			"					`vuss`.`releasedWorkorder` AS releasedWorkorder,  \n" +
			"					`vuss`.`NickName` AS nickName,  \n" +
			"					`vuss`.`partDescription` AS partDescription,  \n" +
			"					`vuss`.`PO Qty` AS qty,  \n" +
			"					`vuss`.`mrpQty` AS mrpQty,  \n" +
			"					`vuss`.`kitQty` AS kitQty,  \n" +
			"					(CASE  WHEN (`vuss`.`isHotJob` = 0) THEN  'No'  \n" +
			"						   WHEN (`vuss`.`isHotJob` = 1) THEN  'Yes'  \n" +
			"						   ELSE  ''  END  \n" +
			"					) AS `isHotJobValue`,  \n" +
			"					`vuss`.`isHotJob`,  \n" +
			"					`vuss`.`price` AS price,`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
			"					`vuss`.`materialDueDate` AS materialDueDate,  \n" +
			"					`vuss`.`remark` AS remark,  \n" +
			"					`vuss`.`cancleReason` AS cancleReason,  \n" +
			"					`vuss`.`Customer ID` AS customerID,  \n" +
			"					fun_GetFormattedMfgCode(vuss.mfgCode, vuss.mfgName,\", vMfgCodeFormat ,\") AS companyName,  \n" +
			"					`vuss`.`Full Name` AS fullName,  \n" +
			"					`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
			"					`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
			"					`vuss`.`Shipping Comment` AS shippingComment,  \n" +
			"					`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
			"					`vuss`.`shippingQty` AS shippingQty,  \n" +
			"					ifnull(td.totalPlan, 0) kitReleasePlanCount,  \n" +
			"					`vuss`.`kitNumber` AS kitNumber,  \n" +
			"					 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
			"					 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
			"					`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
			"					`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
			"					`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
			"					`vuss`.`createdbyRole` AS createdbyRole,  \n" +
			"					case when vuss.refSODetID is not null then sa.salesAssy else '' end  AS salesAssy,  \n" +
			"					`vuss`.`Sales Order Status` AS `status`,  \n" +
			"					`vuss`.`Terms ID` AS termsID,  \n" +
			"					`vuss`.`mfgCode` AS mfgCode,  \n" +
			"					vuss.partType,  \n" +
			"					vuss.isCancle,  \n" +
			"					vuss.mfgcodeID,  \n" +
			"					vuss.manufacturerName,  \n" +
			"					`vuss`.`serialNumber` AS serialNumber,  \n" +
			"					`vuss`.partCategory,  \n" +
			"					vuss.lineID,  \n" +
			"					`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
			"					ifnull(td.ishotjob,0) AS isBuildWiseHotJob ,  \n" +
			"					td.nextShipDate AS nextShipDate,  \n" +
			"					wo.WONumber AS workorders,  \n" +
			"					wo.WOIds AS workorderIds,  \n" +
			"					`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
			"					hutkit.refType AS refTypeKA,  \n" +
			"					hutkit.status AS haltStatusKA,  \n" +
			"					(  \n" +
			"						CASE  \n" +
			"							WHEN 	hutkit.status = 'H' THEN  \n" +
			"									CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' ON ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutkit.startDate))  \n" +
			"							ELSE 	''  \n" +
			"						END  \n" +
			"					) AS reasonKA,  \n" +
			"					`vuss`.`Shipped Qty` AS shippedQty,  \n" +
			"					IFNULL(td.totalPOQty, 0) totalPOQty,  \n" +
			"					IFNULL(td.totalKitQty, 0) totalKitQty,  \n" +
			"					ka.shortagePer,  \n" +
			"					DATEDIFF(td.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
			"					kaad.perAssyBuildQty,  \n" +
			"					cassy.PIDCode AS assyPIDCode,  \n" +
			"					cassy.mfgPN AS assyMfgPN,  \n" +
			"					roassy.rohsIcon AS assyRohsIcon,  \n" +
			"					roassy.name assyRohsName,  \n" +
			"					cassy.isCustom AS assyIsCustomPart,  \n" +
			"					cassy.custAssyPN AS assyCustAssyPN,  \n" +
			"					cassy.nickName AS assyNickName,  \n" +
			"					cassy.mfgPNDescription AS assyPartDescription,  \n" +
			"					IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`PO Qty`,0) AS assyPOQty,  \n" +
			"					IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`mrpQty`,0) AS assyMRPQty,  \n" +
			"					IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`kitQty`,0) AS assyKitQty,  \n" +
			"					(COUNT(1) OVER (PARTITION BY kaad.refSalesOrderDetID) - 1) AS havingSubAssyCount,  \n" +
			"					(CASE WHEN kaad.bomAssyLevel = 0 THEN COUNT(1) OVER (PARTITION BY kaad.refSalesOrderDetID) - 1 ELSE 0 END) AS subAssyCount\",v_DynamicColumns, \"  \n" +
			"			FROM   vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
			"				INNER JOIN component cassy ON kaad.partId = cassy.id AND cassy.isDeleted = 0 AND cassy.parttype IN (3,2)  \n" +
			"				LEFT JOIN  rfq_rohsmst roassy ON cassy.RoHSStatusID = roassy.id AND roassy.isDeleted = 0  \n" +
			"				LEFT JOIN (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
			"						FROM  salesorderdet s INNER JOIN component c ON s.partID = c.id AND c.mfgType = 'MFG' AND c.isDeleted = 0  \n" +
			"						WHERE  s.isdeleted = 0 AND c.parttype IN (3,2)) AS sa ON sa.id = vuss.refSODetID  \n" +
			"				LEFT JOIN (SELECT shippingid,Sdetid, qty, CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),'%m/%d/%y')) salesRelease  \n" +
			"						FROM salesshippingmst  b WHERE isdeleted = 0 ) AS sr ON sr.shippingid = vuss.refSOReleaseLineID  \n" +
			"				LEFT JOIN (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
			"						FROM salesorder_otherexpense_details WHERE isdeleted = 0  \n" +
			"						GROUP BY refSalesOrderDetID ) AS so ON so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
			"				LEFT JOIN (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds, GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
			"						FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
			"						ON wsd.woID=w.woID WHERE  wsd.isdeleted = 0  \n" +
			"						GROUP BY wsd.salesOrderDetailID  \n" +
			"					) AS wo ON wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
			"				LEFT JOIN (  \n" +
			"					SELECT	salesOrderDetID,   IFNULL(subAssyID, refAssyId) AS partID,  \n" +
			"							SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
			"							SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
			"							SUM(CASE WHEN kitReturnStatus ='FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
			"							SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount,  \n" +
			"							SUM(CASE WHEN kitReturnStatus ='RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
			"					FROM 	vu_release_plan_release_return_status_det  \n" +
			"					GROUP BY salesOrderDetID, partID  \n" +
			"			) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.partID = kaad.partId  \n" +
			"		LEFT JOIN (  \n" +
			"			SELECT 	t.salesOrderDetID,  \n" +
			"					IFNULL(t.subAssyID,t.refAssyId) As partID,  \n" +
			"                    SUM(kitReleaseQty) AS totalKitQty,  \n" +
			"                    SUM(poQty) AS totalPOQty,  \n" +
			"                    COUNT(1) totalPlan,  \n" +
			"                    MAX(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  AND  kitStatus!='R' then 1 else 0 end )  AS ishotjob,  \n" +
			"					MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
			"					MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
			"					SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
			"					SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
			"            FROM (  \n" +
			"				SELECT 	r.salesOrderDetID,  r.subAssyID, r.refAssyId, r.kitReleaseQty , r.poQty, r.kitStatus, r.kitReleaseDate  \n" +
			"				FROM 	vu_release_plan_detail r  \n" +
			"			) AS t  \n" +
			"			GROUP BY  t.salesOrderDetID, partID  \n" +
			"        ) AS td  ON td.salesOrderDetID = vuss.salesOrderDetailId AND td.partID = kaad.partId  \n" +
			"			LEFT JOIN 	(  \n" +
			"				SELECT 	refSalesOrderDetID, assyID, mainAssy,  \n" +
			"						(k.totalLine - k.totalNotRequireLine) AS totalLine,  \n" +
			"						k.shortageLine,  \n" +
			"						Round(k.allocPerComponent,2) allocPerComponent,  \n" +
			"						Round(k.allocPerWithSubAssy,2) allocPerWithSubAssy,  \n" +
			"						Round((k.shortageLine/k.totalLine)*100) AS shortagePer  \n" +
			"				FROM  \n" +
			"					(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
			"							COUNT(1) AS `totalLine`,  \n" +
			"							SUM( k.shortageline) shortageline,  \n" +
			"							SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
			"							(CASE WHEN assyID = mainAssy THEN  \n" +
			"								MIN(mainAssyPerForSubAssy)  /* Main Assembly Case */  \n" +
			"							ELSE /* Sub Assembly Case */  \n" +
			"								0 END) AS allocPerWithSubAssy,  \n" +
			"							(CASE WHEN assyID = mainAssy THEN  \n" +
			"								MIN(mainAssyPerForComponent)  /* Main Assembly Case */  \n" +
			"							ELSE /* Sub Assembly Case */  \n" +
			"								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) END) AS allocPerComponent  \n" +
			"					FROM  \n" +
			"						(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
			"								k.qpaWithDnp, k.allocationPer, k.isNotRequiredKitAllocation,  k.allocatedPercePerLine, k.MainAssyLine, k.shortageline,  \n" +
			"								SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForSubAssy,  \n" +
			"								SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN k.MainAssyLine ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForComponent  \n" +
			"					 FROM  \n" +
			"							(SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
			"									vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
			"									IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
			"									(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
			"									(case when vk.assyid = sd.partid then vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
			"									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
			"									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
			"									vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
			"								FROM  	`vu_kit_allocation_detail` vk  \n" +
			"								INNER JOIN    salesorderdet sd ON vk.refSalesorderdetid  = sd.id  \n" +
			"								WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
			"							) AS k  \n" +
			"						) AS k GROUP bY assyID, refSalesorderdetid, mainAssy  \n" +
			"					) AS k  \n" +
			"				) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.mainAssy =  `vuss`.`PartID` AND ka.assyID = kaad.partId  \n" +
			"				LEFT JOIN  rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
			"				LEFT JOIN  holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId AND hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId AND htk.refType='KA' AND htk.isDeleted=0)  \n" +
			"				LEFT JOIN (SELECT ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) AS initialStockCount  \n" +
			"								FROM assemblystock ass WHERE ass.isDeleted =0 AND ass.type = 'OS'  \n" +
			"								GROUP BY ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID)  AS astk  \n" +
			"							ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` AND astk.refSalesOrderID = vuss.`Sales Order ID` AND astk.partID = kaad.partId  \n" +
			"				) AS a  \n" +
			"		) AS t  \n" +
			"    \");  \n" +
			"  \n" +
			"	IF (pOrderBy IS NOT NULL) THEN  \n" +
			"		SET pOrderBy = CONCAT(\"ORDER BY (nextReleaseDate IS NULL),  nextReleaseDate ASC\") ;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
			"		SET pWhereClause = '1=1' ;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
			"		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
			"	END IF;  #need to check once  \n" +
			"  \n" +
			"	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
			"		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
			"	END IF;  \n" +
			"  \n" +
			"    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
			"		SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
			"		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
			"		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
			"		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
			"	  IF(psearchposotype='C')THEN  \n" +
			"             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
			"          ELSE  \n" +
			"             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
			"          END IF;  \n" +
			"	 END IF;  \n" +
			"  \n" +
			"	IF(prushJob = 1) THEN  \n" +
			"		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(pworkorders IS NOT NULL)THEN  \n" +
			"		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
			"		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
			"	END IF;  \n" +
			"	IF(ppartIds IS NOT NULL)THEN  \n" +
			"		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
			"		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
			"		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	-- from date to date filter  \n" +
			"	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
			"		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
			"	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
			"       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
			"       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
			"       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
			"		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
			"	ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
			"       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
			"       ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
			"       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
			"  \n" +
			"	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
			"		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
			"		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
			"			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
			"		END IF;  \n" +
			"		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
			"			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
			"		END IF;  \n" +
			"		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
			"			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
			"		END IF;  \n" +
			"        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF (pSalesOrderDetailId != 0) THEN  \n" +
			"		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
			"	END IF;  \n" +
			"  \n" +
			"    IF (pIsSubAssembly = 0) THEN  \n" +
			"		SET v_SalesOrderDetailWhere = CONCAT(\" AND isSubAssembly = 0 \");  \n" +
			"	END IF;  \n" +
			"  \n" +
			"    IF(pSubAssemblyTab = 1) THEN  \n" +
			"		SET v_SalesOrderDetailWhere = CONCAT(\" AND (CASE WHEN assyID = partID THEN subAssyCount > 0 ELSE 1= 1 END) \");  \n" +
			"    END IF;  \n" +
			"  \n" +
			"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
			"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
			"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
			"	ELSE  \n" +
			"		SET rowNumWhere = '';  \n" +
			"	END IF;  \n" +
			"  \n" +
			"  \n" +
			"	/* to get total count of rows */  \n" +
			"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
			"	PREPARE query1 FROM @SQLStatement1;  \n" +
			"	EXECUTE query1;  \n" +
			"	DEALLOCATE PREPARE query1;  \n" +
			"  \n" +
			"	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetKitList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
			"   PREPARE query2 FROM @SQLStatement2;  \n" +
			"	EXECUTE query2;  \n" +
			"	DEALLOCATE PREPARE query2;  \n" +
			"  \n" +
			"	SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
			"	PREPARE query3 FROM @SQLStatement3;  \n" +
			"	EXECUTE query3;  \n" +
			"	DEALLOCATE PREPARE query3;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetKitReleasePlanDetail`;  \n" +
			"CREATE PROCEDURE `Sproc_GetKitReleasePlanDetail`(  \n" +
			"	IN pRefSalesOrderDetID INT,  \n" +
			"	IN pAssyID INT,  \n" +
			"	IN pSubAssyID INT  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE vSubAssyQPA DECIMAL(18,8);  \n" +
			"	DECLARE vMismatchItem DECIMAL(18,8);  \n" +
			"	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);  \n" +
			"    DECLARE vKitQty DECIMAL(18,8);  \n" +
			"	DECLARE vCustomerId INT;  \n" +
			"  \n" +
			"    SELECT 		customerID  ,kitQty  \n" +
			"	INTO		vCustomerId ,vKitQty  \n" +
			"	FROM 		salesorderdet sd  \n" +
			"	INNER JOIN 	salesordermst s ON s.id = sd.refSalesOrderID  \n" +
			"	WHERE 		sd.id = pRefSalesOrderDetID;  \n" +
			"  \n" +
			"    DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingTypeWiseKitDet  \n" +
			"	(  \n" +
			"		mountingTypeID INT(11),  \n" +
			"		mountingType VARCHAR(50),  \n" +
			"		connecterTypeID INT(11),  \n" +
			"		connecterType VARCHAR(50),  \n" +
			"		feasibilityWithAllocation DECIMAL(18,8),  \n" +
			"		shortageLine DECIMAL(18,8),  \n" +
			"		feasibilityWithAvailableAndAllocatedStock DECIMAL(18,8),  \n" +
			"		shortageWithAvailableQty DECIMAL(18,8),  \n" +
			"		shortageForInputQty DECIMAL(18,8),  \n" +
			"		releasedQty DECIMAL(18,8),  \n" +
			"		pendingQty DECIMAL(18,8),  \n" +
			"		releasePercentage DECIMAL(18,8),  \n" +
			"		totalLine INT  \n" +
			"	);  \n" +
			"  \n" +
			"	/* Get assembly parts detail from kit_allocation_lineitems and kit_allocation_lineitems_alternatepart table */  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
			"	SELECT 	k.id,					kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
			"		kl.mountingTypeID, 			kl.connecterTypeID, 		kl.consolidatedMfgPNIDs, 		k.numOfPosition,  \n" +
			"		(  \n" +
			"			CASE  \n" +
			"				WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
			"					(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
			"				ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
			"			END  \n" +
			"		) AS kitQPAWithDNP,  \n" +
			"		kl.uomMismatchedStep,  \n" +
			"		k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
			"	FROM 	(  \n" +
			"			SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
			"					(  \n" +
			"						CASE 	WHEN MIN(ca.mountingTypeID) = MAX(ca.mountingTypeID) # Matched Mounting Type  \n" +
			"								THEN  MIN(ca.mountingTypeID)  \n" +
			"							WHEN MIN(ca.mountingTypeID) !=  MAX(ca.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 # Mismatched with Approval Mounting Type  \n" +
			"								THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN ca.mountingTypeID ELSE NULL END))  \n" +
			"							ELSE  -1  \n" +
			"						END  \n" +
			"					) mountingTypeID,  \n" +
			"					IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
			"					GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
			"					MIN(kal.uomMismatchedStep) uomMismatchedStep    # Zero indicate to part value does not match with BOM UOM  \n" +
			"			FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
			"			JOIN vu_component_mpn c ON kal.mfgPNID = c.id  \n" +
			"			LEFT JOIN vu_component_mpn cp ON cp.packagingGroupid = c.packagingGroupid  \n" +
			"			WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
			"			AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
			"			AND 		kal.isDeleted = 0  \n" +
			"			GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
			"	) AS kl  \n" +
			"	INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0;  \n" +
			"	/* Get available and allocated stock for selected assembly*/  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Stock_Det;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Stock_Det AS  \n" +
			"	SELECT  	r.consolidatedMfgPNIDs, 	r.id,  \n" +
			"			IFNULL(ks.allocatedUnit, 0) allocatedunit,  \n" +
			"			IFNULL(ks.allocatedPins,0) allocatedPin,  \n" +
			"			SUM(IFNULL(fun_convertUOM(v.uom, IFNULL(ks.allocatedUOM, r.uomID), IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)),0)) availableStock,  \n" +
			"			SUM((FLOOR(IFNULL(v.noOfPosition, 0)/IFNULL(r.numOfPosition, 0)) * IFNULL(r.numOfPosition, 0)) * IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)) availableStockInPin  \n" +
			"	FROM 		temp_Kit_Consolidate_Detail r  \n" +
			"	LEFT JOIN 	vu_kit_allocation_summary ks ON r.refsalesORderDetid = ks.refsalesOrderDetId  \n" +
			"                    AND ks.assyID =  pAssyID  \n" +
			"					AND FIND_IN_SET(ks.refBOMLineID, r.consolidatedLineItemIDs)  \n" +
			"	LEFT JOIN 	vu_deducted_allocation_available_Stock v ON FIND_IN_SET(v.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",consolidatedMfgPNIDs) ELSE consolidatedMfgPNIDs END))  \n" +
			"	WHERE 		r.isNotRequiredKitAllocation != 1  \n" +
			"	GROUP BY 	r.consolidatedMfgPNIDs, r.id, ks.allocatedunit, ks.allocatedPins;  \n" +
			"  \n" +
			"    /* Calculate kit line total & shortage & feasibility with allocation */  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS temp_Kit_calculateshortageLinperPlan;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_calculateshortageLinperPlan AS  \n" +
			"	SELECT 	a.salesorderPlanId,		a.salesOrderdetid,		a.kitreleaseQty,	a.refAssyId,	a.calculatedKitQty,  \n" +
			"			count(1) TotalLine ,  \n" +
			"			concat(FLOOR(sum(CASE WHEN (feasibilityWithAllocation - calculatedKitQty) >= 0 then 0 else 1 end) ), '/',   count(1)) shortageLines,  \n" +
			"			min(feasibilityWithAllocation) feasibilityWithAllocation  \n" +
			"	FROM  \n" +
			"	(  \n" +
			"			SELECT 	b.id salesorderPlanId,	r.id kitallocationlineitemid,	t.id,b.salesOrderdetid,  \n" +
			"					b.refAssyID,			b.SubAssyId,b.kitReleaseQty,	r.kitQPAWithDNP qpa,  \n" +
			"                    t.allocatedUnit,  		b.calculatedKitQty,				t.allocatedPin,  \n" +
			"                    t.availableStock,		t.availableStockInPin,          r.mountingTypeID,  \n" +
			"                    (CASE WHEN r.connecterTypeID = -2 THEN r.connecterTypeID ELSE NULL END) connecterTypeID,  \n" +
			"					(  \n" +
			"						CASE  \n" +
			"							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
			"								(t.allocatedUnit/r.kitQPAWithDNP)  \n" +
			"							ELSE (IFNULL(t.allocatedPin, 0) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
			"						END  \n" +
			"					) feasibilityWithAllocation,  \n" +
			"					(  \n" +
			"						CASE  \n" +
			"							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
			"								((t.availableStock + t.allocatedUnit)/r.kitQPAWithDNP)  \n" +
			"							ELSE ((IFNULL(t.allocatedPin, 0) + IFNULL(t.availableStockInPin, 0)) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
			"						END  \n" +
			"					) feasibilityWithAvailableAndAllocatedStock,  \n" +
			"					(CASE  \n" +
			"						WHEN r.uomMismatchedStep = 0 THEN 0  \n" +
			"						ELSE  \n" +
			"							CASE  \n" +
			"								WHEN r.connecterTypeID = -2 THEN  \n" +
			"									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty* IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0)) < 0)  \n" +
			"											THEN 0  \n" +
			"											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0))  \n" +
			"									END)  \n" +
			"								ELSE  \n" +
			"									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0)) < 0)  \n" +
			"											THEN 0  \n" +
			"											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0))  \n" +
			"									END)  \n" +
			"							END  \n" +
			"					END) shortagePerBuild  \n" +
			"			FROM  \n" +
			"				(  \n" +
			"					SELECT 	k.id,		kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
			"							kl.mountingTypeID, 						kl.connecterTypeID,  \n" +
			"                            kl.consolidatedMfgPNIDs, 				k.numOfPosition,  \n" +
			"							(  \n" +
			"								CASE  \n" +
			"									WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
			"										(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
			"									ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
			"								END  \n" +
			"							) AS kitQPAWithDNP,  \n" +
			"							kl.uomMismatchedStep,          k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
			"					FROM 	(  \n" +
			"								SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
			"											(  \n" +
			"												CASE 	WHEN MIN(ca.mountingTypeID) = MAX(ca.mountingTypeID) /* Matched Mounting Type */  \n" +
			"														THEN  MIN(ca.mountingTypeID)  \n" +
			"													WHEN MIN(ca.mountingTypeID) !=  MAX(ca.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
			"														THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN ca.mountingTypeID ELSE NULL END))  \n" +
			"													ELSE  -1  \n" +
			"												END  \n" +
			"											) mountingTypeID,  \n" +
			"											IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
			"											GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
			"											MIN(kal.uomMismatchedStep) uomMismatchedStep    /* Zero indicate to part value does not match with BOM UOM */  \n" +
			"									FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
			"                                    JOIN component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1 AND c.isDeleted = 0  \n" +
			"									LEFT JOIN component_attributes ca ON c.id = ca.refComponentID  AND ca.isDeleted = 0  \n" +
			"									LEFT JOIN component_attributes da ON ca.packagingGroupid = da.packagingGroupid AND da.isDeleted = 0  \n" +
			"									LEFT JOIN component cp ON da.refComponentID = cp.id AND cp.isDeleted = 0  \n" +
			"									WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
			"									AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
			"									AND 		kal.isDeleted = 0  \n" +
			"									AND			c.isDeleted = 0  \n" +
			"									GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
			"							) AS kl  \n" +
			"							INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0  \n" +
			"				) r  \n" +
			"				INNER JOIN (  \n" +
			"							SELECT 	id,		salesOrderdetid,	refAssyID,	SubAssyId,	kitReleaseQty,  \n" +
			"									SUM(kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
			"							FROM salesorder_plan_detailsmst where salesorderdetid= pRefSalesOrderDetID  AND isDeleted = 0  \n" +
			"                            ) b  \n" +
			"				INNER JOIN 	temp_Kit_Stock_Det t ON r.id = t.id  \n" +
			"		) a  \n" +
			"		GROUP BY  salesorderPlanId,salesOrderdetid,kitreleaseQty,refAssyId,calculatedKitQty;  \n" +
			"  \n" +
			"	SELECT 	id,  \n" +
			"			plannKitNumber,  \n" +
			"			poQty,  \n" +
			"			poDueDate,  \n" +
			"			materialDockDate,  \n" +
			"			b.kitReleaseQty,  \n" +
			"			kitReleaseDate,  \n" +
			"			feasibilityWithAllocatedQty AS currentBuildFeasibility,  \n" +
			"			(CASE WHEN buildFeasibility > 0 THEN buildFeasibility ELSE 0 END) AS buildFeasibility,  \n" +
			"			(CASE WHEN (buildFeasibility > 0 AND buildFeasibility > b.kitReleaseQty) THEN 0 WHEN (buildFeasibility > 0) THEN (b.kitReleaseQty - buildFeasibility) ELSE b.kitReleaseQty END) AS Shortage,  \n" +
			"            c.shortageLines,  \n" +
			"			b.calculatedKitQty,  \n" +
			"			actualKitReleaseDate,  \n" +
			"			releaseTimeFeasibility,  \n" +
			"			releasedByName,  \n" +
			"			mfrLeadTime,  \n" +
			"			kitStatus,  \n" +
			"			RushJob,  \n" +
			"			FUNC_MISMATCHITEMFORKIT(b.salesOrderDetID, IFNULL(b.subAssyID,b.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
			"			fun_getWorkorderNumberByID(woID) workorderNumber,  \n" +
			"			releasedNote,  \n" +
			"			releaseKitNumber,  \n" +
			"			subAssyReleaseCount,  \n" +
			"			subAssyReleasedCount,  \n" +
			"			woID,  \n" +
			"			kitReturnDate,  \n" +
			"			kitReturnStatus,  \n" +
			"			woStatusID,  \n" +
			"            woSubStatusID,  \n" +
			"            IF(pSubAssyID IS NULL, 0, 1) AS isSubAssembly  \n" +
			"	FROM  \n" +
			"			(  \n" +
			"				SELECT *,  \n" +
			"					(  \n" +
			"						CASE  \n" +
			"							WHEN (calculatedKitQty >  feasibilityWithAllocatedQty) THEN  (kitReleaseQty - (calculatedKitQty - feasibilityWithAllocatedQty))  \n" +
			"							ELSE kitReleaseQty  \n" +
			"						END  \n" +
			"					) buildFeasibility  \n" +
			"				FROM	(  \n" +
			"						SELECT 	r.*,  \n" +
			"							SUM(r.kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
			"						FROM 	vu_release_plan_detail r  \n" +
			"						WHERE 	r.salesOrderDetID = pRefSalesOrderDetID  \n" +
			"								AND r.refAssyId = pAssyID  \n" +
			"								AND (  \n" +
			"				 					CASE  \n" +
			"										WHEN pSubAssyID IS NOT NULL THEN r.subAssyID = pSubAssyID  \n" +
			"										ELSE r.subAssyID IS NULL  \n" +
			"									END  \n" +
			"								)  \n" +
			"						ORDER BY r.salesOrderDetID, r.refAssyId, r.subAssyID, r.refPlanId DESC, r.id  \n" +
			"					)  \n" +
			"				AS a  \n" +
			"	 		)  \n" +
			"	AS b   inner join     temp_Kit_calculateshortageLinperPlan c on  b.id =  c.salesorderplanid  \n" +
			"	ORDER BY poDueDate, plannKitNumber ASC;  \n" +
			"  \n" +
			"	SELECT MIN(promisedShipDate) promisedShipDate FROM salesshippingmst WHERE  sDetID = pRefSalesOrderDetID and isdeleted = 0 ;  \n" +
			"  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetKitWarehouseDetail`;  \n" +
			"CREATE PROCEDURE `Sproc_GetKitWarehouseDetail`(  \n" +
			"	IN pRefSalesOrderDetID INT,  \n" +
			"	IN pAssyID INT,  \n" +
			"	IN pFromParentWHType VARCHAR(10),  \n" +
			"	IN pWarehouseId INT,  \n" +
			"	IN pBinId INT  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	#Get UMID and warehouse of all allocated UMID of selected kit  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitResults;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitResults AS  \n" +
			"	SELECT DISTINCT k.refUIDId, 		b.warehouseID, 		w.name warehouseName, w.isPermanentWH,  \n" +
			"					w.warehouseType, 	w.allMovableBin, 	w.parentWHID, pw.name parentWHName,  \n" +
			"					0 emptyBin,         CAST(NULL AS CHAR(1000)) emptyBinName  \n" +
			"	FROM 		kit_allocation k  \n" +
			"	INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId AND csd.isDeleted = 0  \n" +
			"	INNER JOIN 	binmst b ON b.id = csd.binID AND b.isDeleted = 0  \n" +
			"	INNER JOIN 	warehousemst w ON w.id = b.warehouseID AND w.isDeleted = 0  \n" +
			"	INNER JOIN 	warehousemst pw ON pw.id = w.parentWHID AND pw.parentWHType = IFNULL(pFromParentWHType, pw.parentWHType) AND pw.isdeleted = 0  \n" +
			"	WHERE 		k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"	AND			k.assyID = pAssyID  \n" +
			"	AND 		k.status = 'A'  \n" +
			"	ORDER BY 	w.name;  \n" +
			"  \n" +
			"	# Store empty bin of warehouse in temp table  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempEmptyBin;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempEmptyBin AS  \n" +
			"	SELECT 	GROUP_CONCAT(' ',b.Name) emptyBinName, COUNT(1) emptyBin, b.warehouseid  \n" +
			"	FROM 	binmst b  \n" +
			"	WHERE  EXISTS (SELECT 1 FROM tempAllocatedKitResults t WHERE t.warehouseID = b.warehouseID)  \n" +
			"	AND    	b.isactive = 1  \n" +
			"	AND 	b.isdeleted = 0  \n" +
			"	AND 	b.isPermanentBin = 0  \n" +
			"	AND NOT EXISTS (  \n" +
			"		SELECT 1 FROM component_sid_stock css WHERE css.binid = IFNULL(pBinId, b.id) AND css.isdeleted = 0  \n" +
			"	)  \n" +
			"	AND NOT EXISTS (  \n" +
			"		SELECT 1 FROM vu_umid_creation_pending p WHERE p.binID = IFNULL(pBinId, b.id) AND BalanceQty > 0  \n" +
			"	)  \n" +
			"	GROUP BY b.warehouseid;  \n" +
			"  \n" +
			"	#Update empty bin of warehouse in tempAllocatedKitResults  \n" +
			"	UPDATE tempAllocatedKitResults tk, tempEmptyBin tb  \n" +
			"	SET tk.emptyBin = tb.emptyBin,  tk.emptyBinName = tb.emptyBinName  \n" +
			"	WHERE tb.warehouseid = tk.warehouseid;  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS WarehouseUMIDResults;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS WarehouseUMIDResults (  \n" +
			"		UIDId INT(11)  \n" +
			"	);  \n" +
			"  \n" +
			"	#Get UMID of selected kit from above temp table  \n" +
			"	INSERT INTO WarehouseUMIDResults (UIDId) SELECT refUIDId FROM tempAllocatedKitResults;  \n" +
			"  \n" +
			"	#Get shared kit detail form warehouse which is allocated to selected kit  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS kitResults;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS kitResults AS  \n" +
			"	SELECT 		k.refSalesOrderDetID, 	k.assyID, 				k.refUIDId,  \n" +
			"				CONCAT(s.poNumber, ', ', s.salesOrderNumber, ', ', c.PIDCode, ', ', sd.qty)  NAME,  \n" +
			"				w.id warehouseID, 		w.name warehouseName, 	w.isPermanentWH,  \n" +
			"				w.warehouseType, 		w.allMovableBin  \n" +
			"	FROM 		kit_allocation k  \n" +
			"	INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id  AND sd.partCategory=3  \n" +
			"	INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
			"	INNER JOIN	component c ON k.assyID = c.id AND c.mfgType = 'MFG'  \n" +
			"	INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
			"	INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
			"	INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
			"	WHERE 		k.status = 'A'  \n" +
			"	AND 		k.assyID != pAssyID  \n" +
			"	AND	EXISTS (SELECT 1 FROM tempAllocatedKitResults r WHERE r.warehouseID = w.id )  \n" +
			"	AND 		b.id = IFNULL(pBinId, b.id)  \n" +
			"	AND 		csd.isDeleted = 0  \n" +
			"	AND 		b.isDeleted = 0  \n" +
			"    AND 		c.isDeleted = 0  \n" +
			"	AND 		w.isDeleted = 0;  \n" +
			"  \n" +
			"	#Get UMID of shared kit from above temp table  \n" +
			"	INSERT INTO WarehouseUMIDResults (UIDId) SELECT refUIDId FROM kitResults;  \n" +
			"  \n" +
			"	# Get kit initial detail of shared kit from above temp table  \n" +
			"	SELECT 	k.refSalesOrderDetID, 	k.assyID, 			k.name,  \n" +
			"			k.warehouseID, 			k.warehouseName,	k.isPermanentWH  \n" +
			"	FROM	kitResults k  \n" +
			"	WHERE	k.warehouseID = IFNULL(pWarehouseId, k.warehouseID)  \n" +
			"	GROUP BY k.refSalesOrderDetID, k.assyID, k.name, k.warehouseID, k.warehouseName, k.isPermanentWH;  \n" +
			"  \n" +
			"	-- Return list of unallocated UMID  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempUnallocatedUMID;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempUnallocatedUMID AS  \n" +
			"	SELECT DISTINCT csd.id, 			csd.uid, 				csd.refcompid, 		csd.scanlabel,  \n" +
			"					b.warehouseID,		w.name warehouseName, 	w.isPermanentWH, 	w.warehouseType,  \n" +
			"					w.allMovableBin,	b.id binID, 			b.name binName, 	w.parentWHID,  \n" +
			"					csd.receiveMaterialType,  \n" +
			"					fun_getWarehouseNameByID(w.parentWHID) department  \n" +
			"	FROM 	component_sid_stock csd  \n" +
			"	INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
			"	INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
			"	WHERE EXISTS (SELECT 1 FROM tempAllocatedKitResults r WHERE r.warehouseID = w.id)  \n" +
			"	AND	NOT EXISTS (SELECT 1 FROM WarehouseUMIDResults kr WHERE kr.UIDId = csd.id)  \n" +
			"	AND NOT EXISTS (SELECT 1 FROM kit_allocation k WHERE k.refUIDID = csd.id AND k.STATUS = 'A')  \n" +
			"	AND		csd.isdeleted = 0  \n" +
			"	ORDER BY 	csd.id;  \n" +
			"  \n" +
			"	-- Return list of unallocated UMID  \n" +
			"	SELECT * FROM tempUnallocatedUMID WHERE warehouseID = IFNULL(pWarehouseId, warehouseID) AND binID = IFNULL(pBinId, binID);  \n" +
			"  \n" +
			"	-- Return list of unallocated UMID Summary  \n" +
			"	SELECT 	t.binID, 			t.binName, 				t.warehouseID, 		t.warehouseName,  \n" +
			"			t.isPermanentWH, 	t.warehouseType, 		t.allMovableBin, 	COUNT(1) unallocatedUMID,  \n" +
			"			t.parentWHID,        	fun_getWarehouseNameByID(t.parentWHID) parentWHName,          -- t.receiveMaterialType,  \n" +
			"			(  \n" +
			"				SELECT 		COUNT(1)  \n" +
			"				FROM 		kit_allocation k  \n" +
			"				INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
			"				WHERE 		k.status = 'A'  \n" +
			"				AND 		csd.binid = t.binid  \n" +
			"			) allocatedUMID,  \n" +
			"			(SELECT COUNT(1) FROM component_sid_stock css WHERE css.binid = t.binid AND css.isdeleted = 0) totalUMID  \n" +
			"	FROM	tempUnallocatedUMID t  \n" +
			"	WHERE	t.warehouseID = IFNULL(pWarehouseId, t.warehouseID)  \n" +
			"	AND 	t.binID = IFNULL(pBinId, t.binID)  \n" +
			"	GROUP BY t.binID, t.binName, t.warehouseID, t.warehouseName, t.isPermanentWH, t.warehouseType, t.allMovableBin, t.parentWHID; -- , t.receiveMaterialType  \n" +
			"  \n" +
			"	# Return UMID and warehouse of all allocated UMID of selected kit  \n" +
			"	SELECT * FROM tempAllocatedKitResults WHERE warehouseID = IFNULL(pWarehouseId, warehouseID);  \n" +
			"  \n" +
			"	#Pending UMID list  \n" +
			"	SELECT 	*  \n" +
			"	FROM 	(  \n" +
			"			SELECT 	b.id binID, 			b.name binName, 	b.isPermanentBin, 	b.warehouseID,  \n" +
			"					w.name warehouseName, 	w.isPermanentWH, 	w.warehouseType,	w.parentWHID,  \n" +
			"					pw.name parentWHName,  \n" +
			"					GROUP_CONCAT(DISTINCT ' ',c.PIDCode) parts,	GROUP_CONCAT( DISTINCT ' ', p.partID) partIDs,  \n" +
			"					(SELECT COUNT(1) FROM component_sid_stock css WHERE css.binid = b.id  \n" +
			"																	AND css.isdeleted = 0  \n" +
			"																	AND EXISTS (SELECT 1 FROM kit_allocation k WHERE k.refUIDId = css.id  \n" +
			"																												AND k.status = 'A'  \n" +
			"																												AND k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"																												AND k.assyID = pAssyID  \n" +
			"																												AND pw.parentWHType = IFNULL(pFromParentWHType, pw.parentWHType)  \n" +
			"									)  \n" +
			"					) AS allocatedUMIDInSameKitCount,  \n" +
			"					(SELECT COUNT(1) FROM component_sid_stock css WHERE css.binid = b.id  \n" +
			"																	AND css.isdeleted = 0  \n" +
			"																	AND NOT EXISTS (SELECT 1 FROM kit_allocation k  \n" +
			"																								WHERE k.refUIDId = css.id  \n" +
			"																								AND k.status = 'A'  \n" +
			"																								AND k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"																								AND k.assyID = pAssyID  \n" +
			"																								AND pw.parentWHType = IFNULL(pFromParentWHType, pw.parentWHType)  \n" +
			"																					)  \n" +
			"																	AND EXISTS (SELECT 1 FROM 	kit_allocation k WHERE k.refUIDId = css.id)  \n" +
			"					) AS allocatedUMIDToOtherKitCount,  \n" +
			"					(SELECT COUNT(1) FROM 	component_sid_stock css  \n" +
			"									WHERE 	css.binid = b.id  \n" +
			"									AND 	css.isdeleted = 0  \n" +
			"									AND NOT EXISTS (SELECT 1 FROM kit_allocation k WHERE k.refUIDId = css.id)  \n" +
			"					) AS unallocatedUMIDCount  \n" +
			"			FROM 	vu_umid_creation_pending p  \n" +
			"			INNER JOIN 	binmst b ON b.id = p.BinID  AND b.isdeleted = 0  \n" +
			"			INNER JOIN 	warehousemst w ON w.id = b.warehouseID AND w.isdeleted = 0  \n" +
			"			INNER JOIN 	warehousemst pw ON pw.id = w.parentWHID AND pw.parentWHType = IFNULL(pFromParentWHType, pw.parentWHType) AND pw.isdeleted = 0  \n" +
			"            INNER JOIN	component c ON p.PartId = c.id  AND c.mfgType = 'MFG' AND c.isDeleted = 0  \n" +
			"			LEFT JOIN 	component_sid_stock css ON css.binid = b.id AND css.isdeleted = 0  \n" +
			"			WHERE 		p.BalanceQty > 0  \n" +
			"			AND EXISTS (SELECT 1 FROM tempAllocatedKitResults r WHERE r.warehouseID = w.id)  \n" +
			"			GROUP BY 	b.id, b.name, b.isPermanentBin, b.warehouseID, w.name,w.isPermanentWH, w.warehouseType,	w.parentWHID, pw.name  \n" +
			"			ORDER BY 	w.name  \n" +
			"	) a  \n" +
			"	WHERE warehouseID = IFNULL(pWarehouseId, warehouseID)  \n" +
			"	AND   binID = IFNULL(pBinId, binID);  \n" +
			"  \n" +
			"  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetKitWarehouseDetail`;  \n" +
			"CREATE PROCEDURE `Sproc_GetKitWarehouseDetail`(  \n" +
			"	IN pRefSalesOrderDetID INT,  \n" +
			"	IN pAssyID INT,  \n" +
			"	IN pFromParentWHType VARCHAR(10),  \n" +
			"	IN pWarehouseId INT,  \n" +
			"	IN pBinId INT  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	#Get UMID and warehouse of all allocated UMID of selected kit  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitResults;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitResults AS  \n" +
			"	SELECT DISTINCT k.refUIDId, 		b.warehouseID, 		w.name warehouseName, w.isPermanentWH,  \n" +
			"					w.warehouseType, 	w.allMovableBin, 	w.parentWHID, pw.name parentWHName,  \n" +
			"					0 emptyBin,         CAST(NULL AS CHAR(1000)) emptyBinName  \n" +
			"	FROM 		kit_allocation k  \n" +
			"	INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId AND csd.isDeleted = 0  \n" +
			"	INNER JOIN 	binmst b ON b.id = csd.binID AND b.isDeleted = 0  \n" +
			"	INNER JOIN 	warehousemst w ON w.id = b.warehouseID AND w.isDeleted = 0  \n" +
			"	INNER JOIN 	warehousemst pw ON pw.id = w.parentWHID AND pw.parentWHType = IFNULL(pFromParentWHType, pw.parentWHType) AND pw.isdeleted = 0  \n" +
			"	WHERE 		k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"	AND			k.assyID = pAssyID  \n" +
			"	AND 		k.status = 'A'  \n" +
			"	ORDER BY 	w.name;  \n" +
			"  \n" +
			"	# Store empty bin of warehouse in temp table  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempEmptyBin;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempEmptyBin AS  \n" +
			"	SELECT 	GROUP_CONCAT(' ',b.Name) emptyBinName, COUNT(1) emptyBin, b.warehouseid  \n" +
			"	FROM 	binmst b  \n" +
			"	WHERE  EXISTS (SELECT 1 FROM tempAllocatedKitResults t WHERE t.warehouseID = b.warehouseID)  \n" +
			"	AND    	b.isactive = 1  \n" +
			"	AND 	b.isdeleted = 0  \n" +
			"	AND 	b.isPermanentBin = 0  \n" +
			"	AND NOT EXISTS (  \n" +
			"		SELECT 1 FROM component_sid_stock css WHERE css.binid = IFNULL(pBinId, b.id) AND css.isdeleted = 0  \n" +
			"	)  \n" +
			"	AND NOT EXISTS (  \n" +
			"		SELECT 1 FROM vu_umid_creation_pending p WHERE p.binID = IFNULL(pBinId, b.id) AND BalanceQty > 0  \n" +
			"	)  \n" +
			"	GROUP BY b.warehouseid;  \n" +
			"  \n" +
			"	#Update empty bin of warehouse in tempAllocatedKitResults  \n" +
			"	UPDATE tempAllocatedKitResults tk, tempEmptyBin tb  \n" +
			"	SET tk.emptyBin = tb.emptyBin,  tk.emptyBinName = tb.emptyBinName  \n" +
			"	WHERE tb.warehouseid = tk.warehouseid;  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS WarehouseUMIDResults;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS WarehouseUMIDResults (  \n" +
			"		UIDId INT(11)  \n" +
			"	);  \n" +
			"  \n" +
			"	#Get UMID of selected kit from above temp table  \n" +
			"	INSERT INTO WarehouseUMIDResults (UIDId) SELECT refUIDId FROM tempAllocatedKitResults;  \n" +
			"  \n" +
			"	#Get shared kit detail form warehouse which is allocated to selected kit  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS kitResults;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS kitResults AS  \n" +
			"	SELECT 		k.refSalesOrderDetID, 	k.assyID, 				k.refUIDId,  \n" +
			"				CONCAT(s.poNumber, ', ', s.salesOrderNumber, ', ', c.PIDCode, ', ', sd.qty)  NAME,  \n" +
			"				w.id warehouseID, 		w.name warehouseName, 	w.isPermanentWH,  \n" +
			"				w.warehouseType, 		w.allMovableBin  \n" +
			"	FROM 		kit_allocation k  \n" +
			"	INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id  AND sd.partCategory=3  \n" +
			"	INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
			"	INNER JOIN	component c ON k.assyID = c.id AND c.mfgType = 'MFG'  \n" +
			"	INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
			"	INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
			"	INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
			"	WHERE 		k.status = 'A'  \n" +
			"	AND 		k.assyID != pAssyID  \n" +
			"	AND	EXISTS (SELECT 1 FROM tempAllocatedKitResults r WHERE r.warehouseID = w.id )  \n" +
			"	AND 		b.id = IFNULL(pBinId, b.id)  \n" +
			"	AND 		csd.isDeleted = 0  \n" +
			"	AND 		b.isDeleted = 0  \n" +
			"    AND 		c.isDeleted = 0  \n" +
			"	AND 		w.isDeleted = 0;  \n" +
			"  \n" +
			"	#Get UMID of shared kit from above temp table  \n" +
			"	INSERT INTO WarehouseUMIDResults (UIDId) SELECT refUIDId FROM kitResults;  \n" +
			"  \n" +
			"	# Get kit initial detail of shared kit from above temp table  \n" +
			"	SELECT 	k.refSalesOrderDetID, 	k.assyID, 			k.name,  \n" +
			"			k.warehouseID, 			k.warehouseName,	k.isPermanentWH  \n" +
			"	FROM	kitResults k  \n" +
			"	WHERE	k.warehouseID = IFNULL(pWarehouseId, k.warehouseID)  \n" +
			"	GROUP BY k.refSalesOrderDetID, k.assyID, k.name, k.warehouseID, k.warehouseName, k.isPermanentWH;  \n" +
			"  \n" +
			"	-- Return list of unallocated UMID  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempUnallocatedUMID;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempUnallocatedUMID AS  \n" +
			"	SELECT DISTINCT csd.id, 			csd.uid, 				csd.refcompid, 		csd.scanlabel,  \n" +
			"					b.warehouseID,		w.name warehouseName, 	w.isPermanentWH, 	w.warehouseType,  \n" +
			"					w.allMovableBin,	b.id binID, 			b.name binName, 	w.parentWHID,  \n" +
			"					csd.receiveMaterialType,  \n" +
			"					fun_getWarehouseNameByID(w.parentWHID) department  \n" +
			"	FROM 	component_sid_stock csd  \n" +
			"	INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
			"	INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
			"	WHERE EXISTS (SELECT 1 FROM tempAllocatedKitResults r WHERE r.warehouseID = w.id)  \n" +
			"	AND	NOT EXISTS (SELECT 1 FROM WarehouseUMIDResults kr WHERE kr.UIDId = csd.id)  \n" +
			"	AND NOT EXISTS (SELECT 1 FROM kit_allocation k WHERE k.refUIDID = csd.id AND k.STATUS = 'A')  \n" +
			"	AND		csd.isdeleted = 0  \n" +
			"	ORDER BY 	csd.id;  \n" +
			"  \n" +
			"	-- Return list of unallocated UMID  \n" +
			"	SELECT * FROM tempUnallocatedUMID WHERE warehouseID = IFNULL(pWarehouseId, warehouseID) AND binID = IFNULL(pBinId, binID);  \n" +
			"  \n" +
			"	-- Return list of unallocated UMID Summary  \n" +
			"	SELECT 	t.binID, 			t.binName, 				t.warehouseID, 		t.warehouseName,  \n" +
			"			t.isPermanentWH, 	t.warehouseType, 		t.allMovableBin, 	COUNT(1) unallocatedUMID,  \n" +
			"			t.parentWHID,        	fun_getWarehouseNameByID(t.parentWHID) parentWHName,          -- t.receiveMaterialType,  \n" +
			"			(  \n" +
			"				SELECT 		COUNT(1)  \n" +
			"				FROM 		kit_allocation k  \n" +
			"				INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
			"				WHERE 		k.status = 'A'  \n" +
			"				AND 		csd.binid = t.binid  \n" +
			"			) allocatedUMID,  \n" +
			"			(SELECT COUNT(1) FROM component_sid_stock css WHERE css.binid = t.binid AND css.isdeleted = 0) totalUMID  \n" +
			"	FROM	tempUnallocatedUMID t  \n" +
			"	WHERE	t.warehouseID = IFNULL(pWarehouseId, t.warehouseID)  \n" +
			"	AND 	t.binID = IFNULL(pBinId, t.binID)  \n" +
			"	GROUP BY t.binID, t.binName, t.warehouseID, t.warehouseName, t.isPermanentWH, t.warehouseType, t.allMovableBin, t.parentWHID; -- , t.receiveMaterialType  \n" +
			"  \n" +
			"	# Return UMID and warehouse of all allocated UMID of selected kit  \n" +
			"	SELECT * FROM tempAllocatedKitResults WHERE warehouseID = IFNULL(pWarehouseId, warehouseID);  \n" +
			"  \n" +
			"	#Pending UMID list  \n" +
			"	SELECT 	*  \n" +
			"	FROM 	(  \n" +
			"			SELECT 	b.id binID, 			b.name binName, 	b.isPermanentBin, 	b.warehouseID,  \n" +
			"					w.name warehouseName, 	w.isPermanentWH, 	w.warehouseType,	w.parentWHID,  \n" +
			"					pw.name parentWHName,  \n" +
			"					GROUP_CONCAT(DISTINCT ' ',c.PIDCode) parts,	GROUP_CONCAT( DISTINCT ' ', p.partID) partIDs,  \n" +
			"					(SELECT COUNT(1) FROM component_sid_stock css WHERE css.binid = b.id  \n" +
			"																	AND css.isdeleted = 0  \n" +
			"																	AND EXISTS (SELECT 1 FROM kit_allocation k WHERE k.refUIDId = css.id  \n" +
			"																												AND k.status = 'A'  \n" +
			"																												AND k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"																												AND k.assyID = pAssyID  \n" +
			"																												AND pw.parentWHType = IFNULL(pFromParentWHType, pw.parentWHType)  \n" +
			"									)  \n" +
			"					) AS allocatedUMIDInSameKitCount,  \n" +
			"					(SELECT COUNT(1) FROM component_sid_stock css WHERE css.binid = b.id  \n" +
			"																	AND css.isdeleted = 0  \n" +
			"																	AND NOT EXISTS (SELECT 1 FROM kit_allocation k  \n" +
			"																								WHERE k.refUIDId = css.id  \n" +
			"																								AND k.status = 'A'  \n" +
			"																								AND k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"																								AND k.assyID = pAssyID  \n" +
			"																								AND pw.parentWHType = IFNULL(pFromParentWHType, pw.parentWHType)  \n" +
			"																					)  \n" +
			"																	AND EXISTS (SELECT 1 FROM 	kit_allocation k WHERE k.refUIDId = css.id)  \n" +
			"					) AS allocatedUMIDToOtherKitCount,  \n" +
			"					(SELECT COUNT(1) FROM 	component_sid_stock css  \n" +
			"									WHERE 	css.binid = b.id  \n" +
			"									AND 	css.isdeleted = 0  \n" +
			"									AND NOT EXISTS (SELECT 1 FROM kit_allocation k WHERE k.refUIDId = css.id)  \n" +
			"					) AS unallocatedUMIDCount  \n" +
			"			FROM 	vu_umid_creation_pending p  \n" +
			"			INNER JOIN 	binmst b ON b.id = p.BinID  AND b.isdeleted = 0  \n" +
			"			INNER JOIN 	warehousemst w ON w.id = b.warehouseID AND w.isdeleted = 0  \n" +
			"			INNER JOIN 	warehousemst pw ON pw.id = w.parentWHID AND pw.parentWHType = IFNULL(pFromParentWHType, pw.parentWHType) AND pw.isdeleted = 0  \n" +
			"            INNER JOIN	component c ON p.PartId = c.id  AND c.mfgType = 'MFG' AND c.isDeleted = 0  \n" +
			"			LEFT JOIN 	component_sid_stock css ON css.binid = b.id AND css.isdeleted = 0  \n" +
			"			WHERE 		p.BalanceQty > 0  \n" +
			"			AND EXISTS (SELECT 1 FROM tempAllocatedKitResults r WHERE r.warehouseID = w.id)  \n" +
			"			GROUP BY 	b.id, b.name, b.isPermanentBin, b.warehouseID, w.name,w.isPermanentWH, w.warehouseType,	w.parentWHID, pw.name  \n" +
			"			ORDER BY 	w.name  \n" +
			"	) a  \n" +
			"	WHERE warehouseID = IFNULL(pWarehouseId, warehouseID)  \n" +
			"	AND   binID = IFNULL(pBinId, binID);  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
			"CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
			"	pPageIndex INT,  \n" +
			"	pRecordPerPage INT,  \n" +
			"	pDeptID INT,  \n" +
			"	pSearchString VARCHAR(100),  \n" +
			"	pGlobalSearchKitSalesOrderDetID INT,  \n" +
			"	pGlobalSearchKitAssyID INT,  \n" +
			"	pSearchKitSalesOrderDetID INT,  \n" +
			"	pSearchKitAssyID INT,  \n" +
			"	pGlobalSearchBinString VARCHAR(1000),  \n" +
			"	pGlobalSearchUIDString VARCHAR(1000),  \n" +
			"	pIsCheckMRP TINYINT,  \n" +
			"	pIsCheckMWS TINYINT,  \n" +
			"	pIsCheckMRE TINYINT,  \n" +
			"    pIsCheckMRR TINYINT,  \n" +
			"	pIsCheckPRE TINYINT,  \n" +
			"	pIsCheckPPR TINYINT,  \n" +
			"	pIsCheckPNR TINYINT  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE pOffset INT;  \n" +
			"	DECLARE rowNumWhere VARCHAR(255);  \n" +
			"	DECLARE v_ParentWHType VARCHAR(10);  \n" +
			"	DECLARE v_WhereClause VARCHAR(10000);  \n" +
			"	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
			"	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
			"	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
			"	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
			"	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
			"    DECLARE v_WhereKitNameFilter VARCHAR(10000);  \n" +
			"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
			"	DECLARE v_TimeZone VARCHAR(50);  \n" +
			"	DECLARE vUTCDateTime datetime;  \n" +
			"  \n" +
			"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
			"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
			"	SELECT fun_DatetimetoUTCDateTime() into vUTCDateTime;  \n" +
			"	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
			"  \n" +
			"	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
			"		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
			"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
			"	ELSE  \n" +
			"		SET rowNumWhere = '';  \n" +
			"	END IF;  \n" +
			"     SET v_WHTypeJoinClause = CONCAT(\"  \n" +
			"			select  a.* ,  \n" +
			"					fun_getKitReturnStatus(a.pendingReleaseCount, a.releasedNotReturnedCount, a.returnedCount, a.readyToReturnCount, a.shortageReturnCount) AS kitReturnStatus  \n" +
			"				from  \n" +
			"							(SELECT 	        c.id,  \n" +
			"							c.salesOrderDetID,  \n" +
			"							c.refAssyId,  \n" +
			"							c.subAssyID,  \n" +
			"							c.plannKitNumber,  \n" +
			"							c.poQty,  \n" +
			"							c.poDueDate,  \n" +
			"							c.mfrLeadTime,  \n" +
			"							c.materialDockDate,  \n" +
			"							c.kitReleaseQty,  \n" +
			"							c.kitReleaseDate,  \n" +
			"							c.feasibilityWithAllocatedQty,  \n" +
			"                            c.actualKitReleaseDate,  \n" +
			"							c.releasedBy,  \n" +
			"							c.releaseTimeFeasibility,  \n" +
			"							c.kitStatus,  \n" +
			"							c.rushJob,  \n" +
			"							c.woStatusID,  \n" +
			"							c.refPlanId,  \n" +
			"							c.releasedNote,  \n" +
			"							c.releaseKitNumber,  \n" +
			"                            SUM(CASE WHEN c.kitReturnStatus ='NA' THEN 1 ELSE 0 END) over (  partition by c.salesOrderDetID,refAssyId,subAssyID) pendingReleaseCount,  \n" +
			"                            SUM(CASE WHEN c.kitReturnStatus ='NR' THEN 1 ELSE 0 END) over (  partition by c.salesOrderDetID,refAssyId,subAssyID) releasedNotReturnedCount,  \n" +
			"                            SUM(CASE WHEN c.kitReturnStatus ='FR' THEN 1 ELSE 0 END) over (  partition by c.salesOrderDetID,refAssyId,subAssyID) returnedCount,  \n" +
			"                            SUM(CASE WHEN c.kitReturnStatus ='RR' THEN 1 ELSE 0 END) over (  partition by c.salesOrderDetID,refAssyId,subAssyID) readyToReturnCount,  \n" +
			"                            SUM(CASE WHEN c.kitReturnStatus ='RS' THEN 1 ELSE 0 END) over (  partition by c.salesOrderDetID,refAssyId,subAssyID) shortageReturnCount,  \n" +
			"							c.woID,  \n" +
			"							c.workorderNumber,  \n" +
			"                            min(kitreleasedate)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minKitReleaseDate,  \n" +
			"                             min(id)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minkitid  \n" +
			"					FROM     vu_release_plan_detail AS c  \n" +
			"                      ) a where a.kitreleasedate = a.minKitReleaseDate  and a.id = a.minkitid \");  \n" +
			"  \n" +
			"  IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
			"		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
			"			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
			"		ELSE  \n" +
			"			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
			"				csd.binId IN (  \n" +
			"						SELECT 	id  \n" +
			"						FROM 	binmst  \n" +
			"						WHERE 	isdeleted = 0  \n" +
			"								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
			"					)  \n" +
			"			\");  \n" +
			"		END IF;  \n" +
			"  \n" +
			"		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
			"			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
			"		ELSE  \n" +
			"			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
			"				ka.refUIDId IN (  \n" +
			"					SELECT 	id  \n" +
			"					FROM 	component_sid_stock  \n" +
			"					WHERE 	isdeleted = 0  \n" +
			"							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
			"				)  \n" +
			"			\");  \n" +
			"		END IF;  \n" +
			"		SET v_WhereClauseFilter = CONCAT(\"  \n" +
			"			EXISTS (  \n" +
			"				SELECT 		1  \n" +
			"				FROM 		kit_allocation ka  \n" +
			"				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
			"				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
			"							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
			"							AND ka.status = 'A'  \n" +
			"							AND (\", v_WhereBinInnerCondition ,\")  \n" +
			"							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
			"			)  \n" +
			"		\");  \n" +
			"	ELSE  \n" +
			"		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
			"	END IF;  \n" +
			"	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
			"  \n" +
			"	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
			"		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
			"		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
			"		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
			"					AND  \n" +
			"						(  \n" +
			"							CASE  \n" +
			"								WHEN kad.partId IS NULL THEN  \n" +
			"									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
			"								ELSE  \n" +
			"									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
			"							END  \n" +
			"						)  \n" +
			"					 \");  \n" +
			"	ELSE  \n" +
			"		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
			"					AND  \n" +
			"						(  \n" +
			"							CASE  \n" +
			"								WHEN kad.partId IS NULL THEN  \n" +
			"									sd.partID = sd.partID  \n" +
			"								ELSE  \n" +
			"									kad.partId = kad.partId  \n" +
			"							END  \n" +
			"						)  \n" +
			"					 \");  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
			"		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
			"					AND	(  \n" +
			"							CASE  \n" +
			"								WHEN kad.partId IS NULL THEN  \n" +
			"									sd.partID = \", pSearchKitAssyID ,\"  \n" +
			"								ELSE  \n" +
			"									kad.partId = \", pSearchKitAssyID ,\"  \n" +
			"							END  \n" +
			"						)  \n" +
			"					\");  \n" +
			"	ELSE  \n" +
			"		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
			"					AND	(  \n" +
			"							CASE  \n" +
			"								WHEN kad.partId IS NULL THEN  \n" +
			"									sd.partID = sd.partID  \n" +
			"								ELSE  \n" +
			"									kad.partId = kad.partId  \n" +
			"							END  \n" +
			"						)  \n" +
			"					\");  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	SET v_WhereKitNameFilter = \" 1 = 1 \";  \n" +
			"    IF(pSearchString IS NOT NULL OR pSearchString != '') THEN  \n" +
			"		SET v_WhereKitNameFilter = CONCAT(v_WhereKitNameFilter, \" AND  name LIKE '%\", pSearchString ,\"%' \");  \n" +
			"    END IF;  \n" +
			"  \n" +
			"	SET v_WhereKitFilterCondition = CONCAT(\" kitReturnStatus != 'Fully Returned' AND ( \");  \n" +
			"	IF (v_ParentWHType = 'M') THEN  \n" +
			"		IF (pIsCheckMRP = 1) THEN  \n" +
			"			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Not Released' OR \");  \n" +
			"		END IF;  \n" +
			"  \n" +
			"		IF (pIsCheckMRR = 1) THEN  \n" +
			"			SET v_WhereKitFilterCondition =  CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Ready To Release' OR \");  \n" +
			"		END IF;  \n" +
			"  \n" +
			"		IF (pIsCheckMRE = 1) THEN  \n" +
			"			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Fully Released' OR \");  \n" +
			"		END IF;  \n" +
			"  \n" +
			"		IF (pIsCheckMWS = 1) THEN  \n" +
			"            SET v_WhereKitFilterCondition =  CONCAT(v_WhereKitFilterCondition, \" shortageLines > 0 OR \");  \n" +
			"		END IF;  \n" +
			"	ELSE  \n" +
			"		IF (pIsCheckPRE = 1) THEN  \n" +
			"			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Fully Released' OR \");  \n" +
			"		END IF;  \n" +
			"  \n" +
			"		IF (pIsCheckPPR = 1) THEN  \n" +
			"			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Partially Released' OR \");  \n" +
			"		END IF;  \n" +
			"  \n" +
			"		IF (pIsCheckPNR = 1) THEN  \n" +
			"			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Not Released' OR \");  \n" +
			"		END IF;  \n" +
			"	END IF;  \n" +
			"	SET v_WhereKitFilterCondition =  CONCAT(v_WhereKitFilterCondition, \" 1 = 0 ) \");  \n" +
			"  \n" +
			"	SET @vSQLMainQuery =  CONCAT(\"  \n" +
			"		SELECT k.* FROM  \n" +
			"			(SELECT	a.*,  \n" +
			"					(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore,  \n" +
			"					FUNC_MISMATCHITEMFORKIT(a.refSalesOrderDetID, IFNULL(a.subAssyID,a.refAssyId), 'M', NULL, NULL) AS mismatchItem,  \n" +
			"					fun_getKitReleaseStatus(a.kitPlanPercentage,totalKitReleaseQty,totalPOReleaseQty,a.assyKitQty,a.assyPOQty,a.totalKitReleasePlan,a.pendingCount) kitReleaseStatus  \n" +
			"				FROM	(  \n" +
			"					SELECT 	sd.id refSalesOrderDetID,  \n" +
			"							sd.kitNumber,  \n" +
			"							IFNULL(kad.partId, sd.partID) assyID,  \n" +
			"							(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
			"							(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
			"							sd.partID assyMainId,  \n" +
			"							c.mfgPN assyMainName,  \n" +
			"							c.PIDCode assyMainPIDCode,  \n" +
			"							kad.partId assySubId,  \n" +
			"							cs.mfgPN assySubName,  \n" +
			"							cs.PIDCode assySubPIDCode,  \n" +
			"							CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
			"							sd.kitNumber kitName,  \n" +
			"							s.id soId,  \n" +
			"							s.poNumber,  \n" +
			"							s.salesOrderNumber,  \n" +
			"							s.poDate,  \n" +
			"							sd.qty,  \n" +
			"							sd.kitQty,  \n" +
			"							kad.totalAssyBuildQty,  \n" +
			"							\", pDeptID ,\" AS deptID,  \n" +
			"							'\", v_ParentWHType ,\"' AS deptType,  \n" +
			"							fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
			"							IFNULL(b.uidCount, 0) uidCount,  \n" +
			"							IFNULL(b.binCount, 0) binCount,  \n" +
			"							ka.totalLines,  \n" +
			"							ka.shortageLines,  \n" +
			"							sd.isHotJob,  \n" +
			"							IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
			"                            r.name as  rohs,  \n" +
			"                         r.rohsIcon as rohsIcon,  \n" +
			"							/*fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
			"							fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
			"							fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  */  \n" +
			"                             ka.minBuild kitBuildFeasibility,  \n" +
			"							fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
			"							sp.totalKitPlan,  \n" +
			"							sp.pendingCount,  \n" +
			"							sp.totalKitReleasePlan,  \n" +
			"                            IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.qty,0) AS assyPOQty,  \n" +
			"							IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.kitQty,0) AS assyKitQty,  \n" +
			"							sp.totalKitReleaseQty,  \n" +
			"							sp.totalPOReleaseQty,  \n" +
			"							(  \n" +
			"								SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
			"								FROM 	holdunholdtrans h  \n" +
			"								WHERE 	h.refTransId = sd.id  \n" +
			"										AND h.refType = 'PO'  \n" +
			"										AND h.`status` = 'H'  \n" +
			"								ORDER BY h.id DESC  \n" +
			"								LIMIT 1  \n" +
			"							) poHalt,  \n" +
			"							(  \n" +
			"								SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
			"								FROM 	(  \n" +
			"										SELECT 	a.haltTooltip  \n" +
			"										FROM 	(  \n" +
			"												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
			"												FROM 	holdunholdtrans h  \n" +
			"												WHERE 	h.refTransId = sd.id  \n" +
			"														AND h.refType = 'KR'  \n" +
			"														AND h.`status` = 'H'  \n" +
			"												ORDER BY h.id DESC  \n" +
			"												LIMIT 1  \n" +
			"										) a  \n" +
			"										UNION  \n" +
			"										SELECT 	b.haltTooltip  \n" +
			"										FROM 	(  \n" +
			"												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
			"												FROM 	holdunholdtrans h  \n" +
			"												WHERE 	h.refTransId = sd.id  \n" +
			"														AND h.refType = 'KA'  \n" +
			"														AND h.`status` = 'H'  \n" +
			"												ORDER BY h.id DESC  \n" +
			"												LIMIT 1  \n" +
			"										) b  \n" +
			"								) c  \n" +
			"							) kitHalt,  \n" +
			"							p.woID,  \n" +
			"							p.workorderNumber,  \n" +
			"							p.id AS id,  \n" +
			"							p.salesOrderDetID,  \n" +
			"							p.refAssyId,  \n" +
			"							p.subAssyID,  \n" +
			"							p.plannKitNumber,  \n" +
			"							p.poQty,  \n" +
			"							p.poDueDate,  \n" +
			"							p.mfrLeadTime,  \n" +
			"							p.materialDockDate,  \n" +
			"							p.kitReleaseQty,  \n" +
			"							p.kitReleaseDate,  \n" +
			"							(DATEDIFF(fun_ConvertUTCDatetimeToSpecificTimeZone('\",vUTCDateTime,\"','\",v_TimeZone,\"'), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
			"							p.feasibilityWithAllocatedQty,  \n" +
			"							fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
			"							p.releasedBy,  \n" +
			"							p.releaseTimeFeasibility,  \n" +
			"							p.kitStatus,  \n" +
			"							p.rushJob,  \n" +
			"							p.woStatusID,  \n" +
			"							p.refPlanId,  \n" +
			"							p.releasedNote,  \n" +
			"							p.releaseKitNumber,  \n" +
			"							p.kitReturnStatus,  \n" +
			"							ka.kitPlanPercentage,  \n" +
			"							fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,'\",vUTCDateTime,\"'), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
			"							ka.allocationUMIDCount allocationUMIDCount  \n" +
			"					FROM 		salesorderdet sd  \n" +
			"					INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
			"					INNER JOIN	component c ON sd.partID = c.id  AND c.isDeleted = 0 AND c.mfgType = 'MFG'  \n" +
			"					Inner Join rfq_rohsmst r on r.id = c.RoHSStatusID  \n" +
			"					LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
			"					LEFT JOIN  	component cs ON kad.partId = cs.id  AND cs.isDeleted = 0  \n" +
			"					LEFT JOIN (  \n" +
			"							SELECT  salesOrderDetID, refAssyId, subAssyID,  \n" +
			"									COUNT(1) totalKitPlan,  \n" +
			"									SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) totalKitReleasePlan,  \n" +
			"									SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
			"									SUM(kitReleaseQty) totalKitReleaseQty,  \n" +
			"									SUM(poQty) totalPOReleaseQty  \n" +
			"									FROM salesorder_plan_detailsmst WHERE isDeleted = 0  \n" +
			"									GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
			"						) AS sp ON sp.salesOrderDetID =  sd.id  AND sp.refAssyId = sd.partID  AND (CASE WHEN kad.partId = sd.partID THEN sp.subAssyID IS NULL ELSE sp.subAssyID = kad.partId END)  \n" +
			"					LEFT JOIN	(  \n" +
			"								SELECT 	a.refSalesOrderDetID,  \n" +
			"									a.assyID,  \n" +
			"									# a.binID,  \n" +
			"									COUNT(1) binCount,  \n" +
			"									SUM(a.uidCount) uidCount,  \n" +
			"									SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
			"								FROM 	(  \n" +
			"										SELECT 		k.refSalesOrderDetID,  \n" +
			"												k.assyID,  \n" +
			"												csd.binID,  \n" +
			"												COUNT(1) uidCount,  \n" +
			"												(  \n" +
			"													SELECT IF( EXISTS(  \n" +
			"														SELECT 	binId  \n" +
			"														FROM 	component_sid_stock  \n" +
			"														WHERE 	binID = csd.binID  \n" +
			"															AND isdeleted = 0  \n" +
			"															and isinstk  =1  \n" +
			"															AND id NOT IN (  \n" +
			"																SELECT 	refUIDId  \n" +
			"																FROM 	kit_allocation  \n" +
			"																WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
			"																		AND assyID = k.assyID  \n" +
			"																		AND `status` = 'A'  \n" +
			"															)  \n" +
			"													), 1, 0)  \n" +
			"												) mismatchUMIDBin  \n" +
			"											FROM 		kit_allocation k  \n" +
			"											INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
			"											INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
			"											INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
			"											WHERE		k.status = 'A'  \n" +
			"														AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
			"														AND	csd.isDeleted = 0  \n" +
			"														AND	b.isDeleted = 0  \n" +
			"														AND	w.isDeleted = 0  \n" +
			"											GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
			"									) AS a  \n" +
			"								GROUP BY   a.refSalesOrderDetID, a.assyID  \n" +
			"							) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
			"					LEFT JOIN 	(  \n" +
			"								SELECT 	k.refSalesOrderDetID,  \n" +
			"									k.assyID,  \n" +
			"									k.totalLines,  \n" +
			"									k.shortageLines,  \n" +
			"									k.kitAllocationPercentage kitPlanPercentage,  \n" +
			"									(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  ,  \n" +
			"                                    k.minBuild  \n" +
			"								FROM 	(  \n" +
			"										SELECT 	k.refSalesOrderDetID,  \n" +
			"											k.assyID,  \n" +
			"											COUNT(1) AS totalLines,  \n" +
			"											SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
			"											ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS kitAllocationPercentage  ,  \n" +
			"                                             min(minBuild) minBuild  \n" +
			"										FROM 	(  \n" +
			"												SELECT 	vk.refSalesOrderDetID,  \n" +
			"														vk.assyID,  vk.qpaWithDnp,  \n" +
			"														vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation,  \n" +
			"														IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
			"														(CASE WHEN vk.connecterTypeID = -2 THEN vk.shortagePins ELSE vk.shortage END) AS shortage ,  \n" +
			"                                                        (  \n" +
			"															CASE  \n" +
			"																WHEN connecterTypeID = -2 THEN  \n" +
			"																	(IFNULL(allocatedpin, 0) / (IFNULL(qpaWithDnp, 0) * bomNumOfPosition))  \n" +
			"																ELSE  \n" +
			"																	(IFNULL(allocatedunit, 0) / IFNULL(qpaWithDnp, 0))  \n" +
			"  \n" +
			"															END  \n" +
			"														) AS minBuild  \n" +
			"												FROM 	vu_kit_allocation_detail vk  \n" +
			"                                                Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  AND sd.isDeleted = 0  \n" +
			"												WHERE    vk.`isNotRequiredKitAllocation` != 1 and vk.qpaWithDnp != 0  \n" +
			"											) k  GROUP BY k.refSalesOrderDetID, k.assyID  \n" +
			"									) k  \n" +
			"							) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
			"					LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
			"									AND p.refAssyId = sd.partID  \n" +
			"									AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
			"					WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
			"								AND 	s.isDeleted = 0  \n" +
			"								AND 	(\", v_WhereClauseFilter ,\")  \n" +
			"								AND 	(\", v_WhereClause ,\")  \n" +
			"				) AS a  \n" +
			"		) AS k WHERE 	(\", v_WhereKitFilterCondition ,\")  AND (\", v_WhereKitNameFilter ,\")  \n" +
			"	\");  \n" +
			"  \n" +
			"	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
			"	PREPARE query2 FROM @SQLStatementCount;  \n" +
			"	EXECUTE query2;  \n" +
			"	DEALLOCATE PREPARE query2;  \n" +
			"  \n" +
			"  IF (v_ParentWHType = 'M') THEN  \n" +
			"		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
			"			ORDER BY isHotJob DESC,  \n" +
			"				 shortageIndicatore DESC,  \n" +
			"				 kitReleaseDate ASC  \n" +
			"			\");  \n" +
			"	ELSE  \n" +
			"		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
			"			ORDER BY isHotJob DESC,  \n" +
			"				 shortageIndicatore DESC,  \n" +
			"				 actualKitReleaseDate ASC  \n" +
			"			\");  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
			"	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
			"	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
			"    EXECUTE mainQuery;  \n" +
			"	DEALLOCATE PREPARE mainQuery;  \n" +
			"  \n" +
			"	SELECT * FROM tempKitDet;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_checkDeleteUIDValidation`;  \n" +
			"CREATE PROCEDURE `Sproc_checkDeleteUIDValidation`(  \n" +
			"	IN pIDs LONGTEXT  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE v_PackingSlipId INT;  \n" +
			"    DECLARE v_BinId INT;  \n" +
			"    DECLARE v_PartId INT;  \n" +
			"    DECLARE v_PackagingId INT;  \n" +
			"    DECLARE v_Count INT;  \n" +
			"    DECLARE v_ErrorCode INT;  \n" +
			"    DECLARE v_ReceivedStatus VARCHAR(5);  \n" +
			"  \n" +
			"     /* To handle Response */  \n" +
			"    DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempValidationDetail  \n" +
			"    (  \n" +
			"		partId INT,  \n" +
			"        packaging INT,  \n" +
			"        packingSlipId INT,  \n" +
			"        binId INT,  \n" +
			"		uidData LONGTEXT,  \n" +
			"		pidCode VARCHAR(255),  \n" +
			"        packingSlipNumber VARCHAR(255),  \n" +
			"        binName VARCHAR(255),  \n" +
			"        packagingName VARCHAR(255),  \n" +
			"        uidCount INT,  \n" +
			"        receivedStatus VARCHAR(5),  \n" +
			"        receivedStatusValue VARCHAR(50),  \n" +
			"        supplierID INT,  \n" +
			"        supplierName VARCHAR(255)  \n" +
			"	);  \n" +
			"  \n" +
			"    /* create temp table to check internal umid criteria for errorcode 1 & 2 */  \n" +
			"    DROP TEMPORARY TABLE IF EXISTS tempUIDDet;  \n" +
			"    CREATE TEMPORARY TABLE tempUIDDet AS  \n" +
			"		SELECT 	css.id,				css.uid,				css.refcompid,  \n" +
			"				css.packaging,		a.packingSlipId,		css.fromBin,  \n" +
			"                c.PIDCode,			a.packingSlipNumber,    a.receivedStatus,  \n" +
			"                a.supplierID, 		a.packingSlipModeStatus,  \n" +
			"                fun_getPackingSlipDetailStatusByKey(a.receivedStatus) receivedStatusValue,  \n" +
			"                fun_getBinNameByID(css.fromBin) binName,  \n" +
			"                fun_getPackagingNameByID(css.packaging) packagingName,  \n" +
			"				fun_getMfgCodeAndNameByID(a.supplierID) supplierName  \n" +
			"		FROM  \n" +
			"			component_sid_stock css  \n" +
			"				INNER JOIN	component c ON css.refcompid = c.id  AND c.isDeleted = 0  \n" +
			"				LEFT JOIN  \n" +
			"					(SELECT  \n" +
			"						cspd.refComponentSidStockID, ps.id packingSlipId, 		ps.packingSlipNumber,  \n" +
			"                        psd.receivedStatus,			 ps.packingSlipModeStatus,  \n" +
			"                        ps.mfgCodeID supplierID  \n" +
			"					FROM  \n" +
			"						component_sid_stock_packing_detail cspd  \n" +
			"					INNER JOIN packing_slip_material_receive_det psd ON cspd.refPackingSlipDetailID = psd.id  \n" +
			"						AND psd.isDeleted = 0  \n" +
			"					INNER JOIN packing_slip_material_receive ps ON psd.refPackingSlipMaterialRecID = ps.id  \n" +
			"						AND ps.isDeleted = 0  \n" +
			"					GROUP BY cspd.refComponentSidStockID, ps.id, ps.packingSlipNumber,  \n" +
			"							psd.receivedStatus,	ps.packingSlipModeStatus, ps.mfgCodeID  \n" +
			"					) a  \n" +
			"				ON a.refComponentSidStockID = IFNULL(css.parentUIDId, css.id)  \n" +
			"		WHERE FIND_IN_SET(css.id ,pIDs) AND css.fromBin > 0;  \n" +
			"  \n" +
			"	/* check draft mode data exists for selected umid(s) */  \n" +
			"	SELECT COUNT(1) INTO v_Count  \n" +
			"		FROM  \n" +
			"			(SELECT COUNT(1) FROM tempUIDDet WHERE packingSlipModeStatus = 'D' AND fromBin > 0  \n" +
			"						GROUP BY packaging, packingSlipId, fromBin, refcompid, receivedStatus)  as psDraftCount;  \n" +
			"  \n" +
			"	IF(v_Count > 0) THEN  \n" +
			"		/* Set Reponse data for ErrorCode 1 */  \n" +
			"		SET v_ErrorCode = 1;  \n" +
			"		INSERT INTO tempValidationDetail (partId, packaging, packingSlipId, binId, uidData, pidCode, packingSlipNumber, binName, packagingName, uidCount, receivedStatus, receivedStatusValue, supplierID, supplierName)  \n" +
			"				SELECT tu.refcompid, tu.packaging,	tu.packingSlipId, tu.fromBin, GROUP_CONCAT(id, '###', uid SEPARATOR '@@@'), tu.PIDCode, tu.packingSlipNumber, tu.binName, tu.packagingName, COUNT(tu.uid), tu.receivedStatus, tu.receivedStatusValue, tu.supplierID, tu.supplierName  \n" +
			"                FROM tempUIDDet tu WHERE tu.packingSlipModeStatus = 'D' GROUP BY tu.refcompid, tu.packaging, tu.packingSlipId, tu.fromBin, tu.receivedStatus;  \n" +
			"	ELSE  \n" +
			"		SET v_Count = 0;  \n" +
			"		/* check same packingslip, packaging, partid, binid & receivedStatus having data exists for selected umid(s) */  \n" +
			"		SELECT COUNT(1) INTO v_Count  \n" +
			"			FROM  \n" +
			"				(SELECT COUNT(1) FROM tempUIDDet WHERE fromBin > 0 GROUP BY packaging, packingSlipId, fromBin, refcompid, receivedStatus) as psCount;  \n" +
			"  \n" +
			"		IF(v_Count > 1) THEN  \n" +
			"			/* Set Reponse data for ErrorCode 2 */  \n" +
			"			SET v_ErrorCode = 2;  \n" +
			"			INSERT INTO tempValidationDetail (partId, packaging, packingSlipId, binId, uidData, pidCode, packingSlipNumber, binName, packagingName, uidCount, receivedStatus, receivedStatusValue, supplierID, supplierName)  \n" +
			"					SELECT tu.refcompid, tu.packaging,	tu.packingSlipId, tu.fromBin, GROUP_CONCAT(id, '###', uid SEPARATOR '@@@'), tu.PIDCode, tu.packingSlipNumber, tu.binName, tu.packagingName, COUNT(tu.uid), tu.receivedStatus, tu.receivedStatusValue, tu.supplierID, tu.supplierName  \n" +
			"					FROM tempUIDDet tu GROUP BY tu.refcompid, tu.packaging,	tu.packingSlipId, tu.fromBin, tu.receivedStatus;  \n" +
			"		ELSE  \n" +
			"			SET v_Count = 0;  \n" +
			"			/* set value for bin, packing slip, packaging and partid */  \n" +
			"			SELECT 	t.packaging, t.packingSlipId, t.fromBin, t.refcompid, t.receivedStatus  \n" +
			"					INTO v_PackagingId, v_PackingSlipId, v_BinId, v_PartId, v_ReceivedStatus  \n" +
			"				FROM tempUIDDet t GROUP BY t.packaging, t.packingSlipId, t.fromBin, t.refcompid, t.receivedStatus;  \n" +
			"  \n" +
			"			/* check any pending umid exits for same bin, packing slip, packaging and partid */  \n" +
			"			DROP TEMPORARY TABLE IF EXISTS tempPendingUIDDet;  \n" +
			"			CREATE TEMPORARY TABLE tempPendingUIDDet AS  \n" +
			"			SELECT	vucp.BinID,		vucp.PartId,	vucp.packingSlipID,		vucp.packagingID,  \n" +
			"					vucp.receivedStatus,			c.PIDCode,				ps.packingSlipNumber,  \n" +
			"					fun_getBinNameByID(vucp.BinID) binName, 				ps.mfgCodeID supplierID,  \n" +
			"					fun_getPackagingNameByID(vucp.packagingID) packagingName,  \n" +
			"					fun_getPackingSlipDetailStatusByKey(vucp.receivedStatus) receivedStatusValue,  \n" +
			"					fun_getMfgCodeAndNameByID(ps.mfgCodeID) supplierName  \n" +
			"					FROM  \n" +
			"						vu_umid_creation_pending vucp  \n" +
			"							INNER JOIN component c ON vucp.PartId = c.id AND c.partType != 4 AND c.isDeleted = 0 AND c.mfgType ='MFG'  \n" +
			"							INNER JOIN	packing_slip_material_receive ps ON ps.id = vucp.packingSlipID	AND ps.isdeleted = 0  \n" +
			"						WHERE	vucp.BalanceQty > 0  \n" +
			"								AND vucp.packagingID = v_PackagingId  \n" +
			"								AND vucp.BinID = v_BinId  \n" +
			"								AND vucp.PartId = v_PartId  \n" +
			"								AND vucp.packingSlipID <> v_PackingSlipId  \n" +
			"								AND vucp.receivedStatus = v_ReceivedStatus;  \n" +
			"  \n" +
			"			SELECT COUNT(1) INTO v_Count  \n" +
			"				 FROM tempPendingUIDDet GROUP BY packagingID, packingSlipID, BinID, PartId, receivedStatus;  \n" +
			"  \n" +
			"			IF(v_Count > 0) THEN  \n" +
			"				SET v_ErrorCode = 3;  \n" +
			"				INSERT INTO tempValidationDetail (partId, packaging, packingSlipId, binId, uidData, pidCode, packingSlipNumber, binName, packagingName, uidCount, receivedStatus, receivedStatusValue, supplierID, supplierName)  \n" +
			"					SELECT tp.PartId, tp.packagingID, tp.packingSlipID, tp.BinID, NULL, tp.PIDCode, tp.packingSlipNumber, tp.binName, tp.packagingName, NULL, tp.receivedStatus, tp.receivedStatusValue, tp.supplierID, tp.supplierName  \n" +
			"					FROM tempPendingUIDDet tp;  \n" +
			"			ELSE  \n" +
			"				SET v_ErrorCode = 0;  \n" +
			"			END IF;  \n" +
			"		END IF;  \n" +
			"    END IF;  \n" +
			"  \n" +
			"    SELECT v_ErrorCode AS errorCode;  \n" +
			"    IF(v_ErrorCode <> 0) THEN  \n" +
			"		SELECT * FROM tempValidationDetail;  \n" +
			"    END IF;  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempValidationDetail;  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempPendingUIDDet;  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempUIDDet;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetPrintUMIDBarcodeData`;  \n" +
			"CREATE PROCEDURE `Sproc_GetPrintUMIDBarcodeData`(  \n" +
			"	IN pUMIDIds VARCHAR(10000),  \n" +
			"	IN pUserId VARCHAR(50)  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	SELECT 		css.id id,  \n" +
			"			fun_getMfgCodeByPartID(css.refcompid) MFGCode,  \n" +
			"			(  \n" +
			"				CASE  \n" +
			"					WHEN  css.stockInventoryType = 'NI' THEN  \n" +
			"						fun_getUMIDPackingSlipNameByID(css.id)  \n" +
			"					WHEN  css.stockInventoryType = 'OI' THEN  \n" +
			"						css.uid  \n" +
			"				END  \n" +
			"			) COFC,  \n" +
			"			fun_getPackagingNameByID(css.packaging) packaging,  \n" +
			"			css.lotCode lotCode,  \n" +
			"			fun_getMSLLevelByID(c.mslID, TRUE) mslLevel,  \n" +
			"			css.pkgQty Qty,  \n" +
			"			css.uid uid,  \n" +
			"			c.PIDCode PIDCode,  \n" +
			"			css.dateCode dateCode,  \n" +
			"            fun_getDateCodeFormatById(css.dateCodeFormatID) AS dateCodeFormat,  \n" +
			"			fun_getCostCategoryNameByID(css.costCategoryID, FALSE) priceCategoryID,  \n" +
			"			c.mfgPNDescription mfgPNDescription,  \n" +
			"			(  \n" +
			"				CASE  \n" +
			"					WHEN roh.refMainCategoryID = -2 THEN 'No'  \n" +
			"					WHEN (roh.refMainCategoryID = -1 AND roh.name != 'RoHS-Exempt') THEN 'Yes'  \n" +
			"					WHEN (roh.refMainCategoryID = -1 AND roh.name = 'RoHS-Exempt') THEN 'Y-Exmpt'  \n" +
			"					ELSE roh.name  \n" +
			"				END  \n" +
			"			) rohs,  \n" +
			"			DATE_FORMAT(css.expiryDate, \"%m/%d/%Y\") dateofExpire,  \n" +
			"			css.customerConsign customerConsign,  \n" +
			"			fun_getMountingTypeNameByID(c.mountingTypeID) mountingType,  \n" +
			"			IFNULL(c.partPackage, fun_getPackageCaseNameByID(c.partPackageID)) partPackage,  \n" +
			"			fun_getUserCodeByID(pUserId) createdUserCode,  \n" +
			"			c.serialNumber systemId  \n" +
			"	FROM 		component_sid_stock css  \n" +
			"	INNER JOIN 	vu_component_mpn c ON c.id = css.refcompid  \n" +
			"	INNER JOIN	rfq_rohsmst roh ON roh.id = c.RoHSStatusID AND roh.isDeleted = 0  \n" +
			"	WHERE 		css.isDeleted = 0  \n" +
			"				AND FIND_IN_SET(css.id, pUMIDIds);  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
			"CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
			"	IN ppageIndex INT,  \n" +
			"	IN precordPerPage INT,  \n" +
			"	IN pOrderBy VARCHAR(255),  \n" +
			"	IN pWhereClause VARCHAR(16383),  \n" +
			"	IN pWHId INT,  \n" +
			"	IN pBinId INT,  \n" +
			"	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
			"	IN pMountingTypeIDs VARCHAR(16383),  \n" +
			"	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
			"	IN pAssyIDs VARCHAR(16383),  \n" +
			"	IN pRestrictPart TINYINT,  \n" +
			"	IN pExpireMaterial TINYINT,  \n" +
			"	IN pPartId INT,  \n" +
			"	IN pIsShowPackagingAlias TINYINT,  \n" +
			"	IN pStandardIDs VARCHAR(16383),  \n" +
			"	IN pStandardsClassIDs VARCHAR(16383),  \n" +
			"	IN pCostCategoryIDs VARCHAR(16383),  \n" +
			"	IN pDateCode VARCHAR(16383),  \n" +
			"	IN pIsAvailableToSell TINYINT,  \n" +
			"	IN pIsRestrictedUMID TINYINT,  \n" +
			"	IN pIsInternalStock TINYINT,  \n" +
			"	IN pIsCustomerStock TINYINT,  \n" +
			"	IN pdepartmentIDs VARCHAR(16383),  \n" +
			"	IN pwarehouseType VARCHAR(255),  \n" +
			"	IN pWarehouse VARCHAR(16383),  \n" +
			"	IN pExpiredDay INT,  \n" +
			"	IN pRohsStatusIDs VARCHAR(16383),  \n" +
			"	IN pCustomerId INT,  \n" +
			"	IN pFromDate DATE,  \n" +
			"	IN pToDate DATE,  \n" +
			"	IN pSearchTextAttribute LONGTEXT,  \n" +
			"    IN pMfgCodeIDs VARCHAR(16383),  \n" +
			"    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
			"	IN pInventoryType VARCHAR(255),  \n" +
			"    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
			"    IN pIsNonCofc TINYINT,  \n" +
			"    IN pEmployeeIDs VARCHAR(16383)  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE pOffset INT;  \n" +
			"	DECLARE rowNumWhere VARCHAR(255);  \n" +
			"	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
			"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
			"	DECLARE v_TimeZone VARCHAR(50);  \n" +
			"	DECLARE attributeSearchString LONGTEXT;  \n" +
			"	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
			"	DECLARE attributeSearchChip  VARCHAR(500) DEFAULT NULL;  \n" +
			"	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
			"	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
			"    DECLARE v_ExpiryDate datetime;  \n" +
			"    DECLARE v_PartIDs VARCHAR(16383);  \n" +
			"	DECLARE vMfgCodeFormat INT;  \n" +
			"  \n" +
			"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
			"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
			"	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
			"	SET v_DescriptionWhereClause = '';  \n" +
			"    SET v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
			"  \n" +
			"	IF (pOrderBy IS NOT NULL) THEN  \n" +
			"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
			"	ELSE  \n" +
			"		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
			"		SET pWhereClause = ' 1=1';  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
			"		SET pInnerQueryWhereClause = ' ';  \n" +
			"	END IF;  \n" +
			"  \n" +
			"    IF(pIsNonCofc = 1) THEN  \n" +
			"		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
			"	END IF;  \n" +
			"  \n" +
			"    /* Non COFc records filter */  \n" +
			"	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
			"		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
			"	END IF;  \n" +
			"  \n" +
			"    IF(pEmployeeIDs IS NOT NULL AND pEmployeeIDs != '') THEN  \n" +
			"		SET pWhereClause = CONCAT(pWhereClause, ' AND createdBy in (', pEmployeeIDs, ') ');  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
			"		IF(pIsShowPackagingAlias = 1) THEN  \n" +
			"			SELECT CONCAT(c.packingAliasParts)  \n" +
			"            into	v_PartIDs  \n" +
			"			FROM 	vu_component_packingalias c  \n" +
			"			WHERE 	c.refComponentID = pPartId;  \n" +
			"		ELSE  \n" +
			"			select pPartId into v_PartIDs;  \n" +
			"		END IF;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	/*below query need to refactor*/  \n" +
			"	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
			"		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
			"		SET attributeSearchString = pSearchTextAttribute;  \n" +
			"		do_this:  \n" +
			"		LOOP  \n" +
			"			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
			"			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
			"			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
			"			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
			"			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
			"			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
			"			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
			"				LEAVE do_this;  \n" +
			"			END IF;  \n" +
			"		END LOOP do_this;  \n" +
			"	END IF;  \n" +
			"	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
			"		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
			"		FROM 	kit_allocation_assy_detail  \n" +
			"		WHERE 	isDeleted = 0  \n" +
			"			AND partId IN (SELECT id FROM component WHERE mfgcodeid = pCustomerId);  \n" +
			"	END IF;  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
			"	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
			"		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
			"		SELECT 	k.refUIDId  \n" +
			"		FROM 	kit_allocation k  \n" +
			"		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
			"		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
			"		AND	k.status = 'A';  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
			"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
			"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
			"	ELSE  \n" +
			"		SET rowNumWhere = '';  \n" +
			"	END IF;  \n" +
			"  \n" +
			"    DROP temporary table if exists temp_component_sid_stock;  \n" +
			"    CREATE temporary table temp_component_sid_stock(  \n" +
			"		  id int NOT NULL DEFAULT '0',  \n" +
			"		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
			"		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
			"		  uid varchar(15) DEFAULT NULL,  \n" +
			"		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
			"		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
			"		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
			"		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
			"		  fromUIDId int DEFAULT NULL,  \n" +
			"		  fromUID varchar(15) DEFAULT NULL,  \n" +
			"		  parentUIDId int DEFAULT NULL,  \n" +
			"		  parentUID varchar(15) DEFAULT NULL,  \n" +
			"		  mfgcodeID int NOT NULL,  \n" +
			"		  mfg text,  \n" +
			"		  refcompid int DEFAULT NULL,  \n" +
			"		  mfgPN varchar(100) NOT NULL,  \n" +
			"		  PIDCode varchar(109) NOT NULL,  \n" +
			"		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
			"		  mslLevel varchar(58) DEFAULT NULL,  \n" +
			"		  RoHSStatusID int NOT NULL,  \n" +
			"		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
			"		  rohsName varchar(50) DEFAULT NULL,  \n" +
			"		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
			"		  spq decimal(18,8) DEFAULT NULL,  \n" +
			"		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
			"		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
			"		  uom int DEFAULT NULL,  \n" +
			"          uomClassID int DEFAULT NULL,  \n" +
			"		  uomName varchar(100) NOT NULL,  \n" +
			"		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
			"		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
			"		  packaginggroupID int DEFAULT NULL,  \n" +
			"		  packaging int DEFAULT NULL,  \n" +
			"		  packagingName varchar(100) NOT NULL,  \n" +
			"		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
			"		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
			"		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
			"		  costCategoryID int DEFAULT NULL,  \n" +
			"		  costCategory varchar(147) DEFAULT NULL,  \n" +
			"		  lotCode varchar(255) DEFAULT NULL,  \n" +
			"		  dateCode varchar(10) DEFAULT NULL,  \n" +
			"		  UMIDrohsStatusID int NOT NULL,  \n" +
			"		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
			"		  binID int DEFAULT NULL,  \n" +
			"		  location varchar(110) DEFAULT NULL,  \n" +
			"		  side varchar(5) NOT NULL DEFAULT '',  \n" +
			"		  warehouseID int DEFAULT NULL,  \n" +
			"		  warehouse varchar(50) NOT NULL,  \n" +
			"		  warehouseType varchar(50) DEFAULT NULL,  \n" +
			"		  department varchar(50) NOT NULL,  \n" +
			"		  departmentID int NOT NULL DEFAULT '0',  \n" +
			"		  fromBin int DEFAULT NULL,  \n" +
			"		  fromBinName varchar(110) DEFAULT NULL,  \n" +
			"		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
			"		  fromWarehouse int DEFAULT NULL,  \n" +
			"		  fromWHName varchar(50) NOT NULL,  \n" +
			"		  fromDepartment int DEFAULT NULL,  \n" +
			"		  fromDepartmentName varchar(50) NOT NULL,  \n" +
			"		  orgRecBin int DEFAULT NULL,  \n" +
			"		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
			"		  orgRecWarehouse int DEFAULT NULL,  \n" +
			"		  orgRecWHName varchar(50) NOT NULL,  \n" +
			"		  orgRecDepartment int DEFAULT NULL,  \n" +
			"		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
			"		  expiryDate date DEFAULT NULL,  \n" +
			"		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
			"		  pcbPerArray int DEFAULT NULL,  \n" +
			"		  nickName varchar(50) DEFAULT NULL,  \n" +
			"		  specialNote varchar(1000) DEFAULT NULL,  \n" +
			"		  isinStk tinyint(1) DEFAULT NULL,  \n" +
			"		  woNumber varchar(255) DEFAULT NULL,  \n" +
			"		  refRestrictUMIDId int DEFAULT NULL,  \n" +
			"		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
			"		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
			"		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
			"		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
			"		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
			"		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
			"		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
			"		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
			"		  mountingTypeID int NOT NULL,  \n" +
			"		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
			"		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
			"		  partPackage varchar(50) DEFAULT NULL,  \n" +
			"		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
			"		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
			"		  detailDescription text,  \n" +
			"		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
			"		  customerID int DEFAULT NULL,  \n" +
			"		  customer text,  \n" +
			"		  assyID int DEFAULT NULL,  \n" +
			"		  assembly varchar(109),  \n" +
			"		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
			"		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
			"		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
			"          cpnMFGCodeID INT DEFAULT NULL,  \n" +
			"		  cpnMFGCode text,  \n" +
			"		  refCPNMFGPNID int DEFAULT NULL,  \n" +
			"		  cpnMFGPN varchar(100),  \n" +
			"		  refSupplierPartId int DEFAULT NULL,  \n" +
			"		  supplierMFGCode text,  \n" +
			"		  supplieMFGPN varchar(100),  \n" +
			"		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
			"		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
			"		  isTransit varchar(10) DEFAULT NULL,  \n" +
			"		  searchUser varchar(50) DEFAULT NULL,  \n" +
			"		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
			"		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
			"		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
			"		  createdAt varchar(50) DEFAULT NULL,  \n" +
			"		  createdBy varchar(255) NOT NULL,  \n" +
			"		  createdByName varchar(50) DEFAULT NULL,  \n" +
			"		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
			"		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
			"		  updatedAt varchar(50) DEFAULT NULL,  \n" +
			"		  updatedBy varchar(255) DEFAULT NULL,  \n" +
			"		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
			"		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
			"		  allocatedToKit text,  \n" +
			"		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
			"		  packingSupplierName text,  \n" +
			"		  packingSlipId int DEFAULT NULL,  \n" +
			"		  packingSlipSupplierId int DEFAULT NULL,  \n" +
			"          packingSlipNumber VARCHAR(100) DEFAULT NULL,  \n" +
			"          cocDocumentCount int default 0,  \n" +
			"          parentCofCDocumentCount int default 0,  \n" +
			"          createByRoleId int default null,  \n" +
			"          updateByRoleId int default null,  \n" +
			"          isReservedStock TINYINT DEFAULT FALSE,  \n" +
			"          reservedStock VARCHAR(10),  \n" +
			"          custAssyPN varchar(100) DEFAULT NULL  \n" +
			"		);  \n" +
			"	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
			"					(		id, 				scanlabel, 			umidPrefix, 			uid,					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
			"							stockInventoryType, displayStockInventoryType, 					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
			"                            parentUID, 			mfgcodeID, 			mfg, 					refcompid, 				mfgPN, 					PIDCode,  \n" +
			"                            packageQty, 		mslLevel, 			RoHSStatusID, 			rohsIcon, 				rohsName, 				mfgPNDescription,  \n" +
			"                            spq, 				pkgQty, 			pkgUnit, 				uom, 					uomClassID, 			uomName,  \n" +
			"                            orgPkgUnit, 		orgQty, 			packaginggroupID, 		packaging, 				packagingName, 			printStatus,  \n" +
			"                            tentativePrice, 	costScrapQty, 		costCategoryID, 		costCategory, 			lotCode, 				dateCode,  \n" +
			"                            UMIDrohsStatusID, 	UMIDrohsStatus, 	binID, 					location, 				side, 					warehouseID,  \n" +
			"                            warehouse, 			warehouseType, 		department, 			departmentID, 			fromBin, 				fromBinName,  \n" +
			"                            fromSide, 			fromWarehouse, 		fromWHName, 			fromDepartment, 		fromDepartmentName, 	orgRecBin,  \n" +
			"                            orgRecBinName, 		orgRecWarehouse, 	orgRecWHName, 			orgRecDepartment, 		orgRecDepartmentName, 	expiryDate,  \n" +
			"                            expiredStatus, 		pcbPerArray, 		nickName, 				specialNote, 			isinStk, 				woNumber,  \n" +
			"                            refRestrictUMIDId, 	isUMIDRestrict, 	UMIDRestricted, 		restrictUsePermanently, restrictUSEwithpermission,  \n" +
			"                            restrictPackagingUsePermanently, 		restrictPackagingUseWithpermission, 			reasonUMIDRestricted, 	countOfRestrictUMID,  \n" +
			"                            mountingTypeID, 	mountingTypeName, 	externalPartPackage, 	partPackage, 			internalPartPackage, 	isCustom,  \n" +
			"                            detailDescription, 	pictureCount, 		customerID, 			customer, 				assyID,					assembly,  \n" +
			"                            cpn, 				mfgAvailable, 		customerConsign, 		cpnMFGCodeID, 			cpnMFGCode, 			refCPNMFGPNID,  \n" +
			"                            cpnMFGPN, 			refSupplierPartId, 	supplierMFGCode, 		supplieMFGPN, 			totalScrapUnit, 		perScrapQty,  \n" +
			"                            isTransit, 			searchUser, 		mfrDateCodeFormatID, 	mfrDateCode, 			mfrDateCodeFormat, 		createdAt,  \n" +
			"                            createdBy, 			createdByName, 		createdbyRole, 			createdUserCode, 		createByRoleId, 		updatedAt,  \n" +
			"                            updatedBy, 			umidModifiedBy, 	updatedbyRole, 			updateByRoleId, 		allocatedToKit, 		packingSlipName,  \n" +
			"                            packingSupplierName,packingSlipId, 		packingSlipSupplierId, 	packingSlipNumber,		isReservedStock,		reservedStock,  \n" +
			"                            custAssyPN)  \n" +
			"					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
			"							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
			"							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
			"							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
			"							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
			"                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
			"                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
			"							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
			"							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
			"							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
			"							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
			"							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
			"							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
			"							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
			"							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
			"							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
			"							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCodeID,			cpnMFGCode, 		 	refCPNMFGPNID,  \n" +
			"                            cpnMFGPN,  			refSupplierPartId,	supplierMFGCode,		supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
			"							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
			"							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
			"                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
			"                            packingSupplierName,packingSlipId,		packingSlipSupplierId,	packingSlipNumber,		isReservedStock,		reservedStock,  \n" +
			"                            custAssyPN  \n" +
			"		FROM 		(  \n" +
			"					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
			"								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
			"										WHEN css.receiveMaterialType = 'CP' THEN 'Customer Consigned Part'  \n" +
			"										ELSE NULL  \n" +
			"								END) displayReceiveMaterialType,  \n" +
			"								css.stockInventoryType,  \n" +
			"								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Incoming Stock'  \n" +
			"										WHEN css.stockInventoryType = 'OI' THEN 'Move Non-Q2C to Q2C Stock'  \n" +
			"										WHEN css.stockInventoryType = 'AI' THEN 'Non-UMID Assembly Stock'  \n" +
			"										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
			"										ELSE NULL  \n" +
			"								END) displayStockInventoryType,  \n" +
			"								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
			"								fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat ,\") AS mfg,			css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
			"								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
			"								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
			"								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
			"                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
			"                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
			"                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * IFNULL(c.price, 0)), 2) costScrapQty,  \n" +
			"                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * 100), 2) perScrapQty,  \n" +
			"                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
			"								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
			"								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
			"								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
			"								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
			"								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
			"								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
			"								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
			"								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
			"								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
			"								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
			"								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
			"								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
			"								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
			"								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,  \n" +
			"								fun_GetFormattedMfgCode(cust.mfgCode, cust.mfgName,\", vMfgCodeFormat ,\") AS customer,  \n" +
			"								css.assyID,					assy.PIDCode assembly,  \n" +
			"								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
			"								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
			"								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
			"								css.refCPNMFGPNID,	 m_cpn.id cpnMFGCodeID,  \n" +
			"                                fun_GetFormattedMfgCode(m_cpn.mfgCode, m_cpn.mfgName,\", vMfgCodeFormat ,\") AS cpnMFGCode,  \n" +
			"                                cpn_comp.mfgPN cpnMFGPN,  \n" +
			"                                css.refSupplierPartId,  \n" +
			"								fun_GetFormattedMfgCode(m_supp.mfgCode, m_supp.mfgName,\", vMfgCodeFormat ,\") AS supplierMFGCode,  \n" +
			"                                supp_comp.mfgPN supplieMFGPN,  \n" +
			"								(IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0)) totalScrapUnit,  \n" +
			"								null isTransit,  \n" +
			"								null searchUser,  \n" +
			"								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
			"								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
			"								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
			"								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
			"								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
			"								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
			"								kit.kitname allocatedToKit,  \n" +
			"								null packingSlipName,  \n" +
			"								null packingSupplierName,  \n" +
			"								null packingSlipId,  \n" +
			"								null packingSlipSupplierId,  \n" +
			"                                NULL packingSlipNumber,  \n" +
			"                                css.isReservedStock,  \n" +
			"                                IF(css.isReservedStock = 0,'No','Yes') AS reservedStock,		c.custAssyPN  \n" +
			"					FROM 		component_sid_stock css  \n" +
			"					INNER JOIN 	vu_component_mpn c on css.refcompid = c.id \",  \n" +
			"						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
			"						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
			"                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
			"                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
			"						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
			"									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
			"								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
			"									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
			"								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
			"									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
			"								else ''  \n" +
			"                        end),  \n" +
			"                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
			"                        /*below query need to refactor*/  \n" +
			"                        (case when (pIsAvailableToSell = 1) THEN  \n" +
			"							' AND not exists (  \n" +
			"									SELECT 	1  \n" +
			"									FROM 	rfq_lineitems_alternatepart a  \n" +
			"                                     INNER JOIN component cr ON a.mfgPNID = cr.id AND cr.isDeleted = 0  \n" +
			"									LEFT JOIN component_attributes ca ON cr.id = ca.refComponentID AND ca.isDeleted = 0  \n" +
			"									LEFT JOIN component_attributes da ON ca.packaginggroupID = da.packaginggroupID AND da.isDeleted = 0  \n" +
			"									LEFT JOIN component cp ON da.refComponentID = cp.id AND cp.isDeleted = 0  \n" +
			"									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
			"                                   /* INNER JOIN 	vu_component_packingalias cr ON a.mfgPNID = cr.refComponentID  \n" +
			"									WHERE 	find_in_set(c.id, cr.packingAliasParts) */  \n" +
			"									and 	a.isDeleted = 0  \n" +
			"									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3)  \n" +
			"								)  \n" +
			"						' else '' end),  \n" +
			"					\"  \n" +
			"					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
			"					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
			"					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
			"					inner join uoms u on css.uom = u.id  \n" +
			"					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
			"					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
			"					inner join binmst b on css.binID = b.id \" ,  \n" +
			"						(Case  \n" +
			"							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
			"							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
			"							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
			"                            else ''  \n" +
			"						end),  \n" +
			"					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
			"						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
			"                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
			"						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
			"					\"inner join binmst fb on css.fromBin = fb.id  \n" +
			"					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
			"					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
			"					inner join binmst ob on css.orgRecBin = ob.id  \n" +
			"					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
			"					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
			"					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
			"					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
			"					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
			"					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
			"					left join (  \n" +
			"								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
			"								FROM 		component_sid_stock_history cssh  \n" +
			"								where 		cssh.scrappedUnit > 0  \n" +
			"								GROUP BY 	cssh.refUIDId  \n" +
			"					) cssh on css.id = cssh.refUIDId  \n" +
			"                   left join (  \n" +
			"								SELECT 		vu.umidid,	SUM((IFNULL(vu.scrappedunit,0) - IFNULL(vu.scrapExpiredUnit,0))) AS kitScrappepUnit  \n" +
			"								FROM 		vu_material_consumption_scrapped_det vu  \n" +
			"                                LEFT JOIN  component_sid_stock_history cssh ON cssh.id = vu.componentSIDStockHistoryID AND cssh.isDeleted = 0  \n" +
			"								WHERE 		vu.scrappedunit > 0  \n" +
			"								GROUP BY 	vu.umidid  \n" +
			"					) vuu on vuu.umidid = css.id  \n" +
			"					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
			"					left join component assy on css.assyID = assy.id and assy.category = 3  \n" +
			"					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id  \n" +
			"					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
			"					left join component supp_comp on css.refSupplierPartId = supp_comp.id  \n" +
			"                    left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
			"					left join (  \n" +
			"						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
			"						from (  \n" +
			"							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
			"									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
			"							from component_sid_stock_restrict_umid rest_umid  \n" +
			"						) css_rst where css_rst.rnk = 1  \n" +
			"					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
			"					left join (  \n" +
			"						SELECT 		k.refUIDId,  \n" +
			"									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
			"						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
			"						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
			"						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
			"						INNER JOIN	component c ON k.assyID = c.id  AND c.mfgType = 'MFG' AND c.isDeleted = 0  \n" +
			"						WHERE 		k.status = 'A'  \n" +
			"						GROUP BY 	k.refUIDId  \n" +
			"					) kit  ON kit.refUIDId = css.id  \n" +
			"					WHERE 	css.isdeleted = 0\",  \n" +
			"						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
			"								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
			"							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
			"								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
			"							  when (pCustomerId IS NOT NULL) then  \n" +
			"								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
			"                            else ''  \n" +
			"						end),  \n" +
			"                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
			"                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
			"                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
			"						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
			"						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
			"						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
			"						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
			"                        (case when (pExpireMaterial = 1) THEN  \n" +
			"									(case when (pExpiredDay = 0) THEN  \n" +
			"										CONCAT(' AND css.expiryDate is not null AND css.expiryDate = fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") ')  \n" +
			"									ELSE  \n" +
			"										CONCAT(' AND css.expiryDate is not null AND css.expiryDate BETWEEN fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") AND (fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") + INTERVAL ', pExpiredDay,' DAY ) ')  \n" +
			"									END)  \n" +
			"							  else ''  \n" +
			"						end),  \n" +
			"                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
			"								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
			"							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
			"								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
			"							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
			"								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
			"							 else ''  \n" +
			"                        end),  \n" +
			"						v_DescriptionWhereClause,  \n" +
			"                        pInnerQueryWhereClause,  \n" +
			"				\") As tempUMID\"  \n" +
			"			);  \n" +
			"  \n" +
			"	PREPARE tempSQLQuery FROM @temp_component_sid_stock;  \n" +
			"	EXECUTE tempSQLQuery;  \n" +
			"	DEALLOCATE PREPARE tempSQLQuery;  \n" +
			"  \n" +
			"    # Update count for self documents  \n" +
			"	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
			"	set t.cocDocumentCount = g.cofcCount  \n" +
			"	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
			"  \n" +
			"	# Update count for parent documents  \n" +
			"	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
			"	set t.parentCofCDocumentCount = g.cofcCount  \n" +
			"	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
			"  \n" +
			"    # Update CofC detail  \n" +
			"	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
			"	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
			"											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
			"										else null  \n" +
			"								  end),  \n" +
			"			t.packingSupplierName = fun_GetFormattedMfgCode(ps.mfgCode, ps.mfgName, vMfgCodeFormat),  \n" +
			"			t.packingSlipId = ps.packingSlipId,  \n" +
			"			t.packingSlipSupplierId = ps.packingSlipSupplierId,  \n" +
			"            t.packingSlipNumber = ps.packingSlipNumber  \n" +
			"	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
			"	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
			"  \n" +
			"	# Update CofC detail  \n" +
			"	Update 	temp_component_sid_stock t  \n" +
			"	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
			"	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
			"	and		t.packingSlipId is null  \n" +
			"	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
			"  \n" +
			"    # Update created by role  \n" +
			"    Update temp_component_sid_stock t  \n" +
			"    inner join roles r on r.id = t.createByRoleId  \n" +
			"	set t.createdbyRole = r.name;  \n" +
			"  \n" +
			"    # Update updated by role  \n" +
			"    Update temp_component_sid_stock t  \n" +
			"    inner join roles r on r.id = t.updateByRoleId  \n" +
			"	set t.updatedbyRole = r.name;  \n" +
			"  \n" +
			"    # Update created by name  \n" +
			"    Update temp_component_sid_stock t  \n" +
			"    inner join users u on u.id = t.createdBy  \n" +
			"    inner join employees emp on emp.id = u.employeeID  \n" +
			"	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
			"  \n" +
			"    # Update updated by name  \n" +
			"    Update temp_component_sid_stock t  \n" +
			"    inner join users u on  u.id = t.updatedBy  \n" +
			"    inner join employees emp  on emp.id = u.employeeID  \n" +
			"	set t.umidModifiedBy = emp.initialName ;  \n" +
			"  \n" +
			"    # Update MFR Date Code Format  \n" +
			"    Update temp_component_sid_stock t  \n" +
			"	inner join date_code_format d on d.id = t.mfrDateCodeFormatID  \n" +
			"	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
			"  \n" +
			"    # Update In Transit Data  \n" +
			"	Update temp_component_sid_stock t  \n" +
			"    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
			"	set t.isTransit = 'Yes',  \n" +
			"		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
			"							when (messagetype = 1001) then 'Unauthorized'  \n" +
			"							else ''  \n" +
			"                        end);  \n" +
			"  \n" +
			"	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
			"  \n" +
			"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
			"	PREPARE query1 FROM @SQLStatement1;  \n" +
			"	EXECUTE query1;  \n" +
			"	DEALLOCATE PREPARE query1;  \n" +
			"  \n" +
			"	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \" AND warehouseID) as warehouseDetail\");  \n" +
			"	PREPARE query2 FROM @SQLStatement2;  \n" +
			"	EXECUTE query2;  \n" +
			"	DEALLOCATE PREPARE query2;  \n" +
			"  \n" +
			"	SET @SQLStatement3 = CONCAT(\" SELECT DISTINCT mfgcodeID AS id, mfg AS mfgCodeName from ( \", @vFromSQLQuery, \" AND mfgcodeID ) as mfrDetail\");  \n" +
			"	PREPARE query3 FROM @SQLStatement3;  \n" +
			"	EXECUTE query3;  \n" +
			"	DEALLOCATE PREPARE query3;  \n" +
			"  \n" +
			"    SET @SQLStatement4 = CONCAT(\" SELECT DISTINCT packingSlipSupplierId AS id, packingSupplierName AS  mfgCodeName from ( \", @vFromSQLQuery, \" AND packingSlipSupplierId ) as supplierDetail\");  \n" +
			"	PREPARE query4 FROM @SQLStatement4;  \n" +
			"	EXECUTE query4;  \n" +
			"	DEALLOCATE PREPARE query4;  \n" +
			"  \n" +
			"	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
			"    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
			"	EXECUTE mainQuery;  \n" +
			"	DEALLOCATE PREPARE mainQuery;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetSameCriteriaUMIDPackingSlipDet`;  \n" +
			"CREATE PROCEDURE `Sproc_GetSameCriteriaUMIDPackingSlipDet`(  \n" +
			"	IN pPackagingID INT,  \n" +
			"	IN pBinID INT,  \n" +
			"	IN pPartId INT,  \n" +
			"	IN pUIDId INT,  \n" +
			"    IN pType VARCHAR(50)  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE v_PackingSlipId INT;  \n" +
			"    DECLARE v_PackingSlipDetailID INT;  \n" +
			"    DECLARE v_ReceivedStatus VARCHAR(10);  \n" +
			"    DECLARE v_PackingSlipNumber VARCHAR(55);  \n" +
			"    DECLARE v_PackingSlipModeStatus VARCHAR(5);  \n" +
			"  \n" +
			"    IF(pType = 'UC') THEN  \n" +
			"		SELECT			vucp.packingSlipID,			vucp.PartId,	vucp.packingSlipDetID,  \n" +
			"						vucp.packingSlipNumber,  	vucp.packingSlipSerialNumber,  \n" +
			"                        IFNULL(c.umidSPQ,0) AS partPackagingMinQty,  \n" +
			"						vucp.BinID,  \n" +
			"                        cp.name packagingType,  \n" +
			"                        cp.sourceName,  \n" +
			"                        fun_getBinNameByID(vucp.BinID) AS binName,  \n" +
			"						vucp.packagingID AS packaging,  \n" +
			"						vucp.InQty AS receivedQty,					vucp.UMIDCreatedQty,  \n" +
			"                        vucp.returnQty,  			vucp.BalanceQty,  \n" +
			"						vucp.receivedStatus,    	ps.packingSlipModeStatus,  \n" +
			"                        IF(vucp.receivedStatus = 'P' OR vucp.receivedStatus = 'R' OR ps.packingSlipModeStatus = 'D',TRUE,FALSE) AS isDisable,  \n" +
			"                        ps.isCustConsigned,			ps.CustomerID,  \n" +
			"                        psd.isLineCustConsigned, 	psd.LineCustomerID  \n" +
			"				FROM 		vu_umid_creation_pending vucp  \n" +
			"				INNER JOIN 	component c on c.id = vucp.partId  AND c.mfgType = 'MFG' AND c.isDeleted = 0  \n" +
			"                INNER JOIN 	component_packagingmst cp on cp.id = vucp.packagingID AND cp.isdeleted = 0  \n" +
			"				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.isdeleted = 0  \n" +
			"				JOIN	packing_slip_material_receive_det psd on psd.id = vucp.packingSlipDetID AND psd.isdeleted = 0  \n" +
			"				WHERE   vucp.BalanceQty > 0 AND vucp.BinID = pBinID AND vucp.partId = pPartId GROUP BY vucp.packingSlipDetID;  \n" +
			"    ELSE  \n" +
			"		SELECT  \n" +
			"				 p.refPackingSlipMaterialRecID, ps.packingSlipNumber, ps.packingSlipModeStatus, p.receivedStatus, cp.refPackingSlipDetailID  \n" +
			"			INTO v_PackingSlipId, v_PackingSlipNumber, v_PackingSlipModeStatus, v_ReceivedStatus, v_PackingSlipDetailID  \n" +
			"			FROM  \n" +
			"				component_sid_stock c  \n" +
			"				JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = c.id AND cp.isDeleted = 0  \n" +
			"				JOIN packing_slip_material_receive_det p ON p.id = cp.refPackingSlipDetailID AND p.isDeleted = 0  \n" +
			"				JOIN packing_slip_material_receive ps ON p.refPackingSlipMaterialRecID = ps.id  AND ps.isDeleted = 0  \n" +
			"				AND c.isDeleted = 0 AND c.id = pUIDId;  \n" +
			"  \n" +
			"		SELECT  \n" +
			"			packingSlipID, packagingID, BinID, PartId, nickname, InQty, UMIDCreatedQty, returnQty, BalanceQty, receivedStatus,  \n" +
			"			fun_getMfgCodeAndNameByPartID(PartId) mfgCodeName,  \n" +
			"			fun_getBinNameByID(BinID) binName,  \n" +
			"			fun_getPackingSlipNumberById(packingSlipID) packingSlipNumber,  \n" +
			"			fun_getPackagingNameByID(packagingID) packaging,  \n" +
			"			fun_getAssyPIDCodeByID(PartId) pidCode  \n" +
			"		FROM  \n" +
			"			vu_umid_creation_pending vu  \n" +
			"		WHERE  \n" +
			"			EXISTS(SELECT  \n" +
			"				1  \n" +
			"				FROM  \n" +
			"				component_sid_stock t WHERE  \n" +
			"					t.fromBin = vu.BinID  \n" +
			"					AND t.refcompid = vu.PartId  \n" +
			"					AND t.packaging = vu.packagingID  \n" +
			"					AND t.isDeleted = 0) AND packagingID = pPackagingID AND BinID = pBinID AND PartId = pPartId AND packingSlipID <> v_PackingSlipId AND receivedStatus = v_ReceivedStatus;  \n" +
			"		SELECT v_PackingSlipNumber AS packingSlipNumber, v_PackingSlipDetailID AS packingSlipDetID, v_PackingSlipModeStatus AS packingSlipModeStatus, IF(v_PackingSlipModeStatus = 'D',1,0) AS errorCode;  \n" +
			"    END IF;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_RetriveRestrictUMIDHistory`;  \n" +
			"CREATE PROCEDURE `Sproc_RetriveRestrictUMIDHistory`(  \n" +
			"	IN ppageIndex INT,  \n" +
			"	IN precordPerPage INT,  \n" +
			"	IN pOrderBy VARCHAR(255),  \n" +
			"	IN pWhereClause VARCHAR(16383),  \n" +
			"	IN pUMIDId INT  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE pOffset INT;  \n" +
			"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
			"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
			"	DECLARE v_TimeZone VARCHAR(50);  \n" +
			"  \n" +
			"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
			"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
			"  \n" +
			"	SET @temp_Sproc_RetriveRestrictUMIDHistory = CONCAT(\"  \n" +
			"			SELECT 		cssru.id,		cssru.refUMIDId, 		css.refcompid, 		cssru.restrictType,  \n" +
			"					(  \n" +
			"						CASE  \n" +
			"							WHEN (cssru.restrictType = 'R') THEN  \n" +
			"								'Restrict'  \n" +
			"							WHEN (cssru.restrictType = 'U') THEN  \n" +
			"								'Unrestrict'  \n" +
			"							ELSE  \n" +
			"								''  \n" +
			"						END  \n" +
			"					) AS restrictTypeLabel,  \n" +
			"					cssru.reasonForRestrict,	css.uid,		c.mfgPN,	c.PIDCode,  \n" +
			"					c.restrictUsePermanently,				c.restrictUSEwithpermission,  \n" +
			"					c.restrictPackagingUsePermanently,			c.restrictPackagingUseWithpermission,  \n" +
			"					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
			"					fun_ApplyCommonDateTimeFormatByParaValue(cssru.transactionDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') transactionDate,  \n" +
			"                    fun_ApplyCommonDateTimeFormatByParaValue(cssru.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
			"                    cssru.createdBy,  \n" +
			"					fun_getRoleByID(cssru.createByRoleId) createdbyRole,  \n" +
			"                    fun_getUserNameByID(cssru.createdBy) createdByName  \n" +
			"			FROM 		component_sid_stock_restrict_umid cssru  \n" +
			"			INNER JOIN 	component_sid_stock css ON css.id = cssru.refUMIDId AND css.isDeleted = 0  \n" +
			"			INNER JOIN 	vu_component_mpn c ON c.id = css.refcompid  \n" +
			"			WHERE 		cssru.isDeleted = 0  \n" +
			"						AND cssru.refUMIDId = \",pUMIDId,\"  \n" +
			"	\");  \n" +
			"  \n" +
			"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
			"		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
			"	ELSE  \n" +
			"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
			"		SET pWhereClause = '1=1' ;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
			"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
			"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
			"	ELSE  \n" +
			"		SET rowNumWhere = '';  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	/* to get total count of rows */  \n" +
			"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetriveRestrictUMIDHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
			"	PREPARE query1 FROM @SQLStatement1;  \n" +
			"	EXECUTE query1;  \n" +
			"	DEALLOCATE PREPARE query1;  \n" +
			"  \n" +
			"	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_RetriveRestrictUMIDHistory,\" ) c WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
			"	PREPARE query2 FROM @SQLStatement2;  \n" +
			"	EXECUTE query2;  \n" +
			"	DEALLOCATE PREPARE query2;  \n" +
			"    END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
			"CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(  \n" +
			"	pPageIndex INT,  \n" +
			"	pRecordPerPage INT,  \n" +
			"	pBinID INT,  \n" +
			"	pGlobalSearchUIDString VARCHAR(1000),  \n" +
			"	pSearchUIDString VARCHAR(1000),  \n" +
			"	pSearchString VARCHAR(100),  \n" +
			"	pClusterWHID INT,  \n" +
			"	pKitSalesOrderDetID INT,  \n" +
			"	pKitAssyID INT  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE v_Where VARCHAR(10000);  \n" +
			"	DECLARE pOffset INT;  \n" +
			"	DECLARE rowNumWhere VARCHAR(255);  \n" +
			"  \n" +
			"	SET v_Where = \"\";  \n" +
			"  \n" +
			"	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
			"		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
			"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
			"	ELSE  \n" +
			"		SET rowNumWhere = '';  \n" +
			"	END IF;  \n" +
			"    IF (pGlobalSearchUIDString IS NOT NULL ) THEN  \n" +
			"		SET v_Where = CONCAT(v_Where, \" AND css.uid LIKE '%\", pGlobalSearchUIDString ,\"%'\");  \n" +
			"	END IF;  \n" +
			"  	IF ( pSearchUIDString IS NOT NULL) THEN  \n" +
			"		SET v_Where = CONCAT(v_Where, \" AND css.uid LIKE '%\", pSearchUIDString ,\"%' \");  \n" +
			"	END IF;  \n" +
			"	/* old Logic  \n" +
			"    IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
			"		SET v_Where = CONCAT(v_Where, \" AND (css.id IN (  \n" +
			"				SELECT 	id  \n" +
			"				FROM 	component_sid_stock  \n" +
			"				WHERE 	isdeleted = 0  \n" +
			"						AND (uid LIKE '%\", pGlobalSearchUIDString ,\"%' AND uid LIKE '%\", pSearchUIDString ,\"%')  \n" +
			"			)  \n" +
			"		)\");  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NULL) THEN  \n" +
			"		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
			"			SELECT 	id  \n" +
			"			FROM 	component_sid_stock  \n" +
			"			WHERE 	deletedAt IS NULL  \n" +
			"					AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
			"		)\");  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF (pGlobalSearchUIDString IS NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
			"		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
			"			SELECT 	id  \n" +
			"			FROM 	component_sid_stock  \n" +
			"			WHERE 	deletedAt IS NULL  \n" +
			"					AND uid LIKE '%\", pSearchUIDString ,\"%'  \n" +
			"		)\");  \n" +
			"	END IF;  \n" +
			"  */  \n" +
			"	IF (pBinID IS NOT NULL) THEN  \n" +
			"		SET v_Where = CONCAT(v_Where, \" AND  css.binID  = \", pBinID);  \n" +
			"	END IF;  \n" +
			"   IF (pBinID IS  NULL and pClusterWHID is null  ) THEN  /*Xfer Screen if bin and warehouse both nulll then dont return any result of UMID*/  \n" +
			"		SET v_Where = CONCAT(v_Where, \" AND  1 = 0\");  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF(pClusterWHID IS NOT NULL and pBinID is null) THEN  \n" +
			"		SET v_Where = CONCAT(v_Where, \" AND  css.binID  in (SELECT id FROM binmst bm WHERE   isdeleted = 0 and  \n" +
			"															 bm.warehouseid in (Select id from warehousemst where id = \", pClusterWHID, \" and warehouseType ='SMC' )	)\");  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	IF (pSearchString IS NOT NULL) THEN  \n" +
			"		SET v_Where = CONCAT(v_Where, \" AND  css.uid like '%\", pSearchString ,\"%'\");  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
			"	SET @SQLStatement1 = CONCAT(\"  \n" +
			"				SELECT 		css.id,  \n" +
			"						css.scanlabel,  \n" +
			"						css.pkgQty,  \n" +
			"						css.uid,  \n" +
			"						c.PIDCode,  \n" +
			"						c.mfgcodeID,  \n" +
			"						c.mfgPN,  \n" +
			"                        c.mfgPNDescription,  \n" +
			"						mfg.mfgCode,  \n" +
			"						mfg.mfgName,  \n" +
			"						ro.rohsIcon,  \n" +
			"						ro.name AS rohsName,  \n" +
			"						css.nickName,  \n" +
			"						css.binID,  \n" +
			"						cast(NULL as char(50)) binName,  \n" +
			"						0 warehouseID,  \n" +
			"						cast(NULL as char(50)) warehouseName,  \n" +
			"						0 parentWHID,  \n" +
			"						cast(NULL as char(50)) deptName,  \n" +
			"						css.uom,  \n" +
			"						cast('' as char(100)) uomName,  \n" +
			"						false isAllocatedToKit,  \n" +
			"						css.receiveMaterialType,  \n" +
			"						css.refcompid,  \n" +
			"						css.pkgUnit,  \n" +
			"						false isBelongsToSameKit,  \n" +
			"						fun_getMountingTypeNameByID(c.mountingTypeID) mountingTypeName,  \n" +
			"						0 refSalesOrderDetID, 	0 assyID,  \n" +
			"						fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKits,  \n" +
			"						cast(NULL as char(50)) warehouseType,  \n" +
			"						c.isCustom,  \n" +
			"						css.updatedAt,  \n" +
			"                        fun_ConvertInternalDateCodeIntoDateInDefaultFormate(css.dateCode) internalDateCodeInDate  \n" +
			"				FROM 		component_sid_stock css  \n" +
			"				INNER JOIN vu_component_mpn c ON c.id = css.refcompid  \n" +
			"				LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND ro.isdeleted=0  \n" +
			"				LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND mfg.isdeleted=0  \n" +
			"				WHERE	css.isdeleted = 0  \n" +
			"							AND css.isinStk = 1  \n" +
			"			\", v_Where , \" ORDER BY css.updatedAt DESC \"  \n" +
			"		);  \n" +
			"	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@SQLStatement1,\" ) c \");  \n" +
			"	PREPARE query1 FROM @SQLStatementCount;  \n" +
			"	EXECUTE query1;  \n" +
			"	DEALLOCATE PREPARE query1;  \n" +
			"  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
			"	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS Results AS \", @SQLStatement1, \" \", rowNumWhere);  \n" +
			"	PREPARE mainQuery FROM @SQLStatement1;  \n" +
			"	EXECUTE mainQuery;  \n" +
			"	DEALLOCATE PREPARE mainQuery;  \n" +
			"  \n" +
			"	-- SET Bin name  \n" +
			"	UPDATE 	Results r, binmst b  \n" +
			"	SET   	r.binName = b.Name, r.warehouseID = b.WarehouseID  \n" +
			"	WHERE	r.binID = b.id;  \n" +
			"  \n" +
			"	-- SET warehouse name  \n" +
			"	UPDATE 	Results r, warehousemst w  \n" +
			"	SET   	r.warehouseName = w.Name, r.parentWHID = w.parentWHID, r.warehouseType = w.warehouseType  \n" +
			"	WHERE	r.warehouseID = w.id;  \n" +
			"  \n" +
			"	-- SET department name  \n" +
			"	UPDATE 	Results r, warehousemst w  \n" +
			"	SET   	r.deptName = w.Name  \n" +
			"	WHERE	r.parentWHID = w.id;  \n" +
			"  \n" +
			"	-- Set UOM  \n" +
			"	UPDATE 	Results r, uoms u  \n" +
			"	SET   	r.uomName = u.unitName  \n" +
			"	WHERE	r.uom = u.id;  \n" +
			"  \n" +
			"	-- Set UMID is allocated to kit  \n" +
			"	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
			"		UPDATE 	Results r, kit_allocation k  \n" +
			"		SET   	r.isAllocatedToKit = TRUE,  \n" +
			"			r.refSalesOrderDetID = k.refSalesOrderDetID,  \n" +
			"			r.assyID = k.assyID,  \n" +
			"			r.isBelongsToSameKit = (CASE WHEN k.refSalesOrderDetID = pKitSalesOrderDetID AND k.assyID = pKitAssyID THEN TRUE ELSE FALSE END)  \n" +
			"		WHERE	r.id = k.refUIDId  \n" +
			"		AND 	k.status = 'A'  \n" +
			"		AND 	k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
			"		AND 	k.assyID = pKitAssyID;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results  ORDER BY isAllocatedToKit ASC, internalDateCodeInDate ASC  \"); -- order by isBelongsToSameKit desc  \n" +
			"	PREPARE query2 FROM @SQLStatement2;  \n" +
			"	EXECUTE query2;  \n" +
			"	DEALLOCATE PREPARE query2;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_ValiationAndSaveStockAllocation`;  \n" +
			"CREATE PROCEDURE `Sproc_ValiationAndSaveStockAllocation`(  \n" +
			"		IN pStockDetail JSON,  \n" +
			"		IN pRefSalesOrderDetID INT,  \n" +
			"		IN pAssyID INT,  \n" +
			"		IN pPartIds LONGTEXT,  \n" +
			"		IN pUMIDs LONGTEXT,  \n" +
			"		IN pUserId VARCHAR(50),  \n" +
			"		IN pCheckForSameUmid BOOLEAN,  \n" +
			"		IN pToUOM INT,  \n" +
			"		IN pSubAssyID INT,  \n" +
			"       IN pUnitFilterDecimal INT  \n" +
			"	)  \n" +
			"BEGIN  \n" +
			"	DECLARE v_CountSameUMIDFind INT;  \n" +
			"	DECLARE v_ConcateUMID LONGTEXT;  \n" +
			"	DECLARE v_KitName LONGTEXT;  \n" +
			"	DECLARE v_UMIDForKitName LONGTEXT;  \n" +
			"	DECLARE v_KitIds LONGTEXT;  \n" +
			"	DECLARE v_CountError INT;  \n" +
			"    DECLARE v_CurrentUMIDUnit DECIMAL(18,8);  \n" +
			"    DECLARE v_CurrentAllocatedUnit DECIMAL(18,8);  \n" +
			"    DECLARE v_SameAllocated TINYINT DEFAULT FALSE;  \n" +
			"    DECLARE v_KitReturnStatus VARCHAR(100);  \n" +
			"	SET v_ConcateUMID = NULL;  \n" +
			"	/* create temp table for response */  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Error;  \n" +
			"	CREATE TEMPORARY TABLE temp_Validation_Error  \n" +
			"	(  \n" +
			"		IsSuccess BOOLEAN,  \n" +
			"		UMID LONGTEXT,  \n" +
			"		TransName LONGTEXT,  \n" +
			"		ErrorCode VARCHAR(150),  \n" +
			"		KitIds LONGTEXT,  \n" +
			"        Reason LONGTEXT,  \n" +
			"        StartDate VARCHAR(150)  \n" +
			"	);  \n" +
			"	# Error/Confirmation Codes:  \n" +
			"	# 1. MOUNTING_TYPE_MISMATCHED  \n" +
			"	# 2. FUNCTIONAL_TYPE_MISMATCHED  \n" +
			"	# 3. PO_HALT_ERROR  \n" +
			"	# 4. KIT_ALLOCATION_HALT_ERROR  \n" +
			"	# 5. SAME_UMID_ALLOCATED - Continue confimration in case of same umid is already allocated?  \n" +
			"	# 6. STOCK_NOT_ALLOCATED - UMID(s) could not be allocated, because other UMID(s) is already allocated in this kit and shared with other kit(s).  \n" +
			"	# 7. SOME_UMID_ALLOCATED - Already same UMID allocation is done by other user or by another transaction on same time.  \n" +
			"	# 8. FULLY_KIT_RETUNRED - Kit is Fully Returned then not allow to Allocate UMID(s).  \n" +
			"    # 9. RESERVED_RESTRICTED_UMID - UMID is restricted/reserved then not allow to Allocate UMID(s).  \n" +
			"	SELECT FUN_GETKITRETURNSTATUS(a.pendingReleaseCount, a.releasedNotReturnedCount, a.returnedCount, a.readyToreturnCount, a.shortageReturnCount) AS kitReturnStatus INTO v_KitReturnStatus  \n" +
			"	FROM (  \n" +
			"			SELECT  SUM(CASE WHEN kitReturnStatus = 'NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
			"					SUM(CASE WHEN kitReturnStatus = 'NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
			"					SUM(CASE WHEN kitReturnStatus = 'FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
			"					SUM(CASE WHEN kitReturnStatus = 'RR' THEN 1 ELSE 0 END) readyToreturnCount,  \n" +
			"					SUM(CASE WHEN kitReturnStatus = 'RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
			"			FROM 	vu_release_plan_release_return_status_det  \n" +
			"			WHERE  salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pAssyID  \n" +
			"			AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END)  \n" +
			"		) AS a;  \n" +
			"  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Hold;  \n" +
			"	CREATE TEMPORARY TABLE temp_Validation_Hold  \n" +
			"	SELECT  hut.id,  \n" +
			"		hut.refTransId,  \n" +
			"        hut.refType,  \n" +
			"        hut.reason,  \n" +
			"		fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate) startDate,  \n" +
			"		fun_getEmployeeInitialNameByEmpID(hut.holdEmployeeId) empInitialName  \n" +
			"		FROM holdunholdtrans hut  \n" +
			"		WHERE hut.isDeleted = 0  \n" +
			"		AND hut.id IN (SELECT max(id) from holdunholdtrans ht where ht.isDeleted = 0 AND ht.refType in ('PO','KA') AND ht.refTransId = pRefSalesOrderDetID AND hut.status='H' GROUP BY ht.refType,ht.refTransId);  \n" +
			"	IF(v_KitReturnStatus = 'Fully Returned') THEN  \n" +
			"		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'FULLY_KIT_RETUNRED', NULL, NULL, NULL);  \n" +
			"	ELSEIF((SELECT COUNT(1) FROM component_attributes c WHERE c.isDeleted = 0 AND FIND_IN_SET(refComponentID, pPartIds) AND c.mountingTypeID = -1) > 0) THEN  \n" +
			"		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'MOUNTING_TYPE_MISMATCHED', NULL, NULL, NULL);  \n" +
			"	ELSEIF((SELECT COUNT(1) FROM component_attributes c WHERE c.isDeleted = 0 AND FIND_IN_SET(refComponentID, pPartIds) AND c.functionalCategoryID = -1) > 0) THEN  \n" +
			"		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'FUNCTIONAL_TYPE_MISMATCHED', NULL, NULL, NULL);  \n" +
			"	ELSEIF((SELECT COUNT(1) FROM temp_Validation_Hold) > 0) THEN  \n" +
			"		IF((SELECT COUNT(1) FROM temp_Validation_Hold) > 1) THEN  \n" +
			"			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
			"				SELECT 0, NULL, th.empInitialName,'PO_HALT_ERROR', NULL, th.reason, th.startDate FROM temp_Validation_Hold th WHERE th.refType = 'PO';  \n" +
			"		ELSE  \n" +
			"			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
			"				SELECT 0, NULL, th.empInitialName, IF(th.refType = 'PO','PO_HALT_ERROR','KIT_ALLOCATION_HALT_ERROR'), NULL, th.reason, th.startDate FROM temp_Validation_Hold th;  \n" +
			"        END IF;  \n" +
			"	ELSEIF((SELECT COUNT(1) FROM component_sid_stock cst WHERE FIND_IN_SET(cst.id, pUMIDs) AND (cst.isUMIDRestrict = TRUE OR cst.isReservedStock = TRUE)) > 0) THEN  \n" +
			"		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'RESERVED_RESTRICTED_UMID', NULL, NULL, NULL);  \n" +
			"	END IF;  \n" +
			"	IF((SELECT COUNT(1) FROM temp_Validation_Error tmp WHERE tmp.IsSuccess = 0) = 0) THEN  \n" +
			"		/* create temp table for kit allocation details */  \n" +
			"		DROP TEMPORARY TABLE IF EXISTS tempKitAllocationDetail;  \n" +
			"		CREATE TEMPORARY TABLE IF NOT EXISTS tempKitAllocationDetail AS  \n" +
			"		SELECT 	*  FROM  JSON_TABLE(  \n" +
			"			pStockDetail,  \n" +
			"			\"$[*]\" COLUMNS(  \n" +
			"				refSalesOrderDetID INT PATH \"$.refSalesOrderDetID\",  \n" +
			"				assyID INT PATH \"$.assyID\",  \n" +
			"				uid VARCHAR(50) PATH \"$.uid\",  \n" +
			"				refBOMLineID INT PATH \"$.refBOMLineID\",  \n" +
			"				STATUS VARCHAR(50) PATH \"$.status\",  \n" +
			"				refUIDId INT PATH \"$.refUIDId\",  \n" +
			"				partId INT PATH \"$.partId\",  \n" +
			"				allocatedQty DECIMAL(18,8) PATH \"$.allocatedQty\",  \n" +
			"				allocatedUnit DECIMAL(18,8) PATH \"$.allocatedUnit\",  \n" +
			"				allocatedUOM INT PATH \"$.allocatedUOM\",  \n" +
			"				umidUnits INT PATH \"$.umidUnits\",  \n" +
			"				kitAllocationId INT PATH \"$.kitAllocationId\",  \n" +
			"				PIDCode VARCHAR(100) PATH \"$.PIDCode\",  \n" +
			"				restricType VARCHAR(500) PATH \"$.restricType\",  \n" +
			"				transactionType VARCHAR(1000) PATH \"$.transactionType\",  \n" +
			"				refTableName VARCHAR(255) PATH \"$.refTableName\",  \n" +
			"				approveFromPage VARCHAR(255) PATH \"$.approveFromPage\",  \n" +
			"				approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
			"				approvalReason TEXT PATH \"$.approvalReason\",  \n" +
			"				confirmationType INT PATH \"$.confirmationType\",  \n" +
			"				roHSApprovalReason VARCHAR(1000) PATH \"$.roHSApprovalReason\",  \n" +
			"				allocationRemark VARCHAR(1000) PATH \"$.allocationRemark\"  \n" +
			"				)  \n" +
			"			) AS jt;  \n" +
			"		IF (pCheckForSameUmid = TRUE) THEN  \n" +
			"			SELECT 	COUNT(1), GROUP_CONCAT(uid) INTO v_CountSameUMIDFind, v_ConcateUMID  \n" +
			"			FROM 	kit_allocation  \n" +
			"			WHERE 	refSalesOrderDetID = pRefSalesOrderDetID AND STATUS = 'A' AND assyID = IFNULL(pSubAssyID, pAssyID)  AND partId IN (pPartIds) AND refUIDId IN (pUMIDs);  \n" +
			"		ELSE  \n" +
			"			SET v_CountSameUMIDFind = 0;  \n" +
			"		END IF;  \n" +
			"		IF (v_CountSameUMIDFind = 0) THEN  \n" +
			"			block1: BEGIN  \n" +
			"				DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
			"				DECLARE v_RefSalesOrderDetID INT;  \n" +
			"				DECLARE v_AssyID INT;  \n" +
			"				DECLARE v_Umid VARCHAR(50);  \n" +
			"				DECLARE v_RefBOMLineID INT;  \n" +
			"				DECLARE v_Status VARCHAR(50);  \n" +
			"				DECLARE v_RefUIDId INT;  \n" +
			"				DECLARE v_PartId INT;  \n" +
			"				DECLARE v_AllocatedQty DECIMAL(18,8);  \n" +
			"				DECLARE v_AllocatedUnit DECIMAL(18,8);  \n" +
			"				DECLARE v_AllocatedUOM INT;  \n" +
			"				DECLARE v_UMIDUnits DECIMAL(18,8);  \n" +
			"				DECLARE v_countKitExist INT;  \n" +
			"				DECLARE v_CountSameUMID INT;  \n" +
			"				DECLARE	v_SameUMID VARCHAR(50);  \n" +
			"				DECLARE v_oldUMIDAllocatedUnit DECIMAL(18,8);  \n" +
			"				DECLARE v_oldUMID VARCHAR(50);  \n" +
			"				DECLARE v_CountSameAllocatedUnit INT;  \n" +
			"				DECLARE v_KitAllocationId INT;  \n" +
			"				DECLARE v_StringSameUMID VARCHAR(10000);  \n" +
			"				DECLARE v_CountUMIDForSame INT;  \n" +
			"				DECLARE v_StringUMIDForKit VARCHAR(10000);  \n" +
			"				DECLARE v_CountSameSalesOrder INT;  \n" +
			"				DECLARE v_PIDCode VARCHAR(100);  \n" +
			"				DECLARE v_RestricType VARCHAR(500);  \n" +
			"				DECLARE v_TransactionType VARCHAR(1000);  \n" +
			"				DECLARE v_RefTableName VARCHAR(255);  \n" +
			"				DECLARE v_ApproveFromPage VARCHAR(255);  \n" +
			"				DECLARE v_ApprovedBy VARCHAR(255);  \n" +
			"				DECLARE v_ConfirmationType INT;  \n" +
			"				DECLARE v_ApprovalReason TEXT;  \n" +
			"				DECLARE v_RefID INT;  \n" +
			"				DECLARE v_RoHSApprovalReason VARCHAR(1000);  \n" +
			"				DECLARE v_AllocationRemark VARCHAR(1000);  \n" +
			"				DECLARE KitAllocationDetail_Cursor CURSOR FOR  \n" +
			"				SELECT 	refSalesOrderDetID, assyID, uid, refBOMLineID, STATUS, refUIDId, partId, allocatedQty, allocatedUnit, allocatedUOM, umidUnits, kitAllocationId,  \n" +
			"						PIDCode, restricType, transactionType, refTableName, approveFromPage, approvedBy, approvalReason, confirmationType, roHSApprovalReason, allocationRemark  \n" +
			"				FROM 	tempKitAllocationDetail;  \n" +
			"				DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
			"				OPEN KitAllocationDetail_Cursor;  \n" +
			"				KitAllocationDetail_Loop:LOOP  \n" +
			"					FETCH 	KitAllocationDetail_Cursor INTO v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_Status, v_RefUIDId, v_PartId, v_AllocatedQty, v_AllocatedUnit, v_AllocatedUOM, v_UMIDUnits, v_KitAllocationId,  \n" +
			"										v_PIDCode, v_RestricType, v_TransactionType, v_RefTableName, v_ApproveFromPage, v_ApprovedBy, v_ApprovalReason, v_ConfirmationType, v_RoHSApprovalReason, v_AllocationRemark;  \n" +
			"				IF exit_loop THEN  \n" +
			"					LEAVE KitAllocationDetail_Loop;  \n" +
			"				END IF;  \n" +
			"  \n" +
			"				SET v_SameAllocated = FALSE;  \n" +
			"                SELECT round(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit),pUnitFilterDecimal) INTO v_CurrentUMIDUnit FROM component_sid_stock cst WHERE cst.id = v_RefUIDId;  \n" +
			"                SELECT round(SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))),pUnitFilterDecimal) INTO v_CurrentAllocatedUnit FROM kit_allocation ka WHERE ka.status = 'A' AND ka.refUIDId = v_RefUIDId;  \n" +
			"                SET v_CurrentAllocatedUnit = IFNULL(v_CurrentAllocatedUnit,0) + IFNULL(v_AllocatedUnit,0);  \n" +
			"			  IF(IFNULL(v_CurrentUMIDUnit,0) >= IFNULL(v_CurrentAllocatedUnit,0)) THEN  \n" +
			"					IF (CAST(IFNULL(v_KitAllocationId, '0') AS SIGNED) != 0) THEN  \n" +
			"						UPDATE 	kit_allocation  \n" +
			"								SET 	allocatedQty = IFNULL(allocatedQty,0) + IFNULL(v_AllocatedQty,0),  \n" +
			"									allocatedUnit = IFNULL(allocatedUnit,0) + IFNULL(v_AllocatedUnit,0)  \n" +
			"								WHERE	id = v_KitAllocationId;  \n" +
			"					ELSE  \n" +
			"						INSERT INTO kit_allocation (refSalesOrderDetID, assyID, uid, refBOMLineID, allocatedQty, transactionDate, STATUS, createdBy, refUIDId, partId, allocatedUnit, allocatedUOM, roHSApprovalReason, roHSApprovedBy, roHSApprovedOn, allocationRemark)  \n" +
			"								VALUES(v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_AllocatedQty, fun_DatetimetoUTCDateTime(),v_Status, pUserId, v_RefUIDId, v_PartId, v_AllocatedUnit, v_AllocatedUOM,  \n" +
			"								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE v_RoHSApprovalReason END),  \n" +
			"								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE pUserId END),  \n" +
			"								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE fun_DatetimetoUTCDateTime() END),  \n" +
			"								(CASE WHEN (v_AllocationRemark IS NULL OR v_AllocationRemark = '') THEN NULL ELSE v_AllocationRemark END));  \n" +
			"								SET v_RefID = LAST_INSERT_ID();  \n" +
			"						IF(IFNULL(v_RefID, \"\") != \"\") THEN  \n" +
			"							SET v_KitIds = (  \n" +
			"									SELECT 	CASE  \n" +
			"											WHEN ((SELECT IFNULL(v_KitIds, \"\")) = \"\") THEN  \n" +
			"												v_RefID  \n" +
			"											ELSE  \n" +
			"												(SELECT CONCAT(v_KitIds, \",\", v_RefID))  \n" +
			"										END  \n" +
			"									);  \n" +
			"						END IF;  \n" +
			"						IF (v_RestricType IS NOT NULL) THEN  \n" +
			"							INSERT INTO generic_authenticationmst (transactionType, approveFromPage, refID, approvedBy, approvalReason,confirmationType, refTableName, createdBy, updatedBy)  \n" +
			"							VALUES(v_TransactionType, v_ApproveFromPage, v_RefID, v_ApprovedBy, v_ApprovalReason,v_ConfirmationType,v_RefTableName, pUserId, pUserId);  \n" +
			"						END IF;  \n" +
			"				END IF;  \n" +
			"			ELSE  \n" +
			"				SET v_SameAllocated = TRUE;  \n" +
			"				LEAVE KitAllocationDetail_Loop;  \n" +
			"			END IF;  \n" +
			"  \n" +
			"			END LOOP KitAllocationDetail_Loop;  \n" +
			"			CLOSE KitAllocationDetail_Cursor;  \n" +
			"			END block1;  \n" +
			"  \n" +
			"			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
			"				VALUES(IF(v_SameAllocated, 0, 1), NULL, NULL, IF(v_SameAllocated, 'SOME_UMID_ALLOCATED', 'SUCCESS'), NULL, NULL, NULL);  \n" +
			"		ELSE  \n" +
			"			SELECT 	GROUP_CONCAT('(', `Po Number`, ', ', `Sales Order`, ', ', `Assy ID`, ', ', `PO Qty`, ')') INTO v_KitName  \n" +
			"			FROM 	vu_salesorder_shipped_report  \n" +
			"			WHERE 	SalesOrderDetailId IN (  \n" +
			"					SELECT 	refSalesOrderDetID  \n" +
			"					FROM 	kit_allocation  \n" +
			"					WHERE 	FIND_IN_SET(uid, v_UMIDForKitName)  \n" +
			"				);  \n" +
			"			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
			"				VALUES(0, v_ConcateUMID, v_KitName, 'SAME_UMID_ALLOCATED', v_KitIds, NULL, NULL);  \n" +
			"		END IF;  \n" +
			"	END IF;  \n" +
			"	SELECT IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate FROM temp_Validation_Error;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_verify_UID`;  \n" +
			"CREATE PROCEDURE `Sproc_verify_UID`(  \n" +
			"	IN pVerificationType VARCHAR(100),  \n" +
			"	IN pUID VARCHAR(15),  \n" +
			"	IN pScanMFGPNLabel VARCHAR(1000),  \n" +
			"	IN pScanPID VARCHAR(50),  \n" +
			"	IN pScanCPN VARCHAR(50),  \n" +
			"	IN pScanUID VARCHAR(15),  \n" +
			"	IN pScanMFGPN VARCHAR(100),  \n" +
			"	IN pCreatedBy VARCHAR(255),  \n" +
			"	IN pMFRId INT,  \n" +
			"	IN pBarcodeId INT  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE uidVerified TINYINT(1) DEFAULT 0;  \n" +
			"	DECLARE v_mfgcodeID INT;  \n" +
			"	DECLARE v_mfgPN VARCHAR(100);  \n" +
			" 	DECLARE v_PIDCode VARCHAR(100);  \n" +
			" 	DECLARE v_PartDescription VARCHAR(2000);  \n" +
			"	DECLARE v_RoHSStatusID INT;  \n" +
			"	DECLARE v_compStockID INT;  \n" +
			"	DECLARE	v_pkgQty DECIMAL(18,8);  \n" +
			"	DECLARE v_pkgUnit DECIMAL(18,8);  \n" +
			" 	DECLARE v_uom VARCHAR(255);  \n" +
			" 	DECLARE v_string2PartID INT;  \n" +
			" 	DECLARE v_scanString2MFG VARCHAR(100);  \n" +
			" 	DECLARE v_scanString2MFGPNID VARCHAR(100);  \n" +
			" 	DECLARE v_packingSlipId INT;  \n" +
			"	DECLARE	v_packingSlipNumber VARCHAR(255);  \n" +
			"	DECLARE	v_packingSlipSupplierId INT;  \n" +
			"	DECLARE	v_packingSlipSupplierCode VARCHAR(10);  \n" +
			"	DECLARE	v_cOfCValue VARCHAR(100);  \n" +
			"	DECLARE v_isCustom TINYINT(1) DEFAULT 0;  \n" +
			"	DECLARE v_componentId INT;  \n" +
			"	DECLARE v_successId INT;  \n" +
			"	DECLARE v_refcompid INT;  \n" +
			"    DECLARE v_mountingTypeID INT;  \n" +
			"    DECLARE v_partPackage VARCHAR(255);  \n" +
			"    DECLARE v_uomClassID INT;  \n" +
			"    DECLARE v_spq DECIMAL(18,8);  \n" +
			"    DECLARE v_orgQty DECIMAL(18,8);  \n" +
			"	DECLARE v_orgPkgUnit DECIMAL(18,8);  \n" +
			"    DECLARE v_imageURL VARCHAR(1000);  \n" +
			"    DECLARE v_documentPath VARCHAR(1000);  \n" +
			"    DECLARE v_mfgCode VARCHAR(255);  \n" +
			"    DECLARE v_mfgName VARCHAR(255);  \n" +
			"    DECLARE v_mfgType VARCHAR(20);  \n" +
			"  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempUIDDet;  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempUIDHistory;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDDet AS  \n" +
			"  \n" +
			"    SELECT  \n" +
			"						a.* , (CASE WHEN fun_getCofCDocumentCount(IFNULL(parentUIDId,id), packingSlipId) > 0 THEN  \n" +
			"											(  \n" +
			"												CASE  \n" +
			"													WHEN stockInventoryType = 'NI' THEN  \n" +
			"													      CONCAT(a.supplierCode,a.packingSlipNumber)  \n" +
			"													WHEN stockInventoryType = 'SI' THEN  \n" +
			"												       ifnull(CONCAT(a.supplierCode,a.packingSlipNumber),IFNULL(parentUID,uid))  \n" +
			"													ELSE  \n" +
			"														uid  \n" +
			"												END  \n" +
			"											)ELSE NULL END) cOfCValue  \n" +
			"					FROM 		(  \n" +
			"								SELECT 		cs.id, 		cs.uid, 	cs.parentUID,	cs.scanlabel, 	cs.refcompid, 	c.mfgcodeID, 	c.mfgPN, cs.stockInventoryType, c.imageURL, c.documentPath,  \n" +
			"											cs.spq, 	cs.orgQty,	cs.orgPkgUnit,	c.mountingTypeID, IFNULL(c.partPackage, fun_getPackageCaseNameByID(c.partPackageID)) partPackage,  \n" +
			"										c.PIDCode, 	c.RoHSStatusID,	cs.pkgQty,	cs.pkgUnit,	cs.uom,   um.unitName,   um.measurementTypeID uomClassID,   c.isCustom,  c.mfgPNDescription,  \n" +
			"									   vps.PackingslipID PackingslipID,  \n" +
			"                                       vps.packingSlipNumber packingSlipNumber,vps.packingSlipSupplierId, vps.packingslipSupplierCode supplierCode,  \n" +
			"                                        m.mfgCode, m.mfgName, m.mfgType  ,cs.parentUIDId  \n" +
			"								FROM 		component_sid_stock cs  \n" +
			"								INNER JOIN 	vu_component_mpn c ON cs.refcompid = c.id  \n" +
			"								INNER JOIN 	mfgcodemst m ON c.mfgcodeID = m.id  \n" +
			"								INNER JOIN 	uoms um ON cs.uom = um.id  \n" +
			"                                Left join vu_umid_packingslipmapping_det vps on case when stockInventoryType ='SI' THEN cs.parentUIDId else  cs.id end =  refComponentSidStockID  \n" +
			"								WHERE 		cs.uid  = pUID  \n" +
			"								AND 		cs.isDeleted = 0  \n" +
			"								-- LIMIT 		1  \n" +
			"							) AS a;  \n" +
			"    /* Old Query commented by DP on 14th-dec-2021 keep this query upto next 1 month till we not give final release on production  \n" +
			"	SELECT 		*,  \n" +
			"				fun_getMfgCodeByID(packingSlipSupplierId) supplierCode  \n" +
			"		FROM 		(  \n" +
			"					SELECT 		*,  \n" +
			"							fun_getPackingSlipNumberById(packingSlipId) packingSlipNumber,  \n" +
			"							fun_getPackingSlipSupplierIdBySlipId(packingSlipId) packingSlipSupplierId,  \n" +
			"                            (CASE WHEN fun_getCofCDocumentCount(IFNULL(parentUIDId,id), packingSlipId) > 0 THEN  \n" +
			"											(  \n" +
			"												CASE  \n" +
			"													WHEN stockInventoryType = 'NI' THEN  \n" +
			"														fun_getUMIDPackingSlipNameByID(id)  \n" +
			"													WHEN stockInventoryType = 'SI' THEN  \n" +
			"														IFNULL(fun_getUMIDPackingSlipNameByID(id),uid)  \n" +
			"													ELSE  \n" +
			"														uid  \n" +
			"												END  \n" +
			"											)ELSE NULL END) cOfCValue  \n" +
			"					FROM 		(  \n" +
			"								SELECT 		cs.id, 		cs.uid, 	cs.parentUIDId,	cs.scanlabel, 	cs.refcompid, 	c.mfgcodeID, 	c.mfgPN, cs.stockInventoryType, c.imageURL, c.documentPath,  \n" +
			"											cs.spq, 	cs.orgQty,	cs.orgPkgUnit,	c.mountingTypeID, IFNULL(c.partPackage, fun_getPackageCaseNameByID(c.partPackageID)) partPackage,  \n" +
			"										c.PIDCode, 	c.RoHSStatusID,	cs.pkgQty,	cs.pkgUnit,	cs.uom,   um.unitName,   um.measurementTypeID uomClassID,   c.isCustom,  c.mfgPNDescription,  \n" +
			"										fun_getUMIDPackingSlipIdByID(cs.id) packingSlipId, m.mfgCode, m.mfgName, m.mfgType  \n" +
			"								FROM 		component_sid_stock cs  \n" +
			"								INNER JOIN 	component c ON cs.refcompid = c.id  \n" +
			"								INNER JOIN 	mfgcodemst m ON c.mfgcodeID = m.id  \n" +
			"								INNER JOIN 	uoms um ON cs.uom = um.id  \n" +
			"								WHERE 		cs.uid =  pUID  \n" +
			"								AND 		cs.isDeleted = 0  \n" +
			"								LIMIT 		1  \n" +
			"							) AS a  \n" +
			"				) AS b;  */  \n" +
			"  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDHistory (  \n" +
			"		scanString1 VARCHAR(1000) NULL,  \n" +
			"		scanString2 VARCHAR(1000) NULL,  \n" +
			"		string1PartID INT(11) NULL,  \n" +
			"		scanString1MFG VARCHAR(100) NULL,  \n" +
			"		scanString1MFGPNID VARCHAR(100) NULL,  \n" +
			"		string2PartID INT(11) NULL,  \n" +
			"		scanString2MFG VARCHAR(100) NULL,  \n" +
			"		scanString2MFGPNID VARCHAR(100) NULL,  \n" +
			"		STATUS VARCHAR(100) NULL,  \n" +
			"		packingSlipId INT(11) NULL,  \n" +
			"		packingSlipNumber VARCHAR(255) NULL,  \n" +
			"		packingSlipSupplierId INT(11) NULL,  \n" +
			"		packingSlipSupplierCode VARCHAR(10) NULL,  \n" +
			"		cOfCValue VARCHAR(100) NULL,  \n" +
			"		isDeleted TINYINT(1) DEFAULT '0',  \n" +
			"		createdBy VARCHAR(255) NULL,  \n" +
			"		createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP  \n" +
			"	);  \n" +
			"  \n" +
			"	INSERT INTO `tempUIDHistory`(	`scanString1`, 		`scanString2`, 		`string1PartID`,  \n" +
			"					`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
			"					`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
			"					`packingSlipId`,	`packingSlipNumber`,	`packingSlipSupplierId`,  \n" +
			"					`packingSlipSupplierCode`,			`cOfCValue`)  \n" +
			"	SELECT 	pUID 				scanString1, 			IFNULL(pScanMFGPNLabel,		IFNULL(pScanPID,IFNULL(pScanCPN,IFNULL(pScanUID,pScanMFGPN)))) scanString2,  \n" +
			"		UH.refcompid string1PartID, 	UH.mfgcodeID scanString1MFG, 	UH.mfgPN scanString1MFGPNID,  \n" +
			"		NULL string2PartID,  \n" +
			"		NULL scanString2MFG,		NULL scanString2MFGPNID,	NULL STATUS,  \n" +
			"		packingSlipId,			packingSlipNumber,		packingSlipSupplierId,  \n" +
			"		supplierCode,			cOfCValue  \n" +
			"	FROM 	tempUIDDet UH;  \n" +
			"  \n" +
			"	SELECT 	u.mfgcodeID,	u.mfgPN,	u.PIDCode, 	u.mfgPNDescription,	u.RoHSStatusID,	u.mountingTypeID, u.partPackage, u.documentPath,  \n" +
			"			u.spq, 	u.orgQty,	u.orgPkgUnit, 	u.id,		u.pkgQty,	u.pkgUnit,	u.unitName,	u.uomClassID,	u.packingSlipId, u.mfgCode, u.mfgName, u.mfgType,  \n" +
			"            u.packingSlipNumber, 	u.packingSlipSupplierId, 	u.supplierCode, 		u.cOfCValue,	u.isCustom,	u.refcompid, u.imageURL  \n" +
			"	INTO 	v_mfgcodeID,	v_mfgPN, 	v_PIDCode, 	v_PartDescription,	v_RoHSStatusID,	v_mountingTypeID, v_partPackage, v_documentPath,  \n" +
			"			v_spq, 			v_orgQty,	v_orgPkgUnit,	v_compStockID,	v_pkgQty,	v_pkgUnit, 	v_uom, 	v_uomClassID,   v_packingSlipId,	v_mfgCode, v_mfgName, v_mfgType,  \n" +
			"            v_packingSlipNumber,	v_packingSlipSupplierId,	v_packingSlipSupplierCode,	v_cOfCValue, 	v_isCustom,	v_refcompid, v_imageURL  \n" +
			"	FROM 	tempUIDDet u;  \n" +
			"  \n" +
			"	IF EXISTS(SELECT 1 FROM tempUIDDet LIMIT 1) THEN  \n" +
			"		IF (pScanMFGPNLabel IS NOT NULL) THEN  \n" +
			"			-- IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.scanlabel = pScanMFGPNLabel LIMIT 1) THEN  \n" +
			"				CALL Sproc_MatchBarCodeAndSaveDelimiters (pScanMFGPNLabel,1,NULL,NULL,false,pMFRId,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,pBarcodeId,NULL,NULL,'M',NULL,NULL,NULL,NULL);  \n" +
			"				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDValidationDetail;  \n" +
			"				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDValidationDetail AS  \n" +
			"				SELECT * FROM tempUIDSuccessDetail;  \n" +
			"				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDComponentDetail;  \n" +
			"				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDComponentDetail AS  \n" +
			"				SELECT * FROM tempUIDComponentDetail;  \n" +
			"				SELECT IsSuccess INTO v_successId FROM temp_ScanUIDValidationDetail LIMIT 1;  \n" +
			"				IF (v_successId = 1) THEN  \n" +
			"					SELECT id INTO v_componentId FROM temp_ScanUIDComponentDetail LIMIT 1;  \n" +
			"					IF (v_componentId = v_refcompid) THEN  \n" +
			"						SET uidVerified = 1;  \n" +
			"					END IF;  \n" +
			"				ELSE  \n" +
			"					SET uidVerified = 0;  \n" +
			"				END IF;  \n" +
			"			-- END IF;  \n" +
			"		ELSEIF (pScanPID IS NOT NULL OR pScanCPN IS NOT NULL) THEN  \n" +
			"			SELECT 	c.id, 		c.mfgcodeID, 		c.mfgPN  \n" +
			"			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
			"			FROM 	component c  \n" +
			"			WHERE 	c.PIDCode = IFNULL(pScanPID,pScanCPN);  \n" +
			"			IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = IFNULL(pScanPID,pScanCPN) AND c.mfgcodeID = v_mfgcodeID AND c.mfgPN = v_mfgPN LIMIT 1) THEN  \n" +
			"				SET uidVerified = 1;  \n" +
			"			END IF	;  \n" +
			"		ELSEIF (pUID = pScanUID) THEN  \n" +
			"			SELECT 	c.refcompid, 		c.mfgcodeID, 		c.mfgPN  \n" +
			"			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
			"			FROM 	tempUIDDet c;  \n" +
			"			SET uidVerified = 1;  \n" +
			"		ELSEIF (pScanMFGPN IS NOT NULL) THEN  \n" +
			"			IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.mfgPN = pScanMFGPN LIMIT 1) THEN  \n" +
			"				SELECT 	c.refcompid, 	c.mfgcodeID, 		c.mfgPN  \n" +
			"				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
			"				FROM 	tempUIDDet c;  \n" +
			"				SET uidVerified = 1;  \n" +
			"			ELSE  \n" +
			"				SELECT 	c.id, 			c.mfgcodeID, 		c.mfgPN  \n" +
			"				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
			"				FROM 	component c  \n" +
			"				WHERE 	c.mfgPN = pScanMFGPN;  \n" +
			"			END IF;  \n" +
			"		END IF;  \n" +
			"		UPDATE 	tempUIDHistory  \n" +
			"		SET 	string2PartID = v_string2PartID,  \n" +
			"			scanString2MFG = v_scanString2MFG,  \n" +
			"			scanString2MFGPNID = v_scanString2MFGPNID;  \n" +
			"	ELSE  \n" +
			"		INSERT INTO `tempUIDHistory`(`scanString1`, `scanString2`)  \n" +
			"				VALUES (pUID, IFNULL(pScanMFGPNLabel,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))));  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	INSERT INTO `uid_verification_history`(	`scanString1`,		`scanString2`,		`verificationType`,  \n" +
			"						`string1PartID`,	`scanString1MFG`,	`scanString1MFGPNID`,  \n" +
			"						`string2PartID`,	`scanString2MFG`,	`scanString2MFGPNID`,  \n" +
			"						`status`,  \n" +
			"						`isDeleted`,		`createdBy`,		`createdAt`)  \n" +
			"	SELECT 	UH.scanString1, 	UH.scanString2,		pVerificationType,  \n" +
			"		UH.string1PartID, 	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString1MFG),  \n" +
			"		UH.scanString1MFGPNID,	UH.string2PartID,  \n" +
			"		(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString2MFG),	UH.scanString2MFGPNID,  \n" +
			"		CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
			"		0,	IFNULL(pCreatedBy,''),	fun_DatetimetoUTCDateTime() `createdAt`  \n" +
			"	FROM 	tempUIDHistory UH;  \n" +
			"  \n" +
			"	SELECT 	*, 			v_mfgcodeID mfgcodeID, 	v_mfgCode mfgCode, v_mfgName mfgName, v_mfgType mfgType, v_documentPath documentPath,  \n" +
			"		v_PIDCode PIDCode,	v_PartDescription partDescription,	v_RoHSStatusID RoHSStatusID, 	v_compStockID compStockID,  \n" +
			"        fun_getMountingTypeNameByID(v_mountingTypeID) mountingType, v_partPackage partPackage,  \n" +
			"		v_spq spq, 			v_orgQty orgQty,	v_orgPkgUnit orgPkgUnit, v_imageURL imageURL, v_mfgPN mfgPN,  \n" +
			"		v_pkgQty pkgQty,	v_pkgUnit pkgUnit, 		v_uom uom,    v_uomClassID uomClassID,  \n" +
			"		v_packingSlipId packingSlipId,				v_packingSlipNumber packingSlipNumber,  \n" +
			"		v_packingSlipSupplierId packingSlipSupplierId,		v_packingSlipSupplierCode packingSlipSupplierCode, v_refcompid refcompid,  \n" +
			"		v_cOfCValue cOfCValue,	v_isCustom isCustom  \n" +
			"	FROM 	uid_verification_history  \n" +
			"	WHERE 	id = LAST_INSERT_ID();  \n" +
			"  \n" +
			"	IF (pScanMFGPNLabel IS NOT NULL AND uidVerified = 0) THEN  \n" +
			"		SELECT * FROM tempUIDSuccessDetail;  \n" +
			"	ELSE  \n" +
			"		SELECT 1;  \n" +
			"	END IF;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (6065,'2.00','V1',' User Story 42365: Apply Part Master Normalization effect in Kit UMID and Bulk Transfer flow - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
   case 6065:
			  allDbChangesArray.push(
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP function IF EXISTS `fun_checkKitAllocation`;  \n" +
			"CREATE FUNCTION `fun_checkKitAllocation`(  \n" +
			"	pUMID VARCHAR(100),  \n" +
			"	pwoID INT,  \n" +
			"	pwoOPID INT,  \n" +
			"	pwoTransID INT,  \n" +
			"	temp_eqpFeederID INT,  \n" +
			"	temp_umid_comp_id INT,  \n" +
			"	temp_umid_package_id INT,  \n" +
			"	pcheckKitAllocation VARCHAR(5000),  \n" +
			"	pisConfirmed INT,  \n" +
			"	pFromFeeder INT,  \n" +
			"	pVerificationReqFrom VARCHAR(50),  \n" +
			"	prfqLineItemsID VARCHAR(500)) RETURNS varchar(500) CHARSET utf8mb4  \n" +
			"BEGIN  \n" +
			"	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
			"	DECLARE temp_recordFoundInKitAllocation VARCHAR (500);  \n" +
			"	DECLARE isSkipKitAllocationValidation INT DEFAULT 0;  \n" +
			"	#########################################################################################  \n" +
			"	################### NOTE: Temporaray table for error comes from sp ######################  \n" +
			"	#########################################################################################  \n" +
			"  \n" +
			"	SELECT IFNULL(GROUP_CONCAT(ka.refBOMLineID),0) INTO temp_recordFoundInKitAllocation FROM kit_allocation ka  \n" +
			"				WHERE ka.uid = pUMID AND ka.`status` = \"A\" AND ka.refBOMLineID  \n" +
			"		IN (SELECT rfqLineItemsID FROM temp_assy_part_list  \n" +
			"		WHERE mfgPNID IN (SELECT id FROM temp_umid_details WHERE uid=pUMID));  \n" +
			"  \n" +
			"  	-- Added for skip kit allocation check in case of no line selected  \n" +
			"  	-- get count if all lineitem are allocation require means need to check for kit allocation  \n" +
			"	SELECT CASE WHEN COUNT(1) > 0 THEN 1 ELSE 0 END INTO isSkipKitAllocationValidation FROM temp_assy_part_list  \n" +
			"		WHERE mfgPNID IN (SELECT id FROM temp_umid_details WHERE uid=pUMID)  \n" +
			"		AND isNotRequiredKitAllocation=1  \n" +
			"        AND  rfqLineItemsID = IFNULL(prfqLineItemsID,rfqLineItemsID);  \n" +
			"  \n" +
			"	IF(isSkipKitAllocationValidation = 0 AND (pcheckKitAllocation IS NOT NULL AND pcheckKitAllocation > 0)  \n" +
			"		AND (temp_recordFoundInKitAllocation > 0)) THEN  \n" +
			"	        -- check with lineitem of feeder and allocated parts  \n" +
			"		IF(pisConfirmed = 0 AND pFromFeeder = 1) THEN  \n" +
			"			IF(SELECT COUNT(1) FROM temp_feeder_details WHERE FIND_IN_SET(temp_recordFoundInKitAllocation, rfqLineItemsID) = 0) THEN  \n" +
			"				-- CONFIRMATION_FOR_DIFF_LINE_ITEM  \n" +
			"				SET result = fun_checkAndInsertError('UMID035', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
			"			ELSE  \n" +
			"				-- ALLOCATED IN KIT  \n" +
			"				SET result = fun_checkAndInsertError('UMID016', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
			"			END IF;  \n" +
			"		ELSE  \n" +
			"			-- ALLOCATED IN KIT  \n" +
			"			SET result = fun_checkAndInsertError('UMID016', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
			"		END IF;  \n" +
			"	ELSE  \n" +
			"		IF (isSkipKitAllocationValidation = 0) THEN  \n" +
			"			IF (pFromFeeder = 1) THEN  \n" +
			"				-- UMID_NOT_ALLOCATED  \n" +
			"				SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
			"			ELSE  \n" +
			"				-- check scan umid valid or not  \n" +
			"				## Check for Supply materials and tools  \n" +
			"				IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.isDeleted = 0 AND  \n" +
			"					wop.partID = temp_umid_comp_id AND  \n" +
			"					wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.isDeleted = 0) > 0) THEN  \n" +
			"						SET result = 1;  \n" +
			"				## Check for packaging part for umid.  \n" +
			"				ELSEIF((SELECT COUNT(1) FROM component_packagingalias cp WHERE cp.aliasgroupID = temp_umid_package_id  \n" +
			"					AND cp.componentID = temp_umid_comp_id AND cp.isDeleted = 0  \n" +
			"					AND cp.aliasgroupID AND cp.aliasgroupID IN (SELECT c.packagingGroupId FROM component_attributes c  \n" +
			"					WHERE c.refComponentID IN (SELECT woop.partID FROM workorder_operation_part woop WHERE woop.woID=pwoID AND woop.woOPID=pwoOPID AND woop.isDeleted = 0)  \n" +
			"					AND c.isDeleted = 0))  > 0) THEN  \n" +
			"					-- SET @stmt_str = 'Scan UMID was packaging alias';  \n" +
			"					-- INSERT INTO temp_scan_error (errorText, isFeederError, isUMIDError, isConfirmation, isMessage, isInformation, stringText1, stringText2, stringText3)  \n" +
			"					-- VALUES (@stmt_str, 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
			"					SET result = 1;  \n" +
			"				ELSE  \n" +
			"					IF(pVerificationReqFrom = 'TPP') THEN # TPP - traveler pre programm  \n" +
			"						-- UMID_NOT_IN_KIT  \n" +
			"						SET result = fun_checkAndInsertError('PREPROG003', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
			"					ELSE  \n" +
			"						-- UMID_NOT_IN_WORKORDER_OR_KIT  \n" +
			"						SET result = fun_checkAndInsertError('UMID007', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
			"					END IF;  \n" +
			"				END IF;  \n" +
			"			END IF;  \n" +
			"		ELSEIF isSkipKitAllocationValidation = 1  AND prfqLineItemsID IS NOT NULL THEN  \n" +
			"			-- No kit allocation required  for material scan  \n" +
			"			SET result = fun_checkAndInsertError('UMID042', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
			"		ELSEIF isSkipKitAllocationValidation = 1  AND pFromFeeder = 1 THEN  \n" +
			"		-- No kit allocation required for feeder scan  \n" +
			"			SET result = fun_checkAndInsertError('UMID042', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
			"		ELSEIF isSkipKitAllocationValidation = 1  AND pVerificationReqFrom = 'TPP' THEN  \n" +
			"		-- No kit allocation required for # TPP - traveler pre programm  \n" +
			"			SET result = fun_checkAndInsertError('UMID042', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
			"		ELSE  \n" +
			"			SET result = 0;  \n" +
			"		END IF;  \n" +
			"	END IF;  \n" +
			"	IF(result = 1 AND pFromFeeder = 1) THEN  \n" +
			"		IF((SELECT COUNT(1) FROM temp_assy_part_list  \n" +
			"			WHERE mfgPNID = temp_umid_comp_id  \n" +
			"			AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
			"				WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.isDeleted = 0)  \n" +
			"				AND LineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
			"				WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.isDeleted = 0) > 0)) THEN  \n" +
			"			SET result = 1;  \n" +
			"		ELSE  \n" +
			"			-- WRONG_LOCATION  \n" +
			"			SET result = fun_checkAndInsertError('UMID015', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
			"		END IF;  \n" +
			"	END IF;  \n" +
			"	SELECT result INTO @temp_result;  \n" +
			"	RETURN result;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP function IF EXISTS `fun_getKitAllocatedMountingType`;  \n" +
			"CREATE FUNCTION `fun_getKitAllocatedMountingType`(  \n" +
			"	pRefSalesOrderDetID INT,  \n" +
			"	pRefRfqLineitem INT,  \n" +
			"	pMountingTypeId INT  \n" +
			") RETURNS int  \n" +
			"BEGIN  \n" +
			"	DECLARE v_mountingTypeId INT;  \n" +
			"	DECLARE v_verifiedMountingTypeId INT;  \n" +
			"	DECLARE v_count INT(11);  \n" +
			"  \n" +
			"	SELECT  count(1)  \n" +
			"	into 	v_count  \n" +
			"    From  \n" +
			"		(  \n" +
			"			Select c.mountingTypeID  \n" +
			"			FROM 	component_attributes c  \n" +
			"			INNER JOIN 	kit_allocation_lineitems_alternatepart kal ON c.refComponentID = kal.mfgPNID  \n" +
			"			where 	kal.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"			AND		kal.refRfqLineitem = pRefRfqLineitem  \n" +
			"			AND 	kal.isDeleted = 0  \n" +
			"			AND 	c.isDeleted = 0  \n" +
			"		) a;  \n" +
			"  \n" +
			"  \n" +
			"	IF (v_count = 1) THEN  \n" +
			"		SET v_mountingTypeId = pMountingTypeId;  \n" +
			"	ELSE  \n" +
			"		SELECT 	mountingTypeID  \n" +
			"		INTO 	v_verifiedMountingTypeId  \n" +
			"        FROM 	component  \n" +
			"        WHERE 	id = (  \n" +
			"						SELECT 	kal.mfgPNID  \n" +
			"						FROM 	kit_allocation_lineitems_alternatepart kal  \n" +
			"						WHERE  	kal.mismatchMountingTypeStep = 1  \n" +
			"                        AND 	kal.refRfqLineitem = pRefRfqLineitem  \n" +
			"                        AND 	kal.approvedMountingType = 1  \n" +
			"                        AND 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"                        AND 	kal.isDeleted = 0  \n" +
			"                        LIMIT 1  \n" +
			"					);  \n" +
			"  \n" +
			"		 IF(!v_verifiedMountingTypeId OR v_verifiedMountingTypeId='' OR v_verifiedMountingTypeId IS NULL) THEN  \n" +
			"			SET v_mountingTypeId = -1;  \n" +
			"          ELSE  \n" +
			"			SET v_mountingTypeId = v_verifiedMountingTypeId;  \n" +
			"          END IF;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	RETURN v_mountingTypeId;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (6066,'2.00','V1',' User Story 42365: Apply Part Master Normalization effect in Kit UMID and Bulk Transfer flow - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
   case 6066:
			  allDbChangesArray.push(
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_GetKitReleasePlanDetail`;  \n" +
			"CREATE PROCEDURE `Sproc_GetKitReleasePlanDetail`(  \n" +
			"	IN pRefSalesOrderDetID INT,  \n" +
			"	IN pAssyID INT,  \n" +
			"	IN pSubAssyID INT  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE vSubAssyQPA DECIMAL(18,8);  \n" +
			"	DECLARE vMismatchItem DECIMAL(18,8);  \n" +
			"	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);  \n" +
			"    DECLARE vKitQty DECIMAL(18,8);  \n" +
			"	DECLARE vCustomerId INT;  \n" +
			"  \n" +
			"    SELECT 		customerID  ,kitQty  \n" +
			"	INTO		vCustomerId ,vKitQty  \n" +
			"	FROM 		salesorderdet sd  \n" +
			"	INNER JOIN 	salesordermst s ON s.id = sd.refSalesOrderID  \n" +
			"	WHERE 		sd.id = pRefSalesOrderDetID;  \n" +
			"  \n" +
			"    DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingTypeWiseKitDet  \n" +
			"	(  \n" +
			"		mountingTypeID INT(11),  \n" +
			"		mountingType VARCHAR(50),  \n" +
			"		connecterTypeID INT(11),  \n" +
			"		connecterType VARCHAR(50),  \n" +
			"		feasibilityWithAllocation DECIMAL(18,8),  \n" +
			"		shortageLine DECIMAL(18,8),  \n" +
			"		feasibilityWithAvailableAndAllocatedStock DECIMAL(18,8),  \n" +
			"		shortageWithAvailableQty DECIMAL(18,8),  \n" +
			"		shortageForInputQty DECIMAL(18,8),  \n" +
			"		releasedQty DECIMAL(18,8),  \n" +
			"		pendingQty DECIMAL(18,8),  \n" +
			"		releasePercentage DECIMAL(18,8),  \n" +
			"		totalLine INT  \n" +
			"	);  \n" +
			"  \n" +
			"	/* Get assembly parts detail from kit_allocation_lineitems and kit_allocation_lineitems_alternatepart table */  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
			"	SELECT 	k.id,					kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
			"		kl.mountingTypeID, 			kl.connecterTypeID, 		kl.consolidatedMfgPNIDs, 		k.numOfPosition,  \n" +
			"		(  \n" +
			"			CASE  \n" +
			"				WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
			"					(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
			"				ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
			"			END  \n" +
			"		) AS kitQPAWithDNP,  \n" +
			"		kl.uomMismatchedStep,  \n" +
			"		k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
			"	FROM 	(  \n" +
			"			SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
			"					(  \n" +
			"						CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) # Matched Mounting Type  \n" +
			"								THEN  MIN(c.mountingTypeID)  \n" +
			"							WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 # Mismatched with Approval Mounting Type  \n" +
			"								THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))  \n" +
			"							ELSE  -1  \n" +
			"						END  \n" +
			"					) mountingTypeID,  \n" +
			"					IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
			"					GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
			"					MIN(kal.uomMismatchedStep) uomMismatchedStep    # Zero indicate to part value does not match with BOM UOM  \n" +
			"			FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
			"			JOIN vu_component_mpn c ON kal.mfgPNID = c.id  \n" +
			"			LEFT JOIN vu_component_mpn cp ON cp.packagingGroupid = c.packagingGroupid  \n" +
			"			WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
			"			AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
			"			AND 		kal.isDeleted = 0  \n" +
			"			GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
			"	) AS kl  \n" +
			"	INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0;  \n" +
			"	/* Get available and allocated stock for selected assembly*/  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Stock_Det;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Stock_Det AS  \n" +
			"	SELECT  	r.consolidatedMfgPNIDs, 	r.id,  \n" +
			"			IFNULL(ks.allocatedUnit, 0) allocatedunit,  \n" +
			"			IFNULL(ks.allocatedPins,0) allocatedPin,  \n" +
			"			SUM(IFNULL(fun_convertUOM(v.uom, IFNULL(ks.allocatedUOM, r.uomID), IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)),0)) availableStock,  \n" +
			"			SUM((FLOOR(IFNULL(v.noOfPosition, 0)/IFNULL(r.numOfPosition, 0)) * IFNULL(r.numOfPosition, 0)) * IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)) availableStockInPin  \n" +
			"	FROM 		temp_Kit_Consolidate_Detail r  \n" +
			"	LEFT JOIN 	vu_kit_allocation_summary ks ON r.refsalesORderDetid = ks.refsalesOrderDetId  \n" +
			"                    AND ks.assyID =  pAssyID  \n" +
			"					AND FIND_IN_SET(ks.refBOMLineID, r.consolidatedLineItemIDs)  \n" +
			"	LEFT JOIN 	vu_deducted_allocation_available_Stock v ON FIND_IN_SET(v.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",consolidatedMfgPNIDs) ELSE consolidatedMfgPNIDs END))  \n" +
			"	WHERE 		r.isNotRequiredKitAllocation != 1  \n" +
			"	GROUP BY 	r.consolidatedMfgPNIDs, r.id, ks.allocatedunit, ks.allocatedPins;  \n" +
			"  \n" +
			"    /* Calculate kit line total & shortage & feasibility with allocation */  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS temp_Kit_calculateshortageLinperPlan;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_calculateshortageLinperPlan AS  \n" +
			"	SELECT 	a.salesorderPlanId,		a.salesOrderdetid,		a.kitreleaseQty,	a.refAssyId,	a.calculatedKitQty,  \n" +
			"			count(1) TotalLine ,  \n" +
			"			concat(FLOOR(sum(CASE WHEN (feasibilityWithAllocation - calculatedKitQty) >= 0 then 0 else 1 end) ), '/',   count(1)) shortageLines,  \n" +
			"			min(feasibilityWithAllocation) feasibilityWithAllocation  \n" +
			"	FROM  \n" +
			"	(  \n" +
			"			SELECT 	b.id salesorderPlanId,	r.id kitallocationlineitemid,	t.id,b.salesOrderdetid,  \n" +
			"					b.refAssyID,			b.SubAssyId,b.kitReleaseQty,	r.kitQPAWithDNP qpa,  \n" +
			"                    t.allocatedUnit,  		b.calculatedKitQty,				t.allocatedPin,  \n" +
			"                    t.availableStock,		t.availableStockInPin,          r.mountingTypeID,  \n" +
			"                    (CASE WHEN r.connecterTypeID = -2 THEN r.connecterTypeID ELSE NULL END) connecterTypeID,  \n" +
			"					(  \n" +
			"						CASE  \n" +
			"							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
			"								(t.allocatedUnit/r.kitQPAWithDNP)  \n" +
			"							ELSE (IFNULL(t.allocatedPin, 0) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
			"						END  \n" +
			"					) feasibilityWithAllocation,  \n" +
			"					(  \n" +
			"						CASE  \n" +
			"							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
			"								((t.availableStock + t.allocatedUnit)/r.kitQPAWithDNP)  \n" +
			"							ELSE ((IFNULL(t.allocatedPin, 0) + IFNULL(t.availableStockInPin, 0)) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
			"						END  \n" +
			"					) feasibilityWithAvailableAndAllocatedStock,  \n" +
			"					(CASE  \n" +
			"						WHEN r.uomMismatchedStep = 0 THEN 0  \n" +
			"						ELSE  \n" +
			"							CASE  \n" +
			"								WHEN r.connecterTypeID = -2 THEN  \n" +
			"									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty* IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0)) < 0)  \n" +
			"											THEN 0  \n" +
			"											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0))  \n" +
			"									END)  \n" +
			"								ELSE  \n" +
			"									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0)) < 0)  \n" +
			"											THEN 0  \n" +
			"											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0))  \n" +
			"									END)  \n" +
			"							END  \n" +
			"					END) shortagePerBuild  \n" +
			"			FROM  \n" +
			"				(  \n" +
			"					SELECT 	k.id,		kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
			"							kl.mountingTypeID, 						kl.connecterTypeID,  \n" +
			"                            kl.consolidatedMfgPNIDs, 				k.numOfPosition,  \n" +
			"							(  \n" +
			"								CASE  \n" +
			"									WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
			"										(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
			"									ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
			"								END  \n" +
			"							) AS kitQPAWithDNP,  \n" +
			"							kl.uomMismatchedStep,          k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
			"					FROM 	(  \n" +
			"								SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
			"											(  \n" +
			"												CASE 	WHEN MIN(ca.mountingTypeID) = MAX(ca.mountingTypeID) /* Matched Mounting Type */  \n" +
			"														THEN  MIN(ca.mountingTypeID)  \n" +
			"													WHEN MIN(ca.mountingTypeID) !=  MAX(ca.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
			"														THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN ca.mountingTypeID ELSE NULL END))  \n" +
			"													ELSE  -1  \n" +
			"												END  \n" +
			"											) mountingTypeID,  \n" +
			"											IFNULL(MAX(ca.connecterTypeID), -1) connecterTypeID,  \n" +
			"											GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
			"											MIN(kal.uomMismatchedStep) uomMismatchedStep    /* Zero indicate to part value does not match with BOM UOM */  \n" +
			"									FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
			"                                    JOIN component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1 AND c.isDeleted = 0  \n" +
			"									LEFT JOIN component_attributes ca ON c.id = ca.refComponentID  AND ca.isDeleted = 0  \n" +
			"									LEFT JOIN component_attributes da ON ca.packagingGroupid = da.packagingGroupid AND da.isDeleted = 0  \n" +
			"									LEFT JOIN component cp ON da.refComponentID = cp.id AND cp.isDeleted = 0  \n" +
			"									WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
			"									AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
			"									AND 		kal.isDeleted = 0  \n" +
			"									AND			c.isDeleted = 0  \n" +
			"									GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
			"							) AS kl  \n" +
			"							INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0  \n" +
			"				) r  \n" +
			"				INNER JOIN (  \n" +
			"							SELECT 	id,		salesOrderdetid,	refAssyID,	SubAssyId,	kitReleaseQty,  \n" +
			"									SUM(kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
			"							FROM salesorder_plan_detailsmst where salesorderdetid= pRefSalesOrderDetID  AND isDeleted = 0  \n" +
			"                            ) b  \n" +
			"				INNER JOIN 	temp_Kit_Stock_Det t ON r.id = t.id  \n" +
			"		) a  \n" +
			"		GROUP BY  salesorderPlanId,salesOrderdetid,kitreleaseQty,refAssyId,calculatedKitQty;  \n" +
			"  \n" +
			"	SELECT 	id,  \n" +
			"			plannKitNumber,  \n" +
			"			poQty,  \n" +
			"			poDueDate,  \n" +
			"			materialDockDate,  \n" +
			"			b.kitReleaseQty,  \n" +
			"			kitReleaseDate,  \n" +
			"			feasibilityWithAllocatedQty AS currentBuildFeasibility,  \n" +
			"			(CASE WHEN buildFeasibility > 0 THEN buildFeasibility ELSE 0 END) AS buildFeasibility,  \n" +
			"			(CASE WHEN (buildFeasibility > 0 AND buildFeasibility > b.kitReleaseQty) THEN 0 WHEN (buildFeasibility > 0) THEN (b.kitReleaseQty - buildFeasibility) ELSE b.kitReleaseQty END) AS Shortage,  \n" +
			"            c.shortageLines,  \n" +
			"			b.calculatedKitQty,  \n" +
			"			actualKitReleaseDate,  \n" +
			"			releaseTimeFeasibility,  \n" +
			"			releasedByName,  \n" +
			"			mfrLeadTime,  \n" +
			"			kitStatus,  \n" +
			"			RushJob,  \n" +
			"			FUNC_MISMATCHITEMFORKIT(b.salesOrderDetID, IFNULL(b.subAssyID,b.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
			"			fun_getWorkorderNumberByID(woID) workorderNumber,  \n" +
			"			releasedNote,  \n" +
			"			releaseKitNumber,  \n" +
			"			subAssyReleaseCount,  \n" +
			"			subAssyReleasedCount,  \n" +
			"			woID,  \n" +
			"			kitReturnDate,  \n" +
			"			kitReturnStatus,  \n" +
			"			woStatusID,  \n" +
			"            woSubStatusID,  \n" +
			"            IF(pSubAssyID IS NULL, 0, 1) AS isSubAssembly  \n" +
			"	FROM  \n" +
			"			(  \n" +
			"				SELECT *,  \n" +
			"					(  \n" +
			"						CASE  \n" +
			"							WHEN (calculatedKitQty >  feasibilityWithAllocatedQty) THEN  (kitReleaseQty - (calculatedKitQty - feasibilityWithAllocatedQty))  \n" +
			"							ELSE kitReleaseQty  \n" +
			"						END  \n" +
			"					) buildFeasibility  \n" +
			"				FROM	(  \n" +
			"						SELECT 	r.*,  \n" +
			"							SUM(r.kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
			"						FROM 	vu_release_plan_detail r  \n" +
			"						WHERE 	r.salesOrderDetID = pRefSalesOrderDetID  \n" +
			"								AND r.refAssyId = pAssyID  \n" +
			"								AND (  \n" +
			"				 					CASE  \n" +
			"										WHEN pSubAssyID IS NOT NULL THEN r.subAssyID = pSubAssyID  \n" +
			"										ELSE r.subAssyID IS NULL  \n" +
			"									END  \n" +
			"								)  \n" +
			"						ORDER BY r.salesOrderDetID, r.refAssyId, r.subAssyID, r.refPlanId DESC, r.id  \n" +
			"					)  \n" +
			"				AS a  \n" +
			"	 		)  \n" +
			"	AS b   inner join     temp_Kit_calculateshortageLinperPlan c on  b.id =  c.salesorderplanid  \n" +
			"	ORDER BY poDueDate, plannKitNumber ASC;  \n" +
			"  \n" +
			"	SELECT MIN(promisedShipDate) promisedShipDate FROM salesshippingmst WHERE  sDetID = pRefSalesOrderDetID and isdeleted = 0 ;  \n" +
			"  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (6067,'2.00','V1',' User Story 42365: Apply Part Master Normalization effect in Kit UMID and Bulk Transfer flow - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
            case 6067:
             allDbChangesArray.push(
             /* **************************** New Script -> 28-03-2022 *********************************** */
            "ALTER TABLE `kit_allocation_assy_detail` ADD COLUMN `refkitmstID` INT NULL AFTER `refSalesOrderDetID`,  \n" +
            "ADD INDEX `FK_kit_allocation_assy_detail_refkitmstID_idx` (`refkitmstID` ASC) VISIBLE;  \n" +
            "ALTER TABLE `kit_allocation_lineitems` ADD COLUMN `refkitmstID` INT NULL AFTER `refSalesOrderDetID`,  \n" +
            "ADD INDEX `FK_kit_allocation_lineitems_refkitmstID_idx` (`refkitmstID` ASC) VISIBLE;  \n" +
            "ALTER TABLE `kit_allocation_lineitems_alternatepart` ADD COLUMN `refkitmstID` INT NULL AFTER `refSalesOrderDetID`,  \n" +
            "ADD INDEX `FK_kit_allocation_lineitems_alternatepart_refkitmstID_idx` (`refkitmstID` ASC) VISIBLE;  \n" +
            "ALTER TABLE `kit_allocation` ADD COLUMN `refkitmstID` INT NULL AFTER `refSalesOrderDetID`,  \n" +
            "ADD INDEX `FK_kit_allocation_refkitmstID_idx` (`refkitmstID` ASC) VISIBLE;  \n" +
            "ALTER TABLE `kit_allocation_consolidate_line_detail` ADD COLUMN `refkitmstID` INT NULL AFTER `refSalesOrderDetID`,  \n" +
            "ADD INDEX `FK_kit_allocation_consolidate_line_detail_refkitmstID_idx` (`refkitmstID` ASC) VISIBLE;  \n" +
            "ALTER TABLE `kit_allocation_consolidate_line_alternatepart` ADD COLUMN `refkitmstID` INT NULL AFTER `refSalesOrderDetID`,  \n" +
            "ADD INDEX `FK_kit_allocation_consolidate_line_alternatepart_refkitmstID_idx` (`refkitmstID` ASC) VISIBLE;  \n" +
            "ALTER TABLE `component_sid_stock_history` ADD COLUMN `refkitmstID` INT NULL AFTER `refSalesOrderDetID`,  \n" +
            "ADD INDEX `FK_component_sid_stock_history_refkitmstID_idx` (`refkitmstID` ASC) VISIBLE;  \n" +
             /* **************************** Add Script Version -> 28-03-2022 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (6068,'2.00','V1',' Alter kit flow all tables and added refkitmstID column and fk  - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
             );
            break;
        case 6068:
			  allDbChangesArray.push(
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP function IF EXISTS `fun_getKitAllocatedPin`;  \n" +
			"CREATE FUNCTION `fun_getKitAllocatedPin`(  \n" +
			"	pAssyId INT,  \n" +
			"	pRefSalesOrderDetID INT,  \n" +
			"	pRefRfqLineitem INT,  \n" +
			"	pRefRfqLineitemIds VARCHAR(255),  \n" +
			"	pBomPin INT,  \n" +
			"	pConsolidated BOOLEAN  \n" +
			") RETURNS decimal(18,8)  \n" +
			"BEGIN  \n" +
			"	DECLARE v_AllocatedPins DECIMAL(18,6);  \n" +
			"	DECLARE vPartIds VARCHAR(1000);  \n" +
			"	DECLARE v_CustPNID VARCHAR(1000);  \n" +
			"    Declare v_refRfqLineitem VARCHAR(255);  \n" +
			"    declare v_AssyID int;  \n" +
			"  \n" +
			"    If(pConsolidated = 1) then set v_AssyID = null; else set v_AssyID = pAssyId; end if;  \n" +
			"  \n" +
			"    set v_refRfqLineitem = ifnull(pRefRfqLineitemIds, cast(pRefRfqLineitem as char(255)));  \n" +
			"  \n" +
			"	IF (pBomPin IS NULL OR pBomPin = 0) THEN  \n" +
			"		SET v_AllocatedPins = 0;  \n" +
			"	ELSE  \n" +
			"		/* get cutomer part ID from allocation table */  \n" +
			"        SELECT 	GROUP_CONCAT(custPNID)  \n" +
			"        into 	v_CustPNID  \n" +
			"		FROM 	kit_allocation_lineitems  \n" +
			"		WHERE 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"		AND 	FIND_IN_SET(refRfqLineitem, v_refRfqLineitem)  \n" +
			"		AND 	isDeleted = 0;  \n" +
			"  \n" +
			"		/* get alternate and packaging alias part ID from allocation table */  \n" +
			"        SELECT 	GROUP_CONCAT(c.packingAliasParts)  \n" +
			"        into 	vPartIds  \n" +
			"		FROM 	kit_allocation_lineitems_alternatepart kla  \n" +
			"		INNER JOIN vu_component_packingalias com ON kla.mfgPNID = com.refComponentID  \n" +
			"		WHERE 	kla.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"		AND 	FIND_IN_SET(refRfqLineitem, v_refRfqLineitem)  \n" +
			"		AND 	kla.isDeleted = 0;  \n" +
			"  \n" +
			"        if(v_CustPNID is not null or v_CustPNID != '') then  \n" +
			"			set vPartIds = concat(vPartIds, ',', v_CustPNID);  \n" +
			"		end if;  \n" +
			"  \n" +
			"		IF (vPartIds IS NULL or vPartIds = '') THEN  \n" +
			"			SET v_AllocatedPins = 0;  \n" +
			"		ELSE  \n" +
			"			SELECT 	SUM(((FLOOR(partPin/IFNULL(pBomPin, 0)) * IFNULL(pBomPin, 0)) * IFNULL(allocatedUnit, 0)))  \n" +
			"			INTO 	v_AllocatedPins  \n" +
			"			FROM 	(  \n" +
			"					SELECT 		ka.refUIDId, 	ka.refBOMLineID, 	IFNULL(c.noOfPosition, 0) partPin,  \n" +
			"								SUM(ka.allocatedUnit) AS allocatedUnit  \n" +
			"					FROM 		kit_allocation ka  \n" +
			"					INNER JOIN	component_attributes c ON c.refComponentID = ka.partId  \n" +
			"											and c.connecterTypeID = -2  \n" +
			"                                            /* -2 is system generated entry and it is header-brackaway*/  \n" +
			"                                            AND c.isDeleted = 0  \n" +
			"					WHERE 		ka.`status` = 'A'  \n" +
			"					AND 		ka.assyID = ifnull(v_AssyID, ka.assyID)  \n" +
			"					AND 		ka.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"					AND 		FIND_IN_SET(ka.partId, vPartIds)  \n" +
			"                    AND 		FIND_IN_SET(ka.refBOMLineID, v_refRfqLineitem)  \n" +
			"					GROUP BY 	ka.refUIDId, 	ka.refBOMLineID, 	IFNULL(c.noOfPosition, 0)  \n" +
			"				) a;  \n" +
			"		END IF;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	RETURN IFNULL(CAST(v_AllocatedPins AS DECIMAL(18,8)),0);  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP function IF EXISTS `fun_getKitAllocatedQty`;  \n" +
			"CREATE FUNCTION `fun_getKitAllocatedQty`(  \n" +
			"	pAssyId INT,  \n" +
			"	pRefSalesOrderDetID INT,  \n" +
			"	pRefRfqLineitem INT,  \n" +
			"	pRefRfqLineitemIds VARCHAR(255),  \n" +
			"	pConsolidated BOOLEAN  \n" +
			") RETURNS decimal(18,8)  \n" +
			"BEGIN  \n" +
			"	DECLARE v_AllocatedQty DECIMAL(18,6);  \n" +
			"	DECLARE v_CustPNID VARCHAR(1000);  \n" +
			"    declare v_AssyID int;  \n" +
			"    declare v_alternate_packaging_partID varchar(1000);  \n" +
			"  \n" +
			"	If(pConsolidated = 1) then set v_AssyID = null; else set v_AssyID = pAssyId; end if;  \n" +
			"  \n" +
			"	/* get cutomer part ID from allocation table */  \n" +
			"	SELECT 	GROUP_CONCAT(custPNID)  \n" +
			"	INTO 	v_CustPNID  \n" +
			"	FROM 	kit_allocation_lineitems  \n" +
			"	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"	AND 	FIND_IN_SET(refRfqLineitem, ifnull(pRefRfqLineitemIds, cast(pRefRfqLineitem as char(255))))  \n" +
			"	AND 	isDeleted = 0;  \n" +
			"  \n" +
			"    /* get alternate and packaging alias part ID from allocation table */  \n" +
			"    SELECT 	GROUP_CONCAT(com.packingAliasParts) into v_alternate_packaging_partID  \n" +
			"	FROM 	kit_allocation_lineitems_alternatepart kla  \n" +
			"	INNER JOIN vu_component_packingalias com ON kla.mfgPNID = com.refComponentID  \n" +
			"	WHERE 	kla.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"	AND 	FIND_IN_SET(refRfqLineitem, ifnull(pRefRfqLineitemIds, cast(pRefRfqLineitem as char(255))))  \n" +
			"	AND 	kla.isDeleted = 0;  \n" +
			"  \n" +
			"    if(v_CustPNID is not null or v_CustPNID != '') then  \n" +
			"		set v_alternate_packaging_partID = concat(v_alternate_packaging_partID, ',', v_CustPNID);  \n" +
			"	end if;  \n" +
			"	/* Total allocation of customer part + alternate part + packaging alias parts */  \n" +
			"	SELECT 	SUM(allocatedQty) INTO v_AllocatedQty  \n" +
			"	FROM 	(  \n" +
			"				SELECT 		ka.assyID, 			ka.partId, 							ka.refSalesOrderdetId,  \n" +
			"							ka.refBOMLineID, 	SUM(ka.allocatedQty) allocatedQty, 	SUM(ka.allocatedUnit) allocatedUnit  \n" +
			"				FROM 		kit_allocation ka  \n" +
			"				WHERE		ka.status = \"A\"  \n" +
			"				GROUP BY 	ka.assyID, ka.partId, 	 ka.refSalesOrderdetId, ka.refBOMLineID  \n" +
			"			) a  \n" +
			"	WHERE 	a.refSalesOrderdetId = pRefSalesOrderDetID  \n" +
			"	AND     a.assyID = ifnull(v_AssyID, a.assyID)  \n" +
			"	AND 	FIND_IN_SET(a.refBOMLineID, ifnull(pRefRfqLineitemIds, cast(pRefRfqLineitem as char(255))))  \n" +
			"	AND     FIND_IN_SET(a.partID, v_alternate_packaging_partID)  \n" +
			"	GROUP BY 	a.refSalesOrderdetId;  \n" +
			"  \n" +
			"	RETURN IFNULL(CAST(v_AllocatedQty AS DECIMAL(18,8)),0);  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP function IF EXISTS `fun_getKitAllocatedUnits`;  \n" +
			"CREATE FUNCTION `fun_getKitAllocatedUnits`(  \n" +
			"	pAssyId INT,  \n" +
			"	pRefSalesOrderDetID INT,  \n" +
			"	pRefRfqLineitem INT,  \n" +
			"	pRefRfqLineitemIds VARCHAR(255),  \n" +
			"	pConsolidated BOOLEAN  \n" +
			") RETURNS decimal(18,8)  \n" +
			"BEGIN  \n" +
			"	DECLARE v_AllocatedUnits DECIMAL(18,6);  \n" +
			"	DECLARE v_CustPNID VARCHAR(1000);  \n" +
			"	declare v_AssyID int;  \n" +
			"    declare v_alternate_packaging_partID varchar(1000);  \n" +
			"  \n" +
			"	If(pConsolidated = 1) then set v_AssyID = null; else set v_AssyID = pAssyId; end if;  \n" +
			"  \n" +
			"	/* get cutomer part ID from allocation table */  \n" +
			"	SELECT 	GROUP_CONCAT(custPNID)  \n" +
			"	INTO 	v_CustPNID  \n" +
			"	FROM 	kit_allocation_lineitems  \n" +
			"	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"	AND 	FIND_IN_SET(refRfqLineitem, ifnull(pRefRfqLineitemIds, cast(pRefRfqLineitem as char(255))))  \n" +
			"	AND 	isDeleted = 0;  \n" +
			"  \n" +
			"    /* get alternate and packaging alias part ID from allocation table */  \n" +
			"    SELECT 	GROUP_CONCAT(com.packingAliasParts) into v_alternate_packaging_partID  \n" +
			"	FROM 	kit_allocation_lineitems_alternatepart kla  \n" +
			"	INNER JOIN vu_component_packingalias com ON kla.mfgPNID = com.refComponentID  \n" +
			"	WHERE 	kla.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"	AND 	FIND_IN_SET(refRfqLineitem, ifnull(pRefRfqLineitemIds, cast(pRefRfqLineitem as char(255))))  \n" +
			"	AND 	kla.isDeleted = 0;  \n" +
			"  \n" +
			"    if(v_CustPNID is not null or v_CustPNID != '') then  \n" +
			"		set v_alternate_packaging_partID = concat(v_alternate_packaging_partID, ',', v_CustPNID);  \n" +
			"	end if;  \n" +
			"	/* Total allocation of customer part + alternate part + packaging alias parts */  \n" +
			"	SELECT 	SUM(allocatedUnit) INTO v_AllocatedUnits  \n" +
			"	FROM 	(  \n" +
			"				SELECT 		ka.assyID, 			ka.partId, 							ka.refSalesOrderdetId,  \n" +
			"							ka.refBOMLineID, 	SUM(ka.allocatedQty) allocatedQty, 	SUM(ka.allocatedUnit) allocatedUnit  \n" +
			"				FROM 		kit_allocation ka  \n" +
			"				WHERE		ka.status = \"A\"  \n" +
			"				GROUP BY 	ka.assyID, ka.partId, 	 ka.refSalesOrderdetId, ka.refBOMLineID  \n" +
			"			) a  \n" +
			"	WHERE 	a.refSalesOrderdetId = pRefSalesOrderDetID  \n" +
			"	AND     a.assyID = ifnull(v_AssyID, a.assyID)  \n" +
			"	AND 	FIND_IN_SET(a.refBOMLineID, ifnull(pRefRfqLineitemIds, cast(pRefRfqLineitem as char(255))))  \n" +
			"	AND     FIND_IN_SET(a.partID, v_alternate_packaging_partID)  \n" +
			"	GROUP BY 	a.refSalesOrderdetId;  \n" +
			"  \n" +
			"	RETURN IFNULL(CAST(v_AllocatedUnits AS DECIMAL(18,8)),0);  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP function IF EXISTS `fun_getKitConsumeQty`;  \n" +
			"CREATE FUNCTION `fun_getKitConsumeQty`(  \n" +
			"	pAssyId INT,  \n" +
			"	pRefSalesOrderDetID INT,  \n" +
			"	pRefRfqLineitem INT(11),  \n" +
			"	pRefRfqLineitemIds VARCHAR(255),  \n" +
			"	pIsConsolidated BOOLEAN  \n" +
			") RETURNS decimal(18,8)  \n" +
			"BEGIN  \n" +
			"	DECLARE vConsumeValue DECIMAL(18,6);  \n" +
			"	DECLARE vPartIds VARCHAR(500);  \n" +
			"	DECLARE v_CustPNID VARCHAR(1000);  \n" +
			"	Declare v_refRfqLineitem VARCHAR(255);  \n" +
			"    declare v_AssyID int;  \n" +
			"  \n" +
			"    If(pIsConsolidated = 1) then set v_AssyID = null; else set v_AssyID = pAssyId; end if;  \n" +
			"  \n" +
			"	SET vConsumeValue = 0;  \n" +
			"  \n" +
			"    set v_refRfqLineitem = ifnull(pRefRfqLineitemIds, cast(pRefRfqLineitem as char(255)));  \n" +
			"  \n" +
			"	/* get cutomer part ID from allocation table */  \n" +
			"	SELECT 	GROUP_CONCAT(custPNID)  \n" +
			"	into 	v_CustPNID  \n" +
			"	FROM 	kit_allocation_lineitems  \n" +
			"	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"	AND 	FIND_IN_SET(refRfqLineitem, v_refRfqLineitem)  \n" +
			"	AND 	isDeleted = 0;  \n" +
			"  \n" +
			"	/* get alternate and packaging alias part ID from allocation table */  \n" +
			"	SELECT 	GROUP_CONCAT(com.packingAliasParts)  \n" +
			"	into 	vPartIds  \n" +
			"	FROM 	kit_allocation_lineitems_alternatepart kla  \n" +
			"	INNER JOIN vu_component_packingalias com ON kla.mfgPNID = com.refComponentID  \n" +
			"	WHERE 	kla.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"	AND 	FIND_IN_SET(refRfqLineitem, v_refRfqLineitem)  \n" +
			"	AND 	kla.isDeleted = 0;  \n" +
			"  \n" +
			"	if(v_CustPNID is not null or v_CustPNID != '') then  \n" +
			"		set vPartIds = concat(vPartIds, ',', v_CustPNID);  \n" +
			"	end if;  \n" +
			"  \n" +
			"	SELECT 	IFNULL(SUM(ka.consumeQty),0) INTO vConsumeValue  \n" +
			"	FROM 	kit_allocation ka  \n" +
			"	WHERE 	ka.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"	AND	 	ka.assyID = ifnull(v_AssyID, ka.assyID)  \n" +
			"	AND 	FIND_IN_SET(ka.refBOMLineID, v_refRfqLineitem)  \n" +
			"	AND 	ka.status = \"R\"  \n" +
			"    AND 	FIND_IN_SET(ka.PartId, vPartIds) ;  \n" +
			"  \n" +
			"	RETURN vConsumeValue;  \n" +
			"  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP function IF EXISTS `fun_getKitConsumeUnits`;  \n" +
			"CREATE FUNCTION `fun_getKitConsumeUnits`(  \n" +
			"	pAssyId INT,  \n" +
			"	pRefSalesOrderDetID INT,  \n" +
			"	pRefRfqLineitem INT,  \n" +
			"	pRefRfqLineitemIds VARCHAR(255),  \n" +
			"	pIsConsolidated BOOLEAN  \n" +
			") RETURNS decimal(18,8)  \n" +
			"BEGIN  \n" +
			"	DECLARE vConsumeValue DECIMAL(18,6);  \n" +
			"	DECLARE vPartIds VARCHAR(500);  \n" +
			"	DECLARE v_CustPNID VARCHAR(1000);  \n" +
			"	Declare v_refRfqLineitem VARCHAR(255);  \n" +
			"    declare v_AssyID int;  \n" +
			"  \n" +
			"    If(pIsConsolidated = 1) then set v_AssyID = null; else set v_AssyID = pAssyId; end if;  \n" +
			"  \n" +
			"	SET vConsumeValue = 0;  \n" +
			"	set v_refRfqLineitem = ifnull(pRefRfqLineitemIds, cast(pRefRfqLineitem as char(255)));  \n" +
			"  \n" +
			"	/* get cutomer part ID from allocation table */  \n" +
			"	SELECT 	GROUP_CONCAT(custPNID)  \n" +
			"	into 	v_CustPNID  \n" +
			"	FROM 	kit_allocation_lineitems  \n" +
			"	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"	AND 	FIND_IN_SET(refRfqLineitem, v_refRfqLineitem)  \n" +
			"	AND 	isDeleted = 0;  \n" +
			"  \n" +
			"	/* get alternate and packaging alias part ID from allocation table */  \n" +
			"	SELECT 	GROUP_CONCAT(com.packingAliasParts)  \n" +
			"	into 	vPartIds  \n" +
			"	FROM 	kit_allocation_lineitems_alternatepart kla  \n" +
			"	INNER JOIN vu_component_packingalias com ON kla.mfgPNID = com.refComponentID  \n" +
			"	WHERE 	kla.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"	AND 	FIND_IN_SET(refRfqLineitem, v_refRfqLineitem)  \n" +
			"	AND 	kla.isDeleted = 0;  \n" +
			"  \n" +
			"	if(v_CustPNID is not null or v_CustPNID != '') then  \n" +
			"		set vPartIds = concat(vPartIds, ',', v_CustPNID);  \n" +
			"	end if;  \n" +
			"  \n" +
			"	SELECT 	IFNULL(SUM(ka.consumeUnit),0) INTO vConsumeValue  \n" +
			"	FROM 	kit_allocation ka  \n" +
			"	WHERE 	ka.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"	AND 	ka.assyID = ifnull(v_AssyID, ka.assyID)  \n" +
			"	AND 	FIND_IN_SET(ka.refBOMLineID, v_refRfqLineitem)  \n" +
			"	AND	 	ka.status = \"R\"  \n" +
			"	AND 	FIND_IN_SET(ka.PartId, vPartIds);  \n" +
			"  \n" +
			"	RETURN vConsumeValue;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP function IF EXISTS `fun_getKitMFRPNIdsWithPackaging`;  \n" +
			"CREATE FUNCTION `fun_getKitMFRPNIdsWithPackaging`(  \n" +
			"	pRefSalesOrderDetId INT  \n" +
			") RETURNS longtext CHARSET utf8mb4  \n" +
			"BEGIN  \n" +
			"	DECLARE result LONGTEXT;  \n" +
			"  \n" +
			"	SELECT  CONCAT('  \n" +
			"					SELECT 		GROUP_CONCAT(c.packingAliasParts) AS mfgPNID  \n" +
			"					FROM 		kit_allocation_lineitems_alternatepart  al  \n" +
			"					JOIN 		kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
			"					JOIN 		vu_component_packingalias c ON al.mfgPNID = c.refComponentID  \n" +
			"					WHERE 		l.refSalesOrderDetid = ', pRefSalesOrderDetId ,'  \n" +
			"								AND l.refRfqLineitem = a.rfqLineItemsId AND al.isDeleted = 0  \n" +
			"  	')  INTO result;  \n" +
			"	RETURN result;  \n" +
			"    END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP function IF EXISTS `fun_getMFRPNIdsWithPackagingforkit`;  \n" +
			"CREATE FUNCTION `fun_getMFRPNIdsWithPackagingforkit`(  \n" +
			"	pRefSalesOrderDetId INT  \n" +
			") RETURNS longtext CHARSET utf8mb4  \n" +
			"BEGIN  \n" +
			"	DECLARE result LONGTEXT;  \n" +
			"  \n" +
			"	SELECT  CONCAT('  \n" +
			"		SELECT 		c.packingAliasParts AS mfgPNID  \n" +
			"					FROM 		kit_allocation_consolidate_line_alternatepart  al  \n" +
			" 					JOIN 		kit_allocation_consolidate_line_detail l ON  l.id = al.kitConsolidateID  \n" +
			"					JOIN 		vu_component_packingalias c ON al.mfgPNID = c.refComponentID  \n" +
			"					WHERE 		l.refSalesOrderDetid = ', pRefSalesOrderDetId ,'  \n" +
			"								AND l.id = a.id AND al.isDeleted = 0  \n" +
			"  	')  INTO result;  \n" +
			"  \n" +
			"	RETURN result;  \n" +
			"    END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP function IF EXISTS `fun_getKitScrapedPin`;  \n" +
			"CREATE FUNCTION `fun_getKitScrapedPin`(  \n" +
			"	pAssyId INT,  \n" +
			"	pRefSalesOrderDetID INT,  \n" +
			"	pRefRfqLineitem INT,  \n" +
			"	pRefRfqLineitemIds VARCHAR(255),  \n" +
			"	pBomPin INT,  \n" +
			"	pConsolidated BOOLEAN  \n" +
			") RETURNS decimal(18,8)  \n" +
			"BEGIN  \n" +
			"	DECLARE v_ScrapedPins DECIMAL(18,6);  \n" +
			"	DECLARE vPartIds VARCHAR(500);  \n" +
			"	DECLARE v_GenericAliasHeaderBreakaway VARCHAR(1000);  \n" +
			"	DECLARE v_CustPNID VARCHAR(1000);  \n" +
			"    Declare v_refRfqLineitem VARCHAR(255);  \n" +
			"	declare v_AssyID int;  \n" +
			"  \n" +
			"    If(pConsolidated = 1) then set v_AssyID = null; else set v_AssyID = pAssyId; end if;  \n" +
			"  \n" +
			"    set v_refRfqLineitem = ifnull(pRefRfqLineitemIds, cast(pRefRfqLineitem as char(255)));  \n" +
			"  \n" +
			"	IF (pBomPin IS NULL OR pBomPin = 0) THEN  \n" +
			"		SET v_ScrapedPins = 0;  \n" +
			"	ELSE  \n" +
			"		SELECT 	GROUP_CONCAT(id) INTO v_GenericAliasHeaderBreakaway  \n" +
			"        FROM 	component_fields_genericalias_mst  \n" +
			"        WHERE 	refTableName = 'rfq_connectertypemst'  \n" +
			"        AND 	refId = -2  \n" +
			"        AND 	isDeleted = 0;  \n" +
			"  \n" +
			"		/* get cutomer part ID from allocation table */  \n" +
			"        SELECT 	GROUP_CONCAT(custPNID)  \n" +
			"        into 	v_CustPNID  \n" +
			"		FROM 	kit_allocation_lineitems  \n" +
			"		WHERE 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"		AND 	FIND_IN_SET(refRfqLineitem, v_refRfqLineitem)  \n" +
			"		AND 	isDeleted = 0;  \n" +
			"  \n" +
			"		/* get alternate and packaging alias part ID from allocation table */  \n" +
			"        SELECT 	GROUP_CONCAT(com.packingAliasParts)  \n" +
			"        into 	vPartIds  \n" +
			"		FROM 	kit_allocation_lineitems_alternatepart kla  \n" +
			"		INNER JOIN vu_component_packingalias com ON kla.mfgPNID = com.refComponentID  \n" +
			"		left outer join component cp on com.packaginggroupID = cp.packaginggroupID  \n" +
			"		WHERE 	kla.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"		AND 	FIND_IN_SET(refRfqLineitem, v_refRfqLineitem)  \n" +
			"		AND 	kla.isDeleted = 0;  \n" +
			"  \n" +
			"        if(v_CustPNID is not null or v_CustPNID != '') then  \n" +
			"			set vPartIds = concat(vPartIds, ',', v_CustPNID);  \n" +
			"		end if;  \n" +
			"  \n" +
			"        if(v_GenericAliasHeaderBreakaway is not null) then  \n" +
			"			set v_GenericAliasHeaderBreakaway = concat('-2,', v_GenericAliasHeaderBreakaway);  \n" +
			"		end if;  \n" +
			"  \n" +
			"		IF (vPartIds IS NULL or vPartIds = '') THEN  \n" +
			"			SET v_ScrapedPins = 0;  \n" +
			"		ELSE  \n" +
			"			SELECT 	SUM(((FLOOR(MOD(partPin, IFNULL(pBomPin, 0))) * IFNULL(allocatedUnit, 0))))  \n" +
			"			INTO 	v_ScrapedPins  \n" +
			"			FROM 	(  \n" +
			"					SELECT 		ka.refUIDId, 	ka.refBOMLineID, 	IFNULL(c.noOfPosition, 0) partPin,  \n" +
			"								SUM(ka.allocatedUnit) AS allocatedUnit  \n" +
			"					FROM 		kit_allocation ka  \n" +
			"					INNER JOIN	component_attributes c ON c.refComponentID = ka.partId  \n" +
			"												and FIND_IN_SET(c.connecterTypeID, v_GenericAliasHeaderBreakaway)  \n" +
			"												AND c.isDeleted = 0  \n" +
			"					WHERE 		ka.`status` = 'A'  \n" +
			"					AND 		ka.assyID = ifnull(v_AssyID, ka.assyID)  \n" +
			"					AND 		ka.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"					AND 		FIND_IN_SET(ka.partId, vPartIds)  \n" +
			"                    AND 		FIND_IN_SET(ka.refBOMLineID, v_refRfqLineitem)  \n" +
			"					GROUP BY 	ka.refUIDId, 	ka.refBOMLineID, 	IFNULL(c.noOfPosition, 0)  \n" +
			"				) a;  \n" +
			"		END IF;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	RETURN IFNULL(CAST(v_ScrapedPins AS DECIMAL(18,8)),0);  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP function IF EXISTS `fun_getBOMLineCleanStatusErrorCategoryWise`;  \n" +
			"CREATE FUNCTION `fun_getBOMLineCleanStatusErrorCategoryWise`(  \n" +
			"	pLineItemAlternatePartId INT,  \n" +
			"	pLineItemId INT,  \n" +
			"	pRefUMID INT,  \n" +
			"	pAssyId INT,  \n" +
			"	pErrorCategoryId INT  \n" +
			") RETURNS tinyint  \n" +
			"BEGIN  \n" +
			"	DECLARE v_LineCleanStatus TINYINT;  \n" +
			"	DECLARE v_CategoryIds VARCHAR(10000);  \n" +
			"	DECLARE v_LineItemAlternatePartId VARCHAR(10000);  \n" +
			"	DECLARE v_CPNLineItemAlternatePartId VARCHAR(10000);  \n" +
			"	DECLARE v_MfrPnId INT;  \n" +
			"	DECLARE v_MfrPkgAliesIds VARCHAR(1000);  \n" +
			"  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS temp_fun_getBOMLineCleanStatusErrorCategoryWise;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS temp_fun_getBOMLineCleanStatusErrorCategoryWise AS  \n" +
			"	SELECT 		err.id, err.logicID, err.errorCode  \n" +
			"	FROM 		rfq_error_code_category_mapping map  \n" +
			"	INNER JOIN 	rfq_lineitems_errorcode err ON err.id = map.errorCodeId AND err.isDeleted = 0  \n" +
			"	WHERE 		map.isDeleted = 0 AND map.categoryID = pErrorCategoryId;  \n" +
			"  \n" +
			"	IF (pErrorCategoryId = 2) THEN  \n" +
			"		IF ((SELECT COUNT(1) FROM temp_fun_getBOMLineCleanStatusErrorCategoryWise WHERE logicID = 12 AND errorCode = 'CA') = 0) THEN  \n" +
			"			INSERT INTO temp_fun_getBOMLineCleanStatusErrorCategoryWise (id, logicID, errorCode)  \n" +
			"			SELECT 		err.id, err.logicID, err.errorCode  \n" +
			"			FROM 		rfq_lineitems_errorcode err  \n" +
			"			WHERE 		err.isDeleted = 0  \n" +
			"						AND err.logicID = 12  \n" +
			"						AND err.errorCode = 'CA';  \n" +
			"		END IF;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	SELECT GROUP_CONCAT(logicID) INTO v_CategoryIds FROM temp_fun_getBOMLineCleanStatusErrorCategoryWise;  \n" +
			"  \n" +
			"	IF (pLineItemAlternatePartId IS NULL AND (pLineItemId IS NOT NULL AND pRefUMID IS NOT NULL AND pAssyId IS NOT NULL)) THEN  \n" +
			"		SELECT 	refcompid INTO v_MfrPnId  \n" +
			"		FROM 	component_sid_stock  \n" +
			"		WHERE 	id = pRefUMID AND isDeleted = 0;  \n" +
			"  \n" +
			"		SELECT 		GROUP_CONCAT(c.packingAliasParts) INTO v_MfrPkgAliesIds  \n" +
			"		FROM 		vu_component_packingalias c  \n" +
			"		WHERE 		c.refComponentID = v_MfrPnId;  \n" +
			"  \n" +
			"		SELECT 	GROUP_CONCAT(id) INTO v_LineItemAlternatePartId  \n" +
			"		FROM 	(  \n" +
			"				SELECT 	id  \n" +
			"				FROM 	rfq_lineitems_alternatepart  \n" +
			"				WHERE 	isDeleted = 0  \n" +
			"						AND rfqLineItemsID = pLineItemId  \n" +
			"						AND partID = pAssyId  \n" +
			"						AND FIND_IN_SET(mfgPNID, IFNULL(v_MfrPkgAliesIds, v_MfrPnId))  \n" +
			"				UNION  \n" +
			"				SELECT 	id  \n" +
			"				FROM  	rfq_lineitems_alternatepart a  \n" +
			"				WHERE 	a.isDeleted = 0  \n" +
			"						AND a.partID = pAssyId  \n" +
			"						AND EXISTS (  \n" +
			"							SELECT 	1  \n" +
			"							FROM 	rfq_lineitems b  \n" +
			"							WHERE 	b.isDeleted = 0  \n" +
			"									AND FIND_IN_SET(custPNID, IFNULL(v_MfrPkgAliesIds, v_MfrPnId))  \n" +
			"									AND b.id = a.rfqLineItemsID  \n" +
			"						)  \n" +
			"		) a;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	SELECT 		MAX(a.ProgressCount) INTO v_LineCleanStatus FROM (  \n" +
			"				SELECT  	l.id AS lineID, p.id,  \n" +
			"						CASE  \n" +
			"							WHEN  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('1', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(l.qpaDesignatorStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('2', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.mfgCodeStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('3', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.mfgVerificationStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('4', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.distVerificationStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('5', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.mfgDistMappingStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								/*CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('6', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.mismatchMountingTypeStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND*/  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('7', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.mfgGoodPartMappingStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('8', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.obsoletePartStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('9', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.mfgPNStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('10', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.distCodeStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('11', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.distPNStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('12', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.customerApproval, 'A') != 'P'  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('13', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.distGoodPartMappingStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								/*CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('14', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.distCodeStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND*/  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('15', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.nonRohsStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('16', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.epoxyStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('17', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(l.qpaDesignatorStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('18', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(l.qpaDesignatorStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('20', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.invalidConnectorTypeStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('21', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.duplicateMPNInSameLineStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('22', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.matingPartRquiredStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('23', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.driverToolsRequiredStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('24', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.pickupPadRequiredStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('25', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.restrictUseWithPermissionStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('26', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.restrictUsePermanentlyStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('27', v_CategoryIds)) > 0  \n" +
			"										THEN  \n" +
			"                                        (case when IFNULL(p.mismatchMountingTypeStep,0) = 0 and ifnull(p.approvedMountingType,0) = 1 then  \n" +
			"                                        1 else IFNULL(p.mismatchMountingTypeStep,0) = 1  end)  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('28', v_CategoryIds)) > 0  \n" +
			"                                    then  \n" +
			"                                     (case when IFNULL(p.mismatchMountingTypeStep,0) = 0 and ifnull(p.approvedMountingType,0) = 1 then  \n" +
			"                                     1 else IFNULL(p.mismatchMountingTypeStep,0) = 1 end)  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								/*CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('32', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.invalidConnectorTypeStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND*/  \n" +
			"								/*CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('33', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.invalidConnectorTypeStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND*/  \n" +
			"								/*CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('34', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(l.duplicateCPNStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND   */  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('35', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.functionalTestingRequiredStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('36', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(l.requireMountingTypeStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('37', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(l.requireMountingTypeStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('39', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.uomMismatchedStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('40', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.programingRequiredStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('50', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.restrictUseInBOMStep, 0) = 0  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('51', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(l.customerApprovalForQPAREFDESStep,1) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('52', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(l.customerApprovalForBuyStep,1) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('53', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(l.customerApprovalForPopulateStep,1) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('54', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.mismatchNumberOfRowsStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('55', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.partPinIsLessthenBOMPinStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('56', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.tbdPartStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('57', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(l.restrictCPNUseWithPermissionStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('58', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(l.restrictCPNUsePermanentlyStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('59', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(l.restrictCPNUseInBOMStep,0) = 0  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('60', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.exportControlledStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('61', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.restrictUseInBOMWithPermissionStep, 0) = 0  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('62', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(p.unknownPartStep,0) = 1  \n" +
			"									ELSE 1  \n" +
			"								END  \n" +
			"								/*AND  \n" +
			"								CASE  \n" +
			"									WHEN (SELECT FIND_IN_SET('63', v_CategoryIds)) > 0  \n" +
			"										THEN IFNULL(l.restrictCPNUseInBOMStep,0) = 0  \n" +
			"									ELSE 1  \n" +
			"								END*/  \n" +
			"							THEN 1  \n" +
			"							ELSE 0  \n" +
			"						END AS ProgressCount  \n" +
			"				FROM 		rfq_lineitems_alternatepart p  \n" +
			"				LEFT OUTER JOIN rfq_lineitems l ON p.rfqLineItemsID = l.id  \n" +
			"				WHERE 		l.isDeleted = 0 AND p.isDeleted = 0  \n" +
			"								AND p.mfgCodeID IS NOT NULL  \n" +
			"								AND p.mfgPNID IS NOT NULL  \n" +
			"								AND l.lineID IS NOT NULL  \n" +
			"								AND FIND_IN_SET(p.id, IFNULL(pLineItemAlternatePartId, v_LineItemAlternatePartId))  \n" +
			"								-- AND p.id = IFNULL(pLineItemAlternatePartId, v_LineItemAlternatePartId)  \n" +
			"			) AS a  \n" +
			"	GROUP BY 	a.lineID;  \n" +
			"  \n" +
			"	RETURN v_LineCleanStatus;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_getDeallocatedUIDList`;  \n" +
			"CREATE PROCEDURE `Sproc_getDeallocatedUIDList`(  \n" +
			"	IN pPageIndex INT,  \n" +
			"	IN pRecordPerPage INT,  \n" +
			"	IN pOrderBy VARCHAR(255),  \n" +
			"	IN pWhereClause VARCHAR(16383),  \n" +
			"	IN pRefSalesOrderID INT,  \n" +
			"	IN pAssyID INT,  \n" +
			"    IN pPartIDs LONGTEXT  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE v_Offset INT;  \n" +
			"	DECLARE v_RowNumWhere VARCHAR(255);  \n" +
			"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
			"	DECLARE v_TimeZone VARCHAR(50);  \n" +
			"    DECLARE v_mfgPnIds LONGTEXT;  \n" +
			"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
			"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
			"  \n" +
			"    DROP TEMPORARY TABLE IF  EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS temp_mainPartAndPackagingAliesPart AS  \n" +
			"	SELECT 		GROUP_CONCAT(c.packingAliasParts) AS mfrPNId  \n" +
			"	FROM 		vu_component_packingalias c  \n" +
			"	WHERE 		FIND_IN_SET(c.refComponentID, pPartIDs)  \n" +
			"	GROUP BY 	mfrPNId;  \n" +
			"  \n" +
			"    IF (pOrderBy IS NOT NULL) THEN  \n" +
			"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
			"	ELSE  \n" +
			"		SET pOrderBy = \"ORDER BY updatedAt DESC\";  \n" +
			"	END IF;  \n" +
			"  \n" +
			"    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
			"		SET pWhereClause = ' 1=1';  \n" +
			"	END IF;  \n" +
			"  \n" +
			"    SET v_mfgPnIds = (SELECT GROUP_CONCAT(m.mfrPNId) FROM temp_mainPartAndPackagingAliesPart m);  \n" +
			"  \n" +
			"    IF(v_mfgPnIds IS NOT NULL) THEN  \n" +
			"		SET pWhereClause = CONCAT(pWhereClause, \" AND partID IN (\" ,v_mfgPnIds , \")\");  \n" +
			"    END IF;  \n" +
			"  \n" +
			"	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
			"		SET v_Offset = (pPageIndex -1) * pRecordPerPage;  \n" +
			"		SET v_RowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , v_Offset) ;  \n" +
			"	ELSE  \n" +
			"		SET v_RowNumWhere = '';  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	SET @temp_Sproc_Deallocated_UMID = CONCAT(\" SELECT  \n" +
			"				cst.id,			cst.uid,				cst.refcompid,		cst.dateCode, 	   kl.lineID,  \n" +
			"				cst.rohsStatusID UMIDRohsStatusID, 		cst.binID,				cst.uom,  \n" +
			"				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,  \n" +
			"				fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus, 		ka.refBOMLineID,  \n" +
			"				c.PIDCode,		c.mfgPN, 		c.RoHSStatusID rohsID, 		ka.refSalesOrderDetID, 		ka.assyID,  \n" +
			"				fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 				c.isCustom,  \n" +
			"                fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
			"                c.restrictUsePermanently,			c.restrictUSEwithpermission,  \n" +
			"                c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
			"                cst.isUMIDRestrict, 	ka.partID,    	c.connecterTypeID,  \n" +
			"                ka.allocatedQty, 		ka.allocatedUnit,  \n" +
			"                (CASE WHEN (c.connecterTypeID = - 2)  \n" +
			"						THEN  (IFNULL(ka.allocatedUnit, 0) * IFNULL(c.noOfPosition, 0))  \n" +
			"				ELSE  NULL  \n" +
			"								END) allocatedPins,  \n" +
			"                cst.pkgUnit,			cst.pkgQty,  \n" +
			"				(CASE WHEN (c.connecterTypeID = - 2)  \n" +
			"						THEN  (IFNULL(cst.pkgUnit, 0) * IFNULL(c.noOfPosition, 0))  \n" +
			"				ELSE NULL  \n" +
			"								END) currentPins,  \n" +
			"				fun_getBinNameByID(cst.binID) binName,  \n" +
			"                c.noOfPosition,  \n" +
			"                ka.remark,  \n" +
			"				fun_getWarehouseNameByBinID(cst.binID) warehouseName,  \n" +
			"				fun_getDepartmentNameByBinID(cst.binID) departmentName,  \n" +
			"				u.unitName unitName,  \n" +
			"                u.measurementTypeID uomClassID,  \n" +
			"                fun_getUserNameByID(ka.updatedBy) updatedBy,  \n" +
			"				fun_ApplyCommonDateTimeFormatByParaValue(ka.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
			"		FROM 		component_sid_stock cst  \n" +
			"		INNER JOIN 	vu_component_mpn c ON c.id = cst.refcompid  \n" +
			"        INNER JOIN uoms u ON u.id = cst.uom AND u.isDeleted = 0  \n" +
			"		INNER JOIN  kit_allocation ka ON cst.id = ka.refUIDId AND ka.status = 'D'  \n" +
			"		INNER JOIN 	kit_allocation_lineitems kl ON kl.refRfqLineitem = ka.refBOMLineID AND kl.refSalesOrderDetID = \", pRefSalesOrderID ,\"  \n" +
			"		WHERE 		ka.refSalesOrderDetID = \", pRefSalesOrderID ,\"  \n" +
			"					AND ka.assyID = IFNULL(\", pAssyID ,\",ka.assyID)  \n" +
			"					AND ka.status = 'D'  \n" +
			"					AND cst.isDeleted = 0  \n" +
			"		GROUP BY ka.id  \n" +
			"			\");  \n" +
			"  \n" +
			"	/* to get total count of rows */  \n" +
			"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @temp_Sproc_Deallocated_UMID, \" ) c where 1=1 and \", pWhereClause);  \n" +
			"	PREPARE query1 FROM @SQLStatement1;  \n" +
			"	EXECUTE query1;  \n" +
			"	DEALLOCATE PREPARE query1;  \n" +
			"  \n" +
			"	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_Deallocated_UMID,\" ) c WHERE \", pWhereClause , \" \" , pOrderBy , v_RowNumWhere);  \n" +
			"	PREPARE query1 FROM @SQLStatement2;  \n" +
			"	EXECUTE query1;  \n" +
			"	DEALLOCATE PREPARE query1;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (6069,'2.00','V1',' User Story 42365: Apply Part Master Normalization effect in Kit UMID and Bulk Transfer flow - Packaging Alias Changes Only for ID - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
            case 6069:
            allDbChangesArray.push(
            /* **************************** New Script -> 28-03-2022 *********************************** */
            "ALTER TABLE `kit_allocation_assy_detail` DROP INDEX `FK_kit_allocation_assy_detail_refkitmstID_idx` ;  \n" +
            "ALTER TABLE `kit_allocation_lineitems` DROP INDEX `FK_kit_allocation_lineitems_refkitmstID_idx` ;  \n" +
            "ALTER TABLE `kit_allocation_lineitems_alternatepart` DROP INDEX `FK_kit_allocation_lineitems_alternatepart_refkitmstID_idx` ;  \n" +
            "ALTER TABLE `kit_allocation` DROP INDEX `FK_kit_allocation_refkitmstID_idx` ;  \n" +
            "ALTER TABLE `kit_allocation_consolidate_line_detail` DROP INDEX `FK_kit_allocation_consolidate_line_detail_refkitmstID_idx` ;  \n" +
            "ALTER TABLE `kit_allocation_consolidate_line_alternatepart` drop INDEX `FK_kit_allocation_consolidate_line_alternatepart_refkitmstID_idx`;  \n" +
            "ALTER TABLE `component_sid_stock_history` drop INDEX `FK_component_sid_stock_history_refkitmstID_idx`;  \n" +
            "ALTER TABLE `kit_allocation_assy_detail`  ADD CONSTRAINT `FK_kit_allocation_assy_detail_refkitmstID` FOREIGN KEY (`refkitmstID`) REFERENCES `kitmst` (`id`) ON DELETE NO ACTION  ON UPDATE NO ACTION;  \n" +
            "ALTER TABLE `kit_allocation_lineitems`   ADD CONSTRAINT `FK_kit_allocation_lineitems_refkitmstID`    FOREIGN KEY (`refkitmstID`)  REFERENCES `kitmst` (`id`) ON DELETE NO ACTION  ON UPDATE NO ACTION;  \n" +
            "ALTER TABLE `kit_allocation_lineitems_alternatepart` ADD CONSTRAINT `FK_kit_allocation_lineitems_alternatepart_refkitmstID`  FOREIGN KEY (`refkitmstID`)  REFERENCES `kitmst` (`id`) ON DELETE NO ACTION  ON UPDATE NO ACTION;  \n" +
            "ALTER TABLE `kit_allocation` ADD CONSTRAINT `FK_kit_allocation_refkitmstID`  FOREIGN KEY (`refkitmstID`)  REFERENCES `kitmst` (`id`) ON DELETE NO ACTION  ON UPDATE NO ACTION;  \n" +
            "ALTER TABLE `kit_allocation_consolidate_line_detail` ADD CONSTRAINT `FK_kit_allocation_consolidate_line_detail_refkitmstID`  FOREIGN KEY (`refkitmstID`)  REFERENCES `kitmst` (`id`) ON DELETE NO ACTION  ON UPDATE NO ACTION;  \n" +
            "ALTER TABLE `kit_allocation_consolidate_line_alternatepart` ADD CONSTRAINT `FK_kit_allocation_consolidate_line_alternatepart_refkitmstID`  FOREIGN KEY (`refkitmstID`)  REFERENCES `kitmst` (`id`) ON DELETE NO ACTION  ON UPDATE NO ACTION;  \n" +
            "ALTER TABLE `component_sid_stock_history` ADD CONSTRAINT `FK_component_sid_stock_history_refkitmstID`  FOREIGN KEY (`refkitmstID`)  REFERENCES `kitmst` (`id`) ON DELETE NO ACTION  ON UPDATE NO ACTION;  \n" +
            /* **************************** Add Script Version -> 28-03-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (6070,'2.00','V1',' ADD FK in all table where we inserted kitmstid - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
case 6070:
			  allDbChangesArray.push(
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP VIEW IF EXISTS `vu_component_packingalias` ;  \n" +
			"CREATE VIEW `vu_component_packingalias` AS  \n" +
			"    SELECT  \n" +
			"        `cp`.`id` AS `id`,  \n" +
			"        `ca`.`id` AS `refComponentID`,  \n" +
			"        `d`.`functionalCategoryID` AS `refFunctionalCategoryID`,  \n" +
			"        `c`.`functionalCategoryID` AS `functionalCategoryID`,  \n" +
			"        `c`.`mountingTypeID` AS `mountingTypeID`,  \n" +
			"        `c`.`connecterTypeID` AS `connecterTypeID`,  \n" +
			"        IFNULL(`cp`.`mfgcodeID`, `ca`.`mfgcodeID`) AS `mfgCodeID`,  \n" +
			"        IFNULL(`cp`.`mfgPN`, `ca`.`mfgPN`) AS `mfgPN`,  \n" +
			"        IFNULL(`cp`.`mfgPNDescription`,  \n" +
			"                `ca`.`mfgPNDescription`) AS `mfgPNDescription`,  \n" +
			"        IFNULL(`cp`.`PIDCode`, `ca`.`PIDCode`) AS `PIDCode`,  \n" +
			"        IFNULL(`cp`.`RoHSStatusID`, `ca`.`RoHSStatusID`) AS `RoHSStatusID`,  \n" +
			"        IFNULL(`c`.`feature`, `c`.`feature`) AS `feature`,  \n" +
			"        IFNULL(`cp`.`isCustom`, `ca`.`isCustom`) AS `isCustom`,  \n" +
			"        IFNULL(`cp`.`custAssyPN`, `ca`.`custAssyPN`) AS `custAssyPN`,  \n" +
			"        IFNULL(`cp`.`partStatus`, `ca`.`partStatus`) AS `partStatus`,  \n" +
			"        IFNULL(`cp`.`leadTime`, `ca`.`leadTime`) AS `leadTime`,  \n" +
			"        `ca`.`refSupplierMfgpnComponentID` AS `refSupplierMfgpnComponentID`,  \n" +
			"        `cs`.`restrictUSEwithpermission` AS `restrictUSEwithpermission`,  \n" +
			"        `cs`.`restrictPackagingUseWithpermission` AS `restrictPackagingUseWithpermission`,  \n" +
			"        `cs`.`restrictUsePermanently` AS `restrictUsePermanently`,  \n" +
			"        `cs`.`restrictPackagingUsePermanently` AS `restrictPackagingUsePermanently`,  \n" +
			"        IFNULL(GROUP_CONCAT(DISTINCT `d`.`refComponentID`  \n" +
			"                    SEPARATOR ','),  \n" +
			"                `c`.`refComponentID`) AS `packingAliasParts`  \n" +
			"    FROM  \n" +
			"        ((((`component` `ca`  \n" +
			"        LEFT JOIN `component_attributes` `c` ON (((`c`.`refComponentID` = `ca`.`id`)  \n" +
			"            AND (`c`.`isDeleted` = 0))))  \n" +
			"        LEFT JOIN `component_attributes` `d` ON (((`c`.`packaginggroupID` = `d`.`packaginggroupID`)  \n" +
			"            AND (`d`.`isDeleted` = 0))))  \n" +
			"        LEFT JOIN `component_settings` `cs` ON (((`d`.`refComponentID` = `cs`.`refComponentID`)  \n" +
			"            AND (`cs`.`isDeleted` = 0))))  \n" +
			"        LEFT JOIN `component` `cp` ON (((`d`.`refComponentID` = `cp`.`id`)  \n" +
			"            AND (`cp`.`mfgType` = 'MFG')  \n" +
			"            AND (`cp`.`isDeleted` = 0))))  \n" +
			"    WHERE  \n" +
			"        ((`ca`.`isDeleted` = 0)  \n" +
			"            AND (`ca`.`mfgType` = 'MFG'))  \n" +
			"    GROUP BY `cp`.`id` , `ca`.`id` , `refFunctionalCategoryID` , `c`.`functionalCategoryID` , `c`.`mountingTypeID` , `c`.`connecterTypeID` , `mfgCodeID` , `mfgPN` , `mfgPNDescription` , `PIDCode` , `RoHSStatusID` , `feature` , `isCustom` , `custAssyPN` , `partStatus` , `leadTime` , `ca`.`refSupplierMfgpnComponentID` , `cs`.`restrictUSEwithpermission` , `cs`.`restrictPackagingUseWithpermission` , `cs`.`restrictUsePermanently` , `cs`.`restrictPackagingUsePermanently`;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_getBOMDataForSearchMaterial`;  \n" +
			"CREATE PROCEDURE `Sproc_getBOMDataForSearchMaterial`(  \n" +
			"	IN pAssyId INT,  \n" +
			"	IN pSearchString VARCHAR(100),  \n" +
			"	IN pSearchType VARCHAR(10),  \n" +
			"    IN pNickName VARCHAR(255)  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE v_WhereClauseUMIDSearch VARCHAR(1000);  \n" +
			"	DECLARE v_WhereClausePIDSearch VARCHAR(1000);  \n" +
			"	DECLARE v_SearchBOMLineIds VARCHAR(10000);  \n" +
			"	DECLARE v_MFRPnIds LONGTEXT;  \n" +
			"	DECLARE v_AssyIds LONGTEXT;  \n" +
			"  \n" +
		    "	SET pSearchString = REPLACE(REPLACE(REPLACE(REPLACE(pSearchString,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");     \n" +
			"  \n" +
			"	IF(pNickName IS NOT NULL) THEN  \n" +
			"		SELECT GROUP_CONCAT(id) INTO v_AssyIds FROM component WHERE nickname = pNickName;  \n" +
			"    END IF;  \n" +
			"  \n" +
			"    IF (pSearchType = 'contains') THEN  \n" +
			"		SET v_WhereClauseUMIDSearch = CONCAT(' uid LIKE \"%', pSearchString ,'%\" ');  \n" +
			"		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN LIKE \"%', pSearchString ,'%\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR cs.mfgPN LIKE \"%', pSearchString ,'%\" OR co.name LIKE \"%', pSearchString ,'%\" ');  \n" +
			"	ELSEIF (pSearchType = 'exact') THEN  \n" +
			"		SET v_WhereClauseUMIDSearch = CONCAT(' uid = \"', pSearchString , '\" ');  \n" +
			"		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN = \"', pSearchString ,'\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR cs.mfgPN = \"', pSearchString ,'\" OR co.name = \"', pSearchString ,'\" ');  \n" +
			"	ELSE  \n" +
			"		SET v_WhereClauseUMIDSearch = ' 1 = 1 ';  \n" +
			"		SET v_WhereClausePIDSearch = ' 1 = 1';  \n" +
			"	END IF;  \n" +
			"  \n" +
			"    SET @vFromSQLQuery = CONCAT('  \n" +
			"		SELECT 	refcompid AS mfrPNId , NULL AS  distPNId  \n" +
			"		FROM 	component_sid_stock  \n" +
			"		WHERE   ', v_WhereClauseUMIDSearch ,'  \n" +
			"				AND isDeleted = 0  \n" +
			"		UNION  \n" +
			"		SELECT 	c.packingAliasParts  AS mfrPNId, IFNULL(cs.id, c.refComponentID) AS distPNId  \n" +
			"		FROM 		vu_component_packingalias c  \n" +
			"		LEFT JOIN   component_otherpn co ON co.refComponentID = c.refComponentID AND co.isDeleted = 0  \n" +
			"		LEFT JOIN 	component cs ON c.refSupplierMfgpnComponentID = cs.id  \n" +
			"		WHERE 		(', v_WhereClausePIDSearch ,')  \n" +
			"	');  \n" +
			"  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;  \n" +
			"	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempGetMFRPNIdBySearchString AS \", @vFromSQLQuery);  \n" +
			"	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
			"	EXECUTE mainQuery;  \n" +
			"	DEALLOCATE PREPARE mainQuery;  \n" +
			"  \n" +
			"	SELECT CONCAT(GROUP_CONCAT(mfrPNId), ',',GROUP_CONCAT(distPNId)) INTO v_MFRPnIds FROM tempGetMFRPNIdBySearchString;  \n" +
			"  \n" +
			"	SELECT 	GROUP_CONCAT(rfqLineItemsID) INTO v_SearchBOMLineIds  \n" +
			"	FROM 	(  \n" +
			"			SELECT 		a.rfqLineItemsID  \n" +
			"			FROM 		rfq_lineitems_alternatepart a  \n" +
			"			LEFT JOIN	rfq_lineitems b ON b.id = a.rfqLineItemsID  \n" +
			"			LEFT JOIN  vu_component_packingalias c ON c.refComponentID = a.mfgPNID  \n" +
			"			WHERE 		a.partID IN (IFNULL(IFNULL(pAssyId, v_AssyIds), a.partID))  \n" +
			"						AND FIND_IN_SET(c.packingAliasParts, v_MFRPnIds)  \n" +
			"						AND a.isDeleted = 0  \n" +
			"		) AS a;  \n" +
			"  \n" +
			"   SELECT 		rl.id,  \n" +
			"				fun_getAssyPIDCodeByID(rl.partId) assyPIDCode,  \n" +
			"				rl.partId assyId,  \n" +
			"				rl.lineID,  \n" +
			"				rl.cust_lineID,  \n" +
			"				rl.qpa,  \n" +
			"				rl.refDesig,  \n" +
			"				(CASE WHEN rla.mfgCodeID IS NOT NULL AND IFNULL(rla.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE rla.mfgCode END) AS mfgCode,  \n" +
			"				IFNULL(d.mfgCodeID, c.mfgCodeID) mfgCodeID,  \n" +
			"				mcm.acquisitionDetail,  \n" +
			"				IFNULL(d.mfgPN, c.mfgPN) mfgPN,  \n" +
			"				IFNULL(d.id, c.id) AS mfgPNID,  \n" +
			"				(CASE WHEN rla.distMfgCodeID IS NOT NULL AND IFNULL(rla.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE rla.distributor END) AS distributor,  \n" +
			"				mcmDist.acquisitionDetail AS distAcquisitionDetail,  \n" +
			"				rla.distMfgCodeID,  \n" +
			"				rla.distPN,  \n" +
			"				rla.distMfgPNID,  \n" +
			"				rl.custPN,  \n" +
			"				rl.custPNID,  \n" +
			"				(CASE WHEN rl.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = rl.custPNID) ELSE 0 END) AS isCustPN,  \n" +
			"				(CASE WHEN rl.uomID IS NULL THEN rl.org_uomName ELSE fun_getUnitNameByID(rl.uomID) END) AS uomID,  \n" +
			"				(CASE WHEN rl.programingStatus = 1 THEN 'Pre' WHEN rl.programingStatus = 2 THEN 'Post' ELSE 'N/A' END) AS programingStatus,  \n" +
			"				(CASE WHEN rl.substitutesAllow IS NULL THEN rl.org_substitutesAllow ELSE CASE WHEN rl.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN rl.substitutesAllow = 2 THEN 'No' ELSE '' END END) AS substitutesAllow,  \n" +
			"				(CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = rl.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END) AS allocatedInKit,  \n" +
			"				rla.description descriptionAlternate,  \n" +
			"				rl.description,  \n" +
			"				rl.numOfPosition,  \n" +
			"				rl.numOfRows,  \n" +
			"				rl.customerRev,  \n" +
			"				rl.customerDescription,  \n" +
			"				rl.customerPartDesc,  \n" +
			"				CONCAT(part.partTypeName) partclassID,  \n" +
			"				rl.isInstall,  \n" +
			"				rl.isPurchase,  \n" +
			"				rl.dnpQty,  \n" +
			"				rl.dnpDesig,  \n" +
			"				rla.id AS rfqAlternatePartID,  \n" +
			"				rl.qpaDesignatorStep,  \n" +
			"				rl.duplicateCPNStep,  \n" +
			"				rl.restrictCPNUseWithPermissionStep,  \n" +
			"				rl.restrictCPNUsePermanentlyStep,  \n" +
			"				rl.restrictCPNUseInBOMStep,  \n" +
			"				rl.requireMountingTypeStep,  \n" +
			"				rl.requireFunctionalTypeStep,  \n" +
			"				rl.requireMountingTypeError,  \n" +
			"				rl.requireFunctionalTypeError,  \n" +
			"				(CASE WHEN rl.isBuyDNPQty = 'Y' THEN 'YES' WHEN rl.isBuyDNPQty = 'C' THEN 'Customer Consigned' ELSE 'NO' END) AS isBuyDNPQty,  \n" +
			"				rl.isObsoleteLine,  \n" +
			"				rl.customerApprovalForQPAREFDESStep,  \n" +
			"				rl.customerApprovalForBuyStep,  \n" +
			"				rl.customerApprovalForPopulateStep,  \n" +
			"				rl.dnpQPARefDesStep,  \n" +
			"				rl.customerApprovalForDNPQPAREFDESStep,  \n" +
			"				rl.customerApprovalForDNPBuyStep,  \n" +
			"				rl.customerApprovalCPN,  \n" +
			"				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) qpaCustomerApprovalComment,  \n" +
			"				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) dnpqpaCustomerApprovalComment,  \n" +
			"				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) buyCustomerApprovalComment,  \n" +
			"				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) buyDNPCustomerApprovalComment,  \n" +
			"				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) populateCustomerApprovalComment,  \n" +
			"				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) cpnCustomerApprovalComment,  \n" +
			"				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedQPA,  \n" +
			"				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,  \n" +
			"				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedDNPQPA,  \n" +
			"				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,  \n" +
			"				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,  \n" +
			"				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,  \n" +
			"				rla.mfgVerificationStep,  \n" +
			"				rla.mfgDistMappingStep,  \n" +
			"				rla.mfgCodeStep,  \n" +
			"				rla.customerApproval,  \n" +
			"				rla.isCustomerUnAppoval,  \n" +
			"				rla.org_mfgCode,  \n" +
			"				rla.org_mfgPN,  \n" +
			"				rla.org_distributor,  \n" +
			"				rla.org_distPN,  \n" +
			"				rla.distVerificationStep,  \n" +
			"				rla.distCodeStep,  \n" +
			"				rla.getMFGPNStep,  \n" +
			"				rla.obsoletePartStep,  \n" +
			"				rla.mfgGoodPartMappingStep,  \n" +
			"				rla.mfgPNStep,  \n" +
			"				rla.distPNStep,  \n" +
			"				rla.badMfgPN,  \n" +
			"				rla.distGoodPartMappingStep,  \n" +
			"				rla.nonRohsStep,  \n" +
			"				rla.epoxyStep,  \n" +
			"				rla.invalidConnectorTypeStep,  \n" +
			"				rla.duplicateMPNInSameLineStep,  \n" +
			"				rla.mismatchMountingTypeStep,  \n" +
			"				rla.mismatchFunctionalCategoryStep,  \n" +
			"				rla.restrictUseWithPermissionStep,  \n" +
			"				rla.restrictUsePermanentlyStep,  \n" +
			"				rla.partPinIsLessthenBOMPinStep,  \n" +
			"				rla.exportControlledStep,  \n" +
			"				rla.tbdPartStep,  \n" +
			"				rla.userData1,  \n" +
			"				rla.userData2,  \n" +
			"				rla.userData3,  \n" +
			"				rla.userData4,  \n" +
			"				rla.userData5,  \n" +
			"				rla.userData6,  \n" +
			"				rla.userData7,  \n" +
			"				rla.userData8,  \n" +
			"				rla.userData9,  \n" +
			"				rla.userData10,  \n" +
			"				rla.pickupPadRequiredStep,  \n" +
			"				rla.matingPartRquiredStep,  \n" +
			"				rla.suggestedGoodPartStep,  \n" +
			"				rla.suggestedGoodDistPartStep,  \n" +
			"				rla.driverToolsRequiredStep,  \n" +
			"				rla.functionalTestingRequiredStep,  \n" +
			"				rla.mismatchValueStep,  \n" +
			"				rla.approvedMountingType,  \n" +
			"				rla.mismatchPackageStep,  \n" +
			"				rla.mismatchPowerStep,  \n" +
			"				rla.mismatchToleranceStep,  \n" +
			"				rla.mismatchTempratureStep,  \n" +
			"				rla.mismatchNumberOfRowsStep,  \n" +
			"				rla.uomMismatchedStep,  \n" +
			"				rla.programingRequiredStep,  \n" +
			"				rla.mismatchColorStep,  \n" +
			"				rla.restrictUseInBOMStep,  \n" +
			"				rla.restrictUseInBOMWithPermissionStep,  \n" +
			"				rla.restrictUseInBOMExcludingAliasStep,  \n" +
			"				rla.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
			"				rla.restrictUseExcludingAliasStep,  \n" +
			"				rla.restrictUseExcludingAliasWithPermissionStep,  \n" +
			"				rla.unknownPartStep,  \n" +
			"				rla.defaultInvalidMFRStep,  \n" +
			"				rla.isUnlockApprovedPart,  \n" +
			"				(  \n" +
			"					CASE  \n" +
			"						WHEN c.id = -3 AND rl.custPnID IS NOT NULL THEN  \n" +
			"							CONCAT(cpnPart.partTypeName)  \n" +
			"						ELSE  \n" +
			"							CONCAT(part.partTypeName)  \n" +
			"					END  \n" +
			"				)  \n" +
			"				AS parttypeID,  \n" +
			"				part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,  \n" +
			"				(  \n" +
			"					CASE  \n" +
			"						WHEN c.id = -3 AND rl.custPnID IS NOT NULL THEN  \n" +
			"							CONCAT(cpnMount.name)  \n" +
			"						ELSE  \n" +
			"							CONCAT(mount.name)  \n" +
			"					END  \n" +
			"				) AS mountingtypeID,  \n" +
			"				CONCAT(cat.categoryname) partcategoryID,  \n" +
			"				c.isGoodPart isMFGGoodPart,  \n" +
			"				(SELECT co.isGoodPart FROM component co WHERE co.id = rla.distMfgPNID) isDistGoodPart,  \n" +
			"				c.RoHSStatusID RoHSStatusID,  \n" +
			"				fun_getRoHSCategoryByID(c.RoHSStatusID) refMainCategoryID,  \n" +
			"				(  \n" +
			"					CASE  \n" +
			"						WHEN (c.eolDate IS NOT NULL AND c.eolDate < fun_DatetimetoUTCDateTime()) OR EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE c.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0) THEN  \n" +
			"							1  \n" +
			"						ELSE  \n" +
			"							0  \n" +
			"					END  \n" +
			"				) isObsolete,  \n" +
			"				c.PIDCode,  \n" +
			"				c.mfgPNDescription,  \n" +
			"				ca.pitch,  \n" +
			"				ca.noOfRows,  \n" +
			"				ca.partPackage,  \n" +
			"				ca.value,  \n" +
			"				ca.tolerance,  \n" +
			"				ca.voltage,  \n" +
			"				c.isCustom,  \n" +
			"				c.packaging,  \n" +
			"				c.deviceMarking,  \n" +
			"				ca.powerRating,  \n" +
			"				ca.minOperatingTemp,  \n" +
			"				ca.maxOperatingTemp,  \n" +
			"				ca.connecterTypeID,  \n" +
			"				cs.driverToolRequired,  \n" +
			"				cs.matingPartRquired,  \n" +
			"				cs.pickupPadRequired,  \n" +
			"				cs.programingRequired,  \n" +
			"				c.dataSheetLink,  \n" +
			"				c.isCPN,  \n" +
			"				(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = c.id AND isDeleted = 0) AS driveToolIDs,  \n" +
			"				(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = c.id AND isDeleted = 0 AND `type` = 3) AS programingRequiredIDs,  \n" +
			"				(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = c.id AND isDeleted = 0) AS operationalAttributeIDs,  \n" +
			"				(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = c.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,  \n" +
			"				(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = c.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,  \n" +
			"				ca.isTemperatureSensitive,  \n" +
			"				ca.noOfPosition AS componentLead,  \n" +
			"				fun_getPartStatusNameByID(c.partStatus) AS partStatus,  \n" +
			"				fun_getPartStatusColorCodeByID(c.partStatus) AS partStatuscolorCode,  \n" +
			"				c.createdBy,  \n" +
			"				(SELECT u.unitName FROM UOMs u WHERE u.id = c.uom ) AS uom,  \n" +
			"				ca.color,  \n" +
			"				c.uom AS partUOMID,  \n" +
			"				(  \n" +
			"					CASE  \n" +
			"						WHEN (  \n" +
			"							SELECT 		COUNT(cs.isExportControlled) AS isExportControlled  \n" +
			"							FROM 		component co  \n" +
			"							LEFT JOIN 	component_standard_details csd ON csd.componentID = co.id AND IFNULL(csd.isDeleted,0) = 0  \n" +
			"							LEFT JOIN 	certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1  \n" +
			"							WHERE 		c.id = co.id  \n" +
			"						) > 0 THEN  \n" +
			"							1  \n" +
			"						ELSE  \n" +
			"							0  \n" +
			"					END  \n" +
			"				) isExportControlled,  \n" +
			"				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = rla.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,  \n" +
			"				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = rla.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,  \n" +
			"				ac.description AS additionalComment,  \n" +
			"				ac.id AS additionalCommentId  \n" +
			"		FROM 		rfq_lineitems_alternatepart rla  \n" +
			"		INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
			"        JOIN vu_component_mpn c ON rla.mfgPNID = c.id AND c.isDeleted = 0  \n" +
			"		LEFT JOIN component_attributes ca ON c.id = ca.refComponentID AND ca.isDeleted = 0  \n" +
			"		LEFT JOIN component_attributes da ON ca.packaginggroupID = da.packaginggroupID AND da.isDeleted = 0  \n" +
			"		LEFT JOIN vu_component_mpn d ON da.refComponentID = d.id AND d.isDeleted = 0  \n" +
			"		LEFT JOIN component_settings cs ON c.id = cs.refComponentID AND cs.isDeleted = 0  \n" +
			"		LEFT JOIN 	mfgcodemst mcm ON rla.mfgCodeID = mcm.id AND mcm.isDeleted = 0  \n" +
			"		LEFT JOIN 	mfgcodemst mcmDist ON rla.mfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0  \n" +
			"		LEFT JOIN 	rfq_parttypemst part ON ca.functionalCategoryID = part.id AND part.isDeleted = 0  \n" +
			"		LEFT JOIN 	component_attributes cpn ON rl.custPNID = cpn.refComponentID AND cpn.isDeleted = 0  \n" +
			"		LEFT JOIN 	rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id AND cpnPart.isDeleted = 0  \n" +
			"		LEFT JOIN 	rfq_mountingtypemst mount ON ca.mountingtypeID = mount.id AND mount.isDeleted = 0  \n" +
			"		LEFT JOIN 	rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id AND cpnMount.isDeleted = 0  \n" +
			"		LEFT JOIN 	rfq_partcategory cat ON c.category = cat.id AND cat.isDeleted = 0  \n" +
			"		LEFT JOIN 	rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = rl.id AND ac.isDeleted = 0  \n" +
			"		WHERE 	 	FIND_IN_SET(rl.id, v_SearchBOMLineIds)  \n" +
			"					AND rla.partID = IFNULL(pAssyId, rla.partID)  \n" +
			"					AND rla.isDeleted = 0  \n" +
			"		ORDER BY 	rl.lineID;  \n" +
			"  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP procedure IF EXISTS `Sproc_getUMIDDataForSearchMaterial`;  \n" +
			"CREATE PROCEDURE `Sproc_getUMIDDataForSearchMaterial`(  \n" +
			"	IN pPageIndex INT,  \n" +
			"	IN pRecordPerPage INT,  \n" +
			"	IN pOrderBy VARCHAR(255),  \n" +
			"	IN pWhereClause VARCHAR(16383),  \n" +
			"	IN pAssyId INT,  \n" +
			"    IN pNickName VARCHAR(255),  \n" +
			"	IN pSearchString VARCHAR(100),  \n" +
			"	IN pSearchType VARCHAR(10)  \n" +
			")  \n" +
			"BEGIN  \n" +
			"	DECLARE pOffset INT;  \n" +
			"	DECLARE rowNumWhere VARCHAR(255);  \n" +
			"	DECLARE v_WhereClauseUMIDSearch VARCHAR(1000);  \n" +
			"	DECLARE v_WhereClausePIDSearch VARCHAR(1000);  \n" +
			"	DECLARE v_WhereClauseExtra VARCHAR(1000);  \n" +
			"    DECLARE v_WhereClauseNickName VARCHAR(1000);  \n" +
			"	DECLARE v_UMIDSearchQuery LONGTEXT;  \n" +
			"	DECLARE v_MFRSearchQuery LONGTEXT;  \n" +
			"	DECLARE v_MFRPackagingSearchQuery LONGTEXT;  \n" +
			"	DECLARE v_FromFinalSQLQuery LONGTEXT;  \n" +
			"	SET v_WhereClauseExtra = ' AND 1 = 1 ';  \n" +
			"  \n" +
			"	SET pSearchString = REPLACE(REPLACE(REPLACE(REPLACE(pSearchString,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");     \n" +
			"  \n" +
			"	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
			"		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
			"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
			"	ELSE  \n" +
			"		SET rowNumWhere = '';  \n" +
			"	END IF;  \n" +
			"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
			"		SET pOrderBy = CONCAT(\"ORDER BY \" , \" id DESC\") ;  \n" +
			"	ELSE  \n" +
			"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
			"	END IF;  \n" +
			"	IF (pSearchType = 'contains') THEN  \n" +
			"		SET v_WhereClauseUMIDSearch = CONCAT(' uid LIKE \"%', pSearchString ,'%\" ');  \n" +
			"		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN LIKE \"%', pSearchString ,'%\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR c.mfgPN LIKE \"%', pSearchString ,'%\" OR co.name LIKE \"%', pSearchString ,'%\" ');  \n" +
			"	ELSEIF (pSearchType = 'exact') THEN  \n" +
			"		SET v_WhereClauseUMIDSearch = CONCAT(' uid = \"', pSearchString , '\" ');  \n" +
			"		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN = \"', pSearchString ,'\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR cs.mfgPN = \"', pSearchString ,'\" OR co.name = \"', pSearchString ,'\" ');  \n" +
			"	ELSE  \n" +
			"		SET v_WhereClauseUMIDSearch = ' 1 = 1 ';  \n" +
			"		SET v_WhereClausePIDSearch = ' 1 = 1';  \n" +
			"	END IF;  \n" +
			"  \n" +
			"    SET v_WhereClauseNickName = '1 = 1';  \n" +
			"  \n" +
			"	IF (pAssyId IS NOT NULL) THEN  \n" +
			"		SET v_WhereClauseExtra = CONCAT(v_WhereClauseExtra, ' AND assyID = ', pAssyId);  \n" +
			"	ELSEIF (pNickName IS NOT NULL) THEN  \n" +
			"		SET v_WhereClauseNickName = CONCAT(v_WhereClauseNickName, ' AND a.assyNickName = \"', pNickName,'\"');  \n" +
			"    END IF;  \n" +
			"  \n" +
			"	IF(pWhereClause IS NOT NULL AND pWhereClause != '') THEN  \n" +
			"		SET v_WhereClauseExtra = CONCAT(v_WhereClauseExtra, ' AND ', pWhereClause);  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	SET v_UMIDSearchQuery = CONCAT('  \n" +
			"		SELECT 	id  \n" +
			"		FROM	component_sid_stock  \n" +
			"		WHERE	(', v_WhereClauseUMIDSearch ,')  \n" +
			"				AND isDeleted = 0  \n" +
			"	');  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempGetUMIDBySearchString;  \n" +
			"	SET @vSQLMainQuery1 =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempGetUMIDBySearchString AS \", v_UMIDSearchQuery);  \n" +
			"	PREPARE mainQuery1 FROM @vSQLMainQuery1;  \n" +
			"	EXECUTE mainQuery1;  \n" +
			"	DEALLOCATE PREPARE mainQuery1;  \n" +
			"  \n" +
			"	SET v_MFRSearchQuery = CONCAT('  \n" +
			"			SELECT 	c.packingAliasParts  AS mfrPNId, IFNULL(cs.id, c.refComponentID) AS distPNId  \n" +
			"			FROM 		vu_component_packingalias c  \n" +
			"			LEFT JOIN   component_otherpn co ON co.refComponentID = c.refComponentID  AND co.isDeleted = 0  \n" +
			"			LEFT JOIN 	component cs ON c.refSupplierMfgpnComponentID = cs.id  \n" +
			"			WHERE 		(', v_WhereClausePIDSearch ,')  \n" +
			"	');  \n" +
			"  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;  \n" +
			"	SET @vSQLMainQuery2 =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempGetMFRPNIdBySearchString AS \", v_MFRSearchQuery);  \n" +
			"	PREPARE mainQuery2 FROM @vSQLMainQuery2;  \n" +
			"	EXECUTE mainQuery2;  \n" +
			"	DEALLOCATE PREPARE mainQuery2;  \n" +
			"  \n" +
			"	SET v_FromFinalSQLQuery = CONCAT('  \n" +
			"				SELECT 		css.id,  \n" +
			"						css.uid,  \n" +
			"						css.receiveMaterialType,  \n" +
			"						css.refcompid,  \n" +
			"						fun_getMfgCodeAndNameByID(c.mfgCodeId) fullMfrName,  \n" +
			"						c.mfgPN mfrPN,  \n" +
			"						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
			"						fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
			"						c.isCustom,  \n" +
			"						c.restrictUsePermanently,  \n" +
			"						c.restrictUSEwithpermission,  \n" +
			"						c.restrictPackagingUsePermanently,  \n" +
			"						c.restrictPackagingUseWithpermission,  \n" +
			"						fun_getBinNameByID(css.binID) currentBinName,  \n" +
			"						fun_getWarehouseNameByBinID(css.binID) currentWarehouseName,  \n" +
			"						fun_getDepartmentNameByBinID(css.binID) currentParentWarehouseName,  \n" +
			"						css.pkgQty currentCount,  \n" +
			"						css.pkgUnit currentUnit,  \n" +
			"						css.uom currentUOM,  \n" +
			"                        u.unitName currentUOMName,  \n" +
			"                        u.measurementTypeID currentUOMClassID,  \n" +
			"						css.packaging,  \n" +
			"						fun_getPackagingNameByID(css.packaging) packagingName,  \n" +
			"						ka.status,  \n" +
			"						ka.assyID,  \n" +
			"						ka.partId,  \n" +
			"						fun_getAllocatedKitsNameByID(css.id, \"A\") allocatedToKit,  \n" +
			"						(CASE WHEN ka.assyID IS NULL THEN NULL ELSE fun_getAssyNickNameByID(ka.assyID) END) assyNickName,  \n" +
			"						rl.lineID bomLineNo  \n" +
			"				FROM 		component_sid_stock css  \n" +
			"                INNER JOIN 	uoms u ON u.id = css.uom AND u.isDeleted = 0  \n" +
			"				LEFT JOIN 	kit_allocation ka ON css.id = ka.refUIDId AND ka.status = \"A\"  \n" +
			"				LEFT JOIN 	rfq_lineitems rl ON rl.id = ka.refBOMLineID AND rl.partID = ka.assyID AND rl.isDeleted = 0  \n" +
			"				INNER JOIN	vu_component_mpn c ON c.id = css.refcompid  \n" +
			"				WHERE 		css.isDeleted = 0  \n" +
			"							AND (  \n" +
			"								EXISTS (  \n" +
			"									SELECT 	1  \n" +
			"									FROM 	tempGetUMIDBySearchString t  \n" +
			"									WHERE 	t.id = css.id  \n" +
			"								)  \n" +
			"								OR  \n" +
			"								EXISTS (  \n" +
			"									SELECT 	1  \n" +
			"									FROM 	tempGetMFRPNIdBySearchString t  \n" +
			"									WHERE 	t.mfrPNId = css.refcompid   OR t.distPNId = css.refcompid  \n" +
			"								)  \n" +
			"						) '  , pOrderBy , ' ' , rowNumWhere, '  \n" +
			"			');  \n" +
			"	SET @finalMainQuery = CONCAT(\"SELECT a.* FROM ( \", v_FromFinalSQLQuery,\" ) a WHERE \", v_WhereClauseNickName, v_WhereClauseExtra );  \n" +
			"	PREPARE finalMainQuery FROM @finalMainQuery;  \n" +
			"	EXECUTE finalMainQuery;  \n" +
			"	DEALLOCATE PREPARE finalMainQuery;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP function IF EXISTS `fun_getKitAllocatedFunctionalType`;  \n" +
			"CREATE FUNCTION `fun_getKitAllocatedFunctionalType`(  \n" +
			"	pRefSalesOrderDetID INT,  \n" +
			"	pRefRfqLineitem INT,  \n" +
			"	pFunctionalTypeId INT  \n" +
			") RETURNS int  \n" +
			"BEGIN  \n" +
			"	DECLARE v_functionalTypeId INT;  \n" +
			"	DECLARE v_count INT;  \n" +
			"  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempFunctionalType;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempFunctionalType AS  \n" +
			"	select functionalCategoryID  \n" +
			"	from (  \n" +
			"			SELECT  IFNULL(com.refFunctionalCategoryID,com.functionalCategoryID) functionalCategoryID  \n" +
			"			FROM 	kit_allocation_lineitems_alternatepart kla  \n" +
			"			INNER JOIN vu_component_packingalias com ON kla.mfgPNID = com.refComponentID  \n" +
			"			WHERE 	kla.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
			"			AND 	kla.refRfqLineitem = pRefRfqLineitem  \n" +
			"			AND 	kla.isDeleted = 0  \n" +
			"	) as t  \n" +
			"	group by functionalCategoryID;  \n" +
			"  \n" +
			"	SELECT COUNT(1) INTO v_count FROM tempFunctionalType;  \n" +
			"	IF (v_count = 1) THEN  \n" +
			"		SET v_functionalTypeId = pFunctionalTypeId;  \n" +
			"	ELSE  \n" +
			"		SET v_functionalTypeId = -1;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	RETURN v_functionalTypeId;  \n" +
			"END;  \n" +
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			"DROP function IF EXISTS `fun_CalculateKitFeasibility`;  \n" +
			"CREATE FUNCTION `fun_CalculateKitFeasibility`(  \n" +
			"	pRefSalesOrderDetID INT(11),  \n" +
			"	pAssyID INT(11),  \n" +
			"	pIsConsolidated TINYINT(1),  \n" +
			"	pInputQty DECIMAL(18,8)  \n" +
			") RETURNS decimal(18,8)  \n" +
			"BEGIN  \n" +
			"	DECLARE vKitQty DECIMAL(18,8);  \n" +
			"	DECLARE vCustomerId INT;  \n" +
			"  \n" +
			"	SELECT kitQty INTO vKitQty FROM salesorderdet WHERE id = pRefSalesOrderDetID;  \n" +
			"  \n" +
			"    SELECT 		customerID  \n" +
			"	INTO		vCustomerId  \n" +
			"	FROM 		salesorderdet sd  \n" +
			"	INNER JOIN 	salesordermst s ON s.id = sd.refSalesOrderID  \n" +
			"	WHERE 		sd.id = pRefSalesOrderDetID;  \n" +
			"  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingTypeWiseKitDet  \n" +
			"	(  \n" +
			"		mountingTypeID INT(11),  \n" +
			"		mountingType VARCHAR(50),  \n" +
			"		connecterTypeID INT(11),  \n" +
			"		connecterType VARCHAR(50),  \n" +
			"		feasibilityWithAllocation DECIMAL(18,8),  \n" +
			"		shortageLine DECIMAL(18,8),  \n" +
			"		feasibilityWithAvailableAndAllocatedStock DECIMAL(18,8),  \n" +
			"		shortageWithAvailableQty DECIMAL(18,8),  \n" +
			"		shortageForInputQty DECIMAL(18,8),  \n" +
			"		releasedQty DECIMAL(18,8),  \n" +
			"		pendingQty DECIMAL(18,8),  \n" +
			"		releasePercentage DECIMAL(18,8),  \n" +
			"		totalLine INT  \n" +
			"	);  \n" +
			"  \n" +
			"	IF(pIsConsolidated = 1) THEN  \n" +
			"		/* Get consolidated parts detail from consolidated table */  \n" +
			"		DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
			"		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
			"		SELECT 	k.id, 				k.refsalesORderDetid,	k.consolidatedLineItemIDs,  \n" +
			"				k.mountingTypeID, 	k.connecterTypeID,		k.consolidatedMfgPNIDs,  \n" +
			"				k.numOfPosition, 	k.kitQPAWithDNP,		k.uomMismatchedStep,  \n" +
			"				k.isNotRequiredKitAllocation,				k.uomID,  \n" +
			"				k.custPNID  \n" +
			"		FROM 	kit_allocation_consolidate_Line_detail k  \n" +
			"		WHERE 	k.refSalesOrderDetID = pRefSalesOrderDetID AND k.isAssembly = 0 AND k.isDeleted = 0;  \n" +
			"	ELSE  \n" +
			"		/* Get assembly parts detail from kit_allocation_lineitems and kit_allocation_lineitems_alternatepart table */  \n" +
			"		DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
			"		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
			"		SELECT 	k.id,					kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
			"			kl.mountingTypeID, 			kl.connecterTypeID, 		kl.consolidatedMfgPNIDs, 		k.numOfPosition,  \n" +
			"			(  \n" +
			"				CASE  \n" +
			"					WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
			"						(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
			"					ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
			"				END  \n" +
			"			) AS kitQPAWithDNP,  \n" +
			"			kl.uomMismatchedStep,  \n" +
			"			k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
			"		FROM 	(  \n" +
			"				SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
			"						(  \n" +
			"							CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) /* Matched Mounting Type */  \n" +
			"									THEN  MIN(c.mountingTypeID)  \n" +
			"								WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
			"									THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))  \n" +
			"								ELSE  -1  \n" +
			"							END  \n" +
			"						) mountingTypeID,  \n" +
			"						IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
			"						c.packingAliasParts consolidatedMfgPNIDs,  \n" +
			"						MIN(kal.uomMismatchedStep) uomMismatchedStep    /* Zero indicate to part value does not match with BOM UOM */  \n" +
			"				FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
			"				JOIN 		vu_component_packingalias c ON kal.mfgPNID = c.refComponentID  \n" +
			"				WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
			"				AND 		kal.partID =  pAssyID  \n" +
			"				AND 		kal.isDeleted = 0  \n" +
			"				AND			c.isDeleted = 0  \n" +
			"				GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem,c.packingAliasParts  \n" +
			"		) AS kl  \n" +
			"		INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0;  \n" +
			"	END IF;  \n" +
			"  \n" +
			"	/* Get available and allocated stock for selected assembly*/  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Stock_Det;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Stock_Det AS  \n" +
			"	SELECT  	r.consolidatedMfgPNIDs, 	r.id,  \n" +
			"			IFNULL(ks.allocatedUnit, 0) allocatedunit,  \n" +
			"			IFNULL(ks.allocatedPins,0) allocatedPin,  \n" +
			"			SUM(IFNULL(fun_convertUOM(v.uom, IFNULL(ks.allocatedUOM, r.uomID), IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)),0)) availableStock,  \n" +
			"			SUM((FLOOR(IFNULL(v.noOfPosition, 0)/IFNULL(r.numOfPosition, 0)) * IFNULL(r.numOfPosition, 0)) * IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)) availableStockInPin  \n" +
			"	FROM 		temp_Kit_Consolidate_Detail r  \n" +
			"	LEFT JOIN 	vu_kit_allocation_summary ks ON r.refsalesORderDetid = ks.refsalesOrderDetId  \n" +
			"					AND ks.assyID = (CASE WHEN pIsConsolidated = 1 THEN ks.assyID ELSE pAssyID END)  \n" +
			"					AND FIND_IN_SET(ks.refBOMLineID, r.consolidatedLineItemIDs)  \n" +
			"	LEFT JOIN 	vu_deducted_allocation_available_Stock v ON FIND_IN_SET(v.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",consolidatedMfgPNIDs) ELSE consolidatedMfgPNIDs END))  \n" +
			"	WHERE 		r.isNotRequiredKitAllocation != 1  \n" +
			"	GROUP BY 	r.consolidatedMfgPNIDs, r.id;  \n" +
			"  \n" +
			"	/* Create temporary table to get avilable and allocated stock against each line with shortage*/  \n" +
			"	DROP TEMPORARY TABLE IF EXISTS tempFeasibilityDetail;  \n" +
			"	CREATE TEMPORARY TABLE IF NOT EXISTS tempFeasibilityDetail AS  \n" +
			"	SELECT 		r.kitQPAWithDNP qpa,		t.allocatedUnit,  \n" +
			"			t.allocatedPin,			t.availableStock,			t.availableStockInPin,  \n" +
			"			r.mountingTypeID,   		(CASE WHEN r.connecterTypeID = -2 THEN r.connecterTypeID ELSE NULL END) connecterTypeID,  \n" +
			"			(  \n" +
			"				CASE  \n" +
			"					WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
			"						(t.allocatedUnit/r.kitQPAWithDNP)  \n" +
			"					ELSE (IFNULL(t.allocatedPin, 0) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
			"				END  \n" +
			"			) feasibilityWithAllocation,  \n" +
			"			(  \n" +
			"				CASE  \n" +
			"					WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
			"						((t.availableStock + t.allocatedUnit)/r.kitQPAWithDNP)  \n" +
			"					ELSE ((IFNULL(t.allocatedPin, 0) + IFNULL(t.availableStockInPin, 0)) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
			"				END  \n" +
			"			) feasibilityWithAvailableAndAllocatedStock,  \n" +
			"			(CASE  \n" +
			"				WHEN r.uomMismatchedStep = 0 THEN 0  \n" +
			"				ELSE  \n" +
			"					CASE  \n" +
			"						WHEN r.connecterTypeID = -2 THEN  \n" +
			"							(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * vKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0)) < 0)  \n" +
			"									THEN 0  \n" +
			"									ELSE ((IFNULL(r.kitQPAWithDNP, 0) * vKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0))  \n" +
			"							END)  \n" +
			"						ELSE  \n" +
			"							(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * vKitQty) - IFNULL(t.allocatedUnit, 0)) < 0)  \n" +
			"									THEN 0  \n" +
			"									ELSE ((IFNULL(r.kitQPAWithDNP, 0) * vKitQty) - IFNULL(t.allocatedUnit, 0))  \n" +
			"							END)  \n" +
			"					END  \n" +
			"			END) shortagePerBuild  \n" +
			"	FROM 		temp_Kit_Consolidate_Detail r  \n" +
			"	INNER JOIN 	temp_Kit_Stock_Det t ON r.id = t.id;  \n" +
			"  \n" +
			"	INSERT INTO tempMountingTypeWiseKitDet  \n" +
			"	SELECT 		mountingTypeID,							fun_getMountingTypeNameByID(mountingTypeID) mountingType,  \n" +
			"			connecterTypeID, 						(CASE WHEN connecterTypeID IS NOT NULL THEN fun_getConnectorTypeNameByID(connecterTypeID) ELSE NULL END) connecterType,  \n" +
			"			MIN(feasibilityWithAllocation) feasibilityWithAllocation,	SUM(Shortage) shortageLine,  \n" +
			"			MIN(feasibilityWithAvailableAndAllocatedStock) feasibilityWithAvailableAndAllocatedStock,  \n" +
			"			SUM(ShortageWithAvailableQty) shortageWithAvailableQty,     	SUM(shortageForInputQty) shortageForInputQty,  \n" +
			"			0 releasedQty,		vKitQty pendingQty,			0 releasePercentage,		COUNT(1) totalLine  \n" +
			"	FROM    	(  \n" +
			"				SELECT 	mountingTypeID, 		connecterTypeID, 		availableStock,  \n" +
			"					IFNULL(feasibilityWithAllocation, 0) feasibilityWithAllocation,  \n" +
			"					CASE WHEN (shortagePerBuild > 0) THEN 1 ELSE 0 END Shortage,  \n" +
			"					IFNULL(feasibilityWithAvailableAndAllocatedStock, 0) feasibilityWithAvailableAndAllocatedStock,  \n" +
			"					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < vKitQty) THEN 1 ELSE 0 END ShortageWithAvailableQty,  \n" +
			"					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < pInputQty) THEN 1 ELSE 0 END shortageForInputQty  \n" +
			"				FROM 	tempFeasibilityDetail t  \n" +
			"			) AS feasibilityDet  \n" +
			"	GROUP BY 	mountingTypeID, connecterTypeID  \n" +
			"	ORDER BY 	mountingType;  \n" +
			"  \n" +
			"    RETURN vKitQty;  \n" +
			"END;  \n" +	
			/* **************************** Add Script Version -> 28-03-2022 *********************************** */
			  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
			  "VALUES (6071,'2.00','V1',' User Story 42365: Apply Part Master Normalization effect in Kit UMID and Bulk Transfer flow - Packaging Alias Changes for Columns without alias condition - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
			  );
			break;
        case 6071:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-03-2022 *********************************** */
                "INSERT INTO `table_mapping_details` (`tabel_name`, `display_page_name`) VALUES ('systemconfigrations', 'Data Keys');  \n" +
                /* **************************** Add Script Version -> 25-03-2022 *********************************** */
                "ALTER TABLE component_sid_stock ADD COLUMN fromDateCodeFormat INT NOT NULL DEFAULT 1;  \n" +
                /* **************************** Add Script Version -> 25-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6072,'2.00','V1',' Bug 42413: Qa Testing issues for #40723: UMID Create Page enhancement Points [Lot Code Changes] - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6072:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 28-03-2022 *********************************** */
                "DROP VIEW IF EXISTS `vu_component_packingalias` ;  \n" +
                "CREATE VIEW `vu_component_packingalias` AS  \n" +
                "    SELECT  \n" +
                "        `c`.`refComponentID` AS `refComponentID`,  \n" +
                "        `c`.`packaginggroupID` AS `packaginggroupID`,  \n" +
                "        IFNULL(GROUP_CONCAT(DISTINCT `d`.`refComponentID`  \n" +
                "                    SEPARATOR ','),  \n" +
                "                `c`.`refComponentID`) AS `packingAliasParts`  \n" +
                "    FROM  \n" +
                "        (`component_attributes` `c`  \n" +
                "        LEFT JOIN `component_attributes` `d` ON ((`c`.`packaginggroupID` = `d`.`packaginggroupID`)))  \n" +
                "    WHERE  \n" +
                "        (`c`.`isDeleted` = 0)  \n" +
                "    GROUP BY `c`.`refComponentID` , `c`.`packaginggroupID`;  \n" +
                /* **************************** Add Script Version -> 28-03-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_getBOMDataForSearchMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_getBOMDataForSearchMaterial`(  \n" +
                "	IN pAssyId INT,  \n" +
                "	IN pSearchString VARCHAR(100),  \n" +
                "	IN pSearchType VARCHAR(10),  \n" +
                "    IN pNickName VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_WhereClauseUMIDSearch VARCHAR(1000);  \n" +
                "	DECLARE v_WhereClausePIDSearch VARCHAR(1000);  \n" +
                "	DECLARE v_SearchBOMLineIds VARCHAR(10000);  \n" +
                "	DECLARE v_MFRPnIds LONGTEXT;  \n" +
                "	DECLARE v_AssyIds LONGTEXT;  \n" +
                "  \n" +
                "	SET pSearchString = REPLACE(REPLACE(REPLACE(REPLACE(pSearchString,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");     \n" +
                "  \n" +
                "	IF(pNickName IS NOT NULL) THEN  \n" +
                "		SELECT GROUP_CONCAT(id) INTO v_AssyIds FROM component WHERE nickname = pNickName;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pSearchType = 'contains') THEN  \n" +
                "		SET v_WhereClauseUMIDSearch = CONCAT(' uid LIKE \"%', pSearchString ,'%\" ');  \n" +
                "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN LIKE \"%', pSearchString ,'%\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR cs.mfgPN LIKE \"%', pSearchString ,'%\" OR co.name LIKE \"%', pSearchString ,'%\" ');  \n" +
                "	ELSEIF (pSearchType = 'exact') THEN  \n" +
                "		SET v_WhereClauseUMIDSearch = CONCAT(' uid = \"', pSearchString , '\" ');  \n" +
                "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN = \"', pSearchString ,'\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR cs.mfgPN = \"', pSearchString ,'\" OR co.name = \"', pSearchString ,'\" ');  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseUMIDSearch = ' 1 = 1 ';  \n" +
                "		SET v_WhereClausePIDSearch = ' 1 = 1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT 	refcompid AS mfrPNId , NULL AS  distPNId  \n" +
                "		FROM 	component_sid_stock  \n" +
                "		WHERE   ', v_WhereClauseUMIDSearch ,'  \n" +
                "				AND isDeleted = 0  \n" +
                "		UNION  \n" +
                "		SELECT 		IFNULL(cp.id, c.id) AS mfrPNId, IFNULL(cs.id, c.id) AS distPNId  \n" +
                "		FROM 		vu_component_mpn c  \n" +
                "		LEFT JOIN 	component cs ON c.refSupplierMfgpnComponentID = cs.id AND cs.isDeleted = 0  \n" +
                "		LEFT JOIN   component_otherpn co ON co.refComponentID = c.id AND c.isDeleted = 0  \n" +
                "		LEFT JOIN 	vu_component_mpn cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "		WHERE 		(', v_WhereClausePIDSearch ,')  \n" +
                "	');  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempGetMFRPNIdBySearchString AS \", @vFromSQLQuery);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT CONCAT(GROUP_CONCAT(mfrPNId), ',',GROUP_CONCAT(distPNId)) INTO v_MFRPnIds FROM tempGetMFRPNIdBySearchString;  \n" +
                "  \n" +
                "	SELECT 	GROUP_CONCAT(rfqLineItemsID) INTO v_SearchBOMLineIds  \n" +
                "	FROM 	(  \n" +
                "			SELECT 		a.rfqLineItemsID  \n" +
                "			FROM 		rfq_lineitems_alternatepart a  \n" +
                "			LEFT JOIN	rfq_lineitems b ON b.id = a.rfqLineItemsID  \n" +
                "			LEFT JOIN  vu_component_packingalias c ON c.refComponentID = a.mfgPNID  \n" +
                "			WHERE 		a.partID IN (IFNULL(IFNULL(pAssyId, v_AssyIds), a.partID))  \n" +
                "						AND FIND_IN_SET(c.packingAliasParts, v_MFRPnIds)  \n" +
                "						AND a.isDeleted = 0  \n" +
                "		) AS a;  \n" +
                "  \n" +
                "   SELECT 		rl.id,  \n" +
                "				fun_getAssyPIDCodeByID(rl.partId) assyPIDCode,  \n" +
                "				rl.partId assyId,  \n" +
                "				rl.lineID,  \n" +
                "				rl.cust_lineID,  \n" +
                "				rl.qpa,  \n" +
                "				rl.refDesig,  \n" +
                "				(CASE WHEN rla.mfgCodeID IS NOT NULL AND IFNULL(rla.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE rla.mfgCode END) AS mfgCode,  \n" +
                "				IFNULL(d.mfgCodeID, c.mfgCodeID) mfgCodeID,  \n" +
                "				mcm.acquisitionDetail,  \n" +
                "				IFNULL(d.mfgPN, c.mfgPN) mfgPN,  \n" +
                "				IFNULL(d.id, c.id) AS mfgPNID,  \n" +
                "				(CASE WHEN rla.distMfgCodeID IS NOT NULL AND IFNULL(rla.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE rla.distributor END) AS distributor,  \n" +
                "				mcmDist.acquisitionDetail AS distAcquisitionDetail,  \n" +
                "				rla.distMfgCodeID,  \n" +
                "				rla.distPN,  \n" +
                "				rla.distMfgPNID,  \n" +
                "				rl.custPN,  \n" +
                "				rl.custPNID,  \n" +
                "				(CASE WHEN rl.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = rl.custPNID) ELSE 0 END) AS isCustPN,  \n" +
                "				(CASE WHEN rl.uomID IS NULL THEN rl.org_uomName ELSE fun_getUnitNameByID(rl.uomID) END) AS uomID,  \n" +
                "				(CASE WHEN rl.programingStatus = 1 THEN 'Pre' WHEN rl.programingStatus = 2 THEN 'Post' ELSE 'N/A' END) AS programingStatus,  \n" +
                "				(CASE WHEN rl.substitutesAllow IS NULL THEN rl.org_substitutesAllow ELSE CASE WHEN rl.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN rl.substitutesAllow = 2 THEN 'No' ELSE '' END END) AS substitutesAllow,  \n" +
                "				(CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = rl.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END) AS allocatedInKit,  \n" +
                "				rla.description descriptionAlternate,  \n" +
                "				rl.description,  \n" +
                "				rl.numOfPosition,  \n" +
                "				rl.numOfRows,  \n" +
                "				rl.customerRev,  \n" +
                "				rl.customerDescription,  \n" +
                "				rl.customerPartDesc,  \n" +
                "				CONCAT(part.partTypeName) partclassID,  \n" +
                "				rl.isInstall,  \n" +
                "				rl.isPurchase,  \n" +
                "				rl.dnpQty,  \n" +
                "				rl.dnpDesig,  \n" +
                "				rla.id AS rfqAlternatePartID,  \n" +
                "				rl.qpaDesignatorStep,  \n" +
                "				rl.duplicateCPNStep,  \n" +
                "				rl.restrictCPNUseWithPermissionStep,  \n" +
                "				rl.restrictCPNUsePermanentlyStep,  \n" +
                "				rl.restrictCPNUseInBOMStep,  \n" +
                "				rl.requireMountingTypeStep,  \n" +
                "				rl.requireFunctionalTypeStep,  \n" +
                "				rl.requireMountingTypeError,  \n" +
                "				rl.requireFunctionalTypeError,  \n" +
                "				(CASE WHEN rl.isBuyDNPQty = 'Y' THEN 'YES' WHEN rl.isBuyDNPQty = 'C' THEN 'Customer Consigned' ELSE 'NO' END) AS isBuyDNPQty,  \n" +
                "				rl.isObsoleteLine,  \n" +
                "				rl.customerApprovalForQPAREFDESStep,  \n" +
                "				rl.customerApprovalForBuyStep,  \n" +
                "				rl.customerApprovalForPopulateStep,  \n" +
                "				rl.dnpQPARefDesStep,  \n" +
                "				rl.customerApprovalForDNPQPAREFDESStep,  \n" +
                "				rl.customerApprovalForDNPBuyStep,  \n" +
                "				rl.customerApprovalCPN,  \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) qpaCustomerApprovalComment,  \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) dnpqpaCustomerApprovalComment,  \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) buyCustomerApprovalComment,  \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) buyDNPCustomerApprovalComment,  \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) populateCustomerApprovalComment,  \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) cpnCustomerApprovalComment,  \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedQPA,  \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,  \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedDNPQPA,  \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,  \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,  \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = rl.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,  \n" +
                "				rla.mfgVerificationStep,  \n" +
                "				rla.mfgDistMappingStep,  \n" +
                "				rla.mfgCodeStep,  \n" +
                "				rla.customerApproval,  \n" +
                "				rla.isCustomerUnAppoval,  \n" +
                "				rla.org_mfgCode,  \n" +
                "				rla.org_mfgPN,  \n" +
                "				rla.org_distributor,  \n" +
                "				rla.org_distPN,  \n" +
                "				rla.distVerificationStep,  \n" +
                "				rla.distCodeStep,  \n" +
                "				rla.getMFGPNStep,  \n" +
                "				rla.obsoletePartStep,  \n" +
                "				rla.mfgGoodPartMappingStep,  \n" +
                "				rla.mfgPNStep,  \n" +
                "				rla.distPNStep,  \n" +
                "				rla.badMfgPN,  \n" +
                "				rla.distGoodPartMappingStep,  \n" +
                "				rla.nonRohsStep,  \n" +
                "				rla.epoxyStep,  \n" +
                "				rla.invalidConnectorTypeStep,  \n" +
                "				rla.duplicateMPNInSameLineStep,  \n" +
                "				rla.mismatchMountingTypeStep,  \n" +
                "				rla.mismatchFunctionalCategoryStep,  \n" +
                "				rla.restrictUseWithPermissionStep,  \n" +
                "				rla.restrictUsePermanentlyStep,  \n" +
                "				rla.partPinIsLessthenBOMPinStep,  \n" +
                "				rla.exportControlledStep,  \n" +
                "				rla.tbdPartStep,  \n" +
                "				rla.userData1,  \n" +
                "				rla.userData2,  \n" +
                "				rla.userData3,  \n" +
                "				rla.userData4,  \n" +
                "				rla.userData5,  \n" +
                "				rla.userData6,  \n" +
                "				rla.userData7,  \n" +
                "				rla.userData8,  \n" +
                "				rla.userData9,  \n" +
                "				rla.userData10,  \n" +
                "				rla.pickupPadRequiredStep,  \n" +
                "				rla.matingPartRquiredStep,  \n" +
                "				rla.suggestedGoodPartStep,  \n" +
                "				rla.suggestedGoodDistPartStep,  \n" +
                "				rla.driverToolsRequiredStep,  \n" +
                "				rla.functionalTestingRequiredStep,  \n" +
                "				rla.mismatchValueStep,  \n" +
                "				rla.approvedMountingType,  \n" +
                "				rla.mismatchPackageStep,  \n" +
                "				rla.mismatchPowerStep,  \n" +
                "				rla.mismatchToleranceStep,  \n" +
                "				rla.mismatchTempratureStep,  \n" +
                "				rla.mismatchNumberOfRowsStep,  \n" +
                "				rla.uomMismatchedStep,  \n" +
                "				rla.programingRequiredStep,  \n" +
                "				rla.mismatchColorStep,  \n" +
                "				rla.restrictUseInBOMStep,  \n" +
                "				rla.restrictUseInBOMWithPermissionStep,  \n" +
                "				rla.restrictUseInBOMExcludingAliasStep,  \n" +
                "				rla.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "				rla.restrictUseExcludingAliasStep,  \n" +
                "				rla.restrictUseExcludingAliasWithPermissionStep,  \n" +
                "				rla.unknownPartStep,  \n" +
                "				rla.defaultInvalidMFRStep,  \n" +
                "				rla.isUnlockApprovedPart,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN c.id = -3 AND rl.custPnID IS NOT NULL THEN  \n" +
                "							CONCAT(cpnPart.partTypeName)  \n" +
                "						ELSE  \n" +
                "							CONCAT(part.partTypeName)  \n" +
                "					END  \n" +
                "				)  \n" +
                "				AS parttypeID,  \n" +
                "				part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN c.id = -3 AND rl.custPnID IS NOT NULL THEN  \n" +
                "							CONCAT(cpnMount.name)  \n" +
                "						ELSE  \n" +
                "							CONCAT(mount.name)  \n" +
                "					END  \n" +
                "				) AS mountingtypeID,  \n" +
                "				CONCAT(cat.categoryname) partcategoryID,  \n" +
                "				c.isGoodPart isMFGGoodPart,  \n" +
                "				(SELECT co.isGoodPart FROM component co WHERE co.id = rla.distMfgPNID) isDistGoodPart,  \n" +
                "				c.RoHSStatusID RoHSStatusID,  \n" +
                "				fun_getRoHSCategoryByID(c.RoHSStatusID) refMainCategoryID,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (c.eolDate IS NOT NULL AND c.eolDate < fun_DatetimetoUTCDateTime()) OR EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE c.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0) THEN  \n" +
                "							1  \n" +
                "						ELSE  \n" +
                "							0  \n" +
                "					END  \n" +
                "				) isObsolete,  \n" +
                "				c.PIDCode,  \n" +
                "				c.mfgPNDescription,  \n" +
                "				ca.pitch,  \n" +
                "				ca.noOfRows,  \n" +
                "				ca.partPackage,  \n" +
                "				ca.value,  \n" +
                "				ca.tolerance,  \n" +
                "				ca.voltage,  \n" +
                "				c.isCustom,  \n" +
                "				c.packaging,  \n" +
                "				c.deviceMarking,  \n" +
                "				ca.powerRating,  \n" +
                "				ca.minOperatingTemp,  \n" +
                "				ca.maxOperatingTemp,  \n" +
                "				ca.connecterTypeID,  \n" +
                "				cs.driverToolRequired,  \n" +
                "				cs.matingPartRquired,  \n" +
                "				cs.pickupPadRequired,  \n" +
                "				cs.programingRequired,  \n" +
                "				c.dataSheetLink,  \n" +
                "				c.isCPN,  \n" +
                "				(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = c.id AND isDeleted = 0) AS driveToolIDs,  \n" +
                "				(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = c.id AND isDeleted = 0 AND `type` = 3) AS programingRequiredIDs,  \n" +
                "				(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = c.id AND isDeleted = 0) AS operationalAttributeIDs,  \n" +
                "				(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = c.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,  \n" +
                "				(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = c.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,  \n" +
                "				ca.isTemperatureSensitive,  \n" +
                "				ca.noOfPosition AS componentLead,  \n" +
                "				fun_getPartStatusNameByID(c.partStatus) AS partStatus,  \n" +
                "				fun_getPartStatusColorCodeByID(c.partStatus) AS partStatuscolorCode,  \n" +
                "				c.createdBy,  \n" +
                "				(SELECT u.unitName FROM UOMs u WHERE u.id = c.uom ) AS uom,  \n" +
                "				ca.color,  \n" +
                "				c.uom AS partUOMID,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (  \n" +
                "							SELECT 		COUNT(cs.isExportControlled) AS isExportControlled  \n" +
                "							FROM 		component co  \n" +
                "							LEFT JOIN 	component_standard_details csd ON csd.componentID = co.id AND IFNULL(csd.isDeleted,0) = 0  \n" +
                "							LEFT JOIN 	certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1  \n" +
                "							WHERE 		c.id = co.id  \n" +
                "						) > 0 THEN  \n" +
                "							1  \n" +
                "						ELSE  \n" +
                "							0  \n" +
                "					END  \n" +
                "				) isExportControlled,  \n" +
                "				(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = rla.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,  \n" +
                "				(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = rla.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,  \n" +
                "				ac.description AS additionalComment,  \n" +
                "				ac.id AS additionalCommentId  \n" +
                "		FROM 		rfq_lineitems_alternatepart rla  \n" +
                "		INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                "        JOIN vu_component_mpn c ON rla.mfgPNID = c.id AND c.isDeleted = 0  \n" +
                "		LEFT JOIN component_attributes ca ON c.id = ca.refComponentID AND ca.isDeleted = 0  \n" +
                "		LEFT JOIN component_attributes da ON ca.packaginggroupID = da.packaginggroupID AND da.isDeleted = 0  \n" +
                "		LEFT JOIN vu_component_mpn d ON da.refComponentID = d.id AND d.isDeleted = 0  \n" +
                "		LEFT JOIN component_settings cs ON c.id = cs.refComponentID AND cs.isDeleted = 0  \n" +
                "		LEFT JOIN 	mfgcodemst mcm ON rla.mfgCodeID = mcm.id AND mcm.isDeleted = 0  \n" +
                "		LEFT JOIN 	mfgcodemst mcmDist ON rla.mfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0  \n" +
                "		LEFT JOIN 	rfq_parttypemst part ON ca.functionalCategoryID = part.id AND part.isDeleted = 0  \n" +
                "		LEFT JOIN 	component_attributes cpn ON rl.custPNID = cpn.refComponentID AND cpn.isDeleted = 0  \n" +
                "		LEFT JOIN 	rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id AND cpnPart.isDeleted = 0  \n" +
                "		LEFT JOIN 	rfq_mountingtypemst mount ON ca.mountingtypeID = mount.id AND mount.isDeleted = 0  \n" +
                "		LEFT JOIN 	rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id AND cpnMount.isDeleted = 0  \n" +
                "		LEFT JOIN 	rfq_partcategory cat ON c.category = cat.id AND cat.isDeleted = 0  \n" +
                "		LEFT JOIN 	rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = rl.id AND ac.isDeleted = 0  \n" +
                "		WHERE 	 	FIND_IN_SET(rl.id, v_SearchBOMLineIds)  \n" +
                "					AND rla.partID = IFNULL(pAssyId, rla.partID)  \n" +
                "					AND rla.isDeleted = 0  \n" +
                "		ORDER BY 	rl.lineID;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-03-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_getUMIDDataForSearchMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_getUMIDDataForSearchMaterial`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pAssyId INT,  \n" +
                "    IN pNickName VARCHAR(255),  \n" +
                "	IN pSearchString VARCHAR(100),  \n" +
                "	IN pSearchType VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_WhereClauseUMIDSearch VARCHAR(1000);  \n" +
                "	DECLARE v_WhereClausePIDSearch VARCHAR(1000);  \n" +
                "	DECLARE v_WhereClauseExtra VARCHAR(1000);  \n" +
                "    DECLARE v_WhereClauseNickName VARCHAR(1000);  \n" +
                "	DECLARE v_UMIDSearchQuery LONGTEXT;  \n" +
                "	DECLARE v_MFRSearchQuery LONGTEXT;  \n" +
                "	DECLARE v_MFRPackagingSearchQuery LONGTEXT;  \n" +
                "	DECLARE v_FromFinalSQLQuery LONGTEXT;  \n" +
                "	SET v_WhereClauseExtra = ' AND 1 = 1 ';  \n" +
                "  \n" +
			"	SET pSearchString = REPLACE(REPLACE(REPLACE(REPLACE(pSearchString,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");     \n" +
            "  \n" +
            "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , \" id DESC\") ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "	IF (pSearchType = 'contains') THEN  \n" +
            "		SET v_WhereClauseUMIDSearch = CONCAT(' uid LIKE \"%', pSearchString ,'%\" ');  \n" +
            "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN LIKE \"%', pSearchString ,'%\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR c.mfgPN LIKE \"%', pSearchString ,'%\" OR co.name LIKE \"%', pSearchString ,'%\" ');  \n" +
            "	ELSEIF (pSearchType = 'exact') THEN  \n" +
            "		SET v_WhereClauseUMIDSearch = CONCAT(' uid = \"', pSearchString , '\" ');  \n" +
            "		SET v_WhereClausePIDSearch = CONCAT(' c.mfgPN = \"', pSearchString ,'\" OR c.PIDCode LIKE \"%', pSearchString ,'%\" OR cs.mfgPN = \"', pSearchString ,'\" OR co.name = \"', pSearchString ,'\" ');  \n" +
            "	ELSE  \n" +
            "		SET v_WhereClauseUMIDSearch = ' 1 = 1 ';  \n" +
            "		SET v_WhereClausePIDSearch = ' 1 = 1';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    SET v_WhereClauseNickName = '1 = 1';  \n" +
            "  \n" +
            "	IF (pAssyId IS NOT NULL) THEN  \n" +
            "		SET v_WhereClauseExtra = CONCAT(v_WhereClauseExtra, ' AND assyID = ', pAssyId);  \n" +
            "	ELSEIF (pNickName IS NOT NULL) THEN  \n" +
            "		SET v_WhereClauseNickName = CONCAT(v_WhereClauseNickName, ' AND a.assyNickName = \"', pNickName,'\"');  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	IF(pWhereClause IS NOT NULL AND pWhereClause != '') THEN  \n" +
            "		SET v_WhereClauseExtra = CONCAT(v_WhereClauseExtra, ' AND ', pWhereClause);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	SET v_UMIDSearchQuery = CONCAT('  \n" +
            "		SELECT 	id  \n" +
            "		FROM	component_sid_stock  \n" +
            "		WHERE	(', v_WhereClauseUMIDSearch ,')  \n" +
            "				AND isDeleted = 0  \n" +
            "	');  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS tempGetUMIDBySearchString;  \n" +
            "	SET @vSQLMainQuery1 =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempGetUMIDBySearchString AS \", v_UMIDSearchQuery);  \n" +
            "	PREPARE mainQuery1 FROM @vSQLMainQuery1;  \n" +
            "	EXECUTE mainQuery1;  \n" +
            "	DEALLOCATE PREPARE mainQuery1;  \n" +
            "  \n" +
            "	SET v_MFRSearchQuery = CONCAT('  \n" +
            "			SELECT 		IFNULL(cp.id, c.id) AS mfrPNId, IFNULL(cs.id, c.id) AS distPNId  \n" +
            "			FROM 		component c  \n" +
            "			LEFT JOIN 	vu_component_mpn cs ON c.refSupplierMfgpnComponentID = cs.id AND cs.isDeleted = 0  \n" +
            "			LEFT JOIN   component_otherpn co ON co.refComponentID = c.id AND c.isDeleted = 0  \n" +
            "			LEFT JOIN 	vu_component_mpn cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
            "			WHERE 		(', v_WhereClausePIDSearch ,')  \n" +
            "						AND c.isDeleted = 0  \n" +
            "	');  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS tempGetMFRPNIdBySearchString;  \n" +
            "	SET @vSQLMainQuery2 =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempGetMFRPNIdBySearchString AS \", v_MFRSearchQuery);  \n" +
            "	PREPARE mainQuery2 FROM @vSQLMainQuery2;  \n" +
            "	EXECUTE mainQuery2;  \n" +
            "	DEALLOCATE PREPARE mainQuery2;  \n" +
            "  \n" +
            "	SET v_FromFinalSQLQuery = CONCAT('  \n" +
            "				SELECT 		css.id,  \n" +
            "						css.uid,  \n" +
            "						css.receiveMaterialType,  \n" +
            "						css.refcompid,  \n" +
            "						fun_getMfgCodeAndNameByID(c.mfgCodeId) fullMfrName,  \n" +
            "						c.mfgPN mfrPN,  \n" +
            "						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
            "						fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
            "						c.isCustom,  \n" +
            "						c.restrictUsePermanently,  \n" +
            "						c.restrictUSEwithpermission,  \n" +
            "						c.restrictPackagingUsePermanently,  \n" +
            "						c.restrictPackagingUseWithpermission,  \n" +
            "						fun_getBinNameByID(css.binID) currentBinName,  \n" +
            "						fun_getWarehouseNameByBinID(css.binID) currentWarehouseName,  \n" +
            "						fun_getDepartmentNameByBinID(css.binID) currentParentWarehouseName,  \n" +
            "						css.pkgQty currentCount,  \n" +
            "						css.pkgUnit currentUnit,  \n" +
            "						css.uom currentUOM,  \n" +
            "                        u.unitName currentUOMName,  \n" +
            "                        u.measurementTypeID currentUOMClassID,  \n" +
            "						css.packaging,  \n" +
            "						fun_getPackagingNameByID(css.packaging) packagingName,  \n" +
            "						ka.status,  \n" +
            "						ka.assyID,  \n" +
            "						ka.partId,  \n" +
            "						fun_getAllocatedKitsNameByID(css.id, \"A\") allocatedToKit,  \n" +
            "						(CASE WHEN ka.assyID IS NULL THEN NULL ELSE fun_getAssyNickNameByID(ka.assyID) END) assyNickName,  \n" +
            "						rl.lineID bomLineNo  \n" +
            "				FROM 		component_sid_stock css  \n" +
            "                INNER JOIN 	uoms u ON u.id = css.uom AND u.isDeleted = 0  \n" +
            "				LEFT JOIN 	kit_allocation ka ON css.id = ka.refUIDId AND ka.status = \"A\"  \n" +
            "				LEFT JOIN 	rfq_lineitems rl ON rl.id = ka.refBOMLineID AND rl.partID = ka.assyID AND rl.isDeleted = 0  \n" +
            "				INNER JOIN	vu_component_mpn c ON c.id = css.refcompid  \n" +
            "				WHERE 		css.isDeleted = 0  \n" +
            "							AND (  \n" +
            "								EXISTS (  \n" +
            "									SELECT 	1  \n" +
            "									FROM 	tempGetUMIDBySearchString t  \n" +
            "									WHERE 	t.id = css.id  \n" +
            "								)  \n" +
            "								OR  \n" +
            "								EXISTS (  \n" +
            "									SELECT 	1  \n" +
            "									FROM 	tempGetMFRPNIdBySearchString t  \n" +
            "									WHERE 	t.mfrPNId = css.refcompid   OR t.distPNId = css.refcompid  \n" +
            "								)  \n" +
            "						) '  , pOrderBy , ' ' , rowNumWhere, '  \n" +
            "			');  \n" +
            "	SET @finalMainQuery = CONCAT(\"SELECT a.* FROM ( \", v_FromFinalSQLQuery,\" ) a WHERE \", v_WhereClauseNickName, v_WhereClauseExtra );  \n" +
            "	PREPARE finalMainQuery FROM @finalMainQuery;  \n" +
            "	EXECUTE finalMainQuery;  \n" +
            "	DEALLOCATE PREPARE finalMainQuery;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 28-03-2022 *********************************** */
            "DROP function IF EXISTS `fun_getKitAllocatedFunctionalType`;  \n" +
            "CREATE FUNCTION `fun_getKitAllocatedFunctionalType`(  \n" +
            "	pRefSalesOrderDetID INT,  \n" +
            "	pRefRfqLineitem INT,  \n" +
            "	pFunctionalTypeId INT  \n" +
            ") RETURNS int  \n" +
            "BEGIN  \n" +
            "	DECLARE v_functionalTypeId INT;  \n" +
            "	DECLARE v_count INT;  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS tempFunctionalType;  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS tempFunctionalType AS  \n" +
            "			SELECT  ifnull(cp.functionalCategoryID, com.functionalCategoryID) AS functionalCategoryID  \n" +
            "			FROM 	kit_allocation_lineitems_alternatepart kla  \n" +
            "			INNER JOIN component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1 AND c.isDeleted = 0  \n" +
            "			LEFT JOIN component_attributes com ON c.id = com.refComponentID  AND com.isDeleted = 0  \n" +
            "			LEFT JOIN component_attributes cp ON ca.packaginggroupID = cp.packaginggroupID AND cp.isDeleted = 0  \n" +
            "			WHERE 	kla.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
            "			AND 	kla.refRfqLineitem = pRefRfqLineitem  \n" +
            "			AND 	kla.isDeleted = 0;  \n" +
            "	SELECT COUNT(1) INTO v_count FROM tempFunctionalType;  \n" +
            "	IF (v_count = 1) THEN  \n" +
            "		SET v_functionalTypeId = pFunctionalTypeId;  \n" +
            "	ELSE  \n" +
            "		SET v_functionalTypeId = -1;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	RETURN v_functionalTypeId;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 28-03-2022 *********************************** */
            "DROP function IF EXISTS `fun_CalculateKitFeasibility`;  \n" +
            "CREATE FUNCTION `fun_CalculateKitFeasibility`(  \n" +
            "	pRefSalesOrderDetID INT(11),  \n" +
            "	pAssyID INT(11),  \n" +
            "	pIsConsolidated TINYINT(1),  \n" +
            "	pInputQty DECIMAL(18,8)  \n" +
            ") RETURNS decimal(18,8)  \n" +
            "BEGIN  \n" +
            "	DECLARE vKitQty DECIMAL(18,8);  \n" +
            "	DECLARE vCustomerId INT;  \n" +
            "  \n" +
            "	SELECT kitQty INTO vKitQty FROM salesorderdet WHERE id = pRefSalesOrderDetID;  \n" +
            "  \n" +
            "    SELECT 		customerID  \n" +
            "	INTO		vCustomerId  \n" +
            "	FROM 		salesorderdet sd  \n" +
            "	INNER JOIN 	salesordermst s ON s.id = sd.refSalesOrderID  \n" +
            "	WHERE 		sd.id = pRefSalesOrderDetID;  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingTypeWiseKitDet  \n" +
            "	(  \n" +
            "		mountingTypeID INT(11),  \n" +
            "		mountingType VARCHAR(50),  \n" +
            "		connecterTypeID INT(11),  \n" +
            "		connecterType VARCHAR(50),  \n" +
            "		feasibilityWithAllocation DECIMAL(18,8),  \n" +
            "		shortageLine DECIMAL(18,8),  \n" +
            "		feasibilityWithAvailableAndAllocatedStock DECIMAL(18,8),  \n" +
            "		shortageWithAvailableQty DECIMAL(18,8),  \n" +
            "		shortageForInputQty DECIMAL(18,8),  \n" +
            "		releasedQty DECIMAL(18,8),  \n" +
            "		pendingQty DECIMAL(18,8),  \n" +
            "		releasePercentage DECIMAL(18,8),  \n" +
            "		totalLine INT  \n" +
            "	);  \n" +
            "  \n" +
            "	IF(pIsConsolidated = 1) THEN  \n" +
            "		/* Get consolidated parts detail from consolidated table */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
            "		SELECT 	k.id, 				k.refsalesORderDetid,	k.consolidatedLineItemIDs,  \n" +
            "				k.mountingTypeID, 	k.connecterTypeID,		k.consolidatedMfgPNIDs,  \n" +
            "				k.numOfPosition, 	k.kitQPAWithDNP,		k.uomMismatchedStep,  \n" +
            "				k.isNotRequiredKitAllocation,				k.uomID,  \n" +
            "				k.custPNID  \n" +
            "		FROM 	kit_allocation_consolidate_Line_detail k  \n" +
            "		WHERE 	k.refSalesOrderDetID = pRefSalesOrderDetID AND k.isAssembly = 0 AND k.isDeleted = 0;  \n" +
            "	ELSE  \n" +
            "		/* Get assembly parts detail from kit_allocation_lineitems and kit_allocation_lineitems_alternatepart table */  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
            "		SELECT 	k.id,					kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
            "			kl.mountingTypeID, 			kl.connecterTypeID, 		kl.consolidatedMfgPNIDs, 		k.numOfPosition,  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
            "						(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
            "					ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
            "				END  \n" +
            "			) AS kitQPAWithDNP,  \n" +
            "			kl.uomMismatchedStep,  \n" +
            "			k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
            "		FROM 	(  \n" +
            "				SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
            "						(  \n" +
            "							CASE 	WHEN MIN(com.mountingTypeID) = MAX(com.mountingTypeID) /* Matched Mounting Type */  \n" +
            "									THEN  MIN(com.mountingTypeID)  \n" +
            "								WHEN MIN(com.mountingTypeID) !=  MAX(com.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
            "									THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN com.mountingTypeID ELSE NULL END))  \n" +
            "								ELSE  -1  \n" +
            "							END  \n" +
            "						) mountingTypeID,  \n" +
            "						IFNULL(MAX(com.connecterTypeID), -1) connecterTypeID,  \n" +
            "					GROUP_CONCAT(IFNULL(cp.refComponentID, c.id)) consolidatedMfgPNIDs,  \n" +
            "						MIN(kal.uomMismatchedStep) uomMismatchedStep    /* Zero indicate to part value does not match with BOM UOM */  \n" +
            "				FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
            "				INNER JOIN component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1 AND c.isDeleted = 0  \n" +
            "				LEFT JOIN component_attributes com ON c.id = com.refComponentID  AND com.isDeleted = 0  \n" +
            "				LEFT JOIN component_attributes cp ON ca.packaginggroupID = cp.packaginggroupID AND cp.isDeleted = 0  \n" +
            "				WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
            "				AND 		kal.partID =  pAssyID  \n" +
            "				AND 		kal.isDeleted = 0  \n" +
            "				AND			c.isDeleted = 0  \n" +
            "				GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem,c.packingAliasParts  \n" +
            "		) AS kl  \n" +
            "		INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* Get available and allocated stock for selected assembly*/  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Stock_Det;  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Stock_Det AS  \n" +
            "	SELECT  	r.consolidatedMfgPNIDs, 	r.id,  \n" +
            "			IFNULL(ks.allocatedUnit, 0) allocatedunit,  \n" +
            "			IFNULL(ks.allocatedPins,0) allocatedPin,  \n" +
            "			SUM(IFNULL(fun_convertUOM(v.uom, IFNULL(ks.allocatedUOM, r.uomID), IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)),0)) availableStock,  \n" +
            "			SUM((FLOOR(IFNULL(v.noOfPosition, 0)/IFNULL(r.numOfPosition, 0)) * IFNULL(r.numOfPosition, 0)) * IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)) availableStockInPin  \n" +
            "	FROM 		temp_Kit_Consolidate_Detail r  \n" +
            "	LEFT JOIN 	vu_kit_allocation_summary ks ON r.refsalesORderDetid = ks.refsalesOrderDetId  \n" +
            "					AND ks.assyID = (CASE WHEN pIsConsolidated = 1 THEN ks.assyID ELSE pAssyID END)  \n" +
            "					AND FIND_IN_SET(ks.refBOMLineID, r.consolidatedLineItemIDs)  \n" +
            "	LEFT JOIN 	vu_deducted_allocation_available_Stock v ON FIND_IN_SET(v.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",consolidatedMfgPNIDs) ELSE consolidatedMfgPNIDs END))  \n" +
            "	WHERE 		r.isNotRequiredKitAllocation != 1  \n" +
            "	GROUP BY 	r.consolidatedMfgPNIDs, r.id;  \n" +
            "  \n" +
            "	/* Create temporary table to get avilable and allocated stock against each line with shortage*/  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS tempFeasibilityDetail;  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS tempFeasibilityDetail AS  \n" +
            "	SELECT 		r.kitQPAWithDNP qpa,		t.allocatedUnit,  \n" +
            "			t.allocatedPin,			t.availableStock,			t.availableStockInPin,  \n" +
            "			r.mountingTypeID,   		(CASE WHEN r.connecterTypeID = -2 THEN r.connecterTypeID ELSE NULL END) connecterTypeID,  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
            "						(t.allocatedUnit/r.kitQPAWithDNP)  \n" +
            "					ELSE (IFNULL(t.allocatedPin, 0) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
            "				END  \n" +
            "			) feasibilityWithAllocation,  \n" +
            "			(  \n" +
            "				CASE  \n" +
            "					WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
            "						((t.availableStock + t.allocatedUnit)/r.kitQPAWithDNP)  \n" +
            "					ELSE ((IFNULL(t.allocatedPin, 0) + IFNULL(t.availableStockInPin, 0)) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
            "				END  \n" +
            "			) feasibilityWithAvailableAndAllocatedStock,  \n" +
            "			(CASE  \n" +
            "				WHEN r.uomMismatchedStep = 0 THEN 0  \n" +
            "				ELSE  \n" +
            "					CASE  \n" +
            "						WHEN r.connecterTypeID = -2 THEN  \n" +
            "							(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * vKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0)) < 0)  \n" +
            "									THEN 0  \n" +
            "									ELSE ((IFNULL(r.kitQPAWithDNP, 0) * vKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0))  \n" +
            "							END)  \n" +
            "						ELSE  \n" +
            "							(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * vKitQty) - IFNULL(t.allocatedUnit, 0)) < 0)  \n" +
            "									THEN 0  \n" +
            "									ELSE ((IFNULL(r.kitQPAWithDNP, 0) * vKitQty) - IFNULL(t.allocatedUnit, 0))  \n" +
            "							END)  \n" +
            "					END  \n" +
            "			END) shortagePerBuild  \n" +
            "	FROM 		temp_Kit_Consolidate_Detail r  \n" +
            "	INNER JOIN 	temp_Kit_Stock_Det t ON r.id = t.id;  \n" +
            "  \n" +
            "	INSERT INTO tempMountingTypeWiseKitDet  \n" +
            "	SELECT 		mountingTypeID,							fun_getMountingTypeNameByID(mountingTypeID) mountingType,  \n" +
            "			connecterTypeID, 						(CASE WHEN connecterTypeID IS NOT NULL THEN fun_getConnectorTypeNameByID(connecterTypeID) ELSE NULL END) connecterType,  \n" +
            "			MIN(feasibilityWithAllocation) feasibilityWithAllocation,	SUM(Shortage) shortageLine,  \n" +
            "			MIN(feasibilityWithAvailableAndAllocatedStock) feasibilityWithAvailableAndAllocatedStock,  \n" +
            "			SUM(ShortageWithAvailableQty) shortageWithAvailableQty,     	SUM(shortageForInputQty) shortageForInputQty,  \n" +
            "			0 releasedQty,		vKitQty pendingQty,			0 releasePercentage,		COUNT(1) totalLine  \n" +
            "	FROM    	(  \n" +
            "				SELECT 	mountingTypeID, 		connecterTypeID, 		availableStock,  \n" +
            "					IFNULL(feasibilityWithAllocation, 0) feasibilityWithAllocation,  \n" +
            "					CASE WHEN (shortagePerBuild > 0) THEN 1 ELSE 0 END Shortage,  \n" +
            "					IFNULL(feasibilityWithAvailableAndAllocatedStock, 0) feasibilityWithAvailableAndAllocatedStock,  \n" +
            "					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < vKitQty) THEN 1 ELSE 0 END ShortageWithAvailableQty,  \n" +
            "					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < pInputQty) THEN 1 ELSE 0 END shortageForInputQty  \n" +
            "				FROM 	tempFeasibilityDetail t  \n" +
            "			) AS feasibilityDet  \n" +
            "	GROUP BY 	mountingTypeID, connecterTypeID  \n" +
            "	ORDER BY 	mountingType;  \n" +
            "  \n" +
            "    RETURN vKitQty;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 28-03-2022 *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetKitReleasePlanDetail`;  \n" +
            "CREATE PROCEDURE `Sproc_GetKitReleasePlanDetail`(  \n" +
            "	IN pRefSalesOrderDetID INT,  \n" +
            "	IN pAssyID INT,  \n" +
            "	IN pSubAssyID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE vSubAssyQPA DECIMAL(18,8);  \n" +
            "	DECLARE vMismatchItem DECIMAL(18,8);  \n" +
            "	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);  \n" +
            "    DECLARE vKitQty DECIMAL(18,8);  \n" +
            "	DECLARE vCustomerId INT;  \n" +
            "  \n" +
            "    SELECT 		customerID  ,kitQty  \n" +
            "	INTO		vCustomerId ,vKitQty  \n" +
            "	FROM 		salesorderdet sd  \n" +
            "	INNER JOIN 	salesordermst s ON s.id = sd.refSalesOrderID  \n" +
            "	WHERE 		sd.id = pRefSalesOrderDetID;  \n" +
            "  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingTypeWiseKitDet  \n" +
            "	(  \n" +
            "		mountingTypeID INT(11),  \n" +
            "		mountingType VARCHAR(50),  \n" +
            "		connecterTypeID INT(11),  \n" +
            "		connecterType VARCHAR(50),  \n" +
            "		feasibilityWithAllocation DECIMAL(18,8),  \n" +
            "		shortageLine DECIMAL(18,8),  \n" +
            "		feasibilityWithAvailableAndAllocatedStock DECIMAL(18,8),  \n" +
            "		shortageWithAvailableQty DECIMAL(18,8),  \n" +
            "		shortageForInputQty DECIMAL(18,8),  \n" +
            "		releasedQty DECIMAL(18,8),  \n" +
            "		pendingQty DECIMAL(18,8),  \n" +
            "		releasePercentage DECIMAL(18,8),  \n" +
            "		totalLine INT  \n" +
            "	);  \n" +
            "  \n" +
            "	/* Get assembly parts detail from kit_allocation_lineitems and kit_allocation_lineitems_alternatepart table */  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
            "	SELECT 	k.id,					kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
            "		kl.mountingTypeID, 			kl.connecterTypeID, 		kl.consolidatedMfgPNIDs, 		k.numOfPosition,  \n" +
            "		(  \n" +
            "			CASE  \n" +
            "				WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
            "					(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
            "				ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
            "			END  \n" +
            "		) AS kitQPAWithDNP,  \n" +
            "		kl.uomMismatchedStep,  \n" +
            "		k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
            "	FROM 	(  \n" +
            "			SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
            "					(  \n" +
            "						CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) # Matched Mounting Type  \n" +
            "								THEN  MIN(c.mountingTypeID)  \n" +
            "							WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 # Mismatched with Approval Mounting Type  \n" +
            "								THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))  \n" +
            "							ELSE  -1  \n" +
            "						END  \n" +
            "					) mountingTypeID,  \n" +
            "					IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
            "					c.packingAliasParts consolidatedMfgPNIDs,  \n" +
            "					MIN(kal.uomMismatchedStep) uomMismatchedStep    # Zero indicate to part value does not match with BOM UOM  \n" +
            "			FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
            "			JOIN 		vu_component_packingalias c ON kal.mfgPNID = c.refComponentID  \n" +
            "			WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
            "			AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
            "			AND 		kal.isDeleted = 0  \n" +
            "			GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem, c.packingAliasParts  \n" +
            "	) AS kl  \n" +
            "	INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0;  \n" +
            "	/* Get available and allocated stock for selected assembly*/  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Stock_Det;  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Stock_Det AS  \n" +
            "	SELECT  	r.consolidatedMfgPNIDs, 	r.id,  \n" +
            "			IFNULL(ks.allocatedUnit, 0) allocatedunit,  \n" +
            "			IFNULL(ks.allocatedPins,0) allocatedPin,  \n" +
            "			SUM(IFNULL(fun_convertUOM(v.uom, IFNULL(ks.allocatedUOM, r.uomID), IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)),0)) availableStock,  \n" +
            "			SUM((FLOOR(IFNULL(v.noOfPosition, 0)/IFNULL(r.numOfPosition, 0)) * IFNULL(r.numOfPosition, 0)) * IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)) availableStockInPin  \n" +
            "	FROM 		temp_Kit_Consolidate_Detail r  \n" +
            "	LEFT JOIN 	vu_kit_allocation_summary ks ON r.refsalesORderDetid = ks.refsalesOrderDetId  \n" +
            "                    AND ks.assyID =  pAssyID  \n" +
            "					AND FIND_IN_SET(ks.refBOMLineID, r.consolidatedLineItemIDs)  \n" +
            "	LEFT JOIN 	vu_deducted_allocation_available_Stock v ON FIND_IN_SET(v.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",consolidatedMfgPNIDs) ELSE consolidatedMfgPNIDs END))  \n" +
            "	WHERE 		r.isNotRequiredKitAllocation != 1  \n" +
            "	GROUP BY 	r.consolidatedMfgPNIDs, r.id, ks.allocatedunit, ks.allocatedPins;  \n" +
            "  \n" +
            "    /* Calculate kit line total & shortage & feasibility with allocation */  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_calculateshortageLinperPlan;  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_calculateshortageLinperPlan AS  \n" +
            "	SELECT 	a.salesorderPlanId,		a.salesOrderdetid,		a.kitreleaseQty,	a.refAssyId,	a.calculatedKitQty,  \n" +
            "			count(1) TotalLine ,  \n" +
            "			concat(FLOOR(sum(CASE WHEN (feasibilityWithAllocation - calculatedKitQty) >= 0 then 0 else 1 end) ), '/',   count(1)) shortageLines,  \n" +
            "			min(feasibilityWithAllocation) feasibilityWithAllocation  \n" +
            "	FROM  \n" +
            "	(  \n" +
            "			SELECT 	b.id salesorderPlanId,	r.id kitallocationlineitemid,	t.id,b.salesOrderdetid,  \n" +
            "					b.refAssyID,			b.SubAssyId,b.kitReleaseQty,	r.kitQPAWithDNP qpa,  \n" +
            "                    t.allocatedUnit,  		b.calculatedKitQty,				t.allocatedPin,  \n" +
            "                    t.availableStock,		t.availableStockInPin,          r.mountingTypeID,  \n" +
            "                    (CASE WHEN r.connecterTypeID = -2 THEN r.connecterTypeID ELSE NULL END) connecterTypeID,  \n" +
            "					(  \n" +
            "						CASE  \n" +
            "							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
            "								(t.allocatedUnit/r.kitQPAWithDNP)  \n" +
            "							ELSE (IFNULL(t.allocatedPin, 0) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
            "						END  \n" +
            "					) feasibilityWithAllocation,  \n" +
            "					(  \n" +
            "						CASE  \n" +
            "							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
            "								((t.availableStock + t.allocatedUnit)/r.kitQPAWithDNP)  \n" +
            "							ELSE ((IFNULL(t.allocatedPin, 0) + IFNULL(t.availableStockInPin, 0)) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
            "						END  \n" +
            "					) feasibilityWithAvailableAndAllocatedStock,  \n" +
            "					(CASE  \n" +
            "						WHEN r.uomMismatchedStep = 0 THEN 0  \n" +
            "						ELSE  \n" +
            "							CASE  \n" +
            "								WHEN r.connecterTypeID = -2 THEN  \n" +
            "									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty* IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0)) < 0)  \n" +
            "											THEN 0  \n" +
            "											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0))  \n" +
            "									END)  \n" +
            "								ELSE  \n" +
            "									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0)) < 0)  \n" +
            "											THEN 0  \n" +
            "											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0))  \n" +
            "									END)  \n" +
            "							END  \n" +
            "					END) shortagePerBuild  \n" +
            "			FROM  \n" +
            "				(  \n" +
            "					SELECT 	k.id,		kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
            "							kl.mountingTypeID, 						kl.connecterTypeID,  \n" +
            "                            kl.consolidatedMfgPNIDs, 				k.numOfPosition,  \n" +
            "							(  \n" +
            "								CASE  \n" +
            "									WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
            "										(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
            "									ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
            "								END  \n" +
            "							) AS kitQPAWithDNP,  \n" +
            "							kl.uomMismatchedStep,          k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
            "					FROM 	(  \n" +
            "								SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
            "											(  \n" +
            "												CASE 	WHEN MIN(ca.mountingTypeID) = MAX(ca.mountingTypeID) /* Matched Mounting Type */  \n" +
            "														THEN  MIN(ca.mountingTypeID)  \n" +
            "													WHEN MIN(ca.mountingTypeID) !=  MAX(ca.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
            "														THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN ca.mountingTypeID ELSE NULL END))  \n" +
            "													ELSE  -1  \n" +
            "												END  \n" +
            "											) mountingTypeID,  \n" +
            "											IFNULL(MAX(ca.connecterTypeID), -1) connecterTypeID,  \n" +
            "											GROUP_CONCAT(IFNULL(da.refComponentID, c.id)) consolidatedMfgPNIDs,  \n" +
            "											MIN(kal.uomMismatchedStep) uomMismatchedStep    /* Zero indicate to part value does not match with BOM UOM */  \n" +
            "									FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
            "                                    JOIN component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1 AND c.isDeleted = 0  \n" +
            "									LEFT JOIN component_attributes ca ON c.id = ca.refComponentID  AND ca.isDeleted = 0  \n" +
            "									LEFT JOIN component_attributes da ON ca.packagingGroupid = da.packagingGroupid AND da.isDeleted = 0  \n" +
            "									WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
            "									AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
            "									AND 		kal.isDeleted = 0  \n" +
            "									AND			c.isDeleted = 0  \n" +
            "									GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
            "							) AS kl  \n" +
            "							INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0  \n" +
            "				) r  \n" +
            "				INNER JOIN (  \n" +
            "							SELECT 	id,		salesOrderdetid,	refAssyID,	SubAssyId,	kitReleaseQty,  \n" +
            "									SUM(kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
            "							FROM salesorder_plan_detailsmst where salesorderdetid= pRefSalesOrderDetID  AND isDeleted = 0  \n" +
            "                            ) b  \n" +
            "				INNER JOIN 	temp_Kit_Stock_Det t ON r.id = t.id  \n" +
            "		) a  \n" +
            "		GROUP BY  salesorderPlanId,salesOrderdetid,kitreleaseQty,refAssyId,calculatedKitQty;  \n" +
            "  \n" +
            "	SELECT 	id,  \n" +
            "			plannKitNumber,  \n" +
            "			poQty,  \n" +
            "			poDueDate,  \n" +
            "			materialDockDate,  \n" +
            "			b.kitReleaseQty,  \n" +
            "			kitReleaseDate,  \n" +
            "			feasibilityWithAllocatedQty AS currentBuildFeasibility,  \n" +
            "			(CASE WHEN buildFeasibility > 0 THEN buildFeasibility ELSE 0 END) AS buildFeasibility,  \n" +
            "			(CASE WHEN (buildFeasibility > 0 AND buildFeasibility > b.kitReleaseQty) THEN 0 WHEN (buildFeasibility > 0) THEN (b.kitReleaseQty - buildFeasibility) ELSE b.kitReleaseQty END) AS Shortage,  \n" +
            "            c.shortageLines,  \n" +
            "			b.calculatedKitQty,  \n" +
            "			actualKitReleaseDate,  \n" +
            "			releaseTimeFeasibility,  \n" +
            "			releasedByName,  \n" +
            "			mfrLeadTime,  \n" +
            "			kitStatus,  \n" +
            "			RushJob,  \n" +
            "			FUNC_MISMATCHITEMFORKIT(b.salesOrderDetID, IFNULL(b.subAssyID,b.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
            "			fun_getWorkorderNumberByID(woID) workorderNumber,  \n" +
            "			releasedNote,  \n" +
            "			releaseKitNumber,  \n" +
            "			subAssyReleaseCount,  \n" +
            "			subAssyReleasedCount,  \n" +
            "			woID,  \n" +
            "			kitReturnDate,  \n" +
            "			kitReturnStatus,  \n" +
            "			woStatusID,  \n" +
            "            woSubStatusID,  \n" +
            "            IF(pSubAssyID IS NULL, 0, 1) AS isSubAssembly  \n" +
            "	FROM  \n" +
            "			(  \n" +
            "				SELECT *,  \n" +
            "					(  \n" +
            "						CASE  \n" +
            "							WHEN (calculatedKitQty >  feasibilityWithAllocatedQty) THEN  (kitReleaseQty - (calculatedKitQty - feasibilityWithAllocatedQty))  \n" +
            "							ELSE kitReleaseQty  \n" +
            "						END  \n" +
            "					) buildFeasibility  \n" +
            "				FROM	(  \n" +
            "						SELECT 	r.*,  \n" +
            "							SUM(r.kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
            "						FROM 	vu_release_plan_detail r  \n" +
            "						WHERE 	r.salesOrderDetID = pRefSalesOrderDetID  \n" +
            "								AND r.refAssyId = pAssyID  \n" +
            "								AND (  \n" +
            "				 					CASE  \n" +
            "										WHEN pSubAssyID IS NOT NULL THEN r.subAssyID = pSubAssyID  \n" +
            "										ELSE r.subAssyID IS NULL  \n" +
            "									END  \n" +
            "								)  \n" +
            "						ORDER BY r.salesOrderDetID, r.refAssyId, r.subAssyID, r.refPlanId DESC, r.id  \n" +
            "					)  \n" +
            "				AS a  \n" +
            "	 		)  \n" +
            "	AS b   inner join     temp_Kit_calculateshortageLinperPlan c on  b.id =  c.salesorderplanid  \n" +
            "	ORDER BY poDueDate, plannKitNumber ASC;  \n" +
            "  \n" +
            "	SELECT MIN(promisedShipDate) promisedShipDate FROM salesshippingmst WHERE  sDetID = pRefSalesOrderDetID and isdeleted = 0 ;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 28-03-2022 *********************************** */
            "DROP function IF EXISTS `fun_getConsolidateLineMFGPNWithPackagingforkit`;  \n" +
            "CREATE FUNCTION `fun_getConsolidateLineMFGPNWithPackagingforkit`(  \n" +
            "  pIsPackaging TINYINT,  \n" +
            "  PrefSalesOrderDetid INT,  \n" +
            "  pCustomerID INT  \n" +
            "	) RETURNS longtext CHARSET utf8mb4  \n" +
            "BEGIN  \n" +
            "	DECLARE result TEXT;  \n" +
            "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
            "  \n" +
            "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
            "  \n" +
            "		SELECT  CONCAT('(SELECT  \n" +
            "			GROUP_CONCAT(  \n" +
            "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
            "				a.RoHSStatusID,''@@@'',  \n" +
            "				IFNULL(a.name,\"\"),''@@@'',  \n" +
            "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
            "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
            "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
            "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
            "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
            "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
            "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
            "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
            "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
            "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
            "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
            "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
            "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
            "				a.mfgCode,''@@@'',  \n" +
            "				a.mfgPNID,''@@@'',  \n" +
            "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
            "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
            "                IFNULL(a.mismatchFunctionalCategoryStep,0),''@@@'' ,  \n" +
            "                IFNULL(a.leadTime,0)  \n" +
            "                SEPARATOR \"', v_GroupConcatSeparator ,'\" )  \n" +
            "			FROM  \n" +
            "			( select z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
            "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
            "                        approvedMountingType,  \n" +
            "                        mismatchMountingTypeStep,  \n" +
            "                        mismatchFunctionalCategoryStep,  \n" +
            "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
            "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
            "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
            "                        z.feature, z.mfgpn,z.isDocumentUpload,  \n" +
            "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
            "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
            "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
            "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
            "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
            "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
            "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep,  \n" +
            "                         z.leadTime  \n" +
            "						  from  \n" +
            "							(SELECT IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
            "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
            "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
            "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
            "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
            "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
            "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
            "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
            "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
            "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
            "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
            "									ELSE    /*Packaging Alias*/  \n" +
            "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
            "									END AS restrictUsePermanentlyStep,  \n" +
            "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
            "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
            "									ELSE  \n" +
            "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
            "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
            "									ELSE     /*Packaging Alias*/  \n" +
            "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
            "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
            "									ELSE  \n" +
            "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseExcludingAliasStep,  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
            "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
            "									ELSE  \n" +
            "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
            "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
            "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
            "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
            "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload,  \n" +
            "                                    IFNULL(d.leadTime,c.leadTime) AS leadTime  \n" +
            "									FROM kit_allocation_consolidate_line_alternatepart  al  \n" +
            " 									JOIN kit_allocation_consolidate_line_detail l ON  l.id = al.kitConsolidateID  \n" +
            "									JOIN vu_component_mpn c ON al.mfgPNID = c.id  \n" +
            "									LEFT JOIN vu_component_mpn d ON c.packagingGroupid = d.packagingGroupid  \n" +
            "									AND NOT EXISTS ( SELECT 1  FROM  kit_allocation_consolidate_line_alternatepart x  \n" +
            " 													WHERE  x.kitConsolidateID  =  al.kitConsolidateID  \n" +
            " 															 and x.mfgpnid = d.id  and x.isdeleted = 0 and al.isdeleted = 0  \n" +
            " 															 and d.id != c.id)  \n" +
            "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID = ',pCustomerID,' AND ccl.isDeleted = 0  \n" +
            "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID = ',pCustomerID,' AND ccld.isDeleted = 0  \n" +
            "									WHERE l.refSalesOrderDetid = ', PrefSalesOrderDetid,'  \n" +
            "									AND l.id = a.id  AND  \n" +
            "                                    al.isDeleted = 0 AND c.isGoodPart = 1',  \n" +
            "									CASE WHEN (pIsPackaging = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
            "							) z group by  z.mfgPNID ,z.mfgCodeID, z.mfgPNDescription, z.PIDCode, z.RoHSStatusID, z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload, z.leadTime  \n" +
            "					) a  \n" +
            "  		) AS mfgPN')  INTO @result;  \n" +
            "	SET result = @result;  \n" +
            "	RETURN result;  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 28-03-2022 *********************************** */
            "DROP function IF EXISTS `fun_getKitConsolidateLineMFGPNWithPackaging`;  \n" +
            "CREATE FUNCTION `fun_getKitConsolidateLineMFGPNWithPackaging`(  \n" +
            "  pIsPackaging TINYINT,  \n" +
            "  PrefSalesOrderDetid INT,  \n" +
            "  pCustomerID INT  \n" +
            "	) RETURNS longtext CHARSET utf8mb4  \n" +
            "BEGIN  \n" +
            "	DECLARE result TEXT;  \n" +
            "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
            "  \n" +
            "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
            "  \n" +
            "		SELECT  CONCAT('(SELECT  \n" +
            "			GROUP_CONCAT(  \n" +
            "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
            "				a.RoHSStatusID,''@@@'',  \n" +
            "				IFNULL(a.name,\"\"),''@@@'',  \n" +
            "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
            "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
            "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
            "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
            "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
            "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
            "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
            "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
            "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
            "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
            "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
            "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
            "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
            "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
            "				a.mfgCode,''@@@'',  \n" +
            "				a.mfgPNID,''@@@'',  \n" +
            "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
            "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
            "                IFNULL(a.mismatchFunctionalCategoryStep,0)  \n" +
            "                SEPARATOR \"', v_GroupConcatSeparator ,'\" )  \n" +
            "			FROM  \n" +
            "			( select z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
            "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
            "                        approvedMountingType,  \n" +
            "                        mismatchMountingTypeStep,  \n" +
            "                        mismatchFunctionalCategoryStep,  \n" +
            "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
            "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
            "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
            "                        z.feature, z.mfgpn,z.isDocumentUpload,  \n" +
            "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
            "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
            "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
            "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
            "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
            "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
            "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
            "						  from  \n" +
            "							(SELECT IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
            "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
            "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
            "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
            "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
            "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
            "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
            "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
            "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
            "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
            "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
            "									ELSE    /*Packaging Alias*/  \n" +
            "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
            "									END AS restrictUsePermanentlyStep,  \n" +
            "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
            "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
            "									ELSE  \n" +
            "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
            "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
            "									ELSE     /*Packaging Alias*/  \n" +
            "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
            "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
            "									ELSE  \n" +
            "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseExcludingAliasStep,  \n" +
            "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
            "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
            "									ELSE  \n" +
            "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
            "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
            "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
            "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
            "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
            "									FROM kit_allocation_lineitems_alternatepart  al  \n" +
            "									JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
            "									JOIN vu_component_mpn c ON al.mfgPNID = c.id  \n" +
            "									LEFT JOIN vu_component_mpn d ON c.packagingGroupid = d.packagingGroupid  \n" +
            "									and  not exists ( select 1  from  kit_allocation_lineitems_alternatepart x  \n" +
            "													where  x.refRfqLineitem  =  al.refRfqLineitem  \n" +
            "															 and x.mfgpnid = d.id  \n" +
            "															 and d.id != c.id and x.isdeleted = 0)  \n" +
            "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID = ',pCustomerID,' AND ccl.isDeleted = 0  \n" +
            "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID = ',pCustomerID,' AND ccld.isDeleted = 0  \n" +
            "									WHERE l.refSalesOrderDetid = ', PrefSalesOrderDetid,'  \n" +
            "									AND l.refRfqLineitem = a.rfqLineItemsId AND al.isDeleted = 0 AND c.isGoodPart = 1',  \n" +
            "									CASE WHEN (pIsPackaging = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
            "							) z group by  z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload  \n" +
            "					) a  \n" +
            "  		) AS mfgPN')  INTO @result;  \n" +
            "	SET result = @result;  \n" +
            "	RETURN result;  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 28-03-2022 *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetCustConsignMismatchKitAllocationDetails`;  \n" +
            "CREATE PROCEDURE `Sproc_GetCustConsignMismatchKitAllocationDetails`(  \n" +
            "	IN pRefSalesOrderDetID INT,  \n" +
            "    IN pAssyID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "  \n" +
            "	SELECT 		a.id, 			refSalesOrderDetID, 			partID, 		lineID,  \n" +
            "							rfqLineItemsId,									mfgPN,  \n" +
            "							a.isPurchase,	mfgPNIdsWithPackaging,			custPNID,       custPN,  \n" +
            "							custPIDCode, 	custIsCustom, 					cpnRoHsIcon, 	cpnRoHsName  \n" +
            "			FROM  \n" +
            "			(  \n" +
            "					SELECT 	k.id,				k.refSalesOrderDetID, 		k.partID,		k.lineID,  \n" +
            "							k.isPurchase, 		k.refRfqLineitem AS rfqLineItemsId,  \n" +
            "							k.custPNID, 		k.custPN,  \n" +
            "							FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,  \n" +
            "							cpnCom.isCustom custIsCustom,  \n" +
            "							FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
            "							FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName  \n" +
            "				FROM 	kit_allocation_lineitems k  \n" +
            "				LEFT JOIN component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
            "				INNER JOIN 	rfq_lineitems rl ON rl.id = k.refRfqLineitem AND rl.isDeleted = 0  \n" +
            "				WHERE k.refSalesOrderDetID = pRefSalesOrderDetID AND k.partID = pAssyID AND k.isDeleted = 0 AND rl.isPurchase <> k.isPurchase  \n" +
            "			) AS a  INNER JOIN  \n" +
            "						(  \n" +
            "							SELECT  \n" +
            "										a.id,	 a.refRfqLineitem,  \n" +
            "										GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging,  \n" +
            "										GROUP_CONCAT(  \n" +
            "													IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),'@@@',  \n" +
            "													a.RoHSStatusID,'@@@',  \n" +
            "													IFNULL(a.name,\"\"),'@@@',  \n" +
            "													IFNULL(a.rohsIcon,\"\"),'@@@',  \n" +
            "													IFNULL(a.isCustom,\"\"),'@@@',  \n" +
            "													REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),'@@@',  \n" +
            "													IFNULL(a.partStatusName,\"\"),'@@@',  \n" +
            "													REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),'@@@',  \n" +
            "													REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),'@@@',  \n" +
            "													IFNULL(a.restrictUseInBOMStep,0) ,'@@@',  \n" +
            "													IFNULL(a.restrictUseInBOMWithPermissionStep,0),'@@@',  \n" +
            "													IFNULL(a.restrictUsePermanentlyStep,1) ,'@@@',  \n" +
            "													IFNULL(a.restrictUseWithPermissionStep,1),'@@@',  \n" +
            "													IFNULL(a.restrictUseInBOMExcludingAliasStep,0),'@@@',  \n" +
            "													IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),'@@@',  \n" +
            "													IFNULL(a.restrictUseExcludingAliasStep,1),'@@@',  \n" +
            "													IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),'@@@','','@@@',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),'@@@','','@@@',  \n" +
            "													IFNULL(a.approvedMountingType,0),'@@@',  \n" +
            "													IFNULL(a.mismatchMountingTypeStep,1),'@@@' ,  \n" +
            "													REPLACE(a.mfgPN,\",\",\"***\"),'@@@',  \n" +
            "													a.mfgCode,'@@@',  \n" +
            "													a.mfgPNID,'@@@',  \n" +
            "													IFNULL(a.isDocumentUpload,0),'@@@' ,  \n" +
            "													IFNULL(a.custAssyPN,0),'@@@' ,  \n" +
            "													IFNULL(a.mismatchFunctionalCategoryStep,0) ,'@@@' ,  \n" +
            "													IFNULL(a.leadTime,0)  \n" +
            "													SEPARATOR \"###\") mfgpn  \n" +
            "							FROM  \n" +
            "								(  \n" +
            "									SELECT z.id,	z.refRfqLineitem,	z.mfgPNID,		z.mfgPNDescription,  \n" +
            "													PIDCode,			RoHSStatusID, 	fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,  \n" +
            "													fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
            "													fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
            "													approvedMountingType,  \n" +
            "													mismatchMountingTypeStep,  \n" +
            "													mismatchFunctionalCategoryStep,  \n" +
            "													fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
            "													fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
            "													fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
            "													z.feature, z.mfgpn,z.isDocumentUpload,  z.leadTime,  \n" +
            "													 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
            "													 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
            "													 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
            "													 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
            "													 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
            "													 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "													 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
            "													 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
            "									FROM  \n" +
            "										(  \n" +
            "											SELECT 	l.id,		l.refRfqLineitem,  \n" +
            "													IFNULL(d.id,c.id) AS mfgPNID,  \n" +
            "													IFNULL(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
            "													IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
            "													IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
            "													IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
            "													IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
            "													IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
            "													IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
            "													IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
            "												   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
            "														IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
            "													ELSE    /*Packaging Alias*/  \n" +
            "														CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
            "													END AS restrictUsePermanentlyStep,  \n" +
            "													IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
            "													CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
            "															IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
            "													ELSE  \n" +
            "														case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "													END AS restrictUseInBOMExcludingAliasStep,  \n" +
            "													CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
            "														IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
            "													ELSE     /*Packaging Alias*/  \n" +
            "														case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "													END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "													CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
            "														IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
            "													ELSE  \n" +
            "														case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "													END AS restrictUseExcludingAliasStep,  \n" +
            "													CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
            "														 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
            "													ELSE  \n" +
            "													case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "													END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
            "													IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
            "													IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
            "													IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
            "													IFNULL(d.leadTime,c.leadTime) AS leadTime,  \n" +
            "													IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
            "										FROM kit_allocation_lineitems_alternatepart al  \n" +
            "										JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
            "										JOIN vu_component_mpn c ON al.mfgPNID = c.id  \n" +
            "										LEFT JOIN vu_component_mpn d ON c.packagingGroupid = d.packagingGroupid  \n" +
            "										AND NOT EXISTS  \n" +
            "											( SELECT 1  FROM  kit_allocation_lineitems_alternatepart x  WHERE  x.refRfqLineitem = al.refRfqLineitem  AND x.mfgpnid = d.id  \n" +
            "														AND d.id != c.id and x.isdeleted = 0  \n" +
            "											)  \n" +
            "											LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID = pAssyID AND ccl.isDeleted = 0  \n" +
            "											LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID = pAssyID AND ccld.isDeleted = 0  \n" +
            "											WHERE l.refSalesOrderDetid = pRefSalesOrderDetID  AND al.isDeleted = 0 AND c.isGoodPart = 1  AND c.id = IFNULL(d.id,c.id)  \n" +
            "				) z GROUP BY z.id,z.refRfqLineitem , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload, z.leadTime  \n" +
            "				) a GROUP BY a.id, a.refRfqLineitem  \n" +
            "				) AS mfgpartdetail  on a.id = mfgpartdetail.id  \n" +
            "		GROUP BY 	id, 				refSalesOrderDetID, 		partID, 				lineID,  \n" +
            "					mfgPN,  			mfgPNIdsWithPackaging,		custPNID,               custPN,  \n" +
            "					custPIDCode, 		custIsCustom,  				rfqLineItemsId;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 28-03-2022 *********************************** */
            "DROP procedure IF EXISTS `Sproc_CreateConsolidateDataForPart`;  \n" +
            "CREATE PROCEDURE `Sproc_CreateConsolidateDataForPart`(  \n" +
            "	IN prfqAssyIDORrefSalesOrderdetID INT,  \n" +
            "    IN ppartID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "DECLARE v_GroupConcatSeparator text;  \n" +
            "	SET SESSION group_concat_max_len = 500000;  \n" +
            "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
            "       -- Create leavel wise assembly BOM data  \n" +
            "        DROP TEMPORARY TABLE IF EXISTS leveldata;  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS leveldata AS  \n" +
            "		WITH RECURSIVE cte AS  \n" +
            "		(  \n" +
            "			(  \n" +
            "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,1 AS LEVEL, com.category,rla.rfqLineItemsID,  \n" +
            "				rl.refDesig,IFNULL(rl.qpa,0) AS qpacount, IFNULL(rl.qpa,0) AS kitqpacount, IFNULL(rl.dnpQty,0) dnpQty, IFNULL(rl.dnpQty,0) kitdnpQty,  \n" +
            "                rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,  \n" +
            "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS qpa1,  \n" +
            "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS kitqpa1,  \n" +
            "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS dnpQPA1,  \n" +
            "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS kitdnpQPA1,  \n" +
            "				IFNULL(rl.refDesigCount,0) refDesigCount, IFNULL(rl.refDesigCount,0) kitrefDesigCount, IFNULL(rl.dnpDesigCount,0) dnpDesigCount, IFNULL(rl.dnpDesigCount,0) kitdnpDesigCount, rl.qpaDesignatorStep, rl.custPNID,  \n" +
            "				IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep,IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep, IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
            "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,  \n" +
            "				/*  \n" +
            "				CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',  \n" +
            "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',  \n" +
            "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) AS part,  \n" +
            "				*/  \n" +
            "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,  \n" +
            "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,  \n" +
            "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
            "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,  \n" +
            "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,  \n" +
            "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,  \n" +
            "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,  \n" +
            "				/* we not required this in functionaly this will be used for check in detail  \n" +
            "				concat(rla.mfgCode,' | ',rla.mfgPN,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',  \n" +
            "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',  \n" +
            "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) as partcode,  \n" +
            "				*/  \n" +
            "				rl.isInstall, rl.isPurchase,rl.lineID,rl.numOfPosition, prfqAssyIDORrefSalesOrderdetID AS rfqAssyIDORrefSalesOrderdetID,  \n" +
            "				rl.uomID, comp.PIDCode as PIDCode, comp.mfgPN as AssyPN, comp.custAssyPN as assyCustPN, comp.RoHSStatusID as AssyRoHSID, com.liveVersion, rl.isNotRequiredKitAllocation,  \n" +
            "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN  \n" +
            "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
            "				ELSE '' END) AS notRequiredKitAllocationReason,  \n" +
            "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep, com.connecterTypeID  \n" +
            "				FROM  rfq_lineitems rl  \n" +
            "				INNER JOIN rfq_lineitems_alternatepart rla ON rla.rfqLineItemsID = rl.id AND rl.isDeleted = 0  \n" +
            "				INNER JOIN vu_component_mpn com ON com.id = rla.mfgPNID and com.isGoodPart <> 2  \n" +
            "				INNER JOIN component comp ON comp.id = rl.partID  \n" +
            "				WHERE rl.partId = ppartID  AND ifnull(rla.mfgGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodPartStep,1) = 1 and ifnull(rla.distGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodDistPartStep,1) = 1 AND rla.isDeleted = 0  \n" +
            "			)  \n" +
            "			UNION ALL  \n" +
            "			(  \n" +
            "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,cte.level+1 AS LEVEL, com.category,rla.rfqLineItemsID,  \n" +
            "				rl.refDesig,  \n" +
            "				(  \n" +
            "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "					END) * IFNULL(rl.qpa,0)  \n" +
            "				) AS qpacount,  \n" +
            "                (  \n" +
            "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							0  \n" +
            "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "						ELSE  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "					END) * IFNULL(rl.qpa,0)  \n" +
            "				) AS kitqpacount,  \n" +
            "				(  \n" +
            "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "					END) * IFNULL(rl.dnpQty,0)  \n" +
            "				) AS dnpQty,  \n" +
            "                (  \n" +
            "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							0  \n" +
            "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "						ELSE  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "					END) * IFNULL(rl.dnpQty,0)  \n" +
            "				) AS kitdnpQty,  \n" +
            "				rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,  \n" +
            "				(  \n" +
            "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "					END)*  \n" +
            "					(CASE WHEN rl.uomID = -1 THEN  \n" +
            "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN  \n" +
            "								IFNULL(rl.refDesigCount,0)  \n" +
            "							ELSE IFNULL(rl.qpa,0)  \n" +
            "						END)  \n" +
            "						ELSE IFNULL(rl.qpa,0)  \n" +
            "					END)  \n" +
            "				) AS qpa1,  \n" +
            "                (  \n" +
            "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							0  \n" +
            "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "						ELSE  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "					END)*  \n" +
            "  (CASE WHEN rl.uomID = -1 THEN  \n" +
            "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END)  \n" +
            "					ELSE  \n" +
            "						IFNULL(rl.qpa,0)  \n" +
            "  END)  \n" +
            "				) AS kitqpa1,  \n" +
            "				(  \n" +
            "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "					END)*  \n" +
            "					(CASE WHEN rl.uomID = -1 THEN  \n" +
            "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN  \n" +
            "								IFNULL(rl.dnpDesigCount,0)  \n" +
            "							ELSE IFNULL(rl.dnpQty,0)  \n" +
            "						END)  \n" +
            "						ELSE IFNULL(rl.dnpQty,0)  \n" +
            "					END)  \n" +
            "				) AS dnpQPA1,  \n" +
            "                (  \n" +
            "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							0  \n" +
            "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "						ELSE  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "					END) *  \n" +
            "				(CASE WHEN rl.uomID = -1 THEN  \n" +
            "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END)  \n" +
            "					ELSE  \n" +
            "						IFNULL(rl.dnpQty,0)  \n" +
            "					END)  \n" +
            "				) AS kitdnpQPA1,  \n" +
            "				(  \n" +
            "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "					END) *  \n" +
            "					IFNULL(rl.refDesigCount,0)  \n" +
            "				) refDesigCount,  \n" +
            "                (  \n" +
            "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							0  \n" +
            "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "						ELSE  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "					END) * IFNULL(rl.refDesigCount,0)  \n" +
            "				) AS kitrefDesigCount,  \n" +
            "				(  \n" +
            "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "					END) *  \n" +
            "					IFNULL(rl.dnpDesigCount,0)  \n" +
            "				) dnpDesigCount,  \n" +
            "                (  \n" +
            "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							0  \n" +
            "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN  \n" +
            "							(cte.qpa1)  \n" +
            "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN  \n" +
            "							(cte.dnpQPA1)  \n" +
            "						ELSE  \n" +
            "							(cte.dnpQPA1 + cte.qpa1)  \n" +
            "					END) *  \n" +
            "					IFNULL(rl.dnpDesigCount,0)  \n" +
            "				) kitdnpDesigCount,  \n" +
            "				(CASE WHEN rl.qpaDesignatorStep != cte.qpaDesignatorStep THEN  \n" +
            "						1  \n" +
            "					ELSE rl.qpaDesignatorStep  \n" +
            "				END) AS qpaDesignatorStep ,  \n" +
            "				rl.custPNID, IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep, IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,  \n" +
            "				IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,  \n" +
            "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,  \n" +
            "				/* CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) ,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) ,' | ',  \n" +
            "				IFNULL(rla.restrictUseInBOMStep,0),' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0) ,' | ',IFNULL(rla.restrictUseExcludingAliasStep,1) ,' | ',IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) ,' | ',  \n" +
            "				IFNULL(rla.restrictUsePermanentlyStep,1) ,' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) AS part,*/  \n" +
            "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,  \n" +
            "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,  \n" +
            "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
            "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,  \n" +
            "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,  \n" +
            "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,  \n" +
            "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,  \n" +
            "				#com.packaginggroupID,  \n" +
            "				/* we not required this in functionaly this will be used for check in detail  \n" +
            "				concat(rla.mfgCode,' | ',rla.mfgPN,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',  \n" +
            "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',  \n" +
            "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) as partcode,  \n" +
            "				*/  \n" +
            "				rl.isInstall, rl.isPurchase,rl.lineID,rl.numOfPosition, prfqAssyIDORrefSalesOrderdetID AS rfqAssyIDORrefSalesOrderdetID,  \n" +
            "				rl.uomID, comp.PIDCode as PIDCode, comp.mfgPN as AssyPN, comp.custAssyPN as assyCustPN, comp.RoHSStatusID as AssyRoHSID, com.liveVersion,rl.isNotRequiredKitAllocation,  \n" +
            "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN  \n" +
            "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
            "				ELSE '' END) AS notRequiredKitAllocationReason,  \n" +
            "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep,com.connecterTypeID  \n" +
            "				FROM  rfq_lineitems rl  \n" +
            "				INNER JOIN rfq_lineitems_alternatepart rla ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
            "				INNER JOIN vu_component_mpn com ON com.id = rla.mfgPNID and com.isGoodPart <> 2  \n" +
            "				INNER JOIN component comp ON comp.id = rl.partID  \n" +
            "				JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID AND (cte.isPurchase = 1 OR (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P'))  \n" +
            "				WHERE ifnull(rla.mfgGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodPartStep,1) = 1 and ifnull(rla.distGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodDistPartStep,1) = 1 AND rla.isDeleted =0  \n" +
            "			)  \n" +
            "		)  \n" +
            "		SELECT cte.* FROM cte  \n" +
            "		ORDER BY lineItemID;  \n" +
            "  \n" +
            "	-- Create Temporary table for Alternate part with packaging alias grouping by lineitem  \n" +
            "		DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseAlternatepartwithPackagingGroup;  \n" +
            "		set @consolidateAlternatePartDetail = concat(\"CREATE TEMPORARY TABLE temp_LevleWiseAlternatepartwithPackagingGroup AS  \n" +
            "		SELECT a.rfqAssyIDORrefSalesOrderdetID, a.level, a.category, a.rfqlineitemsid, a.partid,  \n" +
            "        (CASE WHEN MIN(a.mountingTypeID) = MAX(a.mountingTypeID) THEN  /* Matched Mounting Type */  \n" +
            "					MIN(a.mountingTypeID)  \n" +
            "			WHEN MIN(a.mountingTypeID) !=  MAX(a.mountingTypeID)  AND MAX(approvedMountingType) = 1 THEN /*Mismatched with Approval Mounting Type */  \n" +
            "					MAX(approvedMountingTypeID)  \n" +
            "			ELSE  -1  /*-1 is TBD in case of Mismatched we need to display TBD mounting type*/ END) mountingtypeID,  \n" +
            "        (CASE WHEN MIN(a.partType) = MAX(a.partType) THEN  /* Matched funcitonal Type */  \n" +
            "					MIN(a.partType)  \n" +
            "			WHEN MIN(a.partType) !=  MAX(a.partType)  AND MAX(approvedMountingType) = 1 THEN /*Mismatched with Approval funcitonal Type */  \n" +
            "					MAX(approvedFunctionalTypeID)  \n" +
            "			ELSE  -1  /*-1 is TBD in case of Mismatched we need to display TBD funcitonal type*/ END) partType,  \n" +
            "        (CASE WHEN MIN(a.connecterTypeID) = MAX(a.connecterTypeID) THEN  /* Matched connector Type */  \n" +
            "			MIN(a.connecterTypeID)  \n" +
            "		ELSE  \n" +
            "			-1  /*-1 is TBD in case of Mismatched we need to display TBD connector type*/  \n" +
            "		END) AS connecterTypeID,  \n" +
            "        MIN(a.uomMismatchedStep) AS uomMismatchedStep, MIN(a.mismatchFunctionalCategoryStep) AS mismatchFunctionalCategoryStep , MIN(a.mismatchMountingTypeStep) AS mismatchMountingTypeStep,  \n" +
            "        GROUP_CONCAT(a.mfgPNID ORDER BY a.mfgPNID) AS mfgpnIDs,  \n" +
            "        GROUP_CONCAT(CONCAT(a.mfgCodeID, ' | ', a.mfgPNID, ' | ', a.restrictUseInBOMExcludingAliasStep, ' | ',  \n" +
            "						a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | ', a.restrictUseInBOMStep, ' | ',  \n" +
            "						a.restrictUseInBOMWithPermissionStep, ' | ', a.restrictUseExcludingAliasStep, ' | ',  \n" +
            "						a.restrictUseExcludingAliasWithPermissionStep, ' | ', a.restrictUsePermanentlyStep, ' | ',  \n" +
            "						a.restrictUseWithPermissionStep, ' | ', a.connecterTypeID, ' | ', a.partType, ' | ',a.mountingTypeID, ' | ',  \n" +
            "      a.approvedMountingType,' | ',  \n" +
            "      ifnull(a.custAssyPN,''),' | ',  \n" +
            "      ifnull(a.isCustom,0)  \n" +
            "      ) ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') Part,  \n" +
            "		GROUP_CONCAT(CONCAT('{ Level:', a.level, ' | AssyID:', a.AssyID, ' | Item:', TRIM(a.lineID) + 0, ' | PIDCode:', FUN_GETASSYPIDCODEBYID(a.mfgPNID),  \n" +
            "						' | mfgPNID: ', a.mfgPNID, ' | restrictUseInBOMExcludingAliasStep: ', a.restrictUseInBOMExcludingAliasStep,  \n" +
            "						' | restrictUseInBOMExcludingAliasWithPermissionStep:', a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | restrictUseInBOMStep:', a.restrictUseInBOMStep,  \n" +
            "						' | restrictUseInBOMWithPermissionStep:', a.restrictUseInBOMWithPermissionStep, ' | restrictUseExcludingAliasStep:', a.restrictUseExcludingAliasStep,  \n" +
            "						' | restrictUseExcludingAliasWithPermissionStep:', a.restrictUseExcludingAliasWithPermissionStep, ' | restrictUsePermanentlyStep:', a.restrictUsePermanentlyStep,  \n" +
            "						' | restrictUseWithPermissionStep:', a.restrictUseWithPermissionStep, ' |Connector Type:', fun_getConnectorTypeNameByID(a.connecterTypeID) ,  \n" +
            "      ' | Functional Type:', fun_getPartTypeNameByID(a.partType), ' | Mounting Type:', fun_getMountingTypeNameByID(a.mountingTypeID),  \n" +
            "      ' | Approved Mounting Type:', approvedMountingTypeName,  \n" +
            "      ' | Approved Functional Type:', approvedFunctionalTypeName,  \n" +
            "      ' | Custom PartNum:', ifnull(custAssyPN,''),  \n" +
            "      ' | isCustom:', ifnull(isCustom,''),  \n" +
            "      ' | AssyPN:', AssyPN,  \n" +
            "      ' | partID:', partID,  \n" +
            "      ' | assyCustPN:', assyCustPN,  \n" +
            "      ' | mfgPN:', mfgPN,  \n" +
            "      ' | RoHSName:', fun_getRoHSNameByID(RoHSStatusID),  \n" +
            "      ' | RoHSIcon:', fun_getRoHSIconByID(RoHSStatusID),  \n" +
            "      ' | AssyRoHSName:', fun_getRoHSNameByID(a.AssyRoHSID),  \n" +
            "      ' | AssyRoHSIcon:', fun_getRoHSIconByID(a.AssyRoHSID),  \n" +
            "      '}') ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') AS mfgPartsWithPackagings  \n" +
            "		FROM  \n" +
            "			(SELECT x.rfqAssyIDORrefSalesOrderdetID, x.level, x.category, x.rfqlineitemsid, x.partid, x.AssyID,x.AssyPN,x.assyCustPN,x.AssyRoHSID, x.lineid, x.mfgPNID, x.mfgCodeID, x.mfgPN,  \n" +
            "					x.PIDCode, x.RoHSStatusID, x.feature, x.isCustom, x.custAssyPN, x.partStatus, x.restrictUseInBOMStep, x.restrictUseInBOMWithPermissionStep,  \n" +
            "					x.restrictUsePermanentlyStep, x.restrictUseWithPermissionStep, x.restrictUseInBOMExcludingAliasStep, x.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "					x.restrictUseExcludingAliasStep, x.restrictUseExcludingAliasWithPermissionStep, x.isDocumentUpload, x.mountingTypeID, x.partType,  \n" +
            "  x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep,  \n" +
            "  x.approvedMountingTypeID, x.approvedMountingTypeName, x.approvedFunctionalTypeID,x.approvedFunctionalTypeName  \n" +
            "				FROM  \n" +
            "				(SELECT al.rfqAssyIDORrefSalesOrderdetID, al.level, al.category, al.rfqlineitemsid, al.lineid, al.partid, al.pidCode AS AssyID, al.AssyPN, al.assyCustPN, al.AssyRoHSID,  \n" +
            "						IFNULL(d.id, c.id) AS mfgPNID,  \n" +
            "						IF((c.id = IFNULL(d.id, c.id)), TRUE, FALSE) isBomLine, IFNULL(c.mfgcodeID, d.mfgCodeId) mfgCodeID, IFNULL(d.mfgPN, c.mfgPN) AS mfgPN,  \n" +
            "						IFNULL(d.PIDCode, c.PIDCode) AS PIDCode, IFNULL(d.RoHSStatusID, c.RoHSStatusID) AS RoHSStatusID, IFNULL(d.feature, c.feature) AS feature,  \n" +
            "						IFNULL(d.isCustom, c.isCustom) AS isCustom, IFNULL(d.custAssyPN, c.custAssyPN) AS custAssyPN, IFNULL(d.partStatus, d.partStatus) AS partStatus,  \n" +
            "						IFNULL(d.mountingTypeID,c.mountingTypeID) AS mountingTypeID, IFNULL(d.functionalCategoryID,c.functionalCategoryID) AS partType,  \n" +
            "      IFNULL(d.connecterTypeID,IFNULL(c.connecterTypeID,-1)) AS connecterTypeID,  \n" +
            "						al.uomMismatchedStep, al.mismatchFunctionalCategoryStep, al.approvedMountingType,  \n" +
            "      (CASE WHEN al.approvedMountingType = 1 THEN c.mountingTypeID ELSE -1 END) approvedMountingTypeID,  \n" +
            "      (CASE WHEN al.approvedMountingType = 1 THEN fun_getMountingTypeNameByID(c.mountingTypeID) ELSE '' END) approvedMountingTypeName,  \n" +
            "						(CASE WHEN al.approvedMountingType = 1 THEN c.functionalCategoryID ELSE -1 END) approvedFunctionalTypeID,  \n" +
            "      (CASE WHEN al.approvedMountingType = 1 THEN fun_getPartTypeNameByID(c.functionalCategoryID) ELSE '' END) approvedFunctionalTypeName,  \n" +
            "      al.mismatchMountingTypeStep,  \n" +
            "						IFNULL(al.restrictUseInBOMStep, 0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
            "						IFNULL(al.restrictUseInBOMWithPermissionStep, 0) restrictUseInBOMWithPermissionStep,  \n" +
            "						(CASE  \n" +
            "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part */  \n" +
            "								IFNULL(al.restrictUsePermanentlyStep, 1)  \n" +
            "							ELSE	 /*Packaging Alias*/  \n" +
            "								(CASE WHEN IFNULL(d.restrictUsePermanently, 0) = 1 THEN 0 ELSE 1 END)  /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
            "						END) AS restrictUsePermanentlyStep,  \n" +
            "						IFNULL(al.restrictUseWithPermissionStep, 1) restrictUseWithPermissionStep, 	/*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
            "						(CASE  \n" +
            "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN  /*BOM Part*/  \n" +
            "								IFNULL(al.restrictUseInBOMExcludingAliasStep, 0)	 /*Ui side 1 equal to restrict value*/  \n" +
            "							ELSE  \n" +
            "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END) /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "						END) AS restrictUseInBOMExcludingAliasStep,  \n" +
            "						(CASE  \n" +
            "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/  \n" +
            "								IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep, 0)  \n" +
            "							ELSE   /*Packaging Alias*/  \n" +
            "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "						END) AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "						(CASE  \n" +
            "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN 	/*Bom Part*/  \n" +
            "								IFNULL(al.restrictUseExcludingAliasStep, 1)		/*UI Side 0 equal to restrict*/  \n" +
            "							ELSE  \n" +
            "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "						END) AS restrictUseExcludingAliasStep,  \n" +
            "						(CASE  \n" +
            "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/  \n" +
            "								IFNULL(al.restrictUseExcludingAliasWithPermissionStep, 1)	 /*UI Side 0 equal to restrict*/  \n" +
            "							ELSE  \n" +
            "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
            "						END) AS restrictUseExcludingAliasWithPermissionStep,  \n" +
            "						IFNULL(ccl.isDocumentUpload, IFNULL(ccld.isDocumentUpload, 0)) AS isDocumentUpload  \n" +
            "				FROM  \n" +
            "					leveldata al  \n" +
            "				INNER JOIN vu_component_mpn c ON al.mfgPNID = c.id  \n" +
            "				LEFT JOIN vu_component_mpn d ON c.packagingGroupid = d.packagingGroupid and d.isGoodPart <> 2  \n" +
            "				LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id  \n" +
            "					AND ccl.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccl.isDeleted = 0  \n" +
            "				LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id  \n" +
            "					AND ccld.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccld.isDeleted = 0  \n" +
            "			) AS X  \n" +
            "			GROUP BY x.rfqAssyIDORrefSalesOrderdetID , x.level , x.category, x.rfqlineitemsid , x.partid , x.AssyID ,x.AssyPN,x.assyCustPN,x.AssyRoHSID, x.lineid , x.mfgPNID , x.mfgCodeID , x.mfgPN , x.PIDCode , x.RoHSStatusID , x.feature , x.isCustom , x.custAssyPN, x.partStatus , x.restrictUseInBOMStep , x.restrictUseInBOMWithPermissionStep ,  \n" +
            "			x.restrictUsePermanentlyStep , x.restrictUseWithPermissionStep , x.restrictUseInBOMExcludingAliasStep ,  \n" +
            "			x.restrictUseInBOMExcludingAliasWithPermissionStep , x.restrictUseExcludingAliasStep , x.restrictUseExcludingAliasWithPermissionStep , x.isDocumentUpload,  \n" +
            "			x.mountingTypeID, x.partType, x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep ,x.approvedMountingTypeID, x.approvedMountingTypeName,x.approvedFunctionalTypeID,x.approvedFunctionalTypeName  \n" +
            "		) a  \n" +
            "		GROUP BY a.rfqAssyIDORrefSalesOrderdetID , a.level , a.category, a.rfqlineitemsid , a.partid , a.lineid\");  \n" +
            "  \n" +
            "		PREPARE query2 FROM @consolidateAlternatePartDetail;  \n" +
            "		EXECUTE query2;  \n" +
            "		DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "	-- Create Temporary table for level wise lineitem detail  \n" +
            "        DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseLineItemDetail;  \n" +
            "		CREATE TEMPORARY TABLE temp_LevleWiseLineItemDetail AS  \n" +
            "		SELECT a.rfqAssyIDORrefSalesOrderdetID, a.level, a.rfqlineitemsid, a.partid, a.lineID, a.uomID, a.isInstall,  \n" +
            "				 a.numOfPosition,  \n" +
            "				(CASE WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 1  \n" +
            "					THEN (a.qpa1 + IFNULL(a.dnpQPA1, 0))  \n" +
            "				WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 0  \n" +
            "					THEN (IFNULL(a.dnpQPA1, 0))  \n" +
            "				WHEN (a.isBuyDNPQty = 'N' OR a.isBuyDNPQty = 'C') AND a.isPurchase = 1  \n" +
            "					THEN (a.qpa1)  \n" +
            "				ELSE (a.qpa1 + IFNULL(a.dnpQPA1, 0))  \n" +
            "				END) qpa,  /* QPA count for Pricing */  \n" +
            "                (CASE WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty = 'N')) THEN  \n" +
            "							0  \n" +
            "						WHEN ((a.isPurchase = 1 OR a.isInstall = 1) AND (a.isBuyDNPQty = 'N')) THEN  \n" +
            "							(a.kitqpa1)  \n" +
            "						WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty <> 'N')) THEN  \n" +
            "							(a.kitdnpQPA1)  \n" +
            "						ELSE  \n" +
            "							(a.kitdnpQPA1 + a.kitqpa1)  \n" +
            "				END) AS KitqpawithDNP, /* QPA count for Kit Allocation */  \n" +
            "				a.kitdnpQPA1 AS kitdnpWithoutQPA , /* QPA count for Kit Allocation - Change by CP on 30-04-2021 */  \n" +
            "                 IFNULL(a.refDesig, '') AS refDesig, IFNULL(dnpDesig, '') AS dnpDesig, a.qpaDesignatorStep, a.custPNID,  \n" +
            "				a.restrictCPNUseInBOMStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseWithPermissionStep, a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason,  \n" +
            "				CONCAT('{ Level:', a.level, ' | Part:', a.PIDCode, ' | Item:', TRIM(a.lineID) + 0, ' | QPA:', TRIM(a.qpacount) + 0, ' | DNP QPA:', TRIM(a.dnpQty) + 0,  \n" +
            "						' | Buy DNP QPA:', (CASE WHEN a.isBuyDNPQty = 'Y' THEN 'Yes' WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned' WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM' ELSE 'No' END),  \n" +
            "						' | RefDes Count:', TRIM(a.refDesigCount) + 0, ' | Buy QPA:', a.isPurchase, ' | DNP RefDes Count:', TRIM(a.dnpDesigCount) + 0, ' | POPULATE:', a.isInstall,  \n" +
            "						' | PartID:', a.partID, ' | KitAllocationNotRequire:',a.isNotRequiredKitAllocation, ' | assyCustPN:', a.assyCustPN, ' | AssyPN:', a.AssyPN, ' | AssyRoHSName:', fun_getRoHSNameByID(a.AssyRoHSID), ' | AssyRoHSIcon:', fun_getRoHSIconByID(a.AssyRoHSID),  '}') AS partlineID,  \n" +
            "				(CASE WHEN a.uomID = - 1  \n" +
            "					THEN (CASE WHEN a.qpacount != IFNULL(a.refDesigCount, 0) THEN 1 ELSE 0 END)  \n" +
            "				ELSE 0  \n" +
            "				END) isqpaMismatchflag,  \n" +
            "				(CASE WHEN a.uomID = - 1  \n" +
            "					THEN (CASE WHEN a.dnpQty != IFNULL(a.dnpDesigCount, 0) THEN 1 ELSE 0 END)  \n" +
            "				ELSE 0  \n" +
            "				END) isdnpQPAMismatchflag,  \n" +
            "				(CASE WHEN isBuyDNPQty = 'Y' OR isBuyDNPQty = 'P' OR isPurchase = 1  \n" +
            "					THEN 1  \n" +
            "				ELSE 0  \n" +
            "				END) isPurchaseWithDNP  \n" +
            "		FROM  \n" +
            "			leveldata a  \n" +
            "		GROUP BY a.rfqAssyIDORrefSalesOrderdetID , a.level, a.rfqlineitemsid , a.partid, a.lineID , a.uomID,  a.isInstall,  a.kitqpa1,  \n" +
            "        a.numOfPosition , a.isBuyDNPQty , a.isPurchase , a.qpa1 , a.dnpQPA1 , a.refDesig , a.dnpDesig , a.qpaDesignatorStep ,  \n" +
            "        a.custPNID , a.restrictCPNUseInBOMStep , a.restrictCPNUsePermanentlyStep , a.restrictCPNUseWithPermissionStep , a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason,  \n" +
            "         a.kitdnpQPA1#, a.PIDCode, a.qpacount, a.dnpQty, a.AssyRoHSID  \n" +
            "         ;  \n" +
            "  \n" +
            "        -- Create Consolidated data in temp table  \n" +
            "        DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqConsolidateLineItem;  \n" +
            "		set @finalConsolidateDetail = concat(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_CreateRfqConsolidateLineItem AS  \n" +
            "		SELECT tl.rfqAssyIDORrefSalesOrderdetID, 		tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID,  \n" +
            "				tl.numOfPosition, 	tl.custPNID, 			tl.restrictCPNUseInBOMStep, 	tl.restrictCPNUsePermanentlyStep,  \n" +
            "				tl.restrictCPNUseWithPermissionStep, tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason,  \n" +
            "				mfgpnIDs AS consolidatedmfgPNIDs, tal.Part AS consolidatedPartWithFlagDetail, tal.category, tal.mountingtypeID mountingTypeID,  \n" +
            "                tal.partType, tal.connecterTypeID, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,  \n" +
            "				MIN(tl.rfqlineitemsid) AS rfqlineitemsid,  (SELECT MIN(lineID) FROM leveldata WHERE rfqLineitemsID = MIN(tl.rfqlineitemsid)) lineid,  \n" +
            "				(CASE WHEN MAX(tl.isqpaMismatchflag) OR MAX(tl.isdnpQPAMismatchflag) THEN 1 ELSE 0 END) isqpaMismatch,  \n" +
            "				SUM(tl.qpa) qpa, SUM(tl.KitqpawithDNP) KitqpawithDNP, SUM(tl.kitdnpWithoutQPA) kitdnpWithoutQPA,  \n" +
            "				GROUP_CONCAT((CASE WHEN tl.dnpDesig = '' THEN tl.refDesig ELSE CONCAT(tl.refDesig,',',tl.dnpDesig) END)) AS consolidatedrefDesig,  \n" +
            "				GROUP_CONCAT(tl.rfqLineItemsID) AS consolidatedLineItemIDs,  \n" +
            "				COUNT(tl.rfqLineItemsID) AS multiple,  \n" +
            "				GROUP_CONCAT(tl.partlineID SEPARATOR '\",v_GroupConcatSeparator,\"') AS consolidatedpartlineID,  \n" +
            "				GROUP_CONCAT(tal.mfgPartsWithPackagings SEPARATOR '\",v_GroupConcatSeparator,\"') AS consolidateRestrictPartDetail  \n" +
            "		FROM  \n" +
            "				temp_LevleWiseLineItemDetail tl  \n" +
            "				INNER JOIN temp_LevleWiseAlternatepartwithPackagingGroup tal ON tal.rfqLineItemsID = tl.rfqLineItemsID AND tal.level = tl.level  \n" +
            "		GROUP BY  \n" +
            "					tl.rfqAssyIDORrefSalesOrderdetID, 	tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID, 			tl.numOfPosition,  \n" +
            "					tl.custPNID, 	tl.restrictCPNUseInBOMStep, 		tl.restrictCPNUsePermanentlyStep, 		tl.restrictCPNUseWithPermissionStep,  \n" +
            "					tal.Part, tal.category, tal.mountingtypeID, tal.partType, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,  \n" +
            "   tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason  \n" +
            "		ORDER BY rfqlineitemsid\");  \n" +
            "		PREPARE query3 FROM @finalConsolidateDetail;  \n" +
            "		EXECUTE query3;  \n" +
            "		DEALLOCATE PREPARE query3;  \n" +
            "  \n" +
            "        -- Drop temporary tables generated for generate consolidate data  \n" +
            "         DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseLineItemDetail;  \n" +
            "		 DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseAlternatepartwithPackagingGroup;  \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 28-03-2022 *********************************** */
            "DROP function IF EXISTS `fun_getKitAllocationPIDsForComponent`;  \n" +
            "CREATE FUNCTION `fun_getKitAllocationPIDsForComponent`(  \n" +
            "	pRfqLineitemId INT,  \n" +
            "	pSalesOrderDetailId INT,  \n" +
            "	pIsPackagingAlias  TINYINT(1)  \n" +
            ") RETURNS longtext CHARSET utf8mb4  \n" +
            "BEGIN  \n" +
            "	DECLARE vComponent LONGTEXT;  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS tempKitLineItemResult;  \n" +
            "	CREATE TEMPORARY TABLE tempKitLineItemResult  \n" +
            "		SELECT 	IFNULL(cp.mfgPN,com.mfgPN) mfgPN,	kla.mfgCode, 	IFNULL(com.RoHSStatusID,-1) RoHSStatusID,  \n" +
            "			IFNULL(cp.id,com.id) id, 							kla.refRfqLineItemAlternatePartId  \n" +
            "	FROM 	kit_allocation_lineitems_alternatepart kla  \n" +
            "	INNER JOIN vu_component_mpn com ON kla.mfgPNID = com.id  and com.isDeleted = 0  \n" +
            "	left outer join vu_component_mpn cp on com.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0 and 1 = pIsPackagingAlias  \n" +
            "	WHERE 	refRfqLineitem = pRfqLineitemId  \n" +
            "	AND 	refSalesOrderDetID = pSalesOrderDetailId  \n" +
            "	AND 	kla.isDeleted = 0;  \n" +
            "  \n" +
            "	SELECT  GROUP_CONCAT(DISTINCT(REPLACE(mfgPN,\",\",\"***\")), '###',  \n" +
            "										mfgCode, '###',  \n" +
            "										IFNULL(RoHSStatusID,-1), '###',  \n" +
            "										id, '###',  \n" +
            "										0  \n" +
            "						)  \n" +
            "	into 	vComponent  \n" +
            "	FROM 	tempKitLineItemResult;  \n" +
            "  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS tempKitLineItemResult;  \n" +
            "  \n" +
            "    RETURN vComponent;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 28-03-2022 *********************************** */
            "DROP function IF EXISTS `fun_getKitAllocationPIDsForMfgPN`;  \n" +
            "CREATE FUNCTION `fun_getKitAllocationPIDsForMfgPN`(  \n" +
            "	pRfqLineitemId INT,  \n" +
            "	pSalesOrderDetailId INT,  \n" +
            "	pIsPackagingAlias TINYINT(1)  \n" +
            ") RETURNS longtext CHARSET utf8mb4  \n" +
            "BEGIN  \n" +
            "	DECLARE mfgPN LONGTEXT;  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS tempKitLineItemResult;  \n" +
            "	CREATE TEMPORARY TABLE tempKitLineItemResult  \n" +
            "	SELECT 	ifnull(cp.id, com.id) id, 					ifnull(cp.PIDCode, com.PIDCode) PIDCode,		ifnull(cp.RoHSStatusID, com.RoHSStatusID) RoHSStatusID,  \n" +
            "			ifnull(cp.feature, com.feature) feature, 	ifnull(cp.isCustom, com.isCustom) isCustom,	  	ifnull(cp.partStatus, com.partStatus) partStatus,  \n" +
            "			ifnull(cp.mfgPNDescription, com.mfgPNDescription) mfgPNDescription,  \n" +
            "			kla.restrictUseInBOMStep,  \n" +
            "			kla.restrictUseInBOMWithPermissionStep,  \n" +
            "			(CASE WHEN (com.restrictUsePermanently = 1) THEN 0 ELSE 1 END) AS restrictUsePermanentlyStep,  \n" +
            "			(CASE WHEN (com.restrictUSEwithpermission = 1) THEN 0 ELSE 1 END) AS restrictUseWithPermissionStep,  \n" +
            "			kla.restrictUseInBOMExcludingAliasStep,  \n" +
            "			kla.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
            "			kla.restrictUseExcludingAliasStep,  \n" +
            "			kla.restrictUseExcludingAliasWithPermissionStep,  \n" +
            "			kla.approvedMountingType,  \n" +
            "			kla.mismatchMountingTypeStep,  \n" +
            "			/*com.restrictPackagingUsePermanently,  \n" +
            "			com.restrictPackagingUseWithpermission,*/  \n" +
            "			kla.refRfqLineItemAlternatePartId  \n" +
            "	FROM 		kit_allocation_lineitems_alternatepart kla  \n" +
            "	INNER JOIN 	vu_component_mpn com ON kla.mfgPNID = com.id  \n" +
            "	left outer join vu_component_mpn cp on com.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  and 1 = pIsPackagingAlias  \n" +
            "	WHERE 		kla.refRfqLineitem = pRfqLineitemId  \n" +
            "	AND 		kla.refSalesOrderDetID = pSalesOrderDetailId  \n" +
            "	AND 		kla.isDeleted = 0;  \n" +
            "  \n" +
            "	SELECT  GROUP_CONCAT(DISTINCT(REPLACE(PIDCode,\",\",\"***\")),'@@@',  \n" +
            "							RoHSStatusID,'@@@',  \n" +
            "							fun_getRoHSNameByID(RoHSStatusID),'@@@',  \n" +
            "							IFNULL(fun_getRoHSIconByID(RoHSStatusID), \"\"),'@@@',  \n" +
            "							REPLACE(IFNULL(iscustom,0),\",\",\" \"),'@@@',  \n" +
            "							REPLACE(IFNULL(feature,\" \"),\",\",\" \"),'@@@',  \n" +
            "							IFNULL(fun_getPartStatusNameByID(partStatus),\" \"),'@@@',  \n" +
            "							REPLACE(IFNULL(fun_getPartStatusColorByID(partStatus),\"\"),\",\",\"***\"),'@@@',  \n" +
            "							REPLACE(IFNULL(fun_getPartTBDDetails(id),\"\"),\",\",\"***\"), '@@@',  \n" +
            "							IFNULL(restrictUseInBOMStep,0), '@@@',  \n" +
            "							IFNULL(restrictUseInBOMWithPermissionStep,0), '@@@',  \n" +
            "							IFNULL(restrictUsePermanentlyStep,1), '@@@',  \n" +
            "							IFNULL(restrictUseWithPermissionStep,1), '@@@',  \n" +
            "							IFNULL(restrictUseInBOMExcludingAliasStep,0), '@@@',  \n" +
            "							IFNULL(restrictUseInBOMExcludingAliasWithPermissionStep,0), '@@@',  \n" +
            "							IFNULL(restrictUseExcludingAliasStep,1), '@@@',  \n" +
            "							IFNULL(restrictUseExcludingAliasWithPermissionStep,1), '@@@',  \n" +
            "							'','@@@',  \n" +
            "							REPLACE(IFNULL(mfgPNDescription,\"\"),\",\",\"***\"), '@@@',  \n" +
            "							'','@@@',  \n" +
            "							IFNULL(approvedMountingType,0), '@@@',  \n" +
            "							IFNULL(mismatchMountingTypeStep,0)  \n" +
            "							ORDER BY refRfqLineItemAlternatePartId  \n" +
            "				)  \n" +
            "	into 		mfgPN  \n" +
            "	FROM 		tempKitLineItemResult;  \n" +
            "  \n" +
            "	RETURN mfgPN;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 28-03-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (6073,'2.00','V1',' User Story 42365: Apply Part Master Normalization effect in Kit UMID and Bulk Transfer flow - Packaging Alias Changes for Columns without alias condition - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 6073:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-03-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_update_UMID_initial_count`;  \n" +
                "CREATE PROCEDURE `Sproc_update_UMID_initial_count`(  \n" +
                "	IN pId INT,  \n" +
                "	IN pOrgQty DECIMAL(18,8),  \n" +
                "	IN pOrgPkgUnit DECIMAL(18,8),  \n" +
                "	IN pUpdatedBy VARCHAR(255),  \n" +
                "	IN pInitialQtyChangeRemark VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vOrgInitialQty DECIMAL(18, 8);  \n" +
                "	DECLARE vQtyDifference DECIMAL(18,8);  \n" +
                "	DECLARE vBalanceQty DECIMAL(18,8);  \n" +
                "	DECLARE vIsQtyUpdate TINYINT;  \n" +
                "	DECLARE vInventoryType VARCHAR(2);  \n" +
                "    DECLARE v_ReceivedStatus VARCHAR(5);  \n" +
                "    DECLARE v_PackingSlipModeStatus VARCHAR(5);  \n" +
                "    DECLARE v_ErrorCode INT;  \n" +
                "    DECLARE v_PackingslipId INT;  \n" +
                "    DECLARE v_PackingSlipNumber VARCHAR(55);  \n" +
                "    DECLARE v_PackingSlipDetId INT;  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "        # get UMID detail before update qty and units to manage history  \n" +
                "          DROP TEMPORARY TABLE IF EXISTS tempUMIDDetail;  \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS tempUMIDDetail AS  \n" +
                "		SELECT css.id, css.uid, css.refcompid, css.orgQty, css.orgPkgUnit, css.pkgQty, css.pkgUnit, css.fromBin, css.packaging, css.stockInventoryType, css.woNumber  \n" +
                "		  FROM component_sid_stock css  \n" +
                "		 WHERE css.id = pId  \n" +
                "		   AND isDeleted = 0;  \n" +
                "  \n" +
                "        SELECT orgQty, stockInventoryType INTO vOrgInitialQty, vInventoryType FROM tempUMIDDetail;  \n" +
                "  \n" +
                "        # get Packing slip Mode status and packing slip line level status for selected umid  \n" +
                "        SELECT  psd.id, psd.receivedStatus, ps.packingSlipModeStatus, ps.id, ps.packingSlipNumber  \n" +
                "				INTO  v_PackingSlipDetId, v_ReceivedStatus, v_PackingSlipModeStatus, v_PackingslipId, v_PackingSlipNumber  \n" +
                "			FROM	packing_slip_material_receive_det  psd  \n" +
                "				INNER JOIN packing_slip_material_receive ps ON psd.refPackingSlipMaterialRecID = ps.id  AND ps.isDeleted = 0  \n" +
                "			AND  psd.id IN (  \n" +
                "				SELECT 	refPackingSlipDetailID  \n" +
                "				FROM  	component_sid_stock_packing_detail  \n" +
                "				WHERE 	refComponentSidStockID = pId  \n" +
                "						AND isDeleted = 0  \n" +
                "					);  \n" +
                "	# Check if UMID is for new stock Else for existing stock  \n" +
                "	IF (vInventoryType = 'NI') THEN  \n" +
                "		# If packing slip status is in draft mode then we have to restrict  \n" +
                "        IF(v_PackingSlipModeStatus = 'D') THEN  \n" +
                "		# Update packing slip detail if new orginial qty is less than previous original qty  \n" +
                "             SET v_ErrorCode = 1;  \n" +
                "             SELECT  \n" +
                "					t.id,  \n" +
                "					t.uid,  \n" +
                "					v_PackingslipId AS packingslipId,  \n" +
                "					v_PackingSlipNumber AS packingSlipNumber,  \n" +
                "                    v_ErrorCode AS errorCode  \n" +
                "			FROM 	tempUMIDDetail t  \n" +
                "			INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "			INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "            SET vIsQtyUpdate = 0;  \n" +
                "		ELSE  \n" +
                "			IF(pOrgQty < vOrgInitialQty) THEN  \n" +
                "				# if new original qty is less than previous qty then make UMID created flag to false  \n" +
                "				UPDATE 	packing_slip_material_receive_det  \n" +
                "				SET 	umidCreated = ((IFNULL(umidCreatedQty,0) + IFNULL(rmaCreatedQty,0) - (vOrgInitialQty - pOrgQty))=receivedQty),  \n" +
                "						umidCreatedQty = (IFNULL(umidCreatedQty,0) - (vOrgInitialQty - pOrgQty))  \n" +
                "				WHERE   id IN (  \n" +
                "					SELECT 	refPackingSlipDetailID  \n" +
                "					FROM  	component_sid_stock_packing_detail  \n" +
                "					WHERE 	refComponentSidStockID = pId  \n" +
                "							AND isDeleted = 0  \n" +
                "						);  \n" +
                "  \n" +
                "				UPDATE 	component_sid_stock_packing_detail  \n" +
                "				SET 	packingSlipQty =  pOrgQty  \n" +
                "				WHERE   refComponentSidStockID = pId  AND isDeleted = 0 ;  \n" +
                "  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "  \n" +
                "			# Update packing slip detail if new orginial qty is more than previous original qty  \n" +
                "			ELSEIF(pOrgQty > vOrgInitialQty) THEN  \n" +
                "				SET vQtyDifference = (pOrgQty - vOrgInitialQty);  \n" +
                "				SELECT 	vu.BalanceQty INTO vBalanceQty  \n" +
                "				FROM 	vu_umid_creation_pending vu  \n" +
                "				WHERE 	vu.packingSlipDetID = v_PackingSlipDetId;  \n" +
                "  \n" +
                "				# If pending balance qty is more than new additional original qty then make UMID created flag to false  \n" +
                "				IF(vBalanceQty > vQtyDifference) THEN  \n" +
                "					UPDATE 	packing_slip_material_receive_det  \n" +
                "					SET 	umidCreated = ((IFNULL(umidCreatedQty,0)+IFNULL(rmaCreatedQty,0) + IFNULL(vQtyDifference,0))=receivedQty),  \n" +
                "							umidCreatedQty = (IFNULL(umidCreatedQty,0) + IFNULL(vQtyDifference,0))  \n" +
                "					WHERE   id IN (  \n" +
                "						SELECT 	refPackingSlipDetailID  \n" +
                "						FROM  	component_sid_stock_packing_detail  \n" +
                "						WHERE 	refComponentSidStockID = pId  \n" +
                "								AND isDeleted = 0  \n" +
                "							);  \n" +
                "					UPDATE 	component_sid_stock_packing_detail  \n" +
                "					SET 	packingSlipQty =  pOrgQty  \n" +
                "					WHERE   refComponentSidStockID = pId  AND isDeleted = 0 ;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 1;  \n" +
                "				# If pending balance qty and new additional original qty are equal then make UMID created flag to true  \n" +
                "				ELSEIF(vBalanceQty = vQtyDifference) THEN  \n" +
                "					UPDATE 	packing_slip_material_receive_det  \n" +
                "					SET 	umidCreated = ((IFNULL(umidCreatedQty,0) + IFNULL(rmaCreatedQty,0) + IFNULL(vQtyDifference,0))=receivedQty),  \n" +
                "							umidCreatedQty = (IFNULL(umidCreatedQty,0) + IFNULL(vQtyDifference,0))  \n" +
                "					WHERE   id IN (  \n" +
                "						SELECT 	refPackingSlipDetailID  \n" +
                "						FROM  	component_sid_stock_packing_detail  \n" +
                "						WHERE 	refComponentSidStockID = pId  \n" +
                "								AND isDeleted = 0  \n" +
                "							);  \n" +
                "					UPDATE 	component_sid_stock_packing_detail  \n" +
                "					SET 	packingSlipQty =  pOrgQty  \n" +
                "					WHERE   refComponentSidStockID = pId  AND isDeleted = 0 ;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 1;  \n" +
                "				# Else inform user that stock is not available to increase original qty  \n" +
                "				ELSE  \n" +
                "					SELECT 		b.name AS binName,  \n" +
                "							IF(vBalanceQty > 0 , vBalanceQty, vBalanceQty * -1) AS BalanceQty,  \n" +
                "							c.PIDCode,  \n" +
                "							pOrgQty newOrgQty  \n" +
                "					FROM 		tempUMIDDetail t  \n" +
                "					INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "					INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 0;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET vIsQtyUpdate = 0;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "    ELSEIF(vInventoryType = 'AI') THEN  \n" +
                "		IF(pOrgQty < vOrgInitialQty) THEN  \n" +
                "			SET vIsQtyUpdate = 1;  \n" +
                "		# Update packing slip detail if new orginial qty is more than previous original qty  \n" +
                "		ELSEIF(pOrgQty > vOrgInitialQty) THEN  \n" +
                "			SET vQtyDifference = (pOrgQty - vOrgInitialQty);  \n" +
                "			SELECT 	vu.availableQty INTO vBalanceQty  \n" +
                "			FROM 	vu_customer_packing_slip_qty vu  \n" +
                "			WHERE 	EXISTS (SELECT 1  \n" +
                "							FROM tempUMIDDetail t  \n" +
                "                            WHERE t.fromBin = vu.binID  \n" +
                "                            AND t.refcompid = vu.partID  \n" +
                "                            AND t.woNumber = vu.woNumber);  \n" +
                "  \n" +
                "			# If pending balance qty is more than new additional original qty then make UMID created flag to false  \n" +
                "			IF(vBalanceQty > vQtyDifference) THEN  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "			# If pending balance qty and new additional original qty are equal then make UMID created flag to true  \n" +
                "			ELSEIF(vBalanceQty = vQtyDifference) THEN  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "			# Else inform user that stock is not available to increase original qty  \n" +
                "			ELSE  \n" +
                "				SELECT 	 b.name AS binName,  \n" +
                "						vBalanceQty AS BalanceQty,  \n" +
                "						c.PIDCode,  \n" +
                "						pOrgQty newOrgQty  \n" +
                "				FROM 	tempUMIDDetail t  \n" +
                "				INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "				INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "				SET vIsQtyUpdate = 0;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "    ELSE  \n" +
                "		SET vIsQtyUpdate = 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(vIsQtyUpdate = 1) THEN  \n" +
                "		# update qty and count based on data  \n" +
                "		UPDATE 	component_sid_stock css, tempUMIDDetail t  \n" +
                "		SET 	css.pkgQty = (IFNULL(pOrgQty, 0) - IFNULL(t.orgQty, 0) + IFNULL(t.pkgQty, 0)),  \n" +
                "			css.pkgUnit = (IFNULL(pOrgPkgUnit, 0) - IFNULL(t.orgPkgUnit, 0) + IFNULL(t.pkgUnit, 0)),  \n" +
                "			css.orgQty = IFNULL(pOrgQty, 0), 		css.orgPkgUnit = IFNULL(pOrgPkgUnit, 0),  \n" +
                "			css.initialQtyChangeRemark = pInitialQtyChangeRemark,  \n" +
                "			css.updatedBy = pUpdatedBy,  \n" +
                "			css.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	css.id = t.id;  \n" +
                "  \n" +
                "		-- Insert log in UMID history page  \n" +
                "		INSERT INTO component_sid_stock_history  \n" +
                "		(  \n" +
                "			transType, 				actionPerformed, 		refUIDId, 	uid, 			refcompid,  \n" +
                "			binID, 					warehouseID, 			deptWHID, 	orgQty, 		orgUnit,  \n" +
                "			currentQty, 				currentUnit, 			uom, 		reason,  \n" +
                "			isDeleted, 				createdBy, 			createdAt,  \n" +
                "			updatedBy, 				updatedAt  \n" +
                "		)  \n" +
                "		SELECT  'Change Initial Qty.',  \n" +
                "			'Change Initial Qty',  \n" +
                "			css.id,  \n" +
                "			uid,  \n" +
                "			refcompid,  \n" +
                "			css.binID,  \n" +
                "			b.warehouseID,  \n" +
                "			w.parentWHID,  \n" +
                "			orgQty,  \n" +
                "			orgPkgUnit,  \n" +
                "			pkgQty,  \n" +
                "			pkgUnit,  \n" +
                "			uom,  \n" +
                "			pInitialQtyChangeRemark,  \n" +
                "			0,  \n" +
                "			pUpdatedBy,  \n" +
                "			fun_DatetimetoUTCDateTime(),  \n" +
                "			pUpdatedBy,  \n" +
                "			fun_DatetimetoUTCDateTime()  \n" +
                "		FROM 	component_sid_stock  css  \n" +
                "		JOIN 	binmst b ON css.binID = b.id  \n" +
                "		JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "		WHERE 	css.id = pId;  \n" +
                "  \n" +
                "		# Update allocated qty with return status  \n" +
                "		UPDATE 	kit_allocation k  \n" +
                "		SET	k.status = 'D',  \n" +
                "			k.updatedBy = pUpdatedBy,  \n" +
                "			k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	k.refUIDId = pId  \n" +
                "				AND k.status = 'A';  \n" +
                "	END IF;  \n" +
                "	COMMIT;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-03-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetUMIDDetailsByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDDetailsByID`(  \n" +
                "	IN pUIDId INT,  \n" +
                "	IN pUID VARCHAR(15)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "        SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "		IF(pUIDId IS NULL) THEN  \n" +
                "			SET pUIDId = (SELECT cs.id FROM component_sid_stock cs WHERE cs.uid = pUID AND cs.isDeleted = 0);  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		SELECT 	css.id AS uidId, 		css.uid, 		css.orgqty AS orgQty,			css.pkgQty, 		css.orgPkgUnit,			css.pkgUnit,  \n" +
                "				css.prefix,		css.uidPrefix,	css.sealDate,		css.cpn,			css.RefCPNMFGPNID,		css.mfgAvailabel,  \n" +
                "                css.assyID AS uidAssyID,		css.receiveMaterialType,				css.refSupplierPartId,	css.customerConsign,  \n" +
                "				css.spq, 		css.uom,		css.dateCode, 		css.packaging,		css.stockInventoryType, css.specialNote,  \n" +
                "                css.mfrDateCodeFormatID,		css.mfrDateCode,	css.woID,			css.dateCodeFormatID,	css.fromDateCodeFormat,  \n" +
                "                u.unitName,				u.measurementTypeID AS uomClassID,  \n" +
                "                css.woNumber, 	css.fromUIDId, 	css.fromUID, 		css.parentUIDId,		css.parentUID,		css.pcbPerArray,  \n" +
                "                (CASE WHEN css.fromUIDId IS NOT NULL AND css.parentUIDId IS NOT NULL THEN TRUE ELSE FALSE END) AS isSplitUID,	css.isReservedStock,  \n" +
                "                css.customerID,	css.scanlabel,	css.costCategoryID,  \n" +
                "                CONCAT(coc.categoryName, ' (', coc.`from`, ' - ', coc.`to`, ' )') costCategoryName,  \n" +
                "                css.lotCode,			css.dateCode,  \n" +
                "                css.nickName,	c.isCustom,    /*css.selfLifeDays,			css.shelfLifeAcceptanceDays,	css.maxShelfLifeAcceptanceDays,*/  \n" +
                "                c.selfLifeDays, 				c.maxShelfLifeAcceptanceDays, 			c.shelfLifeAcceptanceDays,  \n" +
                "				css.binID,				b.name AS currentBinName, 	css.orgRecBin, 		from_bin.Name AS fromBinName,  \n" +
                "                #org_bin.Name AS orgBinName,  \n" +
                "                w.Name AS currentWHName,							pw.Name AS currentParentWHName,  \n" +
                "                css.orgRecWarehouse,	css.orgRecDepartment,		css.fromBin,		css.fromWarehouse,		css.fromDepartment,  \n" +
                "				w.warehouseType,  		css.refcompid, 		c.mfgcodeID, 			c.mfgPN,					c.unit AS componentUnit,  \n" +
                "                c.PIDCode, 				c.mfgPNDescription,			c.imageURL, 		m.mfgName,				c.mfgType,  		c.custAssyPN,  \n" +
                " 				m.mfgCode, 				c.mountingTypeID,			cp.sourceName, 		cp.name packagingName,  \n" +
                "                c.partPackage, 			pc.Name AS externalPartPackage,  \n" +
                "                css.rohsStatusID AS uidRohsStatusID, 				umid_rohs.Name umidRohsName,				umid_rohs.rohsIcon umidRohsIcon,  \n" +
                "                c.rohsStatusID,			rohs.Name rohsName, 		rohs.rohsIcon, 								mt.hasLimitedShelfLife,  \n" +
                "				vu.packingSlipID,		vu.packingSlipSerialNumber, vu.packingSlipNumber,   					vu.packingSlipDetID,  \n" +
                "                vu.UMIDCreatedQty, 		vu.returnQty,  				vu.InQty, 			vu.BalanceQty,			vu.receivedStatus,  \n" +
                "                vu.packingSlipModeStatus,							fun_GetFormattedMfgCode(m.mfgCode,  m.mfgName, vMfgCodeFormat) as mfgCodeName,  \n" +
                "                (CASE WHEN (css.stockInventoryType = 'NI') THEN  \n" +
                "					CONCAT(mcm.mfgCode, vu.packingSlipNumber)  \n" +
                "				ELSE NULL END) As cofcCode,  \n" +
                "               CONCAT(cmsl.levelRating, '-', cmsl.`code`) AS mslLevel,  \n" +
                "               IFNULL(wo.woAvailableQty,0) AS woAvailableQty  \n" +
                "		FROM component_sid_stock css  \n" +
                "			JOIN vu_component_mpn c ON css.refcompid = c.id  \n" +
                "			JOIN mfgcodemst m on c.mfgcodeID = m.id  AND m.isDeleted = 0  \n" +
                "			JOIN rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  AND c.isDeleted = 0  \n" +
                "			JOIN rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  AND umid_rohs.isDeleted = 0  \n" +
                "            LEFT JOIN component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "			JOIN component_packagingmst cp on css.packaging = cp.id  AND cp.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_packagecasetypemst pc ON c.partPackageID = pc.id AND pc.isDeleted = 0  \n" +
                "            JOIN cost_category coc ON css.costCategoryID = coc.id AND coc.isDeleted = 0  \n" +
                "            JOIN uoms u ON css.uom = u.id AND u.isDeleted = 0  \n" +
                "            JOIN rfq_mountingtypemst mt ON c.mountingTypeID = mt.id AND mt.isDeleted = 0  \n" +
                "			JOIN binmst b on css.binID = b.id AND b.isDeleted = 0  \n" +
                "            JOIN binmst from_bin on css.fromBin = from_bin.id AND from_bin.isdeleted = 0  \n" +
                "			JOIN warehousemst w ON b.WarehouseID = w.id AND w.isDeleted = 0  \n" +
                "			JOIN warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0  \n" +
                "            LEFT JOIN component_sid_stock_packing_detail csp ON css.id = csp.refComponentSidStockID AND csp.isDeleted = 0  \n" +
                "            LEFT JOIN vu_umid_creation_pending vu ON csp.refPackingSlipDetailID = vu.packingSlipDetID  \n" +
                "            LEFT JOIN mfgcodemst mcm ON mcm.id = vu.mfgCodeID AND mcm.isDeleted = 0  \n" +
                "            LEFT JOIN (	SELECT     atk.woID,  \n" +
                "							((SUM(atk.openingStock) - (SELECT  \n" +
                "									IFNULL(SUM(ss.shippedqty), 0)  \n" +
                "								FROM  \n" +
                "									shippedassembly ss  \n" +
                "								WHERE  \n" +
                "									((ss.isDeleted = 0)  \n" +
                "										AND (ss.woNumber = atk.woNumber)  \n" +
                "										AND (ss.partID = atk.partID)))) - IFNULL(css.pkgQty, 0)) AS woAvailableQty  \n" +
                "						FROM assemblystock atk  \n" +
                "						LEFT JOIN (SELECT  \n" +
                "										cs.woID, SUM(cs.pkgQty) AS pkgQty  \n" +
                "									FROM  \n" +
                "									component_sid_stock cs  \n" +
                "									WHERE cs.isDeleted = 0 AND cs.woID IS NOT NULL GROUP BY cs.woID) css ON css.woID = atk.woID  \n" +
                "						WHERE atk.isDeleted = 0  \n" +
                "						GROUP BY atk.woNumber,atk.partID,atk.whID,atk.binID,atk.woID,atk.woNumber,css.pkgQty  \n" +
                "					) wo ON wo.woID = css.woID  \n" +
                "		WHERE css.id =  (CASE WHEN pUIDId IS NOT NULL THEN pUIDId  \n" +
                "				ELSE (SELECT cs.id FROM component_sid_stock cs WHERE cs.uid = pUID AND cs.isDeleted = 0) END);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-03-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(  \n" +
                "    IN pWhereClause VARCHAR(16383),  \n" +
                "    IN puserID VARCHAR(50),  \n" +
                "    IN pnickName VARCHAR(20),  \n" +
                "    IN pprefix VARCHAR(20),  \n" +
                "    IN pIsFromUID TINYINT,  \n" +
                "    IN pComponentID INT,  \n" +
                "    IN pCustomerID INT,  \n" +
                "    IN pCPN BOOL,  \n" +
                "    IN pMFGAvailabel BOOL,  \n" +
                "    IN pRefCpnMfgID INT,  \n" +
                "    IN pAssyID INT,  \n" +
                "    IN pSalesOrderDetailID INT,  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),  \n" +
                "    IN pkitAssemblyID INT,  \n" +
                "    IN pBarcodeID INT,  \n" +
                "    IN pBOMLineID INT,  \n" +
                "    IN pSupplierID INT,  \n" +
                "    IN pCategory VARCHAR(2),  \n" +
                "    IN pInventoryType VARCHAR(2),  \n" +
                "    IN pCallFrom VARCHAR(50),  \n" +
                "    IN pExcludeStatus INT,  \n" +
                "    IN pBinID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "	DECLARE v_delimiter VARCHAR(10);  \n" +
                "	DECLARE v_length INT;  \n" +
                "	DECLARE v_fieldType INT;  \n" +
                "	DECLARE v_entityId INT;  \n" +
                "	DECLARE v_dataElementId INT;  \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);  \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);  \n" +
                "	DECLARE strLabel VARCHAR(2000);  \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);  \n" +
                "	DECLARE StaticField VARCHAR(100);  \n" +
                "	DECLARE DynamicField VARCHAR(100);  \n" +
                "	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';  \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');  \n" +
                "	DECLARE plen,slen INT;  \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;  \n" +
                "	DECLARE pbr_Separator VARCHAR(50);  \n" +
                "	DECLARE barcode_type_id INT;  \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);  \n" +
                "	DECLARE UpdateValue VARCHAR(16383);  \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';  \n" +
                "	DECLARE v_SupplierID INT;  \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);  \n" +
                "	DECLARE v_barcode_id INT;  \n" +
                "	DECLARE v_barcode_count INT;  \n" +
                "	DECLARE v_NumberOfPart INT;  \n" +
                "	DECLARE v_rfqLineItemsID INT;  \n" +
                "	DECLARE v_componentCount INT;  \n" +
                "	DECLARE v_componentId INT;  \n" +
                "	DECLARE v_mfgPartNO VARCHAR(100);  \n" +
                "	DECLARE v_partMFG INT;  \n" +
                "	DECLARE v_isGoodPart TINYINT;  \n" +
                "	DECLARE v_restrictUsePermanently TINYINT;  \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT;  \n" +
                "	DECLARE v_restrictUseInBOM TINYINT;  \n" +
                "	DECLARE v_isInstall TINYINT;  \n" +
                "	DECLARE v_isBOMLineClean TINYINT;  \n" +
                "	DECLARE v_BOMLineId INT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT;  \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;  \n" +
                "	DECLARE v_PIDCode VARCHAR(110);  \n" +
                "	DECLARE v_isPurchase TINYINT;  \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);  \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);  \n" +
                "	DECLARE v_BOMLineCount INT;  \n" +
                "	DECLARE v_AlternateLineId INT;  \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);  \n" +
                "	DECLARE v_BOMAssyId INT;  \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);  \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT;  \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT;  \n" +
                "	DECLARE v_isCPNFlag TINYINT;  \n" +
                "	DECLARE v_dateCodeFormatID INT;  \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);  \n" +
                "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);  \n" +
                "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;  \n" +
                "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;  \n" +
                "	DECLARE v_MFRList VARCHAR(10000);  \n" +
                "	DECLARE v_barcode_status INT;  \n" +
                "	DECLARE v_category INT;  \n" +
                "	DECLARE v_partType INT;  \n" +
                "    DECLARE v_pendingPartCount INT;  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;  \n" +
                "	SET v_MfrNotFoundForSupplierQuote = 0;  \n" +
                "    SET v_dateCodeFormatID = (SELECT sys.`values` FROM systemconfigrations sys WHERE sys.`key` = 'UMIDInternalDateCodeFormat');  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "    # Eror Handle temporary table  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error  \n" +
                "	(  \n" +
                "		errorText LONGTEXT,  \n" +
                "		IsSuccess VARCHAR (2),  \n" +
                "		MFGPart VARCHAR(10000)  \n" +
                "	);  \n" +
                "  \n" +
                "	/* Temp table for Packing Slip */  \n" +
                "	IF (pCategory = 'P') THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;  \n" +
                "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive  \n" +
                "		(  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			poNumber VARCHAR(100),  \n" +
                "			supplierSONumber VARCHAR(100),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50)  \n" +
                "		);  \n" +
                "	ELSE  \n" +
                "    /* Temp table for MFR */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock  \n" +
                "		(  \n" +
                "			refcompid INT,  \n" +
                "            dateCodeFormatID INT,  \n" +
                "			pkgQty DECIMAL(18,6),  \n" +
                "			dateCode VARCHAR(10),  \n" +
                "			lotCode VARCHAR(255),  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			createdBy VARCHAR(255),  \n" +
                "			uid VARCHAR(14),  \n" +
                "			prefix VARCHAR(20),  \n" +
                "			nickName VARCHAR(50),  \n" +
                "			cpn TINYINT,  \n" +
                "			mfgAvailabel TINYINT,  \n" +
                "			refCPNMFGPNID INT,  \n" +
                "			customerID INT,  \n" +
                "			assyID INT,  \n" +
                "			receiveMaterialType VARCHAR(255),  \n" +
                "			refSupplierPartId INT,  \n" +
                "			mfrDateCode VARCHAR(50),  \n" +
                "			poNumber VARCHAR(50),  \n" +
                "			supplierSONumber VARCHAR(50),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50),  \n" +
                "			binName VARCHAR(100),  \n" +
                "			packaging VARCHAR(100),  \n" +
                "			packingSlipDetailNickname VARCHAR(50)  \n" +
                "		);  \n" +
                "  \n" +
                "		/* Temp table for data element value */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values  \n" +
                "		(  \n" +
                "			entityid INT,  \n" +
                "			dataelementid INT,  \n" +
                "			`value` LONGTEXT,  \n" +
                "			createdBy VARCHAR(255)  \n" +
                "		);  \n" +
                "    END IF;  \n" +
                "	-- get data from barcode templates with seprator  \n" +
                "	# return error code  \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found  \n" +
                "	# 0: Barcode template does not exist, Please add template  \n" +
                "	# 1: Validation Clear  \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component  \n" +
                "	# 3: Mfgcode is not found  \n" +
                "	# 4: MFG PN does not exist  \n" +
                "	# 5: Multiple MFG PN found  \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code  \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly  \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer  \n" +
                "	# 9: Multiple barcode template found.  \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check  \n" +
                "	# 11: MFG PN is incorrect part  \n" +
                "	# 12: PID PID1 was restricted part at part master level.  \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.  \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.  \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.  \n" +
                "	# 17: PID is contain more than 1 BOM line.  \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.  \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.  \n" +
                "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.  \n" +
                "	# 22: You cannot create UMID for assembly from Existing Stock.  \n" +
                "	# 23: In UMID Management screen not allow to scan which part's part type is Other  \n" +
                "    # 24: In UMID Management screen if pending stock is not exists for stockinventory NI then not allow to scan part  \n" +
                "    # 25: In UMID Management screen if pending stock PS status is Draft then not allow to scan part  \n" +
                "    # 24: In UMID Management screen if pending stock PS Line received status is Pending or Rejected then not allow to scan part  \n" +
                "  \n" +
                "	block1: BEGIN  \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");        \n" +
                "		IF (pBarcodeID IS NULL) THEN  \n" +
                "			/* Get barcode from labelstring */  \n" +
                "            SELECT COUNT(*) INTO v_barcode_count  \n" +
                "			  FROM br_label_template  \n" +
                "             WHERE isDeleted=0  \n" +
                "               AND barcodeCategory = pCategory  \n" +
                "               AND `status`=1  \n" +
                "               AND pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "			SELECT id, barcodeType, `name`, `status`  \n" +
                "              INTO v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status  \n" +
                "			  FROM br_label_template  \n" +
                "             WHERE isDeleted=0  \n" +
                "               AND barcodeCategory = pCategory  \n" +
                "               AND `status`=1  \n" +
                "               AND pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) limit 1;  \n" +
                "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN  \n" +
                "				/* Get More than 1 barcode then give validation */  \n" +
                "				IF (v_barcode_count > 1) THEN  \n" +
                "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
                "					('Multiple barcode template found.',9,@multiple_barcode_string);  \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				ELSE  \n" +
                "					SET pBarcodeID = v_barcode_id;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			/* Get data from barcode id */  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* If data not get from barcode then concat none in label string find in table */  \n" +
                "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN  \n" +
                "			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name  \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
                "			SET pBarcodeID = v_barcode_id;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */  \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID  \n" +
                "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '2D';  \n" +
                "		ELSE /* barcode 1D */  \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template  \n" +
                "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '1D';  \n" +
                "		END IF;  \n" +
                "	END block1;  \n" +
                "  \n" +
                "	/* If error is not found then continue else select error */  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "		block2: BEGIN  \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found  \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR  \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter  \n" +
                "				WHERE refbrID = pBarcodeID AND isDeleted = 0;  \n" +
                "			-- declare exit loop if data not found  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "			-- if any record match found than  check for delimiter and its value  \n" +
                "			IF (pbr_template_ID > 0) THEN  \n" +
                "				-- create temporary table for deliemeter and component dataelement  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(  \n" +
                "					pentityId INT,  \n" +
                "					pdataElementId INT,  \n" +
                "					pdelimiter_value VARCHAR(200)  \n" +
                "				);  \n" +
                "				-- create temporary table for separator string values  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;  \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));  \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string  \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength  \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;  \n" +
                "				-- open cursor  \n" +
                "				OPEN barcodeMatch_cursor;  \n" +
                "				-- set str label as whereclause  \n" +
                "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter  \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");                \n" +
                "				-- if prefix is found than remove those from actual string match  \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN  \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));  \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));  \n" +
                "				 END IF;  \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match  \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN  \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
                "				 END IF;  \n" +
                "				-- insert all values after seprator split  \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");  \n" +
                "				PREPARE stmt1 FROM @SQL;  \n" +
                "				EXECUTE stmt1;  \n" +
                "				DEALLOCATE PREPARE stmt1;  \n" +
                "				IF (pCategory = 'P') THEN  \n" +
                "					-- create dynamic query to insert in packing slip  \n" +
                "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';  \n" +
                "				ELSE  \n" +
                "					-- create dynamic query to insert in recieving material  \n" +
                "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template  \n" +
                "				barcodeMatch_loop:LOOP  \n" +
                "					-- get all five selected values  \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;  \n" +
                "					-- exit loop if no record found for barcode match  \n" +
                "					IF exit_loop THEN  \n" +
                "						CLOSE barcodeMatch_cursor;  \n" +
                "						LEAVE barcodeMatch_loop;  \n" +
                "					END IF;  \n" +
                "					-- dynamic query to get dellimeter string with values from string  \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');  \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;  \n" +
                "					EXECUTE stmtdelimiter;  \n" +
                "					DEALLOCATE PREPARE stmtdelimiter;  \n" +
                "  \n" +
                "					-- get delimiter values from string  \n" +
                "					SET delimiter_value_data = SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));  \n" +
                "					-- check for field type is static or dynamic  \n" +
                "					-- if static field than check for mfg code and mfg part number  \n" +
                "					IF v_fieldType = 0  THEN  \n" +
                "						-- component_sid_stock  \n" +
                "						-- get static field name from barcode table delimiter data element id  \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);  \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys  \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN  \n" +
                "							SET MFG_Part_No = delimiter_value_data;  \n" +
                "							/* If component id is not found */  \n" +
                "							IF(pComponentID = 0)  \n" +
                "                            THEN  \n" +
                "								/* Get component data */  \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;  \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS  \n" +
                "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM  \n" +
                "								(  \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 	vu_component c  \n" +
                "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "									UNION  \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 		component_otherpn co  \n" +
                "									LEFT JOIN 	vu_component c ON c.id = co.refComponentID AND c.isDeleted = 0  \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM  \n" +
                "								(  \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 	vu_component c  \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0  \n" +
                "									UNION  \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 		component_otherpn co  \n" +
                "									LEFT JOIN 	vu_component c ON c.id = co.refComponentID  \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  \n" +
                "                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0  \n" +
                "								) a  \n" +
                "								INNER JOIN vu_component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;  \n" +
                "  \n" +
                "								IF (pSupplierID IS NOT NULL) THEN  \n" +
                "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID  AND s.isCustMapping=0  \n" +
                "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;  \n" +
                "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail;  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  \n" +
                "								   ELSE  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;  \n" +
                "								END IF;  \n" +
                "  \n" +
                "								IF (v_componentCount > 1) THEN  \n" +
                "									/* If component is more that one then remove supplier from list */  \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;  \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS  \n" +
                "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;  \n" +
                "  \n" +
                "									/* After remove supplier if get only one record then  */  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;  \n" +
                "									IF (v_componentCount < 2) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
                "										FROM 	temp_component_supplier_detail;  \n" +
                "									END IF;  \n" +
                "								ELSE  \n" +
                "									IF (pSupplierID IS NULL) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
                "										FROM 	temp_component_detail;  \n" +
                "									ELSE  \n" +
                "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN  \n" +
                "											SET v_MfrNotFoundForSupplierQuote = 1;  \n" +
                "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN  \n" +
                "											SET v_componentCount=0;  \n" +
                "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;  \n" +
                "										ELSE  \n" +
                "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
                "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
                "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);  \n" +
                "										END IF;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							ELSE  \n" +
                "                            	/* If component id is found */  \n" +
                "								SELECT 	COUNT(1) INTO v_componentCount  \n" +
                "								FROM 	component  \n" +
                "								WHERE 	id = pComponentID  \n" +
                "                                and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
                "  \n" +
                "							END IF;  \n" +
                "                            /* Remove from cursor if found more that one component */  \n" +
                "							IF v_componentCount > 1 THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "                            SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
                "									INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
                "								FROM 	component  \n" +
                "								WHERE 	id = pComponentID  \n" +
                "							and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
                "  \n" +
                "							/* If inventory is opening inventory and type is assembly */  \n" +
                "							IF(pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* If bad part found */  \n" +
                "							IF (v_isGoodPart != 1) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction */  \n" +
                "							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction with packaging */  \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Barcode MFR and Part MFR mismatch */  \n" +
                "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND  @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN  \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Found DIST then set id of MFR of that DIST */  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
                "							IF (@MFGType = 'DIST') THEN  \n" +
                "								SET v_SupplierID = v_componentId;  \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check kit allocation */  \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN  \n" +
                "								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */  \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId  \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	*  \n" +
                "										FROM  \n" +
                "											(  \n" +
                "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId  \n" +
                "												FROM 		component_packagingalias cp  \n" +
                "												LEFT JOIN 	component_attributes c ON c.packaginggroupID = cp.aliasgroupid  \n" +
                "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid = c.refComponentID  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
                "												UNION  \n" +
                "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0  \n" +
                "												UNION  \n" +
                "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL  \n" +
                "												#GROUP BY 	custPNID, rla.partID  \n" +
                "											) b  \n" +
                "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)  \n" +
                "										#GROUP BY b.lineID, b.assyId  \n" +
                "									) a;  \n" +
                "  \n" +
                "								/* BOM line not found  */  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								/* Found More then one BOM line */  \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								ELSE  \n" +
                "									/* Restrict use bom */  \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN  \n" +
                "										CLOSE barcodeMatch_cursor;  \n" +
                "										LEAVE barcodeMatch_loop;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									/* BOM line contain any error */  \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;  \n" +
                "									IF (v_isBOMLineClean = 0) THEN  \n" +
                "										CLOSE barcodeMatch_cursor;  \n" +
                "										LEAVE barcodeMatch_loop;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "  \n" +
                "								/* Part not install, purchase and not dnp  */  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Set dynamic query for component */  \n" +
                "							IF  v_componentCount = 1 THEN  \n" +
                "								IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
                "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"');  \n" +
                "								ELSE  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
                "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"');  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Not in use */  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys  \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for pkgQty */  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for lotcode */  \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for mfrdatecode and datecode */  \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "							/* SELECT id INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0; Commented by CP - 08-03-2022 */  \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN  \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);  \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');  \n" +
                "							ELSE  \n" +
                "								SET exit_loop = FALSE;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for binid */  \n" +
                "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for packaging */  \n" +
                "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for nickname */  \n" +
                "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for po number */  \n" +
                "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for so number */  \n" +
                "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for packing slip number */  \n" +
                "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for invoice number */  \n" +
                "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						/* Set dynamic query for other than system generated */  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE  \n" +
                "							dataElementID=v_dataElementId AND isDeleted = 0;  \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)  \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);  \n" +
                "					END IF;  \n" +
                "				END LOOP barcodeMatch_loop;  \n" +
                "  \n" +
                "				-- check if mfg and component both found than  \n" +
                "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount > 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
                "					IF (v_isGoodPart = 2) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					ELSE  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);  \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "					IF (v_isCPNFlag = 1) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					ELSE  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);  \n" +
                "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount = 1 AND  pInventoryType = 'NI' AND pIsFromUID = 1) THEN  \n" +
                "					SELECT COUNT(1) INTO v_pendingPartCount FROM vu_umid_creation_pending WHERE BalanceQty > 0 AND PartId = v_componentId AND BinID = pBinID;  \n" +
                "                    IF(v_pendingPartCount = 0) THEN  \n" +
                "						SELECT b.Name INTO @binName FROM binmst b WHERE b.id = pBinID;  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('<b>', v_PIDCode ,'</b> does not belong to the bin <b>', @binName ,'</b>. Review Pending UMID list should further investigation required.'),24,v_PIDCode);  \n" +
                "                    ELSEIF(v_pendingPartCount = 1) THEN  \n" +
                "						SELECT  ps.packingSlipModeStatus,  vu.receivedStatus, vu.packingSlipNumber, b.Name,  fun_getPackagingNameByID(vu.packagingID) AS packagingType  \n" +
                "								INTO @packingSlipModeStatus, @receivedStatus, @packingSlipNumber, @binName, @packagingType  \n" +
                "						FROM vu_umid_creation_pending vu  \n" +
                "                                INNER JOIN	packing_slip_material_receive ps on ps.id = vu.packingSlipID AND ps.isdeleted = 0  \n" +
                "                                INNER JOIN 	binmst b on b.id = vu.BinID AND b.isdeleted = 0  \n" +
                "								WHERE 		vu.BalanceQty > 0 AND vu.PartId = v_componentId AND vu.BinID = pBinID;  \n" +
                "						IF(@packingSlipModeStatus = 'D') THEN  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as packing slip# <b>', @packingSlipNumber ,'</b> is in <b>Draft</b> mode for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),25,v_PIDCode);  \n" +
                "                        ELSEIF(@receivedStatus = 'R' OR @receivedStatus = 'P') THEN  \n" +
                "							SET @receivedStatusValue = IF(@receivedStatus = 'P', 'Pending', 'Rejected');  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as line received status of packing slip# <b>', @packingSlipNumber ,'</b> is <b>',@receivedStatusValue,'</b> for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),26,v_PIDCode);  \n" +
                "                        END IF;  \n" +
                "                    END IF;  \n" +
                "                ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN  \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;  \n" +
                "					IF @Mfgmatched = 0  THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSE  \n" +
                "					IF @mfgCount = 0 THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN  \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF (pCPN = 1) THEN  \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;  \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;  \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF (pIsFromUID = 1) THEN  \n" +
                "					/* If not fire any validation */  \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "						-- must call statements in sequence  \n" +
                "						/* Add component sid stock in temp table of stock table and add in temp table */  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');  \n" +
                "                        PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel );  \n" +
                "  \n" +
                "						IF (pprefix IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',prefix=','\"',pprefix,'\"');  \n" +
                "                        END IF;  \n" +
                "  \n" +
                "						IF (pnickName IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET @sql2 = UpdateValue;  \n" +
                "						PREPARE stmt2 FROM @SQL2;  \n" +
                "						EXECUTE stmt2;  \n" +
                "						DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "						/* Add success result in save error table */  \n" +
                "						IF (pkitAssemblyID IS NULL) THEN  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
                "						ELSE  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));  \n" +
                "						END IF;  \n" +
                "						/* Add data in table of delimeter table */  \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN  \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)  \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t;  \n" +
                "						END IF;  \n" +
                "						/* select detail of error table */  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "  \n" +
                "						/* select detail in temp table of component sid stock table  */  \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;  \n" +
                "						/* Select data of component */  \n" +
                "						SELECT 	c.*,  \n" +
                "							fun_getDateCodeFormatById(c.dateCodeFormatID) dateCodeFormat,  \n" +
                "							mg.mfgcode AS mfgCode,  \n" +
                "							mg.mfgName AS mfgName,  \n" +
                "                            fun_GetFormattedMfgCode(mg.mfgCode, mg.mfgName, v_mfgNameFormat) mfgCodeName,  \n" +
                "							cp.name AS packagingName,  \n" +
                "							cp.sourceName,  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,  \n" +
                "							mcm.mfgcode AS supplierMFGCode,  \n" +
                "							mcm.mfgName AS supplierMFGName,  \n" +
                "                            fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) supplierMFGCodeName,  \n" +
                "							csup.mfgPN AS supplierMFGPN,  \n" +
                "							csup.packagingID AS supplierPackagingId,  \n" +
                "                            csp.name AS supplierPackagingName,  \n" +
                "							csp.sourceName AS supplierSourceName,  \n" +
                "							csup.minimum AS supplierMinimum,  \n" +
                "							ccpn.id AS cpnID,  \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
                "							rfqroh.rohsIcon AS rohsIcon,  \n" +
                "							rfqroh.name AS rohsName,  \n" +
                "							rfqmou.name AS mountingTypeName,  \n" +
                "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
                "							um.unitName AS uomName,  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
                "							fun_getDateCodeFormatById(mg.dateCodeFormatID) AS mfg_dateCodeFormat,  \n" +
                "							mg.dateCodeFormatID AS mfg_dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
                "						FROM vu_component_mpn AS c  \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN vu_component_spn AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
                "                        LEFT JOIN component_packagingmst cp on cp.id = c.packagingID AND cp.isdeleted = 0  \n" +
                "                        LEFT JOIN component_packagingmst csp on csp.id = csup.packagingID AND csp.isdeleted = 0  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
                "						WHERE c.id = v_componentId;  \n" +
                "  \n" +
                "						/* select data of data element of component sid stock */  \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`  \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv  \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl  \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;  \n" +
                "						/* select data of cpn */  \n" +
                "						SELECT 	id, refComponentID, refCPNPartID  \n" +
                "						FROM 	component_cust_alias_rev_pn  \n" +
                "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;  \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0  \n" +
                "						) AND isDeleted = 0;  \n" +
                "  \n" +
                "						/* select detail of bom */  \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,  \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN  \n" +
                "						FROM 		rfq_lineitems_alternatepart rla  \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                "						WHERE 		rla.isDeleted = 0  \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))  \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)  \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);  \n" +
                "  \n" +
                "					ELSE  \n" +
                "						/* Found any error then select error  */  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "					END IF;  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  #need to remove  \n" +
                "				ELSE  \n" +
                "					/* generate dynamic query and save in temp in case of packing slip */  \n" +
                "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					/* Add success data in temp error table */  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
                "  \n" +
                "					/* Add success data in temp table for select in case of call from packing slip packing slip screen */  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */  \n" +
                "					IF (pCategory = 'M') THEN  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "						SELECT 	c.*,  \n" +
                "							fun_getDateCodeFormatById(c.dateCodeFormatID) dateCodeFormat,  \n" +
                "							fun_GetFormattedMfgCode(mg.mfgCode, mg.mfgName, v_mfgNameFormat) mfgCodeName,  \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,  \n" +
                "							mcm.mfgcode AS supplierMFGCode,  \n" +
                "							mcm.mfgName AS supplierMFGName,  \n" +
                "                            fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) supplierMFGCodeName,  \n" +
                "							csup.packagingID AS supplierPackagingId,  \n" +
                "							csup.mfgPN AS supplierMFGPN,  \n" +
                "							csup.id AS supplierMFGPNID,  \n" +
                "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,  \n" +
                "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,  \n" +
                "							ccpn.id AS cpnID,  \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
                "							rfqroh.rohsIcon AS rohsIcon,  \n" +
                "							rfqroh.name AS rohsName,  \n" +
                "							rfqmou.name AS mountingTypeName,  \n" +
                "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
                "							um.unitName AS uomName,  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
                "							fun_getDateCodeFormatById(mg.dateCodeFormatID) AS mfg_dateCodeFormat,  \n" +
                "							mg.dateCodeFormatID AS mfg_dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
                "						FROM vu_component_mpn AS c  \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN vu_component_spn AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
                "						WHERE c.id = v_componentId;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);  \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "				SELECT 1;  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "				SELECT 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END block2;  \n" +
                "	ELSE  \n" +
                "		IF (pIsFromUID = 1) THEN  \n" +
                "			SELECT * FROM tempUIDSuccessDetail;  \n" +
                "		ELSE  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "			SELECT 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6074,'2.00','V1',' Bug 42413: Qa Testing issues for #40723: UMID Create Page enhancement Points [Lot Code Changes] - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 6074:
                allDbChangesArray.push(
                /* **************************** New Script -> 28-03-2022 *********************************** */
                "CREATE  or replace VIEW `vu_component` AS  \n" +
                "SELECT  \n" +
                "        `c`.`id` AS `id`,  \n" +
                "        `c`.`mfgType` AS `mfgType`,  \n" +
                "        `c`.`refMfgPNMfgCodeId` AS `refMfgPNMfgCodeId`,  \n" +
                "        `c`.`refSupplierMfgpnComponentID` AS `refSupplierMfgpnComponentID`,  \n" +
                "        `c`.`isCPN` AS `isCPN`,  \n" +
                "        `c`.`isCustom` AS `isCustom`,  \n" +
                "        `c`.`rfqOnly` AS `rfqOnly`,  \n" +
                "        `c`.`category` AS `category`,  \n" +
                "        `c`.`partType` AS `partType`,  \n" +
                "        `c`.`epicorType` AS `epicorType`,  \n" +
                "        `c`.`dataSheetLink` AS `dataSheetLink`,  \n" +
                "        `c`.`imageURL` AS `imageURL`,  \n" +
                "        `c`.`assemblyType` AS `assemblyType`,  \n" +
                "        `c`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `c`.`mfrNameText` AS `mfrNameText`,  \n" +
                "        `c`.`custAssyPN` AS `custAssyPN`,  \n" +
                "        `c`.`rev` AS `rev`,  \n" +
                "        `c`.`mfgPN` AS `mfgPN`,  \n" +
                "        `c`.`assyCode` AS `assyCode`,  \n" +
                "        `c`.`nickName` AS `nickName`,  \n" +
                "        `c`.`PIDCode` AS `PIDCode`,  \n" +
                "        `c`.`isPIDManual` AS `isPIDManual`,  \n" +
                "        `c`.`productionPN` AS `productionPN`,  \n" +
                "        `c`.`costCategoryID` AS `costCategoryID`,  \n" +
                "        `c`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "        `c`.`detailDescription` AS `detailDescription`,  \n" +
                "        `c`.`specialNote` AS `specialNote`,  \n" +
                "        `c`.`purchasingComment` AS `purchasingComment`,  \n" +
                "        `c`.`partStatus` AS `partStatus`,  \n" +
                "        `c`.`partStatusText` AS `partStatusText`,  \n" +
                "        `c`.`ltbDate` AS `ltbDate`,  \n" +
                "        `c`.`eolDate` AS `eolDate`,  \n" +
                "        `c`.`obsoleteDate` AS `obsoleteDate`,  \n" +
                "        `c`.`reversalDate` AS `reversalDate`,  \n" +
                "        `c`.`isReversal` AS `isReversal`,  \n" +
                "        `c`.`predictedObsolescenceYear` AS `predictedObsolescenceYear`,  \n" +
                "        `c`.`leadTime` AS `leadTime`,  \n" +
                "        `c`.`rfqNumber` AS `rfqNumber`,  \n" +
                "        `c`.`quoteValidTillDate` AS `quoteValidTillDate`,  \n" +
                "        `c`.`internalReference` AS `internalReference`,  \n" +
                "        `c`.`serialNumber` AS `serialNumber`,  \n" +
                "        `c`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `c`.`rohsText` AS `rohsText`,  \n" +
                "        `c`.`rohsDeviation` AS `rohsDeviation`,  \n" +
                "        `c`.`isHazmatMaterial` AS `isHazmatMaterial`,  \n" +
                "        `c`.`mslID` AS `mslID`,  \n" +
                "        `c`.`isWaterSoluble` AS `isWaterSoluble`,  \n" +
                "        `c`.`isNoClean` AS `isNoClean`,  \n" +
                "        `c`.`isFluxNotApplicable` AS `isFluxNotApplicable`,  \n" +
                "        `c`.`packageQty` AS `packageQty`,  \n" +
                "        `c`.`countryOfOrigin` AS `countryOfOrigin`,  \n" +
                "        `c`.`htsCode` AS `htsCode`,  \n" +
                "        `c`.`deviceMarking` AS `deviceMarking`,  \n" +
                "        `c`.`packagingID` AS `packagingID`,  \n" +
                "        `c`.`packaging` AS `packaging`,  \n" +
                "        `c`.`minimum` AS `minimum`,  \n" +
                "        `c`.`mult` AS `mult`,  \n" +
                "        `c`.`umidSPQ` AS `umidSPQ`,  \n" +
                "        `c`.`unit` AS `unit`,  \n" +
                "        `c`.`uomClassID` AS `uomClassID`,  \n" +
                "        `c`.`uom` AS `uom`,  \n" +
                "        `c`.`uomText` AS `uomText`,  \n" +
                "        `c`.`pcbPerArray` AS `pcbPerArray`,  \n" +
                "        `c`.`price` AS `price`,  \n" +
                "        `c`.`isGoodPart` AS `isGoodPart`,  \n" +
                "        `c`.`replacementPartID` AS `replacementPartID`,  \n" +
                "        `c`.`systemGenerated` AS `systemGenerated`,  \n" +
                "        `c`.`documentPath` AS `documentPath`,  \n" +
                "        `c`.`frequencyType` AS `frequencyType`,  \n" +
                "        `c`.`frequency` AS `frequency`,  \n" +
                "        `c`.`salesacctId` AS `salesacctId`,  \n" +
                "        `c`.`purchaseacctId` AS `purchaseacctId`,  \n" +
                "        `c`.`isReceiveBulkItem` AS `isReceiveBulkItem`,  \n" +
                "        `c`.`dateCodeFormatID` AS `dateCodeFormatID`,  \n" +
                "        `c`.`isDateCodeFormat` AS `isDateCodeFormat`,  \n" +
                "        `c`.`unqDate` AS `unqDate`,  \n" +
                "        `c`.`isDeleted` AS `isDeleted`,  \n" +
                "        `c`.`createdBy` AS `createdBy`,  \n" +
                "        `c`.`createdAt` AS `createdAt`,  \n" +
                "        `c`.`createByRoleId` AS `createByRoleId`,  \n" +
                "        `c`.`updatedBy` AS `updatedBy`,  \n" +
                "        `c`.`updatedAt` AS `updatedAt`,  \n" +
                "        `c`.`updateByRoleId` AS `updateByRoleId`,  \n" +
                "        `c`.`deletedBy` AS `deletedBy`,  \n" +
                "        `c`.`deletedAt` AS `deletedAt`,  \n" +
                "        `c`.`deleteByRoleId` AS `deleteByRoleId`,  \n" +
                "        `ca`.`packaginggroupID` AS `packaginggroupID`,  \n" +
                "        `ca`.`isCloudApiUpdateAttribute` AS `isCloudApiUpdateAttribute`,  \n" +
                "        `ca`.`functionalCategoryID` AS `functionalCategoryID`,  \n" +
                "        `ca`.`functionalCategoryText` AS `functionalCategoryText`,  \n" +
                "        `ca`.`mountingTypeID` AS `mountingTypeID`,  \n" +
                "        `ca`.`mountingTypeText` AS `mountingTypeText`,  \n" +
                "        `ca`.`isEpoxyMount` AS `isEpoxyMount`,  \n" +
                "        `ca`.`partPackageID` AS `partPackageID`,  \n" +
                "        `ca`.`partPackage` AS `partPackage`,  \n" +
                "        `ca`.`connecterTypeID` AS `connecterTypeID`,  \n" +
                "        `ca`.`connectorTypeText` AS `connectorTypeText`,  \n" +
                "        `ca`.`feature` AS `feature`,  \n" +
                "        `ca`.`noOfPosition` AS `noOfPosition`,  \n" +
                "        `ca`.`noOfPositionText` AS `noOfPositionText`,  \n" +
                "        `ca`.`noOfRows` AS `noOfRows`,  \n" +
                "        `ca`.`noOfRowsText` AS `noOfRowsText`,  \n" +
                "        `ca`.`operatingTemp` AS `operatingTemp`,  \n" +
                "        `ca`.`minOperatingTemp` AS `minOperatingTemp`,  \n" +
                "        `ca`.`maxOperatingTemp` AS `maxOperatingTemp`,  \n" +
                "        `ca`.`temperatureCoefficient` AS `temperatureCoefficient`,  \n" +
                "        `ca`.`temperatureCoefficientValue` AS `temperatureCoefficientValue`,  \n" +
                "        `ca`.`temperatureCoefficientUnit` AS `temperatureCoefficientUnit`,  \n" +
                "        `ca`.`pitch` AS `pitch`,  \n" +
                "        `ca`.`pitchMating` AS `pitchMating`,  \n" +
                "        `ca`.`sizeDimension` AS `sizeDimension`,  \n" +
                "        `ca`.`length` AS `length`,  \n" +
                "        `ca`.`width` AS `width`,  \n" +
                "        `ca`.`height` AS `height`,  \n" +
                "        `ca`.`heightText` AS `heightText`,  \n" +
                "        `ca`.`tolerance` AS `tolerance`,  \n" +
                "        `ca`.`voltage` AS `voltage`,  \n" +
                "        `ca`.`value` AS `value`,  \n" +
                "        `ca`.`powerRating` AS `powerRating`,  \n" +
                "        `ca`.`weight` AS `weight`,  \n" +
                "        `ca`.`color` AS `color`,  \n" +
                "        `ca`.`isTemperatureSensitive` AS `isTemperatureSensitive`,  \n" +
                "        IFNULL(`cb`.`bomLock`, 0) AS `bomLock`,  \n" +
                "        `cb`.`liveInternalVersion` AS `liveInternalVersion`,  \n" +
                "        `cb`.`exteranalAPICallStatus` AS `exteranalAPICallStatus`,  \n" +
                "        `cb`.`isBOMVerified` AS `isBOMVerified`,  \n" +
                "        `cb`.`liveVersion` AS `liveVersion`,  \n" +
                "        `cb`.`isActivityStart` AS `isActivityStart`,  \n" +
                "        `cb`.`activityStartBy` AS `activityStartBy`,  \n" +
                "        `cb`.`activityStartAt` AS `activityStartAt`,  \n" +
                "        `cb`.`activityStopAt` AS `activityStopAt`,  \n" +
                "        `cs`.`functionalTypePartRequired` AS `functionalTypePartRequired`,  \n" +
                "        `cs`.`mountingTypePartRequired` AS `mountingTypePartRequired`,  \n" +
                "        `cs`.`businessRisk` AS `businessRisk`,  \n" +
                "        `cs`.`totalSolderPoints` AS `totalSolderPoints`,  \n" +
                "        IFNULL(`cs`.`trackSerialNumber`, 0) AS `trackSerialNumber`,  \n" +
                "        IFNULL(`cs`.`umidVerificationRequire`, 0) AS `umidVerificationRequire`,  \n" +
                "        `cs`.`isAutoVerificationOfAllAssemblyParts` AS `isAutoVerificationOfAllAssemblyParts`,  \n" +
                "        IFNULL(`cs`.`restrictUSEwithpermission`, 0) AS `restrictUSEwithpermission`,  \n" +
                "        IFNULL(`cs`.`restrictPackagingUseWithpermission`,  \n" +
                "                0) AS `restrictPackagingUseWithpermission`,  \n" +
                "        IFNULL(`cs`.`restrictUsePermanently`, 0) AS `restrictUsePermanently`,  \n" +
                "        IFNULL(`cs`.`restrictPackagingUsePermanently`,  \n" +
                "                0) AS `restrictPackagingUsePermanently`,  \n" +
                "        `cs`.`scrapRatePercentagePerBuild` AS `scrapRatePercentagePerBuild`,  \n" +
                "        `cs`.`scrapValuePerBuild` AS `scrapValuePerBuild`,  \n" +
                "        `cs`.`plannedOverRunPercentagePerBuild` AS `plannedOverRunPercentagePerBuild`,  \n" +
                "        `cs`.`plannedValuePerBuild` AS `plannedValuePerBuild`,  \n" +
                "        `cs`.`selfLifeDays` AS `selfLifeDays`,  \n" +
                "        `cs`.`shelfLifeAcceptanceDays` AS `shelfLifeAcceptanceDays`,  \n" +
                "        `cs`.`shelfListDaysThresholdPercentage` AS `shelfListDaysThresholdPercentage`,  \n" +
                "        `cs`.`maxShelfLifeAcceptanceDays` AS `maxShelfLifeAcceptanceDays`,  \n" +
                "        `cs`.`maxShelfListDaysThresholdPercentage` AS `maxShelfListDaysThresholdPercentage`,  \n" +
                "        `cs`.`shelfLifeDateType` AS `shelfLifeDateType`,  \n" +
                "        `cs`.`alertExpiryDays` AS `alertExpiryDays`,  \n" +
                "        `cs`.`programingRequired` AS `programingRequired`,  \n" +
                "        `cs`.`driverToolRequired` AS `driverToolRequired`,  \n" +
                "        `cs`.`matingPartRquired` AS `matingPartRquired`,  \n" +
                "        `cs`.`pickupPadRequired` AS `pickupPadRequired`,  \n" +
                "        `cs`.`functionalTestingRequired` AS `functionalTestingRequired`,  \n" +
                "        `cs`.`requiredTestTime` AS `requiredTestTime`,  \n" +
                "        `cs`.`saftyStock` AS `saftyStock`,  \n" +
                "        `cs`.`eau` AS `eau`,  \n" +
                "        `cs`.`packagingWeight` AS `packagingWeight`,  \n" +
                "        `cs`.`packagingWeightUom` AS `packagingWeightUom`,  \n" +
                "        `cs`.`grossWeight` AS `grossWeight`,  \n" +
                "        `cs`.`grossWeightUom` AS `grossWeightUom`,  \n" +
                "        `cs`.`maxPriceLimit` AS `maxPriceLimit`,  \n" +
                "        `cs`.`maxQtyonHand` AS `maxQtyonHand`  \n" +
                "    FROM  \n" +
                "        (((`component` `c`  \n" +
                "        LEFT JOIN `component_attributes` `ca` ON ((`ca`.`refComponentID` = (CASE  \n" +
                "            WHEN (`c`.`mfgType` = 'MFG') THEN `c`.`id`  \n" +
                "            ELSE `c`.`refSupplierMfgpnComponentID`  \n" +
                "        END))))  \n" +
                "        LEFT JOIN `component_bomsetting` `cb` ON ((`cb`.`refComponentID` = (CASE  \n" +
                "            WHEN (`c`.`mfgType` = 'MFG') THEN `c`.`id`  \n" +
                "            ELSE `c`.`refSupplierMfgpnComponentID`  \n" +
                "        END))))  \n" +
                "        LEFT JOIN `component_settings` `cs` ON ((`cs`.`refComponentID` = (CASE  \n" +
                "            WHEN (`c`.`mfgType` = 'MFG') THEN `c`.`id`  \n" +
                "            ELSE `c`.`refSupplierMfgpnComponentID`  \n" +
                "        END))))  \n" +
                "    WHERE  \n" +
                "        (`c`.`isDeleted` = 0);  \n" +
                /* **************************** Add Script Version -> 28-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (6075,'2.00','V1',' Bug 42594: Showing 404 error while opening Part details - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
                case 6075:
                    allDbChangesArray.push(
                    /* **************************** New Script -> 28-03-2022 *********************************** */
                    "DROP TRIGGER IF EXISTS `Trg_AI_component`;  \n" +
                    "CREATE TRIGGER `Trg_AI_component` AFTER INSERT ON `component` FOR EACH ROW BEGIN  \n" +
                    "	IF(New.isCustom=1 AND New.category=3) THEN  \n" +
                    "	INSERT INTO binmst (`name`,warehouseID,isActive,isPermanentBin,systemGenerated,createdBy,updatedBy,isRandom,createByRoleId,updateByRoleId)VALUES  \n" +
                    "		  (UPPER(NEW.Pidcode),-5,1,1,1,New.createdBy,New.updatedBy,1,New.createByRoleId,New.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "	/* Once remove Below insert query plese revert code in 'Sproc_RemoveMPNFromCPNMapping' & 'Sproc_UpdatePartInternalVersion' SP for update component_bomsetting setting table. direct update table instead of fetch update partids in temp table. */  \n" +
                    "	IF(New.category=3 OR New.iscpn=1) THEN  \n" +
                    "	  INSERT INTO component_bomsetting(refComponentID,liveInternalVersion,bomLock,isBOMVerified,isDeleted,createdBy,createdAt,createByRoleId,  \n" +
                    "	  updatedBy,updatedAt,updateByRoleId) VALUES (NEW.id,0,0,0,0,NEW.createdBy,NEW.createdAt,NEW.createByRoleId,  \n" +
                    "	  NEW.updatedBy,NEW.updatedAt,NEW.updateByRoleId);  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "    if   (new.mfgtype = 'MFG' ) then  \n" +
                    "		insert into  component_attributes  \n" +
                    "					(refComponentID,		packaginggroupID,				isCloudApiUpdateAttribute,	functionalCategoryID,  \n" +
                    "					functionalCategoryText,	mountingTypeID,					mountingTypeText,			isEpoxyMount,  \n" +
                    "					partPackageID,			partPackage,					connecterTypeID,			connectorTypeText,  \n" +
                    "					feature,				noOfPosition,					noOfPositionText,			noOfRows,  \n" +
                    "					noOfRowsText,			operatingTemp,					minOperatingTemp,			maxOperatingTemp,  \n" +
                    "					temperatureCoefficient,	temperatureCoefficientValue,	temperatureCoefficientUnit,	pitch,  \n" +
                    "					pitchMating,			sizeDimension,					length,						width,  \n" +
                    "					height,					heightText,						tolerance,					voltage,  \n" +
                    "					`value`,					powerRating,					weight,						color,  \n" +
                    "					isTemperatureSensitive,	isDeleted,						createdBy,					createdAt,  \n" +
                    "					createByRoleId  \n" +
                    "					)  \n" +
                    "			values(new.id, 					new.packaginggroupID,				new.isCloudApiUpdateAttribute,	new.functionalCategoryID,  \n" +
                    "					new.functionalCategoryText,	new.mountingTypeID,					new.mountingTypeText,			new.isEpoxyMount,  \n" +
                    "					new.partPackageID,			new.partPackage,					new.connecterTypeID,			new.connectorTypeText,  \n" +
                    "					new.feature,				new.noOfPosition,					new.noOfPositionText,			new.noOfRows,  \n" +
                    "					new.noOfRowsText,			new.operatingTemp,					new.minOperatingTemp,			new.maxOperatingTemp,  \n" +
                    "					new.temperatureCoefficient,	new.temperatureCoefficientValue,	new.temperatureCoefficientUnit,	new.pitch,  \n" +
                    "					new.pitchMating,			new.sizeDimension,					new.length,						new.width,  \n" +
                    "					new.height,					new.heightText,						new.tolerance,					new.voltage,  \n" +
                    "					new.value,					new.powerRating,					new.weight,						new.color,  \n" +
                    "					new.isTemperatureSensitive,	new.isDeleted,  				new.createdBy,						new.createdAt,  \n" +
                    "					new.createByRoleId);  \n" +
                    "	end if;  \n" +
                    "END;  \n" +
                    /* **************************** Add Script Version -> 28-03-2022 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                    "VALUES (6076,'2.00','V1',' Bug 42594: Showing 404 error while opening Part details - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                    );
                break;
    }
    return allDbChangesArray;
});

// sample
//break;
//case 6069:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 28-03-2022 *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version -> 28-03-2022 *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
//  "VALUES (6070,'2.00','V1',' ADD FK in all table where we inserted kitmstid - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
//  );
//break;

/* ******** **********************/
// Please Note : Don't forgot to set schemaVersion as '2.00' instead of '1.00' as branch is Dev Branch
/* ******** **********************/