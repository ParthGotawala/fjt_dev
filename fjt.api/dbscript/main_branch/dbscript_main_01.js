(function (maxBuildNumber, userid) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 0:
            /* **************************** New Script -> 13-07-2018  *********************************** */
            allDbChangesArray.push(
                "CREATE TABLE IF NOT EXISTS `dbversion` (  \n" +
                "  `buildNumber` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `schemaVersion` varchar(10) NOT NULL,  \n" +
                "  `description` varchar(255) DEFAULT NULL,  \n" +
                "  `releaseName` char(2) NOT NULL,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  PRIMARY KEY (`buildNumber`)  \n" +
                ") ;  \n" +
                /* **************************** Add Script Version -> 13-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`)" +
                " VALUES (1,'1.00','V1','created table dbversion if not exists and sample entry'," + userid + ");"
            );
            break;
        case 1:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-07-2018  *********************************** */
                "ALTER TABLE dbversion  \n" +
                "MODIFY buildNumber INT(11) NOT NULL ; \n" +
                /* **************************** Add Script Version -> 13-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (2,'1.00','V1',' Modify dbversion table for buildNumber field - KETAN  '," + userid + ");"
            );
            break;
        case 2:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-07-2018  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BI_TimeLineLog` ;  \n" +
                "CREATE TRIGGER `Trg_BI_TimeLineLog` BEFORE INSERT ON `timeline`   \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE lvRefTransID INT(11);  \n" +
                "	DECLARE lvGencFileOwnerType VARCHAR(255);  \n" +
                "	DECLARE lvGencOriginalName VARCHAR(255);	  \n" +
                "	DECLARE lvWoID INT(11);	  \n" +
                "	DECLARE lvWoNumber VARCHAR(255);  \n" +
                "	DECLARE lvOpName VARCHAR(255);  \n" +
                "	DECLARE lvActionType VARCHAR(50);  \n" +
                "	DECLARE lvClusterName VARCHAR(255);  \n" +
                "	DECLARE lvPartNumber VARCHAR(255);  \n" +
                "	DECLARE lvAssetName VARCHAR(255);   \n" +
                "	DECLARE lvEmpName VARCHAR(255);   \n" +
                "	DECLARE lvEcoNumber VARCHAR(255);  \n" +
                "	DECLARE lvClusterID INT(11);  \n" +
                "	DECLARE lvWoOpIDs VARCHAR(5000);  \n" +
                "	DECLARE lvPartID INT(11);  \n" +
                "	DECLARE lvEqpID INT(11);  \n" +
                "	DECLARE lvEmpID INT(11);  \n" +
                "	DECLARE lvEntityID INT(11);  \n" +
                "	DECLARE lvRefParentId INT(11);  \n" +
                "	DECLARE lvGencFolderName VARCHAR(255);  \n" +
                "  \n" +
                "       CASE  NEW.refTransTable  \n" +
                "  \n" +
                "	 WHEN \"genericfiles\" THEN   \n" +
                "  \n" +
                "		SELECT refTransID,gencFileOwnerType,gencOriginalName,refParentId   \n" +
                "				INTO lvRefTransID,lvGencFileOwnerType,lvGencOriginalName,lvRefParentId  \n" +
                "		FROM genericfiles WHERE gencFileID = NEW.refTransID ;  \n" +
                "  \n" +
                "  \n" +
                "	       IF (lvRefTransID IS NOT NULL AND lvGencFileOwnerType IS NOT NULL AND NEW.eventAction IS NOT NULL) THEN  \n" +
                "  \n" +
                "	       SELECT CASE NEW.eventAction WHEN 1 THEN \"uploaded\" WHEN 2 THEN \"updated\" WHEN 3 THEN \"deleted\"  \n" +
                "				WHEN 4 THEN \"downloaded\" WHEN 5 THEN \"moved to folder\" WHEN 6 THEN \"moved to other folder\"  \n" +
                "				WHEN 7 THEN \"viewed\" WHEN 8 THEN \"opened in edit mode\"  \n" +
                "				END AS actionType INTO lvActionType;  \n" +
                "  \n" +
                "		CASE  lvGencFileOwnerType  \n" +
                "		   WHEN 'workorder' THEN  	  \n" +
                "			SELECT woID, woNumber INTO lvWoID,lvWoNumber FROM workorder WHERE woID = lvRefTransID ;  \n" +
                "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType, \" for work order\") ;  \n" +
                "  \n" +
                "			IF(NEW.eventAction = 5) THEN  \n" +
                "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ' , lvActionType,' \"',  \n" +
                "			  (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for work order ',lvWoNumber,' by ',  \n" +
                "								(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;  \n" +
                "			ELSE  \n" +
                " 			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ', lvActionType,' for work order ',lvWoNumber,' by ',  \n" +
                "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SET NEW.eventType = 4.22;  \n" +
                "			IF(NEW.eventAction <> 3) THEN  \n" +
                "			  SET NEW.url = CONCAT(\"workorder/manage/documents/\",lvWoID) ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		   WHEN 'workorder_operation' THEN  	  \n" +
                "			SELECT woop.opName,(SELECT woNumber FROM workorder WHERE woID = woop.woID LIMIT 1) AS woNumber INTO lvOpName,lvWoNumber   \n" +
                "			FROM workorder_operation woop WHERE woop.woOPID = lvRefTransID ;  \n" +
                "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType,\" for work order operation\") ;  \n" +
                "  \n" +
                "			IF(NEW.eventAction = 5) THEN  \n" +
                "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ' , lvActionType,' \"',  \n" +
                "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',  \n" +
                "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;	  \n" +
                "			ELSE  \n" +
                "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ', lvActionType,' for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',  \n" +
                "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;  \n" +
                "			END IF;				  \n" +
                "  \n" +
                "			SET NEW.eventType = 4.23;				  \n" +
                "			IF(NEW.eventAction <> 3) THEN				  \n" +
                "			  SET NEW.url = CONCAT(\"workorder/operation/documents/\",lvRefTransID) ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		   WHEN 'eco_request' THEN  	  \n" +
                "			SELECT er.ecoNumber ,er.woID,(SELECT woNumber FROM workorder WHERE woID = er.woID LIMIT 1) AS woNumber INTO lvEcoNumber,lvWoID,lvWoNumber   \n" +
                "			FROM eco_request er WHERE er.ecoReqID = lvRefTransID ;  \n" +
                "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType,\" for eco request in work order\") ;  \n" +
                "  \n" +
                "			IF(NEW.eventAction = 5) THEN			  \n" +
                "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ' , lvActionType,' \"',  \n" +
                "			   (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',  \n" +
                "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;  \n" +
                "			ELSE  \n" +
                "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ',lvActionType,' for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',  \n" +
                "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;  \n" +
                "			END IF;		  \n" +
                "  \n" +
                "			SET NEW.eventType = 4.24;				  \n" +
                "			IF(NEW.eventAction <> 3) THEN				  \n" +
                "			  SET NEW.url = CONCAT(\"workorder/workorders/ecorequest/\",lvWoID,\"/\",lvRefTransID) ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  		   ELSE   \n" +
                "			BEGIN END;  	  \n" +
                " 		END CASE;	  \n" +
                "  \n" +
                "	       END IF;  \n" +
                "  \n" +
                "	WHEN \"generic_folder\" THEN   \n" +
                "  \n" +
                "		SELECT refTransID,gencFileOwnerType,gencFolderName,refParentId   \n" +
                "					INTO lvRefTransID,lvGencFileOwnerType,lvGencFolderName,lvRefParentId   \n" +
                "		FROM generic_folder WHERE gencFolderID = NEW.refTransID ;  \n" +
                "  \n" +
                "    	   IF (lvRefTransID IS NOT NULL AND lvGencFileOwnerType IS NOT NULL AND NEW.eventAction IS NOT NULL) THEN  \n" +
                "  \n" +
                "		SELECT CASE NEW.eventAction WHEN 1 THEN \"created\" WHEN 2 THEN \"renamed\" WHEN 3 THEN \"removed\"   \n" +
                "		WHEN 6 THEN \"moved to other folder\" END AS actionType INTO lvActionType;  \n" +
                "  \n" +
                "		CASE  lvGencFileOwnerType  \n" +
                "		   WHEN 'workorder' THEN  	  \n" +
                "  \n" +
                "			SELECT woID, woNumber INTO lvWoID,lvWoNumber FROM workorder WHERE woID = lvRefTransID ;  \n" +
                "			SET NEW.eventTitle = CONCAT(\"Document folder \",lvActionType, \" for work order\") ;  \n" +
                "  \n" +
                "			IF(NEW.eventAction = 6) THEN  \n" +
                "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' \"',  \n" +
                "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for work order ',lvWoNumber,' by ',  \n" +
                "								(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;  \n" +
                "			ELSE   \n" +
                "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' for work order ',lvWoNumber,' by ',  \n" +
                "								(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;					  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SET NEW.eventType = 4.25;  \n" +
                "			IF(NEW.eventAction <> 3) THEN  \n" +
                "			  SET NEW.url = CONCAT(\"workorder/manage/documents/\",lvWoID) ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		  WHEN 'workorder_operation' THEN  	  \n" +
                "  \n" +
                "			SELECT woop.opName,(SELECT woNumber FROM workorder WHERE woID = woop.woID LIMIT 1) AS woNumber INTO lvOpName,lvWoNumber   \n" +
                "			FROM workorder_operation woop WHERE woop.woOPID = lvRefTransID ;  \n" +
                "			SET NEW.eventTitle = CONCAT(\"Document folder \",lvActionType, \" for work order operation\") ;  \n" +
                "  \n" +
                "			IF(NEW.eventAction = 6) THEN  \n" +
                "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' \"',  \n" +
                "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',  \n" +
                "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;  \n" +
                "			ELSE   \n" +
                "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,'   \n" +
                "			     for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',  \n" +
                "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SET NEW.eventType = 4.26;  \n" +
                "			IF(NEW.eventAction <> 3) THEN  \n" +
                "			   SET NEW.url = CONCAT(\"workorder/operation/documents/\",lvRefTransID) ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		  WHEN 'eco_request' THEN  	  \n" +
                "  \n" +
                "			SELECT er.ecoNumber ,er.woID,(SELECT woNumber FROM workorder WHERE woID = er.woID LIMIT 1) AS woNumber INTO lvEcoNumber,lvWoID,lvWoNumber   \n" +
                "			FROM eco_request er WHERE er.ecoReqID = lvRefTransID ;			  \n" +
                "			SET NEW.eventTitle = CONCAT(\"Document folder \",lvActionType,\" for eco request in work order\") ;  \n" +
                "  \n" +
                "			IF(NEW.eventAction = 6) THEN  \n" +
                "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' \"',  \n" +
                "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',  \n" +
                "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;  \n" +
                "			ELSE  \n" +
                "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,'  \n" +
                "			    for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',  \n" +
                "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;				  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SET NEW.eventType = 4.27;  \n" +
                "			IF(NEW.eventAction <> 3) THEN  \n" +
                "			   SET NEW.url = CONCAT(\"workorder/workorders/ecorequest/\",lvWoID,\"/\",lvRefTransID) ;  \n" +
                "			END IF;	  \n" +
                "  \n" +
                "		   ELSE   \n" +
                "			BEGIN END;  		  \n" +
                "  \n" +
                "		   END CASE;	  \n" +
                "  \n" +
                "	   END IF;		  \n" +
                "  \n" +
                "  \n" +
                "	WHEN \"workorder_operation_cluster\" THEN   \n" +
                "		IF(NEW.eventAction = 1 OR NEW.eventAction = 2 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN  \n" +
                "  \n" +
                "			SELECT CASE NEW.eventAction WHEN 1 THEN \"moved\" WHEN 2 THEN \"moved\" END AS actionType INTO lvActionType;		  \n" +
                "  \n" +
                "			SELECT  clusterID,GROUP_CONCAT(woOPID) INTO lvClusterID,lvWoOpIDs  \n" +
                "			FROM  workorder_operation_cluster  \n" +
                "			WHERE FIND_IN_SET(woClusterID,NEW.refTransID);   \n" +
                "  \n" +
                "			SELECT clusterName,woID INTO lvClusterName,lvWoID FROM workorder_cluster WHERE clusterID = lvClusterID ;  \n" +
                "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;  \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(opName) INTO lvOpName  \n" +
                "			FROM workorder_operation  \n" +
                "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);  \n" +
                "  \n" +
                "			SET NEW.eventTitle = CONCAT(\"Operation(s) \",lvActionType,\" to cluster in work order\") ;  \n" +
                "			SET NEW.eventDescription = CONCAT('Operation(s) \"',lvOpName ,'\" ',lvActionType,' to cluster \"',lvClusterName,'\" in work order ',lvWoNumber,' by ',  \n" +
                "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	WHEN \"workorder_operation_part\" THEN 	  \n" +
                "		IF(NEW.eventAction = 1 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN  \n" +
                "  \n" +
                "			SELECT CASE NEW.eventAction WHEN 1 THEN \"added\" END AS actionType INTO lvActionType;			  \n" +
                "  \n" +
                "			SELECT woID,partID,GROUP_CONCAT(woOPID) INTO lvWoID,lvPartID,lvWoOpIDs  \n" +
                "			FROM  workorder_operation_part  \n" +
                "			WHERE FIND_IN_SET(woOPPartID,NEW.refTransID);   \n" +
                "  \n" +
                "			SELECT partNumber INTO lvPartNumber FROM parts WHERE partID = lvPartID;  \n" +
                "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;  \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(opName) INTO lvOpName  \n" +
                "			FROM workorder_operation  \n" +
                "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);  \n" +
                "  \n" +
                "  \n" +
                "			SET NEW.eventTitle = CONCAT(\"Supply & Material \",lvActionType,\" to work order operation(s)\") ;  \n" +
                "			SET NEW.eventDescription = CONCAT('Supply & Material \"',lvPartNumber ,'\" ',lvActionType,' to Operation(s) \"',lvOpName,'\" in work order ',lvWoNumber,' by ',  \n" +
                "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;  \n" +
                "			SET NEW.url = CONCAT(\"workorder/manage/parts/\",lvWoID) ;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	WHEN \"workorder_operation_equipment\" THEN 	  \n" +
                "		IF(NEW.eventAction = 1 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN  \n" +
                "  \n" +
                "			SELECT CASE NEW.eventAction WHEN 1 THEN \"added\" END AS actionType INTO lvActionType;			  \n" +
                "  \n" +
                "			SELECT woID,eqpID,GROUP_CONCAT(woOPID) INTO lvWoID,lvEqpID,lvWoOpIDs  \n" +
                "			FROM  workorder_operation_equipment  \n" +
                "			WHERE FIND_IN_SET(woOpEqpID,NEW.refTransID);   \n" +
                "  \n" +
                "			SELECT assetName INTO lvAssetName FROM equipment WHERE eqpID = lvEqpID;  \n" +
                "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;  \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(opName) INTO lvOpName  \n" +
                "			FROM workorder_operation  \n" +
                "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);  \n" +
                "  \n" +
                "  \n" +
                "			SET NEW.eventTitle = CONCAT(\"Equipment & Tools \",lvActionType,\" to work order operation(s)\") ;  \n" +
                "			SET NEW.eventDescription = CONCAT('Equipment & Tools \"',lvAssetName ,'\" ',lvActionType,' to Operation(s) \"',lvOpName,'\" in work order ',lvWoNumber,' by ',  \n" +
                "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;  \n" +
                "			SET NEW.url = CONCAT(\"workorder/manage/equipments/\",lvWoID) ;  \n" +
                "  \n" +
                "		END IF;	  \n" +
                "	WHEN \"workorder_operation_employee\" THEN 	  \n" +
                "		IF(NEW.eventAction = 1 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN  \n" +
                "  \n" +
                "			SELECT CASE NEW.eventAction WHEN 1 THEN \"added\" END AS actionType INTO lvActionType;			  \n" +
                "  \n" +
                "			SELECT woID,employeeID,GROUP_CONCAT(woOPID) INTO lvWoID,lvEmpID,lvWoOpIDs  \n" +
                "			FROM  workorder_operation_employee  \n" +
                "			WHERE FIND_IN_SET(woOpEmployeeID,NEW.refTransID);   \n" +
                "  \n" +
                "			SELECT CONCAT(firstName,\" \",lastName) INTO lvEmpName FROM employees WHERE id=lvEmpID;  \n" +
                "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;  \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(opName) INTO lvOpName  \n" +
                "			FROM workorder_operation  \n" +
                "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);  \n" +
                "  \n" +
                "  \n" +
                "			SET NEW.eventTitle = CONCAT(\"Employee \",lvActionType,\" to work order operation(s)\") ;  \n" +
                "			SET NEW.eventDescription = CONCAT('Employee \"',lvEmpName ,'\" ',lvActionType,' to Operation(s) \"',lvOpName,'\" in work order ',lvWoNumber,' by ',  \n" +
                "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;  \n" +
                "			SET NEW.url = CONCAT(\"workorder/manage/employees/\",lvWoID) ;  \n" +
                "  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "	WHEN \"dataelement_transactionvalues\" THEN 	  \n" +
                "  \n" +
                "	    IF(NEW.eventAction = 2 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN  \n" +
                "  \n" +
                "		SELECT entityID,RefTransID INTO lvEntityID,lvRefTransID  \n" +
                "		FROM dataelement_transactionvalues  \n" +
                "		WHERE dataElementTransID = NEW.refTransID   \n" +
                "		LIMIT 1;  \n" +
                "  \n" +
                "		SELECT CASE NEW.eventAction WHEN 2 THEN \"updated\" END AS actionType INTO lvActionType;  \n" +
                "  \n" +
                "		CASE  lvEntityID  \n" +
                "		   WHEN \"-7\" THEN  /* -7 --> work order */  \n" +
                "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvRefTransID;   \n" +
                "			SET NEW.eventTitle = CONCAT(\"Other details \",lvActionType,\" for work order\") ;  \n" +
                "			SET NEW.eventDescription = CONCAT(\"Other details \",lvActionType,\" for work order \",lvWoNumber,\" by \",  \n" +
                "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),\".\") ;  \n" +
                "			SET NEW.url = CONCAT(\"workorder/manage/otherdetails/\",lvWoID) ;  \n" +
                "			SET NEW.eventType = 4.20;  \n" +
                "		   WHEN \"-1\" THEN  /* -1 --> work order operation */  \n" +
                "  \n" +
                "			SELECT (SELECT woNumber FROM workorder wo WHERE woID = woop.woID),woop.opName  \n" +
                "			INTO lvWoNumber,lvOpName   \n" +
                "			FROM workorder_operation woop WHERE woop.woOPID = lvRefTransID;   \n" +
                "  \n" +
                "			SET NEW.eventTitle = CONCAT(\"Other details \",lvActionType,\" for work order operation\") ;  \n" +
                "			SET NEW.eventDescription = CONCAT('Other details ',lvActionType,' for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',  \n" +
                "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;  \n" +
                "			SET NEW.url = CONCAT(\"workorder/operation/otherdetails/\",lvWoID) ;	  \n" +
                "			SET NEW.eventType = 4.21;  \n" +
                "  \n" +
                "		   ELSE   \n" +
                "			BEGIN END;  	  \n" +
                "		END CASE;	  \n" +
                "	    END IF;	  \n" +
                "  \n" +
                "	ELSE   \n" +
                "		BEGIN END;   \n" +
                "  \n" +
                "	END CASE;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 14-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (3,'1.00','V1',' Alter Trigger Trg_BI_TimeLineLog - KETAN '," + userid + ");"
            );
            break;
        case 3:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-07-2018  *********************************** */
                "update rfq_lineitems_headers set name = 'CPN' where name = 'Customer PN';  \n" +
                "update rfq_lineitems_headers set name = 'Overage %' where name = 'Overage Percentage';  \n" +
                "  \n" +
                "INSERT INTO `rfq_lineitems_errorcode` (`logicID`, `errorCode`, `errorColor`, `description`, `priority`, `systemVariable`, `createdBy`, `createdAt`)   \n" +
                "SELECT * FROM  \n" +
                "(SELECT '1' logicID,'QPADES' errorCode,'#6d64bd' errorColor,'<% QPA %> not match with <% REF DES %>' description,'1.00' priority,'<% QPA %>,<% REF DES %>' systemVariable,'1' createdBy,'2018-06-26 11:17:54' createdAt) a  \n" +
                "WHERE 1 NOT IN (SELECT logicID FROM rfq_lineitems_errorcode) LIMIT 1;  \n" +
                "  \n" +
                "INSERT INTO `rfq_lineitems_errorcode` (`logicID`, `errorCode`, `errorColor`, `description`, `priority`, `systemVariable`, `createdBy`, `createdAt`)   \n" +
                "SELECT * FROM  \n" +
                "(SELECT '2' logicID,'MFGDIST' errorCode,'#61af86' errorColor,'<% MFG %>  not match with <% MFG PN %>' description,'2.00' priority,'<% MFG %>,<% MFG PN %>' systemVariable,'1' createdBy,'2018-06-26 11:20:42' createdAt) a   \n" +
                "WHERE 2 NOT IN (SELECT logicID FROM rfq_lineitems_errorcode) LIMIT 1;  \n" +
                "  \n" +
                "INSERT INTO `rfq_lineitems_errorcode` (`logicID`, `errorCode`, `errorColor`, `description`, `priority`, `systemVariable`, `createdBy`, `createdAt`)   \n" +
                "SELECT * FROM  \n" +
                "(SELECT '3' logicID,'MFG' errorCode,'#d34dcf' errorColor,'<% MFG %> not match with <% MFG PN %>' description,'3.00' priority,'<% MFG %>,<% MFG PN %>' systemVariable,'1' createdBy,'2018-06-26 11:21:34' createdAt) a   \n" +
                "WHERE 3 NOT IN (SELECT logicID FROM rfq_lineitems_errorcode) LIMIT 1;  \n" +
                "  \n" +
                "INSERT INTO `rfq_lineitems_errorcode` (`logicID`, `errorCode`, `errorColor`, `description`, `priority`, `systemVariable`, `createdBy`, `createdAt`)   \n" +
                "SELECT * FROM  \n" +
                "(SELECT '4' logicID,'DIST' errorCode,'#cf0a36' errorColor,'<% Distributor %> not match with <% Distributor PN %>' description,'4.00' priority,'<% Distributor %>,<% Distributor PN %>' systemVariable,'1' createdBy,'2018-06-26 11:22:05' createdAt) a   \n" +
                "WHERE 4 NOT IN (SELECT logicID FROM rfq_lineitems_errorcode) LIMIT 1;  \n" +
                "  \n" +
                "INSERT INTO `rfq_lineitems_errorcode` (`logicID`, `errorCode`, `errorColor`, `description`, `priority`, `systemVariable`, `createdBy`, `createdAt`)   \n" +
                "SELECT * FROM  \n" +
                "(SELECT '5' logicID,'MFGDISTMAP' errorCode,'#9f8b4b' errorColor,'MFG not matched with DIST' description,'1.00' priority,NULL systemVariable,'1' createdBy,'2018-06-26 11:26:42' createdAt) a   \n" +
                "WHERE 5 NOT IN (SELECT logicID FROM rfq_lineitems_errorcode) LIMIT 1;  \n" +
                "  \n" +
                "INSERT INTO `rfq_lineitems_errorcode` (`logicID`, `errorCode`, `errorColor`, `description`, `priority`, `systemVariable`, `createdBy`, `createdAt`)   \n" +
                "SELECT * FROM  \n" +
                "(SELECT '6' logicID,'MFGPN' errorCode,'#22a9a2' errorColor,'<% MFG PN %> not found.' description,'1.00' priority,'<% MFG PN %>' systemVariable,'1' createdBy,'2018-06-26 11:27:27' createdAt) a  \n" +
                "WHERE 6 NOT IN (SELECT logicID FROM rfq_lineitems_errorcode) LIMIT 1;  \n" +
                "  \n" +
                "INSERT INTO `rfq_lineitems_errorcode` (`logicID`, `errorCode`, `errorColor`, `description`, `priority`, `systemVariable`, `createdBy`, `createdAt`)   \n" +
                "SELECT * FROM  \n" +
                "(SELECT '7' logicID,'GPM','#ad5fa5' errorColor,'Added <% MFG PN %> instead of bad part.' description,'2.00' priority,'<% MFG PN %>' systemVariable,'1' createdBy,'2018-06-30 13:18:54' createdAt) a   \n" +
                "WHERE 7 NOT IN (SELECT logicID FROM rfq_lineitems_errorcode) LIMIT 1;  \n" +
                "  \n" +
                "INSERT INTO `rfq_lineitems_errorcode` (`logicID`, `errorCode`, `errorColor`, `description`, `priority`, `systemVariable`, `createdBy`, `createdAt`)   \n" +
                "SELECT * FROM  \n" +
                "(SELECT '8' logicID,'OBS' errorCode,'#999393' errorColor,'<% MFG PN %> part is obsolete now.' description,'4.00' priority,'<% MFG PN %>' systemVariable,'1' createdBy,'2018-06-30 13:19:54' createdAt) a   \n" +
                "WHERE 8 NOT IN (SELECT logicID FROM rfq_lineitems_errorcode) LIMIT 1;  \n" +

                /* **************************** Add Script Version -> 14-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (4,'1.00','V1',' Update rfq_lineitems_headers, Default entries for RFQ error - RAVI '," + userid + ");"
            );
            break;
        case 4:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-07-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "    IN pWhereClause VARCHAR(21844),  \n" +
                "    IN prfqAssyBomID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE prfqAssyID INT(11);  \n" +
                "    DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;	  \n" +
                "  \n" +
                "    select rfqAssyID into prfqAssyID from rfq_lineitems where rfqAssyBomID = prfqAssyBomID limit 1;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "   	select group_concat(distinct(concat(ra.mfgCode,' | ', ra.mfgPN)))as mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,  \n" +
                "	rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,concat(pt.partTypeName,'|',pc.name) as name,  \n" +
                "	rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig  \n" +
                "	from rfq_lineitems_alternatepart ra  \n" +
                "	left join rfq_lineitems rl on rl.id =ra.rfqLineItemsID  and rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0  \n" +
                "	left join rfq_partcategorymst pc on rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0  \n" +
                "	left join rfq_parttypemst pt on rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0   \n" +
                "	where rl.rfqAssyID = prfqAssyID AND IFNULL(ra.isDeleted,0) = 0  \n" +
                "	group by ra.rfqLineItemsID order by CAST(rl.lineID AS SIGNED);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id ASC\") ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE	  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Results;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (5,'1.00','V1','Get lineItem data for Verify BOM Sproc_GetRFQLineItems - SHIRISH '," + userid + ");"
            );
            break;
        case 5:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-07-2018  *********************************** */
                "create table rfq_lineitems_additional_comment(  \n" +
                "id int primary key auto_increment,  \n" +
                "lineID varchar(8) not null,  \n" +
                "description varchar(1000) not null,  \n" +
                "rfqLineItemID int not null,  \n" +
                "FOREIGN KEY (rfqLineItemID) REFERENCES rfq_lineitems(id),  \n" +
                "rfqAssyBomID int not null,  \n" +
                "FOREIGN KEY (rfqAssyBomID) REFERENCES rfq_assy_bom(id),  \n" +
                "`createdBy` varchar(255) DEFAULT NULL,  \n" +
                "  `createdAt` datetime DEFAULT NULL,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) DEFAULT NULL DEFAULT '0'  \n" +
                " );  \n" +
                /* **************************** Add Script Version -> 16-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (6,'1.00','V1',' create reflineitemsAdditionalComment - Mona '," + userid + ");"
            );
            break;
        case 6:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-07-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_ValidateWorkorderAndPublish` ;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateWorkorderAndPublish`(  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pwoStatus INT,  \n" +
                "	IN pupdatedBy INT  \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "	/* case 1 - any operation with rework than previous operation must have 'inspection process'*/  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;   \n" +
                "	CREATE TEMPORARY TABLE temp_operation_error  \n" +
                "	(  \n" +
                "	     errorText NVARCHAR(2000)  \n" +
                "	);  \n" +
                "  \n" +
                "	/**************************************** Rework Operation Validation ****************************************************/  \n" +
                "	block1: BEGIN  \n" +
                "		DECLARE current_opnumber DECIMAL(6,2) DEFAULT 0;  \n" +
                "		DECLARE current_previousopnumber DECIMAL(6,2) DEFAULT 0;  \n" +
                "		DECLARE current_inspection_or_rework_opnumber DECIMAL(6,2) DEFAULT 0;  \n" +
                "		DECLARE current_operationTypeID INT DEFAULT 0;  \n" +
                "		DECLARE current_qtyControl INT DEFAULT 0;  \n" +
                "		DECLARE current_isIssueQty INT DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE first_opnumber DECIMAL(6,2) DEFAULT 0;  \n" +
                "		DECLARE InspectionOperationTypeID INT DEFAULT 0;  \n" +
                "		DECLARE IsInspectionProcess INT DEFAULT 0;  \n" +
                "		DECLARE IsInValidReworkOperation INT DEFAULT 0;  \n" +
                "		DECLARE found_in_paralleloperation INT DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE current_opname NVARCHAR(500) DEFAULT '';  \n" +
                "		DECLARE current_woopid NVARCHAR(500) DEFAULT '';  \n" +
                "  \n" +
                "		-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                "		DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "  \n" +
                "		-- 2 declare the cursor operation  \n" +
                "		DECLARE operation_cursor CURSOR FOR  \n" +
                "		SELECT opnumber	FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isrework=1 ORDER BY opnumber;  \n" +
                "  \n" +
                "		-- 3 set exit_loop flag to true if there are no more rows  \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "  \n" +
                "		-- get first operation workorder  \n" +
                "		SELECT MIN(opnumber) INTO first_opnumber FROM workorder_operation wo   \n" +
                "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "		-- get inspection process type id  \n" +
                "		SET InspectionOperationTypeID := 0;  \n" +
                "		SELECT genccategoryid INTO InspectionOperationTypeID FROM genericcategory   \n" +
                "			WHERE genccategoryname='inspection process' AND deletedat IS NULL AND categorytype = 'operation type' LIMIT 1;  \n" +
                "  \n" +
                "  \n" +
                "		 -- open the cursor  \n" +
                "		OPEN operation_cursor;  \n" +
                "  \n" +
                "		 -- start looping  \n" +
                "		operation_loop: LOOP  \n" +
                "  \n" +
                "			-- read the name from next row into the variables   \n" +
                "			FETCH operation_cursor INTO current_opnumber;  \n" +
                "  \n" +
                "  \n" +
                "			-- check if the exit_loop flag has been set by mysql,   \n" +
                "			-- close the cursor and exit the loop if it has.  \n" +
                "			IF exit_loop THEN  \n" +
                "				 CLOSE operation_cursor;  \n" +
                "				 LEAVE operation_loop;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SET current_opname:= '';  \n" +
                "			SET current_woopid:= 0;  \n" +
                "			SET current_operationTypeID:= 0;  \n" +
                "			SET current_qtyControl:= 0;  \n" +
                "			SET current_isIssueQty:= 0;  \n" +
                "			-- get opname and woopid from operation number  \n" +
                "			SELECT opname, woopid, operationTypeID, qtyControl, isIssueQty  \n" +
                "			INTO current_opname, current_woopid, current_operationTypeID, current_qtyControl, current_isIssueQty  \n" +
                "			FROM workorder_operation WHERE opnumber = current_opnumber   \n" +
                "			AND deletedat IS NULL AND woid=pwoid LIMIT 1;  \n" +
                "  \n" +
                "			/**************************************** start - first operation should not be rework type ****************************************************/  \n" +
                "			IF first_opnumber=current_opnumber THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', current_opname,' (', current_opnumber, ')', '</b> is rework operation, it cannot be set as first operation of work order.');   \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;				  \n" +
                "			/**************************************** end - first operation should not be rework type ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation should not be inspection process ****************************************************/  \n" +
                "			SET IsInspectionProcess:=0;  \n" +
                "  \n" +
                "			IF (current_operationTypeID = InspectionOperationTypeID) THEN  \n" +
                "				SET IsInspectionProcess := 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (IsInspectionProcess  > 0) THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>',current_opname,' (', current_opnumber, ')', '</b> is rework operation, it cannot be inspection process.');   \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;	  \n" +
                "			/**************************************** end - rework operation should not be inspection process ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                "			SET IsInValidReworkOperation:=0;  \n" +
                "  \n" +
                "			IF ((current_isIssueQty = 0) OR (current_qtyControl = 0)) THEN  \n" +
                "				SET IsInValidReworkOperation := 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF IsInValidReworkOperation  > 0 THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>',current_opname,' (', current_opnumber, ')', '</b>  is rework operation, it must have manufacturer and issue qty set as true.');   \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;	  \n" +
                "			/**************************************** end - rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - check rework operation should not be in parallel cluster ****************************************************/  \n" +
                "			SET found_in_paralleloperation:= 0;  \n" +
                "  \n" +
                "			SELECT COUNT(*) INTO found_in_paralleloperation FROM workorder_operation_cluster   \n" +
                "			WHERE deletedat IS NULL AND clusterid IN (  \n" +
                "				SELECT clusterid FROM workorder_cluster WHERE woid=pwoid AND deletedat IS NULL AND isparelleloperation=1  \n" +
                "			) AND woopid=current_woopid;  \n" +
                "  \n" +
                "			IF found_in_paralleloperation > 0 THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>',current_opname,' (', current_opnumber, ')', '</b> operation cannot be updated, because rework operation is not allowed in parallel cluster.');   \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - check rework operation should not be in parallel cluster ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - check previous operation of rework operation must be inspection or rework only ****************************************************/  \n" +
                "			-- get previous operation of rework operation  \n" +
                "			SELECT MAX(opnumber) INTO current_previousopnumber FROM workorder_operation wo   \n" +
                "				WHERE opnumber < current_opnumber   \n" +
                "				AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "			-- if found previous operation than check operation is inspection process or not  \n" +
                "			IF current_previousopnumber > 0 THEN  \n" +
                "				SET current_inspection_or_rework_opnumber:= 0;  \n" +
                "  \n" +
                "				-- set checked operation number if found as inspection process  \n" +
                "				SELECT opnumber INTO current_inspection_or_rework_opnumber FROM workorder_operation  \n" +
                "				WHERE ((operationtypeid = InspectionOperationTypeID) OR isrework=1)  \n" +
                "				AND woid=pwoid AND deletedat IS NULL AND opnumber=current_previousopnumber;   \n" +
                "  \n" +
                "				-- set flag false if any operation not found as inspection process   \n" +
                "				IF current_inspection_or_rework_opnumber = 0  THEN  \n" +
                "					SET @stmt_op = CONCAT('Previous operation of ','<b>',current_opname,' (', current_opnumber, ')', '</b> must be inspection operation or rework operation.');   \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET @stmt_op = CONCAT('Previous operation of ','<b>',current_opname,' (', current_opnumber, ')', '</b> must be inspection operation or rework operation.');   \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************** end - check previous operation of rework operation must be inspection or rework only *****************/  \n" +
                "		END LOOP operation_loop;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** start - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/  \n" +
                "		block2: BEGIN  \n" +
                "			-- 1 get list of inspection operation in workorder  \n" +
                "			DECLARE c_opnumber DECIMAL(6,2) DEFAULT 0;  \n" +
                "			DECLARE c_checkopnumber DECIMAL(6,2) DEFAULT 0;  \n" +
                "			DECLARE c_reworkopnumber DECIMAL(6,2) DEFAULT 0;  \n" +
                "			DECLARE temp_opname NVARCHAR(500) DEFAULT 0;  \n" +
                "			DECLARE temp_woopid INT DEFAULT 0;  \n" +
                "			DECLARE temp_isRework INT DEFAULT 0;  \n" +
                "			DECLARE temp_qtyControl INT DEFAULT 0;  \n" +
                "  \n" +
                "			DECLARE IsInValidInspectionOperation INT DEFAULT 0;  \n" +
                "			DECLARE IsParallelClusterOperation INT DEFAULT 0;  \n" +
                "			DECLARE IsReworkInspectionOperation INT DEFAULT 0;  \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                "			DECLARE exit_inspection_loop BOOLEAN DEFAULT FALSE;  \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for inspection operation  \n" +
                "			DECLARE inspection_cursor CURSOR FOR  \n" +
                "			SELECT opnumber FROM workorder_operation  \n" +
                "			WHERE operationtypeid = InspectionOperationTypeID  \n" +
                "			AND woid=pwoid AND deletedat IS NULL;   \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_inspection_loop = TRUE;  \n" +
                "  \n" +
                "			-- open the cursor  \n" +
                "			OPEN inspection_cursor;  \n" +
                "  \n" +
                "			 -- start looping  \n" +
                "			inspection_loop: LOOP  \n" +
                "  \n" +
                "				-- read the name from next row into the variables   \n" +
                "				FETCH inspection_cursor INTO c_opnumber;  \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,   \n" +
                "				-- close the cursor and exit the loop if it has.  \n" +
                "				IF exit_inspection_loop THEN  \n" +
                "					 CLOSE inspection_cursor;  \n" +
                "					 LEAVE inspection_loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET temp_opname:= '';  \n" +
                "				SET temp_woopid:= 0;  \n" +
                "				SET temp_isRework:= 0;  \n" +
                "				SET temp_qtyControl:= 0;  \n" +
                "  \n" +
                "				SELECT opname, woopid, isRework, qtyControl  \n" +
                "				INTO temp_opname, temp_woopid, temp_isRework, temp_qtyControl  \n" +
                "				FROM workorder_operation WHERE opnumber = c_opnumber   \n" +
                "				AND deletedat IS NULL AND woid=pwoid LIMIT 1;  \n" +
                "  \n" +
                "				/**************************************** start - inspection operation should not be rework ****************************************************/  \n" +
                "				SET IsReworkInspectionOperation:= 0;  \n" +
                "				IF (temp_isRework = 1) THEN  \n" +
                "					SET IsReworkInspectionOperation := 1;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF IsReworkInspectionOperation  > 0 THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>',temp_opname,' (', c_opnumber, ')', '</b> is inspection process, it cannot be rework operation.');   \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;	  \n" +
                "				/**************************************** end - inspection operation should not be rework ****************************************************/  \n" +
                "  \n" +
                "				/**************************************** start - inspection operation validation for mfg qty ****************************************************/  \n" +
                "				SET IsInValidInspectionOperation:= 0;  \n" +
                "  \n" +
                "				IF (temp_qtyControl = 0) THEN  \n" +
                "					SET IsInValidInspectionOperation := 1;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF IsInValidInspectionOperation  > 0 THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>',temp_opname,' (', c_opnumber, ')', '</b> is inspection process, it must have manufacturer qty set as true.');   \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;	  \n" +
                "				/**************************************** end - inspection operation validation for mfg qty ****************************************************/  \n" +
                "  \n" +
                "				/**************************************** start - check operation not in parallel cluster ****************************************************/  \n" +
                "				SET IsParallelClusterOperation:= 0;			  \n" +
                "				SELECT COUNT(opnumber) INTO IsParallelClusterOperation FROM workorder_operation   \n" +
                "				 	WHERE deletedat IS NULL AND opNumber=c_opnumber AND woid=pwoid AND woopid IN (  \n" +
                "				 		SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL   \n" +
                "				 			AND clusterid IN (  \n" +
                "								SELECT clusterid FROM workorder_cluster WHERE deletedat IS NULL   \n" +
                "								AND woid=pwoid AND isparelleloperation=1  \n" +
                "				 	)  \n" +
                "				);  \n" +
                "				/**************************************** end - check operation not in parallel cluster ****************************************************/  \n" +
                "  \n" +
                "				/************ start - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/  \n" +
                "				-- Operation should not in parallel cluster for rework validation because we allow inspection process in sequence for parallel cluster  \n" +
                "				IF (IsParallelClusterOperation = 0) THEN  \n" +
                "					SET c_checkopnumber:= 0;  \n" +
                "					-- get next operation of inspection operation  \n" +
                "					SELECT MIN(opnumber) INTO c_checkopnumber FROM workorder_operation wo   \n" +
                "						WHERE opnumber > c_opnumber   \n" +
                "						AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "					-- if found next operation than check operation is rework process or not  \n" +
                "					IF c_checkopnumber > 0 THEN  \n" +
                "						SET c_reworkopnumber:= 0;  \n" +
                "						-- set checked operation number if found as rework process  \n" +
                "						SELECT opnumber INTO c_reworkopnumber FROM workorder_operation  \n" +
                "						WHERE opnumber=c_checkopnumber AND isrework=1  \n" +
                "						AND woid=pwoid AND deletedat IS NULL;   \n" +
                "  \n" +
                "						-- set flag false if any operation not found as rework process   \n" +
                "						IF c_reworkopnumber = 0 THEN  \n" +
                "							SET @stmt_op = CONCAT('Next operation of ','<b>',temp_opname,' (', c_opnumber, ')','</b> must be rework operation.');   \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						SET @stmt_op = CONCAT('Next operation of ','<b>',temp_opname,' (', c_opnumber, ')','</b> must be rework operation.');   \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "					END IF;	  \n" +
                "				END IF;  \n" +
                "				/************ end - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/  \n" +
                "			END LOOP inspection_loop;  \n" +
                "		END block2;  \n" +
                "		/**************************************** end - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** start - case 3 - Check Cluster validations ****************************************************/  \n" +
                "		block3: BEGIN  \n" +
                "			-- 1 get list of cluster in workorder  \n" +
                "			DECLARE current_clusterid INT DEFAULT 0;  \n" +
                "			DECLARE current_minopnumber DECIMAL(6,2) DEFAULT 0;  \n" +
                "			DECLARE current_maxopnumber DECIMAL(6,2) DEFAULT 0;  \n" +
                "  \n" +
                "			DECLARE temp_clustername NVARCHAR(100) DEFAULT '';  \n" +
                "			DECLARE temp_isParellelOperation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalidsequenceoperation DECIMAL(6,2) DEFAULT 0;  \n" +
                "			DECLARE found_mismatchoperations INT DEFAULT 0;  \n" +
                "			DECLARE found_operationTypeID INT DEFAULT 0;  \n" +
                "			DECLARE cluster_maxOpNumber DECIMAL(6,2) DEFAULT 0;  \n" +
                "			DECLARE IsReworkParallelCluster INT DEFAULT 0;  \n" +
                "			DECLARE IsPregrorammingParallelCluster INT DEFAULT 0;  \n" +
                "			DECLARE next_operation_to_cluster_is_rework INT DEFAULT 0;  \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                "			DECLARE exit_cluster_loop BOOLEAN DEFAULT FALSE;  \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for cluster  \n" +
                "			DECLARE cluster_cursor CURSOR FOR  \n" +
                "			SELECT DISTINCT clusterid FROM workorder_cluster   \n" +
                "			WHERE deletedat IS NULL AND clusterid IS NOT NULL AND woid=pwoid;  \n" +
                "  \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_cluster_loop = TRUE;  \n" +
                "  \n" +
                "			-- open the cursor  \n" +
                "			OPEN cluster_cursor;  \n" +
                "  \n" +
                "			 -- start looping  \n" +
                "			cluster_loop: LOOP  \n" +
                "  \n" +
                "				-- read the name from next row into the variables   \n" +
                "				FETCH cluster_cursor INTO current_clusterid;  \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,   \n" +
                "				-- close the cursor and exit the loop if it has.  \n" +
                "				IF exit_cluster_loop THEN  \n" +
                "					 CLOSE cluster_cursor;  \n" +
                "					 LEAVE cluster_loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF current_clusterid > 0 THEN	  \n" +
                "					SET temp_clustername:= '';  \n" +
                "					SET temp_isParellelOperation:= 0;  \n" +
                "					SELECT clustername, isparelleloperation INTO temp_clustername, temp_isParellelOperation FROM workorder_cluster WHERE clusterid = current_clusterid LIMIT 1;  \n" +
                "  \n" +
                "					IF(temp_isParellelOperation = 1) THEN  \n" +
                "						/************************** start - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                "						SET IsReworkParallelCluster:=0;  \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsReworkParallelCluster FROM workorder_operation   \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isRework=1 AND woopid  IN (  \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "						);  \n" +
                "  \n" +
                "						IF IsReworkParallelCluster > 0 THEN  \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername,'</b> is parallel cluster, Rework operation is not allowed in parallel cluster.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "						END IF;  \n" +
                "						/************************** end - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                "  \n" +
                "						/************************** start - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/  \n" +
                "						SET IsPregrorammingParallelCluster:=0;  \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsPregrorammingParallelCluster FROM workorder_operation   \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isPreProgrammingComponent=1 AND woopid  IN (  \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "						);  \n" +
                "  \n" +
                "						IF IsPregrorammingParallelCluster > 0 THEN  \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Pre Programming operation is not allowed in parallel cluster.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "						END IF;  \n" +
                "						/************************** end - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/  \n" +
                "  \n" +
                "						/**************** start - all operation must be same in parallel cluster *****************/  \n" +
                "						SET found_mismatchoperations:= 0;  \n" +
                "  \n" +
                "						SELECT COUNT(DISTINCT operationtypeid) INTO found_mismatchoperations FROM workorder_operation WHERE woopid IN (  \n" +
                "							SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "						) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "						IF found_mismatchoperations > 1 THEN  \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Operation type must be same in parallel cluster.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "						ELSE  \n" +
                "							/**************** start - check cluster operation type is inspection than next operation after cluster must be rework only *****************/  \n" +
                "							IF (found_mismatchoperations = 1) THEN  \n" +
                "								SET found_operationTypeID:= 0;  \n" +
                "								SET cluster_maxOpNumber:= 0;  \n" +
                "  \n" +
                "								SELECT DISTINCT operationtypeid, MAX(opNumber) INTO found_operationTypeID, cluster_maxOpNumber FROM workorder_operation WHERE woopid IN (  \n" +
                "									SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "								) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "								IF (found_operationTypeID = InspectionOperationTypeID) THEN  \n" +
                "									SET next_operation_to_cluster_is_rework:= 0;  \n" +
                "  \n" +
                "									SELECT isRework INTO next_operation_to_cluster_is_rework FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND   \n" +
                "									opNumber = (SELECT MIN(opNumber) FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND  \n" +
                "									opNumber > cluster_maxOpNumber);  \n" +
                "  \n" +
                "									IF(next_operation_to_cluster_is_rework = 0) THEN  \n" +
                "										SET @stmt_str = CONCAT('Next operation of ','<b>',temp_clustername, '</b> must be rework operation, beacuse it is inspection parallel cluster.');  \n" +
                "										INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							END IF;		  \n" +
                "							/**************** end - check cluster operation type is inspection than next operation after cluster must be rework only *****************/  \n" +
                "						END IF;	  \n" +
                "						/**************** end - all operation must be same in parallel cluster *****************/						  \n" +
                "					END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "					/**************** start - check sequence of operation number between cluster *****************/  \n" +
                "					SET current_minopnumber:= 0;  \n" +
                "					SET current_maxopnumber:= 0;  \n" +
                "  \n" +
                "					-- find min and max operation number in workorder operation  \n" +
                "					SELECT MIN(opnumber), MAX(opnumber) INTO current_minopnumber, current_maxopnumber FROM workorder_operation WHERE woopid IN   \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE clusterid=current_clusterid AND clusterid IS NOT NULL AND deletedat IS NULL)  \n" +
                "					AND woid = pwoid AND deletedat IS NULL;  \n" +
                "					SET found_invalidsequenceoperation:= 0;  \n" +
                "  \n" +
                "					-- check in between any operation is outside cluster than invalid  \n" +
                "					SELECT COUNT(opnumber) INTO found_invalidsequenceoperation FROM workorder_operation WHERE   \n" +
                "					opnumber > (current_minopnumber) AND opnumber < (current_maxopnumber)  \n" +
                "					AND woid=pwoid AND deletedat IS NULL AND woopid NOT IN  \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE (clusterid = current_clusterid OR clusterid IS NULL) AND deletedat IS NULL)  \n" +
                "					ORDER BY opnumber;	  \n" +
                "					IF found_invalidsequenceoperation > 0 THEN  \n" +
                "						SET @stmt_str = CONCAT('Invalid operation sequence in ', '<b>',temp_clustername,'</b>');   \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/**************** end - check sequence of operation number between cluster *****************/  \n" +
                "				END IF;  \n" +
                "			END LOOP cluster_loop;  \n" +
                "		END block3;  \n" +
                "		/**************************************** end - case 3 - Check Cluster validations ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/  \n" +
                "		block4: BEGIN  \n" +
                "  \n" +
                "			/************ any operation with rework and mfg qty and issue qty is false than not allow to publish ************/  \n" +
                "			DECLARE found_invalid_rework_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_inspection_operation INT DEFAULT 0;  \n" +
                "			DECLARE check_workorder_isrevised INT DEFAULT 0;  \n" +
                "			DECLARE preprogramming_operation_count INT DEFAULT 0;  \n" +
                "			DECLARE certificate_standard_count INT DEFAULT 0;  \n" +
                "			DECLARE first_OpTypeID INT DEFAULT 0;  \n" +
                "  \n" +
                "			SET found_invalid_rework_operation:= 0;  \n" +
                "			SELECT COUNT(*) INTO found_invalid_rework_operation FROM workorder_operation WHERE isrework = 1 AND (qtycontrol=0 OR isIssueQty = 0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_rework_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Rework Operation must have manufacturer and issue qty set as true.');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with rework and mfg qty and issue qty  is false than not allow to publish ************/  \n" +
                "  \n" +
                "  \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/  \n" +
                "  \n" +
                "			SET found_invalid_inspection_operation:= 0;  \n" +
                "			SELECT COUNT(*) INTO found_invalid_inspection_operation FROM workorder_operation WHERE  \n" +
                "			operationTypeID IN (  \n" +
                "					SELECT genccategoryid FROM genericcategory WHERE genccategoryname='inspection process'   \n" +
                "					AND deletedat IS NULL AND categorytype = 'operation type'  \n" +
                "			) AND (qtycontrol=0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_inspection_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Inspection Process must have manufacturer qty set as true');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/  \n" +
                "  \n" +
                "  \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/  \n" +
                "			SET check_workorder_isrevised:= 0;  \n" +
                "			SELECT COUNT(*) INTO check_workorder_isrevised FROM workorder WHERE woid=pwoid AND deletedat IS NULL AND isRevisedWO=1;  \n" +
                "			IF check_workorder_isrevised > 0 THEN  \n" +
                "				SET first_OpTypeID:=0;  \n" +
                "				SELECT operationtypeid INTO first_OpTypeID FROM workorder_operation WHERE opNumber = first_opnumber AND woid=pwoid AND deletedAt IS NULL;  \n" +
                "				IF(first_OpTypeID <> InspectionOperationTypeID) THEN   \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES ('First Operation must be inspection for revised workorder !!');  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/  \n" +
                "  \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/  \n" +
                "			SET preprogramming_operation_count:= 0;  \n" +
                "			SELECT COUNT(*) INTO preprogramming_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isPreProgrammingComponent=1;  \n" +
                "			IF preprogramming_operation_count > 1 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only have one pre-programming operation !!');  \n" +
                "			END IF;  \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/  \n" +
                "  \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/  \n" +
                "			-- set flag 1 for standard count ok  \n" +
                "			SET certificate_standard_count:= 0;  \n" +
                "			SELECT COUNT(*) INTO certificate_standard_count FROM certificate_standards   \n" +
                "				WHERE deletedAt IS NULL AND isRequired = 1 AND   \n" +
                "				certificateStandardID NOT IN (SELECT certificateStandardID FROM workorder_certification WHERE woID=pwoid AND deletedAt IS NULL);  \n" +
                "			IF certificate_standard_count > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Please select all required certificate standard for Work Order !!');  \n" +
                "			END IF;  \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/  \n" +
                "  \n" +
                "		END block4;  \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/  \n" +
                "  \n" +
                "		SELECT errorText FROM temp_operation_error;  \n" +
                "  \n" +
                "		/* check all above result, if all is set true than do publish*/  \n" +
                "		IF (SELECT COUNT(*) FROM temp_operation_error) = 0 THEN  \n" +
                "			UPDATE workorder SET updatedby=pupdatedby, isOperationsVerified=1,  \n" +
                "			updatedat=CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') WHERE woid=pwoid;  \n" +
                "		END IF;  \n" +
                "	END block1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (7,'1.00','V1','Alter workorder publish SP for message changes - Vaibhav '," + userid + ");"
            );
            break;
        case 7:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(  \n" +
                "	IN rfqAssyID int(1),  \n" +
                "	IN userID INT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                " DROP TEMPORARY TABLE if exists Results;  \n" +
                "  \n" +
                "    START TRANSACTION;  \n" +
                "  \n" +
                "# Select Consolidated rfq_lineitems  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "		select rfqLineItemsID as rfqLineItemsID,attritionRate,isInstall,   \n" +
                "		isPurchase,partclassID,partTypeID,leadQty,isActive,isNoBidsPN,isDraft,  \n" +
                "		lineID,numOfPosition,rfqAssyID,uomID,ab.rfqAssyBomID,  \n" +
                "		sum(qpa2) qpa, cast((sum(adcost1)/sum(qpa2)) as decimal(10,5)) as valueAddedCost,  \n" +
                "		mfg,count(*)as multiple,group_concat(rfqLineItemsID) as consolidatedLineItemIDs  \n" +
                "		from   \n" +
                "		(select *,(qpa1*valueAddedCost)as adcost1, qpa1 as qpa2, group_concat(distinct(part)) mfg  \n" +
                "		from  \n" +
                "		(select b.rfqLineItemsID, a.valueAddedCost, a.refRFQLineItemID,   \n" +
                "		fun_getQPAOfLineItems(a.lineID,rfqAssyID)as qpa1, (fun_getQPAOfLineItems(a.lineID,rfqAssyID)* a.valueAddedCost)as addCost,   \n" +
                "		concat(b.mfgCode,' | ', b.mfgPN ) as part,a.attritionRate,a.isInstall,   \n" +
                "		a.isPurchase,a.partclassID,a.partTypeID,a.leadQty,a.isActive,a.isNoBidsPN,a.isDraft,  \n" +
                "		a.lineID,a.numOfPosition,a.rfqAssyID,a.uomID,a.rfqAssyBomID  \n" +
                "		from rfq_lineitems_alternatepart b   \n" +
                "        join rfq_lineitems a on b.rfqLineItemsID = a.id AND a.rfqAssyID = rfqAssyID AND IFNULL(a.isDeleted,0) = 0  \n" +
                "		join rfq_parttypemst pt on pt.id = a.partTypeID AND pt.category != 3  \n" +
                "        where IFNULL(b.isDeleted,0) = 0  \n" +
                "		group by b.rfqLineItemsID, b.mfgPN, concat(b.mfgCode,' | ', b.mfgPN)) aa  \n" +
                "		group by aa.rfqLineItemsID) ab   \n" +
                "		group by mfg;  \n" +
                "  \n" +
                "# Delete consolidated lineItem if consolidatedLineItemIDs  change  \n" +
                "			update rfq_consolidated_mfgpn_lineitem cl  \n" +
                "			set   \n" +
                "			cl.isDeleted = true,  \n" +
                "			cl.deletedAt = UTC_DATE(),  \n" +
                "			cl.deletedBy = userID  \n" +
                "			where cl.rfqAssyID = rfqAssyID and cl.id not in (  \n" +
                "            select * from(       \n" +
                "			select id from rfq_consolidated_mfgpn_lineitem rcl  \n" +
                "			join Results R on R.rfqAssyID = rcl.rfqAssyID   \n" +
                "			where rcl.rfqAssyID = rfqAssyID and rcl.id  is not NUll  and rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs  \n" +
                "            and IFNULL(rcl.isDeleted,0) = 0)a);  \n" +
                "  \n" +
                "  \n" +
                "# insert Consolidated lineItems   \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem`  \n" +
                "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,  \n" +
                "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,  \n" +
                "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`)  \n" +
                "		select R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,rfqAssyID `rfqAssyID`,R.`partTypeID`,  \n" +
                "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_DATE() `createdAt`,  \n" +
                "		userID `createdBy`, R.`numOfPosition`,  \n" +
                "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`   \n" +
                "        from Results R  \n" +
                "		 left join rfq_consolidated_mfgpn_lineitem cl on cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs and cl.rfqAssyID = R.rfqAssyID and IFNULL(cl.isDeleted,0) = 0  \n" +
                "		 where cl.id is NUll;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "# insert Consolidated lineItems Quentity  \n" +
                "		INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`  \n" +
                "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)  \n" +
                "		select rq.id `qtyID`, cl.id `consolidateID`,userID `createdBy`,UTC_DATE() `createdAt`  from rfq_consolidated_mfgpn_lineitem cl  \n" +
                "		join rfq_assy_quantity rq on rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0  \n" +
                "        left join rfq_consolidate_mfgpn_lineitem_quantity clq on clq.consolidateID = cl.id  \n" +
                "		where cl.rfqAssyID = rfqAssyID and clq.id IS NULL;  \n" +
                "# Update Consilidated LineItems  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl, (select * from Results) R   \n" +
                "		set   \n" +
                "		cl.isInstall = R.isInstall ,  \n" +
                "		cl.isPurchase = R.isPurchase,  \n" +
                "		cl.numOfPosition = R.numOfPosition,  \n" +
                "		cl.attritionRate = R.attritionRate,  \n" +
                "		cl.leadQty = R.leadQty,  \n" +
                "		cl.valueAddedCost = R.valueAddedCost,  \n" +
                "        cl.updatedAt = UTC_DATE(),  \n" +
                "        cl.rfqLineItemID = R.rfqLineItemsID,  \n" +
                "        cl.qpa = R.qpa,  \n" +
                "        cl.uomID = R.uomID,  \n" +
                "        cl.lineID = R.lineID,  \n" +
                "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,  \n" +
                "        cl.updatedBy = userID  \n" +
                "		where cl.rfqAssyID = rfqAssyID and cl.id  is NoT NUll and cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs  \n" +
                "            and IFNULL(cl.isDeleted,0) = 0;  \n" +
                "  \n" +
                "# delete from consolidated Alternatepart if lineItem removed  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap  \n" +
                "		set   \n" +
                "        cap.isDeleted = true,  \n" +
                "        cap.deletedAt = UTC_DATE(),  \n" +
                "		cap.deletedBy = userID  \n" +
                "		where  cap.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null    \n" +
                "        and IFNULL(cl.isDeleted,0) = 1);       \n" +
                "  \n" +
                "  \n" +
                "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem  \n" +
                "  \n" +
                "  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate   \n" +
                "		set   \n" +
                "        isDeleted = true,  \n" +
                "        deletedAt = UTC_DATE(),  \n" +
                "		deletedBy = userID  \n" +
                "        where id in(   \n" +
                "        select capID from (  \n" +
                "		select distinct(cap.id)as capID  \n" +
                "		from rfq_lineitems_alternatepart ap   \n" +
                "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID  \n" +
                "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID  \n" +
                "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID   \n" +
                "		join rfq_parttypemst pt on pt.id = rl.partTypeID AND pt.category != 3  \n" +
                "		where rl.rfqAssyID = rfqAssyID and cap.consolidateID IS not NULL and IFNULL(cl.isDeleted,0) = 0 and IFNULL(ap.isDeleted,0) = 1) as rcap);  \n" +
                "  \n" +
                "# delete Consolidated lineItems Quentity   \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq  \n" +
                "		set   \n" +
                "        cq.isDeleted = true,  \n" +
                "        cq.deletedAt = UTC_DATE(),  \n" +
                "		cq.deletedBy = userID  \n" +
                "		where  cq.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null    \n" +
                "        and IFNULL(cl.isDeleted,0) = 1);       \n" +
                "  \n" +
                "# delete Consolidate lineItems   \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl  \n" +
                "		set   \n" +
                "        cl.isDeleted = true,  \n" +
                "        cl.deletedAt = UTC_DATE(),  \n" +
                "		cl.deletedBy = userID  \n" +
                "		where  cl.rfqAssyID = rfqAssyID and cl.id is Not Null  and IFNULL(cl.isDeleted,0) = 0  \n" +
                "		and cl.rfqLineItemID not in(select rfqLineItemsID from Results);          \n" +
                "  \n" +
                "# Insert Unique mfgPart to consolidated feom rfq lineitem alternate part   \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`  \n" +
                "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`createdBy`,`createdAt`)  \n" +
                "		select distinct(ap.`mfgPN`),(select rcl.id from rfq_consolidated_mfgpn_lineitem rcl where rcl.rfqAssyID = rfqAssyID and rcl.lineID = rl.lineID and IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,  \n" +
                "			ap.`mfgPNID`,ap.`mfgCodeID`,userID `createdBy`,UTC_DATE() `createdAt`  \n" +
                "		from rfq_lineitems_alternatepart ap   \n" +
                "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID  \n" +
                "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID  \n" +
                "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID   \n" +
                "		join rfq_parttypemst pt on pt.id = rl.partTypeID AND pt.category != 3  \n" +
                "		where rl.rfqAssyID = rfqAssyID and ap.isDeleted = 0 and cap.consolidateID IS NULL and IFNULL(cl.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    COMMIT;  \n" +
                "    DROP TEMPORARY TABLE if exists Results;  \n" +
                "END;  \n" +
             /* **************************** Add Script Version -> 17-07-2018 *********************************** */
              "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (8,'1.00','V1','Sproc_CreateRfqConsolidateLineItem  - SHIRISH '," + userid + ");"
            );
            break;
        case 8:
            allDbChangesArray.push(
            //            /* **************************** New Script -> 17-07-2018  *********************************** */

            "update page_detail set  pageName='Mounting Type', menuRoute='admin.rfqsetting.mountingtype',   \n" +
            "pageRoute='app.mountingtype' ,pageUrl='rfqsetting/mountingtype',menuName='Mounting Type' where pageName='Part Category';  \n" +
            "RENAME TABLE rfq_partcategorymst TO  rfq_mountingtypemst;  \n" +
            "drop procedure if exists `Sproc_RetrievePartCategoryList`;  \n" +
            "CREATE  PROCEDURE `Sproc_RetrieveMountingTypeList`(  \n" +
            "	IN ppageIndex INT(11),  \n" +
            "	IN precordPerPage INT(11),  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(21844)  \n" +
            "	)  \n" +
            "BEGIN  \n" +
            "  \n" +
            "		DECLARE pOffset INT(11);  \n" +
            "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "  \n" +
            "  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
            "			SELECT * ,  \n" +
            "			(CASE WHEN (`active` = 0) THEN 'Inactive'   \n" +
            "					WHEN (`active` = 1) THEN 'Active' ELSE '' END) AS `activeConvertedValue`  \n" +
            "			FROM `rfq_mountingtypemst`  \n" +
            "			WHERE `deletedAt` IS NULL  \n" +
            "		;  \n" +
            "  \n" +
            "  \n" +
            "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;  \n" +
            "		ELSE  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "		END IF;	  \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "			SET pWhereClause = '1=1' ;  \n" +
            "		END IF;	  \n" +
            "  \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "		ELSE	  \n" +
            "			SET rowNumWhere = '';  \n" +
            "		END IF;	  \n" +
            "  \n" +
            "		/* to get total count of rows */  \n" +
            "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
            "		PREPARE query1 FROM @SQLStatement1;  \n" +
            "		EXECUTE query1;  \n" +
            "		DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "		PREPARE query2 FROM @SQLStatement2;  \n" +
            "		EXECUTE query2;  \n" +
            "		DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "		DROP TEMPORARY TABLE Results;  \n" +
            "  \n" +
            "    END;  \n" +
            "drop procedure if exists `Sproc_checkDelete`;  \n" +
            "CREATE  PROCEDURE `Sproc_checkDelete`(  \n" +
            "	IN tableName VARCHAR(255),  \n" +
            "	IN IDs LONGTEXT,  \n" +
            "	IN deletedBy INT,  \n" +
            "	IN entityID VARCHAR(255),  \n" +
            "	IN refrenceIDs LONGTEXT  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "	DECLARE vWoID1 INT(11);  \n" +
            "	DECLARE vOpID1 INT(11);  \n" +
            "	DECLARE vSerialNo1 VARCHAR(50);  \n" +
            "	DECLARE vProdStatus1 VARCHAR(5);  \n" +
            "	DECLARE vWoTransID1 INT(11);  \n" +
            "	DECLARE vQty1 INT(11);  \n" +
            "	DECLARE vOpID2 INT(11);  \n" +
            "	DECLARE vProdstatus2 VARCHAR(5);  \n" +
            "  \n" +
            "IF tableName='employees' THEN  \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)  \n" +
            "	   UNION ALL                        \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)  \n" +
            "           UNION ALL   \n" +
            "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND er.finalStatusInit IN(',IDs,') AND er.initiateBy IN(',IDs,') LIMIT 1)  \n" +
            "	   UNION ALL  \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)  \n" +
            "	UNION ALL  \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)  \n" +
            "	  UNION ALL  \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)  \n" +
            "	  UNION ALL  \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)  \n" +
            "	  UNION ALL  \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)  \n" +
            "	  UNION ALL  \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)  \n" +
            "	 UNION ALL  \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)  \n" +
            "	  UNION ALL  \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND wr.reqGenEmployeeID IN(',IDs,') and wr.woAuthorID IN(',IDs,') and wr.accRejBy IN(',IDs,') LIMIT 1)  \n" +
            "	  UNION ALL   \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND wr.commentemployeeID IN(',IDs,') AND wr.accRejBy IN(',IDs,') LIMIT 1)  \n" +
            "	  UNION ALL  \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND wr.employeeID IN(',IDs,') AND wr.requstedEmployeeID IN(',IDs,') LIMIT 1)   \n" +
            "	  UNION ALL      \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE wt.checkinEmployeeID IN(',IDs,') AND wt.checkoutEmployeeID IN(',IDs,') LIMIT 1)  \n" +
            "	  UNION ALL     \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)  \n" +
            "	 UNION ALL   \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)  \n" +
            "	 UNION ALL   \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)  \n" +
            "	 UNION ALL   \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND wthu.holdEmployeeId IN(',IDs,') and wthu.unHoldEmployeeId IN(',IDs,') LIMIT 1)  \n" +
            "	UNION ALL   \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)  \n" +
            "	 UNION ALL   \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)  \n" +
            "	 UNION ALL   \n" +
            "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)  \n" +
            "	 UNION ALL   \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND holdEmployeeId IN(',IDs,') AND unHoldEmployeeId IN(',IDs,')LIMIT 1)  \n" +
            "  \n" +
            "        ) q');  \n" +
            "    PREPARE stmt FROM @SQL;  \n" +
            "    EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempEmp)=0 THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');  \n" +
            "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');  \n" +
            "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');  \n" +
            "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');  \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			PREPARE stmt2 FROM @SQL2;  \n" +
            "			PREPARE stmt3 FROM @SQL3;  \n" +
            "			PREPARE stmt4 FROM @SQL4;  \n" +
            "			EXECUTE stmt1;  \n" +
            "			EXECUTE stmt2;  \n" +
            "			EXECUTE stmt3;  \n" +
            "			EXECUTE stmt4;  \n" +
            "			SELECT   \n" +
            "    *  \n" +
            "FROM  \n" +
            "    tempEmp;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempEmp;  \n" +
            "		END IF;  \n" +
            "  \n" +
            "    DROP TABLE tempEmp;  \n" +
            "END IF;  \n" +
            "IF tableName='eco_type_category' THEN  \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)   \n" +
            "	  ) q');  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT   \n" +
            "    *  \n" +
            "FROM  \n" +
            "    tempEcoTypeCategory;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempEcoTypeCategory;  \n" +
            "		END IF;  \n" +
            "    DROP TABLE tempEcoTypeCategory;    \n" +
            "END IF;  \n" +
            "IF tableName='eco_type_values' THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)  \n" +
            "	  ) q');  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT   \n" +
            "    *  \n" +
            "FROM  \n" +
            "    tempEcoTypeValues;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempEcoTypeValues;  \n" +
            "		END IF;  \n" +
            "    DROP TABLE tempEcoTypeValues;    \n" +
            "END IF;  \n" +
            "IF tableName='customers' THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_cust_alias\" else \"\" end as msg FROM component_cust_alias WHERE deletedAt IS NULL AND customerid IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)  \n" +
            "	 UNION ALL   \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
            "	  ) q');  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');  \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			PREPARE stmt2 FROM @SQL2;  \n" +
            "			PREPARE stmt3 FROM @SQL3;  \n" +
            "			EXECUTE stmt1;  \n" +
            "			EXECUTE stmt2;  \n" +
            "			EXECUTE stmt3;  \n" +
            "  \n" +
            "			SELECT   \n" +
            "    *  \n" +
            "FROM  \n" +
            "    tempCustomers;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempCustomers;  \n" +
            "		END IF;  \n" +
            "    DROP TABLE tempCustomers;    \n" +
            "END IF;  \n" +
            "IF tableName='certificate_standards' THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)  \n" +
            "  \n" +
            "	  ) q');  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');  \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			PREPARE stmt2 FROM @SQL2;  \n" +
            "			PREPARE stmt3 FROM @SQL3;  \n" +
            "			EXECUTE stmt1;  \n" +
            "			EXECUTE stmt2;  \n" +
            "			EXECUTE stmt3;  \n" +
            "  \n" +
            "			SELECT * FROM tempCertificateStandards;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempCertificateStandards;  \n" +
            "		END IF;  \n" +
            "    DROP TABLE tempCertificateStandards;    \n" +
            "END IF;  \n" +
            "IF tableName='department' THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)  \n" +
            "  \n" +
            "	  ) q');  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');  \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			PREPARE stmt2 FROM @SQL2;  \n" +
            "			PREPARE stmt3 FROM @SQL3;  \n" +
            "			EXECUTE stmt1;  \n" +
            "			EXECUTE stmt2;  \n" +
            "			EXECUTE stmt3;  \n" +
            "  \n" +
            "			SELECT * FROM tempDepartment;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempDepartment;  \n" +
            "		END IF;  \n" +
            "    DROP TABLE tempDepartment;    \n" +
            "END IF;  \n" +
            "IF tableName='genericcategory' THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND eqpGroupID IN(',IDs,') AND eqpSubGroupID IN(',IDs,') AND eqpTypeID IN(',IDs,') AND eqpPossessionID IN(',IDs,') AND eqpOwnershipTypeID IN(',IDs,') AND locationTypeID IN(',IDs,')   LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
            "  \n" +
            "	  ) q');  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT   \n" +
            "    *  \n" +
            "FROM  \n" +
            "    tempGenericCategory;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempGenericCategory;  \n" +
            "		END IF;  \n" +
            "    DROP TABLE tempGenericCategory;    \n" +
            "END IF;  \n" +
            "IF tableName='equipment' THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)  \n" +
            "  \n" +
            "	  ) q');  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN  \n" +
            "			IF entityID IS NOT NULL THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');  \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			PREPARE stmt2 FROM @SQL2;  \n" +
            "			PREPARE stmt3 FROM @SQL3;  \n" +
            "			EXECUTE stmt1;  \n" +
            "			EXECUTE stmt2;  \n" +
            "			EXECUTE stmt3;  \n" +
            "  \n" +
            "			ELSE  \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "			END IF;  \n" +
            "  \n" +
            "			SELECT * FROM tempEquipment;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempEquipment;  \n" +
            "		END IF;  \n" +
            "    DROP TABLE tempEquipment;    \n" +
            "END IF;  \n" +
            "IF tableName='parts' THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
            "	  ) q');  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempParts)=0 THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempParts;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempParts;  \n" +
            "		END IF;  \n" +
            "    DROP TABLE tempParts;    \n" +
            "END IF;  \n" +
            "IF tableName='master_templates' THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)  \n" +
            "	  ) q');  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempMasterTemplate;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempMasterTemplate;  \n" +
            "		END IF;  \n" +
            "    DROP TABLE tempMasterTemplate;    \n" +
            "END IF;  \n" +
            "IF tableName='operations' THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)  \n" +
            "  \n" +
            "	  ) q');  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempOperations)=0 THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');  \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			PREPARE stmt2 FROM @SQL2;  \n" +
            "			PREPARE stmt3 FROM @SQL3;  \n" +
            "			EXECUTE stmt1;  \n" +
            "			EXECUTE stmt2;  \n" +
            "			EXECUTE stmt3;  \n" +
            "  \n" +
            "			SELECT * FROM tempOperations;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempOperations;  \n" +
            "		END IF;  \n" +
            "    DROP TABLE tempOperations;    \n" +
            "END IF;  \n" +
            "IF tableName='workorder' THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL		  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)  \n" +
            "  \n" +
            "	  ) q');  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN  \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete work order */  \n" +
            "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;   \n" +
            "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");  \n" +
            "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			  \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			  \n" +
            "			/* [E] - Add Time line log for delete work order */			  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');  \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			PREPARE stmt2 FROM @SQL2;  \n" +
            "			PREPARE stmt3 FROM @SQL3;  \n" +
            "			EXECUTE stmt1;  \n" +
            "			EXECUTE stmt2;  \n" +
            "			EXECUTE stmt3;  \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorder;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempWorkorder;  \n" +
            "		END IF;  \n" +
            "    DROP TABLE tempWorkorder;    \n" +
            "END IF;  \n" +
            "IF tableName='roles' THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)  \n" +
            "         UNION ALL  \n" +
            "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)  \n" +
            "         UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempRoles)=0 THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempRoles;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempRoles;  \n" +
            "		END IF;  \n" +
            "    DROP TABLE tempRoles;    \n" +
            "END IF;  \n" +
            "IF tableName='standard_class' THEN  \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND classIDs IN(',IDs,') LIMIT 1)  \n" +
            "	  ) q');  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempStandardClass;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempStandardClass;  \n" +
            "		END IF;  \n" +
            "    DROP TABLE tempStandardClass;    \n" +
            "END IF;  \n" +
            "IF tableName='dataelement' THEN  \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		  \n" +
            "		UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)  \n" +
            "	  ) q');  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt2 FROM @SQL2;  \n" +
            "			EXECUTE stmt2;  \n" +
            "  \n" +
            "  \n" +
            "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)  \n" +
            "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated  \n" +
            "			FROM dataelement dl WHERE dl.dataElementID = IDs;  \n" +
            "  \n" +
            "  \n" +
            "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */  \n" +
            "  \n" +
            "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"   \n" +
            "							where type IN(''',IDs,''') and deletedAt IS NULL ');		  \n" +
            "				PREPARE stmt3 FROM @SQL3;  \n" +
            "				EXECUTE stmt3;  \n" +
            "  \n" +
            "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */  \n" +
            "  \n" +
            "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */  \n" +
            "  \n" +
            "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs   \n" +
            "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN  \n" +
            "  \n" +
            "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"   \n" +
            "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'   \n" +
            "								AND isAutoIncrement = 1 AND deletedAt IS NULL)  \n" +
            "							 and deletedAt IS NULL ');		  \n" +
            "					     PREPARE stmt4 FROM @SQL4;  \n" +
            "				             EXECUTE stmt4;  \n" +
            "					END IF;	  \n" +
            "				END IF;  \n" +
            "  \n" +
            "  \n" +
            "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN  \n" +
            "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)   \n" +
            "						    AND deletedAt IS NULL');		  \n" +
            "				PREPARE stmt5 FROM @SQL5;  \n" +
            "				EXECUTE stmt5;  \n" +
            "  \n" +
            "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"   \n" +
            "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		  \n" +
            "				PREPARE stmt6 FROM @SQL6;  \n" +
            "				EXECUTE stmt6;  \n" +
            "  \n" +
            "  \n" +
            "			END IF;  \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM tempDataElement;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempDataElement;  \n" +
            "		END IF;  \n" +
            "    DROP TABLE tempDataElement;    \n" +
            "  \n" +
            "END IF;  \n" +
            "IF tableName='workorder_preprogcomp' THEN  \n" +
            "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM  \n" +
            "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg  \n" +
            "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND  \n" +
            "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator  \n" +
            "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "    SELECT * FROM  tempComponent;  \n" +
            "    SELECT TotalCount FROM  tempComponent;  \n" +
            "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			  \n" +
            "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt2 FROM @SQL2;  \n" +
            "			EXECUTE stmt2;  \n" +
            "  \n" +
            "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where   \n" +
            "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator  \n" +
            "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		  \n" +
            "			PREPARE stmt3 FROM @SQL3;  \n" +
            "			EXECUTE stmt3;  \n" +
            "		SELECT   \n" +
            "			*  \n" +
            "		FROM  \n" +
            "			tempComponent;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempComponent;  \n" +
            "		END IF;  \n" +
            "    DROP TABLE tempComponent;    \n" +
            "END IF;  \n" +
            "IF tableName='component' THEN  \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_cust_alias\" else \"\" end as msg FROM component_cust_alias WHERE deletedAt IS NULL AND refcompid IN(',IDs,') LIMIT 1)  \n" +
            "		 UNION ALL  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)  \n" +
            "  \n" +
            "	  ) q');  \n" +
            "	  PREPARE stmt FROM @SQL;  \n" +
            "	   EXECUTE stmt;  \n" +
            "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN  \n" +
            "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempComponent;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempComponent;  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempComponent;   \n" +
            "END IF;  \n" +
            "IF tableName=\"workorder_cluster\" THEN   \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)  \n" +
            "		      ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN  \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete cluster */  \n" +
            "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster  \n" +
            "		WHERE clusterID = IDs AND deletedAt IS NULL;  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder  \n" +
            "		WHERE woID = @lvWoID AND deletedAt IS NULL ;  \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");  \n" +
            "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	  \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		  \n" +
            "		/* [E] - Add Time line log for delete cluster */  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderCluster;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempWorkorderCluster;  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempWorkorderCluster;   \n" +
            "END IF;  \n" +
            "IF tableName=\"workorder_operation\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)  \n" +
            "			 UNION ALL  \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		   \n" +
            "		      ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN  \n" +
            "			 /* [S] - Add Time line log for delete work order operation */  \n" +
            "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName  \n" +
            "			FROM workorder_operation   \n" +
            "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;   \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;  \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");  \n" +
            "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	  \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		  \n" +
            "			/* [E] - Add Time line log for delete work order operation */  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');  \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');  \n" +
            "		SET @SQl3 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');  \n" +
            "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');  \n" +
            "		SET @SQl5 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');  \n" +
            "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');  \n" +
            "		SET @SQl7 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		  \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation  \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;  \n" +
            "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation  \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			PREPARE stmt2 FROM @SQL2;  \n" +
            "			PREPARE stmt3 FROM @SQL3;  \n" +
            "			PREPARE stmt4 FROM @SQL4;  \n" +
            "			PREPARE stmt5 FROM @SQL5;  \n" +
            "			PREPARE stmt6 FROM @SQL6;  \n" +
            "			PREPARE stmt7 FROM @SQl7;  \n" +
            "			PREPARE stmt8 FROM @SQl7;  \n" +
            "			EXECUTE stmt1;  \n" +
            "			EXECUTE stmt2;  \n" +
            "			EXECUTE stmt3;  \n" +
            "			EXECUTE stmt4;  \n" +
            "			EXECUTE stmt5;  \n" +
            "			EXECUTE stmt6;  \n" +
            "			EXECUTE stmt7;  \n" +
            "			EXECUTE stmt8;  \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperation;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempWorkorderOperation;  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempWorkorderOperation;   \n" +
            "END IF;  \n" +
            "IF tableName=\"workorder_operation_part\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)  \n" +
            "		      ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN  \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete parts from work order */  \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName  \n" +
            "		FROM workorder_operation   \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;   \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;  \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts  \n" +
            "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;   \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");  \n" +
            "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	  \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */  \n" +
            "		/* [E] - Add Time line log for delete parts from work order */  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderPart;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempWorkorderPart;  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempWorkorderPart;   \n" +
            "END IF;  \n" +
            "IF tableName=\"workorder_operation_equipment\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)  \n" +
            "		      ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN  \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Equipment from work order */  \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName  \n" +
            "		FROM workorder_operation   \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;   \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	  \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment  \n" +
            "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;   \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");  \n" +
            "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	  \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		  \n" +
            "		/* [E] -  Add Time line log for delete Equipment from work order */  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');  \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			PREPARE stmt2 FROM @SQL2;  \n" +
            "			EXECUTE stmt1;  \n" +
            "			EXECUTE stmt2;  \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEquipment;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempWorkorderEquipment;  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempWorkorderEquipment;   \n" +
            "END IF;  \n" +
            "IF tableName=\"workorder_operation_employee\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)  \n" +
            "		      ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN  \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Employees from work order */  \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName  \n" +
            "		FROM workorder_operation   \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;   \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;  \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees  \n" +
            "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;   \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");  \n" +
            "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	  \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		  \n" +
            "		/* [E] -  Add Time line log for delete Employee from work order */  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEmployee;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempWorkorderEmployee;  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempWorkorderEmployee;  \n" +
            "  \n" +
            "END IF;  \n" +
            "IF tableName=\"workorder_operation_cluster\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)  \n" +
            "		      ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN  \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete operations from cluster */  \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName  \n" +
            "		FROM workorder_operation   \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;   \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;  \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster  \n" +
            "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;   \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");  \n" +
            "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	  \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		  \n" +
            "		/* [E] -  Add Time line log for delete operations from cluster */		  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		  \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation  \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;  \n" +
            "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation  \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			PREPARE stmt2 FROM @SQL2;  \n" +
            "			EXECUTE stmt1;  \n" +
            "			EXECUTE stmt2;  \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempWorkorderOperationCluster;   \n" +
            "END IF;  \n" +
            "IF tableName=\"entity\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)  \n" +
            "		     UNION ALL  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)  \n" +
            "		     UNION ALL  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)  \n" +
            "		    UNION ALL  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)  \n" +
            "		      ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempEntity)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempEntity;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempEntity;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempEntity;   \n" +
            "END IF;  \n" +
            "IF tableName=\"salesordermst\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)  \n" +
            "		      ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempSalesOrderMst;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempSalesOrderMst;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempSalesOrderMst;   \n" +
            "END IF;  \n" +
            "IF tableName=\"mfgcodemst\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)  \n" +
            "		      ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempMFGCodeMst;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempMFGCodeMst;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempMFGCodeMst;   \n" +
            "END IF;  \n" +
            "IF tableName=\"dataelement_transactionvalues_manual\" THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"   \n" +
            "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)  \n" +
            "				and deletedAt IS NULL');		  \n" +
            "			PREPARE stmt2 FROM @SQL2;  \n" +
            "			EXECUTE stmt2;  \n" +
            "  \n" +
            "  \n" +
            "END IF;  \n" +
            "IF tableName=\"shippedassembly\" THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "  \n" +
            "END IF;  \n" +
            "IF tableName=\"assemblymst\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)  \n" +
            "		     UNION ALL  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)  \n" +
            "		     UNION ALL  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)  \n" +
            "		     UNION ALL  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)  \n" +
            "		    UNION ALL  \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)  \n" +
            "		      ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempassemblymst;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempassemblymst;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempassemblymst;   \n" +
            "END IF;  \n" +
            "IF tableName=\"assembly_revisionmst\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND fromRevisionID IN(',IDs,') AND toRevisionID IN(',IDs,')  LIMIT 1)  \n" +
            "		     UNION ALL  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)  \n" +
            "		     UNION ALL  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)  \n" +
            "		     UNION ALL  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)  \n" +
            "		    UNION ALL  \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)  \n" +
            "		      ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempassembly_revisionmst;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempassembly_revisionmst;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempassembly_revisionmst;   \n" +
            "END IF;  \n" +
            "IF tableName=\"workorder_trans_serialno\" THEN  \n" +
            "  \n" +
            "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1   \n" +
            "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;  \n" +
            "  \n" +
            "  \n" +
            "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)  \n" +
            "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)   \n" +
            "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1   \n" +
            "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;  \n" +
            "  \n" +
            "	/* condition to check total serials of type greater than actual production qty */  \n" +
            "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1  \n" +
            "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)   \n" +
            "		> IFNULL(vQty1,0)) THEN  \n" +
            "  \n" +
            "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */  \n" +
            "		IF(vQty1 IS NULL OR vQty1 = 0) THEN   \n" +
            "  \n" +
            "			/* condition to check curr opis and status match with given delete serial */  \n" +
            "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1  \n" +
            "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN  \n" +
            "  \n" +
            "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()  \n" +
            "				WHERE woTransSerialID = IDs;	  \n" +
            "  \n" +
            "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno   \n" +
            "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL  \n" +
            "				ORDER BY woTransSerialID DESC LIMIT 1;  \n" +
            "  \n" +
            "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2  \n" +
            "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	  \n" +
            "  \n" +
            "			ELSE   \n" +
            "				SELECT 'not allowed';  \n" +
            "			END IF;  \n" +
            "  \n" +
            "  \n" +
            "		ELSE   \n" +
            "  \n" +
            "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()  \n" +
            "			WHERE woTransSerialID = IDs;	  \n" +
            "  \n" +
            "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno   \n" +
            "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL  \n" +
            "			ORDER BY woTransSerialID DESC LIMIT 1;  \n" +
            "  \n" +
            "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2  \n" +
            "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	  \n" +
            "  \n" +
            "		END IF;	  \n" +
            "  \n" +
            "  \n" +
            "	ELSE   \n" +
            "		SELECT 'not allowed';		  \n" +
            "	END IF;	  \n" +
            "  \n" +
            "  \n" +
            "END IF;  \n" +
            "IF tableName=\"br_label_template\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)  \n" +
            "		      ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempbr_label_template;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempbr_label_template;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempbr_label_template;   \n" +
            "END IF;  \n" +
            "IF tableName=\"measurement_types\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)  \n" +
            "		     UNION ALL  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempMeasurement_types;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempMeasurement_types;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempMeasurement_types;   \n" +
            "END IF;  \n" +
            "IF tableName=\"uoms\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg   \n" +
            "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)  \n" +
            "            UNION ALL  \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg   \n" +
            "            FROM unit_detail_formula WHERE deletedAt IS NULL AND unitID IN (',IDs,')  or toUnitID IN (',IDs,')  LIMIT 1)) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempUOMs;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempUOMs;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempUOMs;   \n" +
            "END IF;  \n" +
            "IF tableName=\"jobtypes\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg   \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempJobTypess;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempJobTypess;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempJobTypess;   \n" +
            "END IF;  \n" +
            "IF tableName=\"ordertype\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg   \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempOrderTypes;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempOrderTypes;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempOrderTypes;   \n" +
            "END IF;  \n" +
            "IF tableName=\"reasonmst\" THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "END IF;  \n" +
            "IF tableName='component_sid_stock' THEN	  \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)  \n" +
            "			UNION ALL  \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		      \n" +
            "		    ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentsidstock;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempcomponentsidstock;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempcomponentsidstock;   \n" +
            "  \n" +
            "END IF;  \n" +
            "IF tableName='component_sid_stock_dataelement_values' THEN	  \n" +
            "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "END IF;  \n" +
            "IF tableName='chart_templatemst' THEN	  \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)  \n" +
            "		    ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempcharttemplatemst;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempcharttemplatemst;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempcharttemplatemst;   \n" +
            "  \n" +
            "END IF;  \n" +
            "IF tableName=\"shipping_request\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg   \n" +
            "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)  \n" +
            "            UNION ALL  \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg   \n" +
            "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempShippingRequest;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempShippingRequest;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempShippingRequest;   \n" +
            "END IF;  \n" +
            "IF tableName=\"chart_rawdata_category\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg   \n" +
            "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)  \n" +
            "            UNION ALL  \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg   \n" +
            "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempChartRawdataCategory;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempChartRawdataCategory;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempChartRawdataCategory;   \n" +
            "END IF;  \n" +
            "IF tableName=\"component_standard\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg   \n" +
            "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandard;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempcomponentStandard;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempcomponentStandard;   \n" +
            "END IF;  \n" +
            "IF tableName=\"component_standard_class\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg   \n" +
            "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');  \n" +
            "           /*  UNION ALL  \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg   \n" +
            "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',standardClassID,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt2 FROM @SQL2;  \n" +
            "			EXECUTE stmt2;  \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandardClass;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempcomponentStandardClass;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempcomponentStandardClass;   \n" +
            "END IF;  \n" +
            "IF tableName=\"rfq_lineitems\" THEN  \n" +
            "		SELECT 0 TotalCount, '' Message;  \n" +
            "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "		PREPARE stmt1 FROM @SQL1;  \n" +
            "		EXECUTE stmt1;              \n" +
            "END IF;  \n" +
            "IF tableName=\"requirement\" THEN  \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg   \n" +
            "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM temprequirements)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM temprequirements;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM temprequirements;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE temprequirements;   \n" +
            "END IF;  \n" +
            "IF tableName=\"workorder_trans_packagingdetail\" THEN  \n" +
            "		SELECT 0 TotalCount, '' Message;  \n" +
            "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		  \n" +
            "		PREPARE stmt1 FROM @SQL1;  \n" +
            "		EXECUTE stmt1;              \n" +
            "END IF;  \n" +
            "IF tableName=\"customer_addresses\" THEN  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)  \n" +
            "			UNION ALL  \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg   \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM tempcustomer_addresses;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM tempcustomer_addresses;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE tempcustomer_addresses;   \n" +
            "END IF;  \n" +
            "IF tableName=\"rfqforms\" THEN  \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg   \n" +
            "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in   \n" +
            "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');  \n" +
            "  \n" +
            "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in   \n" +
            "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		  \n" +
            "  \n" +
            "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in   \n" +
            "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		  \n" +
            "  \n" +
            "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in   \n" +
            "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		  \n" +
            "  \n" +
            "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in   \n" +
            "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');  \n" +
            "  \n" +
            "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		  \n" +
            "  \n" +
            "            PREPARE stmt1 FROM @SQL1;  \n" +
            "			PREPARE stmt2 FROM @SQL2;  \n" +
            "            PREPARE stmt3 FROM @SQL3;  \n" +
            "			PREPARE stmt4 FROM @SQL4;  \n" +
            "            PREPARE stmt5 FROM @SQL5;  \n" +
            "			PREPARE stmt6 FROM @SQL6;  \n" +
            "  \n" +
            "			EXECUTE stmt1;  \n" +
            "			EXECUTE stmt2;  \n" +
            "            EXECUTE stmt3;  \n" +
            "			EXECUTE stmt4;  \n" +
            "            EXECUTE stmt5;  \n" +
            "			EXECUTE stmt6;  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM temprfqformss;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM temprfqformss;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE temprfqformss;   \n" +
            "END IF;  \n" +
            "IF tableName=\"rfq_mountingtypemst\" THEN  \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
            "		    FROM   \n" +
            "		    (  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg   \n" +
            "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1) ) q');  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;  \n" +
            "	EXECUTE stmt;  \n" +
            "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "			SELECT * FROM temprfqpartcategory;  \n" +
            "		ELSE  \n" +
            "			SELECT * FROM temprfqpartcategory;  \n" +
            "  \n" +
            "		END IF;  \n" +
            "		DROP TABLE temprfqpartcategory;   \n" +
            "  \n" +
            "END IF;  \n" +
            "IF tableName=\"who_bought_who\" THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "END IF;  \n" +
            "IF tableName=\"rfq_parttypemst\" THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "END IF;  \n" +
            "IF tableName=\"rfq_lineitems_errorcode\" THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "END IF;  \n" +
            "IF tableName=\"rfq_lineitems_keywords\" THEN  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		  \n" +
            "			PREPARE stmt1 FROM @SQL1;  \n" +
            "			EXECUTE stmt1;  \n" +
            "  \n" +
            "END IF;  \n" +
            "END;  \n" +
            "drop PROCEDURE if exists `Sproc_GetRFQLineItems`;  \n" +
            "CREATE  PROCEDURE `Sproc_GetRFQLineItems`(    \n" +
            "	IN ppageIndex INT(11),    \n" +
            "	IN precordPerPage INT(11),    \n" +
            "	IN pOrderBy VARCHAR(255),    \n" +
            "    IN pWhereClause VARCHAR(21844),    \n" +
            "    IN prfqAssyBomID INT    \n" +
            ")  \n" +
            "BEGIN    \n" +
            "	DECLARE prfqAssyID INT(11);    \n" +
            "    DECLARE pOffset INT(11);    \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;	    \n" +
            "  \n" +
            "    select rfqAssyID into prfqAssyID from rfq_lineitems where rfqAssyBomID = prfqAssyBomID limit 1;    \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
            "   	select group_concat(distinct(concat(ra.mfgCode,' | ', ra.mfgPN)))as mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,    \n" +
            "	rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,concat(pt.partTypeName,'|',pc.name) as name,    \n" +
            "	rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig    \n" +
            "	from rfq_lineitems_alternatepart ra    \n" +
            "	left join rfq_lineitems rl on rl.id =ra.rfqLineItemsID  and rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0    \n" +
            "	left join rfq_mountingtypemst pc on rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0    \n" +
            "	left join rfq_parttypemst pt on rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0     \n" +
            "	where rl.rfqAssyID = prfqAssyID AND IFNULL(ra.isDeleted,0) = 0    \n" +
            "	group by ra.rfqLineItemsID order by CAST(rl.lineID AS SIGNED);    \n" +
            "  \n" +
            "	IF (pOrderBy IS NOT NULL) THEN    \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
            "	ELSE    \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id ASC\") ;    \n" +
            "	END IF;	    \n" +
            "  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
            "		SET pWhereClause = '1=1' ;    \n" +
            "	END IF;	    \n" +
            "  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
            "	ELSE	    \n" +
            "		SET rowNumWhere = '';    \n" +
            "	END IF;	    \n" +
            "  \n" +
            "  \n" +
            "	/* to get total count of rows */    \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );    \n" +
            "	PREPARE query1 FROM @SQLStatement1;    \n" +
            "	EXECUTE query1;    \n" +
            "	DEALLOCATE PREPARE query1;    \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
            "	PREPARE query2 FROM @SQLStatement2;    \n" +
            "	EXECUTE query2;    \n" +
            "	DEALLOCATE PREPARE query2;    \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE Results;    \n" +
            "    END;  \n" +
            "drop procedure if exists `Sproc_GetRFQLineItemsByID`;  \n" +
            "CREATE  PROCEDURE `Sproc_GetRFQLineItemsByID`(  \n" +
            "	IN prfqAssyBomID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DROP temporary table if exists tempRfq_lineitems;  \n" +
            "    DROP temporary table if exists tempRfq_lineitemsAlt;  \n" +
            "	CREATE TEMPORARY TABLE tempRfq_lineitems AS      \n" +
            "	SELECT a.id, a.lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,   \n" +
            "    CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,  \n" +
            "    a.description, a.level, a.numOfPosition, a.customerRev, a.customerDescription,              \n" +
            "			CONCAT(part.partTypeName, ' | ', c.name) partclassID, a.isInstall, a.isPurchase, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID,   \n" +
            "            a.dnpQty, a.dnpDesig, a.qpaDesignatorStep  \n" +
            "            FROM rfq_lineitems a   \n" +
            "	LEFT JOIN uoms b ON a.uomID = b.id and IFNULL(b.isDeleted,0) = 0  \n" +
            "    LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id and IFNULL(part.isDeleted,0) = 0  \n" +
            "    LEFT JOIN rfq_mountingtypemst c ON part.partclassID = c.id and IFNULL(c.isDeleted,0) = 0      \n" +
            "    WHERE IFNULL(a.isDeleted,0) = 0 and a.rfqAssyBomID = prfqAssyBomID;  \n" +
            "  \n" +
            "	SELECT b.id, b.lineID, b.qpa, b.refDesig, a.mfgCode, a.mfgCodeID, a.mfgPN, a.mfgPNID,  \n" +
            "			a.distributor, a.distMfgCodeID, a.distPN, a.distMfgPNID,   \n" +
            "            b.custPN, b.custPNID, b.uomID, a.description descriptionAlternate, b.description, b.level, b.numOfPosition, b.customerRev, b.customerDescription,  \n" +
            "			b.partclassID, b.isInstall, b.isPurchase, b.leadQty, b.attritionRate, b.valueAddedCost, b.refRFQLineItemID,   \n" +
            "            b.dnpQty, b.dnpDesig, a.id as rfqAlternatePartID, b.qpaDesignatorStep,  \n" +
            "			a.mfgVerificationStep, a.mfgDistMappingStep, a.mfgCodeStep,  \n" +
            "			a.distVerificationStep, a.distCodeStep, a.getMFGPNStep, a.obsoletePartStep, a.goodPartMappingStep  \n" +
            "            FROM rfq_lineitems_alternatepart a  \n" +
            "			JOIN tempRfq_lineitems b on a.rfqLineItemsID = b.id  \n" +
            "			WHERE IFNULL(a.isDeleted,0) = 0  AND b.id is not null order by CAST(b.lineID AS SIGNED), a.id;  \n" +
            "END;  \n" +
            "drop procedure if exists `Sproc_RetrievePartTypeList`;  \n" +
            "CREATE  PROCEDURE `Sproc_RetrievePartTypeList`(  \n" +
            "	IN ppageIndex INT(11),  \n" +
            "	IN precordPerPage INT(11),  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(21844)  \n" +
            "	)  \n" +
            "BEGIN  \n" +
            "  \n" +
            "		DECLARE pOffset INT(11);  \n" +
            "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "  \n" +
            "  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
            "			SELECT pt.*,pc.name,pc.id as partclass,  \n" +
            "			(CASE WHEN (pt.active = 0) THEN 'Inactive'   \n" +
            "					WHEN (pt.active = 1) THEN 'Active' ELSE '' END) AS `activeConvertedValue`,  \n" +
            "                    (CASE WHEN (pt.category = 1) THEN 'PCB'   \n" +
            "					WHEN (pt.category = 2) THEN 'Component'  \n" +
            "                    WHEN (pt.category = 3) THEN 'Sub Assembly' ELSE '' END) AS `partcategory`  \n" +
            "			FROM rfq_parttypemst pt  \n" +
            "            left join rfq_mountingtypemst pc on pc.id = pt.partClassID and pc.deletedAt IS NULL  \n" +
            "			WHERE pt.deletedAt IS NULL  \n" +
            "		;  \n" +
            "  \n" +
            "  \n" +
            "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"partTypeName ASC\") ;  \n" +
            "		ELSE  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "		END IF;	  \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "			SET pWhereClause = '1=1' ;  \n" +
            "		END IF;	  \n" +
            "  \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "		ELSE	  \n" +
            "			SET rowNumWhere = '';  \n" +
            "		END IF;	  \n" +
            "  \n" +
            "		/* to get total count of rows */  \n" +
            "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
            "		PREPARE query1 FROM @SQLStatement1;  \n" +
            "		EXECUTE query1;  \n" +
            "		DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "		PREPARE query2 FROM @SQLStatement2;  \n" +
            "		EXECUTE query2;  \n" +
            "		DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "		DROP TEMPORARY TABLE Results;  \n" +
            "  \n" +
            "    END;  \n" +
            //              /* **************************** Add Script Version -> 17-07-2018 *********************************** */
                           "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                           "VALUES (9,'1.00','V1','Partcategory change to mountingType - Mona '," + userid + ");"
                             );
            break;
        case 9:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2018  *********************************** */
                "DROP TABLE IF EXISTS `rfq_Assy_bom_relationship`;  \n" +
                "create table rfq_Assy_bom_relationship  \n" +
                "(  \n" +
                "	`id` INT primary key auto_increment,      \n" +
                "	`rfqAssyBomID` INT NOT NULL,  \n" +
                "	`parentRFQAssyBOMID` INT NOT NULL,  \n" +
                "	`parentLineitemsID` INT NOT NULL,  \n" +
                "    `rfqAssyID` INT NOT NULL,  \n" +
                "	`isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "	`createdBy` varchar(255) NOT NULL,  \n" +
                "	`createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "	`updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "	`updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "	`deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "	`deletedAt` datetime DEFAULT NULL,  \n" +
                "    FOREIGN KEY (rfqAssyBomID) REFERENCES rfq_assy_bom (id),  \n" +
                "    FOREIGN KEY (parentRFQAssyBOMID) REFERENCES rfq_assy_bom (id),  \n" +
                "    FOREIGN KEY (parentLineitemsID) REFERENCES rfq_lineitems (id),  \n" +
                "    FOREIGN KEY (rfqAssyID) REFERENCES rfq_assemblies (id)  \n" +
                ");  \n" +
                "  \n" +
                "UPDATE rfq_lineitems_errorcode  \n" +
                "SET description =  REPLACE(description,'not match','mismatch');  \n" +
                /* **************************** Add Script Version -> 17-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (10,'1.00','V1','CREATE TABLE rfq_Assy_bom_relationship; UPDATE rfq_lineitems_errorcode - RAVI'," + userid + ");"
            );
            break;
        case 10:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetGenericFoldersById` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetGenericFoldersById`(  \n" +
                "IN pRefParentId INT(1),  \n" +
                "IN pEntityId INT(1),  \n" +
                "IN pRefTransId INT(1),  \n" +
                "IN pGencFileOwnerType VARCHAR(255),  \n" +
                "IN pIsTraveler TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE whereClauseFolder VARCHAR(1000);  \n" +
                "	DECLARE whereClauseFiles VARCHAR(1000);  \n" +
                "  \n" +
                "	SET pEntityId = IFNULL(pEntityId,0);  \n" +
                "  \n" +
                "	SET whereClauseFolder = CONCAT(\" AND   \n" +
                "			(IFNULL(gf.entityID,0) = IFNULL(\",pEntityId,\",0)   \n" +
                "			AND gf.refTransID = \", pRefTransId,  \n" +
                "			\" AND gf.gencFileOwnerType = '\", pGencFileOwnerType ,\"')\");  \n" +
                "	SET whereClauseFiles = CONCAT(\" AND   \n" +
                "			(IFNULL(gfile.entityID,0) = IFNULL(\",pEntityId,\",0)   \n" +
                "			AND gfile.refTransID = \", pRefTransId,  \n" +
                "			\" AND gfile.gencFileOwnerType = '\", pGencFileOwnerType ,\"')\");	  \n" +
                "  \n" +
                "	-- if workorder operation then show operation data too  \n" +
                "	IF (pGencFileOwnerType = 'workorder_operation') THEN  \n" +
                "		SET whereClauseFolder = CONCAT(whereClauseFolder,\" OR  \n" +
                "				(IFNULL(gf.entityID,0) = -1   \n" +
                "				AND gf.refTransID IN (SELECT opID FROM workorder_operation WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)   \n" +
                "				AND gf.gencFileOwnerType = 'operations')   \n" +
                "				AND IFNULL(gf.refParentId,0) = IFNULL(\",pRefParentId,\",0)  \n" +
                "				AND gf.deletedAt IS NULL\");  \n" +
                "		SET whereClauseFiles = CONCAT(whereClauseFiles, \" OR  \n" +
                "				(IFNULL(gfile.entityID,0) = -1   \n" +
                "				AND gfile.refTransID IN (SELECT opID FROM workorder_operation WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)   \n" +
                "				AND gfile.gencFileOwnerType = 'operations')  \n" +
                "				AND IFNULL(gfile.refParentId,0) = IFNULL(\",pRefParentId,\",0)  \n" +
                "				AND gfile.deletedAt IS NULL\");	  \n" +
                "    END IF;  \n" +
                "	-- if traveler page than get data of operation, workorder, workorder operation  \n" +
                "    IF (pIsTraveler = 1) THEN  \n" +
                "		SET whereClauseFolder = CONCAT(whereClauseFolder,\" OR  \n" +
                "				(IFNULL(gf.entityID,0) = -7  \n" +
                "				AND gf.refTransID IN (SELECT woID FROM workorder_operation WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)   \n" +
                "				AND gf.gencFileOwnerType = 'workorder')  \n" +
                "				AND IFNULL(gf.refParentId,0) = IFNULL(\",pRefParentId,\",0)  \n" +
                "				AND gf.deletedAt IS NULL\");  \n" +
                "		SET whereClauseFiles = CONCAT(whereClauseFiles, \" OR  \n" +
                "				(IFNULL(gfile.entityID,0) = -7  \n" +
                "				AND gfile.refTransID IN (SELECT woID FROM workorder_operation WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)   \n" +
                "				AND gfile.gencFileOwnerType = 'workorder')  \n" +
                "				AND IFNULL(gfile.refParentId,0) = IFNULL(\",pRefParentId,\",0)  \n" +
                "				AND gfile.deletedAt IS NULL\");  \n" +
                "    END IF;  \n" +
                "SET @SQLStatement1 = CONCAT(\"(  \n" +
                "	SELECT    \n" +
                "		gf.gencFolderName,  \n" +
                "		gf.gencFolderID,  \n" +
                "		gf.entityID,  \n" +
                "		gf.refTransID,  \n" +
                "		gf.gencFileOwnerType,  \n" +
                "		gf.roleId,  \n" +
                "		(SELECT CONCAT(firstName, ' ' ,  UPPER (LEFT(lastName,1))) FROM users WHERE id = gf.createdBy) AS folderModifiedBy,  \n" +
                "		gf.createdAt AS folderCreatedAt,  \n" +
                "		gf.refParentId AS folderParentID,  \n" +
                "		'' fileParentID,  \n" +
                "		'' gencFileID,  \n" +
                "		'' gencFileName,  \n" +
                "		'' gencOriginalName,  \n" +
                "		'' gencFileDescription,  \n" +
                "		'' gencFileExtension,  \n" +
                "		'' gencFileType,  \n" +
                "		'' isDefault,  \n" +
                "		'' fileTransID,  \n" +
                "		'' fileEntityID,  \n" +
                "		'' fileOwnerType,  \n" +
                "		'' isShared,  \n" +
                "		'' fileGroupBy,  \n" +
                "		'' fileModifiedBy,  \n" +
                "		'' fileCreatedAt,  \n" +
                "		'' fileSize	  \n" +
                "	FROM generic_folder AS gf   \n" +
                "	WHERE IFNULL(gf.refParentId,0) = IFNULL(\",pRefParentId,\",0)   \n" +
                "		AND gf.deletedAt IS NULL\", whereClauseFolder,\")  \n" +
                "UNION  \n" +
                "(  \n" +
                "	SELECT  \n" +
                "	'' gencFolderName,  \n" +
                "	'' gencFolderID,  \n" +
                "	'' entityID,  \n" +
                "	'' refTransID,  \n" +
                "	'' gencFileOwnerType,  \n" +
                "	'' roleId,  \n" +
                "	'' AS folderModifiedBy,  \n" +
                "	'' AS folderCreatedAt,  \n" +
                "	''  AS folderParentID,  \n" +
                "	gfile.refParentId AS fileParentID,  \n" +
                "	gfile.gencFileID,  \n" +
                "	gfile.gencFileName,  \n" +
                "	gfile.gencOriginalName,  \n" +
                "	gfile.gencFileDescription,  \n" +
                "	gfile.gencFileExtension,  \n" +
                "	gfile.gencFileType,  \n" +
                "	gfile.isDefault,  \n" +
                "	gfile.refTransID AS fileTransID,  \n" +
                "	gfile.entityID AS fileEntityID,  \n" +
                "	gfile.gencFileOwnerType AS fileOwnerType,  \n" +
                "	gfile.isShared,  \n" +
                "	gfile.fileGroupBy,  \n" +
                "	(SELECT CONCAT(firstName , ' ',  UPPER (LEFT(lastName,1))) FROM users WHERE id = gfile.createdBy) AS fileModifiedBy,  \n" +
                "	gfile.createdAt AS fileCreatedAt,  \n" +
                "	gfile.fileSize  \n" +
                "	FROM genericfiles AS gfile   \n" +
                "	WHERE IFNULL(gfile.refParentId,0) = IFNULL(\",pRefParentId,\",0)   \n" +
                "	AND gfile.deletedAt IS NULL\", whereClauseFiles,\")\");  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (11,'1.00','V1',' Document List display changes - Vaibhav '," + userid + ");"
            );
            break;
        case 11:
            allDbChangesArray.push(
            //            /* **************************** New Script -> 17-07-2018  *********************************** */
                                "CREATE PROCEDURE `Sproc_GetCustomerAliasByID`(  \n" +
                    "	IN refComponentID INT  \n" +
                    ")  \n" +
                    "BEGIN  \n" +
                    "select concat(a.custpn,'-', a.revision,'-' ,a.flextronRevision,'(',c.customerCode,')') As customerAlias  \n" +
                    "from ((component_cust_alias_rev as a  join component_cust_alias_rev_pn as cust  \n" +
                    "on  cust.refComponentCustAliasRevID= a.id)  \n" +
                    "join customers as c on a.customerID = c.id) where refComponentID = refComponentID ;  \n" +
                    "END;  \n" +
            //              /* **************************** Add Script Version -> 17-07-2018 *********************************** */
                         "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                          "VALUES (12,'1.00','V1','CustomerAlias SP - Mona '," + userid + ");"
                              );
            break;

        case 12:
            allDbChangesArray.push(
            //            /* **************************** New Script -> 18-07-2018  *********************************** */
            "alter table component_drivetools add column driveToolgroupID int null;  \n" +
            //              /* **************************** Add Script Version -> 18-07-2018 *********************************** */
                           "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                            "VALUES (13,'1.00','V1',' add column DrivetoolID - Mona'," + userid + ");"
                              );
            break;
        case 13:
            allDbChangesArray.push(
            //            /* **************************** New Script -> 18-07-2018  *********************************** */
                      "alter table component_drivetools drop column componentID;  \n" +
            //              /* **************************** Add Script Version -> 18-07-2018 *********************************** */
                           "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                            "VALUES (14,'1.00','V1',' drop column componentID from componentdriveTool-Mona '," + userid + ");"
                              );
            break;
        case 14:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-07-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(    \n" +
                "	IN tableName VARCHAR(255),    \n" +
                "	IN IDs LONGTEXT,    \n" +
                "	IN deletedBy INT,    \n" +
                "	IN entityID VARCHAR(255),    \n" +
                "	IN refrenceIDs LONGTEXT    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "	DECLARE vWoID1 INT(11);    \n" +
                "	DECLARE vOpID1 INT(11);    \n" +
                "	DECLARE vSerialNo1 VARCHAR(50);    \n" +
                "	DECLARE vProdStatus1 VARCHAR(5);    \n" +
                "	DECLARE vWoTransID1 INT(11);    \n" +
                "	DECLARE vQty1 INT(11);    \n" +
                "	DECLARE vOpID2 INT(11);    \n" +
                "	DECLARE vProdstatus2 VARCHAR(5);    \n" +
                "  \n" +
                "IF tableName='employees' THEN    \n" +
                " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)    \n" +
                "	   UNION ALL                          \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)    \n" +
                "           UNION ALL     \n" +
                "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND er.finalStatusInit IN(',IDs,') AND er.initiateBy IN(',IDs,') LIMIT 1)    \n" +
                "	   UNION ALL    \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)    \n" +
                "	UNION ALL    \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)    \n" +
                "	  UNION ALL    \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)    \n" +
                "	  UNION ALL    \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)    \n" +
                "	  UNION ALL    \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)    \n" +
                "	  UNION ALL    \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)    \n" +
                "	 UNION ALL    \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)    \n" +
                "	  UNION ALL    \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND wr.reqGenEmployeeID IN(',IDs,') and wr.woAuthorID IN(',IDs,') and wr.accRejBy IN(',IDs,') LIMIT 1)    \n" +
                "	  UNION ALL     \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND wr.commentemployeeID IN(',IDs,') AND wr.accRejBy IN(',IDs,') LIMIT 1)    \n" +
                "	  UNION ALL    \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND wr.employeeID IN(',IDs,') AND wr.requstedEmployeeID IN(',IDs,') LIMIT 1)     \n" +
                "	  UNION ALL        \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE wt.checkinEmployeeID IN(',IDs,') AND wt.checkoutEmployeeID IN(',IDs,') LIMIT 1)    \n" +
                "	  UNION ALL       \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)    \n" +
                "	 UNION ALL     \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)    \n" +
                "	 UNION ALL     \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)    \n" +
                "	 UNION ALL     \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND wthu.holdEmployeeId IN(',IDs,') and wthu.unHoldEmployeeId IN(',IDs,') LIMIT 1)    \n" +
                "	UNION ALL     \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)    \n" +
                "	 UNION ALL     \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)    \n" +
                "	 UNION ALL     \n" +
                "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)    \n" +
                "	 UNION ALL     \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND holdEmployeeId IN(',IDs,') AND unHoldEmployeeId IN(',IDs,')LIMIT 1)    \n" +
                "  \n" +
                "        ) q');    \n" +
                "    PREPARE stmt FROM @SQL;    \n" +
                "    EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempEmp)=0 THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');    \n" +
                "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');    \n" +
                "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');    \n" +
                "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');    \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			PREPARE stmt2 FROM @SQL2;    \n" +
                "			PREPARE stmt3 FROM @SQL3;    \n" +
                "			PREPARE stmt4 FROM @SQL4;    \n" +
                "			EXECUTE stmt1;    \n" +
                "			EXECUTE stmt2;    \n" +
                "			EXECUTE stmt3;    \n" +
                "			EXECUTE stmt4;    \n" +
                "			SELECT     \n" +
                "    *    \n" +
                "FROM    \n" +
                "    tempEmp;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempEmp;    \n" +
                "		END IF;    \n" +
                "  \n" +
                "    DROP TABLE tempEmp;    \n" +
                "END IF;    \n" +
                "IF tableName='eco_type_category' THEN    \n" +
                "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)     \n" +
                "	  ) q');    \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT     \n" +
                "    *    \n" +
                "FROM    \n" +
                "    tempEcoTypeCategory;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempEcoTypeCategory;    \n" +
                "		END IF;    \n" +
                "    DROP TABLE tempEcoTypeCategory;      \n" +
                "END IF;    \n" +
                "IF tableName='eco_type_values' THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)    \n" +
                "	  ) q');    \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT     \n" +
                "    *    \n" +
                "FROM    \n" +
                "    tempEcoTypeValues;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempEcoTypeValues;    \n" +
                "		END IF;    \n" +
                "    DROP TABLE tempEcoTypeValues;      \n" +
                "END IF;    \n" +
                "IF tableName='customers' THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_cust_alias\" else \"\" end as msg FROM component_cust_alias WHERE deletedAt IS NULL AND customerid IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)    \n" +
                "	 UNION ALL     \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)    \n" +
                "	  ) q');    \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		    \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');    \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			PREPARE stmt2 FROM @SQL2;    \n" +
                "			PREPARE stmt3 FROM @SQL3;    \n" +
                "			EXECUTE stmt1;    \n" +
                "			EXECUTE stmt2;    \n" +
                "			EXECUTE stmt3;    \n" +
                "  \n" +
                "			SELECT     \n" +
                "    *    \n" +
                "FROM    \n" +
                "    tempCustomers;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempCustomers;    \n" +
                "		END IF;    \n" +
                "    DROP TABLE tempCustomers;      \n" +
                "END IF;    \n" +
                "IF tableName='certificate_standards' THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)    \n" +
                "  \n" +
                "	  ) q');    \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		    \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');    \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			PREPARE stmt2 FROM @SQL2;    \n" +
                "			PREPARE stmt3 FROM @SQL3;    \n" +
                "			EXECUTE stmt1;    \n" +
                "			EXECUTE stmt2;    \n" +
                "			EXECUTE stmt3;    \n" +
                "  \n" +
                "			SELECT * FROM tempCertificateStandards;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempCertificateStandards;    \n" +
                "		END IF;    \n" +
                "    DROP TABLE tempCertificateStandards;      \n" +
                "END IF;    \n" +
                "IF tableName='department' THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)    \n" +
                "  \n" +
                "	  ) q');    \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		    \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');    \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			PREPARE stmt2 FROM @SQL2;    \n" +
                "			PREPARE stmt3 FROM @SQL3;    \n" +
                "			EXECUTE stmt1;    \n" +
                "			EXECUTE stmt2;    \n" +
                "			EXECUTE stmt3;    \n" +
                "  \n" +
                "			SELECT * FROM tempDepartment;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempDepartment;    \n" +
                "		END IF;    \n" +
                "    DROP TABLE tempDepartment;      \n" +
                "END IF;    \n" +
                "IF tableName='genericcategory' THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND eqpGroupID IN(',IDs,') AND eqpSubGroupID IN(',IDs,') AND eqpTypeID IN(',IDs,') AND eqpPossessionID IN(',IDs,') AND eqpOwnershipTypeID IN(',IDs,') AND locationTypeID IN(',IDs,')   LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)    \n" +
                "  \n" +
                "	  ) q');    \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT     \n" +
                "    *    \n" +
                "FROM    \n" +
                "    tempGenericCategory;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempGenericCategory;    \n" +
                "		END IF;    \n" +
                "    DROP TABLE tempGenericCategory;      \n" +
                "END IF;    \n" +
                "IF tableName='equipment' THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)    \n" +
                "  \n" +
                "	  ) q');    \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN    \n" +
                "			IF entityID IS NOT NULL THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		    \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');    \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			PREPARE stmt2 FROM @SQL2;    \n" +
                "			PREPARE stmt3 FROM @SQL3;    \n" +
                "			EXECUTE stmt1;    \n" +
                "			EXECUTE stmt2;    \n" +
                "			EXECUTE stmt3;    \n" +
                "  \n" +
                "			ELSE    \n" +
                "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "			END IF;    \n" +
                "  \n" +
                "			SELECT * FROM tempEquipment;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempEquipment;    \n" +
                "		END IF;    \n" +
                "    DROP TABLE tempEquipment;      \n" +
                "END IF;    \n" +
                "IF tableName='parts' THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)    \n" +
                "	  ) q');    \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempParts)=0 THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempParts;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempParts;    \n" +
                "		END IF;    \n" +
                "    DROP TABLE tempParts;      \n" +
                "END IF;    \n" +
                "IF tableName='master_templates' THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)    \n" +
                "	  ) q');    \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempMasterTemplate;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempMasterTemplate;    \n" +
                "		END IF;    \n" +
                "    DROP TABLE tempMasterTemplate;      \n" +
                "END IF;    \n" +
                "IF tableName='operations' THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)    \n" +
                "  \n" +
                "	  ) q');    \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempOperations)=0 THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		    \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');    \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			PREPARE stmt2 FROM @SQL2;    \n" +
                "			PREPARE stmt3 FROM @SQL3;    \n" +
                "			EXECUTE stmt1;    \n" +
                "			EXECUTE stmt2;    \n" +
                "			EXECUTE stmt3;    \n" +
                "  \n" +
                "			SELECT * FROM tempOperations;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempOperations;    \n" +
                "		END IF;    \n" +
                "    DROP TABLE tempOperations;      \n" +
                "END IF;    \n" +
                "IF tableName='workorder' THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL		    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)    \n" +
                "  \n" +
                "	  ) q');    \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN    \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete work order */    \n" +
                "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;     \n" +
                "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");    \n" +
                "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			    \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			    \n" +
                "			/* [E] - Add Time line log for delete work order */			    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update workorder set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		    \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');    \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');    \n" +
                "			SET @SQl4 = CONCAT('update workorder_certification set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			PREPARE stmt2 FROM @SQL2;    \n" +
                "			PREPARE stmt3 FROM @SQL3;    \n" +
                "			PREPARE stmt4 FROM @SQL4;    \n" +
                "			EXECUTE stmt1;    \n" +
                "			EXECUTE stmt2;    \n" +
                "			EXECUTE stmt3;    \n" +
                "			EXECUTE stmt4;    \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorder;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempWorkorder;    \n" +
                "		END IF;    \n" +
                "    DROP TABLE tempWorkorder;      \n" +
                "END IF;    \n" +
                "IF tableName='roles' THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)    \n" +
                "         UNION ALL    \n" +
                "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)    \n" +
                "         UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');    \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempRoles)=0 THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempRoles;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempRoles;    \n" +
                "		END IF;    \n" +
                "    DROP TABLE tempRoles;      \n" +
                "END IF;    \n" +
                "IF tableName='standard_class' THEN    \n" +
                " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND classIDs IN(',IDs,') LIMIT 1)    \n" +
                "	  ) q');    \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempStandardClass;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempStandardClass;    \n" +
                "		END IF;    \n" +
                "    DROP TABLE tempStandardClass;      \n" +
                "END IF;    \n" +
                "IF tableName='dataelement' THEN    \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		    \n" +
                "		UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)    \n" +
                "	  ) q');    \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt2 FROM @SQL2;    \n" +
                "			EXECUTE stmt2;    \n" +
                "  \n" +
                "  \n" +
                "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)    \n" +
                "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated    \n" +
                "			FROM dataelement dl WHERE dl.dataElementID = IDs;    \n" +
                "  \n" +
                "  \n" +
                "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */    \n" +
                "  \n" +
                "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"     \n" +
                "							where type IN(''',IDs,''') and deletedAt IS NULL ');		    \n" +
                "				PREPARE stmt3 FROM @SQL3;    \n" +
                "				EXECUTE stmt3;    \n" +
                "  \n" +
                "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */    \n" +
                "  \n" +
                "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */    \n" +
                "  \n" +
                "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs     \n" +
                "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN    \n" +
                "  \n" +
                "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"     \n" +
                "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'     \n" +
                "								AND isAutoIncrement = 1 AND deletedAt IS NULL)    \n" +
                "							 and deletedAt IS NULL ');		    \n" +
                "					     PREPARE stmt4 FROM @SQL4;    \n" +
                "				             EXECUTE stmt4;    \n" +
                "					END IF;	    \n" +
                "				END IF;    \n" +
                "  \n" +
                "  \n" +
                "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN    \n" +
                "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)     \n" +
                "						    AND deletedAt IS NULL');		    \n" +
                "				PREPARE stmt5 FROM @SQL5;    \n" +
                "				EXECUTE stmt5;    \n" +
                "  \n" +
                "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"     \n" +
                "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		    \n" +
                "				PREPARE stmt6 FROM @SQL6;    \n" +
                "				EXECUTE stmt6;    \n" +
                "  \n" +
                "  \n" +
                "			END IF;    \n" +
                "  \n" +
                "  \n" +
                "			SELECT * FROM tempDataElement;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempDataElement;    \n" +
                "		END IF;    \n" +
                "    DROP TABLE tempDataElement;      \n" +
                "  \n" +
                "END IF;    \n" +
                "IF tableName='workorder_preprogcomp' THEN    \n" +
                "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM    \n" +
                "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg    \n" +
                "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND    \n" +
                "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator    \n" +
                "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "    SELECT * FROM  tempComponent;    \n" +
                "    SELECT TotalCount FROM  tempComponent;    \n" +
                "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			    \n" +
                "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt2 FROM @SQL2;    \n" +
                "			EXECUTE stmt2;    \n" +
                "  \n" +
                "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where     \n" +
                "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator    \n" +
                "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		    \n" +
                "			PREPARE stmt3 FROM @SQL3;    \n" +
                "			EXECUTE stmt3;    \n" +
                "		SELECT     \n" +
                "			*    \n" +
                "		FROM    \n" +
                "			tempComponent;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempComponent;    \n" +
                "		END IF;    \n" +
                "    DROP TABLE tempComponent;      \n" +
                "END IF;    \n" +
                "IF tableName='component' THEN    \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_cust_alias\" else \"\" end as msg FROM component_cust_alias WHERE deletedAt IS NULL AND refcompid IN(',IDs,') LIMIT 1)    \n" +
                "		 UNION ALL    \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)    \n" +
                "  \n" +
                "	  ) q');    \n" +
                "	  PREPARE stmt FROM @SQL;    \n" +
                "	   EXECUTE stmt;    \n" +
                "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN    \n" +
                "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempComponent;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempComponent;    \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempComponent;     \n" +
                "END IF;    \n" +
                "IF tableName=\"workorder_cluster\" THEN     \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)    \n" +
                "		      ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN    \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete cluster */    \n" +
                "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster    \n" +
                "		WHERE clusterID = IDs AND deletedAt IS NULL;    \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder    \n" +
                "		WHERE woID = @lvWoID AND deletedAt IS NULL ;    \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");    \n" +
                "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		    \n" +
                "		/* [E] - Add Time line log for delete cluster */    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderCluster;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempWorkorderCluster;    \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempWorkorderCluster;     \n" +
                "END IF;    \n" +
                "IF tableName=\"workorder_operation\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)    \n" +
                "			 UNION ALL    \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		     \n" +
                "		      ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN    \n" +
                "			 /* [S] - Add Time line log for delete work order operation */    \n" +
                "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName    \n" +
                "			FROM workorder_operation     \n" +
                "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;     \n" +
                "  \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;    \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");    \n" +
                "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		    \n" +
                "			/* [E] - Add Time line log for delete work order operation */    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');    \n" +
                "		SET @SQl2 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');    \n" +
                "		SET @SQl3 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');    \n" +
                "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');    \n" +
                "		SET @SQl5 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');    \n" +
                "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');    \n" +
                "		SET @SQl7 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		    \n" +
                "  \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation    \n" +
                "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;    \n" +
                "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		    \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation    \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			PREPARE stmt2 FROM @SQL2;    \n" +
                "			PREPARE stmt3 FROM @SQL3;    \n" +
                "			PREPARE stmt4 FROM @SQL4;    \n" +
                "			PREPARE stmt5 FROM @SQL5;    \n" +
                "			PREPARE stmt6 FROM @SQL6;    \n" +
                "			PREPARE stmt7 FROM @SQl7;    \n" +
                "			PREPARE stmt8 FROM @SQl7;    \n" +
                "			EXECUTE stmt1;    \n" +
                "			EXECUTE stmt2;    \n" +
                "			EXECUTE stmt3;    \n" +
                "			EXECUTE stmt4;    \n" +
                "			EXECUTE stmt5;    \n" +
                "			EXECUTE stmt6;    \n" +
                "			EXECUTE stmt7;    \n" +
                "			EXECUTE stmt8;    \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderOperation;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempWorkorderOperation;    \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempWorkorderOperation;     \n" +
                "END IF;    \n" +
                "IF tableName=\"workorder_operation_part\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)    \n" +
                "		      ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN    \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete parts from work order */    \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName    \n" +
                "		FROM workorder_operation     \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;     \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;    \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts    \n" +
                "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;     \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");    \n" +
                "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */    \n" +
                "		/* [E] - Add Time line log for delete parts from work order */    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderPart;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempWorkorderPart;    \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempWorkorderPart;     \n" +
                "END IF;    \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)    \n" +
                "		      ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN    \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete Equipment from work order */    \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName    \n" +
                "		FROM workorder_operation     \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;     \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	    \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment    \n" +
                "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;     \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");    \n" +
                "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		    \n" +
                "		/* [E] -  Add Time line log for delete Equipment from work order */    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');    \n" +
                "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			PREPARE stmt2 FROM @SQL2;    \n" +
                "			EXECUTE stmt1;    \n" +
                "			EXECUTE stmt2;    \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderEquipment;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempWorkorderEquipment;    \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempWorkorderEquipment;     \n" +
                "END IF;    \n" +
                "IF tableName=\"workorder_operation_employee\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)    \n" +
                "		      ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN    \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete Employees from work order */    \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName    \n" +
                "		FROM workorder_operation     \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;     \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;    \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees    \n" +
                "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;     \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");    \n" +
                "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		    \n" +
                "		/* [E] -  Add Time line log for delete Employee from work order */    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderEmployee;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempWorkorderEmployee;    \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempWorkorderEmployee;    \n" +
                "  \n" +
                "END IF;    \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)    \n" +
                "		      ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN    \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete operations from cluster */    \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName    \n" +
                "		FROM workorder_operation     \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;     \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;    \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster    \n" +
                "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;     \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");    \n" +
                "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		    \n" +
                "		/* [E] -  Add Time line log for delete operations from cluster */		    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		    \n" +
                "  \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation    \n" +
                "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;    \n" +
                "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		    \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation    \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			PREPARE stmt2 FROM @SQL2;    \n" +
                "			EXECUTE stmt1;    \n" +
                "			EXECUTE stmt2;    \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderOperationCluster;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempWorkorderOperationCluster;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempWorkorderOperationCluster;     \n" +
                "END IF;    \n" +
                "IF tableName=\"entity\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)    \n" +
                "		     UNION ALL    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)    \n" +
                "		     UNION ALL    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)    \n" +
                "		    UNION ALL    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)    \n" +
                "		      ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempEntity)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempEntity;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempEntity;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempEntity;     \n" +
                "END IF;    \n" +
                "IF tableName=\"salesordermst\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)    \n" +
                "		      ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempSalesOrderMst;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempSalesOrderMst;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempSalesOrderMst;     \n" +
                "END IF;    \n" +
                "IF tableName=\"mfgcodemst\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)    \n" +
                "		      ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempMFGCodeMst;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempMFGCodeMst;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempMFGCodeMst;     \n" +
                "END IF;    \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"     \n" +
                "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)    \n" +
                "				and deletedAt IS NULL');		    \n" +
                "			PREPARE stmt2 FROM @SQL2;    \n" +
                "			EXECUTE stmt2;    \n" +
                "  \n" +
                "  \n" +
                "END IF;    \n" +
                "IF tableName=\"shippedassembly\" THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "  \n" +
                "END IF;    \n" +
                "IF tableName=\"assemblymst\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)    \n" +
                "		     UNION ALL    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)    \n" +
                "		     UNION ALL    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)    \n" +
                "		     UNION ALL    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)    \n" +
                "		    UNION ALL    \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)    \n" +
                "		      ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempassemblymst;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempassemblymst;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempassemblymst;     \n" +
                "END IF;    \n" +
                "IF tableName=\"assembly_revisionmst\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND fromRevisionID IN(',IDs,') AND toRevisionID IN(',IDs,')  LIMIT 1)    \n" +
                "		     UNION ALL    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)    \n" +
                "		     UNION ALL    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)    \n" +
                "		     UNION ALL    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)    \n" +
                "		    UNION ALL    \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)    \n" +
                "		      ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempassembly_revisionmst;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempassembly_revisionmst;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempassembly_revisionmst;     \n" +
                "END IF;    \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN    \n" +
                "  \n" +
                "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1     \n" +
                "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;    \n" +
                "  \n" +
                "  \n" +
                "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)    \n" +
                "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)     \n" +
                "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1     \n" +
                "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;    \n" +
                "  \n" +
                "	/* condition to check total serials of type greater than actual production qty */    \n" +
                "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1    \n" +
                "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)     \n" +
                "		> IFNULL(vQty1,0)) THEN    \n" +
                "  \n" +
                "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */    \n" +
                "		IF(vQty1 IS NULL OR vQty1 = 0) THEN     \n" +
                "  \n" +
                "			/* condition to check curr opis and status match with given delete serial */    \n" +
                "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1    \n" +
                "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN    \n" +
                "  \n" +
                "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()    \n" +
                "				WHERE woTransSerialID = IDs;	    \n" +
                "  \n" +
                "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno     \n" +
                "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL    \n" +
                "				ORDER BY woTransSerialID DESC LIMIT 1;    \n" +
                "  \n" +
                "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2    \n" +
                "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	    \n" +
                "  \n" +
                "			ELSE     \n" +
                "				SELECT 'not allowed';    \n" +
                "			END IF;    \n" +
                "  \n" +
                "  \n" +
                "		ELSE     \n" +
                "  \n" +
                "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()    \n" +
                "			WHERE woTransSerialID = IDs;	    \n" +
                "  \n" +
                "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno     \n" +
                "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL    \n" +
                "			ORDER BY woTransSerialID DESC LIMIT 1;    \n" +
                "  \n" +
                "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2    \n" +
                "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	    \n" +
                "  \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "	ELSE     \n" +
                "		SELECT 'not allowed';		    \n" +
                "	END IF;	    \n" +
                "  \n" +
                "  \n" +
                "END IF;    \n" +
                "IF tableName=\"br_label_template\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)    \n" +
                "		      ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempbr_label_template;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempbr_label_template;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempbr_label_template;     \n" +
                "END IF;    \n" +
                "IF tableName=\"measurement_types\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)    \n" +
                "		     UNION ALL    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempMeasurement_types;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempMeasurement_types;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempMeasurement_types;     \n" +
                "END IF;    \n" +
                "IF tableName=\"uoms\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg     \n" +
                "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)    \n" +
                "            UNION ALL    \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg     \n" +
                "            FROM unit_detail_formula WHERE deletedAt IS NULL AND unitID IN (',IDs,')  or toUnitID IN (',IDs,')  LIMIT 1)) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempUOMs;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempUOMs;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempUOMs;     \n" +
                "END IF;    \n" +
                "IF tableName=\"jobtypes\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg     \n" +
                "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempJobTypess;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempJobTypess;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempJobTypess;     \n" +
                "END IF;    \n" +
                "IF tableName=\"ordertype\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg     \n" +
                "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempOrderTypes;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempOrderTypes;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempOrderTypes;     \n" +
                "END IF;    \n" +
                "IF tableName=\"reasonmst\" THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "END IF;    \n" +
                "IF tableName='component_sid_stock' THEN	    \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)    \n" +
                "			UNION ALL    \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		        \n" +
                "		    ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempcomponentsidstock;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempcomponentsidstock;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempcomponentsidstock;     \n" +
                "  \n" +
                "END IF;    \n" +
                "IF tableName='component_sid_stock_dataelement_values' THEN	    \n" +
                "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "END IF;    \n" +
                "IF tableName='chart_templatemst' THEN	    \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)    \n" +
                "		    ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempcharttemplatemst;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempcharttemplatemst;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempcharttemplatemst;     \n" +
                "  \n" +
                "END IF;    \n" +
                "IF tableName=\"shipping_request\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg     \n" +
                "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)    \n" +
                "            UNION ALL    \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg     \n" +
                "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempShippingRequest;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempShippingRequest;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempShippingRequest;     \n" +
                "END IF;    \n" +
                "IF tableName=\"chart_rawdata_category\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg     \n" +
                "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)    \n" +
                "            UNION ALL    \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg     \n" +
                "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempChartRawdataCategory;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempChartRawdataCategory;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempChartRawdataCategory;     \n" +
                "END IF;    \n" +
                "IF tableName=\"component_standard\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg     \n" +
                "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempcomponentStandard;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempcomponentStandard;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempcomponentStandard;     \n" +
                "END IF;    \n" +
                "IF tableName=\"component_standard_class\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg     \n" +
                "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');    \n" +
                "           /*  UNION ALL    \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg     \n" +
                "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',standardClassID,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt2 FROM @SQL2;    \n" +
                "			EXECUTE stmt2;    \n" +
                "  \n" +
                "			SELECT * FROM tempcomponentStandardClass;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempcomponentStandardClass;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempcomponentStandardClass;     \n" +
                "END IF;    \n" +
                "IF tableName=\"rfq_lineitems\" THEN    \n" +
                "		SELECT 0 TotalCount, '' Message;    \n" +
                "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "		PREPARE stmt1 FROM @SQL1;    \n" +
                "		EXECUTE stmt1;                \n" +
                "END IF;    \n" +
                "IF tableName=\"requirement\" THEN    \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg     \n" +
                "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM temprequirements)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM temprequirements;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM temprequirements;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE temprequirements;     \n" +
                "END IF;    \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN    \n" +
                "		SELECT 0 TotalCount, '' Message;    \n" +
                "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		    \n" +
                "		PREPARE stmt1 FROM @SQL1;    \n" +
                "		EXECUTE stmt1;                \n" +
                "END IF;    \n" +
                "IF tableName=\"customer_addresses\" THEN    \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)    \n" +
                "			UNION ALL    \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg     \n" +
                "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM tempcustomer_addresses;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM tempcustomer_addresses;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE tempcustomer_addresses;     \n" +
                "END IF;    \n" +
                "IF tableName=\"rfqforms\" THEN    \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg     \n" +
                "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in     \n" +
                "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');    \n" +
                "  \n" +
                "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in     \n" +
                "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		    \n" +
                "  \n" +
                "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in     \n" +
                "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		    \n" +
                "  \n" +
                "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in     \n" +
                "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		    \n" +
                "  \n" +
                "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in     \n" +
                "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');    \n" +
                "  \n" +
                "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		    \n" +
                "  \n" +
                "            PREPARE stmt1 FROM @SQL1;    \n" +
                "			PREPARE stmt2 FROM @SQL2;    \n" +
                "            PREPARE stmt3 FROM @SQL3;    \n" +
                "			PREPARE stmt4 FROM @SQL4;    \n" +
                "            PREPARE stmt5 FROM @SQL5;    \n" +
                "			PREPARE stmt6 FROM @SQL6;    \n" +
                "  \n" +
                "			EXECUTE stmt1;    \n" +
                "			EXECUTE stmt2;    \n" +
                "            EXECUTE stmt3;    \n" +
                "			EXECUTE stmt4;    \n" +
                "            EXECUTE stmt5;    \n" +
                "			EXECUTE stmt6;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SELECT * FROM temprfqformss;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM temprfqformss;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE temprfqformss;     \n" +
                "END IF;    \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN    \n" +
                "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as    \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message    \n" +
                "		    FROM     \n" +
                "		    (    \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg     \n" +
                "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1) ) q');    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;    \n" +
                "	EXECUTE stmt;    \n" +
                "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN    \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM temprfqpartcategory;    \n" +
                "		ELSE    \n" +
                "			SELECT * FROM temprfqpartcategory;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "		DROP TABLE temprfqpartcategory;     \n" +
                "  \n" +
                "END IF;    \n" +
                "IF tableName=\"who_bought_who\" THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "END IF;    \n" +
                "IF tableName=\"rfq_parttypemst\" THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "END IF;    \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "END IF;    \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN    \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		    \n" +
                "			PREPARE stmt1 FROM @SQL1;    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (15,'1.00','V1',' Delete sp changes for workorder certificate delete - Vaibhav '," + userid + ");"
            );
            break;
        case 15:
            allDbChangesArray.push(
            /* **************************** New Script -> 19-07-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
            "CREATE PROCEDURE `Sproc_checkDelete`(      \n" +
            "	IN tableName VARCHAR(255),      \n" +
            "	IN IDs LONGTEXT,      \n" +
            "	IN deletedBy INT,      \n" +
            "	IN entityID VARCHAR(255),      \n" +
            "	IN refrenceIDs LONGTEXT      \n" +
            "    )  \n" +
            "BEGIN      \n" +
            "	DECLARE vWoID1 INT(11);      \n" +
            "	DECLARE vOpID1 INT(11);      \n" +
            "	DECLARE vSerialNo1 VARCHAR(50);      \n" +
            "	DECLARE vProdStatus1 VARCHAR(5);      \n" +
            "	DECLARE vWoTransID1 INT(11);      \n" +
            "	DECLARE vQty1 INT(11);      \n" +
            "	DECLARE vOpID2 INT(11);      \n" +
            "	DECLARE vProdstatus2 VARCHAR(5);      \n" +
            "  \n" +
            "IF tableName='employees' THEN      \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)      \n" +
            "	   UNION ALL                            \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)      \n" +
            "           UNION ALL       \n" +
            "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND er.finalStatusInit IN(',IDs,') AND er.initiateBy IN(',IDs,') LIMIT 1)      \n" +
            "	   UNION ALL      \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)      \n" +
            "	UNION ALL      \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)      \n" +
            "	  UNION ALL      \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)      \n" +
            "	  UNION ALL      \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)      \n" +
            "	  UNION ALL      \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)      \n" +
            "	  UNION ALL      \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)      \n" +
            "	 UNION ALL      \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)      \n" +
            "	  UNION ALL      \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND wr.reqGenEmployeeID IN(',IDs,') and wr.woAuthorID IN(',IDs,') and wr.accRejBy IN(',IDs,') LIMIT 1)      \n" +
            "	  UNION ALL       \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND wr.commentemployeeID IN(',IDs,') AND wr.accRejBy IN(',IDs,') LIMIT 1)      \n" +
            "	  UNION ALL      \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND wr.employeeID IN(',IDs,') AND wr.requstedEmployeeID IN(',IDs,') LIMIT 1)       \n" +
            "	  UNION ALL          \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE wt.checkinEmployeeID IN(',IDs,') AND wt.checkoutEmployeeID IN(',IDs,') LIMIT 1)      \n" +
            "	  UNION ALL         \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)      \n" +
            "	 UNION ALL       \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)      \n" +
            "	 UNION ALL       \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)      \n" +
            "	 UNION ALL       \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND wthu.holdEmployeeId IN(',IDs,') and wthu.unHoldEmployeeId IN(',IDs,') LIMIT 1)      \n" +
            "	UNION ALL       \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)      \n" +
            "	 UNION ALL       \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)      \n" +
            "	 UNION ALL       \n" +
            "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)      \n" +
            "	 UNION ALL       \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND holdEmployeeId IN(',IDs,') AND unHoldEmployeeId IN(',IDs,')LIMIT 1)      \n" +
            "  \n" +
            "        ) q');      \n" +
            "    PREPARE stmt FROM @SQL;      \n" +
            "    EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempEmp)=0 THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');      \n" +
            "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');      \n" +
            "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');      \n" +
            "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');      \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			PREPARE stmt2 FROM @SQL2;      \n" +
            "			PREPARE stmt3 FROM @SQL3;      \n" +
            "			PREPARE stmt4 FROM @SQL4;      \n" +
            "			EXECUTE stmt1;      \n" +
            "			EXECUTE stmt2;      \n" +
            "			EXECUTE stmt3;      \n" +
            "			EXECUTE stmt4;      \n" +
            "			SELECT       \n" +
            "    *      \n" +
            "FROM      \n" +
            "    tempEmp;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempEmp;      \n" +
            "		END IF;      \n" +
            "  \n" +
            "    DROP TABLE tempEmp;      \n" +
            "END IF;      \n" +
            "IF tableName='eco_type_category' THEN      \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)       \n" +
            "	  ) q');      \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT       \n" +
            "    *      \n" +
            "FROM      \n" +
            "    tempEcoTypeCategory;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempEcoTypeCategory;      \n" +
            "		END IF;      \n" +
            "    DROP TABLE tempEcoTypeCategory;        \n" +
            "END IF;      \n" +
            "IF tableName='eco_type_values' THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)      \n" +
            "	  ) q');      \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT       \n" +
            "    *      \n" +
            "FROM      \n" +
            "    tempEcoTypeValues;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempEcoTypeValues;      \n" +
            "		END IF;      \n" +
            "    DROP TABLE tempEcoTypeValues;        \n" +
            "END IF;      \n" +
            "IF tableName='customers' THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL       \n" +
            "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL       \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)      \n" +
            "	  ) q');      \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		      \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');      \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			PREPARE stmt2 FROM @SQL2;      \n" +
            "			PREPARE stmt3 FROM @SQL3;      \n" +
            "			EXECUTE stmt1;      \n" +
            "			EXECUTE stmt2;      \n" +
            "			EXECUTE stmt3;      \n" +
            "  \n" +
            "			SELECT       \n" +
            "    *      \n" +
            "FROM      \n" +
            "    tempCustomers;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempCustomers;      \n" +
            "		END IF;      \n" +
            "    DROP TABLE tempCustomers;        \n" +
            "END IF;      \n" +
            "IF tableName='certificate_standards' THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)      \n" +
            "  \n" +
            "	  ) q');      \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		      \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');      \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			PREPARE stmt2 FROM @SQL2;      \n" +
            "			PREPARE stmt3 FROM @SQL3;      \n" +
            "			EXECUTE stmt1;      \n" +
            "			EXECUTE stmt2;      \n" +
            "			EXECUTE stmt3;      \n" +
            "  \n" +
            "			SELECT * FROM tempCertificateStandards;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempCertificateStandards;      \n" +
            "		END IF;      \n" +
            "    DROP TABLE tempCertificateStandards;        \n" +
            "END IF;      \n" +
            "IF tableName='department' THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)      \n" +
            "  \n" +
            "	  ) q');      \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		      \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');      \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			PREPARE stmt2 FROM @SQL2;      \n" +
            "			PREPARE stmt3 FROM @SQL3;      \n" +
            "			EXECUTE stmt1;      \n" +
            "			EXECUTE stmt2;      \n" +
            "			EXECUTE stmt3;      \n" +
            "  \n" +
            "			SELECT * FROM tempDepartment;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempDepartment;      \n" +
            "		END IF;      \n" +
            "    DROP TABLE tempDepartment;        \n" +
            "END IF;      \n" +
            "IF tableName='genericcategory' THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND eqpGroupID IN(',IDs,') AND eqpSubGroupID IN(',IDs,') AND eqpTypeID IN(',IDs,') AND eqpPossessionID IN(',IDs,') AND eqpOwnershipTypeID IN(',IDs,') AND locationTypeID IN(',IDs,')   LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)      \n" +
            "  \n" +
            "	  ) q');      \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT       \n" +
            "    *      \n" +
            "FROM      \n" +
            "    tempGenericCategory;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempGenericCategory;      \n" +
            "		END IF;      \n" +
            "    DROP TABLE tempGenericCategory;        \n" +
            "END IF;      \n" +
            "IF tableName='equipment' THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)      \n" +
            "  \n" +
            "	  ) q');      \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN      \n" +
            "			IF entityID IS NOT NULL THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		      \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');      \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			PREPARE stmt2 FROM @SQL2;      \n" +
            "			PREPARE stmt3 FROM @SQL3;      \n" +
            "			EXECUTE stmt1;      \n" +
            "			EXECUTE stmt2;      \n" +
            "			EXECUTE stmt3;      \n" +
            "  \n" +
            "			ELSE      \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "			END IF;      \n" +
            "  \n" +
            "			SELECT * FROM tempEquipment;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempEquipment;      \n" +
            "		END IF;      \n" +
            "    DROP TABLE tempEquipment;        \n" +
            "END IF;      \n" +
            "IF tableName='parts' THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)      \n" +
            "	  ) q');      \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempParts)=0 THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempParts;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempParts;      \n" +
            "		END IF;      \n" +
            "    DROP TABLE tempParts;        \n" +
            "END IF;      \n" +
            "IF tableName='master_templates' THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)      \n" +
            "	  ) q');      \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempMasterTemplate;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempMasterTemplate;      \n" +
            "		END IF;      \n" +
            "    DROP TABLE tempMasterTemplate;        \n" +
            "END IF;      \n" +
            "IF tableName='operations' THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)      \n" +
            "  \n" +
            "	  ) q');      \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempOperations)=0 THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		      \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');      \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			PREPARE stmt2 FROM @SQL2;      \n" +
            "			PREPARE stmt3 FROM @SQL3;      \n" +
            "			EXECUTE stmt1;      \n" +
            "			EXECUTE stmt2;      \n" +
            "			EXECUTE stmt3;      \n" +
            "  \n" +
            "			SELECT * FROM tempOperations;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempOperations;      \n" +
            "		END IF;      \n" +
            "    DROP TABLE tempOperations;        \n" +
            "END IF;      \n" +
            "IF tableName='workorder' THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL		      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)      \n" +
            "  \n" +
            "	  ) q');      \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN      \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete work order */      \n" +
            "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;       \n" +
            "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");      \n" +
            "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			      \n" +
            "			/* [E] - Add Time line log for delete work order */			      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		      \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');      \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');      \n" +
            "			SET @SQl4 = CONCAT('update workorder_certification set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			PREPARE stmt2 FROM @SQL2;      \n" +
            "			PREPARE stmt3 FROM @SQL3;      \n" +
            "			PREPARE stmt4 FROM @SQL4;      \n" +
            "			EXECUTE stmt1;      \n" +
            "			EXECUTE stmt2;      \n" +
            "			EXECUTE stmt3;      \n" +
            "			EXECUTE stmt4;      \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorder;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempWorkorder;      \n" +
            "		END IF;      \n" +
            "    DROP TABLE tempWorkorder;        \n" +
            "END IF;      \n" +
            "IF tableName='roles' THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)      \n" +
            "         UNION ALL      \n" +
            "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)      \n" +
            "         UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');      \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempRoles)=0 THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempRoles;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempRoles;      \n" +
            "		END IF;      \n" +
            "    DROP TABLE tempRoles;        \n" +
            "END IF;      \n" +
            "IF tableName='standard_class' THEN      \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND classIDs IN(',IDs,') LIMIT 1)      \n" +
            "	  ) q');      \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempStandardClass;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempStandardClass;      \n" +
            "		END IF;      \n" +
            "    DROP TABLE tempStandardClass;        \n" +
            "END IF;      \n" +
            "IF tableName='dataelement' THEN      \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		      \n" +
            "		UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)      \n" +
            "	  ) q');      \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt2 FROM @SQL2;      \n" +
            "			EXECUTE stmt2;      \n" +
            "  \n" +
            "  \n" +
            "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)      \n" +
            "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated      \n" +
            "			FROM dataelement dl WHERE dl.dataElementID = IDs;      \n" +
            "  \n" +
            "  \n" +
            "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */      \n" +
            "  \n" +
            "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"       \n" +
            "							where type IN(''',IDs,''') and deletedAt IS NULL ');		      \n" +
            "				PREPARE stmt3 FROM @SQL3;      \n" +
            "				EXECUTE stmt3;      \n" +
            "  \n" +
            "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */      \n" +
            "  \n" +
            "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */      \n" +
            "  \n" +
            "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs       \n" +
            "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN      \n" +
            "  \n" +
            "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"       \n" +
            "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'       \n" +
            "								AND isAutoIncrement = 1 AND deletedAt IS NULL)      \n" +
            "							 and deletedAt IS NULL ');		      \n" +
            "					     PREPARE stmt4 FROM @SQL4;      \n" +
            "				             EXECUTE stmt4;      \n" +
            "					END IF;	      \n" +
            "				END IF;      \n" +
            "  \n" +
            "  \n" +
            "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN      \n" +
            "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)       \n" +
            "						    AND deletedAt IS NULL');		      \n" +
            "				PREPARE stmt5 FROM @SQL5;      \n" +
            "				EXECUTE stmt5;      \n" +
            "  \n" +
            "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"       \n" +
            "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		      \n" +
            "				PREPARE stmt6 FROM @SQL6;      \n" +
            "				EXECUTE stmt6;      \n" +
            "  \n" +
            "  \n" +
            "			END IF;      \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM tempDataElement;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempDataElement;      \n" +
            "		END IF;      \n" +
            "    DROP TABLE tempDataElement;        \n" +
            "  \n" +
            "END IF;      \n" +
            "IF tableName='workorder_preprogcomp' THEN      \n" +
            "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM      \n" +
            "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg      \n" +
            "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND      \n" +
            "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator      \n" +
            "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "    SELECT * FROM  tempComponent;      \n" +
            "    SELECT TotalCount FROM  tempComponent;      \n" +
            "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			      \n" +
            "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt2 FROM @SQL2;      \n" +
            "			EXECUTE stmt2;      \n" +
            "  \n" +
            "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where       \n" +
            "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator      \n" +
            "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		      \n" +
            "			PREPARE stmt3 FROM @SQL3;      \n" +
            "			EXECUTE stmt3;      \n" +
            "		SELECT       \n" +
            "			*      \n" +
            "		FROM      \n" +
            "			tempComponent;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempComponent;      \n" +
            "		END IF;      \n" +
            "    DROP TABLE tempComponent;        \n" +
            "END IF;      \n" +
            "IF tableName='component' THEN      \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)      \n" +
            "		 UNION ALL      \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)      \n" +
            "  \n" +
            "	  ) q');      \n" +
            "	  PREPARE stmt FROM @SQL;      \n" +
            "	   EXECUTE stmt;      \n" +
            "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN      \n" +
            "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempComponent;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempComponent;      \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempComponent;       \n" +
            "END IF;      \n" +
            "IF tableName=\"workorder_cluster\" THEN       \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)      \n" +
            "		      ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN      \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete cluster */      \n" +
            "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster      \n" +
            "		WHERE clusterID = IDs AND deletedAt IS NULL;      \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder      \n" +
            "		WHERE woID = @lvWoID AND deletedAt IS NULL ;      \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");      \n" +
            "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	      \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		      \n" +
            "		/* [E] - Add Time line log for delete cluster */      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderCluster;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempWorkorderCluster;      \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempWorkorderCluster;       \n" +
            "END IF;      \n" +
            "IF tableName=\"workorder_operation\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)      \n" +
            "			 UNION ALL      \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		       \n" +
            "		      ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN      \n" +
            "			 /* [S] - Add Time line log for delete work order operation */      \n" +
            "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName      \n" +
            "			FROM workorder_operation       \n" +
            "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;       \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;      \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");      \n" +
            "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		      \n" +
            "			/* [E] - Add Time line log for delete work order operation */      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');      \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');      \n" +
            "		SET @SQl3 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');      \n" +
            "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');      \n" +
            "		SET @SQl5 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');      \n" +
            "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');      \n" +
            "		SET @SQl7 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		      \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation      \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;      \n" +
            "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		      \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation      \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			PREPARE stmt2 FROM @SQL2;      \n" +
            "			PREPARE stmt3 FROM @SQL3;      \n" +
            "			PREPARE stmt4 FROM @SQL4;      \n" +
            "			PREPARE stmt5 FROM @SQL5;      \n" +
            "			PREPARE stmt6 FROM @SQL6;      \n" +
            "			PREPARE stmt7 FROM @SQl7;      \n" +
            "			PREPARE stmt8 FROM @SQl7;      \n" +
            "			EXECUTE stmt1;      \n" +
            "			EXECUTE stmt2;      \n" +
            "			EXECUTE stmt3;      \n" +
            "			EXECUTE stmt4;      \n" +
            "			EXECUTE stmt5;      \n" +
            "			EXECUTE stmt6;      \n" +
            "			EXECUTE stmt7;      \n" +
            "			EXECUTE stmt8;      \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperation;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempWorkorderOperation;      \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempWorkorderOperation;       \n" +
            "END IF;      \n" +
            "IF tableName=\"workorder_operation_part\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)      \n" +
            "		      ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN      \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete parts from work order */      \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName      \n" +
            "		FROM workorder_operation       \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;       \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;      \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts      \n" +
            "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;       \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");      \n" +
            "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	      \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */      \n" +
            "		/* [E] - Add Time line log for delete parts from work order */      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderPart;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempWorkorderPart;      \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempWorkorderPart;       \n" +
            "END IF;      \n" +
            "IF tableName=\"workorder_operation_equipment\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)      \n" +
            "		      ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN      \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Equipment from work order */      \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName      \n" +
            "		FROM workorder_operation       \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;       \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	      \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment      \n" +
            "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;       \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");      \n" +
            "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	      \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		      \n" +
            "		/* [E] -  Add Time line log for delete Equipment from work order */      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');      \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			PREPARE stmt2 FROM @SQL2;      \n" +
            "			EXECUTE stmt1;      \n" +
            "			EXECUTE stmt2;      \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEquipment;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempWorkorderEquipment;      \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempWorkorderEquipment;       \n" +
            "END IF;      \n" +
            "IF tableName=\"workorder_operation_employee\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)      \n" +
            "		      ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN      \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Employees from work order */      \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName      \n" +
            "		FROM workorder_operation       \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;       \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;      \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees      \n" +
            "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;       \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");      \n" +
            "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	      \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		      \n" +
            "		/* [E] -  Add Time line log for delete Employee from work order */      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEmployee;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempWorkorderEmployee;      \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempWorkorderEmployee;      \n" +
            "  \n" +
            "END IF;      \n" +
            "IF tableName=\"workorder_operation_cluster\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)      \n" +
            "		      ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN      \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete operations from cluster */      \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName      \n" +
            "		FROM workorder_operation       \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;       \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;      \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster      \n" +
            "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;       \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");      \n" +
            "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	      \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		      \n" +
            "		/* [E] -  Add Time line log for delete operations from cluster */		      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		      \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation      \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;      \n" +
            "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		      \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation      \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			PREPARE stmt2 FROM @SQL2;      \n" +
            "			EXECUTE stmt1;      \n" +
            "			EXECUTE stmt2;      \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempWorkorderOperationCluster;       \n" +
            "END IF;      \n" +
            "IF tableName=\"entity\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)      \n" +
            "		     UNION ALL      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)      \n" +
            "		     UNION ALL      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)      \n" +
            "		    UNION ALL      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)      \n" +
            "		      ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempEntity)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempEntity;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempEntity;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempEntity;       \n" +
            "END IF;      \n" +
            "IF tableName=\"salesordermst\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)      \n" +
            "		      ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempSalesOrderMst;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempSalesOrderMst;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempSalesOrderMst;       \n" +
            "END IF;      \n" +
            "IF tableName=\"mfgcodemst\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)      \n" +
            "		      ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempMFGCodeMst;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempMFGCodeMst;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempMFGCodeMst;       \n" +
            "END IF;      \n" +
            "IF tableName=\"dataelement_transactionvalues_manual\" THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"       \n" +
            "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)      \n" +
            "				and deletedAt IS NULL');		      \n" +
            "			PREPARE stmt2 FROM @SQL2;      \n" +
            "			EXECUTE stmt2;      \n" +
            "  \n" +
            "  \n" +
            "END IF;      \n" +
            "IF tableName=\"shippedassembly\" THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "  \n" +
            "END IF;      \n" +
            "IF tableName=\"assemblymst\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)      \n" +
            "		     UNION ALL      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)      \n" +
            "		     UNION ALL      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)      \n" +
            "		     UNION ALL      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)      \n" +
            "		    UNION ALL      \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)      \n" +
            "		      ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempassemblymst;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempassemblymst;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempassemblymst;       \n" +
            "END IF;      \n" +
            "IF tableName=\"assembly_revisionmst\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND fromRevisionID IN(',IDs,') AND toRevisionID IN(',IDs,')  LIMIT 1)      \n" +
            "		     UNION ALL      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)      \n" +
            "		     UNION ALL      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)      \n" +
            "		     UNION ALL      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)      \n" +
            "		    UNION ALL      \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)      \n" +
            "		      ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempassembly_revisionmst;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempassembly_revisionmst;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempassembly_revisionmst;       \n" +
            "END IF;      \n" +
            "IF tableName=\"workorder_trans_serialno\" THEN      \n" +
            "  \n" +
            "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1       \n" +
            "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;      \n" +
            "  \n" +
            "  \n" +
            "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)      \n" +
            "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)       \n" +
            "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1       \n" +
            "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;      \n" +
            "  \n" +
            "	/* condition to check total serials of type greater than actual production qty */      \n" +
            "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1      \n" +
            "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)       \n" +
            "		> IFNULL(vQty1,0)) THEN      \n" +
            "  \n" +
            "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */      \n" +
            "		IF(vQty1 IS NULL OR vQty1 = 0) THEN       \n" +
            "  \n" +
            "			/* condition to check curr opis and status match with given delete serial */      \n" +
            "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1      \n" +
            "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN      \n" +
            "  \n" +
            "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()      \n" +
            "				WHERE woTransSerialID = IDs;	      \n" +
            "  \n" +
            "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno       \n" +
            "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL      \n" +
            "				ORDER BY woTransSerialID DESC LIMIT 1;      \n" +
            "  \n" +
            "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2      \n" +
            "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	      \n" +
            "  \n" +
            "			ELSE       \n" +
            "				SELECT 'not allowed';      \n" +
            "			END IF;      \n" +
            "  \n" +
            "  \n" +
            "		ELSE       \n" +
            "  \n" +
            "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()      \n" +
            "			WHERE woTransSerialID = IDs;	      \n" +
            "  \n" +
            "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno       \n" +
            "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL      \n" +
            "			ORDER BY woTransSerialID DESC LIMIT 1;      \n" +
            "  \n" +
            "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2      \n" +
            "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	      \n" +
            "  \n" +
            "		END IF;	      \n" +
            "  \n" +
            "  \n" +
            "	ELSE       \n" +
            "		SELECT 'not allowed';		      \n" +
            "	END IF;	      \n" +
            "  \n" +
            "  \n" +
            "END IF;      \n" +
            "IF tableName=\"br_label_template\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)      \n" +
            "		      ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempbr_label_template;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempbr_label_template;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempbr_label_template;       \n" +
            "END IF;      \n" +
            "IF tableName=\"measurement_types\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)      \n" +
            "		     UNION ALL      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempMeasurement_types;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempMeasurement_types;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempMeasurement_types;       \n" +
            "END IF;      \n" +
            "IF tableName=\"uoms\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg       \n" +
            "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)      \n" +
            "            UNION ALL      \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg       \n" +
            "            FROM unit_detail_formula WHERE deletedAt IS NULL AND unitID IN (',IDs,')  or toUnitID IN (',IDs,')  LIMIT 1)) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempUOMs;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempUOMs;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempUOMs;       \n" +
            "END IF;      \n" +
            "IF tableName=\"jobtypes\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg       \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempJobTypess;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempJobTypess;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempJobTypess;       \n" +
            "END IF;      \n" +
            "IF tableName=\"ordertype\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg       \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempOrderTypes;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempOrderTypes;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempOrderTypes;       \n" +
            "END IF;      \n" +
            "IF tableName=\"reasonmst\" THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "END IF;      \n" +
            "IF tableName='component_sid_stock' THEN	      \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)      \n" +
            "			UNION ALL      \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		          \n" +
            "		    ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentsidstock;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempcomponentsidstock;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempcomponentsidstock;       \n" +
            "  \n" +
            "END IF;      \n" +
            "IF tableName='component_sid_stock_dataelement_values' THEN	      \n" +
            "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "END IF;      \n" +
            "IF tableName='chart_templatemst' THEN	      \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)      \n" +
            "		    ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempcharttemplatemst;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempcharttemplatemst;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempcharttemplatemst;       \n" +
            "  \n" +
            "END IF;      \n" +
            "IF tableName=\"shipping_request\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg       \n" +
            "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)      \n" +
            "            UNION ALL      \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg       \n" +
            "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempShippingRequest;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempShippingRequest;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempShippingRequest;       \n" +
            "END IF;      \n" +
            "IF tableName=\"chart_rawdata_category\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg       \n" +
            "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)      \n" +
            "            UNION ALL      \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg       \n" +
            "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempChartRawdataCategory;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempChartRawdataCategory;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempChartRawdataCategory;       \n" +
            "END IF;      \n" +
            "IF tableName=\"component_standard\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg       \n" +
            "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandard;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempcomponentStandard;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempcomponentStandard;       \n" +
            "END IF;      \n" +
            "IF tableName=\"component_standard_class\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg       \n" +
            "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');      \n" +
            "           /*  UNION ALL      \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg       \n" +
            "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',standardClassID,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt2 FROM @SQL2;      \n" +
            "			EXECUTE stmt2;      \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandardClass;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempcomponentStandardClass;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempcomponentStandardClass;       \n" +
            "END IF;      \n" +
            "IF tableName=\"rfq_lineitems\" THEN      \n" +
            "		SELECT 0 TotalCount, '' Message;      \n" +
            "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "		PREPARE stmt1 FROM @SQL1;      \n" +
            "		EXECUTE stmt1;                  \n" +
            "END IF;      \n" +
            "IF tableName=\"requirement\" THEN      \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg       \n" +
            "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM temprequirements)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM temprequirements;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM temprequirements;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE temprequirements;       \n" +
            "END IF;      \n" +
            "IF tableName=\"workorder_trans_packagingdetail\" THEN      \n" +
            "		SELECT 0 TotalCount, '' Message;      \n" +
            "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		      \n" +
            "		PREPARE stmt1 FROM @SQL1;      \n" +
            "		EXECUTE stmt1;                  \n" +
            "END IF;      \n" +
            "IF tableName=\"customer_addresses\" THEN      \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)      \n" +
            "			UNION ALL      \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg       \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM tempcustomer_addresses;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM tempcustomer_addresses;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE tempcustomer_addresses;       \n" +
            "END IF;      \n" +
            "IF tableName=\"rfqforms\" THEN      \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg       \n" +
            "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in       \n" +
            "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');      \n" +
            "  \n" +
            "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in       \n" +
            "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		      \n" +
            "  \n" +
            "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in       \n" +
            "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		      \n" +
            "  \n" +
            "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in       \n" +
            "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		      \n" +
            "  \n" +
            "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in       \n" +
            "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');      \n" +
            "  \n" +
            "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		      \n" +
            "  \n" +
            "            PREPARE stmt1 FROM @SQL1;      \n" +
            "			PREPARE stmt2 FROM @SQL2;      \n" +
            "            PREPARE stmt3 FROM @SQL3;      \n" +
            "			PREPARE stmt4 FROM @SQL4;      \n" +
            "            PREPARE stmt5 FROM @SQL5;      \n" +
            "			PREPARE stmt6 FROM @SQL6;      \n" +
            "  \n" +
            "			EXECUTE stmt1;      \n" +
            "			EXECUTE stmt2;      \n" +
            "            EXECUTE stmt3;      \n" +
            "			EXECUTE stmt4;      \n" +
            "            EXECUTE stmt5;      \n" +
            "			EXECUTE stmt6;      \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM temprfqformss;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM temprfqformss;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE temprfqformss;       \n" +
            "END IF;      \n" +
            "IF tableName=\"rfq_mountingtypemst\" THEN      \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as      \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message      \n" +
            "		    FROM       \n" +
            "		    (      \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg       \n" +
            "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1) ) q');      \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;      \n" +
            "	EXECUTE stmt;      \n" +
            "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN      \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "			SELECT * FROM temprfqpartcategory;      \n" +
            "		ELSE      \n" +
            "			SELECT * FROM temprfqpartcategory;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "		DROP TABLE temprfqpartcategory;       \n" +
            "  \n" +
            "END IF;      \n" +
            "IF tableName=\"who_bought_who\" THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "END IF;      \n" +
            "IF tableName=\"rfq_parttypemst\" THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "END IF;      \n" +
            "IF tableName=\"rfq_lineitems_errorcode\" THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "END IF;      \n" +
            "IF tableName=\"rfq_lineitems_keywords\" THEN      \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		      \n" +
            "			PREPARE stmt1 FROM @SQL1;      \n" +
            "			EXECUTE stmt1;      \n" +
            "  \n" +
            "END IF;      \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 19-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (16,'1.00','V1',' Update Delete SP from component customer alias table removed - Vaibhav'," + userid + ");"
            );
            break;
        case 16:
            allDbChangesArray.push(
            /* **************************** New Script -> 19-07-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetComponentCustAliasList`;  \n" +
            /* **************************** Add Script Version -> 19-07-2018 *********************************** */
              "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
               "VALUES (17,'1.00','V1',' Drop SP for ger compoenent alias list - vaibhav '," + userid + ");"
              );
            break;
        case 17:
            allDbChangesArray.push(
            /* **************************** New Script -> 19-07-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetGenericFoldersById` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetGenericFoldersById`(    \n" +
            "IN pRefParentId INT(1),    \n" +
            "IN pEntityId INT(1),    \n" +
            "IN pRefTransId INT(1),    \n" +
            "IN pGencFileOwnerType VARCHAR(255),    \n" +
            "IN pIsTraveler TINYINT(1)    \n" +
            ")  \n" +
            "BEGIN    \n" +
            "	DECLARE whereClauseFolder VARCHAR(1000);    \n" +
            "	DECLARE whereClauseFiles VARCHAR(1000);    \n" +
            "  \n" +
            "	SET pEntityId = IFNULL(pEntityId,0);    \n" +
            "	SET pRefParentId = IFNULL(pRefParentId,0);   \n" +
            "  \n" +
            "	SET whereClauseFolder = CONCAT(\" AND     \n" +
            "			(IFNULL(gf.entityID,0) = IFNULL(\",pEntityId,\",0)     \n" +
            "			AND gf.refTransID = \", pRefTransId,    \n" +
            "			\" AND gf.gencFileOwnerType = '\", pGencFileOwnerType ,\"')\");    \n" +
            "	SET whereClauseFiles = CONCAT(\" AND     \n" +
            "			(IFNULL(gfile.entityID,0) = IFNULL(\",pEntityId,\",0)     \n" +
            "			AND gfile.refTransID = \", pRefTransId,    \n" +
            "			\" AND gfile.gencFileOwnerType = '\", pGencFileOwnerType ,\"')\");	    \n" +
            "  \n" +
            "	-- if workorder operation then show operation data too    \n" +
            "	IF (pGencFileOwnerType = 'workorder_operation') THEN    \n" +
            "		SET whereClauseFolder = CONCAT(whereClauseFolder,\" OR    \n" +
            "				(IFNULL(gf.entityID,0) = -1     \n" +
            "				AND gf.refTransID IN (SELECT opID FROM workorder_operation WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)     \n" +
            "				AND gf.gencFileOwnerType = 'operations')     \n" +
            "				AND IFNULL(gf.refParentId,0) = \",pRefParentId,\"  \n" +
            "				AND gf.deletedAt IS NULL\");    \n" +
            "		SET whereClauseFiles = CONCAT(whereClauseFiles, \" OR    \n" +
            "				(IFNULL(gfile.entityID,0) = -1     \n" +
            "				AND gfile.refTransID IN (SELECT opID FROM workorder_operation WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)     \n" +
            "				AND gfile.gencFileOwnerType = 'operations')    \n" +
            "				AND IFNULL(gfile.refParentId,0) = \",pRefParentId,\"  \n" +
            "				AND gfile.deletedAt IS NULL\");	    \n" +
            "    END IF;    \n" +
            "	-- if traveler page than get data of operation, workorder, workorder operation    \n" +
            "    IF (pIsTraveler = 1) THEN    \n" +
            "		SET whereClauseFolder = CONCAT(whereClauseFolder,\" OR    \n" +
            "				(IFNULL(gf.entityID,0) = -7    \n" +
            "				AND gf.refTransID IN (SELECT woID FROM workorder_operation WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)     \n" +
            "				AND gf.gencFileOwnerType = 'workorder')    \n" +
            "				AND IFNULL(gf.refParentId,0) = \",pRefParentId,\"  \n" +
            "				AND gf.deletedAt IS NULL\");    \n" +
            "		SET whereClauseFiles = CONCAT(whereClauseFiles, \" OR    \n" +
            "				(IFNULL(gfile.entityID,0) = -7    \n" +
            "				AND gfile.refTransID IN (SELECT woID FROM workorder_operation WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)     \n" +
            "				AND gfile.gencFileOwnerType = 'workorder')    \n" +
            "				AND IFNULL(gfile.refParentId,0) = \",pRefParentId,\"  \n" +
            "				AND gfile.deletedAt IS NULL\");    \n" +
            "    END IF;    \n" +
            "SET @SQLStatement1 = CONCAT(\"(    \n" +
            "	SELECT      \n" +
            "		gf.gencFolderName,    \n" +
            "		gf.gencFolderID,    \n" +
            "		gf.entityID,    \n" +
            "		gf.refTransID,    \n" +
            "		gf.gencFileOwnerType,    \n" +
            "		gf.roleId,    \n" +
            "		(SELECT CONCAT(firstName, ' ' ,  UPPER (LEFT(lastName,1))) FROM users WHERE id = gf.createdBy) AS folderModifiedBy,    \n" +
            "		gf.createdAt AS folderCreatedAt,    \n" +
            "		gf.refParentId AS folderParentID,    \n" +
            "		'' fileParentID,    \n" +
            "		'' gencFileID,    \n" +
            "		'' gencFileName,    \n" +
            "		'' gencOriginalName,    \n" +
            "		'' gencFileDescription,    \n" +
            "		'' gencFileExtension,    \n" +
            "		'' gencFileType,    \n" +
            "		'' isDefault,    \n" +
            "		'' fileTransID,    \n" +
            "		'' fileEntityID,    \n" +
            "		'' fileOwnerType,    \n" +
            "		'' isShared,    \n" +
            "		'' fileGroupBy,    \n" +
            "		'' fileModifiedBy,    \n" +
            "		'' fileCreatedAt,    \n" +
            "		'' fileSize	    \n" +
            "	FROM generic_folder AS gf     \n" +
            "	WHERE IFNULL(gf.refParentId,0) = \",pRefParentId,\"  \n" +
            "		AND gf.deletedAt IS NULL\", whereClauseFolder,\")    \n" +
            "UNION    \n" +
            "(    \n" +
            "	SELECT    \n" +
            "	'' gencFolderName,    \n" +
            "	'' gencFolderID,    \n" +
            "	'' entityID,    \n" +
            "	'' refTransID,    \n" +
            "	'' gencFileOwnerType,    \n" +
            "	'' roleId,    \n" +
            "	'' AS folderModifiedBy,    \n" +
            "	'' AS folderCreatedAt,    \n" +
            "	''  AS folderParentID,    \n" +
            "	gfile.refParentId AS fileParentID,    \n" +
            "	gfile.gencFileID,    \n" +
            "	gfile.gencFileName,    \n" +
            "	gfile.gencOriginalName,    \n" +
            "	gfile.gencFileDescription,    \n" +
            "	gfile.gencFileExtension,    \n" +
            "	gfile.gencFileType,    \n" +
            "	gfile.isDefault,    \n" +
            "	gfile.refTransID AS fileTransID,    \n" +
            "	gfile.entityID AS fileEntityID,    \n" +
            "	gfile.gencFileOwnerType AS fileOwnerType,    \n" +
            "	gfile.isShared,    \n" +
            "	gfile.fileGroupBy,    \n" +
            "	(SELECT CONCAT(firstName , ' ',  UPPER (LEFT(lastName,1))) FROM users WHERE id = gfile.createdBy) AS fileModifiedBy,    \n" +
            "	gfile.createdAt AS fileCreatedAt,    \n" +
            "	gfile.fileSize    \n" +
            "	FROM genericfiles AS gfile     \n" +
            "	WHERE IFNULL(gfile.refParentId,0) = \",pRefParentId,\"  \n" +
            "	AND gfile.deletedAt IS NULL\", whereClauseFiles,\")\");    \n" +
            "  \n" +
            "	PREPARE query1 FROM @SQLStatement1;    \n" +
            "	EXECUTE query1;    \n" +
            "	DEALLOCATE PREPARE query1;    \n" +
            "  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 19-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (18,'1.00','V1','Updated generic folder SP for delete issue - Vaibhav'," + userid + ");"
            );
            break;
        case 18:
            allDbChangesArray.push(
                        /* **************************** New Script -> 20-07-2018  *********************************** */
                          "ALTER TABLE component_goodbadpartmapping CHANGE COLUMN `refBOM` `rfqAssyBomID` INT;  \n" +
                          /* **************************** Add Script Version -> 20-07-2018 *********************************** */
                           "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                            "VALUES (19,'1.00','V1','Change column name from refBOM to rfqAssyBomId in component_goodbadpartmapping - Champak '," + userid + ");"
            );
            break;
        case 19:
            allDbChangesArray.push(
                    /* **************************** New Script -> 20-07-2018  *********************************** */
                    "DROP FUNCTION IF EXISTS `fun_getQPAOfLineItems`;  \n" +
                    "CREATE FUNCTION `fun_getQPAOfLineItems`(  \n" +
                    "	pLineID int(11),  \n" +
                    "    pRFQAssyID int(11)  \n" +
                    ") RETURNS double  \n" +
                    "BEGIN  \n" +
                    "    DECLARE QTY int;  \n" +
                    "    DECLARE pLevel int;  \n" +
                    "    DECLARE pRefRfqLineID int;  \n" +
                    "    DECLARE pQPA int;  \n" +
                    "    DECLARE pLeadQty double;  \n" +
                    "    DECLARE pOverRangePre double;  \n" +
                    "    DECLARE totalQPA int;  \n" +
                    "  \n" +
                    "	set pRefRfqLineID = pLineID;  \n" +
                    "	WHILE(pRefRfqLineID IS NOT NULL) DO  \n" +
                    "    		SELECT qpa, level, refRFQLineItemID, leadQty, attritionRate INTO pQPA,pLevel,pRefRfqLineID, pLeadQty, pOverRangePre  \n" +
                    "			FROM rfq_lineitems    \n" +
                    "			WHERE rfqAssyID = pRFQAssyID AND lineID = pRefRfqLineID AND IFNULL(isDeleted,0) = 0;  \n" +
                    "  \n" +
                    "   		IF(pLevel > 1) THEN  \n" +
                    "				IF(totalQPA IS NULL) THEN  \n" +
                    "					SET totalQPA = CEILING((pQPA + IFNULL(pLeadQty,0) +(((pQPA + IFNULL(pLeadQty,0))*IFNULL(pOverRangePre,0))/100)));  \n" +
                    "                ELSE  \n" +
                    "  \n" +
                    "					SET totalQPA = totalQPA * CEILING((pQPA + IFNULL(pLeadQty,0) +(((pQPA + IFNULL(pLeadQty,0))*IFNULL(pOverRangePre,0))/100)));  \n" +
                    "  \n" +
                    "				END IF;  \n" +
                    "				set pRefRfqLineID  = pRefRfqLineID;  \n" +
                    "  \n" +
                    "		ELSE  \n" +
                    "  \n" +
                    "           	IF(totalQPA IS NULL) THEN  \n" +
                    "					SET QTY = CEILING((pQPA + IFNULL(pLeadQty,0) +(((pQPA + IFNULL(pLeadQty,0))* IFNULL(pOverRangePre,0))/100)));  \n" +
                    "		        ELSE  \n" +
                    "					SET QTY = totalQPA * CEILING((pQPA + IFNULL(pLeadQty,0) +(((pQPA + IFNULL(pLeadQty,0))* IFNULL(pOverRangePre,0))/100)));  \n" +
                    "			END IF;		  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "	END WHILE;  \n" +
                    "  RETURN QTY;  \n" +
                    "END;  \n" +
                        /* **************************** Add Script Version -> 20-07-2018 *********************************** */
                        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                        "VALUES (20,'1.00','V1',' Function for QPA count in consolidated - SHIRISH '," + userid + ");"
                            );
            break;
        case 20:
            allDbChangesArray.push(
            /* **************************** New Script -> 23-07-2018  *********************************** */
            "DROP VIEW IF EXISTS `vu_workorder_production_report_stk` ;  \n" +
            "CREATE VIEW `vu_workorder_production_report_stk` AS   \n" +
            "SELECT `a`.`woID` AS `wo ID Identity`,  \n" +
            "`w`.`woNumber` AS `wo Number`,  \n" +
            "`w`.`woVersion` AS `wo Version`,  \n" +
            "`assy`.`assemblyName` AS `assy Number`,  \n" +
            "`assy`.`assemblyNickName` AS `Assembly Nick Name`,  \n" +
            "`assyrev`.`revision` AS `Assy Revision`,  \n" +
            "`w`.`buildQty` AS `Build Qty`,  \n" +
            "`a`.`opID` AS `OP ID Identity`,  \n" +
            "`a`.`woOPID` AS `woOP ID Identity`,  \n" +
            "`a`.`opName` AS `OP Name`,  \n" +
            "`a`.`opNumber` AS `OP Number`,  \n" +
            "`fun_getOpStatusNameByID`(`a`.`opStatus`) AS `OP Status`,  \n" +
            "SEC_TO_TIME(`a`.`processTime`) AS `Process Time`,  \n" +
            "SEC_TO_TIME(`a`.`setupTime`) AS `Setup Time`,  \n" +
            "SEC_TO_TIME(`a`.`perPieceTime`) AS `Per Piece Time`,  \n" +
            "(CASE WHEN (`a`.`qtyControl` = 0) THEN 'No'   \n" +
            "WHEN (`a`.`qtyControl` = 1) THEN 'Yes' ELSE '' END) AS `MFg Qty Required?`,  \n" +
            "(CASE WHEN (`a`.`isIssueQty` = 0) THEN 'No'   \n" +
            "WHEN (`a`.`isIssueQty` = 1) THEN 'Yes' ELSE '' END) AS `ASK For Issue Qty?`,  \n" +
            "(CASE WHEN (`a`.`isRework` = 0) THEN 'No'   \n" +
            "WHEN (`a`.`isRework` = 1) THEN 'Yes' ELSE '' END) AS `is Rework Operation?`,  \n" +
            "(CASE WHEN (`a`.`isTeamOperation` = 0) THEN 'No'   \n" +
            "WHEN (`a`.`isTeamOperation` = 1) THEN 'Yes' ELSE '' END) AS `is Team Operation?`,  \n" +
            "(CASE WHEN (`a`.`isStopOperation` = 0) THEN 'No'   \n" +
            "WHEN (`a`.`isStopOperation` = 1) THEN 'Yes' ELSE '' END) AS `is Stop Operation?`,  \n" +
            "`a`.`opDescription` AS `OP Description`,`a`.`opDoes` AS `OP Does`,  \n" +
            "`a`.`opDonts` AS `OP Dont's`,  \n" +
            "`a`.`opWorkingCondition` AS `OP Working Condition`,  \n" +
            "`a`.`opManagementInstruction` AS `OP Management Instruction`,  \n" +
            "`a`.`opDeferredInstruction` AS `OP Deferred Instruction`,  \n" +
            "`a`.`opVersion` AS `OP Version`,  \n" +
            "`a`.`firstPcsModel` AS `First Pcs Model`,  \n" +
            "`a`.`firstPcsConclusion` AS `First Pcs Conclusion`,  \n" +
            "(CASE WHEN (`a`.`firstPcsStatus` = 1) THEN 'WIP'   \n" +
            "WHEN (`a`.`isStopOperation` = 2) THEN 'Pass'   \n" +
            "WHEN (`a`.`isStopOperation` = 3) THEN 'Needs Improvement'   \n" +
            "ELSE '' END) AS `First Pcs Status`,  \n" +
            "`c`.`clusterID` AS `Cluster ID Identity`,  \n" +
            "(SELECT `d`.`isParellelOperation` FROM `workorder_cluster` `d`   \n" +
            "WHERE (`d`.`clusterID` = `c`.`clusterID`)) AS `is Parellel Operation`,  \n" +
            "`b`.`RecCnt` AS `RecCnt`,  \n" +
            "IFNULL(`b`.`OPProdQty`,0) AS `OP Prod Qty`,  \n" +
            "IFNULL(`b`.`StockQty`,0) AS `OP Stock Qty`,  \n" +
            "IFNULL(`b`.`productionQty`,0) AS `OP Production Qty`,  \n" +
            "IFNULL(`b`.`passQty`,0) AS `OP Passed Qty`,  \n" +
            "IFNULL(`b`.`reprocessQty`,0) AS `OP Reprocessed Qty`,  \n" +
            "IFNULL(`b`.`observedQty`,0) AS `OP Defect Observed Qty`,  \n" +
            "IFNULL(`b`.`reworkQty`,0) AS `OP Rework  Required Qty`,  \n" +
            "IFNULL(`b`.`scrapQty`,0) AS `OP Scraped Qty`,  \n" +
            "IFNULL(`b`.`issueQty`,0) AS `Issue Qty`,  \n" +
            "(CASE WHEN (`a`.`isTerminated` = 1) THEN 'Yes' ELSE 'No' END) AS `isTerminated`,  \n" +
            "(SELECT IFNULL(SUM(`shippedassembly`.`shippedqty`),0)   \n" +
            "FROM `shippedassembly`   \n" +
            "WHERE ((`shippedassembly`.`woOPID` = `a`.`woOPID`)   \n" +
            "AND (`shippedassembly`.`isDeleted` = 0))) AS `Shipped Qty`,  \n" +
            "IFNULL((SELECT SUM(`workorder_transfer`.`transferQty`)   \n" +
            "FROM `workorder_transfer`   \n" +
            "WHERE ((`workorder_transfer`.`fromWOID` = `a`.`woID`)   \n" +
            "AND (`workorder_transfer`.`fromWOOPID` = `a`.`woOPID`))),0) AS `Transfer Qty`,  \n" +
            "IFNULL((SELECT DISTINCT `b`.`woNumber`   \n" +
            "FROM (`workorder_transfer` `a`   \n" +
            "JOIN `workorder` `b` ON((`b`.`woID` = `a`.`toWOID`)))   \n" +
            "WHERE ((`a`.`fromWOID` = `a`.`woID`) AND (`a`.`fromWOOPID` = `a`.`woOPID`))),'') AS `To Work Order`,  \n" +
            "IFNULL((SELECT `workorder_trans_operation_hold_unhold`.`reason`   \n" +
            "FROM `workorder_trans_operation_hold_unhold`   \n" +
            "WHERE ((`workorder_trans_operation_hold_unhold`.`woOPID` = `a`.`woOPID`)   \n" +
            "AND ISNULL(`workorder_trans_operation_hold_unhold`.`endDate`)) LIMIT 1),'') AS `reason`   \n" +
            "FROM (((((`workorder_operation` `a`   \n" +
            "LEFT JOIN `workorder` `w` ON((`a`.`woID` = `w`.`woID`)))   \n" +
            "JOIN `assemblymst` `assy` ON(((`w`.`assyID` = `assy`.`id`)   \n" +
            "AND (IFNULL(`assy`.`isDeleted`,0) = 0))))   \n" +
            "JOIN `assembly_revisionmst` `assyrev`   \n" +
            "ON(((`w`.`assyRevID` = `assyrev`.`id`) AND (IFNULL(`assyrev`.`isDeleted`,0) = 0))))   \n" +
            "LEFT JOIN `workorder_operation_cluster` `c`   \n" +
            "ON(((`c`.`woOPID` = `a`.`woOPID`) AND (IFNULL(`c`.`isDeleted`,0) = 0))))   \n" +
            "LEFT JOIN (  \n" +
            "SELECT `g`.`woID`,  \n" +
            "`g`.`opID`,  \n" +
            "SUM(`g`.`issueQty`) issueQty,  \n" +
            "SUM(`g`.`RecCnt`) RecCnt,  \n" +
            "SUM(`g`.`OPProdQty`) OPProdQty,  \n" +
            "SUM(`g`.`StockQty`) StockQty,  \n" +
            "SUM(`g`.`productionQty`) productionQty,  \n" +
            "SUM(`g`.`passQty`) passQty,  \n" +
            "SUM(`g`.`reprocessQty`) reprocessQty,  \n" +
            "SUM(`g`.`observedQty`) observedQty,  \n" +
            "SUM(`g`.`reworkQty`) reworkQty,  \n" +
            "SUM(`g`.`scrapQty`) scrapQty FROM  \n" +
            "(SELECT `a`.`woID` AS `woID`,`a`.`opID` AS `opID`,  \n" +
            "		MAX(IFNULL(`a`.`issueQty`,0)) AS `issueQty`,  \n" +
            "		`a`.`woOPID` AS `woOPID`,  \n" +
            "		COUNT(1) AS `RecCnt`,  \n" +
            "		SUM(IFNULL(`b`.`totalQty`,0)) AS `OPProdQty`,  \n" +
            "		(SUM(IFNULL(`b`.`totalQty`,0)) - SUM(IFNULL(`b`.`scrapQty`,0))) AS `StockQty`,  \n" +
            "		(SUM(IFNULL(`b`.`totalQty`,0)) + SUM(IFNULL(`b`.`reprocessQty`,0))) AS `productionQty`,  \n" +
            "		SUM(IFNULL(`b`.`passQty`,0)) AS `passQty`,  \n" +
            "		SUM(IFNULL(`b`.`reprocessQty`,0)) AS `reprocessQty`,  \n" +
            "		SUM(IFNULL(`b`.`observedQty`,0)) AS `observedQty`,  \n" +
            "		SUM(IFNULL(`b`.`reworkQty`,0)) AS `reworkQty`,  \n" +
            "		SUM(IFNULL(`b`.`scrapQty`,0)) AS `scrapQty`   \n" +
            "		FROM (`workorder_trans` `a`   \n" +
            "		JOIN `workorder_trans_production` `b`)   \n" +
            "		WHERE ((`a`.`woTransID` = `b`.`woTransID`) AND (IFNULL(`a`.`isDeleted`,0) = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0))   \n" +
            "		GROUP BY `a`.`woTransID`,`a`.`woID`,`a`.`opID`,`a`.`woOPID`) `g`  \n" +
            "	GROUP BY `g`.`woID`,`g`.`opID`,`g`.`woOPID`) `b`   \n" +
            "ON(((`a`.`woID` = `b`.`woID`)   \n" +
            "AND (`a`.`opID` = `b`.`opID`))))   \n" +
            "WHERE (IFNULL(`a`.`deletedAt`,0) = 0);  \n" +
            /* **************************** Add Script Version -> 23-07-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (21,'1.00','V1','vu_workorder_production_report_stk - VAIBHAV '," + userid + ");"
            );
            break;
        case 21:
            allDbChangesArray.push(
            /* **************************** New Script -> 23-07-2018  *********************************** */
            "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`,  \n" +
            "	`parentPageRoute`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`,   \n" +
            "	`isActive`, `createdAt`,  `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`,   \n" +
            "	`deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            "VALUES('Review Pricing','0','0',NULL,'app.bom.partcosting.reviewpricing','/reviewpricing/:id',NULL,  \n" +
            "	NULL,(SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Part Costing'),0,3,1,'icon-spotlight',  \n" +
            "	1,'2018-07-23 13:20:55','2018-07-23 13:20:55',NULL,1,NULL,  \n" +
            "	NULL,0,NULL);  \n" +
            /* **************************** Add Script Version -> 23-07-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (22,'1.00','V1','Add Review Pricing Menu - VAIBHAV '," + userid + ");"
            );
            break;
        case 22:
            allDbChangesArray.push(
            /* **************************** New Script -> 23-07-2018  *********************************** */
            "alter table RFQ_Lineitems_Alternatepart  \n" +
            "add column rfqAssyID INT NULL;  \n" +
            "ALTER TABLE rfq_assy_bom  \n" +
            "DROP COLUMN status;  \n" +
            "ALTER TABLE rfq_assy_bom  \n" +
            "DROP COLUMN isBOMVerified;  \n" +
            "ALTER TABLE rfq_assy_bom  \n" +
            "DROP COLUMN isReadyForPricing;  \n" +
            "ALTER TABLE rfq_assemblies  \n" +
            "ADD COLUMN status int(11);  \n" +
            "ALTER TABLE rfq_assemblies  \n" +
            "ADD COLUMN isBOMVerified tinyint(1) DEFAULT 0;  \n" +
            "ALTER TABLE rfq_assemblies  \n" +
            "ADD COLUMN isReadyForPricing tinyint(1) DEFAULT 0;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_CreateRFQAssyBomRelationship`;  \n" +
            "CREATE PROCEDURE `Sproc_CreateRFQAssyBomRelationship`(  \n" +
            "	IN pRFQAssyID INT,  \n" +
            "    IN pUserID INT,  \n" +
            "    IN pIsVerify TINYINT(1)  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "DECLARE subAssyType INT(11);  \n" +
            "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
            "BEGIN  \n" +
            "	ROLLBACK;  \n" +
            "	RESIGNAL;  \n" +
            "END;  \n" +
            "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
            "  BEGIN  \n" +
            "	ROLLBACK;  \n" +
            "	RESIGNAL;  \n" +
            "END;  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems;  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems_sub_assy;  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS tmp_sub_assy;	  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS tmp_delete_assy;  \n" +
            "  \n" +
            "    SET subAssyType = 3;  \n" +
            "  \n" +
            "	START TRANSACTION;  \n" +
            "  \n" +
            "	# -------------------------- [S] DELETE SUB ASSY ------------------------------------------  \n" +
            "	CREATE TEMPORARY TABLE tmp_delete_assy AS  \n" +
            "	SELECT rab.rfqAssyBomID FROM rfq_assy_bom_relationship rab WHERE rab.rfqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL  \n" +
            "    AND rab.parentLineItemsID NOT IN   \n" +
            "    (SELECT rl.id FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL GROUP BY rl.rfqAssyBomID);  \n" +
            "	UPDATE rfq_assy_bom rab  \n" +
            "	SET rab.isDeleted = 1, rab.deletedAt = utc_timestamp(), rab.deletedBy = pUserID          \n" +
            "	WHERE rab.id IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)  \n" +
            "    AND rab.reqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;   \n" +
            "  \n" +
            "	UPDATE rfq_assy_bom_relationship rab  \n" +
            "	SET rab.isDeleted = 1, rab.deletedAt = utc_timestamp(), rab.deletedBy = pUserID          \n" +
            "	WHERE rab.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)  \n" +
            "	AND rab.rfqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;  \n" +
            "    CREATE TEMPORARY TABLE tmp_rfq_lineitems AS   \n" +
            "    SELECT rl1.lineID FROM rfq_lineitems rl1 WHERE rl1.rfqAssyID = pRFQAssyID AND rl1.isDeleted = 0 AND rl1.deletedAt IS NULL;  \n" +
            "  \n" +
            "    UPDATE rfq_lineitems rl  \n" +
            "    SET rl.isDeleted = 1, rl.deletedAt = utc_timestamp(), rl.deletedBy = pUserID          \n" +
            "	WHERE rl.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)  \n" +
            "    AND rl.refRFQLineItemID NOT IN (SELECT lineID FROM tmp_rfq_lineitems)  \n" +
            "	AND rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;  \n" +
            "  \n" +
            "    UPDATE rfq_lineitems_alternatepart rla  \n" +
            "    SET rla.isDeleted = 1, rla.deletedAt = utc_timestamp(), rla.deletedBy = pUserID          \n" +
            "	WHERE rla.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)   \n" +
            "    AND rla.rfqLineItemsID NOT IN (SELECT rl.id FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL)  \n" +
            "    AND rla.isDeleted = 0 AND rla.deletedAt IS NULL;  \n" +
            "    # -------------------------- [E] DELETE SUB ASSY ------------------------------------------  \n" +
            "  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems;  \n" +
            "    # Get all Sub Assy RFQ Line Items with Part category  \n" +
            "    CREATE TEMPORARY TABLE tmp_rfq_lineitems AS      \n" +
            "	SELECT rl.id, rl.lineID, rl.rfqAssyID, rl.rfqAssyBomID, rl.refRFQLineItemID, rp.category,  \n" +
            "    (SELECT rlap.mfgPN FROM rfq_lineitems_alternatepart rlap WHERE rlap.rfqLineItemsID = rl.id AND rlap.isDeleted = 0 ANd rlap.deletedAt IS NULL LIMIT 1) mfgPN  \n" +
            "    FROM rfq_lineitems rl      \n" +
            "    LEFT JOIN rfq_parttypemst rp ON rl.partTypeID = rp.id AND rp.isDeleted = 0 AND rp.deletedAt IS NULL  \n" +
            "    WHERE rl.rfqAssyID = pRFQAssyID AND rp.category = subAssyType AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;      \n" +
            "  \n" +
            "    # -------------------------- [S] NEW SUB ASSY ------------------------------------------  \n" +
            "    # Get all sub assy which are not in relationship table  \n" +
            "    CREATE TEMPORARY TABLE tmp_sub_assy AS  \n" +
            "    SELECT a.*, rab.bomNumber  \n" +
            "    FROM tmp_rfq_lineitems a  \n" +
            "    LEFT JOIN rfq_assy_bom_relationship ra ON a.id = ra.parentLineitemsID AND ra.isDeleted = 0 AND ra.deletedAt IS NULL  \n" +
            "    LEFT JOIN rfq_assy_bom rab ON ra.rfqAssyBomID = rab.id AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;      \n" +
            "  \n" +
            "    # Insert sub assy into rfq_assy_bom table  \n" +
            "    INSERT INTO rfq_assy_bom  \n" +
            "    (`reqAssyID`, `isActive`, `description`, `isDeleted`, `createdBy`, `createdAt`, `bomNumber`)  \n" +
            "    SELECT rfqAssyID, 1 isActive, NULL description, 0 isDeleted, pUserID createdBy, utc_timestamp() createdAt, a.mfgPN  \n" +
            "    FROM tmp_sub_assy a WHERE a.bomNumber IS NULL;      \n" +
            "  \n" +
            "    # update rfqAssyBomID for all new added sub assy  \n" +
            "    UPDATE rfq_lineitems rl,  \n" +
            "		(   SELECT a.id, 			  \n" +
            "            (SELECT rab.id FROM rfq_assy_bom rab   \n" +
            "            WHERE rab.reqAssyID = a.rfqAssyID AND rab.bomNumber = a.mfgPN AND rab.isDeleted = 0 AND rab.deletedAt IS NULL) rfqAssyBomID  \n" +
            "			FROM tmp_sub_assy a  \n" +
            "		) tnsa  \n" +
            "	SET rl.rfqAssyBomID = IFNULL(tnsa.rfqAssyBomID, rl.rfqAssyBomID), updatedBy = pUserID, updatedAt = utc_timestamp()  \n" +
            "	WHERE rl.id = tnsa.id AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;  \n" +
            "     # insert new sub assy references into rfq_assy_bom_relationship  \n" +
            "     INSERT INTO rfq_assy_bom_relationship  \n" +
            "    (`rfqAssyBomID`, `parentRFQAssyBOMID`, `parentLineitemsID`,`rfqAssyID`, `isDeleted`, `createdBy`, `createdAt`)  \n" +
            "    SELECT rl.rfqAssyBomID,  \n" +
            "    (CASE WHEN rl.refRFQLineItemID IS NULL THEN   \n" +
            "    (SELECT a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.level = 1 AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)  \n" +
            "    ELSE   \n" +
            "    (SELECT a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.lineID = rl.refRFQLineItemID AND a.isDeleted = 0 AND a.deletedAt IS NULL)   \n" +
            "    END) parentRFQAssyBOMID,      \n" +
            "    rl.id parentLineitemsID,  \n" +
            "    pRFQAssyID rfqAssyID,  \n" +
            "    0 isDeleted, pUserID createdBy, utc_timestamp() createdAt  \n" +
            "    FROM rfq_lineitems rl WHERE rl.rfqAssyBomID IN  \n" +
            "    (SELECT ram.id rfqAssyBomID FROM rfq_assy_bom ram  \n" +
            "    WHERE ram.id NOT IN (SELECT rar.rfqAssyBomID FROM rfq_assy_bom_relationship rar WHERE rar.rfqAssyID = pRFQAssyID AND rar.isDeleted = 0 AND rar.deletedAt IS NULL)  \n" +
            "    AND ram.isDeleted = 0 AND ram.deletedAt IS NULL AND ram.reqAssyID = pRFQAssyID AND ram.bomNumber IS NOT NULL)  \n" +
            "    AND rl.isDeleted = 0 AND rl.deletedAt IS NULL   \n" +
            "    AND EXISTS (SELECT 1 FROM rfq_parttypemst rp WHERE rl.partTypeID = rp.id AND rp.category = subAssyType AND rp.isDeleted = 0 AND rp.deletedAt IS NULL);  \n" +
            "    # -------------------------- [E] NEW SUB ASSY ------------------------------------------  \n" +
            "  \n" +
            "  \n" +
            "    # -------------------------- [S] UPDATE SUB ASSY ------------------------------------------  \n" +
            "    UPDATE rfq_assy_bom ra,  \n" +
            "    (  \n" +
            "		SELECT a.mfgPN, rab.rfqAssyBomID rfqAssyBomID FROM tmp_sub_assy a   \n" +
            "        JOIN rfq_assy_bom_relationship rab ON a.id = rab.parentLineitemsID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL  \n" +
            "        WHERE a.bomNumber IS NOT NULL  \n" +
            "    ) tsa  \n" +
            "	SET ra.bomNumber = tsa.mfgPN, updatedBy = pUserID, updatedAt = utc_timestamp()  \n" +
            "    WHERE ra.id = tsa.rfqAssyBomID AND ra.bomNumber != tsa.mfgPN;      \n" +
            "    # -------------------------- [E] UPDATE SUB ASSY ------------------------------------------  \n" +
            "    # update rfqAssyBomID for all child line items of sub assy [ADD/UPDATE CASE]  \n" +
            "  \n" +
            "    UPDATE rfq_lineitems rl,  \n" +
            "    (		  \n" +
            "        (SELECT a.lineID, a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.isDeleted = 0 AND a.deletedAt IS NULL)  \n" +
            "        UNION  \n" +
            "        (SELECT 0 lineID, a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.level = 1 AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)  \n" +
            "    ) rl2  \n" +
            "    SET rl.rfqAssyBomID = rl2.rfqAssyBomID, updatedBy = pUserID, updatedAt = utc_timestamp()  \n" +
            "    WHERE rl.rfqAssyID = pRFQAssyID AND IFNULL(rl.refRFQLineItemID,0) = rl2.lineID     \n" +
            "    AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;  \n" +
            "  \n" +
            "      # update rfqAssyBomID for all child line items alternate part of sub assy [ADD/UPDATE CASE]  \n" +
            "    UPDATE rfq_lineitems_alternatepart rla,  \n" +
            "    (  \n" +
            "		SELECT a.id, a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.isDeleted = 0 AND a.deletedAt IS NULL  \n" +
            "    ) tra  \n" +
            "    SET rla.rfqAssyBomID = tra.rfqAssyBomID  \n" +
            "    WHERE rla.rfqLineItemsID = tra.id AND rla.isDeleted = 0 AND rla.deletedAt IS NULL;  \n" +
            "  \n" +
            "    COMMIT;  \n" +
            "    IF (pIsVerify = 1) THEN  \n" +
            "		SELECT GROUP_CONCAT(rl.lineID) INTO @rfqLineItemIds FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;  \n" +
            "		CALL Sproc_VerifyCustPN (@rfqLineItemIds, pRFQAssyID);  \n" +
            "    END IF;	  \n" +
            "END;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(    \n" +
            "	IN prfqAssyID INT    \n" +
            ")  \n" +
            "BEGIN    \n" +
            "	DROP temporary table if exists tempRfq_lineitems;    \n" +
            "    DROP temporary table if exists tempRfq_lineitemsAlt;    \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE tempRfq_lineitems AS        \n" +
            "	SELECT a.id, a.lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,     \n" +
            "    CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,    \n" +
            "    a.description, a.level, a.numOfPosition, a.customerRev, a.customerDescription,                \n" +
            "			CONCAT(part.partTypeName, ' | ', c.name) partclassID, a.isInstall, a.isPurchase, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID,     \n" +
            "            a.dnpQty, a.dnpDesig, a.qpaDesignatorStep    \n" +
            "            FROM rfq_lineitems a     \n" +
            "	LEFT JOIN uoms b ON a.uomID = b.id and IFNULL(b.isDeleted,0) = 0    \n" +
            "    LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id and IFNULL(part.isDeleted,0) = 0    \n" +
            "    LEFT JOIN rfq_mountingtypemst c ON part.partclassID = c.id and IFNULL(c.isDeleted,0) = 0        \n" +
            "    WHERE IFNULL(a.isDeleted,0) = 0 and a.rfqAssyID = prfqAssyID;    \n" +
            "  \n" +
            "	SELECT b.id, b.lineID, b.qpa, b.refDesig, a.mfgCode, a.mfgCodeID, a.mfgPN, a.mfgPNID,    \n" +
            "			a.distributor, a.distMfgCodeID, a.distPN, a.distMfgPNID,     \n" +
            "            b.custPN, b.custPNID, b.uomID, a.description descriptionAlternate, b.description, b.level, b.numOfPosition, b.customerRev, b.customerDescription,    \n" +
            "			b.partclassID, b.isInstall, b.isPurchase, b.leadQty, b.attritionRate, b.valueAddedCost, b.refRFQLineItemID,     \n" +
            "            b.dnpQty, b.dnpDesig, a.id as rfqAlternatePartID, b.qpaDesignatorStep,    \n" +
            "			a.mfgVerificationStep, a.mfgDistMappingStep, a.mfgCodeStep,    \n" +
            "			a.distVerificationStep, a.distCodeStep, a.getMFGPNStep, a.obsoletePartStep, a.goodPartMappingStep    \n" +
            "            FROM rfq_lineitems_alternatepart a    \n" +
            "			JOIN tempRfq_lineitems b on a.rfqLineItemsID = b.id    \n" +
            "			WHERE IFNULL(a.isDeleted,0) = 0  AND b.id is not null order by CAST(b.lineID AS SIGNED), a.id;    \n" +
            "END;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQList`(	  \n" +
            "	IN ppageIndex INT(11),  \n" +
            "	IN precordPerPage INT(11),  \n" +
            "	IN pOrderBy VARCHAR(255),	  \n" +
            "    IN pWhereClause VARCHAR(21844)      \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "  \n" +
            "	DECLARE pOffset INT(11);  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "	/* DECLARE SQLStatement varchar(255); */  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
            "    select rf.id,  \n" +
            "    (select asb.id from rfq_assy_bom asb where IFNULL(asb.isdeleted,0) = 0 and asb.reqAssyID = ra.id  group by rf.id) as assyBomID,  \n" +
            "	ra.assemblyName, ra.assemblyNumber,  \n" +
            "	job.name as JobType, ord.name as OrderType, cu.companyName as Customer, em.firstName as RFQ_SubmitedBy,  \n" +
            "	rf.quoteindate, rf.quoteduedate, ra.id rfqAssyID from rfqforms rf  \n" +
            "	inner join rfq_assemblies ra on ra.rfqrefID = rf.id and IFNULL(ra.isdeleted,0) = 0  \n" +
            "	inner join jobtype job on job.id = rf.jobtypeID and IFNULL(job.isdeleted,0) = 0  \n" +
            "	inner join ordertype ord on ord.id = rf.ordertypeID and IFNULL(ord.isdeleted,0) = 0  \n" +
            "	inner join employees em on em.id = rf.employeeID and IFNULL(em.isdeleted,0) = 0  \n" +
            "	inner join customers cu on cu.id = rf.customerId and IFNULL(cu.isdeleted,0) = 0  \n" +
            "	left join rfq_assy_bom ab on ab.reqAssyID = ra.id and IFNULL(ab.isdeleted,0) = 0  \n" +
            "	where IFNULL(rf.isdeleted,0) = 0 ;  \n" +
            "	IF (pOrderBy IS NOT NULL) THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;  \n" +
            "	END IF;	  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;	  \n" +
            "  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE	  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;	  \n" +
            "  \n" +
            "  \n" +
            "	/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
            "	PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE Results;  \n" +
            "  \n" +
            "  \n" +
            "    END;  \n" +
            "DROP PROCEDURE IF EXISTS Sproc_VerifyCustPN;  \n" +
            "CREATE PROCEDURE `Sproc_VerifyCustPN`(  \n" +
            "	IN prfqLineItemIds VARCHAR(5000),  -- comma seperated lineItemIDs  \n" +
            "	IN prfqAssyID VARCHAR(500)  \n" +
            ")  \n" +
            "BEGIN      \n" +
            "	DECLARE totalCount INT DEFAULT 0;  \n" +
            "	DECLARE currIndex INT DEFAULT 0;  \n" +
            "    DECLARE currLineItem VARCHAR(8);  \n" +
            "    DECLARE currCustRev VARCHAR(10);  \n" +
            "    DECLARE currCustPN VARCHAR(500);  \n" +
            "	-- This procedure will insert data into temporary table 'tmp_sproc_stringtotable'  \n" +
            "	call Sproc_StringToTable(prfqLineItemIds);  \n" +
            "    -- get data inserted by SP  \n" +
            "    select count(1) into totalCount FROM tmp_sproc_stringtotable;  \n" +
            "  \n" +
            "    WHILE currIndex < totalCount DO  \n" +
            "		SELECT a.item INTO currLineItem FROM tmp_sproc_stringtotable a LIMIT currIndex, 1;  \n" +
            "		SET currIndex = currIndex + 1;  \n" +
            "  \n" +
            "        SELECT rl.custPN, rl.customerRev INTO currCustPN, currCustRev FROM rfq_lineitems rl WHERE rl.id = currLineItem AND rl.custPN IS NOT NULL AND IFNULL(rl.isDeleted,0) = 0;  \n" +
            "  \n" +
            "        -- get customer id and rfq bom id from RFQ table and rfq bom table based on prfqAssyID   \n" +
            "		SELECT rf.customerId INTO  @customerId FROM rfq_assemblies ra   \n" +
            "        JOIN rfqforms rf ON ra.rfqrefID = rf.id AND rf.isDeleted = 0 AND rf.deletedAt IS NULL   \n" +
            "        WHERE ra.id = prfqAssyID  \n" +
            "        AND ra.isDeleted = 0 AND ra.deletedAt IS NULL LIMIT 1;  \n" +
            "  \n" +
            "        SELECT rl.rfqAssyBomID INTO @rfqAssyBomID FROM rfq_lineitems rl WHERE rl.id = currLineItem AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;  \n" +
            "		/*  \n" +
            "        SELECT DISTINCT rf.customerId,rab.id INTO @customerId,@rfqAssyBomID FROM rfq_lineitems rl 		  \n" +
            "        LEFT JOIN rfq_assemblies ra ON ra.id=rl.rfqAssyID AND IFNULL(ra.isDeleted,0) = 0  \n" +
            "		LEFT JOIN rfq_assy_bom rab ON rab.reqAssyID=ra.id AND IFNULL(rab.isDeleted,0) = 0  \n" +
            "		LEFT JOIN rfqforms rf ON rf.id=ra.rfqrefID AND IFNULL(rf.isDeleted,0) = 0  \n" +
            "		WHERE IFNULL(rl.isDeleted,0) = 0 AND rl.rfqAssyID = prfqAssyID;  \n" +
            "		*/  \n" +
            "  \n" +
            "		-- if found customer data in rfq table than check for rev. available in customer alias rev table for combination of (Customer PN#, Cust. Rev., CustomerID)  \n" +
            "		IF (@customerId IS NOT NULL) THEN  \n" +
            "  \n" +
            "        	DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (  \n" +
            "			SELECT c.id,c.custpn,c.flextronRevision FROM component_cust_alias_rev c  \n" +
            "			WHERE IFNULL(c.isDeleted,0) = 0 AND c.customerID =@customerId AND c.revision = currCustRev AND c.custpn = currCustPN order by c.id desc limit 1);  \n" +
            "  \n" +
            "		END IF;  \n" +
            "  \n" +
            "			-- start - get all data from component_cust_alias_rev_pn to check existing MFG PN with lineItem alternate pn  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev_pn;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev_pn AS (  \n" +
            "			SELECT crp.refComponentID   \n" +
            "			FROM component_cust_alias_rev_pn crp   \n" +
            "			LEFT JOIN component_cust_alias_rev cr ON cr.id=crp.refComponentCustAliasRevID AND IFNULL(cr.isDeleted,0) = 0   \n" +
            "			WHERE IFNULL(crp.isDeleted,0) = 0 AND crp.refComponentCustAliasRevID IN (SELECT id FROM temp_component_cust_alias_rev));  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_component;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_component AS(SELECT c.mfgPN FROM component c  \n" +
            "			WHERE IFNULL(c.isDeleted,0) = 0 AND c.id IN(SELECT refComponentID FROM temp_component_cust_alias_rev_pn));  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_rfq_lineitems_alternatepart;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_rfq_lineitems_alternatepart AS(SELECT r.mfgPN FROM rfq_lineitems_alternatepart r  \n" +
            "			WHERE IFNULL(r.isDeleted,0) = 0 AND r.rfqLineItemsID  = currLineItem);		  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_result;  \n" +
            "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_result AS(  \n" +
            "			/* this return new added mfgPN*/  \n" +
            "			 SELECT mfgPN  \n" +
            "			FROM (  \n" +
            "			SELECT mfgPN FROM temp_component  \n" +
            "			UNION ALL  \n" +
            "			SELECT mfgPN FROM temp_rfq_lineitems_alternatepart  \n" +
            "			) tbl  \n" +
            "			GROUP BY mfgPN  \n" +
            "			HAVING COUNT(*) = 1  \n" +
            "			ORDER BY mfgPN  \n" +
            "			);  \n" +
            "  \n" +
            "			-- end - get all data from component_cust_alias_rev_pn to check existing MFG PN with lineItem alternate pn  \n" +
            "  \n" +
            "			-- start - get new data for insert  \n" +
            "			IF (SELECT COUNT(1) FROM temp_result) >0 THEN  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_newPN;  \n" +
            "				SET @SQL1 = CONCAT('CREATE TEMPORARY TABLE if not exists temp_newPN as  \n" +
            "					SELECT GROUP_CONCAT(c.mfgPN SEPARATOR \",\") mfgPN  \n" +
            "					FROM   \n" +
            "					(  \n" +
            "					(SELECT a.mfgPN as mfgPN  \n" +
            "					FROM temp_rfq_lineitems_alternatepart a  \n" +
            "					WHERE NOT EXISTS (SELECT b.mfgPN FROM temp_component b  \n" +
            "							 WHERE a.mfgPN=b.mfgPN)  \n" +
            "					) as c)');  \n" +
            "				PREPARE stmt FROM @SQL1;  \n" +
            "				EXECUTE stmt;  \n" +
            "  \n" +
            "				IF (SELECT COUNT(mfgPN) FROM temp_newPN) >0 THEN  \n" +
            "  \n" +
            "					-- check if data available for same combination  \n" +
            "					IF (SELECT COUNT(*) FROM temp_component_cust_alias_rev) >0 THEN  \n" +
            "						-- Update flextron revision as match with exisiting data with new data  \n" +
            "						SELECT flextronRevision INTO @nextflextronRevision FROM temp_component_cust_alias_rev;  \n" +
            "                        SELECT CHAR(ASCII(@nextflextronRevision) + 1) INTO @nextflextronRevision;  \n" +
            "						-- Add all mfg part numbers in customer alias with new revision  \n" +
            "						INSERT INTO component_cust_alias_rev(customerID,custpn,revision,flextronRevision,rfqAssyBomID) VALUES(@customerId,currCustPN,currCustRev,@nextflextronRevision,@rfqAssyBomID);  \n" +
            "						SELECT LAST_INSERT_ID() INTO @maxRevId;  \n" +
            "						INSERT INTO component_cust_alias_rev_pn(refComponentCustAliasRevID,refComponentID) SELECT @maxRevId,sub.id FROM(SELECT id FROM component WHERE mfgPN IN(SELECT mfgPN FROM temp_rfq_lineitems_alternatepart)) sub;  \n" +
            "						-- Update flextron revision and custPNID in line item table  \n" +
            "						UPDATE rfq_lineitems  \n" +
            "						SET flextronRev=@nextflextronRevision,  \n" +
            "						custPNID = @maxRevId  \n" +
            "						WHERE custPN=currCustPN AND id = currLineItem;  \n" +
            "  \n" +
            "					ELSE  \n" +
            "  \n" +
            "						-- Add all mfg part numbers in customer alias with new revision  \n" +
            "						INSERT INTO component_cust_alias_rev(customerID,custpn,revision,flextronRevision,rfqAssyBomID) VALUES(@customerId,currCustPN,currCustRev,'A',@rfqAssyBomID);  \n" +
            "						SELECT LAST_INSERT_ID() INTO @maxRevId;  \n" +
            "						INSERT INTO component_cust_alias_rev_pn(refComponentCustAliasRevID,refComponentID) SELECT @maxRevId,sub.id FROM(SELECT id FROM component WHERE FIND_IN_SET(mfgPN,(SELECT mfgPN FROM temp_newPN)))sub;  \n" +
            "						UPDATE rfq_lineitems rfq SET rfq.custPNID = @maxRevId WHERE rfq.id = currLineItem;  \n" +
            "					END IF;  \n" +
            "  \n" +
            "					-- get customer partnumber if any changes  \n" +
            "				   IF (SELECT COUNT(*) FROM temp_component) >0 THEN  \n" +
            "						ALTER TABLE temp_newPN ADD COLUMN custPN VARCHAR(255);  \n" +
            "						UPDATE temp_newPN SET custPN=currCustPN;  \n" +
            "						SELECT * FROM temp_newPN;  \n" +
            "					END IF;  \n" +
            "  \n" +
            "				END IF;  \n" +
            "			-- ELSE  \n" +
            "			-- 	SELECT * FROM temp_result;  \n" +
            "			END IF;  \n" +
            "			-- end - get new data for insert  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev_pn;  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_component;  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_rfq_lineitems_alternatepart;  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_result;  \n" +
            "			DROP TEMPORARY TABLE IF EXISTS temp_newPN;  \n" +
            "  \n" +
            "	END WHILE;  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 23-07-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (23,'1.00','V1','BOM sub assy related changes - RAVI'," + userid + ");"
            );
            break;
        case 23:
            allDbChangesArray.push(
                /**************************** New Script -> 23-07-2018 *************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyComponent`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyComponent`(    \n" +
                "	IN BuyByID int(1),    \n" +
                "	IN BuyToID INT(1),  \n" +
                "    IN UserID int(1)  \n" +
                ")  \n" +
                "BEGIN    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
                "BEGIN    \n" +
                "	ROLLBACK;    \n" +
                "	RESIGNAL;    \n" +
                "END;    \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING    \n" +
                "  BEGIN    \n" +
                "	ROLLBACK;    \n" +
                "	RESIGNAL;    \n" +
                "END;    \n" +
                "    START TRANSACTION;    \n" +
                "  \n" +
                "		# Copy Data of `component`  \n" +
                "				set @rank = (select id from component order by id desc limit 1);  \n" +
                "				INSERT INTO `component`  \n" +
                "				(`PID`, `imageURL`, `mfgPN`, `mfgcodeID`, `mfgPNDescription`,  `minQty`,  `maxQty`,  `packageQty`, `partStatus`, `ltbDate`, `rohsComplient`,  \n" +
                "				`aliasgroupID`, `packaginggroupID`, `altenetgroupID`,  `isDeleted`, `deletedAt`, `deletedBy`, `createdBy`,  `createdAt`, `priceCategoryID`,  \n" +
                "				 `isGoodPart`,  `rohsgroupID`,  `leadTime`,  `isLeadFree`,  `packaging`,  `noOfPosition`, `countryOfOrigin`, `uom`, `mountingTypeID`,   \n" +
                "				 `stdLeadTimeFrom`, `stdLeadTimeTo`, `nonStdLeadTimeFrom`, `nonStdLeadTimeTo`,  `partPackage`,  `partMarking`, `minimum`, `mult`,  `uomText`,  \n" +
                "				 `htsCode`, `category`,  `rohsText`,  `dataSheetLink`, `replacementPartID`,  `eolDate`,  `partValues`,   `tolerance`,  `minOperatingTemp`,   \n" +
                "				 `maxOperatingTemp`,  `partTypeID`, `weight`,  `volume`,  `length`, `width`,  `height`, `saftyStock`, `driveToolgroupID`, `description`,  \n" +
                "				 `requiredMatingPartgroupID`, `lengthText`, `widthText`,   `heightText`,  `PIDCode`)  \n" +
                "				select  @rank:=@rank+1 AS `PID`,  \n" +
                "				com.`imageURL`, com.`mfgPN`,BuyByID `mfgcodeID`, com.`mfgPNDescription`,   \n" +
                "				com.`minQty`, com.`maxQty`, com.`packageQty`, com.`partStatus`,  com.`ltbDate`, com.`rohsComplient`, com.`aliasgroupID`,   \n" +
                "				com. `packaginggroupID`, com.`altenetgroupID`, com.`isDeleted`, com.`deletedAt`, com.`deletedBy`, UserID `createdBy`,UTC_TIMESTAMP() `createdAt`,  \n" +
                "				com.`priceCategoryID`, com.`isGoodPart`, com.`rohsgroupID`, com.`leadTime`, com.`isLeadFree`, com.`packaging`, com.`noOfPosition`,   \n" +
                "				com.`countryOfOrigin`, com.`uom`, com.`mountingTypeID`, com.`stdLeadTimeFrom`, com.`stdLeadTimeTo`, com.`nonStdLeadTimeFrom`,   \n" +
                "				com.`nonStdLeadTimeTo`, com.`partPackage`, com.`partMarking`, com.`minimum`, com.`mult`, com.`uomText`, com.`htsCode`, com.`category`,   \n" +
                "				com.`rohsText`, com.`dataSheetLink`, com.`replacementPartID`, com.`eolDate`, com.`partValues`, com.`tolerance`, com.`minOperatingTemp`,   \n" +
                "				com.`maxOperatingTemp`, com.`partTypeID`, com.`weight`, com.`volume`, com.`length`, com.`width`, com.`height`, com.`saftyStock`,  \n" +
                "				com.`driveToolgroupID`, com.`description`, com.`requiredMatingPartgroupID`, com.`lengthText`, com.`widthText`, com.`heightText`,  \n" +
                "				(select LEFT(concat((select mfgCode from mfgcodemst where id = BuyByID),'+',c.mfgPN),BuyToID)  \n" +
                "				 from component c join mfgcodemst m on m.id = c.mfgcodeID  where c.mfgcodeID = BuyToID and c.id = com.id and IFNULL(c.isDeleted,0) = 0) `PIDCode`  \n" +
                "				from component com   \n" +
                "				where com.mfgcodeID = BuyToID and IFNULL(com.isDeleted,0) = 0;  \n" +
                "				# Copy Data of `component_alias`  \n" +
                "				INSERT INTO `component_alias`  \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                "				select  \n" +
                "				ca.`aliasgroupID` ,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID) `componentID` , ca.`isDeleted`,   \n" +
                "				UTC_TIMESTAMP() `createdAt`,UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`  \n" +
                "				from component_alias ca join component c on c.id = ca.componentID  \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                "				# Copy Data of `component_alternatepn`  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                "				select  \n" +
                "				ca.`aliasgroupID` ,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID) `componentID` , ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,   \n" +
                "				UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`  \n" +
                "				from component_alternatepn ca join component c on c.id = ca.componentID  \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID and IFNULL(ca.isDeleted,0) = 0);  \n" +
                "				# Copy Data of `component_packagingalias`  \n" +
                "				INSERT INTO `component_packagingalias`  \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                "				select  \n" +
                "				ca.`aliasgroupID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID) `componentID`, ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,  \n" +
                "				UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`  \n" +
                "				from component_packagingalias ca join component c on c.id = ca.componentID  \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                "				# Copy Data of `component_rohsalternatepn`  \n" +
                "				INSERT INTO `component_rohsalternatepn`  \n" +
                "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`,  `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                "				select  \n" +
                "				ca.`aliasgroupID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID) `componentID`,ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`,ca.`deletedAt`,ca.`deletedBy`  \n" +
                "				from component_rohsalternatepn ca join component c on c.id = ca.componentID  \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                "				# Copy Data of `component_goodbadpartmapping`  \n" +
                "				INSERT INTO `component_goodbadpartmapping`  \n" +
                "				(`goodComponentID`, `badComponentID`, `customerID`, `reason`, `rfqAssyBomID`, `createdBy`, `createdAt`, `deletedBy`,  `deletedAt`, `isDeleted`)  \n" +
                "				select   \n" +
                "				 (IFNULL((select id from component where mfgPN = cG.mfgPN and mfgcodeID = BuyByID), ca.goodComponentID)) `goodComponentID`,   \n" +
                "				 (IFNULL((select id from component where mfgPN = cB.mfgPN and mfgcodeID = BuyByID), ca.badComponentID)) `badComponentID`,  \n" +
                "				 ca.`customerID`, ca.`reason`, ca.`rfqAssyBomID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`, ca.`deletedBy`, ca.`deletedAt`, ca.`isDeleted`  \n" +
                "				from component_goodbadpartmapping ca join component cB on cB.id = ca.badComponentID  \n" +
                "				join component cG on cG.id	= ca.goodComponentID  \n" +
                "				where ca.badComponentID in (select id from component where mfgcodeID = BuyToID) or ca.goodComponentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                "				# Copy Data of `component_standard_details`  \n" +
                "				INSERT INTO `component_standard_details`  \n" +
                "				(`standardClassID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                "				select  \n" +
                "				ca.`standardClassID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID) `componentID`, ca.`isDeleted`,  \n" +
                "				 UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`  \n" +
                "				from component_standard_details ca join component c on c.id = ca.componentID  \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                "				# Copy Data of `component_drivetools`  \n" +
                "				INSERT INTO `component_drivetools`  \n" +
                "				(`refComponentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`, `driveToolgroupID`)  \n" +
                "				select  \n" +
                "				(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID) `refComponentID`, ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`, ca.`driveToolgroupID`  \n" +
                "				from component_drivetools ca join component c on c.id = ca.refComponentID  \n" +
                "				where ca.refComponentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                "				# Copy Data of `component_requiremapping_parts`  \n" +
                "				INSERT INTO `component_requiremapping_parts`  \n" +
                "				(`requiredMatingPartgroupID`, `refComponentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                "				select  \n" +
                "				ca.`requiredMatingPartgroupID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `refComponentID`, ca.`isDeleted`,  \n" +
                "				UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`  \n" +
                "				from component_requiremapping_parts ca join component c on c.id = ca.refComponentID  \n" +
                "				where ca.refComponentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                "				# Copy data of `component_dataelement`  \n" +
                "				INSERT INTO `component_dataelement`  \n" +
                "				(`componentID`, `dataElementID`, `displayOrder`, `createdAt`, `deletedAt`, `createdBy`, `deletedBy`, `isDeleted`)  \n" +
                "				select  \n" +
                "				(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(ca.isDeleted,0) = 0) `componentID`, ca.`dataElementID`, ca.`displayOrder`,  \n" +
                "				UTC_TIMESTAMP() `createdAt`, ca.`deletedAt`,UserID `createdBy`, ca.`deletedBy`, ca.`isDeleted`  \n" +
                "				from component_dataelement ca join component c on c.id = ca.componentID  \n" +
                "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                "		select * from component where mfgcodeID = BuyByID;  \n" +
                "  COMMIT;    \n" +
                "    DROP TEMPORARY TABLE if exists Results;    \n" +
                "END;  \n" +
      /* **************************** Add Script Version -> 23-07-2018 *********************************** */
      "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                      "VALUES (24,'1.00','V1','copy component from who bought who - SHIRISH '," + userid + ");"
    );
            break;
        case 24:
            allDbChangesArray.push(
                       /* **************************** New Script -> 23-07-2018  *********************************** */
                       "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                       "CREATE PROCEDURE `Sproc_GetRFQLineItems`(      \n" +
                       "	IN ppageIndex INT(11),      \n" +
                       "	IN precordPerPage INT(11),      \n" +
                       "	IN pOrderBy VARCHAR(255),      \n" +
                       "    IN pWhereClause VARCHAR(21844),      \n" +
                       "    IN prfqAssyID INT      \n" +
                       ")  \n" +
                       "BEGIN      \n" +
                       "	DECLARE pOffset INT(11);      \n" +
                       "	DECLARE rowNumWhere VARCHAR(255) ;	      \n" +
                       "  \n" +
                       "  \n" +
                       "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                       "   	select group_concat(distinct(ra.mfgPN))as mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,      \n" +
                       "	rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,concat(pt.partTypeName,'|',pc.name) as name,      \n" +
                       "	rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig      \n" +
                       "	from rfq_lineitems_alternatepart ra      \n" +
                       "	left join rfq_lineitems rl on rl.id =ra.rfqLineItemsID  and rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0      \n" +
                       "	left join rfq_mountingtypemst pc on rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0      \n" +
                       "	left join rfq_parttypemst pt on rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0       \n" +
                       "	where rl.rfqAssyID = prfqAssyID AND IFNULL(ra.isDeleted,0) = 0      \n" +
                       "	group by ra.rfqLineItemsID order by CAST(rl.lineID AS SIGNED);      \n" +
                       "  \n" +
                       "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                       "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                       "	ELSE      \n" +
                       "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id ASC\") ;      \n" +
                       "	END IF;	      \n" +
                       "  \n" +
                       "  \n" +
                       "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                       "		SET pWhereClause = '1=1' ;      \n" +
                       "	END IF;	      \n" +
                       "  \n" +
                       "  \n" +
                       "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                       "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                       "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                       "	ELSE	      \n" +
                       "		SET rowNumWhere = '';      \n" +
                       "	END IF;	      \n" +
                       "  \n" +
                       "  \n" +
                       "	/* to get total count of rows */      \n" +
                       "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
                       "	PREPARE query1 FROM @SQLStatement1;      \n" +
                       "	EXECUTE query1;      \n" +
                       "	DEALLOCATE PREPARE query1;      \n" +
                       "  \n" +
                       "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                       "	PREPARE query2 FROM @SQLStatement2;      \n" +
                       "	EXECUTE query2;      \n" +
                       "	DEALLOCATE PREPARE query2;      \n" +
                       "  \n" +
                       "	DROP TEMPORARY TABLE Results;      \n" +
                       "    END;  \n" +
                         /* **************************** Add Script Version -> 23-07-2018 *********************************** */
                          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                           "VALUES (25,'1.00','V1',' get data in verify bom tab - shirish '," + userid + ");"
                             );
            break;
        case 25:
            allDbChangesArray.push(
                       /* **************************** New Script -> 23-07-2018  *********************************** */
                       "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                       "CREATE PROCEDURE `Sproc_GetRFQList`(	    \n" +
                       "	IN ppageIndex INT(11),    \n" +
                       "	IN precordPerPage INT(11),    \n" +
                       "	IN pOrderBy VARCHAR(255),	    \n" +
                       "    IN pWhereClause VARCHAR(21844)        \n" +
                       "    )  \n" +
                       "BEGIN    \n" +
                       "  \n" +
                       "	DECLARE pOffset INT(11);    \n" +
                       "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                       "	/* DECLARE SQLStatement varchar(255); */    \n" +
                       "  \n" +
                       "  \n" +
                       "  \n" +
                       "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                       "    select rf.id,    \n" +
                       "    (select asb.id from rfq_assy_bom asb where IFNULL(asb.isdeleted,0) = 0 and asb.reqAssyID = ra.id  group by rf.id) as assyBomID,    \n" +
                       "	ra.assemblyName, ra.assemblyNumber,    \n" +
                       "	job.name as JobType, ord.name as OrderType, cu.companyName as Customer, em.firstName as RFQ_SubmitedBy,    \n" +
                       "	rf.quoteindate, rf.quoteduedate, ra.id rfqAssyID from rfqforms rf    \n" +
                       "	inner join rfq_assemblies ra on ra.rfqrefID = rf.id and IFNULL(ra.isdeleted,0) = 0    \n" +
                       "	inner join jobtype job on job.id = rf.jobtypeID and IFNULL(job.isdeleted,0) = 0    \n" +
                       "	inner join ordertype ord on ord.id = rf.ordertypeID and IFNULL(ord.isdeleted,0) = 0    \n" +
                       "	inner join employees em on em.id = rf.employeeID and IFNULL(em.isdeleted,0) = 0    \n" +
                       "	inner join customers cu on cu.id = rf.customerId and IFNULL(cu.isdeleted,0) = 0    \n" +
                       "	join rfq_assy_bom ab on ab.reqAssyID = ra.id and IFNULL(ab.isdeleted,0) = 0 and ab.bomNumber is null    \n" +
                       "	where IFNULL(rf.isdeleted,0) = 0 ;    \n" +
                       "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                       "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                       "	ELSE    \n" +
                       "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;    \n" +
                       "	END IF;	    \n" +
                       "  \n" +
                       "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                       "  \n" +
                       "		SET pWhereClause = '1=1' ;    \n" +
                       "	END IF;	    \n" +
                       "  \n" +
                       "  \n" +
                       "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                       "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                       "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                       "	ELSE	    \n" +
                       "		SET rowNumWhere = '';    \n" +
                       "	END IF;	    \n" +
                       "  \n" +
                       "  \n" +
                       "	/* to get total count of rows */    \n" +
                       "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );        \n" +
                       "	PREPARE query1 FROM @SQLStatement1;    \n" +
                       "	EXECUTE query1;    \n" +
                       "	DEALLOCATE PREPARE query1;    \n" +
                       "  \n" +
                       "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                       "	PREPARE query2 FROM @SQLStatement2;    \n" +
                       "	EXECUTE query2;    \n" +
                       "	DEALLOCATE PREPARE query2;    \n" +
                       "  \n" +
                       "	DROP TEMPORARY TABLE Results;    \n" +
                       "  \n" +
                       "  \n" +
                       "    END;  \n" +
                         /* **************************** Add Script Version -> 23-07-2018 *********************************** */
                          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                           "VALUES (26,'1.00','V1','get data for rfq list- shirish '," + userid + ");"
                             );
            break;
        case 26:
            allDbChangesArray.push(
                        /* **************************** New Script -> 23-07-2018  *********************************** */
                            "ALTER TABLE component_goodbadpartmapping CHANGE `rfqAssyBomID` `rfqAssyID` INT NULL;  \n" +
                          /* **************************** Add Script Version -> 23-07-2018 *********************************** */
                           "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                            "VALUES (27,'1.00','V1',' Change bad-good mapping table column name - CHAMPAK '," + userid + ");"
                              );
            break;
        case 27:
            allDbChangesArray.push(
                       /* **************************** New Script -> 24-07-2018  *********************************** */
                       "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
                       "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(  \n" +
                       "	IN rfqAssyID int(1),  \n" +
                       "	IN userID INT(1)  \n" +
                       ")  \n" +
                       "BEGIN  \n" +
                       "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                       "BEGIN  \n" +
                       "	ROLLBACK;  \n" +
                       "	RESIGNAL;  \n" +
                       "END;  \n" +
                       "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                       "  BEGIN  \n" +
                       "	ROLLBACK;  \n" +
                       "	RESIGNAL;  \n" +
                       "END;  \n" +
                       " DROP TEMPORARY TABLE if exists Results;  \n" +
                       "  \n" +
                       "    START TRANSACTION;  \n" +
                       "  \n" +
                       "# Select Consolidated rfq_lineitems  \n" +
                       "  \n" +
                       "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                       "		select rfqLineItemsID as rfqLineItemsID,attritionRate,isInstall,   \n" +
                       "		isPurchase,partclassID,partTypeID,leadQty,isActive,isNoBidsPN,isDraft,  \n" +
                       "		lineID,numOfPosition,rfqAssyID,uomID,ab.rfqAssyBomID,  \n" +
                       "		sum(qpa2) qpa, cast((sum(adcost1)/sum(qpa2)) as decimal(10,5)) as valueAddedCost,  \n" +
                       "		mfg,count(*)as multiple,group_concat(rfqLineItemsID) as consolidatedLineItemIDs  \n" +
                       "		from   \n" +
                       "		(select *,(qpa1*valueAddedCost)as adcost1, qpa1 as qpa2, group_concat(distinct(part)) mfg  \n" +
                       "		from  \n" +
                       "		(select b.rfqLineItemsID, a.valueAddedCost, a.refRFQLineItemID,   \n" +
                       "		fun_getQPAOfLineItems(a.lineID,rfqAssyID)as qpa1, (fun_getQPAOfLineItems(a.lineID,rfqAssyID)* a.valueAddedCost)as addCost,   \n" +
                       "		concat(b.mfgCode,' | ', b.mfgPN ) as part,a.attritionRate,a.isInstall,   \n" +
                       "		a.isPurchase,a.partclassID,a.partTypeID,a.leadQty,a.isActive,a.isNoBidsPN,a.isDraft,  \n" +
                       "		a.lineID,a.numOfPosition,a.rfqAssyID,a.uomID,a.rfqAssyBomID  \n" +
                       "		from rfq_lineitems_alternatepart b   \n" +
                       "        join rfq_lineitems a on b.rfqLineItemsID = a.id AND a.rfqAssyID = rfqAssyID AND IFNULL(a.isDeleted,0) = 0  \n" +
                       "		join rfq_parttypemst pt on pt.id = a.partTypeID AND pt.category != 3  \n" +
                       "        where IFNULL(b.isDeleted,0) = 0  \n" +
                       "		group by b.rfqLineItemsID, b.mfgPN, concat(b.mfgCode,' | ', b.mfgPN)) aa  \n" +
                       "		group by aa.rfqLineItemsID) ab   \n" +
                       "		group by mfg;  \n" +
                       "  \n" +
                       "# Delete consolidated lineItem if consolidatedLineItemIDs  change  \n" +
                       "			update rfq_consolidated_mfgpn_lineitem cl  \n" +
                       "			set   \n" +
                       "			cl.isDeleted = true,  \n" +
                       "			cl.deletedAt = UTC_DATE(),  \n" +
                       "			cl.deletedBy = userID  \n" +
                       "			where cl.rfqAssyID = rfqAssyID and cl.id not in (  \n" +
                       "            select * from(       \n" +
                       "			select id from rfq_consolidated_mfgpn_lineitem rcl  \n" +
                       "			join Results R on R.rfqAssyID = rcl.rfqAssyID   \n" +
                       "			where rcl.rfqAssyID = rfqAssyID and rcl.id  is not NUll  and rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs  \n" +
                       "            and IFNULL(rcl.isDeleted,0) = 0)a);  \n" +
                       "  \n" +
                       "  \n" +
                       "# insert Consolidated lineItems   \n" +
                       "		INSERT INTO `rfq_consolidated_mfgpn_lineitem`  \n" +
                       "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,  \n" +
                       "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,  \n" +
                       "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`)  \n" +
                       "		select R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,rfqAssyID `rfqAssyID`,R.`partTypeID`,  \n" +
                       "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_DATE() `createdAt`,  \n" +
                       "		userID `createdBy`, R.`numOfPosition`,  \n" +
                       "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`   \n" +
                       "        from Results R  \n" +
                       "		 left join rfq_consolidated_mfgpn_lineitem cl on cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs and cl.rfqAssyID = R.rfqAssyID and IFNULL(cl.isDeleted,0) = 0  \n" +
                       "		 where cl.id is NUll;  \n" +
                       "  \n" +
                       "  \n" +
                       "  \n" +
                       "# insert Consolidated lineItems Quentity  \n" +
                       "		INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`  \n" +
                       "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)  \n" +
                       "		select rq.id `qtyID`, cl.id `consolidateID`,userID `createdBy`,UTC_DATE() `createdAt`  from rfq_consolidated_mfgpn_lineitem cl  \n" +
                       "		join rfq_assy_quantity rq on rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0  \n" +
                       "        left join rfq_consolidate_mfgpn_lineitem_quantity clq on clq.consolidateID = cl.id  \n" +
                       "		where cl.rfqAssyID = rfqAssyID and clq.id IS NULL;  \n" +
                       " \n" +
                       "# Update Consilidated LineItems Quantity  \n" +
                       "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (select * from Results) Rs, (select cl.id ,cl.qpa,cl.consolidatedLineItemIDs from rfq_consolidated_mfgpn_lineitem cl   \n" +
                       "		where cl.rfqAssyID = rfqAssyID and cl.id  is NoT NUll   \n" +
                       "            and IFNULL(cl.isDeleted,0) = 0) rcl   \n" +
                       "		set   \n" +
                       "		rq.updatedAt = UTC_TIMESTAMP(),  \n" +
                       "        rq.updatedBy = userID,  \n" +
                       "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN null WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)  \n" +
                       "		where  IFNULL(rq.isDeleted,0) = 0 and rcl.qpa != Rs.qpa and rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs and rq.consolidateID in(rcl.id);  \n" +
                       "  \n" +
                       "  \n" +
                       "  \n" +
                       "  \n" +
                       "# Update Consilidated LineItems  \n" +
                       "		UPDATE rfq_consolidated_mfgpn_lineitem cl, (select * from Results) R   \n" +
                       "		set   \n" +
                       "		cl.isInstall = R.isInstall ,  \n" +
                       "		cl.isPurchase = R.isPurchase,  \n" +
                       "		cl.numOfPosition = R.numOfPosition,  \n" +
                       "		cl.attritionRate = R.attritionRate,  \n" +
                       "		cl.leadQty = R.leadQty,  \n" +
                       "		cl.valueAddedCost = R.valueAddedCost,  \n" +
                       "        cl.updatedAt = UTC_DATE(),  \n" +
                       "        cl.rfqLineItemID = R.rfqLineItemsID,  \n" +
                       "        cl.qpa = R.qpa,  \n" +
                       "        cl.uomID = R.uomID,  \n" +
                       "        cl.lineID = R.lineID,  \n" +
                       "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,  \n" +
                       "        cl.updatedBy = userID  \n" +
                       "		where cl.rfqAssyID = rfqAssyID and cl.id  is NoT NUll and cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs  \n" +
                       "            and IFNULL(cl.isDeleted,0) = 0;  \n" +
                       "  \n" +
                       "  \n" +
                       "# delete from consolidated Alternatepart if lineItem removed  \n" +
                       "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap  \n" +
                       "		set   \n" +
                       "        cap.isDeleted = true,  \n" +
                       "        cap.deletedAt = UTC_DATE(),  \n" +
                       "		cap.deletedBy = userID  \n" +
                       "		where  cap.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null    \n" +
                       "        and IFNULL(cl.isDeleted,0) = 1);       \n" +
                       "  \n" +
                       "  \n" +
                       "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem  \n" +
                       "  \n" +
                       "  \n" +
                       "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate   \n" +
                       "		set   \n" +
                       "        isDeleted = true,  \n" +
                       "        deletedAt = UTC_DATE(),  \n" +
                       "		deletedBy = userID  \n" +
                       "        where id in(   \n" +
                       "        select capID from (  \n" +
                       "		select distinct(cap.id)as capID  \n" +
                       "		from rfq_lineitems_alternatepart ap   \n" +
                       "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID  \n" +
                       "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID  \n" +
                       "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID   \n" +
                       "		join rfq_parttypemst pt on pt.id = rl.partTypeID AND pt.category != 3  \n" +
                       "		where rl.rfqAssyID = rfqAssyID and cap.consolidateID IS not NULL and IFNULL(cl.isDeleted,0) = 0 and IFNULL(ap.isDeleted,0) = 1) as rcap);  \n" +
                       "  \n" +
                       "# delete Consolidated lineItems Quentity   \n" +
                       "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq  \n" +
                       "		set   \n" +
                       "        cq.isDeleted = true,  \n" +
                       "        cq.deletedAt = UTC_DATE(),  \n" +
                       "		cq.deletedBy = userID  \n" +
                       "		where  cq.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null    \n" +
                       "        and IFNULL(cl.isDeleted,0) = 1);       \n" +
                       "  \n" +
                       "# delete Consolidate lineItems   \n" +
                       "		UPDATE rfq_consolidated_mfgpn_lineitem cl  \n" +
                       "		set   \n" +
                       "        cl.isDeleted = true,  \n" +
                       "        cl.deletedAt = UTC_DATE(),  \n" +
                       "		cl.deletedBy = userID  \n" +
                       "		where  cl.rfqAssyID = rfqAssyID and cl.id is Not Null  and IFNULL(cl.isDeleted,0) = 0  \n" +
                       "		and cl.rfqLineItemID not in(select rfqLineItemsID from Results);          \n" +
                       "  \n" +
                       "# Insert Unique mfgPart to consolidated feom rfq lineitem alternate part   \n" +
                       "		INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`  \n" +
                       "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`createdBy`,`createdAt`)  \n" +
                       "		select distinct(ap.`mfgPN`),(select rcl.id from rfq_consolidated_mfgpn_lineitem rcl where rcl.rfqAssyID = rfqAssyID and rcl.lineID = rl.lineID and IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,  \n" +
                       "			ap.`mfgPNID`,ap.`mfgCodeID`,userID `createdBy`,UTC_DATE() `createdAt`  \n" +
                       "		from rfq_lineitems_alternatepart ap   \n" +
                       "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID  \n" +
                       "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID  \n" +
                       "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID   \n" +
                       "		join rfq_parttypemst pt on pt.id = rl.partTypeID AND pt.category != 3  \n" +
                       "		where rl.rfqAssyID = rfqAssyID and ap.isDeleted = 0 and cap.consolidateID IS NULL and IFNULL(cl.isDeleted,0) = 0;  \n" +
                       "  \n" +
                       "    COMMIT;  \n" +
                       "    DROP TEMPORARY TABLE if exists Results;  \n" +
                       "END;  \n" +
                         /* **************************** Add Script Version -> 24-07-2018 *********************************** */
                          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                           "VALUES (28,'1.00','V1',' create consolidated data - SHIRISH '," + userid + ");"
                             );
            break;
        case 28:
            allDbChangesArray.push(
                    /* **************************** New Script -> 24-07-2018  *********************************** */
                    "DROP PROCEDURE `Sproc_CopyComponent`;  \n" +
                    "CREATE PROCEDURE `Sproc_CopyComponent`(    \n" +
                    "	IN BuyByID int(1),    \n" +
                    "	IN BuyToID INT(1),  \n" +
                    "    IN UserID int(1)  \n" +
                    ")  \n" +
                    "BEGIN    \n" +
                    "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
                    "BEGIN    \n" +
                    "	ROLLBACK;    \n" +
                    "	RESIGNAL;    \n" +
                    "END;    \n" +
                    "DECLARE EXIT HANDLER FOR SQLWARNING    \n" +
                    "  BEGIN    \n" +
                    "	ROLLBACK;    \n" +
                    "	RESIGNAL;    \n" +
                    "END;    \n" +
                    "    START TRANSACTION;    \n" +
                    "  \n" +
                    "# Copy Data of `component`  \n" +
                    "				set @rank = (select id from component order by id desc limit 1);  \n" +
                    "				INSERT INTO `component`  \n" +
                    "				(`PID`, `imageURL`, `mfgPN`, `mfgcodeID`, `mfgPNDescription`,  `minQty`,  `maxQty`,  `packageQty`, `partStatus`, `ltbDate`, `rohsComplient`,  \n" +
                    "				`aliasgroupID`, `packaginggroupID`, `altenetgroupID`,  `isDeleted`, `deletedAt`, `deletedBy`, `createdBy`,  `createdAt`, `priceCategoryID`,  \n" +
                    "				 `isGoodPart`,  `rohsgroupID`,  `leadTime`,  `isLeadFree`,  `packaging`,  `noOfPosition`, `countryOfOrigin`, `uom`, `mountingTypeID`,   \n" +
                    "				 `stdLeadTimeFrom`, `stdLeadTimeTo`, `nonStdLeadTimeFrom`, `nonStdLeadTimeTo`,  `partPackage`,  `partMarking`, `minimum`, `mult`,  `uomText`,  \n" +
                    "				 `htsCode`, `category`,  `rohsText`,  `dataSheetLink`, `replacementPartID`,  `eolDate`,  `partValues`,   `tolerance`,  `minOperatingTemp`,   \n" +
                    "				 `maxOperatingTemp`,  `partTypeID`, `weight`,  `volume`,  `length`, `width`,  `height`, `saftyStock`, `driveToolgroupID`, `description`,  \n" +
                    "				 `requiredMatingPartgroupID`, `lengthText`, `widthText`,   `heightText`,  `PIDCode`)  \n" +
                    "				select  @rank:=@rank+1 AS `PID`,  \n" +
                    "				com.`imageURL`, com.`mfgPN`,BuyByID `mfgcodeID`, com.`mfgPNDescription`,   \n" +
                    "				com.`minQty`, com.`maxQty`, com.`packageQty`, com.`partStatus`,  com.`ltbDate`, com.`rohsComplient`, com.`aliasgroupID`,   \n" +
                    "				com. `packaginggroupID`, com.`altenetgroupID`, com.`isDeleted`, com.`deletedAt`, com.`deletedBy`, UserID `createdBy`,UTC_TIMESTAMP() `createdAt`,  \n" +
                    "				com.`priceCategoryID`, com.`isGoodPart`, com.`rohsgroupID`, com.`leadTime`, com.`isLeadFree`, com.`packaging`, com.`noOfPosition`,   \n" +
                    "				com.`countryOfOrigin`, com.`uom`, com.`mountingTypeID`, com.`stdLeadTimeFrom`, com.`stdLeadTimeTo`, com.`nonStdLeadTimeFrom`,   \n" +
                    "				com.`nonStdLeadTimeTo`, com.`partPackage`, com.`partMarking`, com.`minimum`, com.`mult`, com.`uomText`, com.`htsCode`, com.`category`,   \n" +
                    "				com.`rohsText`, com.`dataSheetLink`, com.`replacementPartID`, com.`eolDate`, com.`partValues`, com.`tolerance`, com.`minOperatingTemp`,   \n" +
                    "				com.`maxOperatingTemp`, com.`partTypeID`, com.`weight`, com.`volume`, com.`length`, com.`width`, com.`height`, com.`saftyStock`,  \n" +
                    "				com.`driveToolgroupID`, com.`description`, com.`requiredMatingPartgroupID`, com.`lengthText`, com.`widthText`, com.`heightText`,  \n" +
                    "				(select LEFT(concat((select mfgCode from mfgcodemst where id = BuyByID),'+',c.mfgPN),30) `PIDCode`  \n" +
                    "				 from component c join mfgcodemst m on m.id = c.mfgcodeID  where c.mfgcodeID = BuyToID and c.id = com.id and IFNULL(c.isDeleted,0) = 0) `PIDCode`  \n" +
                    "				from component com   \n" +
                    "				where com.mfgcodeID = BuyToID and IFNULL(com.isDeleted,0) = 0;  \n" +
                    "# Copy Data of `component_alias`  \n" +
                    "				INSERT INTO `component_alias`  \n" +
                    "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                    "				select  \n" +
                    "				ca.`aliasgroupID` ,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID` , ca.`isDeleted`,   \n" +
                    "				UTC_TIMESTAMP() `createdAt`,UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`  \n" +
                    "				from component_alias ca join component c on c.id = ca.componentID  \n" +
                    "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                    "# Copy Data of `component_alternatepn`  \n" +
                    "				INSERT INTO `component_alternatepn`  \n" +
                    "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                    "				select  \n" +
                    "				ca.`aliasgroupID` ,(select id,mfgPN from component where mfgcodeID = BuyByID and mfgPN = c.mfgPN and IFNULL(isDeleted,0) = 0) `componentID` , ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,   \n" +
                    "				UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`  \n" +
                    "				from component_alternatepn ca join component c on c.id = ca.componentID  \n" +
                    "				where ca.componentID in (select id from component where mfgcodeID = BuyToID and IFNULL(ca.isDeleted,0) = 0);  \n" +
                    "# Copy Data of `component_packagingalias`  \n" +
                    "				INSERT INTO `component_packagingalias`  \n" +
                    "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                    "				select  \n" +
                    "				ca.`aliasgroupID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID`, ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,  \n" +
                    "				UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`  \n" +
                    "				from component_packagingalias ca join component c on c.id = ca.componentID  \n" +
                    "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                    "# Copy Data of `component_rohsalternatepn`  \n" +
                    "				INSERT INTO `component_rohsalternatepn`  \n" +
                    "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`,  `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                    "				select  \n" +
                    "				ca.`aliasgroupID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID`,ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`,ca.`deletedAt`,ca.`deletedBy`  \n" +
                    "				from component_rohsalternatepn ca join component c on c.id = ca.componentID  \n" +
                    "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                    "# Copy Data of `component_goodbadpartmapping`  \n" +
                    "				INSERT INTO `component_goodbadpartmapping`  \n" +
                    "				(`goodComponentID`, `badComponentID`, `customerID`, `reason`, `rfqAssyID`, `createdBy`, `createdAt`, `deletedBy`,  `deletedAt`, `isDeleted`)  \n" +
                    "				select   \n" +
                    "				 (IFNULL((select id from component where mfgPN = cG.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0), ca.goodComponentID)) `goodComponentID`,   \n" +
                    "				 (IFNULL((select id from component where mfgPN = cB.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0), ca.badComponentID)) `badComponentID`,  \n" +
                    "				 ca.`customerID`, ca.`reason`, ca.`rfqAssyID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`, ca.`deletedBy`, ca.`deletedAt`, ca.`isDeleted`  \n" +
                    "				from component_goodbadpartmapping ca join component cB on cB.id = ca.badComponentID  \n" +
                    "				join component cG on cG.id	= ca.goodComponentID  \n" +
                    "				where ca.badComponentID in (select id from component where mfgcodeID = BuyToID) or ca.goodComponentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                    "# Copy Data of `component_standard_details`  \n" +
                    "				INSERT INTO `component_standard_details`  \n" +
                    "				(`standardClassID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                    "				select  \n" +
                    "				ca.`standardClassID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID`, ca.`isDeleted`,  \n" +
                    "				 UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`  \n" +
                    "				from component_standard_details ca join component c on c.id = ca.componentID  \n" +
                    "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                    "# Copy Data of `component_drivetools`  \n" +
                    "				INSERT INTO `component_drivetools`  \n" +
                    "				(`refComponentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`, `driveToolgroupID`)  \n" +
                    "				select  \n" +
                    "				(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `refComponentID`, ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`, ca.`driveToolgroupID`  \n" +
                    "				from component_drivetools ca join component c on c.id = ca.refComponentID  \n" +
                    "				where ca.refComponentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                    "# Copy Data of `component_requiremapping_parts`  \n" +
                    "				INSERT INTO `component_requiremapping_parts`  \n" +
                    "				(`requiredMatingPartgroupID`, `refComponentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)  \n" +
                    "				select  \n" +
                    "				ca.`requiredMatingPartgroupID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `refComponentID`, ca.`isDeleted`,  \n" +
                    "				UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`  \n" +
                    "				from component_requiremapping_parts ca join component c on c.id = ca.refComponentID  \n" +
                    "				where ca.refComponentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                    "# Copy data of `component_dataelement`  \n" +
                    "				INSERT INTO `component_dataelement`  \n" +
                    "				(`componentID`, `dataElementID`, `displayOrder`, `createdAt`, `deletedAt`, `createdBy`, `deletedBy`, `isDeleted`)  \n" +
                    "				select  \n" +
                    "				(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(ca.isDeleted,0) = 0) `componentID`, ca.`dataElementID`, ca.`displayOrder`,  \n" +
                    "				UTC_TIMESTAMP() `createdAt`, ca.`deletedAt`,UserID `createdBy`, ca.`deletedBy`, ca.`isDeleted`  \n" +
                    "				from component_dataelement ca join component c on c.id = ca.componentID  \n" +
                    "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;  \n" +
                    "  COMMIT;    \n" +
                    "select * from component where mfgcodeID = BuyByID;  \n" +
                    "    DROP TEMPORARY TABLE if exists Results;    \n" +
                    "END;  \n" +
                        /* **************************** Add Script Version -> 24-07-2018 *********************************** */
                        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                        "VALUES (29,'1.00','V1','copy component from who bought who - SHIRISH '," + userid + ");"
                            );
            break;
        case 29:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateRFQAssyBomRelationship`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRFQAssyBomRelationship`(  \n" +
                "	IN pRFQAssyID INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pIsVerify TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE subAssyType INT(11);  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems_sub_assy;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_sub_assy;	  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_delete_assy;  \n" +
                "  \n" +
                "    SET subAssyType = 3;  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "	# -------------------------- [S] DELETE SUB ASSY ------------------------------------------  \n" +
                "	CREATE TEMPORARY TABLE tmp_delete_assy AS  \n" +
                "	SELECT rab.rfqAssyBomID FROM rfq_assy_bom_relationship rab WHERE rab.rfqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL  \n" +
                "    AND rab.parentLineItemsID NOT IN   \n" +
                "    (SELECT rl.id FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL GROUP BY rl.rfqAssyBomID);  \n" +
                "	UPDATE rfq_assy_bom rab  \n" +
                "	SET rab.isDeleted = 1, rab.deletedAt = utc_timestamp(), rab.deletedBy = pUserID          \n" +
                "	WHERE rab.id IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)  \n" +
                "    AND rab.reqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;   \n" +
                "  \n" +
                "	UPDATE rfq_assy_bom_relationship rab  \n" +
                "	SET rab.isDeleted = 1, rab.deletedAt = utc_timestamp(), rab.deletedBy = pUserID          \n" +
                "	WHERE rab.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)  \n" +
                "	AND rab.rfqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;  \n" +
                "    CREATE TEMPORARY TABLE tmp_rfq_lineitems AS   \n" +
                "    SELECT rl1.lineID FROM rfq_lineitems rl1 WHERE rl1.rfqAssyID = pRFQAssyID AND rl1.isDeleted = 0 AND rl1.deletedAt IS NULL;  \n" +
                "  \n" +
                "    UPDATE rfq_lineitems rl  \n" +
                "    SET rl.isDeleted = 1, rl.deletedAt = utc_timestamp(), rl.deletedBy = pUserID          \n" +
                "	WHERE rl.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)  \n" +
                "    AND rl.refRFQLineItemID NOT IN (SELECT lineID FROM tmp_rfq_lineitems)  \n" +
                "	AND rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;  \n" +
                "  \n" +
                "    UPDATE rfq_lineitems_alternatepart rla  \n" +
                "    SET rla.isDeleted = 1, rla.deletedAt = utc_timestamp(), rla.deletedBy = pUserID          \n" +
                "	WHERE rla.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)   \n" +
                "    AND rla.rfqLineItemsID NOT IN (SELECT rl.id FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL)  \n" +
                "    AND rla.isDeleted = 0 AND rla.deletedAt IS NULL;  \n" +
                "    # -------------------------- [E] DELETE SUB ASSY ------------------------------------------  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems;  \n" +
                "    # Get all Sub Assy RFQ Line Items with Part category  \n" +
                "    CREATE TEMPORARY TABLE tmp_rfq_lineitems AS      \n" +
                "	SELECT rl.id, rl.lineID, rl.rfqAssyID, rl.rfqAssyBomID, rl.refRFQLineItemID, rp.category,  \n" +
                "    (SELECT rlap.mfgPN FROM rfq_lineitems_alternatepart rlap WHERE rlap.rfqLineItemsID = rl.id AND rlap.isDeleted = 0 ANd rlap.deletedAt IS NULL LIMIT 1) mfgPN  \n" +
                "    FROM rfq_lineitems rl      \n" +
                "    LEFT JOIN rfq_parttypemst rp ON rl.partTypeID = rp.id AND rp.isDeleted = 0 AND rp.deletedAt IS NULL  \n" +
                "    WHERE rl.rfqAssyID = pRFQAssyID AND rp.category = subAssyType AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;      \n" +
                "  \n" +
                "    # -------------------------- [S] NEW SUB ASSY ------------------------------------------  \n" +
                "    # Get all sub assy which are not in relationship table  \n" +
                "    CREATE TEMPORARY TABLE tmp_sub_assy AS  \n" +
                "    SELECT a.*, rab.bomNumber  \n" +
                "    FROM tmp_rfq_lineitems a  \n" +
                "    LEFT JOIN rfq_assy_bom_relationship ra ON a.id = ra.parentLineitemsID AND ra.isDeleted = 0 AND ra.deletedAt IS NULL  \n" +
                "    LEFT JOIN rfq_assy_bom rab ON ra.rfqAssyBomID = rab.id AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;      \n" +
                "  \n" +
                "    # Insert sub assy into rfq_assy_bom table  \n" +
                "    INSERT INTO rfq_assy_bom  \n" +
                "    (`reqAssyID`, `isActive`, `description`, `isDeleted`, `createdBy`, `createdAt`, `bomNumber`)  \n" +
                "    SELECT rfqAssyID, 1 isActive, NULL description, 0 isDeleted, pUserID createdBy, utc_timestamp() createdAt, a.mfgPN  \n" +
                "    FROM tmp_sub_assy a WHERE a.bomNumber IS NULL;      \n" +
                "  \n" +
                "    # update rfqAssyBomID for all new added sub assy  \n" +
                "    UPDATE rfq_lineitems rl,  \n" +
                "		(   SELECT a.id, 			  \n" +
                "            (SELECT rab.id FROM rfq_assy_bom rab   \n" +
                "            WHERE rab.reqAssyID = a.rfqAssyID AND rab.bomNumber = a.mfgPN AND rab.isDeleted = 0 AND rab.deletedAt IS NULL) rfqAssyBomID  \n" +
                "			FROM tmp_sub_assy a  \n" +
                "		) tnsa  \n" +
                "	SET rl.rfqAssyBomID = IFNULL(tnsa.rfqAssyBomID, rl.rfqAssyBomID), updatedBy = pUserID, updatedAt = utc_timestamp()  \n" +
                "	WHERE rl.id = tnsa.id AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;  \n" +
                "     # insert new sub assy references into rfq_assy_bom_relationship  \n" +
                "     INSERT INTO rfq_assy_bom_relationship  \n" +
                "    (`rfqAssyBomID`, `parentRFQAssyBOMID`, `parentLineitemsID`,`rfqAssyID`, `isDeleted`, `createdBy`, `createdAt`)  \n" +
                "    SELECT rl.rfqAssyBomID,  \n" +
                "    (CASE WHEN rl.refRFQLineItemID IS NULL THEN   \n" +
                "    (SELECT a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.level = 1 AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)  \n" +
                "    ELSE   \n" +
                "    (SELECT a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.lineID = rl.refRFQLineItemID AND a.isDeleted = 0 AND a.deletedAt IS NULL)   \n" +
                "    END) parentRFQAssyBOMID,      \n" +
                "    rl.id parentLineitemsID,  \n" +
                "    pRFQAssyID rfqAssyID,  \n" +
                "    0 isDeleted, pUserID createdBy, utc_timestamp() createdAt  \n" +
                "    FROM rfq_lineitems rl WHERE rl.rfqAssyBomID IN  \n" +
                "    (SELECT ram.id rfqAssyBomID FROM rfq_assy_bom ram  \n" +
                "    WHERE ram.id NOT IN (SELECT rar.rfqAssyBomID FROM rfq_assy_bom_relationship rar WHERE rar.rfqAssyID = pRFQAssyID AND rar.isDeleted = 0 AND rar.deletedAt IS NULL)  \n" +
                "    AND ram.isDeleted = 0 AND ram.deletedAt IS NULL AND ram.reqAssyID = pRFQAssyID AND ram.bomNumber IS NOT NULL)  \n" +
                "    AND rl.isDeleted = 0 AND rl.deletedAt IS NULL   \n" +
                "    AND EXISTS (SELECT 1 FROM rfq_parttypemst rp WHERE rl.partTypeID = rp.id AND rp.category = subAssyType AND rp.isDeleted = 0 AND rp.deletedAt IS NULL);  \n" +
                "    # -------------------------- [E] NEW SUB ASSY ------------------------------------------  \n" +
                "  \n" +
                "  \n" +
                "    # -------------------------- [S] UPDATE SUB ASSY ------------------------------------------  \n" +
                "    UPDATE rfq_assy_bom ra,  \n" +
                "    (  \n" +
                "		SELECT a.mfgPN, rab.rfqAssyBomID rfqAssyBomID FROM tmp_sub_assy a   \n" +
                "        JOIN rfq_assy_bom_relationship rab ON a.id = rab.parentLineitemsID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL  \n" +
                "        WHERE a.bomNumber IS NOT NULL  \n" +
                "    ) tsa  \n" +
                "	SET ra.bomNumber = tsa.mfgPN, updatedBy = pUserID, updatedAt = utc_timestamp()  \n" +
                "    WHERE ra.id = tsa.rfqAssyBomID AND ra.bomNumber != tsa.mfgPN;      \n" +
                "    # -------------------------- [E] UPDATE SUB ASSY ------------------------------------------  \n" +
                "    # update rfqAssyBomID for all child line items of sub assy [ADD/UPDATE CASE]  \n" +
                "  \n" +
                "    UPDATE rfq_lineitems rl,  \n" +
                "    (		  \n" +
                "        (SELECT a.lineID, a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.isDeleted = 0 AND a.deletedAt IS NULL)  \n" +
                "        UNION  \n" +
                "        (SELECT 0 lineID, a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.level = 1 AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)  \n" +
                "    ) rl2  \n" +
                "    SET rl.rfqAssyBomID = rl2.rfqAssyBomID, updatedBy = pUserID, updatedAt = utc_timestamp()  \n" +
                "    WHERE rl.rfqAssyID = pRFQAssyID AND IFNULL(rl.refRFQLineItemID,0) = rl2.lineID     \n" +
                "    AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;  \n" +
                "  \n" +
                "      # update rfqAssyBomID for all child line items alternate part of sub assy [ADD/UPDATE CASE]  \n" +
                "    UPDATE rfq_lineitems_alternatepart rla,  \n" +
                "    (  \n" +
                "		SELECT a.id, a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.isDeleted = 0 AND a.deletedAt IS NULL  \n" +
                "    ) tra  \n" +
                "    SET rla.rfqAssyBomID = tra.rfqAssyBomID  \n" +
                "    WHERE rla.rfqLineItemsID = tra.id AND rla.isDeleted = 0 AND rla.deletedAt IS NULL;  \n" +
                "  \n" +
                "    COMMIT;  \n" +
                "    IF (pIsVerify = 1) THEN  \n" +
                "		SELECT GROUP_CONCAT(rl.id) INTO @rfqLineItemIds FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;  \n" +
                "		CALL Sproc_VerifyCustPN (@rfqLineItemIds, pRFQAssyID);  \n" +
                "    END IF;	  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (30,'1.00','V1','Update Sproc_CreateRFQAssyBomRelationship - RAVI '," + userid + ");"
                    );
            break;
        case 30:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-07-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateRFQAssyBomRelationship`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRFQAssyBomRelationship`(  \n" +
                "	IN pRFQAssyID INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pIsVerify TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE subAssyType INT(11);  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems_sub_assy;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_sub_assy;	  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_delete_assy;  \n" +
                "  \n" +
                "    SET subAssyType = 3;  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "	# -------------------------- [S] DELETE SUB ASSY ------------------------------------------  \n" +
                "	CREATE TEMPORARY TABLE tmp_delete_assy AS  \n" +
                "	SELECT rab.rfqAssyBomID FROM rfq_assy_bom_relationship rab WHERE rab.rfqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL  \n" +
                "    AND rab.parentLineItemsID NOT IN   \n" +
                "    (SELECT rl.id FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL GROUP BY rl.rfqAssyBomID);  \n" +
                "	UPDATE rfq_assy_bom rab  \n" +
                "	SET rab.isDeleted = 1, rab.deletedAt = utc_timestamp(), rab.deletedBy = pUserID          \n" +
                "	WHERE rab.id IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)  \n" +
                "    AND rab.reqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;   \n" +
                "  \n" +
                "	UPDATE rfq_assy_bom_relationship rab  \n" +
                "	SET rab.isDeleted = 1, rab.deletedAt = utc_timestamp(), rab.deletedBy = pUserID          \n" +
                "	WHERE rab.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)  \n" +
                "	AND rab.rfqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;  \n" +
                "    CREATE TEMPORARY TABLE tmp_rfq_lineitems AS   \n" +
                "    SELECT rl1.lineID FROM rfq_lineitems rl1 WHERE rl1.rfqAssyID = pRFQAssyID AND rl1.isDeleted = 0 AND rl1.deletedAt IS NULL;  \n" +
                "  \n" +
                "    UPDATE rfq_lineitems rl  \n" +
                "    SET rl.isDeleted = 1, rl.deletedAt = utc_timestamp(), rl.deletedBy = pUserID          \n" +
                "	WHERE rl.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)  \n" +
                "    AND rl.refRFQLineItemID NOT IN (SELECT lineID FROM tmp_rfq_lineitems)  \n" +
                "	AND rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;  \n" +
                "  \n" +
                "    UPDATE rfq_lineitems_alternatepart rla  \n" +
                "    SET rla.isDeleted = 1, rla.deletedAt = utc_timestamp(), rla.deletedBy = pUserID          \n" +
                "	WHERE rla.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)   \n" +
                "    AND rla.rfqLineItemsID NOT IN (SELECT rl.id FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL)  \n" +
                "    AND rla.isDeleted = 0 AND rla.deletedAt IS NULL;  \n" +
                "    # -------------------------- [E] DELETE SUB ASSY ------------------------------------------  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems;  \n" +
                "    # Get all Sub Assy RFQ Line Items with Part category  \n" +
                "    CREATE TEMPORARY TABLE tmp_rfq_lineitems AS      \n" +
                "	SELECT rl.id, rl.lineID, rl.rfqAssyID, rl.rfqAssyBomID, rl.refRFQLineItemID, rp.category,  \n" +
                "    (SELECT rlap.mfgPN FROM rfq_lineitems_alternatepart rlap WHERE rlap.rfqLineItemsID = rl.id AND rlap.isDeleted = 0 ANd rlap.deletedAt IS NULL LIMIT 1) mfgPN  \n" +
                "    FROM rfq_lineitems rl      \n" +
                "    LEFT JOIN rfq_parttypemst rp ON rl.partTypeID = rp.id AND rp.isDeleted = 0 AND rp.deletedAt IS NULL  \n" +
                "    WHERE rl.rfqAssyID = pRFQAssyID AND rp.category = subAssyType AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;      \n" +
                "  \n" +
                "    # -------------------------- [S] NEW SUB ASSY ------------------------------------------  \n" +
                "    # Get all sub assy which are not in relationship table  \n" +
                "    CREATE TEMPORARY TABLE tmp_sub_assy AS  \n" +
                "    SELECT a.*, rab.bomNumber  \n" +
                "    FROM tmp_rfq_lineitems a  \n" +
                "    LEFT JOIN rfq_assy_bom_relationship ra ON a.id = ra.parentLineitemsID AND ra.isDeleted = 0 AND ra.deletedAt IS NULL  \n" +
                "    LEFT JOIN rfq_assy_bom rab ON ra.rfqAssyBomID = rab.id AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;      \n" +
                "  \n" +
                "    # Insert sub assy into rfq_assy_bom table  \n" +
                "    INSERT INTO rfq_assy_bom  \n" +
                "    (`reqAssyID`, `isActive`, `description`, `isDeleted`, `createdBy`, `createdAt`, `bomNumber`)  \n" +
                "    SELECT rfqAssyID, 1 isActive, NULL description, 0 isDeleted, pUserID createdBy, utc_timestamp() createdAt, a.mfgPN  \n" +
                "    FROM tmp_sub_assy a WHERE a.bomNumber IS NULL;      \n" +
                "  \n" +
                "    # update rfqAssyBomID for all new added sub assy  \n" +
                "    UPDATE rfq_lineitems rl,  \n" +
                "		(   SELECT a.id, 			  \n" +
                "            (SELECT rab.id FROM rfq_assy_bom rab   \n" +
                "            WHERE rab.reqAssyID = a.rfqAssyID AND rab.bomNumber = a.mfgPN AND rab.isDeleted = 0 AND rab.deletedAt IS NULL) rfqAssyBomID  \n" +
                "			FROM tmp_sub_assy a  \n" +
                "		) tnsa  \n" +
                "	SET rl.rfqAssyBomID = IFNULL(tnsa.rfqAssyBomID, rl.rfqAssyBomID), updatedBy = pUserID, updatedAt = utc_timestamp()  \n" +
                "	WHERE rl.id = tnsa.id AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;  \n" +
                "     # insert new sub assy references into rfq_assy_bom_relationship  \n" +
                "     INSERT INTO rfq_assy_bom_relationship  \n" +
                "    (`rfqAssyBomID`, `parentRFQAssyBOMID`, `parentLineitemsID`,`rfqAssyID`, `isDeleted`, `createdBy`, `createdAt`)  \n" +
                "    SELECT rl.rfqAssyBomID,  \n" +
                "    (CASE WHEN rl.refRFQLineItemID IS NULL THEN   \n" +
                "    (SELECT a.id FROM rfq_assy_bom a WHERE a.reqAssyID = pRFQAssyID AND a.bomNumber IS NULL AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)  \n" +
                "    ELSE   \n" +
                "    (SELECT a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.lineID = rl.refRFQLineItemID AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)   \n" +
                "    END) parentRFQAssyBOMID,      \n" +
                "    rl.id parentLineitemsID,  \n" +
                "    pRFQAssyID rfqAssyID,  \n" +
                "    0 isDeleted, pUserID createdBy, utc_timestamp() createdAt  \n" +
                "    FROM rfq_lineitems rl WHERE rl.rfqAssyBomID IN  \n" +
                "    (SELECT ram.id rfqAssyBomID FROM rfq_assy_bom ram  \n" +
                "    WHERE ram.id NOT IN (SELECT rar.rfqAssyBomID FROM rfq_assy_bom_relationship rar WHERE rar.rfqAssyID = pRFQAssyID AND rar.isDeleted = 0 AND rar.deletedAt IS NULL)  \n" +
                "    AND ram.isDeleted = 0 AND ram.deletedAt IS NULL AND ram.reqAssyID = pRFQAssyID AND ram.bomNumber IS NOT NULL)  \n" +
                "    AND rl.isDeleted = 0 AND rl.deletedAt IS NULL   \n" +
                "    AND EXISTS (SELECT 1 FROM rfq_parttypemst rp WHERE rl.partTypeID = rp.id AND rp.category = subAssyType AND rp.isDeleted = 0 AND rp.deletedAt IS NULL);  \n" +
                "    # -------------------------- [E] NEW SUB ASSY ------------------------------------------  \n" +
                "  \n" +
                "  \n" +
                "    # -------------------------- [S] UPDATE SUB ASSY ------------------------------------------  \n" +
                "    UPDATE rfq_assy_bom ra,  \n" +
                "    (  \n" +
                "		SELECT a.mfgPN, rab.rfqAssyBomID rfqAssyBomID FROM tmp_sub_assy a   \n" +
                "        JOIN rfq_assy_bom_relationship rab ON a.id = rab.parentLineitemsID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL  \n" +
                "        WHERE a.bomNumber IS NOT NULL  \n" +
                "    ) tsa  \n" +
                "	SET ra.bomNumber = tsa.mfgPN, updatedBy = pUserID, updatedAt = utc_timestamp()  \n" +
                "    WHERE ra.id = tsa.rfqAssyBomID AND ra.bomNumber != tsa.mfgPN;      \n" +
                "    # -------------------------- [E] UPDATE SUB ASSY ------------------------------------------  \n" +
                "    # update rfqAssyBomID for all child line items of sub assy [ADD/UPDATE CASE]  \n" +
                "  \n" +
                "    UPDATE rfq_lineitems rl,  \n" +
                "    (		  \n" +
                "        (SELECT a.lineID, a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.isDeleted = 0 AND a.deletedAt IS NULL)  \n" +
                "        UNION  \n" +
                "        (SELECT 0 lineID, a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.level = 1 AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)  \n" +
                "    ) rl2  \n" +
                "    SET rl.rfqAssyBomID = rl2.rfqAssyBomID, updatedBy = pUserID, updatedAt = utc_timestamp()  \n" +
                "    WHERE rl.rfqAssyID = pRFQAssyID AND IFNULL(rl.refRFQLineItemID,0) = rl2.lineID     \n" +
                "    AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;  \n" +
                "  \n" +
                "      # update rfqAssyBomID for all child line items alternate part of sub assy [ADD/UPDATE CASE]  \n" +
                "    UPDATE rfq_lineitems_alternatepart rla,  \n" +
                "    (  \n" +
                "		SELECT a.id, a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.isDeleted = 0 AND a.deletedAt IS NULL  \n" +
                "    ) tra  \n" +
                "    SET rla.rfqAssyBomID = tra.rfqAssyBomID  \n" +
                "    WHERE rla.rfqLineItemsID = tra.id AND rla.isDeleted = 0 AND rla.deletedAt IS NULL;  \n" +
                "  \n" +
                "    COMMIT;  \n" +
                "    IF (pIsVerify = 1) THEN  \n" +
                "		SELECT GROUP_CONCAT(rl.id) INTO @rfqLineItemIds FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;  \n" +
                "		CALL Sproc_VerifyCustPN (@rfqLineItemIds, pRFQAssyID);  \n" +
                "    END IF;	  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (31,'1.00','V1','Update Sproc_CreateRFQAssyBomRelationship - RAVI '," + userid + ");"
                    );
            break;
        case 31:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-07-2018  *********************************** */
               "DROP PROCEDURE IF EXISTS `Sproc_CreateRFQAssyBomRelationship`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRFQAssyBomRelationship`(    \n" +
                "	IN pRFQAssyID INT,    \n" +
                "    IN pUserID INT,    \n" +
                "    IN pIsVerify TINYINT(1)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "DECLARE subAssyType INT(11);    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
                "BEGIN    \n" +
                "	ROLLBACK;    \n" +
                "	RESIGNAL;    \n" +
                "END;    \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING    \n" +
                "  BEGIN    \n" +
                "	ROLLBACK;    \n" +
                "	RESIGNAL;    \n" +
                "END;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems;    \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems_sub_assy;    \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_sub_assy;	    \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_delete_assy;    \n" +
                "  \n" +
                "    SET subAssyType = 3;    \n" +
                "  \n" +
                "	START TRANSACTION;    \n" +
                "  \n" +
                "	# -------------------------- [S] DELETE SUB ASSY ------------------------------------------    \n" +
                "	CREATE TEMPORARY TABLE tmp_delete_assy AS    \n" +
                "	SELECT rab.rfqAssyBomID FROM rfq_assy_bom_relationship rab WHERE rab.rfqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL    \n" +
                "    AND rab.parentLineItemsID NOT IN     \n" +
                "    (SELECT rl.id FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL GROUP BY rl.rfqAssyBomID);    \n" +
                "	UPDATE rfq_assy_bom rab    \n" +
                "	SET rab.isDeleted = 1, rab.deletedAt = utc_timestamp(), rab.deletedBy = pUserID            \n" +
                "	WHERE rab.id IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)    \n" +
                "    AND rab.reqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;     \n" +
                "  \n" +
                "	UPDATE rfq_assy_bom_relationship rab    \n" +
                "	SET rab.isDeleted = 1, rab.deletedAt = utc_timestamp(), rab.deletedBy = pUserID            \n" +
                "	WHERE rab.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)    \n" +
                "	AND rab.rfqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;    \n" +
                "    CREATE TEMPORARY TABLE tmp_rfq_lineitems AS     \n" +
                "    SELECT rl1.lineID FROM rfq_lineitems rl1 WHERE rl1.rfqAssyID = pRFQAssyID AND rl1.isDeleted = 0 AND rl1.deletedAt IS NULL;    \n" +
                "  \n" +
                "    UPDATE rfq_lineitems rl    \n" +
                "    SET rl.isDeleted = 1, rl.deletedAt = utc_timestamp(), rl.deletedBy = pUserID            \n" +
                "	WHERE rl.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)    \n" +
                "    AND rl.refRFQLineItemID NOT IN (SELECT lineID FROM tmp_rfq_lineitems)    \n" +
                "	AND rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;    \n" +
                "  \n" +
                "    UPDATE rfq_lineitems_alternatepart rla    \n" +
                "    SET rla.isDeleted = 1, rla.deletedAt = utc_timestamp(), rla.deletedBy = pUserID            \n" +
                "	WHERE rla.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)     \n" +
                "    AND rla.rfqLineItemsID NOT IN (SELECT rl.id FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL)    \n" +
                "    AND rla.isDeleted = 0 AND rla.deletedAt IS NULL;    \n" +
                "    # -------------------------- [E] DELETE SUB ASSY ------------------------------------------    \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems;    \n" +
                "    # Get all Sub Assy RFQ Line Items with Part category    \n" +
                "    CREATE TEMPORARY TABLE tmp_rfq_lineitems AS        \n" +
                "	SELECT rl.id, rl.lineID, rl.rfqAssyID, rl.rfqAssyBomID, rl.refRFQLineItemID, rp.category,    \n" +
                "    (SELECT rlap.mfgPN FROM rfq_lineitems_alternatepart rlap WHERE rlap.rfqLineItemsID = rl.id AND rlap.isDeleted = 0 ANd rlap.deletedAt IS NULL LIMIT 1) mfgPN    \n" +
                "    FROM rfq_lineitems rl        \n" +
                "    LEFT JOIN rfq_parttypemst rp ON rl.partTypeID = rp.id AND rp.isDeleted = 0 AND rp.deletedAt IS NULL    \n" +
                "    WHERE rl.rfqAssyID = pRFQAssyID AND rp.category = subAssyType AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;        \n" +
                "  \n" +
                "    # -------------------------- [S] NEW SUB ASSY ------------------------------------------    \n" +
                "    # Get all sub assy which are not in relationship table    \n" +
                "    CREATE TEMPORARY TABLE tmp_sub_assy AS    \n" +
                "    SELECT a.*, rab.bomNumber    \n" +
                "    FROM tmp_rfq_lineitems a    \n" +
                "    LEFT JOIN rfq_assy_bom_relationship ra ON a.id = ra.parentLineitemsID AND ra.isDeleted = 0 AND ra.deletedAt IS NULL    \n" +
                "    LEFT JOIN rfq_assy_bom rab ON ra.rfqAssyBomID = rab.id AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;        \n" +
                "  \n" +
                "    # Insert sub assy into rfq_assy_bom table    \n" +
                "    INSERT INTO rfq_assy_bom    \n" +
                "    (`reqAssyID`, `isActive`, `description`, `isDeleted`, `createdBy`, `createdAt`, `bomNumber`)    \n" +
                "    SELECT rfqAssyID, 1 isActive, NULL description, 0 isDeleted, pUserID createdBy, utc_timestamp() createdAt, a.mfgPN    \n" +
                "    FROM tmp_sub_assy a WHERE a.bomNumber IS NULL;        \n" +
                "  \n" +
                "    # update rfqAssyBomID for all new added sub assy    \n" +
                "    UPDATE rfq_lineitems rl,    \n" +
                "		(   SELECT a.id, 			    \n" +
                "            (SELECT rab.id FROM rfq_assy_bom rab     \n" +
                "            WHERE rab.reqAssyID = a.rfqAssyID AND rab.bomNumber = a.mfgPN AND rab.isDeleted = 0 AND rab.deletedAt IS NULL) rfqAssyBomID    \n" +
                "			FROM tmp_sub_assy a    \n" +
                "		) tnsa    \n" +
                "	SET rl.rfqAssyBomID = IFNULL(tnsa.rfqAssyBomID, rl.rfqAssyBomID), updatedBy = pUserID, updatedAt = utc_timestamp()    \n" +
                "	WHERE rl.id = tnsa.id AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;    \n" +
                "     # insert new sub assy references into rfq_assy_bom_relationship    \n" +
                "     INSERT INTO rfq_assy_bom_relationship    \n" +
                "    (`rfqAssyBomID`, `parentRFQAssyBOMID`, `parentLineitemsID`,`rfqAssyID`, `isDeleted`, `createdBy`, `createdAt`)    \n" +
                "    SELECT rl.rfqAssyBomID,    \n" +
                "    (CASE WHEN rl.refRFQLineItemID IS NULL THEN     \n" +
                "    (SELECT a.id FROM rfq_assy_bom a WHERE a.reqAssyID = pRFQAssyID AND a.bomNumber IS NULL AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)    \n" +
                "    ELSE     \n" +
                "    (SELECT a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.lineID = rl.refRFQLineItemID AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)     \n" +
                "    END) parentRFQAssyBOMID,        \n" +
                "    rl.id parentLineitemsID,    \n" +
                "    pRFQAssyID rfqAssyID,    \n" +
                "    0 isDeleted, pUserID createdBy, utc_timestamp() createdAt    \n" +
                "    FROM rfq_lineitems rl WHERE rl.rfqAssyBomID IN    \n" +
                "    (SELECT ram.id rfqAssyBomID FROM rfq_assy_bom ram    \n" +
                "    WHERE ram.id NOT IN (SELECT rar.rfqAssyBomID FROM rfq_assy_bom_relationship rar WHERE rar.rfqAssyID = pRFQAssyID AND rar.isDeleted = 0 AND rar.deletedAt IS NULL)    \n" +
                "    AND ram.isDeleted = 0 AND ram.deletedAt IS NULL AND ram.reqAssyID = pRFQAssyID AND ram.bomNumber IS NOT NULL)    \n" +
                "    AND rl.isDeleted = 0 AND rl.deletedAt IS NULL     \n" +
                "    AND EXISTS (SELECT 1 FROM rfq_parttypemst rp WHERE rl.partTypeID = rp.id AND rp.category = subAssyType AND rp.isDeleted = 0 AND rp.deletedAt IS NULL);    \n" +
                "    # -------------------------- [E] NEW SUB ASSY ------------------------------------------    \n" +
                "  \n" +
                "  \n" +
                "    # -------------------------- [S] UPDATE SUB ASSY ------------------------------------------    \n" +
                "    UPDATE rfq_assy_bom ra,    \n" +
                "    (    \n" +
                "		SELECT a.mfgPN, rab.rfqAssyBomID rfqAssyBomID FROM tmp_sub_assy a     \n" +
                "        JOIN rfq_assy_bom_relationship rab ON a.id = rab.parentLineitemsID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL    \n" +
                "        WHERE a.bomNumber IS NOT NULL    \n" +
                "    ) tsa    \n" +
                "	SET ra.bomNumber = tsa.mfgPN, updatedBy = pUserID, updatedAt = utc_timestamp()    \n" +
                "    WHERE ra.id = tsa.rfqAssyBomID AND ra.bomNumber != tsa.mfgPN;        \n" +
                "    # -------------------------- [E] UPDATE SUB ASSY ------------------------------------------    \n" +
                "    # update rfqAssyBomID for all child line items of sub assy [ADD/UPDATE CASE]    \n" +
                "  \n" +
                "    UPDATE rfq_lineitems rl,    \n" +
                "    (		    \n" +
                "        (SELECT a.lineID, a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.isDeleted = 0 AND a.deletedAt IS NULL)    \n" +
                "        UNION  \n" +
                "        (SELECT 0 lineID, a.id rfqAssyBomID FROM rfq_assy_bom a WHERE a.reqAssyID = pRFQAssyID AND a.bomNumber IS NULL AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)          \n" +
                "    ) rl2    \n" +
                "    SET rl.rfqAssyBomID = rl2.rfqAssyBomID, updatedBy = pUserID, updatedAt = utc_timestamp()    \n" +
                "    WHERE rl.rfqAssyID = pRFQAssyID AND IFNULL(rl.refRFQLineItemID,0) = rl2.lineID       \n" +
                "    AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;    \n" +
                "  \n" +
                "      # update rfqAssyBomID for all child line items alternate part of sub assy [ADD/UPDATE CASE]    \n" +
                "    UPDATE rfq_lineitems_alternatepart rla,    \n" +
                "    (    \n" +
                "		SELECT a.id, a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.isDeleted = 0 AND a.deletedAt IS NULL    \n" +
                "    ) tra    \n" +
                "    SET rla.rfqAssyBomID = tra.rfqAssyBomID    \n" +
                "    WHERE rla.rfqLineItemsID = tra.id AND rla.isDeleted = 0 AND rla.deletedAt IS NULL;    \n" +
                "  \n" +
                "    COMMIT;    \n" +
                "    IF (pIsVerify = 1) THEN    \n" +
                "		SELECT GROUP_CONCAT(rl.id) INTO @rfqLineItemIds FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;    \n" +
                "		CALL Sproc_VerifyCustPN (@rfqLineItemIds, pRFQAssyID);    \n" +
                "    END IF;	    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (32,'1.00','V1','Update Sproc_CreateRFQAssyBomRelationship - RAVI '," + userid + ");"
                    );
            break;
        case 32:
            allDbChangesArray.push(
            /* **************************** New Script -> 26-07-2018  *********************************** */
            "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`,  \n" +
            " `parentPageRoute`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`,   \n" +
            " `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Unquoted Line Items','0','0',NULL,'app.bom.partcosting.reviewpricing.unquoted','/unquoted/:id',NULL,  \n" +
            " NULL,(SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Review Pricing'),0,3,1,'mdi mdi-pause-circle-outline',1,  \n" +
            " '2018-07-25 11:20:55','2018-07-25 11:20:55',NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`,  \n" +
            " `parentPageRoute`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`,   \n" +
            " `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('80/20 Rules','0','0',NULL,'app.bom.partcosting.reviewpricing.rules','/rules/:id',NULL,  \n" +
            " NULL,(SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Review Pricing'),0,3,1,'mdi mdi-ruler',1,  \n" +
            " '2018-07-25 11:20:55','2018-07-25 11:20:55',NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`,  \n" +
            " `parentPageRoute`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`,   \n" +
            " `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Excess Material Exposure','0','0',NULL,'app.bom.partcosting.reviewpricing.excess','/excess/:id',NULL,  \n" +
            " NULL,(SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Review Pricing'),0,3,1,'icon-crop-free',1,  \n" +
            " '2018-07-25 11:20:55','2018-07-25 11:20:55',NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`,  \n" +
            " `parentPageRoute`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`,   \n" +
            " `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Materials At Risk','0','0',NULL,'app.bom.partcosting.reviewpricing.atrisk','/atrisk/:id',NULL,  \n" +
            " NULL,(SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Review Pricing'),0,3,1,'icon-no',1,  \n" +
            " '2018-07-25 11:20:55','2018-07-25 11:20:55',NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`,  \n" +
            " `parentPageRoute`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`,   \n" +
            " `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Lead Time Risk','0','0',NULL,'app.bom.partcosting.reviewpricing.leadtimerisk','/leadtimerisk/:id',NULL,  \n" +
            " NULL,(SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Review Pricing'),0,3,1,'icon-clock-fast',1,  \n" +
            " '2018-07-25 11:20:55','2018-07-25 11:20:55',NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`,  \n" +
            " `parentPageRoute`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`,   \n" +
            " `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Suggested Alternatives','0','0',NULL,'app.bom.partcosting.reviewpricing.alternative','/alternate/:id',NULL,  \n" +
            " NULL,(SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Review Pricing'),0,3,1,'icon-content-duplicate',1,  \n" +
            " '2018-07-25 11:20:55','2018-07-25 11:20:55',NULL,'1',NULL,NULL,'0',NULL);  \n" +
            /* **************************** New Script -> 26-07-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetGenericFolders` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetGenericFolders`(  \n" +
            "IN pRefTransId INT,  \n" +
            "IN pEntityId INT,  \n" +
            "IN pAccessLevel DECIMAL(6,2),  \n" +
            "IN pGencFileOwnerType VARCHAR(255),      \n" +
            "IN pIsTraveler TINYINT(1)      \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE whereClauseFolder VARCHAR(1000);      \n" +
            "	DECLARE whereClauseAllFolder VARCHAR(1000);      \n" +
            "  \n" +
            "	SET pEntityId = IFNULL(pEntityId,0);      \n" +
            "  \n" +
            "	SET whereClauseFolder = CONCAT(\" IFNULL(gf.entityID,0) = IFNULL(\",pEntityId,\",0)       \n" +
            "			AND gf.refTransID = \", pRefTransId,      \n" +
            "			\" AND gf.deletedAt IS NULL AND roleId IN (SELECT id FROM roles WHERE accessLevel >= \",pAccessLevel,\" AND deletedAt IS NULL)\");      \n" +
            "	SET whereClauseAllFolder = CONCAT(\" gf.refTransID = \", 0,      \n" +
            "			\" AND gf.deletedAt IS NULL AND roleId IN (SELECT id FROM roles WHERE accessLevel >= \",pAccessLevel,\" AND deletedAt IS NULL)\");        \n" +
            "  \n" +
            "	-- if workorder operation then show operation data too      \n" +
            "	IF (pGencFileOwnerType = 'workorder_operation') THEN      \n" +
            "		SET whereClauseFolder = CONCAT(whereClauseFolder,\" OR      \n" +
            "				(IFNULL(gf.entityID,0) = -1       \n" +
            "				AND gf.refTransID IN (SELECT opID FROM workorder_operation WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)       \n" +
            "				AND gf.gencFileOwnerType = 'operations')   \n" +
            "				AND gf.deletedAt IS NULL\");      \n" +
            "		SET whereClauseAllFolder = CONCAT(whereClauseAllFolder, \" OR      \n" +
            "				(IFNULL(gfile.entityID,0) = -1       \n" +
            "				AND gfile.refTransID IN (SELECT opID FROM workorder_operation WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)       \n" +
            "				AND gfile.gencFileOwnerType = 'operations')    \n" +
            "				AND gfile.deletedAt IS NULL\");	      \n" +
            "    END IF;      \n" +
            "	-- if traveler page than get data of operation, workorder, workorder operation      \n" +
            "    IF (pIsTraveler = 1) THEN      \n" +
            "		SET whereClauseFolder = CONCAT(whereClauseFolder,\" OR      \n" +
            "				(IFNULL(gf.entityID,0) = -7      \n" +
            "				AND gf.refTransID IN (SELECT woID FROM workorder_operation WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)       \n" +
            "				AND gf.gencFileOwnerType = 'workorder')      \n" +
            "				AND gf.deletedAt IS NULL\");      \n" +
            "		SET whereClauseAllFolder = CONCAT(whereClauseAllFolder, \" OR      \n" +
            "				(IFNULL(gfile.entityID,0) = -7      \n" +
            "				AND gfile.refTransID IN (SELECT woID FROM workorder_operation WHERE woOPID = \",pRefTransId,\" AND deletedAt IS NULL)       \n" +
            "				AND gfile.gencFileOwnerType = 'workorder')   \n" +
            "				AND gfile.deletedAt IS NULL\");      \n" +
            "    END IF;  \n" +
            "  SET @SQLStatement1 = CONCAT(\"SELECT * FROM (SELECT   \n" +
            "gf.gencFolderName,  \n" +
            "gf.gencFolderID AS gencFolderID,  \n" +
            "gf.entityID,  \n" +
            "gf.refTransID,  \n" +
            "gf.gencFileOwnerType,  \n" +
            "gf.roleId,  \n" +
            "gf.refParentId AS folderParentID,  \n" +
            "gfile.refParentId AS fileParentID,  \n" +
            "gfile.gencFileID,  \n" +
            "gfile.gencFileName,  \n" +
            "gfile.gencOriginalName,  \n" +
            "gfile.gencFileDescription,  \n" +
            "gfile.gencFileExtension,  \n" +
            "gfile.gencFileType,  \n" +
            "gfile.isDefault,  \n" +
            "gfile.refTransID AS fileTransID,  \n" +
            "gfile.entityID AS fileEntityID,  \n" +
            "gfile.gencFileOwnerType AS fileOwnerType,  \n" +
            "gfile.isShared,  \n" +
            "gfile.fileGroupBy,  \n" +
            "gfile.fileSize  \n" +
            "	FROM generic_folder gf  \n" +
            "	LEFT JOIN genericfiles gfile ON gfile.refParentId = gf.gencFolderID AND  gfile.gencFileName NOT LIKE 'profile%'  \n" +
            "    WHERE\", whereClauseFolder,\"  \n" +
            "UNION  \n" +
            "SELECT   \n" +
            "gf.gencFolderName,  \n" +
            "gf.gencFolderID AS gencFolderID,  \n" +
            "gf.entityID,  \n" +
            "gf.refTransID,  \n" +
            "gf.gencFileOwnerType,  \n" +
            "gf.roleId,  \n" +
            "gf.refParentId AS folderParentID,  \n" +
            "gfile.refParentId AS fileParentID,  \n" +
            "gfile.gencFileID,  \n" +
            "gfile.gencFileName,  \n" +
            "gfile.gencOriginalName,  \n" +
            "gfile.gencFileDescription,  \n" +
            "gfile.gencFileExtension,  \n" +
            "gfile.gencFileType,  \n" +
            "gfile.isDefault,  \n" +
            "gfile.refTransID AS fileTransID,  \n" +
            "gfile.entityID AS fileEntityID,  \n" +
            "gfile.gencFileOwnerType AS fileOwnerType,  \n" +
            "gfile.isShared,  \n" +
            "gfile.fileGroupBy,  \n" +
            "gfile.fileSize  \n" +
            "	FROM generic_folder gf  \n" +
            "	LEFT JOIN genericfiles gfile ON gfile.refParentId = gf.gencFolderID AND  gfile.gencFileName NOT LIKE 'profile%'  \n" +
            "      WHERE\", whereClauseAllFolder,\")   \n" +
            "   q ORDER BY q.gencFolderID ASC\");  \n" +
            "	PREPARE query1 FROM @SQLStatement1;      \n" +
            "	EXECUTE query1;      \n" +
            "	DEALLOCATE PREPARE query1;      \n" +
            "END;  \n" +
            /* **************************** New Script -> 26-07-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetReviewPricingLineItem` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetReviewPricingLineItem`(    \n" +
            "	IN ppageIndex INT(11),    \n" +
            "	IN precordPerPage INT(11),    \n" +
            "	IN pOrderBy VARCHAR(255),    \n" +
            "	IN pWhereClause VARCHAR(21844),    \n" +
            "	IN rfqAssyID INT(11),    \n" +
            "	IN puserID INT (11)    \n" +
            "    )  \n" +
            "BEGIN    \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);    \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;    \n" +
            "	    SET @SQL = NULL;    \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN    \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
            "		ELSE    \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;     \n" +
            "		END IF;	    \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN    \n" +
            "			SET pWhereClause = '1=1' ;    \n" +
            "		END IF;	    \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
            "		ELSE	    \n" +
            "			SET rowNumWhere = '';    \n" +
            "		END IF;	    \n" +
            "		SELECT    \n" +
            "                     GROUP_CONCAT(DISTINCT    \n" +
            "				CONCAT(    \n" +
            "					'Max((IF(ra.requestQty = ''',    \n" +
            "						ra.requestQty,    \n" +
            "					''', rq.finalPrice, null))) AS ''',    \n" +
            "						ra.requestQty,''''    \n" +
            "					)    \n" +
            "					) INTO @SQL    \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq    \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID    \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id    \n" +
            "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;    \n" +
            "  \n" +
            "			IF(@SQL IS NOT NULL) THEN    \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS    \n" +
            "					SELECT     \n" +
            "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,      \n" +
            "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,    \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(mf.mfgCode,\"N/A\"),\"|\",rla.mfgPN)AS mfgPn     \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN mfgcodemst mf ON     \n" +
            "                               rla.mfgCodeID=mf.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',     \n" +
            "					@SQL, ' FROM rfq_consolidated_mfgpn_lineitem rl    \n" +
            "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID    \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id    \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');    \n" +
            "  \n" +
            "			ELSE    \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS    \n" +
            "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,    \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(mf.mfgCode,\"N/A\"),\"|\",rla.mfgPN)AS mfgPn     \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN mfgcodemst mf ON     \n" +
            "                               rla.mfgCodeID=mf.id WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl    \n" +
            "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID');	    \n" +
            "			END IF;    \n" +
            "			PREPARE stmt FROM @SQLStatement;    \n" +
            "			EXECUTE stmt;	    \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );    \n" +
            "			PREPARE query1 FROM @SQLStatement1;    \n" +
            "			EXECUTE query1;    \n" +
            "			DEALLOCATE PREPARE query1;    \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
            "			PREPARE query2 FROM @SQLStatement2;    \n" +
            "			EXECUTE query2;    \n" +
            "			DEALLOCATE PREPARE query2;    \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq    \n" +
            "  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID    \n" +
            "  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id    \n" +
            "   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);    \n" +
            "			PREPARE query3 FROM @SQLStatement3;    \n" +
            "			EXECUTE query3;    \n" +
            "			DEALLOCATE PREPARE query3;    \n" +
            "  \n" +
            "			SET @SQLStatement4 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );    \n" +
            "			PREPARE query4 FROM @SQLStatement4;    \n" +
            "			EXECUTE query4;    \n" +
            "			DEALLOCATE PREPARE query4;    \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;      \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 26-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                 "VALUES (33,'1.00','V1','SP for GetReviewPricingLinetems, GetGenericFolders and Menu for Review Pricing Filters '," + userid + ");"
            );
            break;
        case 33:
            allDbChangesArray.push(
                    /* **************************** New Script -> 27-07-2018  *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_GetSubAssyRFQLineItems`;  \n" +
                    "CREATE PROCEDURE `Sproc_GetSubAssyRFQLineItems`(      \n" +
                    "	IN ppageIndex INT(11),      \n" +
                    "	IN precordPerPage INT(11),      \n" +
                    "	IN pOrderBy VARCHAR(255),      \n" +
                    "    IN pWhereClause VARCHAR(21844),      \n" +
                    "    IN prfqAssyID INT,  \n" +
                    "    IN prfqAssyBOMID INT  \n" +
                    ")  \n" +
                    "BEGIN      \n" +
                    "	DECLARE pOffset INT(11);      \n" +
                    "	DECLARE rowNumWhere VARCHAR(255) ;	      \n" +
                    "  \n" +
                    "  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                    "	select group_concat(distinct(ra.mfgPN))as mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,      \n" +
                    "	rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,concat(pt.partTypeName,'|',pc.name) as name,      \n" +
                    "	rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID      \n" +
                    "	from rfq_lineitems_alternatepart ra      \n" +
                    "	left join rfq_lineitems rl on rl.id =ra.rfqLineItemsID  and rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0  \n" +
                    "    left join rfq_assy_bom_relationship br on br.parentLineitemsID = rl.id  \n" +
                    "	left join rfq_mountingtypemst pc on rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0      \n" +
                    "	left join rfq_parttypemst pt on rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0       \n" +
                    "	where rl.rfqAssyBomID = prfqAssyBOMID AND IFNULL(ra.isDeleted,0) = 0 and ra.rfqAssyID = prfqAssyID     \n" +
                    "	group by ra.rfqLineItemsID order by CAST(rl.lineID AS SIGNED);      \n" +
                    "  \n" +
                    "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                    "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                    "	ELSE      \n" +
                    "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id ASC\") ;      \n" +
                    "	END IF;	      \n" +
                    "  \n" +
                    "  \n" +
                    "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                    "		SET pWhereClause = '1=1' ;      \n" +
                    "	END IF;	      \n" +
                    "  \n" +
                    "  \n" +
                    "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                    "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                    "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                    "	ELSE	      \n" +
                    "		SET rowNumWhere = '';      \n" +
                    "	END IF;	      \n" +
                    "  \n" +
                    "  \n" +
                    "	/* to get total count of rows */      \n" +
                    "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
                    "	PREPARE query1 FROM @SQLStatement1;      \n" +
                    "	EXECUTE query1;      \n" +
                    "	DEALLOCATE PREPARE query1;      \n" +
                    "  \n" +
                    "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                    "	PREPARE query2 FROM @SQLStatement2;      \n" +
                    "	EXECUTE query2;      \n" +
                    "	DEALLOCATE PREPARE query2;      \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE Results;      \n" +
                    "    END;  \n" +
                        /* **************************** Add Script Version -> 27-07-2018 *********************************** */
                        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                        "VALUES (34,'1.00','V1','Get sub Bom Data in verifiedBOM tab  - shirish '," + userid + ");"
                            );
            break;
        case 34:
            allDbChangesArray.push(
                    /* **************************** New Script -> 27-07-2018  *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                    "CREATE PROCEDURE `Sproc_GetRFQLineItems`(      \n" +
                    "	IN ppageIndex INT(11),      \n" +
                    "	IN precordPerPage INT(11),      \n" +
                    "	IN pOrderBy VARCHAR(255),      \n" +
                    "    IN pWhereClause VARCHAR(21844),      \n" +
                    "    IN prfqAssyID INT      \n" +
                    ")  \n" +
                    "BEGIN      \n" +
                    "	DECLARE pOffset INT(11);      \n" +
                    "	DECLARE rowNumWhere VARCHAR(255) ;	      \n" +
                    "  \n" +
                    "  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                    "   	select group_concat(distinct(ra.mfgPN))as mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,      \n" +
                    "	rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,concat(pt.partTypeName,'|',pc.name) as name,      \n" +
                    "	rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID      \n" +
                    "	from rfq_lineitems_alternatepart ra      \n" +
                    "	left join rfq_lineitems rl on rl.id =ra.rfqLineItemsID  and rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0  \n" +
                    "    left join rfq_assy_bom_relationship br on br.parentLineitemsID = rl.id  \n" +
                    "	left join rfq_mountingtypemst pc on rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0      \n" +
                    "	left join rfq_parttypemst pt on rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0       \n" +
                    "	where rl.rfqAssyID = prfqAssyID AND IFNULL(ra.isDeleted,0) = 0      \n" +
                    "	group by ra.rfqLineItemsID order by CAST(rl.lineID AS SIGNED);      \n" +
                    "  \n" +
                    "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                    "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                    "	ELSE      \n" +
                    "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id ASC\") ;      \n" +
                    "	END IF;	      \n" +
                    "  \n" +
                    "  \n" +
                    "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                    "		SET pWhereClause = '1=1' ;      \n" +
                    "	END IF;	      \n" +
                    "  \n" +
                    "  \n" +
                    "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                    "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                    "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                    "	ELSE	      \n" +
                    "		SET rowNumWhere = '';      \n" +
                    "	END IF;	      \n" +
                    "  \n" +
                    "  \n" +
                    "	/* to get total count of rows */      \n" +
                    "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
                    "	PREPARE query1 FROM @SQLStatement1;      \n" +
                    "	EXECUTE query1;      \n" +
                    "	DEALLOCATE PREPARE query1;      \n" +
                    "  \n" +
                    "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                    "	PREPARE query2 FROM @SQLStatement2;      \n" +
                    "	EXECUTE query2;      \n" +
                    "	DEALLOCATE PREPARE query2;      \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE Results;      \n" +
                    "    END;  \n" +
                        /* **************************** Add Script Version -> 27-07-2018 *********************************** */
                        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                        "VALUES (35,'1.00','V1','get lineItemData in verifiedBOM tab - shirish '," + userid + ");"
                            );
            break;
        case 35:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateRFQAssyBomRelationship`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRFQAssyBomRelationship`(      \n" +
                "	IN pRFQAssyID INT,      \n" +
                "    IN pUserID INT,      \n" +
                "    IN pIsVerify TINYINT(1)      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "DECLARE subAssyType INT(11);      \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION      \n" +
                "BEGIN      \n" +
                "	ROLLBACK;      \n" +
                "	RESIGNAL;      \n" +
                "END;      \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING      \n" +
                "  BEGIN      \n" +
                "	ROLLBACK;      \n" +
                "	RESIGNAL;      \n" +
                "END;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems;      \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems_sub_assy;      \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_sub_assy;	      \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_delete_assy;      \n" +
                "  \n" +
                "    SET subAssyType = 3;      \n" +
                "  \n" +
                "	START TRANSACTION;      \n" +
                "  \n" +
                "	# -------------------------- [S] DELETE SUB ASSY ------------------------------------------      \n" +
                "	CREATE TEMPORARY TABLE tmp_delete_assy AS      \n" +
                "	SELECT rab.rfqAssyBomID FROM rfq_assy_bom_relationship rab WHERE rab.rfqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL      \n" +
                "    AND rab.parentLineItemsID NOT IN       \n" +
                "    (SELECT rl.id FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL GROUP BY rl.rfqAssyBomID);      \n" +
                "	UPDATE rfq_assy_bom rab      \n" +
                "	SET rab.isDeleted = 1, rab.deletedAt = utc_timestamp(), rab.deletedBy = pUserID              \n" +
                "	WHERE rab.id IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)      \n" +
                "    AND rab.reqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;       \n" +
                "  \n" +
                "	UPDATE rfq_assy_bom_relationship rab      \n" +
                "	SET rab.isDeleted = 1, rab.deletedAt = utc_timestamp(), rab.deletedBy = pUserID              \n" +
                "	WHERE rab.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)      \n" +
                "	AND rab.rfqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;      \n" +
                "    CREATE TEMPORARY TABLE tmp_rfq_lineitems AS       \n" +
                "    SELECT rl1.lineID FROM rfq_lineitems rl1 WHERE rl1.rfqAssyID = pRFQAssyID AND rl1.isDeleted = 0 AND rl1.deletedAt IS NULL;      \n" +
                "  \n" +
                "    UPDATE rfq_lineitems rl      \n" +
                "    SET rl.isDeleted = 1, rl.deletedAt = utc_timestamp(), rl.deletedBy = pUserID              \n" +
                "	WHERE rl.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)      \n" +
                "    AND rl.refRFQLineItemID NOT IN (SELECT lineID FROM tmp_rfq_lineitems)      \n" +
                "	AND rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;      \n" +
                "  \n" +
                "    UPDATE rfq_lineitems_alternatepart rla      \n" +
                "    SET rla.isDeleted = 1, rla.deletedAt = utc_timestamp(), rla.deletedBy = pUserID              \n" +
                "	WHERE rla.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)       \n" +
                "    AND rla.rfqLineItemsID NOT IN (SELECT rl.id FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL)      \n" +
                "    AND rla.isDeleted = 0 AND rla.deletedAt IS NULL;      \n" +
                "    # -------------------------- [E] DELETE SUB ASSY ------------------------------------------      \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems;      \n" +
                "    # Get all Sub Assy RFQ Line Items with Part category      \n" +
                "    CREATE TEMPORARY TABLE tmp_rfq_lineitems AS          \n" +
                "	SELECT rl.id, rl.lineID, rl.rfqAssyID, rl.rfqAssyBomID, rl.refRFQLineItemID, rp.category,      \n" +
                "    (SELECT rlap.mfgPN FROM rfq_lineitems_alternatepart rlap WHERE rlap.rfqLineItemsID = rl.id AND rlap.isDeleted = 0 ANd rlap.deletedAt IS NULL LIMIT 1) mfgPN      \n" +
                "    FROM rfq_lineitems rl          \n" +
                "    LEFT JOIN rfq_parttypemst rp ON rl.partTypeID = rp.id AND rp.isDeleted = 0 AND rp.deletedAt IS NULL      \n" +
                "    WHERE rl.rfqAssyID = pRFQAssyID AND rp.category = subAssyType AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;          \n" +
                "  \n" +
                "    # -------------------------- [S] NEW SUB ASSY ------------------------------------------      \n" +
                "    # Get all sub assy which are not in relationship table      \n" +
                "    CREATE TEMPORARY TABLE tmp_sub_assy AS      \n" +
                "    SELECT a.*, rab.bomNumber      \n" +
                "    FROM tmp_rfq_lineitems a      \n" +
                "    LEFT JOIN rfq_assy_bom_relationship ra ON a.id = ra.parentLineitemsID AND ra.isDeleted = 0 AND ra.deletedAt IS NULL      \n" +
                "    LEFT JOIN rfq_assy_bom rab ON ra.rfqAssyBomID = rab.id AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;          \n" +
                "  \n" +
                "    # Insert sub assy into rfq_assy_bom table      \n" +
                "    INSERT INTO rfq_assy_bom      \n" +
                "    (`reqAssyID`, `isActive`, `description`, `isDeleted`, `createdBy`, `createdAt`, `bomNumber`)      \n" +
                "    SELECT rfqAssyID, 1 isActive, NULL description, 0 isDeleted, pUserID createdBy, utc_timestamp() createdAt, a.mfgPN      \n" +
                "    FROM tmp_sub_assy a WHERE a.bomNumber IS NULL;          \n" +
                "  \n" +
                "    # update rfqAssyBomID for all new added sub assy      \n" +
                "    UPDATE rfq_lineitems rl,      \n" +
                "		(   SELECT a.id, 			      \n" +
                "            (SELECT rab.id FROM rfq_assy_bom rab       \n" +
                "            WHERE rab.reqAssyID = a.rfqAssyID AND rab.bomNumber = a.mfgPN AND rab.isDeleted = 0 AND rab.deletedAt IS NULL) rfqAssyBomID      \n" +
                "			FROM tmp_sub_assy a      \n" +
                "		) tnsa      \n" +
                "	SET rl.rfqAssyBomID = IFNULL(tnsa.rfqAssyBomID, rl.rfqAssyBomID), updatedBy = pUserID, updatedAt = utc_timestamp()      \n" +
                "	WHERE rl.id = tnsa.id AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;      \n" +
                "     # insert new sub assy references into rfq_assy_bom_relationship      \n" +
                "     INSERT INTO rfq_assy_bom_relationship      \n" +
                "    (`rfqAssyBomID`, `parentRFQAssyBOMID`, `parentLineitemsID`,`rfqAssyID`, `isDeleted`, `createdBy`, `createdAt`)      \n" +
                "    SELECT rl.rfqAssyBomID,      \n" +
                "    (CASE WHEN rl.refRFQLineItemID IS NULL THEN       \n" +
                "    (SELECT a.id FROM rfq_assy_bom a WHERE a.reqAssyID = pRFQAssyID AND a.bomNumber IS NULL AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)      \n" +
                "    ELSE       \n" +
                "    (SELECT a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.lineID = rl.refRFQLineItemID AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)       \n" +
                "    END) parentRFQAssyBOMID,          \n" +
                "    rl.id parentLineitemsID,      \n" +
                "    pRFQAssyID rfqAssyID,      \n" +
                "    0 isDeleted, pUserID createdBy, utc_timestamp() createdAt      \n" +
                "    FROM rfq_lineitems rl WHERE rl.rfqAssyBomID IN      \n" +
                "    (SELECT ram.id rfqAssyBomID FROM rfq_assy_bom ram      \n" +
                "    WHERE ram.id NOT IN (SELECT rar.rfqAssyBomID FROM rfq_assy_bom_relationship rar WHERE rar.rfqAssyID = pRFQAssyID AND rar.isDeleted = 0 AND rar.deletedAt IS NULL)      \n" +
                "    AND ram.isDeleted = 0 AND ram.deletedAt IS NULL AND ram.reqAssyID = pRFQAssyID AND ram.bomNumber IS NOT NULL)      \n" +
                "    AND rl.isDeleted = 0 AND rl.deletedAt IS NULL       \n" +
                "    AND EXISTS (SELECT 1 FROM rfq_parttypemst rp WHERE rl.partTypeID = rp.id AND rp.category = subAssyType AND rp.isDeleted = 0 AND rp.deletedAt IS NULL);      \n" +
                "    # -------------------------- [E] NEW SUB ASSY ------------------------------------------      \n" +
                "  \n" +
                "  \n" +
                "    # -------------------------- [S] UPDATE SUB ASSY ------------------------------------------      \n" +
                "    UPDATE rfq_assy_bom ra,      \n" +
                "    (      \n" +
                "		SELECT a.mfgPN, rab.rfqAssyBomID rfqAssyBomID FROM tmp_sub_assy a       \n" +
                "        JOIN rfq_assy_bom_relationship rab ON a.id = rab.parentLineitemsID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL      \n" +
                "        WHERE a.bomNumber IS NOT NULL      \n" +
                "    ) tsa      \n" +
                "	SET ra.bomNumber = tsa.mfgPN, updatedBy = pUserID, updatedAt = utc_timestamp()      \n" +
                "    WHERE ra.id = tsa.rfqAssyBomID AND ra.bomNumber != tsa.mfgPN;          \n" +
                "    # -------------------------- [E] UPDATE SUB ASSY ------------------------------------------      \n" +
                "    # update rfqAssyBomID for all child line items of sub assy [ADD/UPDATE CASE]      \n" +
                "  \n" +
                "    UPDATE rfq_lineitems rl,      \n" +
                "    (		      \n" +
                "        (SELECT a.lineID, a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.isDeleted = 0 AND a.deletedAt IS NULL)      \n" +
                "        UNION    \n" +
                "        (SELECT 0 lineID, a.id rfqAssyBomID FROM rfq_assy_bom a WHERE a.reqAssyID = pRFQAssyID AND a.bomNumber IS NULL AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)            \n" +
                "    ) rl2      \n" +
                "    SET rl.rfqAssyBomID = rl2.rfqAssyBomID, updatedBy = pUserID, updatedAt = utc_timestamp()      \n" +
                "    WHERE rl.rfqAssyID = pRFQAssyID AND IFNULL(rl.refRFQLineItemID,0) = rl2.lineID         \n" +
                "    AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;      \n" +
                "  \n" +
                "      # update rfqAssyBomID for all child line items alternate part of sub assy [ADD/UPDATE CASE]      \n" +
                "    UPDATE rfq_lineitems_alternatepart rla,      \n" +
                "    (      \n" +
                "		SELECT a.id, a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.isDeleted = 0 AND a.deletedAt IS NULL      \n" +
                "    ) tra      \n" +
                "    SET rla.rfqAssyBomID = tra.rfqAssyBomID      \n" +
                "    WHERE rla.rfqLineItemsID = tra.id AND rla.isDeleted = 0 AND rla.deletedAt IS NULL;      \n" +
                "  \n" +
                "    COMMIT;      \n" +
                "    IF (pIsVerify = 1) THEN  \n" +
                "		SELECT GROUP_CONCAT(rl.id) INTO @rfqLineItemIds FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;      \n" +
                "		CALL Sproc_VerifyCustPN (@rfqLineItemIds, pRFQAssyID);      \n" +
                "  \n" +
                "        IF EXISTS(SELECT 1 FROM rfq_assemblies ra WHERE ra.id = pRFQAssyID AND ra.isReadyForPricing = 1 AND ra.isDeleted = 0 AND ra.deletedAt IS NULL) THEN  \n" +
                "			CALL Sproc_CreateRfqConsolidateLineItem (pRFQAssyID, pUserID);  \n" +
                "        END IF;  \n" +
                "  \n" +
                "    END IF;	      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (36,'1.00','V1','Update Sproc_CreateRFQAssyBomRelationship - RAVI'," + userid + ");"
                    );
            break;

        case 36:
            allDbChangesArray.push(
                       /* **************************** New Script -> 27-07-2018  *********************************** */
                           "alter table rfq_lineitems_errorcode modify column description varchar(255);  \n" +
                         /* **************************** Add Script Version -> 27-07-2018 *********************************** */
                           "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                           "VALUES (37,'1.00','V1',' alter rfq_lineitems_errorcode - mona '," + userid + ");"
                             );
            break;
        case 37:
            allDbChangesArray.push(
                 /* **************************** New Script -> 27-07-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllQtyPricing` ;  \n" +
"CREATE PROCEDURE `Sproc_GetAllQtyPricing`(	  \n" +
"	IN prfqAssyID INT(11)  \n" +
"    )  \n" +
"BEGIN  \n" +
"  \n" +
"					SELECT   rl.id, rl.lineID,rl.rfqAssyBomID, rl.rfqAssyID,rq.qtyID, ra.requestQty,   \n" +
"					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,rq.selectedMPN,  \n" +
"					rq.unitPrice,rq.supplier,  \n" +
"					(SELECT GROUP_CONCAT(IFNULL(mf.mfgCode,\"N/A\"),\"|\",rla.mfgPN)AS mfgPn   \n" +
"                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN mfgcodemst mf ON   \n" +
"                               rla.mfgCodeID=mf.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN  \n" +
"					 FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
"					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID  \n" +
"					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id  \n" +
"					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=prfqAssyID AND rl.isPurchase=1 ORDER BY rl.id;   \n" +
"END;  \n" +
                 /* **************************** Add Script Version -> 27-07-2018 *********************************** */
                               "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                               "VALUES (38,'1.00','V1',' create Sproc_GetAllQtyPricing - champak '," + userid + ");"

                )
            break;
        case 38:
            allDbChangesArray.push(
 /* **************************** New Script -> 27-07-2018  *********************************** */
"INSERT INTO systemconfigrations (`key`,`values`,clusterName,isEncrypted,isActive,isDeleted,createdBy,isEditable) VALUES  \n" +
"('TTIAccessToken','b0e77920-3e42-4afe-acc1-6d6614eb51fe','TTI',0,1,0,'1',1),  \n" +
"('TTIHeader','C9ZRS2D2wYcZT','TTI',0,1,0,'1',1);  \n" +
/* **************************** Add Script Version -> 27-07-2018 *********************************** */
                               "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                               "VALUES (39,'1.00','V1',' Added TTI cardential  - champak '," + userid + ");"
            )
            break;
        case 39:
            allDbChangesArray.push(
                        /* **************************** New Script -> 28-07-2018  *********************************** */
                        "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
                        "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(    \n" +
                        "	IN rfqAssyID int(1),    \n" +
                        "	IN userID INT(1)    \n" +
                        ")  \n" +
                        "BEGIN    \n" +
                        "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
                        "BEGIN    \n" +
                        "	ROLLBACK;    \n" +
                        "	RESIGNAL;    \n" +
                        "END;    \n" +
                        "DECLARE EXIT HANDLER FOR SQLWARNING    \n" +
                        "  BEGIN    \n" +
                        "	ROLLBACK;    \n" +
                        "	RESIGNAL;    \n" +
                        "END;    \n" +
                        " DROP TEMPORARY TABLE if exists Results;    \n" +
                        "  \n" +
                        "    START TRANSACTION;    \n" +
                        "  \n" +
                        "# Select Consolidated rfq_lineitems    \n" +
                        "  \n" +
                        "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
                        "		select rfqLineItemsID as rfqLineItemsID,attritionRate,isInstall,     \n" +
                        "		isPurchase,partclassID,partTypeID,leadQty,isActive,isNoBidsPN,isDraft,    \n" +
                        "		lineID,numOfPosition,rfqAssyID,uomID,ab.rfqAssyBomID,    \n" +
                        "		sum(qpa2) qpa, cast((sum(adcost1)/sum(qpa2)) as decimal(10,5)) as valueAddedCost,    \n" +
                        "		mfg,count(*)as multiple,group_concat(rfqLineItemsID) as consolidatedLineItemIDs    \n" +
                        "		from     \n" +
                        "		(select *,(qpa1*valueAddedCost)as adcost1, qpa1 as qpa2, group_concat(distinct(part)) mfg    \n" +
                        "		from    \n" +
                        "		(select b.rfqLineItemsID, a.valueAddedCost, a.refRFQLineItemID,     \n" +
                        "		fun_getQPAOfLineItems(a.lineID,rfqAssyID)as qpa1, (fun_getQPAOfLineItems(a.lineID,rfqAssyID)* a.valueAddedCost)as addCost,     \n" +
                        "		concat(b.mfgCodeID,' | ', b.mfgPNID ) as part,a.attritionRate,a.isInstall,     \n" +
                        "		a.isPurchase,a.partclassID,a.partTypeID,a.leadQty,a.isActive,a.isNoBidsPN,a.isDraft,    \n" +
                        "		a.lineID,a.numOfPosition,a.rfqAssyID,a.uomID,a.rfqAssyBomID    \n" +
                        "		from rfq_lineitems_alternatepart b     \n" +
                        "        join rfq_lineitems a on b.rfqLineItemsID = a.id AND a.rfqAssyID = rfqAssyID AND IFNULL(a.isDeleted,0) = 0   \n" +
                        "        where IFNULL(b.isDeleted,0) = 0 and (b.mfgPNID is not NULL or b.mfgPN is not NULL)  \n" +
                        "		group by b.rfqLineItemsID, b.mfgPN, concat(b.mfgCode,' | ', b.mfgPN)) aa    \n" +
                        "		group by aa.rfqLineItemsID) ab     \n" +
                        "		group by mfg;   \n" +
                        "  \n" +
                        "# Delete consolidated lineItem if consolidatedLineItemIDs  change    \n" +
                        "  \n" +
                        "			update rfq_consolidated_mfgpn_lineitem cl    \n" +
                        "			set     \n" +
                        "			cl.isDeleted = true,    \n" +
                        "			cl.deletedAt = UTC_DATE(),    \n" +
                        "			cl.deletedBy = userID    \n" +
                        "			where cl.rfqAssyID = rfqAssyID and cl.id not in (    \n" +
                        "            select * from(         \n" +
                        "			select id from rfq_consolidated_mfgpn_lineitem rcl    \n" +
                        "			join Results R on R.rfqAssyID = rcl.rfqAssyID     \n" +
                        "			where rcl.rfqAssyID = rfqAssyID and rcl.id  is not NUll  and rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs    \n" +
                        "            and IFNULL(rcl.isDeleted,0) = 0)a);    \n" +
                        "  \n" +
                        "  \n" +
                        "# insert Consolidated lineItems     \n" +
                        "  \n" +
                        "        INSERT INTO `rfq_consolidated_mfgpn_lineitem`    \n" +
                        "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,    \n" +
                        "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,    \n" +
                        "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`)    \n" +
                        "		select R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,rfqAssyID `rfqAssyID`,R.`partTypeID`,    \n" +
                        "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_DATE() `createdAt`,    \n" +
                        "		userID `createdBy`, R.`numOfPosition`,    \n" +
                        "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`     \n" +
                        "        from Results R    \n" +
                        "		 left join rfq_consolidated_mfgpn_lineitem cl on cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs and cl.rfqAssyID = R.rfqAssyID and IFNULL(cl.isDeleted,0) = 0    \n" +
                        "		 where cl.id is NUll;    \n" +
                        "  \n" +
                        "  \n" +
                        "  \n" +
                        "# insert Consolidated lineItems Quentity    \n" +
                        "  \n" +
                        "        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`    \n" +
                        "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)    \n" +
                        "		select rq.id `qtyID`, cl.id `consolidateID`,1 `createdBy`,UTC_DATE() `createdAt`  from rfq_consolidated_mfgpn_lineitem cl    \n" +
                        "		join rfq_assy_quantity rq on rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0    \n" +
                        "        left join rfq_consolidate_mfgpn_lineitem_quantity clq on clq.consolidateID = cl.id and clq.qtyID = rq.id     \n" +
                        "		where cl.rfqAssyID = rfqAssyID and clq.id IS NULL;    \n" +
                        "  \n" +
                        "# Update Consilidated LineItems Quantity    \n" +
                        "  \n" +
                        "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (select * from Results) Rs, (select cl.id ,cl.qpa,cl.consolidatedLineItemIDs from rfq_consolidated_mfgpn_lineitem cl     \n" +
                        "		where cl.rfqAssyID = rfqAssyID and cl.id  is NoT NUll     \n" +
                        "            and IFNULL(cl.isDeleted,0) = 0) rcl     \n" +
                        "		set     \n" +
                        "		rq.updatedAt = UTC_TIMESTAMP(),    \n" +
                        "        rq.updatedBy = userID,    \n" +
                        "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN null WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)    \n" +
                        "		where  IFNULL(rq.isDeleted,0) = 0 and rcl.qpa != Rs.qpa and rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs and rq.consolidateID in(rcl.id);    \n" +
                        "  \n" +
                        "  \n" +
                        "  \n" +
                        "  \n" +
                        "# Update Consilidated LineItems    \n" +
                        "  \n" +
                        "        UPDATE rfq_consolidated_mfgpn_lineitem cl, (select * from Results) R     \n" +
                        "		set     \n" +
                        "		cl.isInstall = R.isInstall ,    \n" +
                        "		cl.isPurchase = R.isPurchase,    \n" +
                        "		cl.numOfPosition = R.numOfPosition,    \n" +
                        "		cl.attritionRate = R.attritionRate,    \n" +
                        "		cl.leadQty = R.leadQty,    \n" +
                        "		cl.valueAddedCost = R.valueAddedCost,    \n" +
                        "        cl.updatedAt = UTC_DATE(),    \n" +
                        "        cl.rfqLineItemID = R.rfqLineItemsID,    \n" +
                        "        cl.qpa = R.qpa,    \n" +
                        "        cl.uomID = R.uomID,    \n" +
                        "        cl.lineID = R.lineID,    \n" +
                        "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,    \n" +
                        "        cl.updatedBy = userID    \n" +
                        "		where cl.rfqAssyID = rfqAssyID and cl.id  is NoT NUll and cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs    \n" +
                        "            and IFNULL(cl.isDeleted,0) = 0;    \n" +
                        "  \n" +
                        "  \n" +
                        "# delete from consolidated Alternatepart if lineItem removed    \n" +
                        "  \n" +
                        "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap    \n" +
                        "		set     \n" +
                        "        cap.isDeleted = true,    \n" +
                        "        cap.deletedAt = UTC_DATE(),    \n" +
                        "		cap.deletedBy = userID    \n" +
                        "		where  cap.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null      \n" +
                        "        and IFNULL(cl.isDeleted,0) = 1);         \n" +
                        "  \n" +
                        "  \n" +
                        "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem    \n" +
                        "  \n" +
                        "  \n" +
                        "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate     \n" +
                        "		set     \n" +
                        "        isDeleted = true,    \n" +
                        "        deletedAt = UTC_DATE(),    \n" +
                        "		deletedBy = userID    \n" +
                        "        where id in(     \n" +
                        "        select capID from (    \n" +
                        "		select distinct(cap.id)as capID    \n" +
                        "		from rfq_lineitems_alternatepart ap     \n" +
                        "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID    \n" +
                        "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID    \n" +
                        "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID     \n" +
                        "		join rfq_parttypemst pt on pt.id = rl.partTypeID AND pt.category != 3    \n" +
                        "		where rl.rfqAssyID = rfqAssyID and cap.consolidateID IS not NULL and IFNULL(cl.isDeleted,0) = 0 and IFNULL(ap.isDeleted,0) = 1) as rcap);    \n" +
                        "  \n" +
                        "# delete Consolidated lineItems Quentity     \n" +
                        "  \n" +
                        "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (select * from rfq_assy_quantity where rfqAssyID = rfqAssyID and isDeleted = 1) rq  \n" +
                        "		set     \n" +
                        "        cq.isDeleted = true,    \n" +
                        "        cq.deletedAt = UTC_DATE(),    \n" +
                        "		cq.deletedBy = userID    \n" +
                        "		where cq.qtyID = rq.id and cq.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null      \n" +
                        "        and IFNULL(cl.isDeleted,0) = 1);         \n" +
                        "  \n" +
                        "# delete Consolidated lineitem Quantity if rfq Quantity remove  \n" +
                        "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (select * from rfq_assy_quantity q where q.rfqAssyID = rfqAssyID and IFNULL(q.isDeleted,0) = 1 ) rq  \n" +
                        "		set     \n" +
                        "        cq.isDeleted = true,    \n" +
                        "        cq.deletedAt = UTC_DATE(),    \n" +
                        "		cq.deletedBy = userID    \n" +
                        "        where cq.consolidateID in(select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = rfqAssyID and IFNULL(isDeleted, 0) = 0)      \n" +
                        "        and rq.id = cq.qtyID and IFNULL(cq.isDeleted,0)= 0;      \n" +
                        "  \n" +
                        "# delete Consolidate lineItems     \n" +
                        "  \n" +
                        "		UPDATE rfq_consolidated_mfgpn_lineitem cl    \n" +
                        "		set     \n" +
                        "        cl.isDeleted = true,    \n" +
                        "        cl.deletedAt = UTC_DATE(),    \n" +
                        "		cl.deletedBy = userID    \n" +
                        "		where  cl.rfqAssyID = rfqAssyID and cl.id is Not Null  and IFNULL(cl.isDeleted,0) = 0    \n" +
                        "		and cl.rfqLineItemID not in(select rfqLineItemsID from Results);            \n" +
                        "  \n" +
                        "# Insert Unique mfgPart to consolidated feom rfq lineitem alternate part     \n" +
                        "  \n" +
                        "        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`    \n" +
                        "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`createdBy`,`createdAt`)    \n" +
                        "		select distinct(ap.`mfgPN`),(select rcl.id from rfq_consolidated_mfgpn_lineitem rcl where rcl.rfqAssyID = rfqAssyID and rcl.lineID = rl.lineID and IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,    \n" +
                        "			ap.`mfgPNID`,ap.`mfgCodeID`,userID `createdBy`,UTC_DATE() `createdAt`    \n" +
                        "		from rfq_lineitems_alternatepart ap     \n" +
                        "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID    \n" +
                        "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID    \n" +
                        "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID    \n" +
                        "		where rl.rfqAssyID = rfqAssyID and ap.isDeleted = 0 and cap.consolidateID IS NULL and IFNULL(cl.isDeleted,0) = 0;    \n" +
                        "  \n" +
                        "    COMMIT;    \n" +
                        "    DROP TEMPORARY TABLE if exists Results;    \n" +
                        "END;  \n" +
                        /* **************************** Add Script Version -> 28-07-2018 *********************************** */
                               "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                               "VALUES (40,'1.00','V1','Create Consolidated Data - shirish '," + userid + ");"
            )
            break;
        case 40:
            allDbChangesArray.push(
            //            /* **************************** New Script -> 28-07-2018  *********************************** */
                                  "drop procedure if exists `Sproc_WOChangeHistory`;  \n" +
                    "CREATE PROCEDURE `Sproc_WOChangeHistory`(  \n" +
                    "	IN pWoID INT(11),  \n" +
                    "	IN ppageIndex INT(11),  \n" +
                    "	IN precordPerPage INT(11),  \n" +
                    "	IN pOrderBy VARCHAR(255),  \n" +
                    "	IN pWhereClause VARCHAR(21844),      \n" +
                    "    IN pwoOPID INT,  \n" +
                    "    -- If woOPID is passed then it is from operation version else from woVersion  \n" +
                    "    IN fromVersion VARCHAR(255),  \n" +
                    "    -- If woOPID is passed then it is to operation version else to woVersion  \n" +
                    "    IN toVersion VARCHAR(255)  \n" +
                    "    )  \n" +
                    "BEGIN  \n" +
                    "  \n" +
                    "	DECLARE pOffset INT(11);  \n" +
                    "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                    "  \n" +
                    "    /* [S] Get ID for given WO or WOOP versiob */  \n" +
                    "    DECLARE fromWOVersionID INT;  \n" +
                    "    DECLARE toWoVersionID INT;  \n" +
                    "    DECLARE fromOPVersionID INT;  \n" +
                    "    DECLARE toOPVersionID INT;  \n" +
                    "    IF (pwoOPID IS NULL AND fromVersion IS NOT NULL AND toVersion IS NOT NULL) THEN  \n" +
                    "		SELECT a.ID INTO fromWOVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID AND a.Colname = 'WOVERSION'  \n" +
                    "        AND a.Newval = fromVersion ORDER BY a.ID DESC LIMIT 1;  \n" +
                    "		SELECT a.ID INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID AND a.Colname = 'WOVERSION'  \n" +
                    "        AND a.Newval = toVersion ORDER BY a.ID DESC LIMIT 1;  \n" +
                    "  \n" +
                    "        SET fromWOVersionID = IFNULL(fromWOVersionID, 0);  \n" +
                    "        SET toWoVersionID = IFNULL(toWoVersionID, 0);  \n" +
                    "  \n" +
                    "	ELSEIF (pwoOPID IS NOT NULL AND fromVersion IS NOT NULL AND toVersion IS NOT NULL) THEN  \n" +
                    "		SELECT a.ID INTO fromOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'  \n" +
                    "        AND a.Newval = fromVersion ORDER BY a.ID DESC LIMIT 1;  \n" +
                    "		SELECT a.ID INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'  \n" +
                    "        AND a.Newval = toVersion ORDER BY a.ID DESC LIMIT 1;  \n" +
                    "  \n" +
                    "        SET fromOPVersionID = IFNULL(fromOPVersionID, 0);  \n" +
                    "        SET toOPVersionID = IFNULL(toOPVersionID, 0);  \n" +
                    "    END IF;  \n" +
                    "	/* [E] Get ID for given WO or WOOP versiob */  \n" +
                    "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                    "	   SELECT * FROM  \n" +
                    "		   (  \n" +
                    "			SELECT ID,Tablename,RefTransID,Colname, (CASE WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Oldval` = 0) THEN 'Draft'   \n" +
                    "		WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Oldval` = 1) THEN 'Published'   \n" +
                    "        WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Oldval` = 2) THEN 'Completed'  \n" +
                    "		WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Oldval` = 4) THEN 'Void'  \n" +
                    "        WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Oldval` = 5) THEN 'Draft Review'  \n" +
                    "		WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Oldval` = 6) THEN 'Under Termination'   \n" +
                    "        WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Oldval` = 7) THEN 'Terminated'  \n" +
                    "		WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Oldval` = 8) THEN 'Published Draft'  \n" +
                    "		ELSE Oldval END) Oldval,  \n" +
                    "        (CASE WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Newval` = 0) THEN 'Draft'   \n" +
                    "		WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Newval` = 1) THEN 'Published'   \n" +
                    "        WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Newval` = 2) THEN 'Completed'  \n" +
                    "		WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Newval` = 4) THEN 'Void'  \n" +
                    "        WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Newval` = 5) THEN 'Draft Review'  \n" +
                    "		WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Newval` = 6) THEN 'Under Termination'   \n" +
                    "        WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Newval` = 7) THEN 'Terminated'  \n" +
                    "		WHEN `dca`.`Colname`='WOSTATUS' && (`dca`.`Newval` = 8) THEN 'Published Draft'  \n" +
                    "        ELSE Newval END) Newval,updatedAt,Updatedby,  \n" +
                    "        (SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                    "            NULL opName  \n" +
                    "			FROM dataentrychange_auditlog dca  WHERE Tablename = 'WORKORDER' AND RefTransID = pWoID  \n" +
                    "			UNION ALL   \n" +
                    "  \n" +
                    "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby  \n" +
                    "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                    "            (  \n" +
                    "				SELECT CONCAT(wo.opName, ' (', wo.opNumber,')') FROM workorder_operation wo   \n" +
                    "                WHERE wo.woOPID = (SELECT woe.woOPID FROM workorder_operation_employee woe WHERE woe.woOpEmployeeID = dca.RefTransID)  \n" +
                    "            ) opName  \n" +
                    "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_EMPLOYEE'   \n" +
                    "			AND RefTransID IN (SELECT woOpEmployeeID FROM workorder_operation_employee WHERE  woID =  pWoID )			  \n" +
                    "			UNION ALL   \n" +
                    "  \n" +
                    "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby  \n" +
                    "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                    "            (  \n" +
                    "				SELECT CONCAT(wo.opName, ' (', wo.opNumber,')') FROM workorder_operation wo   \n" +
                    "                WHERE wo.woOPID = (SELECT woe.woOPID FROM workorder_operation_equipment woe WHERE woe.woOpEqpID = dca.RefTransID)  \n" +
                    "            ) opName  \n" +
                    "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_EQUIPMENT'   \n" +
                    "			AND RefTransID IN (SELECT woOpEqpID FROM workorder_operation_equipment WHERE  woID =  pWoID )  \n" +
                    "  \n" +
                    "			UNION ALL   \n" +
                    "  \n" +
                    "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby  \n" +
                    "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                    "		    (  \n" +
                    "				SELECT CONCAT(wo.opName, ' (', wo.opNumber,')') FROM workorder_operation wo   \n" +
                    "                WHERE wo.woOPID = (SELECT wop.woOPID FROM workorder_operation_part wop WHERE wop.woOPPartID = dca.RefTransID)  \n" +
                    "            ) opName  \n" +
                    "			FROM dataentrychange_auditlog dca WHERE TableName = 'WORKORDER_OPERATION_PART'   \n" +
                    "			AND RefTransID IN (SELECT woOPPartID FROM workorder_operation_part WHERE  woID =  pWoID )  \n" +
                    "  \n" +
                    "			UNION ALL   \n" +
                    "  \n" +
                    "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby  \n" +
                    "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                    "            NULL opName  \n" +
                    "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_CLUSTER'   \n" +
                    "			AND RefTransID IN (SELECT clusterID FROM workorder_cluster WHERE  woID =  pWoID )  \n" +
                    "  \n" +
                    "			UNION ALL   \n" +
                    "  \n" +
                    "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby  \n" +
                    "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                    "            NULL opName  \n" +
                    "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_CLUSTER'   \n" +
                    "			AND RefTransID IN (SELECT woClusterID FROM workorder_operation_cluster   \n" +
                    "						WHERE  clusterID IN (SELECT RefTransID  \n" +
                    "									 FROM dataentrychange_auditlog WHERE TableName = 'WORKORDER_CLUSTER'   \n" +
                    "									 AND RefTransID IN (SELECT clusterID FROM workorder_cluster WHERE  woID =  pWoID )  \n" +
                    "									 )  \n" +
                    "						)  \n" +
                    "  \n" +
                    "			UNION ALL   \n" +
                    "  \n" +
                    "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby  \n" +
                    "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                    "            NULL opName  \n" +
                    "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_DATAELEMENT'   \n" +
                    "			AND RefTransID IN (SELECT woOpDataElementID FROM workorder_operation_dataelement WHERE  woID =  pWoID )  \n" +
                    "  \n" +
                    "			UNION ALL   \n" +
                    "  \n" +
                    "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby  \n" +
                    "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                    "            (  \n" +
                    "				SELECT CONCAT(wo.opName, ' (', wo.opNumber,')') FROM workorder_operation wo   \n" +
                    "                WHERE wo.woOPID = RefTransID  \n" +
                    "            ) opName  \n" +
                    "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION'   \n" +
                    "			AND RefTransID IN (SELECT woOPID FROM workorder_operation WHERE  woID =  pWoID )  \n" +
                    "  \n" +
                    "			UNION ALL   \n" +
                    "  \n" +
                    "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby  \n" +
                    "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                    "            NULL opName  \n" +
                    "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_CERTIFICATION'   \n" +
                    "			AND RefTransID IN (SELECT woCertificationID FROM workorder_certification WHERE  woID =  pWoID )	  \n" +
                    "  \n" +
                    "			UNION ALL   \n" +
                    "  \n" +
                    "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,updatedAt,Updatedby  \n" +
                    "			,(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                    "            NULL opName  \n" +
                    "			FROM dataentrychange_auditlog dca  WHERE TableName = 'DATAELEMENT_TRANSACTIONVALUES'   \n" +
                    "			AND RefTransID IN (SELECT dataElementTransID FROM dataelement_transactionvalues  \n" +
                    "						WHERE  entityID = 7 AND RefTransID =  pWoID )  \n" +
                    "		) AS a  \n" +
                    "		WHERE CASE WHEN fromWOVersionID IS NOT NULL THEN a.ID BETWEEN fromWOVersionID AND toWoVersionID ELSE TRUE END  \n" +
                    "		AND CASE WHEN fromOPVersionID IS NOT NULL THEN a.ID BETWEEN fromOPVersionID AND toOPVersionID ELSE TRUE END;  \n" +
                    "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                    "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                    "	ELSE  \n" +
                    "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"ID DESC\") ;  \n" +
                    "	END IF;	  \n" +
                    "  \n" +
                    "  \n" +
                    "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                    "		SET pWhereClause = '1=1' ;  \n" +
                    "	END IF;	  \n" +
                    "  \n" +
                    "  \n" +
                    "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                    "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                    "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                    "	ELSE	  \n" +
                    "		SET rowNumWhere = '';  \n" +
                    "	END IF;	  \n" +
                    "  \n" +
                    "	/* to get total count of rows */  \n" +
                    "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                    "	PREPARE query1 FROM @SQLStatement1;  \n" +
                    "	EXECUTE query1;  \n" +
                    "	DEALLOCATE PREPARE query1;  \n" +
                    "  \n" +
                    "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                    "	PREPARE query2 FROM @SQLStatement2;  \n" +
                    "	EXECUTE query2;  \n" +
                    "	DEALLOCATE PREPARE query2;  \n" +
                    "  \n" +
                    "	DROP TEMPORARY TABLE Results;  \n" +
                    "  \n" +
                    "  \n" +
                    "    END;  \n" +
            //              /* **************************** Add Script Version -> 28-07-2018 *********************************** */
                           "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                           "VALUES (41,'1.00','V1','Sproc_WOchangeHistory - MONA '," + userid + ");"
                             );
            break;
        case 41:
            allDbChangesArray.push(
            /* **************************** New Script -> 28-07-2018  *********************************** */
            "UPDATE page_detail  \n" +
            "SET pageRoute='app.bom.partcosting.reviewpricing.notquoted',  \n" +
            "pageName='Not Quoted Line Items',  \n" +
            "pageURL='/notquoted/:id'  \n" +
            "WHERE pageRoute='app.bom.partcosting.reviewpricing.unquoted';  \n" +
            /* **************************** New Script -> 28-07-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetReviewPricingLineItem` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetReviewPricingLineItem`(      \n" +
            "	IN ppageIndex INT(11),      \n" +
            "	IN precordPerPage INT(11),      \n" +
            "	IN pOrderBy VARCHAR(255),      \n" +
            "	IN pWhereClause VARCHAR(21844),      \n" +
            "	IN rfqAssyID INT(11),      \n" +
            "	IN puserID INT (11),  \n" +
            "	IN pfilterBy VARCHAR(255)      \n" +
            "    )  \n" +
            "BEGIN      \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);      \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "	    SET @SQL = NULL;        \n" +
            "	    SET @SQL1 = NULL;         \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN      \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
            "		ELSE      \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;       \n" +
            "		END IF;	      \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN      \n" +
            "			SET pWhereClause = '1=1' ;      \n" +
            "		END IF;	      \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
            "		ELSE	      \n" +
            "			SET rowNumWhere = '';      \n" +
            "		END IF;	      \n" +
            "		SELECT      \n" +
            "                      GROUP_CONCAT(DISTINCT      \n" +
            "				CONCAT(      \n" +
            "					'Max((IF(ra.requestQty = ''',      \n" +
            "						ra.requestQty,      \n" +
            "					''', rq.finalPrice, null))) AS ''',      \n" +
            "						ra.requestQty,''''      \n" +
            "					)      \n" +
            "					),  \n" +
            "			GROUP_CONCAT(DISTINCT      \n" +
            "				CONCAT(      \n" +
            "					'Max((IF(ra.requestQty = ''',      \n" +
            "						ra.requestQty,      \n" +
            "					''', rq.finalPrice, null))) IS NULL'      \n" +
            "					) SEPARATOR ' OR '     \n" +
            "					)  \n" +
            "				INTO @SQL, @SQL1  \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq      \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID      \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id      \n" +
            "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;    \n" +
            "			IF(@SQL IS NOT NULL) THEN      \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS      \n" +
            "					SELECT       \n" +
            "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,        \n" +
            "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,      \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(mf.mfgCode,\"N/A\"),\"|\",rla.mfgPN)AS mfgPn       \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN mfgcodemst mf ON       \n" +
            "                               rla.mfgCodeID=mf.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',       \n" +
            "					@SQL,' FROM rfq_consolidated_mfgpn_lineitem rl      \n" +
            "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID      \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id      \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');    \n" +
            "				IF (pfilterBy = 'NotQuotedLineItems') THEN  \n" +
            "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @SQL1);  \n" +
            "				END IF;  \n" +
            "			ELSE      \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS      \n" +
            "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,      \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(mf.mfgCode,\"N/A\"),\"|\",rla.mfgPN)AS mfgPn       \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN mfgcodemst mf ON       \n" +
            "                               rla.mfgCodeID=mf.id WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl      \n" +
            "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID');	      \n" +
            "			END IF;       \n" +
            "			PREPARE stmt FROM @SQLStatement;      \n" +
            "			EXECUTE stmt;	      \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );      \n" +
            "			PREPARE query1 FROM @SQLStatement1;      \n" +
            "			EXECUTE query1;      \n" +
            "			DEALLOCATE PREPARE query1;      \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
            "			PREPARE query2 FROM @SQLStatement2;      \n" +
            "			EXECUTE query2;      \n" +
            "			DEALLOCATE PREPARE query2;      \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq      \n" +
            "  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID      \n" +
            "  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id      \n" +
            "   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);      \n" +
            "			PREPARE query3 FROM @SQLStatement3;      \n" +
            "			EXECUTE query3;      \n" +
            "			DEALLOCATE PREPARE query3;      \n" +
            "  \n" +
            "		IF (pfilterBy = 'NotQuotedLineItems') THEN  \n" +
            "			SET @SQLStatement4 = CONCAT(\"SELECT requestQty, finalPrice, unitPrice,supplier, selectedMpn, selectionMode,qtyID, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq   \n" +
            "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID WHERE consolidateID IN (select id from consolidatetemp)\");      \n" +
            "			PREPARE query4 FROM @SQLStatement4;      \n" +
            "			EXECUTE query4;      \n" +
            "			DEALLOCATE PREPARE query4;      \n" +
            "		END IF;  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;        \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 28-07-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (42,'1.00','V1','Updated unquoted to not quoted for menu and flow - Vaibhav'," + userid + ");"
            );
            break;
        case 42:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-07-2018  *********************************** */
                "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity ADD `min` INT NULL;  \n" +
                "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity ADD `mult` INT NULL;  \n" +
                "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity ADD `currentStock` INT NULL;  \n" +
                /* **************************** Add Script Version -> 30-07-2018 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                    "VALUES (43,'1.00','V1','Added min,mult and currentstock in rfq_consolidate_mfgpn_lineitem_quantity table  - Champak'," + userid + ");"
                );
            break;
        case 43:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-07-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllQtyPricing` ;  \n" +
"CREATE PROCEDURE `Sproc_GetAllQtyPricing`(	  \n" +
"	IN prfqAssyID INT(11)  \n" +
"    )  \n" +
"BEGIN  \n" +
"  \n" +
"					SELECT   rl.id, rl.lineID,rl.rfqAssyBomID, rl.rfqAssyID,rq.qtyID, ra.requestQty,   \n" +
"					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,rq.selectedMPN,  \n" +
"					rq.unitPrice,rq.supplier,  \n" +
"					(SELECT GROUP_CONCAT(IFNULL(mf.mfgCode,\"N/A\"),\"|\",rla.mfgPN)AS mfgPn   \n" +
"                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN mfgcodemst mf ON   \n" +
"                               rla.mfgCodeID=mf.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN  \n" +
"					 FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
"					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID  \n" +
"					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id  \n" +
"					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=prfqAssyID AND rl.isPurchase=1 ORDER BY rl.lineID;   \n" +
"END;  \n" +
                /* **************************** Add Script Version -> 30-07-2018 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                    "VALUES (44,'1.00','V1','Update Sproc_GetAllQtyPricing sp order by line item   - Champak'," + userid + ");"
                );
            break;

        case 44:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-07-2018  *********************************** */
              "DROP TABLE IF EXISTS `rfq_assy_quantity_price_selection_setting`;  \n" +
"  \n" +
"  \n" +
"  \n" +
"CREATE TABLE `rfq_assy_quantity_price_selection_setting` (  \n" +
"  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
"  `qtyID` int(11) NOT NULL,  \n" +
"  `stock` int(11) DEFAULT NULL,  \n" +
"  `price` int(11) DEFAULT NULL,  \n" +
"  `isCheckRequiredQty` tinyint(1) DEFAULT NULL,  \n" +
"  `isLeadTime` tinyint(1) DEFAULT NULL,  \n" +
"  `createdBy` varchar(255) NOT NULL,  \n" +
"  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
"  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
"  `updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
"  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
"  `deletedAt` datetime DEFAULT NULL,  \n" +
"  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
"  `remark` varchar(255) DEFAULT NULL,  \n" +
"  PRIMARY KEY (`id`),  \n" +
"  KEY `FK_rfq_assy_quantity_price_selection_setting_qtyID` (`qtyID`),  \n" +
"  CONSTRAINT `FK_rfq_assy_quantity_price_selection_setting_qtyID` FOREIGN KEY (`qtyID`) REFERENCES `rfq_assy_quantity` (`id`)  \n" +
") ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;  \n" +
"DROP PROCEDURE IF EXISTS `Sproc_AssyQuantityPriceSelectionSettings` ;  \n" +
"CREATE PROCEDURE `Sproc_AssyQuantityPriceSelectionSettings`(	  \n" +
"	IN ppageIndex INT(11),  \n" +
"	IN precordPerPage INT(11),  \n" +
"	IN pOrderBy VARCHAR(255),	  \n" +
"        IN pWhereClause VARCHAR(21844),  \n" +
"        IN prfqAssyID INT (11)      \n" +
"    )  \n" +
"BEGIN  \n" +
"  \n" +
"	DECLARE pOffset INT(11);  \n" +
"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
"	/* DECLARE SQLStatement varchar(255); */  \n" +
"  \n" +
"  \n" +
"  \n" +
"	CREATE TEMPORARY TABLE IF NOT EXISTS PriceSetting AS  \n" +
"      SELECT rq.id AS qtyID,rq.requestQty, rs.id,IFNULL(rs.stock,1) stock,IFNULL(rs.price,2) price,rs.isCheckRequiredQty,rs.isLeadTime,rs.remark   \n" +
"       FROM rfq_assy_quantity rq LEFT OUTER JOIN rfq_assy_quantity_price_selection_setting rs  \n" +
"       ON rq.id=rs.qtyID WHERE IFNULL(rq.isdeleted,0) = 0 AND rq.rfqAssyID=prfqAssyID;  \n" +
"  \n" +
"	IF (pOrderBy IS NOT NULL) THEN  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
"	ELSE  \n" +
"		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id ASC\") ;  \n" +
"	END IF;	  \n" +
"  \n" +
"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
"  \n" +
"		SET pWhereClause = '1=1' ;  \n" +
"	END IF;	  \n" +
"  \n" +
"  \n" +
"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
"		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
"	ELSE	  \n" +
"		SET rowNumWhere = '';  \n" +
"	END IF;	  \n" +
"  \n" +
"  \n" +
"	/* to get total count of rows */  \n" +
"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PriceSetting where \", pWhereClause );      \n" +
"	PREPARE query1 FROM @SQLStatement1;  \n" +
"	EXECUTE query1;  \n" +
"	DEALLOCATE PREPARE query1;  \n" +
"  \n" +
"	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PriceSetting where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
"	PREPARE query2 FROM @SQLStatement2;  \n" +
"	EXECUTE query2;  \n" +
"	DEALLOCATE PREPARE query2;  \n" +
"  \n" +
"	DROP TEMPORARY TABLE PriceSetting;  \n" +
"  \n" +
"  \n" +
"    END;  \n" +
                /* **************************** Add Script Version -> 30-07-2018 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                    "VALUES (45,'1.00','V1','Create table for rfq_assy_quantity_price_selection_setting,create sp Sproc_AssyQuantityPriceSelectionSettings    - Champak'," + userid + ");"
                );
            break;
        case 45:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2018  *********************************** */
                "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity CHANGE COLUMN `finalPrice` `finalPrice` DECIMAL(16,6) NULL;  \n" +
                "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity CHANGE COLUMN `unitPrice` `unitPrice` DECIMAL(16,6) NULL;  \n" +
                /* **************************** Add Script Version -> 31-07-2018 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                    "VALUES (46,'1.00','V1','Change decimal field for priicng in rfq_consolidate_mfgpn_lineitem_quantity- Champak'," + userid + ");"
                );
            break;
        case 46:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2018  *********************************** */
                "delete from feature_page_details WHERE pageID = (select pageID from page_detail where pageName = 'Scan Badge');  \n" +
                "delete from rolepagedetail WHERE PageID = (select pageID from page_detail where pageName = 'Scan Badge');  \n" +
                "delete from userpagedetail WHERE pageID = (select pageID from page_detail where pageName = 'Scan Badge');  \n" +
                "delete from page_detail where pageName = 'Scan Badge';   \n" +
                "  \n" +
                "  \n" +
                "UPDATE `page_detail`  \n" +
                "SET `pageRoute` = 'app.scanbadge.scan', `pageURL` = '/scan', `hasChild` = 0, `updatedAt` = UTC_TIMESTAMP(), `updatedBy` = 1, pageName = 'Scan Badge'  \n" +
                "WHERE pageName = 'Scan Badges';  \n" +

                /* **************************** Add Script Version -> 31-07-2018 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                    "VALUES (47,'1.00','V1','Remove Scan Badge page from sub menu  - shirish'," + userid + ");"
                );
            break;
        case 47:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2018  *********************************** */
                "delete from feature_page_details WHERE pageID = (select pageID from page_detail where pageName = 'View Transaction wise WO OP Data Fields');  \n" +
				"delete from rolepagedetail WHERE PageID = (select pageID from page_detail where pageName = 'View Transaction wise WO OP Data Fields');  \n" +
				"delete from userpagedetail WHERE pageID = (select pageID from page_detail where pageName = 'View Transaction wise WO OP Data Fields');  \n" +
				"delete from page_detail where pageName = 'View Transaction wise WO OP Data Fields';  \n" +

                /* **************************** Add Script Version -> 31-07-2018 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                    "VALUES (48,'1.00','V1','Remove View Transaction wise WO OP Data Fields UnUsed page detail   - shirish'," + userid + ");"
                );
            break;

        case 48:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2018  *********************************** */
				"update page_detail   \n" +
				"set pageName = 'Planned BOM', pageRoute = 'app.bom.plannedbom',pageURL = '/planned/:id'   \n" +
				"where pageName = 'Verify BOM';  \n" +
				"DROP FUNCTION IF EXISTS `fun_getQPAOfLineItems`;  \n" +
				"CREATE FUNCTION `fun_getQPAOfLineItems`(  \n" +
				"	pLineID int(11),  \n" +
				"    pRFQAssyID int(11)  \n" +
				") RETURNS double  \n" +
				"BEGIN  \n" +
				"    DECLARE QTY int;  \n" +
				"    DECLARE pLevel int;  \n" +
				"    DECLARE pRefRfqLineID int;  \n" +
				"    DECLARE pQPA int;  \n" +
				"    DECLARE totalQPA int;  \n" +
				"  \n" +
				"	set pRefRfqLineID = pLineID;  \n" +
				"	WHILE(pRefRfqLineID IS NOT NULL) DO  \n" +
				"    		SELECT qpa, level, refRFQLineItemID INTO pQPA,pLevel,pRefRfqLineID  \n" +
				"			FROM rfq_lineitems    \n" +
				"			WHERE rfqAssyID = pRFQAssyID AND lineID = pRefRfqLineID AND IFNULL(isDeleted,0) = 0;  \n" +
				"  \n" +
				"   		IF(pLevel > 1) THEN  \n" +
				"				IF(totalQPA IS NULL) THEN  \n" +
				"					SET totalQPA = pQPA;  \n" +
				"                ELSE  \n" +
				"  \n" +
				"					SET totalQPA = totalQPA * pQPA;  \n" +
				"  \n" +
				"				END IF;  \n" +
				"				set pRefRfqLineID  = pRefRfqLineID;  \n" +
				"  \n" +
				"		ELSE  \n" +
				"  \n" +
				"           	IF(totalQPA IS NULL) THEN  \n" +
				"					SET QTY = pQPA;  \n" +
				"		        ELSE  \n" +
				"					SET QTY = totalQPA * pQPA;  \n" +
				"			END IF;		  \n" +
				"		END IF;  \n" +
				"  \n" +
				"	END WHILE;  \n" +
				"  RETURN QTY;  \n" +
				"END;  \n" +
                /* **************************** Add Script Version -> 31-07-2018 *********************************** */
                    "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                    "VALUES (49,'1.00','V1','QPA count based on level removed LeadQty and overrange% - shirish'," + userid + ");"
                );
            break;
        case 49:
            allDbChangesArray.push(
            //            /* **************************** New Script -> 31-07-2018  *********************************** */
                                 "create table help_blog(  \n" +
                        "id int primary key auto_increment,  \n" +
                        "pageID int not null,  \n" +
                        "title varchar(500) not null,  \n" +
                        "description longtext not null,  \n" +
                        "version int  null,  \n" +
                        "isPublished tinyint(1) not null Default '0' ,  \n" +
                        "publishedDate datetime,  \n" +
                        "isDeleted tinyint(1) NOT NULL DEFAULT '0',  \n" +
                        "createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                        "updatedAt datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                        "deletedAt datetime DEFAULT NULL,  \n" +
                        "createdBy varchar(255) NOT NULL,  \n" +
                        "updatedBy varchar(255) DEFAULT NULL,  \n" +
                        "deletedBy varchar(255) DEFAULT NULL,  \n" +
                        "FOREIGN KEY (pageID) REFERENCES page_detail(pageID)  \n" +
                        ");  \n" +
            //              /* **************************** Add Script Version -> 31-07-2018 *********************************** */
                     "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                          "VALUES (50,'1.00','V1',' create HelpBlog table - Mona '," + userid + ");"
                            );
            break;
        case 50:
            allDbChangesArray.push(
                    /* **************************** New Script -> 01-08-2018  *********************************** */
                    "DROP PROCEDURE IF EXISTS `Sproc_checkDelete`;  \n" +
                    "CREATE PROCEDURE `Sproc_checkDelete`(        \n" +
                    "	IN tableName VARCHAR(255),        \n" +
                    "	IN IDs LONGTEXT,        \n" +
                    "	IN deletedBy INT,        \n" +
                    "	IN entityID VARCHAR(255),        \n" +
                    "	IN refrenceIDs LONGTEXT        \n" +
                    "    )  \n" +
                    "BEGIN        \n" +
                    "	DECLARE vWoID1 INT(11);        \n" +
                    "	DECLARE vOpID1 INT(11);        \n" +
                    "	DECLARE vSerialNo1 VARCHAR(50);        \n" +
                    "	DECLARE vProdStatus1 VARCHAR(5);        \n" +
                    "	DECLARE vWoTransID1 INT(11);        \n" +
                    "	DECLARE vQty1 INT(11);        \n" +
                    "	DECLARE vOpID2 INT(11);        \n" +
                    "	DECLARE vProdstatus2 VARCHAR(5);        \n" +
                    "  \n" +
                    "IF tableName='employees' THEN        \n" +
                    " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)        \n" +
                    "	   UNION ALL                              \n" +
                    "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)        \n" +
                    "           UNION ALL         \n" +
                    "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND er.finalStatusInit IN(',IDs,') AND er.initiateBy IN(',IDs,') LIMIT 1)        \n" +
                    "	   UNION ALL        \n" +
                    "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)        \n" +
                    "	UNION ALL        \n" +
                    "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)        \n" +
                    "	  UNION ALL        \n" +
                    "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)        \n" +
                    "	  UNION ALL        \n" +
                    "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)        \n" +
                    "	  UNION ALL        \n" +
                    "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)        \n" +
                    "	  UNION ALL        \n" +
                    "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)        \n" +
                    "	 UNION ALL        \n" +
                    "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)        \n" +
                    "	  UNION ALL        \n" +
                    "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND wr.reqGenEmployeeID IN(',IDs,') and wr.woAuthorID IN(',IDs,') and wr.accRejBy IN(',IDs,') LIMIT 1)        \n" +
                    "	  UNION ALL         \n" +
                    "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND wr.commentemployeeID IN(',IDs,') AND wr.accRejBy IN(',IDs,') LIMIT 1)        \n" +
                    "	  UNION ALL        \n" +
                    "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND wr.employeeID IN(',IDs,') AND wr.requstedEmployeeID IN(',IDs,') LIMIT 1)         \n" +
                    "	  UNION ALL            \n" +
                    "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE wt.checkinEmployeeID IN(',IDs,') AND wt.checkoutEmployeeID IN(',IDs,') LIMIT 1)        \n" +
                    "	  UNION ALL           \n" +
                    "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)        \n" +
                    "	 UNION ALL         \n" +
                    "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)        \n" +
                    "	 UNION ALL         \n" +
                    "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)        \n" +
                    "	 UNION ALL         \n" +
                    "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND wthu.holdEmployeeId IN(',IDs,') and wthu.unHoldEmployeeId IN(',IDs,') LIMIT 1)        \n" +
                    "	UNION ALL         \n" +
                    "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)        \n" +
                    "	 UNION ALL         \n" +
                    "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)        \n" +
                    "	 UNION ALL         \n" +
                    "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)        \n" +
                    "	 UNION ALL         \n" +
                    "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND holdEmployeeId IN(',IDs,') AND unHoldEmployeeId IN(',IDs,')LIMIT 1)        \n" +
                    "  \n" +
                    "        ) q');        \n" +
                    "    PREPARE stmt FROM @SQL;        \n" +
                    "    EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempEmp)=0 THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');        \n" +
                    "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');        \n" +
                    "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');        \n" +
                    "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');        \n" +
                    "  \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			PREPARE stmt2 FROM @SQL2;        \n" +
                    "			PREPARE stmt3 FROM @SQL3;        \n" +
                    "			PREPARE stmt4 FROM @SQL4;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "			EXECUTE stmt2;        \n" +
                    "			EXECUTE stmt3;        \n" +
                    "			EXECUTE stmt4;        \n" +
                    "			SELECT         \n" +
                    "    *        \n" +
                    "FROM        \n" +
                    "    tempEmp;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempEmp;        \n" +
                    "		END IF;        \n" +
                    "  \n" +
                    "    DROP TABLE tempEmp;        \n" +
                    "END IF;        \n" +
                    "IF tableName='eco_type_category' THEN        \n" +
                    "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)         \n" +
                    "	  ) q');        \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT         \n" +
                    "    *        \n" +
                    "FROM        \n" +
                    "    tempEcoTypeCategory;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempEcoTypeCategory;        \n" +
                    "		END IF;        \n" +
                    "    DROP TABLE tempEcoTypeCategory;          \n" +
                    "END IF;        \n" +
                    "IF tableName='eco_type_values' THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)        \n" +
                    "	  ) q');        \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT         \n" +
                    "    *        \n" +
                    "FROM        \n" +
                    "    tempEcoTypeValues;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempEcoTypeValues;        \n" +
                    "		END IF;        \n" +
                    "    DROP TABLE tempEcoTypeValues;          \n" +
                    "END IF;        \n" +
                    "IF tableName='customers' THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL         \n" +
                    "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL         \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)        \n" +
                    "	  ) q');        \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		        \n" +
                    "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');        \n" +
                    "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			PREPARE stmt2 FROM @SQL2;        \n" +
                    "			PREPARE stmt3 FROM @SQL3;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "			EXECUTE stmt2;        \n" +
                    "			EXECUTE stmt3;        \n" +
                    "  \n" +
                    "			SELECT         \n" +
                    "    *        \n" +
                    "FROM        \n" +
                    "    tempCustomers;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempCustomers;        \n" +
                    "		END IF;        \n" +
                    "    DROP TABLE tempCustomers;          \n" +
                    "END IF;        \n" +
                    "IF tableName='certificate_standards' THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)        \n" +
                    "  \n" +
                    "	  ) q');        \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		        \n" +
                    "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');        \n" +
                    "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			PREPARE stmt2 FROM @SQL2;        \n" +
                    "			PREPARE stmt3 FROM @SQL3;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "			EXECUTE stmt2;        \n" +
                    "			EXECUTE stmt3;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempCertificateStandards;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempCertificateStandards;        \n" +
                    "		END IF;        \n" +
                    "    DROP TABLE tempCertificateStandards;          \n" +
                    "END IF;        \n" +
                    "IF tableName='department' THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)        \n" +
                    "  \n" +
                    "	  ) q');        \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		        \n" +
                    "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');        \n" +
                    "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			PREPARE stmt2 FROM @SQL2;        \n" +
                    "			PREPARE stmt3 FROM @SQL3;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "			EXECUTE stmt2;        \n" +
                    "			EXECUTE stmt3;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempDepartment;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempDepartment;        \n" +
                    "		END IF;        \n" +
                    "    DROP TABLE tempDepartment;          \n" +
                    "END IF;        \n" +
                    "IF tableName='genericcategory' THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND eqpGroupID IN(',IDs,') AND eqpSubGroupID IN(',IDs,') AND eqpTypeID IN(',IDs,') AND eqpPossessionID IN(',IDs,') AND eqpOwnershipTypeID IN(',IDs,') AND locationTypeID IN(',IDs,')   LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)        \n" +
                    "  \n" +
                    "	  ) q');        \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT         \n" +
                    "    *        \n" +
                    "FROM        \n" +
                    "    tempGenericCategory;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempGenericCategory;        \n" +
                    "		END IF;        \n" +
                    "    DROP TABLE tempGenericCategory;          \n" +
                    "END IF;        \n" +
                    "IF tableName='equipment' THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)        \n" +
                    "  \n" +
                    "	  ) q');        \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN        \n" +
                    "			IF entityID IS NOT NULL THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		        \n" +
                    "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');        \n" +
                    "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			PREPARE stmt2 FROM @SQL2;        \n" +
                    "			PREPARE stmt3 FROM @SQL3;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "			EXECUTE stmt2;        \n" +
                    "			EXECUTE stmt3;        \n" +
                    "  \n" +
                    "			ELSE        \n" +
                    "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "			END IF;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempEquipment;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempEquipment;        \n" +
                    "		END IF;        \n" +
                    "    DROP TABLE tempEquipment;          \n" +
                    "END IF;        \n" +
                    "IF tableName='parts' THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)        \n" +
                    "	  ) q');        \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempParts)=0 THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempParts;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempParts;        \n" +
                    "		END IF;        \n" +
                    "    DROP TABLE tempParts;          \n" +
                    "END IF;        \n" +
                    "IF tableName='master_templates' THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)        \n" +
                    "	  ) q');        \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempMasterTemplate;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempMasterTemplate;        \n" +
                    "		END IF;        \n" +
                    "    DROP TABLE tempMasterTemplate;          \n" +
                    "END IF;        \n" +
                    "IF tableName='operations' THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)        \n" +
                    "  \n" +
                    "	  ) q');        \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempOperations)=0 THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		        \n" +
                    "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');        \n" +
                    "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			PREPARE stmt2 FROM @SQL2;        \n" +
                    "			PREPARE stmt3 FROM @SQL3;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "			EXECUTE stmt2;        \n" +
                    "			EXECUTE stmt3;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempOperations;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempOperations;        \n" +
                    "		END IF;        \n" +
                    "    DROP TABLE tempOperations;          \n" +
                    "END IF;        \n" +
                    "IF tableName='workorder' THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL		        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)        \n" +
                    "  \n" +
                    "	  ) q');        \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN        \n" +
                    "  \n" +
                    "			/* [S] - Add Time line log for delete work order */        \n" +
                    "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;         \n" +
                    "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");        \n" +
                    "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			        \n" +
                    "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			        \n" +
                    "			/* [E] - Add Time line log for delete work order */			        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update workorder set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		        \n" +
                    "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');        \n" +
                    "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');        \n" +
                    "			SET @SQl4 = CONCAT('update workorder_certification set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			PREPARE stmt2 FROM @SQL2;        \n" +
                    "			PREPARE stmt3 FROM @SQL3;        \n" +
                    "			PREPARE stmt4 FROM @SQL4;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "			EXECUTE stmt2;        \n" +
                    "			EXECUTE stmt3;        \n" +
                    "			EXECUTE stmt4;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempWorkorder;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempWorkorder;        \n" +
                    "		END IF;        \n" +
                    "    DROP TABLE tempWorkorder;          \n" +
                    "END IF;        \n" +
                    "IF tableName='roles' THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)        \n" +
                    "         UNION ALL        \n" +
                    "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)        \n" +
                    "         UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');        \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempRoles)=0 THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempRoles;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempRoles;        \n" +
                    "		END IF;        \n" +
                    "    DROP TABLE tempRoles;          \n" +
                    "END IF;        \n" +
                    "IF tableName='standard_class' THEN        \n" +
                    " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND classIDs IN(',IDs,') LIMIT 1)        \n" +
                    "	  ) q');        \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempStandardClass;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempStandardClass;        \n" +
                    "		END IF;        \n" +
                    "    DROP TABLE tempStandardClass;          \n" +
                    "END IF;        \n" +
                    "IF tableName='dataelement' THEN        \n" +
                    "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		        \n" +
                    "		UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)        \n" +
                    "	  ) q');        \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt2 FROM @SQL2;        \n" +
                    "			EXECUTE stmt2;        \n" +
                    "  \n" +
                    "  \n" +
                    "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)        \n" +
                    "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated        \n" +
                    "			FROM dataelement dl WHERE dl.dataElementID = IDs;        \n" +
                    "  \n" +
                    "  \n" +
                    "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */        \n" +
                    "  \n" +
                    "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"         \n" +
                    "							where type IN(''',IDs,''') and deletedAt IS NULL ');		        \n" +
                    "				PREPARE stmt3 FROM @SQL3;        \n" +
                    "				EXECUTE stmt3;        \n" +
                    "  \n" +
                    "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */        \n" +
                    "  \n" +
                    "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */        \n" +
                    "  \n" +
                    "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs         \n" +
                    "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN        \n" +
                    "  \n" +
                    "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"         \n" +
                    "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'         \n" +
                    "								AND isAutoIncrement = 1 AND deletedAt IS NULL)        \n" +
                    "							 and deletedAt IS NULL ');		        \n" +
                    "					     PREPARE stmt4 FROM @SQL4;        \n" +
                    "				             EXECUTE stmt4;        \n" +
                    "					END IF;	        \n" +
                    "				END IF;        \n" +
                    "  \n" +
                    "  \n" +
                    "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN        \n" +
                    "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)         \n" +
                    "						    AND deletedAt IS NULL');		        \n" +
                    "				PREPARE stmt5 FROM @SQL5;        \n" +
                    "				EXECUTE stmt5;        \n" +
                    "  \n" +
                    "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"         \n" +
                    "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		        \n" +
                    "				PREPARE stmt6 FROM @SQL6;        \n" +
                    "				EXECUTE stmt6;        \n" +
                    "  \n" +
                    "  \n" +
                    "			END IF;        \n" +
                    "  \n" +
                    "  \n" +
                    "			SELECT * FROM tempDataElement;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempDataElement;        \n" +
                    "		END IF;        \n" +
                    "    DROP TABLE tempDataElement;          \n" +
                    "  \n" +
                    "END IF;        \n" +
                    "IF tableName='workorder_preprogcomp' THEN        \n" +
                    "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM        \n" +
                    "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg        \n" +
                    "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND        \n" +
                    "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator        \n" +
                    "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "    SELECT * FROM  tempComponent;        \n" +
                    "    SELECT TotalCount FROM  tempComponent;        \n" +
                    "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			        \n" +
                    "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt2 FROM @SQL2;        \n" +
                    "			EXECUTE stmt2;        \n" +
                    "  \n" +
                    "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where         \n" +
                    "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator        \n" +
                    "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt3 FROM @SQL3;        \n" +
                    "			EXECUTE stmt3;        \n" +
                    "		SELECT         \n" +
                    "			*        \n" +
                    "		FROM        \n" +
                    "			tempComponent;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempComponent;        \n" +
                    "		END IF;        \n" +
                    "    DROP TABLE tempComponent;          \n" +
                    "END IF;        \n" +
                    "IF tableName='component' THEN        \n" +
                    "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)        \n" +
                    "		 UNION ALL        \n" +
                    "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)        \n" +
                    "  \n" +
                    "	  ) q');        \n" +
                    "	  PREPARE stmt FROM @SQL;        \n" +
                    "	   EXECUTE stmt;        \n" +
                    "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN        \n" +
                    "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempComponent;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempComponent;        \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempComponent;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"workorder_cluster\" THEN         \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)        \n" +
                    "		      ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN        \n" +
                    "  \n" +
                    "		/* [S] - Add Time line log for delete cluster */        \n" +
                    "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster        \n" +
                    "		WHERE clusterID = IDs AND deletedAt IS NULL;        \n" +
                    "		SELECT woNumber INTO @lvWoNumber FROM workorder        \n" +
                    "		WHERE woID = @lvWoID AND deletedAt IS NULL ;        \n" +
                    "  \n" +
                    "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");        \n" +
                    "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	        \n" +
                    "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		        \n" +
                    "		/* [E] - Add Time line log for delete cluster */        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update workorder_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempWorkorderCluster;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempWorkorderCluster;        \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempWorkorderCluster;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"workorder_operation\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)        \n" +
                    "			 UNION ALL        \n" +
                    "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		         \n" +
                    "		      ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN        \n" +
                    "			 /* [S] - Add Time line log for delete work order operation */        \n" +
                    "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName        \n" +
                    "			FROM workorder_operation         \n" +
                    "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;         \n" +
                    "  \n" +
                    "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;        \n" +
                    "  \n" +
                    "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");        \n" +
                    "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	        \n" +
                    "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		        \n" +
                    "			/* [E] - Add Time line log for delete work order operation */        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update workorder_operation set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');        \n" +
                    "		SET @SQl2 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');        \n" +
                    "		SET @SQl3 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');        \n" +
                    "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');        \n" +
                    "		SET @SQl5 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');        \n" +
                    "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');        \n" +
                    "		SET @SQl7 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		        \n" +
                    "  \n" +
                    "		-- Added for update verify workorder status again after changes in workorder operation        \n" +
                    "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;        \n" +
                    "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		        \n" +
                    "		-- Added for update verify workorder status again after changes in workorder operation        \n" +
                    "  \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			PREPARE stmt2 FROM @SQL2;        \n" +
                    "			PREPARE stmt3 FROM @SQL3;        \n" +
                    "			PREPARE stmt4 FROM @SQL4;        \n" +
                    "			PREPARE stmt5 FROM @SQL5;        \n" +
                    "			PREPARE stmt6 FROM @SQL6;        \n" +
                    "			PREPARE stmt7 FROM @SQl7;        \n" +
                    "			PREPARE stmt8 FROM @SQl7;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "			EXECUTE stmt2;        \n" +
                    "			EXECUTE stmt3;        \n" +
                    "			EXECUTE stmt4;        \n" +
                    "			EXECUTE stmt5;        \n" +
                    "			EXECUTE stmt6;        \n" +
                    "			EXECUTE stmt7;        \n" +
                    "			EXECUTE stmt8;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempWorkorderOperation;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempWorkorderOperation;        \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempWorkorderOperation;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"workorder_operation_part\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)        \n" +
                    "		      ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN        \n" +
                    "  \n" +
                    "		/* [S] - Add Time line log for delete parts from work order */        \n" +
                    "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName        \n" +
                    "		FROM workorder_operation         \n" +
                    "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;         \n" +
                    "  \n" +
                    "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;        \n" +
                    "  \n" +
                    "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts        \n" +
                    "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;         \n" +
                    "  \n" +
                    "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");        \n" +
                    "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	        \n" +
                    "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */        \n" +
                    "		/* [E] - Add Time line log for delete parts from work order */        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempWorkorderPart;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempWorkorderPart;        \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempWorkorderPart;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"workorder_operation_equipment\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)        \n" +
                    "		      ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN        \n" +
                    "  \n" +
                    "		/* [S] - Add Time line log for delete Equipment from work order */        \n" +
                    "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName        \n" +
                    "		FROM workorder_operation         \n" +
                    "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;         \n" +
                    "  \n" +
                    "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	        \n" +
                    "  \n" +
                    "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment        \n" +
                    "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;         \n" +
                    "  \n" +
                    "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");        \n" +
                    "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	        \n" +
                    "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		        \n" +
                    "		/* [E] -  Add Time line log for delete Equipment from work order */        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');        \n" +
                    "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			PREPARE stmt2 FROM @SQL2;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "			EXECUTE stmt2;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempWorkorderEquipment;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempWorkorderEquipment;        \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempWorkorderEquipment;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"workorder_operation_employee\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)        \n" +
                    "		      ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN        \n" +
                    "  \n" +
                    "		/* [S] - Add Time line log for delete Employees from work order */        \n" +
                    "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName        \n" +
                    "		FROM workorder_operation         \n" +
                    "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;         \n" +
                    "  \n" +
                    "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;        \n" +
                    "  \n" +
                    "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees        \n" +
                    "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;         \n" +
                    "  \n" +
                    "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");        \n" +
                    "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	        \n" +
                    "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		        \n" +
                    "		/* [E] -  Add Time line log for delete Employee from work order */        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempWorkorderEmployee;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempWorkorderEmployee;        \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempWorkorderEmployee;        \n" +
                    "  \n" +
                    "END IF;        \n" +
                    "IF tableName=\"workorder_operation_cluster\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)        \n" +
                    "		      ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN        \n" +
                    "  \n" +
                    "		/* [S] - Add Time line log for delete operations from cluster */        \n" +
                    "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName        \n" +
                    "		FROM workorder_operation         \n" +
                    "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;         \n" +
                    "  \n" +
                    "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;        \n" +
                    "  \n" +
                    "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster        \n" +
                    "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;         \n" +
                    "  \n" +
                    "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");        \n" +
                    "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	        \n" +
                    "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		        \n" +
                    "		/* [E] -  Add Time line log for delete operations from cluster */		        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		        \n" +
                    "  \n" +
                    "		-- Added for update verify workorder status again after changes in workorder operation        \n" +
                    "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;        \n" +
                    "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		        \n" +
                    "		-- Added for update verify workorder status again after changes in workorder operation        \n" +
                    "  \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			PREPARE stmt2 FROM @SQL2;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "			EXECUTE stmt2;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempWorkorderOperationCluster;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempWorkorderOperationCluster;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempWorkorderOperationCluster;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"entity\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)        \n" +
                    "		     UNION ALL        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)        \n" +
                    "		     UNION ALL        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)        \n" +
                    "		    UNION ALL        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)        \n" +
                    "		      ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempEntity)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempEntity;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempEntity;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempEntity;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"salesordermst\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)        \n" +
                    "		      ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempSalesOrderMst;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempSalesOrderMst;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempSalesOrderMst;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"mfgcodemst\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)        \n" +
                    "		      ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempMFGCodeMst;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempMFGCodeMst;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempMFGCodeMst;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"dataelement_transactionvalues_manual\" THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"         \n" +
                    "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)        \n" +
                    "				and deletedAt IS NULL');		        \n" +
                    "			PREPARE stmt2 FROM @SQL2;        \n" +
                    "			EXECUTE stmt2;        \n" +
                    "  \n" +
                    "  \n" +
                    "END IF;        \n" +
                    "IF tableName=\"shippedassembly\" THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "  \n" +
                    "END IF;        \n" +
                    "IF tableName=\"assemblymst\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)        \n" +
                    "		     UNION ALL        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)        \n" +
                    "		     UNION ALL        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)        \n" +
                    "		     UNION ALL        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)        \n" +
                    "		    UNION ALL        \n" +
                    "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)        \n" +
                    "		      ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempassemblymst;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempassemblymst;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempassemblymst;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"assembly_revisionmst\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND fromRevisionID IN(',IDs,') AND toRevisionID IN(',IDs,')  LIMIT 1)        \n" +
                    "		     UNION ALL        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)        \n" +
                    "		     UNION ALL        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)        \n" +
                    "		     UNION ALL        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)        \n" +
                    "		    UNION ALL        \n" +
                    "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)        \n" +
                    "		      ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempassembly_revisionmst;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempassembly_revisionmst;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempassembly_revisionmst;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"workorder_trans_serialno\" THEN        \n" +
                    "  \n" +
                    "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1         \n" +
                    "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;        \n" +
                    "  \n" +
                    "  \n" +
                    "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)        \n" +
                    "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)         \n" +
                    "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1         \n" +
                    "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;        \n" +
                    "  \n" +
                    "	/* condition to check total serials of type greater than actual production qty */        \n" +
                    "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1        \n" +
                    "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)         \n" +
                    "		> IFNULL(vQty1,0)) THEN        \n" +
                    "  \n" +
                    "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */        \n" +
                    "		IF(vQty1 IS NULL OR vQty1 = 0) THEN         \n" +
                    "  \n" +
                    "			/* condition to check curr opis and status match with given delete serial */        \n" +
                    "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1        \n" +
                    "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN        \n" +
                    "  \n" +
                    "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()        \n" +
                    "				WHERE woTransSerialID = IDs;	        \n" +
                    "  \n" +
                    "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno         \n" +
                    "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL        \n" +
                    "				ORDER BY woTransSerialID DESC LIMIT 1;        \n" +
                    "  \n" +
                    "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2        \n" +
                    "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	        \n" +
                    "  \n" +
                    "			ELSE         \n" +
                    "				SELECT 'not allowed';        \n" +
                    "			END IF;        \n" +
                    "  \n" +
                    "  \n" +
                    "		ELSE         \n" +
                    "  \n" +
                    "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()        \n" +
                    "			WHERE woTransSerialID = IDs;	        \n" +
                    "  \n" +
                    "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno         \n" +
                    "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL        \n" +
                    "			ORDER BY woTransSerialID DESC LIMIT 1;        \n" +
                    "  \n" +
                    "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2        \n" +
                    "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	        \n" +
                    "  \n" +
                    "		END IF;	        \n" +
                    "  \n" +
                    "  \n" +
                    "	ELSE         \n" +
                    "		SELECT 'not allowed';		        \n" +
                    "	END IF;	        \n" +
                    "  \n" +
                    "  \n" +
                    "END IF;        \n" +
                    "IF tableName=\"br_label_template\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)        \n" +
                    "		      ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempbr_label_template;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempbr_label_template;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempbr_label_template;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"measurement_types\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)        \n" +
                    "		     UNION ALL        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempMeasurement_types;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempMeasurement_types;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempMeasurement_types;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"uoms\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg         \n" +
                    "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)        \n" +
                    "            UNION ALL        \n" +
                    "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg         \n" +
                    "            FROM unit_detail_formula WHERE deletedAt IS NULL AND unitID IN (',IDs,')  or toUnitID IN (',IDs,')  LIMIT 1)) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempUOMs;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempUOMs;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempUOMs;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"jobtypes\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg         \n" +
                    "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempJobTypess;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempJobTypess;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempJobTypess;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"ordertype\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg         \n" +
                    "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempOrderTypes;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempOrderTypes;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempOrderTypes;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"reasonmst\" THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "END IF;        \n" +
                    "IF tableName='component_sid_stock' THEN	        \n" +
                    "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)        \n" +
                    "			UNION ALL        \n" +
                    "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		            \n" +
                    "		    ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempcomponentsidstock;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempcomponentsidstock;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempcomponentsidstock;         \n" +
                    "  \n" +
                    "END IF;        \n" +
                    "IF tableName='component_sid_stock_dataelement_values' THEN	        \n" +
                    "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "END IF;        \n" +
                    "IF tableName='chart_templatemst' THEN	        \n" +
                    "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)        \n" +
                    "		    ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempcharttemplatemst;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempcharttemplatemst;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempcharttemplatemst;         \n" +
                    "  \n" +
                    "END IF;        \n" +
                    "IF tableName=\"shipping_request\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg         \n" +
                    "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)        \n" +
                    "            UNION ALL        \n" +
                    "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg         \n" +
                    "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempShippingRequest;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempShippingRequest;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempShippingRequest;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"chart_rawdata_category\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg         \n" +
                    "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)        \n" +
                    "            UNION ALL        \n" +
                    "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg         \n" +
                    "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempChartRawdataCategory;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempChartRawdataCategory;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempChartRawdataCategory;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"component_standard\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg         \n" +
                    "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempcomponentStandard;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempcomponentStandard;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempcomponentStandard;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"component_standard_class\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg         \n" +
                    "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');        \n" +
                    "           /*  UNION ALL        \n" +
                    "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg         \n" +
                    "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt2 FROM @SQL2;        \n" +
                    "			EXECUTE stmt2;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempcomponentStandardClass;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempcomponentStandardClass;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempcomponentStandardClass;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"rfq_lineitems\" THEN        \n" +
                    "		SELECT 0 TotalCount, '' Message;        \n" +
                    "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "		PREPARE stmt1 FROM @SQL1;        \n" +
                    "		EXECUTE stmt1;                    \n" +
                    "END IF;        \n" +
                    "IF tableName=\"requirement\" THEN        \n" +
                    "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg         \n" +
                    "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM temprequirements)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM temprequirements;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM temprequirements;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE temprequirements;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"workorder_trans_packagingdetail\" THEN        \n" +
                    "		SELECT 0 TotalCount, '' Message;        \n" +
                    "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "		PREPARE stmt1 FROM @SQL1;        \n" +
                    "		EXECUTE stmt1;                    \n" +
                    "END IF;        \n" +
                    "IF tableName=\"customer_addresses\" THEN        \n" +
                    "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)        \n" +
                    "			UNION ALL        \n" +
                    "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg         \n" +
                    "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM tempcustomer_addresses;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM tempcustomer_addresses;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE tempcustomer_addresses;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"rfqforms\" THEN        \n" +
                    "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg         \n" +
                    "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in         \n" +
                    "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');        \n" +
                    "  \n" +
                    "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in         \n" +
                    "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		        \n" +
                    "  \n" +
                    "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in         \n" +
                    "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		        \n" +
                    "  \n" +
                    "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in         \n" +
                    "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		        \n" +
                    "  \n" +
                    "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in         \n" +
                    "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');        \n" +
                    "  \n" +
                    "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		        \n" +
                    "  \n" +
                    "            PREPARE stmt1 FROM @SQL1;        \n" +
                    "			PREPARE stmt2 FROM @SQL2;        \n" +
                    "            PREPARE stmt3 FROM @SQL3;        \n" +
                    "			PREPARE stmt4 FROM @SQL4;        \n" +
                    "            PREPARE stmt5 FROM @SQL5;        \n" +
                    "			PREPARE stmt6 FROM @SQL6;        \n" +
                    "  \n" +
                    "			EXECUTE stmt1;        \n" +
                    "			EXECUTE stmt2;        \n" +
                    "            EXECUTE stmt3;        \n" +
                    "			EXECUTE stmt4;        \n" +
                    "            EXECUTE stmt5;        \n" +
                    "			EXECUTE stmt6;        \n" +
                    "  \n" +
                    "  \n" +
                    "  \n" +
                    "			SELECT * FROM temprfqformss;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM temprfqformss;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE temprfqformss;         \n" +
                    "END IF;        \n" +
                    "IF tableName=\"rfq_mountingtypemst\" THEN        \n" +
                    "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as        \n" +
                    "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message        \n" +
                    "		    FROM         \n" +
                    "		    (        \n" +
                    "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg         \n" +
                    "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1) ) q');        \n" +
                    "  \n" +
                    "	PREPARE stmt FROM @SQL;        \n" +
                    "	EXECUTE stmt;        \n" +
                    "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN        \n" +
                    "  \n" +
                    "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "			SELECT * FROM temprfqpartcategory;        \n" +
                    "		ELSE        \n" +
                    "			SELECT * FROM temprfqpartcategory;        \n" +
                    "  \n" +
                    "		END IF;        \n" +
                    "		DROP TABLE temprfqpartcategory;         \n" +
                    "  \n" +
                    "END IF;        \n" +
                    "IF tableName=\"who_bought_who\" THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "END IF;        \n" +
                    "IF tableName=\"rfq_parttypemst\" THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "END IF;        \n" +
                    "IF tableName=\"rfq_lineitems_errorcode\" THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "END IF;        \n" +
                    "IF tableName=\"rfq_lineitems_keywords\" THEN        \n" +
                    "  \n" +
                    "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		        \n" +
                    "			PREPARE stmt1 FROM @SQL1;        \n" +
                    "			EXECUTE stmt1;        \n" +
                    "  \n" +
                    "END IF;        \n" +
                    "END;  \n" +
                        /* **************************** Add Script Version -> 01-08-2018 *********************************** */
                        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                        "VALUES (51,'1.00','V1','Delete sp - Shirish '," + userid + ");"
                            );
            break;
        case 51:
            allDbChangesArray.push(
            //            /* **************************** New Script -> 01-08-2018  *********************************** */
                                  "insert into `page_detail`   \n" +
                  "(`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
                  "values('Help Blog','0','0','configuration.helpblog','app.helpblog','/helpblog','Help Blog',NULL,  \n" +
                  "(SELECT a.pageID FROM page_detail a WHERE a.pageName = 'Configuration')  \n" +
                  ",'0','1','2','icon-question-mark-circle','1','2018-07-28 11:39:00','2018-07-28 11:44:56',NULL,'1',NULL,NULL,'0',NULL);  \n" +
            //              /* **************************** Add Script Version -> 01-08-2018 *********************************** */
                          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                           "VALUES (52,'1.00','V1','help blog page entry - mona '," + userid + ");"
                             );
            break;
        case 52:
            allDbChangesArray.push(
                        /* **************************** New Script -> 01-08-2018  *********************************** */
                        "DROP PROCEDURE IF EXISTS `Sproc_GetSubAssyRFQLineItems`;  \n" +
                        "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                        "CREATE PROCEDURE `Sproc_GetRFQLineItems`(      \n" +
                        "	IN ppageIndex INT(11),      \n" +
                        "	IN precordPerPage INT(11),      \n" +
                        "	IN pOrderBy VARCHAR(255),      \n" +
                        "    IN pWhereClause VARCHAR(21844),      \n" +
                        "    IN prfqAssyID INT,  \n" +
                        "    IN prfqAssyBOMID INT  \n" +
                        ")  \n" +
                        "BEGIN      \n" +
                        "	DECLARE pOffset INT(11);      \n" +
                        "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                        "  \n" +
                        "	IF(prfqAssyBOMID IS NOT NULL) THEN  \n" +
                        "  \n" +
                        "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                        "			select group_concat(distinct(ra.mfgPN))as mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,      \n" +
                        "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,concat(pt.partTypeName,'|',pc.name) as name,      \n" +
                        "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID,um.unitName,rl.uomID,         \n" +
                        "			com.PIDCode,group_concat(distinct(com.PIDCode))as pid  \n" +
                        "			from rfq_lineitems_alternatepart ra      \n" +
                        "			left join rfq_lineitems rl on rl.id =ra.rfqLineItemsID  and rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0  \n" +
                        "			left join rfq_assy_bom_relationship br on br.parentLineitemsID = rl.id  \n" +
                        "			left join rfq_mountingtypemst pc on rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0      \n" +
                        "			left join rfq_parttypemst pt on rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0      \n" +
                        "			left join uoms um on um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0    \n" +
                        "			left join component com on com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0   \n" +
                        "			where rl.rfqAssyBomID = prfqAssyBOMID AND IFNULL(ra.isDeleted,0) = 0 and ra.rfqAssyID = prfqAssyID     \n" +
                        "			group by ra.rfqLineItemsID order by CAST(rl.lineID AS SIGNED);      \n" +
                        "  \n" +
                        "	ELSE  \n" +
                        "			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
                        "			select group_concat(distinct(ra.mfgPN))as mfgcode, rl.id,rl.qpa,rl.attritionRate,rl.isInstall,      \n" +
                        "			rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,concat(pt.partTypeName,'|',pc.name) as name,      \n" +
                        "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,pt.category,br.rfqAssyBomID,um.unitName,rl.uomID,      \n" +
                        "			com.PIDCode,group_concat(distinct(com.PIDCode))as pid  \n" +
                        "			from rfq_lineitems_alternatepart ra      \n" +
                        "			left join rfq_lineitems rl on rl.id =ra.rfqLineItemsID  and rl.rfqAssyID = prfqAssyID AND IFNULL(rl.isDeleted,0) = 0  \n" +
                        "			left join rfq_assy_bom_relationship br on br.parentLineitemsID = rl.id  \n" +
                        "			left join rfq_mountingtypemst pc on rl.partclassID = pc.id AND IFNULL(pc.isDeleted,0) = 0      \n" +
                        "			left join rfq_parttypemst pt on rl.partTypeID = pt.id AND IFNULL(pt.isDeleted,0) = 0     \n" +
                        "			left join uoms um on um.id = rl.uomID AND IFNULL(um.isDeleted,0) = 0   \n" +
                        "			left join component com on com.id = ra.mfgPNID AND IFNULL(com.isDeleted,0) = 0   \n" +
                        "			where rl.rfqAssyID = prfqAssyID AND IFNULL(ra.isDeleted,0) = 0      \n" +
                        "			group by ra.rfqLineItemsID order by CAST(rl.lineID AS SIGNED);      \n" +
                        "  \n" +
                        "	END IF;  \n" +
                        "  \n" +
                        "	IF (pOrderBy IS NOT NULL) THEN      \n" +
                        "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
                        "	ELSE      \n" +
                        "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id ASC\") ;      \n" +
                        "	END IF;	      \n" +
                        "  \n" +
                        "  \n" +
                        "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                        "		SET pWhereClause = '1=1' ;      \n" +
                        "	END IF;	      \n" +
                        "  \n" +
                        "  \n" +
                        "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
                        "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
                        "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                        "	ELSE	      \n" +
                        "		SET rowNumWhere = '';      \n" +
                        "	END IF;	      \n" +
                        "  \n" +
                        "  \n" +
                        "	/* to get total count of rows */      \n" +
                        "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
                        "	PREPARE query1 FROM @SQLStatement1;      \n" +
                        "	EXECUTE query1;      \n" +
                        "	DEALLOCATE PREPARE query1;      \n" +
                        "  \n" +
                        "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                        "	PREPARE query2 FROM @SQLStatement2;      \n" +
                        "	EXECUTE query2;      \n" +
                        "	DEALLOCATE PREPARE query2;      \n" +
                        "  \n" +
                        "	DROP TEMPORARY TABLE Results;      \n" +
                        "    END;  \n" +
                        /* **************************** Add Script Version -> 01-08-2018 *********************************** */
                        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                            "VALUES (53,'1.00','V1',' getrfqlineItems to display in Planned Bom - Shirish '," + userid + ");"
                            );
            break;
        case 53:
            allDbChangesArray.push(
            /* **************************** New Script -> 01-08-2018  *********************************** */
            "ALTER TABLE rfq_lineitems  \n" +
            "CHANGE qpa qpa decimal(16,8);  \n" +
            "ALTER TABLE rfq_lineitems  \n" +
            "CHANGE org_qpa org_qpa decimal(16,8);  \n" +
            "ALTER TABLE rfq_assy_bom  \n" +
            "ADD COLUMN rfqLineItemsID INT NULL;  \n" +
            "ALTER TABLE rfq_assy_bom  \n" +
            "ADD CONSTRAINT FK_rfq_assy_bom_rfqLineItemsID FOREIGN KEY (rfqLineItemsID) REFERENCES rfq_lineitems (id);  \n" +
            "UPDATE rfq_lineitems_errorcode  \n" +
            "SET errorCode = 'MFGINVALID' WHERE logicID = 2;  \n" +
            "INSERT INTO `rfq_lineitems_errorcode` (`logicID`, `errorCode`, `errorColor`, `description`, `priority`, `systemVariable`, `createdBy`, `createdAt`)   \n" +
            "SELECT * FROM  \n" +
            "(SELECT '9' logicID,'MFGPNINVALID' errorCode,'#a19fe4' errorColor,'<% MFG PN %> Invalid' description,'4.00' priority,'<% MFG PN %>' systemVariable,'1' createdBy, utc_timestamp() createdAt) a   \n" +
            "WHERE 9 NOT IN (SELECT logicID FROM rfq_lineitems_errorcode) LIMIT 1;  \n" +
            "INSERT INTO `rfq_lineitems_errorcode` (`logicID`, `errorCode`, `errorColor`, `description`, `priority`, `systemVariable`, `createdBy`, `createdAt`)   \n" +
            "SELECT * FROM  \n" +
            "(SELECT '10' logicID,'DISTYINVALID' errorCode,'#e14550' errorColor,'<% Distributor %> Invalid' description,'4.00' priority,'<% Distributor %>' systemVariable,'1' createdBy, utc_timestamp() createdAt) a   \n" +
            "WHERE 10 NOT IN (SELECT logicID FROM rfq_lineitems_errorcode) LIMIT 1;  \n" +
            "INSERT INTO `rfq_lineitems_errorcode` (`logicID`, `errorCode`, `errorColor`, `description`, `priority`, `systemVariable`, `createdBy`, `createdAt`)   \n" +
            "SELECT * FROM  \n" +
            "(SELECT '11' logicID,'DISTYPNINVALID' errorCode,'#7a6263' errorColor,'<% Distributor PN %> Invalid' description,'4.00' priority,'<% Distributor PN %>' systemVariable,'1' createdBy, utc_timestamp() createdAt) a   \n" +
            "WHERE 11 NOT IN (SELECT logicID FROM rfq_lineitems_errorcode) LIMIT 1;  \n" +
            "ALTER TABLE rfq_lineitems_alternatepart  \n" +
            "ADD COLUMN mfgPNStep TINYINT(1) NULL;  \n" +
            "ALTER TABLE rfq_lineitems_alternatepart  \n" +
            "ADD COLUMN distPNStep TINYINT(1) NULL;  \n" +
            "alter table rfq_lineitems_errorcode  \n" +
            "drop column priority;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_CreateRFQAssyBomRelationship`;  \n" +
            "CREATE PROCEDURE `Sproc_CreateRFQAssyBomRelationship`(        \n" +
            "	IN pRFQAssyID INT,        \n" +
            "    IN pUserID INT,        \n" +
            "    IN pIsVerify TINYINT(1)        \n" +
            ")  \n" +
            "BEGIN        \n" +
            "DECLARE subAssyType INT(11);        \n" +
            "DECLARE EXIT HANDLER FOR SQLEXCEPTION        \n" +
            "BEGIN        \n" +
            "	ROLLBACK;        \n" +
            "	RESIGNAL;        \n" +
            "END;        \n" +
            "DECLARE EXIT HANDLER FOR SQLWARNING        \n" +
            "  BEGIN        \n" +
            "	ROLLBACK;        \n" +
            "	RESIGNAL;        \n" +
            "END;        \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems;        \n" +
            "    DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems_sub_assy;        \n" +
            "    DROP TEMPORARY TABLE IF EXISTS tmp_sub_assy;	        \n" +
            "    DROP TEMPORARY TABLE IF EXISTS tmp_delete_assy;        \n" +
            "  \n" +
            "    SET subAssyType = 3;        \n" +
            "  \n" +
            "	START TRANSACTION;        \n" +
            "  \n" +
            "	# -------------------------- [S] DELETE SUB ASSY ------------------------------------------        \n" +
            "	CREATE TEMPORARY TABLE tmp_delete_assy AS        \n" +
            "	SELECT rab.rfqAssyBomID FROM rfq_assy_bom_relationship rab WHERE rab.rfqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL        \n" +
            "    AND rab.parentLineItemsID NOT IN         \n" +
            "    (SELECT rl.id FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL GROUP BY rl.rfqAssyBomID);  \n" +
            "  \n" +
            "    UPDATE rfq_assy_bom rab        \n" +
            "	SET rab.isDeleted = 1, rab.deletedAt = utc_timestamp(), rab.deletedBy = pUserID                \n" +
            "	WHERE rab.id IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)        \n" +
            "    AND rab.reqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;         \n" +
            "  \n" +
            "	UPDATE rfq_assy_bom_relationship rab        \n" +
            "	SET rab.isDeleted = 1, rab.deletedAt = utc_timestamp(), rab.deletedBy = pUserID                \n" +
            "	WHERE rab.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)        \n" +
            "	AND rab.rfqAssyID = pRFQAssyID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;        \n" +
            "    CREATE TEMPORARY TABLE tmp_rfq_lineitems AS         \n" +
            "    SELECT rl1.lineID FROM rfq_lineitems rl1 WHERE rl1.rfqAssyID = pRFQAssyID AND rl1.isDeleted = 0 AND rl1.deletedAt IS NULL;        \n" +
            "  \n" +
            "    UPDATE rfq_lineitems rl        \n" +
            "    SET rl.isDeleted = 1, rl.deletedAt = utc_timestamp(), rl.deletedBy = pUserID                \n" +
            "	WHERE rl.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)        \n" +
            "    AND rl.refRFQLineItemID NOT IN (SELECT lineID FROM tmp_rfq_lineitems)        \n" +
            "	AND rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;        \n" +
            "  \n" +
            "    UPDATE rfq_lineitems_alternatepart rla        \n" +
            "    SET rla.isDeleted = 1, rla.deletedAt = utc_timestamp(), rla.deletedBy = pUserID                \n" +
            "	WHERE rla.rfqAssyBomID IN (SELECT tda.rfqAssyBomID FROM tmp_delete_assy tda)         \n" +
            "    AND rla.rfqLineItemsID NOT IN (SELECT rl.id FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL)        \n" +
            "    AND rla.isDeleted = 0 AND rla.deletedAt IS NULL;        \n" +
            "    # -------------------------- [E] DELETE SUB ASSY ------------------------------------------        \n" +
            "  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS tmp_rfq_lineitems;  \n" +
            "    # Get all Sub Assy RFQ Line Items with Part category        \n" +
            "    CREATE TEMPORARY TABLE tmp_rfq_lineitems AS            \n" +
            "	SELECT rl.id, rl.lineID, rl.rfqAssyID, rl.rfqAssyBomID, rl.refRFQLineItemID, rp.category,        \n" +
            "    (SELECT rlap.mfgPN FROM rfq_lineitems_alternatepart rlap WHERE rlap.rfqLineItemsID = rl.id AND rlap.isDeleted = 0 ANd rlap.deletedAt IS NULL LIMIT 1) mfgPN        \n" +
            "    FROM rfq_lineitems rl            \n" +
            "    LEFT JOIN rfq_parttypemst rp ON rl.partTypeID = rp.id AND rp.isDeleted = 0 AND rp.deletedAt IS NULL        \n" +
            "    WHERE rl.rfqAssyID = pRFQAssyID AND rp.category = subAssyType AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;            \n" +
            "  \n" +
            "    # -------------------------- [S] NEW SUB ASSY ------------------------------------------        \n" +
            "    # Get all sub assy which are not in relationship table        \n" +
            "    CREATE TEMPORARY TABLE tmp_sub_assy AS        \n" +
            "    SELECT a.*, rab.bomNumber        \n" +
            "    FROM tmp_rfq_lineitems a        \n" +
            "    LEFT JOIN rfq_assy_bom_relationship ra ON a.id = ra.parentLineitemsID AND ra.isDeleted = 0 AND ra.deletedAt IS NULL        \n" +
            "    LEFT JOIN rfq_assy_bom rab ON ra.rfqAssyBomID = rab.id AND rab.isDeleted = 0 AND rab.deletedAt IS NULL;            \n" +
            "  \n" +
            "    # Insert sub assy into rfq_assy_bom table        \n" +
            "    INSERT INTO rfq_assy_bom   \n" +
            "    (`reqAssyID`, `isActive`, `description`, `isDeleted`, `createdBy`, `createdAt`, `bomNumber`, `rfqLineItemsID`)        \n" +
            "    SELECT rfqAssyID, 1 isActive, NULL description, 0 isDeleted, pUserID createdBy, utc_timestamp() createdAt, a.mfgPN, a.id        \n" +
            "    FROM tmp_sub_assy a WHERE a.bomNumber IS NULL;  \n" +
            "  \n" +
            "    # update rfqAssyBomID for all new added sub assy        \n" +
            "    # not updated 'updatedBy' and 'updatedAt' at we manually updating entry  \n" +
            "    UPDATE rfq_lineitems rl,        \n" +
            "		(   SELECT a.id, 			        \n" +
            "            (SELECT rab.id FROM rfq_assy_bom rab         \n" +
            "            WHERE rab.reqAssyID = a.rfqAssyID AND rab.rfqLineItemsID = a.id AND rab.isDeleted = 0 AND rab.deletedAt IS NULL) rfqAssyBomID        \n" +
            "			FROM tmp_sub_assy a        \n" +
            "		) tnsa        \n" +
            "	SET rl.rfqAssyBomID = IFNULL(tnsa.rfqAssyBomID, rl.rfqAssyBomID)  \n" +
            "	WHERE rl.id = tnsa.id AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;    \n" +
            "  \n" +
            "     # insert new sub assy references into rfq_assy_bom_relationship        \n" +
            "     INSERT INTO rfq_assy_bom_relationship        \n" +
            "    (`rfqAssyBomID`, `parentRFQAssyBOMID`, `parentLineitemsID`,`rfqAssyID`, `isDeleted`, `createdBy`, `createdAt`)        \n" +
            "    SELECT rl.rfqAssyBomID,        \n" +
            "    (CASE WHEN rl.refRFQLineItemID IS NULL THEN         \n" +
            "    (SELECT a.id FROM rfq_assy_bom a WHERE a.reqAssyID = pRFQAssyID AND a.bomNumber IS NULL AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)        \n" +
            "    ELSE         \n" +
            "    (SELECT a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.lineID = rl.refRFQLineItemID AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)         \n" +
            "    END) parentRFQAssyBOMID,            \n" +
            "    rl.id parentLineitemsID,        \n" +
            "    pRFQAssyID rfqAssyID,        \n" +
            "    0 isDeleted, pUserID createdBy, utc_timestamp() createdAt        \n" +
            "    FROM rfq_lineitems rl WHERE rl.rfqAssyBomID IN        \n" +
            "    (SELECT ram.id rfqAssyBomID FROM rfq_assy_bom ram        \n" +
            "    WHERE ram.id NOT IN (SELECT rar.rfqAssyBomID FROM rfq_assy_bom_relationship rar WHERE rar.rfqAssyID = pRFQAssyID AND rar.isDeleted = 0 AND rar.deletedAt IS NULL)        \n" +
            "    AND ram.isDeleted = 0 AND ram.deletedAt IS NULL AND ram.reqAssyID = pRFQAssyID AND ram.bomNumber IS NOT NULL)        \n" +
            "    AND rl.isDeleted = 0 AND rl.deletedAt IS NULL         \n" +
            "    AND EXISTS (SELECT 1 FROM rfq_parttypemst rp WHERE rl.partTypeID = rp.id AND rp.category = subAssyType AND rp.isDeleted = 0 AND rp.deletedAt IS NULL);        \n" +
            "    # -------------------------- [E] NEW SUB ASSY ------------------------------------------        \n" +
            "  \n" +
            "  \n" +
            "    # -------------------------- [S] UPDATE SUB ASSY ------------------------------------------        \n" +
            "    UPDATE rfq_assy_bom ra,        \n" +
            "    (        \n" +
            "		SELECT a.mfgPN, rab.rfqAssyBomID rfqAssyBomID FROM tmp_sub_assy a         \n" +
            "        JOIN rfq_assy_bom_relationship rab ON a.id = rab.parentLineitemsID AND rab.isDeleted = 0 AND rab.deletedAt IS NULL        \n" +
            "        WHERE a.bomNumber IS NOT NULL        \n" +
            "    ) tsa        \n" +
            "	SET ra.bomNumber = tsa.mfgPN, updatedBy = pUserID, updatedAt = utc_timestamp()        \n" +
            "    WHERE ra.id = tsa.rfqAssyBomID AND ra.bomNumber != tsa.mfgPN;            \n" +
            "    # -------------------------- [E] UPDATE SUB ASSY ------------------------------------------        \n" +
            "  \n" +
            "    # update rfqAssyBomID for all child line items of sub assy [ADD/UPDATE CASE]        \n" +
            "	# not updated 'updatedBy' and 'updatedAt' at we manually updating entry  \n" +
            "    UPDATE rfq_lineitems rl,        \n" +
            "    (		        \n" +
            "        (SELECT a.lineID, a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.isDeleted = 0 AND a.deletedAt IS NULL)        \n" +
            "        UNION      \n" +
            "        (SELECT 0 lineID, a.id rfqAssyBomID FROM rfq_assy_bom a WHERE a.reqAssyID = pRFQAssyID AND a.bomNumber IS NULL AND a.isDeleted = 0 AND a.deletedAt IS NULL LIMIT 1)              \n" +
            "    ) rl2        \n" +
            "    SET rl.rfqAssyBomID = rl2.rfqAssyBomID  \n" +
            "    WHERE rl.rfqAssyID = pRFQAssyID AND IFNULL(rl.refRFQLineItemID,0) = rl2.lineID           \n" +
            "    AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;        \n" +
            "  \n" +
            "	# update rfqAssyBomID for all child line items alternate part of sub assy [ADD/UPDATE CASE]  	  \n" +
            "    UPDATE rfq_lineitems_alternatepart rla,        \n" +
            "    (        \n" +
            "		SELECT a.id, a.rfqAssyBomID FROM rfq_lineitems a WHERE a.rfqAssyID = pRFQAssyID AND a.isDeleted = 0 AND a.deletedAt IS NULL        \n" +
            "    ) tra        \n" +
            "    SET rla.rfqAssyBomID = tra.rfqAssyBomID        \n" +
            "    WHERE rla.rfqLineItemsID = tra.id AND rla.isDeleted = 0 AND rla.deletedAt IS NULL;        \n" +
            "  \n" +
            "    COMMIT;        \n" +
            "    IF (pIsVerify = 1) THEN    \n" +
            "		SELECT GROUP_CONCAT(rl.id) INTO @rfqLineItemIds FROM rfq_lineitems rl WHERE rl.rfqAssyID = pRFQAssyID AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;        \n" +
            "		CALL Sproc_VerifyCustPN (@rfqLineItemIds, pRFQAssyID);        \n" +
            "  \n" +
            "        IF EXISTS(SELECT 1 FROM rfq_assemblies ra WHERE ra.id = pRFQAssyID AND ra.isReadyForPricing = 1 AND ra.isDeleted = 0 AND ra.deletedAt IS NULL) THEN    \n" +
            "			CALL Sproc_CreateRfqConsolidateLineItem (pRFQAssyID, pUserID);    \n" +
            "        END IF;    \n" +
            "  \n" +
            "    END IF;	        \n" +
            "END;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(    \n" +
            "	IN prfqAssyID INT    \n" +
            ")  \n" +
            "BEGIN    \n" +
            "	DROP temporary table if exists tempRfq_lineitems;    \n" +
            "    DROP temporary table if exists tempRfq_lineitemsAlt;    \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE tempRfq_lineitems AS        \n" +
            "	SELECT a.id, a.lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,     \n" +
            "    CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,    \n" +
            "    a.description, a.level, a.numOfPosition, a.customerRev, a.customerDescription,                \n" +
            "			CONCAT(part.partTypeName, ' | ', c.name) partclassID, a.isInstall, a.isPurchase, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID,     \n" +
            "            a.dnpQty, a.dnpDesig, a.qpaDesignatorStep    \n" +
            "            FROM rfq_lineitems a     \n" +
            "	LEFT JOIN uoms b ON a.uomID = b.id and IFNULL(b.isDeleted,0) = 0    \n" +
            "    LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id and IFNULL(part.isDeleted,0) = 0    \n" +
            "    LEFT JOIN rfq_mountingtypemst c ON part.partclassID = c.id and IFNULL(c.isDeleted,0) = 0        \n" +
            "    WHERE IFNULL(a.isDeleted,0) = 0 and a.rfqAssyID = prfqAssyID;    \n" +
            "  \n" +
            "	SELECT b.id, b.lineID, b.qpa, b.refDesig, a.mfgCode, a.mfgCodeID, a.mfgPN, a.mfgPNID,    \n" +
            "			a.distributor, a.distMfgCodeID, a.distPN, a.distMfgPNID,     \n" +
            "            b.custPN, b.custPNID, b.uomID, a.description descriptionAlternate, b.description, b.level, b.numOfPosition, b.customerRev, b.customerDescription,    \n" +
            "			b.partclassID, b.isInstall, b.isPurchase, b.leadQty, b.attritionRate, b.valueAddedCost, b.refRFQLineItemID,     \n" +
            "            b.dnpQty, b.dnpDesig, a.id as rfqAlternatePartID, b.qpaDesignatorStep,    \n" +
            "			a.mfgVerificationStep, a.mfgDistMappingStep, a.mfgCodeStep,    \n" +
            "			a.distVerificationStep, a.distCodeStep, a.getMFGPNStep, a.obsoletePartStep, a.goodPartMappingStep, a.mfgPNStep, a.distPNStep  \n" +
            "            FROM rfq_lineitems_alternatepart a    \n" +
            "			JOIN tempRfq_lineitems b on a.rfqLineItemsID = b.id    \n" +
            "			WHERE IFNULL(a.isDeleted,0) = 0  AND b.id is not null order by CAST(b.lineID AS SIGNED), a.id;    \n" +
            "END;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_RetrieverfqlineitemsErrorcode`;  \n" +
            "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(  \n" +
            "	IN ppageIndex INT(11),  \n" +
            "	IN precordPerPage INT(11),  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(21844)  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "DECLARE pOffset INT(11);  \n" +
            "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
            "			SELECT id,(case When(rfq_lineitems_errorcode.logicID=1) then 'QPA/Designator'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 2) then 'MFG Invalid'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 3) then 'MFG Verification'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 4) then 'Distributor Verification'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 5) then 'MFG-Distributor Mapping'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 6) then 'Get MFGPN'   \n" +
            "              when(rfq_lineitems_errorcode.logicID = 7) then 'Good Part Mapping'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 8) then 'Check Obsolete Parts'   \n" +
            "              when(rfq_lineitems_errorcode.logicID = 9) then 'MFG PN Invalid'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 10) then 'Distributor Invalid'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 11) then 'Distributor PN Invalid'                 \n" +
            "              ELSE '' END) AS `logicName`,errorCode, errorColor,   \n" +
            "              description, systemVariable,logicID  \n" +
            "			FROM `rfq_lineitems_errorcode`  \n" +
            "			WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0;  \n" +
            "  \n" +
            "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"errorCode ASC\") ;  \n" +
            "		ELSE  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "		END IF;	  \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "			SET pWhereClause = '1=1' ;  \n" +
            "		END IF;	  \n" +
            "  \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "		ELSE	  \n" +
            "			SET rowNumWhere = '';  \n" +
            "		END IF;	  \n" +
            "  \n" +
            "		/* to get total count of rows */  \n" +
            "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
            "		PREPARE query1 FROM @SQLStatement1;  \n" +
            "		EXECUTE query1;  \n" +
            "		DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "		PREPARE query2 FROM @SQLStatement2;  \n" +
            "		EXECUTE query2;  \n" +
            "		DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "		DROP TEMPORARY TABLE Results;  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 01-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (54,'1.00','V1','BOM script changes - Ravi '," + userid + ");"
            );
            break;
        case 54:
            allDbChangesArray.push(
            /* **************************** New Script -> 01-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetNotQuotedLineItems` ;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQNotQuotedLineItems` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQNotQuotedLineItems`(        \n" +
            "	IN ppageIndex INT(11),        \n" +
            "	IN precordPerPage INT(11),        \n" +
            "	IN pOrderBy VARCHAR(255),        \n" +
            "	IN pWhereClause VARCHAR(21844),        \n" +
            "	IN rfqAssyID INT(11),        \n" +
            "	IN puserID INT (11)  \n" +
            "    )  \n" +
            "BEGIN        \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);        \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;    \n" +
            "	    SET @SQL = NULL;          \n" +
            "	    SET @SQL1 = NULL;           \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN        \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
            "		ELSE        \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;         \n" +
            "		END IF;	        \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN        \n" +
            "			SET pWhereClause = '1=1' ;        \n" +
            "		END IF;	        \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
            "		ELSE	        \n" +
            "			SET rowNumWhere = '';        \n" +
            "		END IF;	        \n" +
            "		SELECT        \n" +
            "                      GROUP_CONCAT(DISTINCT        \n" +
            "				CONCAT(        \n" +
            "					'Max((IF(ra.requestQty = ''',        \n" +
            "						ra.requestQty,        \n" +
            "					''', rq.finalPrice, null))) AS ''',        \n" +
            "						ra.requestQty,''''        \n" +
            "					)        \n" +
            "					),    \n" +
            "			GROUP_CONCAT(DISTINCT        \n" +
            "				CONCAT(        \n" +
            "					'Max((IF(ra.requestQty = ''',        \n" +
            "						ra.requestQty,        \n" +
            "					''', rq.finalPrice, null))) IS NULL'        \n" +
            "					) SEPARATOR ' OR '       \n" +
            "					)    \n" +
            "				INTO @SQL, @SQL1    \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq        \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID        \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id        \n" +
            "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;      \n" +
            "			IF(@SQL IS NOT NULL) THEN        \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS        \n" +
            "					SELECT         \n" +
            "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,          \n" +
            "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,        \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(mf.mfgCode,\"N/A\"),\"|\",rla.mfgPN)AS mfgPn         \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN mfgcodemst mf ON         \n" +
            "                               rla.mfgCodeID=mf.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',         \n" +
            "					@SQL,' FROM rfq_consolidated_mfgpn_lineitem rl        \n" +
            "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID        \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id        \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');      \n" +
            "  \n" +
            "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @SQL1);    \n" +
            "  \n" +
            "			ELSE        \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS        \n" +
            "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,        \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(mf.mfgCode,\"N/A\"),\"|\",rla.mfgPN)AS mfgPn         \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN mfgcodemst mf ON         \n" +
            "                               rla.mfgCodeID=mf.id WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl        \n" +
            "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID');	        \n" +
            "			END IF;         \n" +
            "			PREPARE stmt FROM @SQLStatement;        \n" +
            "			EXECUTE stmt;	        \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );        \n" +
            "			PREPARE query1 FROM @SQLStatement1;        \n" +
            "			EXECUTE query1;        \n" +
            "			DEALLOCATE PREPARE query1;        \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
            "			PREPARE query2 FROM @SQLStatement2;        \n" +
            "			EXECUTE query2;        \n" +
            "			DEALLOCATE PREPARE query2;        \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq        \n" +
            "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID        \n" +
            "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id        \n" +
            "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);        \n" +
            "			PREPARE query3 FROM @SQLStatement3;        \n" +
            "			EXECUTE query3;        \n" +
            "			DEALLOCATE PREPARE query3;        \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement4 = CONCAT(\"SELECT requestQty, finalPrice, unitPrice,supplier, selectedMpn, selectionMode,qtyID, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq     \n" +
            "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID WHERE consolidateID IN (select id from consolidatetemp)\");        \n" +
            "			PREPARE query4 FROM @SQLStatement4;        \n" +
            "			EXECUTE query4;        \n" +
            "			DEALLOCATE PREPARE query4;        \n" +
            "  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;          \n" +
            "    END;  \n" +
            "DROP PROCEDURE IF EXISTS `retrieveExcessMaterialLineItems` ;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQExcessMaterialLineItems` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQExcessMaterialLineItems`(        \n" +
            "	IN ppageIndex INT(11),        \n" +
            "	IN precordPerPage INT(11),        \n" +
            "	IN pOrderBy VARCHAR(255),        \n" +
            "	IN pWhereClause VARCHAR(21844),        \n" +
            "	IN rfqAssyID INT(11),        \n" +
            "	IN puserID INT (11)  \n" +
            "    )  \n" +
            "BEGIN        \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);        \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;    \n" +
            "	    SET @SQLString = NULL;   \n" +
            "	    SET @HavingClause = NULL;   \n" +
            "	    SET SESSION group_concat_max_len = 150000;    \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN        \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
            "		ELSE        \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;         \n" +
            "		END IF;	        \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN        \n" +
            "			SET pWhereClause = '1=1' ;        \n" +
            "		END IF;	        \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
            "		ELSE	        \n" +
            "			SET rowNumWhere = '';        \n" +
            "		END IF;	        \n" +
            "		SELECT        \n" +
            "                      GROUP_CONCAT(DISTINCT        \n" +
            "				CONCAT(        \n" +
            "					'Max((IF(ra.requestQty = ''',        \n" +
            "						ra.requestQty,        \n" +
            "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),   \n" +
            "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),   \n" +
            "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) AS ''',        \n" +
            "						ra.requestQty,''''        \n" +
            "					)        \n" +
            "					),  \n" +
            "  \n" +
            "                      GROUP_CONCAT(DISTINCT        \n" +
            "				CONCAT(        \n" +
            "					'Max((IF(ra.requestQty = ''',        \n" +
            "						ra.requestQty,        \n" +
            "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),   \n" +
            "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),   \n" +
            "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) > 0'           \n" +
            "					) SEPARATOR ' OR '       \n" +
            "					)  \n" +
            "				INTO @SQLString, @HavingClause   \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq        \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID        \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id        \n" +
            "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;      \n" +
            "			IF(@SQLString IS NOT NULL) THEN        \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS        \n" +
            "					SELECT         \n" +
            "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,          \n" +
            "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,        \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(mf.mfgCode,\"N/A\"),\"|\",rla.mfgPN)AS mfgPn         \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN mfgcodemst mf ON         \n" +
            "                               rla.mfgCodeID=mf.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',         \n" +
            "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl        \n" +
            "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID        \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id        \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');      \n" +
            "  \n" +
            "				SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);    \n" +
            "			ELSE        \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS        \n" +
            "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,        \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(mf.mfgCode,\"N/A\"),\"|\",rla.mfgPN)AS mfgPn         \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN mfgcodemst mf ON         \n" +
            "                               rla.mfgCodeID=mf.id WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl        \n" +
            "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID');	        \n" +
            "			END IF;    \n" +
            "			PREPARE stmt FROM @SQLStatement;        \n" +
            "			EXECUTE stmt;	        \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );        \n" +
            "			PREPARE query1 FROM @SQLStatement1;        \n" +
            "			EXECUTE query1;        \n" +
            "			DEALLOCATE PREPARE query1;        \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
            "			PREPARE query2 FROM @SQLStatement2;        \n" +
            "			EXECUTE query2;        \n" +
            "			DEALLOCATE PREPARE query2;        \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq        \n" +
            "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID        \n" +
            "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id        \n" +
            "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);        \n" +
            "			PREPARE query3 FROM @SQLStatement3;        \n" +
            "			EXECUTE query3;        \n" +
            "			DEALLOCATE PREPARE query3;        \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement4 = CONCAT(\"SELECT requestQty, finalPrice, unitPrice,supplier, selectedMpn, selectionMode,qtyID, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq     \n" +
            "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID WHERE consolidateID IN (select id from consolidatetemp)\");        \n" +
            "			PREPARE query4 FROM @SQLStatement4;        \n" +
            "			EXECUTE query4;        \n" +
            "			DEALLOCATE PREPARE query4;        \n" +
            "  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;          \n" +
            "    END;  \n" +
             /* **************************** Add Script Version -> 01-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (55,'1.00','V1','Excess Material NotQuoted Changes - Vaibhav '," + userid + ");"
            );
            break;
        case 55:
            allDbChangesArray.push(
            //  /* **************************** New Script -> 02-08-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReviewPricingLineItem`;  \n" +
                /* **************************** Add Script Version -> 02-08-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (56,'1.00','V1','Drop Sproc_GetReviewPricingLineItem - Vaibhav '," + userid + ");"
                );
            break;
        case 56:
            allDbChangesArray.push(
            //            /* **************************** New Script -> 02-08-2018  *********************************** */
           "insert into `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`,  \n" +
        " `parentPageRoute`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`,   \n" +
            " `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
        " values('Help Blog Detail','0','0',NULL,'app.helpblog.helpblogdetail','/helpblogdetail/:pageID',NULL,NULL,(SELECT a.pageID FROM page_detail a WHERE a.pageName ='Help Blog'),'0',NULL,NULL,NULL,'1',  \n" +
           " '2018-08-01 10:46:46','2018-08-01 13:38:14',NULL,'1',NULL,NULL,'0',NULL);  \n" +
            //              /* **************************** Add Script Version -> 02-08-2018 *********************************** */
                          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                           "VALUES (57,'1.00','V1',' page Entry for help blog deail-Mona'," + userid + ");"
                            );
            break;
        case 57:
            allDbChangesArray.push(
            //  /* **************************** New Script -> 02-08-2018  *********************************** */
           "ALTER TABLE `rfq_consolidated_mfgpn_lineitem_alternate`  \n" +
            "ADD COLUMN `PIDCode` varchar(30);  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
            "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(      \n" +
            "	IN rfqAssyID int(1),      \n" +
            "	IN userID INT(1)      \n" +
            ")  \n" +
            "BEGIN      \n" +
            "DECLARE EXIT HANDLER FOR SQLEXCEPTION      \n" +
            "BEGIN      \n" +
            "	ROLLBACK;      \n" +
            "	RESIGNAL;      \n" +
            "END;      \n" +
            "DECLARE EXIT HANDLER FOR SQLWARNING      \n" +
            "  BEGIN      \n" +
            "	ROLLBACK;      \n" +
            "	RESIGNAL;      \n" +
            "END;      \n" +
            " DROP TEMPORARY TABLE if exists Results;      \n" +
            "  \n" +
            "    START TRANSACTION;      \n" +
            "  \n" +
            "# Select Consolidated rfq_lineitems      \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
            "		select rfqLineItemsID as rfqLineItemsID,attritionRate,isInstall,       \n" +
            "		isPurchase,partclassID,partTypeID,leadQty,isActive,isNoBidsPN,isDraft,      \n" +
            "		lineID,numOfPosition,rfqAssyID,uomID,ab.rfqAssyBomID,      \n" +
            "		sum(qpa2) qpa, cast((sum(adcost1)/sum(qpa2)) as decimal(10,5)) as valueAddedCost,      \n" +
            "		mfg,count(*)as multiple,group_concat(rfqLineItemsID) as consolidatedLineItemIDs      \n" +
            "		from       \n" +
            "		(select *,(qpa1*valueAddedCost)as adcost1, qpa1 as qpa2, group_concat(distinct(part)) mfg      \n" +
            "		from      \n" +
            "		(select b.rfqLineItemsID, a.valueAddedCost, a.refRFQLineItemID,       \n" +
            "		fun_getQPAOfLineItems(a.lineID,rfqAssyID)as qpa1, (fun_getQPAOfLineItems(a.lineID,rfqAssyID)* a.valueAddedCost)as addCost,       \n" +
            "		concat(b.mfgCodeID,' | ', b.mfgPNID ) as part,a.attritionRate,a.isInstall,       \n" +
            "		a.isPurchase,a.partclassID,a.partTypeID,a.leadQty,a.isActive,a.isNoBidsPN,a.isDraft,      \n" +
            "		a.lineID,a.numOfPosition,a.rfqAssyID,a.uomID,a.rfqAssyBomID      \n" +
            "		from rfq_lineitems_alternatepart b       \n" +
            "        join rfq_lineitems a on b.rfqLineItemsID = a.id AND a.rfqAssyID = rfqAssyID AND IFNULL(a.isDeleted,0) = 0     \n" +
            "        where IFNULL(b.isDeleted,0) = 0 and (b.mfgPNID is not NULL or b.mfgPN is not NULL)    \n" +
            "		group by b.rfqLineItemsID, b.mfgPN, concat(b.mfgCode,' | ', b.mfgPN)) aa      \n" +
            "		group by aa.rfqLineItemsID) ab       \n" +
            "		group by mfg;     \n" +
            "  \n" +
            "# Delete consolidated lineItem if consolidatedLineItemIDs  change      \n" +
            "  \n" +
            "			update rfq_consolidated_mfgpn_lineitem cl      \n" +
            "			set       \n" +
            "			cl.isDeleted = true,      \n" +
            "			cl.deletedAt = UTC_DATE(),      \n" +
            "			cl.deletedBy = userID      \n" +
            "			where cl.rfqAssyID = rfqAssyID and cl.id not in (      \n" +
            "            select * from(           \n" +
            "			select id from rfq_consolidated_mfgpn_lineitem rcl      \n" +
            "			join Results R on R.rfqAssyID = rcl.rfqAssyID       \n" +
            "			where rcl.rfqAssyID = rfqAssyID and rcl.id  is not NUll  and rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs      \n" +
            "            and IFNULL(rcl.isDeleted,0) = 0)a);      \n" +
            "  \n" +
            "  \n" +
            "# insert Consolidated lineItems       \n" +
            "  \n" +
            "        INSERT INTO `rfq_consolidated_mfgpn_lineitem`      \n" +
            "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,      \n" +
            "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,      \n" +
            "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`)      \n" +
            "		select R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,rfqAssyID `rfqAssyID`,R.`partTypeID`,      \n" +
            "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_DATE() `createdAt`,      \n" +
            "		userID `createdBy`, R.`numOfPosition`,      \n" +
            "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`       \n" +
            "        from Results R      \n" +
            "		 left join rfq_consolidated_mfgpn_lineitem cl on cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs and cl.rfqAssyID = R.rfqAssyID and IFNULL(cl.isDeleted,0) = 0      \n" +
            "		 where cl.id is NUll;      \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "# insert Consolidated lineItems Quentity      \n" +
            "  \n" +
            "        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`      \n" +
            "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)      \n" +
            "		select rq.id `qtyID`, cl.id `consolidateID`,1 `createdBy`,UTC_DATE() `createdAt`  from rfq_consolidated_mfgpn_lineitem cl      \n" +
            "		join rfq_assy_quantity rq on rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0      \n" +
            "        left join rfq_consolidate_mfgpn_lineitem_quantity clq on clq.consolidateID = cl.id and clq.qtyID = rq.id       \n" +
            "		where cl.rfqAssyID = rfqAssyID and clq.id IS NULL;      \n" +
            "  \n" +
            "# Update Consilidated LineItems Quantity      \n" +
            "  \n" +
            "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (select * from Results) Rs, (select cl.id ,cl.qpa,cl.consolidatedLineItemIDs from rfq_consolidated_mfgpn_lineitem cl       \n" +
            "		where cl.rfqAssyID = rfqAssyID and cl.id  is NoT NUll       \n" +
            "            and IFNULL(cl.isDeleted,0) = 0) rcl       \n" +
            "		set       \n" +
            "		rq.updatedAt = UTC_TIMESTAMP(),      \n" +
            "        rq.updatedBy = userID,      \n" +
            "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN null WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)      \n" +
            "		where  IFNULL(rq.isDeleted,0) = 0 and rcl.qpa != Rs.qpa and rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs and rq.consolidateID in(rcl.id);      \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "# Update Consilidated LineItems      \n" +
            "  \n" +
            "        UPDATE rfq_consolidated_mfgpn_lineitem cl, (select * from Results) R       \n" +
            "		set       \n" +
            "		cl.isInstall = R.isInstall ,      \n" +
            "		cl.isPurchase = R.isPurchase,      \n" +
            "		cl.numOfPosition = R.numOfPosition,      \n" +
            "		cl.attritionRate = R.attritionRate,      \n" +
            "		cl.leadQty = R.leadQty,      \n" +
            "		cl.valueAddedCost = R.valueAddedCost,      \n" +
            "        cl.updatedAt = UTC_DATE(),      \n" +
            "        cl.rfqLineItemID = R.rfqLineItemsID,      \n" +
            "        cl.qpa = R.qpa,      \n" +
            "        cl.uomID = R.uomID,      \n" +
            "        cl.lineID = R.lineID,      \n" +
            "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,      \n" +
            "        cl.updatedBy = userID      \n" +
            "		where cl.rfqAssyID = rfqAssyID and cl.id  is NoT NUll and cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs      \n" +
            "            and IFNULL(cl.isDeleted,0) = 0;      \n" +
            "  \n" +
            "  \n" +
            "# delete from consolidated Alternatepart if lineItem removed      \n" +
            "  \n" +
            "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap      \n" +
            "		set       \n" +
            "        cap.isDeleted = true,      \n" +
            "        cap.deletedAt = UTC_DATE(),      \n" +
            "		cap.deletedBy = userID      \n" +
            "		where  cap.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null        \n" +
            "        and IFNULL(cl.isDeleted,0) = 1);           \n" +
            "  \n" +
            "  \n" +
            "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem      \n" +
            "  \n" +
            "  \n" +
            "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate       \n" +
            "		set       \n" +
            "        isDeleted = true,      \n" +
            "        deletedAt = UTC_DATE(),      \n" +
            "		deletedBy = userID      \n" +
            "        where id in(       \n" +
            "        select capID from (      \n" +
            "		select distinct(cap.id)as capID      \n" +
            "		from rfq_lineitems_alternatepart ap       \n" +
            "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID      \n" +
            "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID      \n" +
            "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID       \n" +
            "		join rfq_parttypemst pt on pt.id = rl.partTypeID AND pt.category != 3      \n" +
            "		where rl.rfqAssyID = rfqAssyID and cap.consolidateID IS not NULL and IFNULL(cl.isDeleted,0) = 0 and IFNULL(ap.isDeleted,0) = 1) as rcap);      \n" +
            "  \n" +
            "# delete Consolidated lineItems Quentity       \n" +
            "  \n" +
            "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (select * from rfq_assy_quantity where rfqAssyID = rfqAssyID and isDeleted = 1) rq    \n" +
            "		set       \n" +
            "        cq.isDeleted = true,      \n" +
            "        cq.deletedAt = UTC_DATE(),      \n" +
            "		cq.deletedBy = userID      \n" +
            "		where cq.qtyID = rq.id and cq.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null        \n" +
            "        and IFNULL(cl.isDeleted,0) = 1);           \n" +
            "  \n" +
            "# delete Consolidated lineitem Quantity if rfq Quantity remove    \n" +
            "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (select * from rfq_assy_quantity q where q.rfqAssyID = rfqAssyID and IFNULL(q.isDeleted,0) = 1 ) rq    \n" +
            "		set       \n" +
            "        cq.isDeleted = true,      \n" +
            "        cq.deletedAt = UTC_DATE(),      \n" +
            "		cq.deletedBy = userID      \n" +
            "        where cq.consolidateID in(select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = rfqAssyID and IFNULL(isDeleted, 0) = 0)        \n" +
            "        and rq.id = cq.qtyID and IFNULL(cq.isDeleted,0)= 0;        \n" +
            "  \n" +
            "# delete Consolidate lineItems       \n" +
            "  \n" +
            "		UPDATE rfq_consolidated_mfgpn_lineitem cl      \n" +
            "		set       \n" +
            "        cl.isDeleted = true,      \n" +
            "        cl.deletedAt = UTC_DATE(),      \n" +
            "		cl.deletedBy = userID      \n" +
            "		where  cl.rfqAssyID = rfqAssyID and cl.id is Not Null  and IFNULL(cl.isDeleted,0) = 0      \n" +
            "		and cl.rfqLineItemID not in(select rfqLineItemsID from Results);              \n" +
            "  \n" +
            "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part       \n" +
            "  \n" +
            "        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`      \n" +
            "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`)      \n" +
            "		select distinct(ap.`mfgPN`),(select rcl.id from rfq_consolidated_mfgpn_lineitem rcl where rcl.rfqAssyID = rfqAssyID and rcl.lineID = rl.lineID and IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,      \n" +
            "			ap.`mfgPNID`,ap.`mfgCodeID`, com.`PIDCode`, userID `createdBy`,UTC_DATE() `createdAt`      \n" +
            "		from rfq_lineitems_alternatepart ap       \n" +
            "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID      \n" +
            "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID  \n" +
            "        join component com on com.id = ap.mfgPNID and IFNULL(com.isDeleted,0) = 0  \n" +
            "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID      \n" +
            "		where rl.rfqAssyID = rfqAssyID and ap.isDeleted = 0 and cap.consolidateID IS NULL and IFNULL(cl.isDeleted,0) = 0;      \n" +
            "  \n" +
            "    COMMIT;      \n" +
            "    DROP TEMPORARY TABLE if exists Results;      \n" +
            "END;  \n" +
                /* **************************** Add Script Version -> 02-08-2018 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (58,'1.00','V1','Add column PIDCode in consolidated alternatepart and consolidated data sp  - shirish '," + userid + ");"
                );
            break;
        case 58:
            allDbChangesArray.push(
            /* **************************** New Script -> 02-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_checkInEmployeeForOperation` ;  \n" +
            "CREATE PROCEDURE `Sproc_checkInEmployeeForOperation`(  \n" +
            "	IN pWoID INT,  \n" +
            "	IN pOpID INT,  \n" +
            "	IN pWoOPID INT,  \n" +
            "	IN pEquipmentID INT,  \n" +
            "	IN pWorkstationID INT,  \n" +
            "	IN pIsSingleEmployee TINYINT,  \n" +
            "	IN pEmployeeID INT,  \n" +
            "	IN pWoTransID INT,  \n" +
            "	IN pIssueQty INT,  \n" +
            "	IN pCheckInSetupTime INT,  \n" +
            "	IN pCreatedBy VARCHAR(255)  \n" +
            "    )  \n" +
            "BEGIN	  \n" +
            "	DECLARE lvwoNumber VARCHAR(255);  \n" +
            "	DECLARE lvopName VARCHAR(255);  \n" +
            "	DECLARE lvempName VARCHAR(255);  \n" +
            "	DECLARE lvinsertedWoTransInOutID INT(11);  \n" +
            "	DECLARE lvemployeeID INT(11);  \n" +
            "	DECLARE lvopNumber DECIMAL(6,2);  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS error_CheckIn;  \n" +
            "	CREATE TEMPORARY TABLE error_CheckIn (  \n" +
            "		errorText NVARCHAR(2000)  \n" +
            "	);  \n" +
            "  \n" +
            "	SELECT CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') INTO @pCheckInTime;  \n" +
            "  \n" +
            "	IF(pIsSingleEmployee = 1) THEN  \n" +
            "  \n" +
            "		INSERT INTO workorder_trans_empinout  \n" +
            "		(`woTransID`,`woID`,`opID`,`woOPID`,`employeeID`, `equipmentID`, `workstationID`, `checkinTime`,   \n" +
            "		`checkinSetupTime`, `createdBy`, `isPaused`, `isDeleted`)  \n" +
            "		VALUES   \n" +
            "		(pWoTransID, pWoID, pOpID, pWoOPID, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime,   \n" +
            "		pCheckInSetupTime, pCreatedBy, 0,0);  \n" +
            "  \n" +
            "		SET lvinsertedWoTransInOutID = LAST_INSERT_ID();  \n" +
            "  \n" +
            "		/* [S] - Add Time line log for check-in to team work order operation */  \n" +
            "		SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),  \n" +
            "			(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,  \n" +
            "			(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID)   \n" +
            "			INTO lvwoNumber,lvopName,lvempName,lvopNumber  \n" +
            "		FROM workorder_trans_empinout  wteio  \n" +
            "		WHERE wteio.woTransinoutID = lvinsertedWoTransInOutID  \n" +
            "		;  \n" +
            "  \n" +
            "		SELECT employeeID INTO lvemployeeID FROM users WHERE id = pCreatedBy;		  \n" +
            "  \n" +
            "		SET @pEventTitle = CONCAT(\"Employee check-in in team operation\");  \n" +
            "		SET @pEventDescription = CONCAT('\"',lvempName,'\" check-in in team operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');  \n" +
            "		CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',lvinsertedWoTransInOutID,5.01,CONCAT('scanbadge/scan/travel/',pWoOPID,'/', lvemployeeID),pCreatedBy,1);  			  \n" +
            "		/* [E] - Add Time line log for check-in to team work order operation */	  \n" +
            "  \n" +
            "	ELSE  \n" +
            "		IF (IFNULL(pIssueQty,0)= 0) THEN  \n" +
            "			INSERT INTO workorder_trans  \n" +
            "			(`woID`,`opID`,`woOPID`,`issueQty`,`checkinEmployeeID`, `equipmentID`, `workstationID`, `checkinTime`,   \n" +
            "			`checkinSetupTime`, `createdBy`, `isDeleted`, `woentrytype`)  \n" +
            "			VALUES   \n" +
            "			(pWoID, pOpID, pWoOPID, pIssueQty, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime,   \n" +
            "			pCheckInSetupTime, pCreatedBy, 0, 'T');  \n" +
            "  \n" +
            "			SELECT woTransID INTO @pWoTransID FROM workorder_trans WHERE checkinTime = @pCheckInTime AND checkinEmployeeID = pEmployeeID ORDER BY checkinTime LIMIT 1;  \n" +
            "  \n" +
            "			INSERT INTO workorder_trans_empinout  \n" +
            "			(`woTransID`,`woID`,`opID`,`woOPID`,`employeeID`, `equipmentID`, `workstationID`, `checkinTime`,   \n" +
            "			`checkinSetupTime`, `createdBy`, `isPaused`, `isDeleted`)  \n" +
            "			VALUES   \n" +
            "			(@pWoTransID, pWoID, pOpID, pWoOPID, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime,   \n" +
            "			pCheckInSetupTime, pCreatedBy, 0,0);  \n" +
            "  \n" +
            "  \n" +
            "			/* [S] - Add Time line log for check-in work order operation */  \n" +
            "			SELECT (SELECT woNumber FROM workorder WHERE woID = wt.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wt.woOPID),  \n" +
            "				(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wt.checkinEmployeeID) ,  \n" +
            "				(SELECT opNumber FROM workorder_operation WHERE woOPID = wt.woOPID)   \n" +
            "				INTO lvwoNumber,lvopName,lvempName,lvopNumber  \n" +
            "			FROM workorder_trans  wt  \n" +
            "			WHERE wt.woTransID = @pWoTransID  \n" +
            "			;		  \n" +
            "  \n" +
            "			SET @pEventTitle = CONCAT(\"Employee check-in for work order operation\");  \n" +
            "			SET @pEventDescription = CONCAT('\"',lvempName,'\" check-in for operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');  \n" +
            "			CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans',@pWoTransID,5.01,CONCAT('scanbadge/scan/travel/',pWoOPID,'/', pEmployeeID),pCreatedBy,1);  			  \n" +
            "			/* [E] - Add Time line log for check-in work order operation */					  \n" +
            "  \n" +
            "  \n" +
            "		ELSE  \n" +
            "			CALL Sproc_GetopReadyStock(pWOID,pOpID);  \n" +
            "			SELECT issuePending INTO @pIssuePending FROM temp_Sproc_GetopReadyStock;  \n" +
            "  \n" +
            "			IF((IFNULL(pIssueQty,0)) > IFNULL(@pIssuePending,0)) THEN  \n" +
            "				INSERT INTO error_CheckIn (errorText) VALUES ('Invalid Issue Qty !!');  \n" +
            "			ELSE  \n" +
            "				INSERT INTO workorder_trans  \n" +
            "				(`woID`,`opID`,`woOPID`,`issueQty`,`checkinEmployeeID`, `equipmentID`, `workstationID`, `checkinTime`,   \n" +
            "				`checkinSetupTime`, `createdBy`, `isDeleted`, `woentrytype`)  \n" +
            "				VALUES   \n" +
            "				(pWoID, pOpID, pWoOPID, pIssueQty, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime,   \n" +
            "				pCheckInSetupTime, pCreatedBy, 0, 'T');  \n" +
            "  \n" +
            "				SELECT woTransID INTO @pWoTransID FROM workorder_trans WHERE checkinTime = @pCheckInTime AND checkinEmployeeID = pEmployeeID ORDER BY checkinTime LIMIT 1;  \n" +
            "  \n" +
            "				INSERT INTO workorder_trans_empinout  \n" +
            "				(`woTransID`,`woID`,`opID`,`woOPID`,`employeeID`, `equipmentID`, `workstationID`, `checkinTime`,   \n" +
            "				`checkinSetupTime`, `createdBy`, `isPaused`, `isDeleted`)  \n" +
            "				VALUES   \n" +
            "				(@pWoTransID, pWoID, pOpID, pWoOPID, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime,   \n" +
            "				pCheckInSetupTime, pCreatedBy, 0,0);  \n" +
            "  \n" +
            "				/* [S] - Add Time line log for check-in work order operation */  \n" +
            "				SELECT (SELECT woNumber FROM workorder WHERE woID = wt.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wt.woOPID),  \n" +
            "					(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wt.checkinEmployeeID) ,  \n" +
            "					(SELECT opNumber FROM workorder_operation WHERE woOPID = wt.woOPID)   \n" +
            "					INTO lvwoNumber,lvopName,lvempName,lvopNumber  \n" +
            "				FROM workorder_trans  wt  \n" +
            "				WHERE wt.woTransID = @pWoTransID  \n" +
            "				;		  \n" +
            "  \n" +
            "				SET @pEventTitle = CONCAT(\"Employee check-in for work order operation\");  \n" +
            "				SET @pEventDescription = CONCAT('\"',lvempName,'\" check-in for operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');  \n" +
            "				CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans',@pWoTransID,5.01,CONCAT('scanbadge/scan/travel/',pWoOPID,'/', pEmployeeID),pCreatedBy,1);  			  \n" +
            "				/* [E] - Add Time line log for check-in work order operation */	  \n" +
            "  \n" +
            "			END IF;  \n" +
            "		END IF;  \n" +
            "	END IF;  \n" +
            "	SELECT errorText FROM error_CheckIn;  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 02-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_workorder_operationfullcheckout` ;  \n" +
            "CREATE PROCEDURE `Sproc_workorder_operationfullcheckout`(  \n" +
            "	IN pWOTransID INT,  \n" +
            "	IN pCheckoutEmployeeID INT,  \n" +
            "	IN pCheckoutSetupTime INT,  \n" +
            "	IN pRemark LONGTEXT  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "	DECLARE lvwoNumber VARCHAR(255);  \n" +
            "	DECLARE lvopName VARCHAR(255);  \n" +
            "	DECLARE lvempName VARCHAR(255);  \n" +
            "	DECLARE lvwoOPID INT(11);  \n" +
            "	DECLARE lvuserID INT(11);  \n" +
            "	DECLARE lvopNumber DECIMAL(6,2);  \n" +
            "  \n" +
            "	SELECT CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') INTO @pCheckoutTime;  \n" +
            "  \n" +
            "	/*Update pending pasue record */  \n" +
            "	UPDATE workorder_trans_emp_pausedet a  \n" +
            "	SET resumetime = @pCheckoutTime,  \n" +
            "	    totaltime = TIMESTAMPDIFF(SECOND, pausedTime,@pCheckoutTime),  \n" +
            "	    updatedBy = pCheckoutEmployeeID  \n" +
            "	WHERE a.woTransinoutID IN (SELECT woTransinoutID FROM workorder_trans_empinout WHERE woTransID  = pWOTransID )  \n" +
            "	AND resumetime IS NULL AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ;  \n" +
            "  \n" +
            "  \n" +
            "	/*Calculate employee production */  \n" +
            "	UPDATE workorder_trans_empinout  a  \n" +
            "	SET isPaused = 0,  \n" +
            "		checkoutTime = @pCheckoutTime,  \n" +
            "		totalTime =  TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime),  \n" +
            "		checkoutSetupTime = pCheckoutSetupTime,  \n" +
            "		productionTime = (CAST(TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime) AS SIGNED) - IFNULL(pCheckoutSetupTime,0) -   \n" +
            "				(SELECT IFNULL(SUM(totalTime),0) totalPauseTime   \n" +
            "				FROM workorder_trans_emp_pausedet b WHERE b.woTransinoutID = a.woTransinoutID )  \n" +
            "		  ),  \n" +
            "		updatedBy = pCheckoutEmployeeID,  \n" +
            "		remark = pRemark  \n" +
            "	WHERE woTransId = pWOTransID  AND checkoutTime IS NULL ;  \n" +
            "  \n" +
            "	/*calculate operation Transaction production */  \n" +
            "	UPDATE workorder_trans a  \n" +
            "	SET checkouttime = @pCheckoutTime,  \n" +
            "		totalTime = (SELECT SUM(totalTime)  FROM  workorder_trans_empinout   \n" +
            "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ) ,  \n" +
            "		productionTime = (SELECT SUM(productionTime)  FROM  workorder_trans_empinout   \n" +
            "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ),  \n" +
            "		updatedBy = pCheckoutEmployeeID,  \n" +
            "		checkoutEmployeeID = pCheckoutEmployeeID  \n" +
            "	WHERE woTransID  = pWOTransID  AND checkoutTime IS NULL;  \n" +
            "  \n" +
            "  \n" +
            "	/* [S] - Add Time line log for check-out work order operation */  \n" +
            "	SELECT (SELECT woNumber FROM workorder WHERE woID = wt.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wt.woOPID),  \n" +
            "		(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = pCheckoutEmployeeID) , wt.woOPID,  \n" +
            "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wt.woOPID)   \n" +
            "		INTO lvwoNumber,lvopName,lvempName,lvwoOPID,lvopNumber  \n" +
            "	FROM workorder_trans  wt  \n" +
            "	WHERE wt.woTransID = pWOTransID ;		  \n" +
            "  \n" +
            "	SELECT id INTO lvuserID FROM users WHERE EmployeeID = pCheckoutEmployeeID AND deletedAt IS NULL;	  \n" +
            "  \n" +
            "	SET @pEventTitle = CONCAT(\"Employee check-out from work order operation\");  \n" +
            "	SET @pEventDescription = CONCAT('\"',lvempName,'\" check-out from operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');  \n" +
            "	CALL Sproc_AddToTimeline(lvuserID,@pEventTitle,@pEventDescription,'workorder_trans',pWOTransID,5.04,CONCAT('scanbadge/scan/travel/',lvwoOPID,'/', pCheckoutEmployeeID),lvuserID,2);  			  \n" +
            "	/* [E] - Add Time line log for check-out work order operation */			  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 02-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_checkoutEmployeeFromOperation` ;  \n" +
            "CREATE PROCEDURE `Sproc_checkoutEmployeeFromOperation`(  \n" +
            "	IN pWOTransID INT,  \n" +
            "	IN pWOTransinoutID INT,  \n" +
            "	IN pCheckoutEmployeeID INT,  \n" +
            "	IN pCheckoutSetupTime INT,  \n" +
            "	IN pRemark LONGTEXT  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "	DECLARE lvwoNumber VARCHAR(255);  \n" +
            "	DECLARE lvopName VARCHAR(255);  \n" +
            "	DECLARE lvempName VARCHAR(255);  \n" +
            "	DECLARE lvwoOPID INT(11);  \n" +
            "	DECLARE lvuserID INT(11);  \n" +
            "	DECLARE lvopNumber DECIMAL(6,2);  \n" +
            "	SELECT CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') INTO @pCheckoutTime;  \n" +
            "  \n" +
            "	/*Update pending pasue record */  \n" +
            "	UPDATE workorder_trans_emp_pausedet a  \n" +
            "	SET resumetime = @pCheckoutTime,  \n" +
            "	    totaltime = TIMESTAMPDIFF(SECOND, pausedTime,@pCheckoutTime),  \n" +
            "	    updatedBy = pCheckoutEmployeeID  \n" +
            "	WHERE a.woTransinoutID = pWOTransinoutID  \n" +
            "	AND resumetime IS NULL AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ;  \n" +
            "  \n" +
            "	/*Calculate employee production */  \n" +
            "	UPDATE workorder_trans_empinout  a  \n" +
            "	SET isPaused = 0,  \n" +
            "		checkoutTime = @pCheckoutTime,  \n" +
            "		totalTime =  TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime),  \n" +
            "		checkoutSetupTime = pCheckoutSetupTime,  \n" +
            "		productionTime = (CAST(TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime) AS SIGNED) - IFNULL(pCheckoutSetupTime,0) -   \n" +
            "				(SELECT IFNULL(SUM(totalTime),0) totalPauseTime   \n" +
            "				FROM workorder_trans_emp_pausedet b WHERE b.woTransinoutID = a.woTransinoutID )  \n" +
            "		  ),  \n" +
            "		updatedBy = pCheckoutEmployeeID,  \n" +
            "		remark = pRemark  \n" +
            "	WHERE woTransId = pWOTransID  AND woTransinoutID = pWOTransinoutID AND checkoutTime IS NULL ;  \n" +
            "  \n" +
            "  \n" +
            "	/*calculate operation Transaction production */  \n" +
            "	SELECT COUNT(1) INTO  @cnt  FROM workorder_trans_empinout WHERE  woTransId = pWOTransID  AND checkoutTime IS NULL;  \n" +
            "	IF (@cnt = 0 ) THEN   \n" +
            "  \n" +
            "	UPDATE workorder_trans a  \n" +
            "	SET checkouttime = @pCheckoutTime,  \n" +
            "		totalTime = (SELECT SUM(totalTime)  FROM  workorder_trans_empinout   \n" +
            "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ) ,  \n" +
            "		productionTime = (SELECT SUM(productionTime)  FROM  workorder_trans_empinout   \n" +
            "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ),  \n" +
            "		updatedBy = pCheckoutEmployeeID,  \n" +
            "		checkoutEmployeeID = pCheckoutEmployeeID  \n" +
            "	WHERE woTransID  = pWOTransID  AND checkoutTime IS NULL;	  \n" +
            "  \n" +
            "	END IF;  \n" +
            "  \n" +
            "  \n" +
            "	/* [S] - Add Time line log for check-out from team work order operation */  \n" +
            "	SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),  \n" +
            "		(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,  \n" +
            "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID)   \n" +
            "		INTO lvwoNumber,lvopName,lvempName,lvopNumber  \n" +
            "	FROM workorder_trans_empinout  wteio  \n" +
            "	WHERE wteio.woTransinoutID = pWOTransinoutID ;  \n" +
            "  \n" +
            "	SELECT id INTO lvuserID FROM users WHERE EmployeeID = pCheckoutEmployeeID AND deletedAt IS NULL;	  \n" +
            "  \n" +
            "	SET @pEventTitle = CONCAT(\"Employee check-out from team operation\");  \n" +
            "	SET @pEventDescription = CONCAT('\"',lvempName,'\" check-out from team operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');  \n" +
            "	CALL Sproc_AddToTimeline(lvuserID,@pEventTitle,@pEventDescription,'workorder_trans_empinout',pWOTransinoutID,5.04,CONCAT('scanbadge/scan/travel/',lvwoOPID,'/', pCheckoutEmployeeID),lvuserID,2);    \n" +
            "	/* [E] - Add Time line log for check-out from team work order operation */	  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 02-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
            "CREATE PROCEDURE `Sproc_checkDelete`(          \n" +
            "	IN tableName VARCHAR(255),          \n" +
            "	IN IDs LONGTEXT,          \n" +
            "	IN deletedBy INT,          \n" +
            "	IN entityID VARCHAR(255),          \n" +
            "	IN refrenceIDs LONGTEXT          \n" +
            "    )  \n" +
            "BEGIN          \n" +
            "	DECLARE vWoID1 INT(11);          \n" +
            "	DECLARE vOpID1 INT(11);          \n" +
            "	DECLARE vSerialNo1 VARCHAR(50);          \n" +
            "	DECLARE vProdStatus1 VARCHAR(5);          \n" +
            "	DECLARE vWoTransID1 INT(11);          \n" +
            "	DECLARE vQty1 INT(11);          \n" +
            "	DECLARE vOpID2 INT(11);          \n" +
            "	DECLARE vProdstatus2 VARCHAR(5);          \n" +
            "  \n" +
            "IF tableName='employees' THEN          \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)          \n" +
            "	   UNION ALL                                \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)          \n" +
            "           UNION ALL           \n" +
            "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND er.finalStatusInit IN(',IDs,') AND er.initiateBy IN(',IDs,') LIMIT 1)          \n" +
            "	   UNION ALL          \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)          \n" +
            "	UNION ALL          \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)          \n" +
            "	  UNION ALL          \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)          \n" +
            "	  UNION ALL          \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)          \n" +
            "	  UNION ALL          \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)          \n" +
            "	  UNION ALL          \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)          \n" +
            "	 UNION ALL          \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)          \n" +
            "	  UNION ALL          \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND wr.reqGenEmployeeID IN(',IDs,') and wr.woAuthorID IN(',IDs,') and wr.accRejBy IN(',IDs,') LIMIT 1)          \n" +
            "	  UNION ALL           \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND wr.commentemployeeID IN(',IDs,') AND wr.accRejBy IN(',IDs,') LIMIT 1)          \n" +
            "	  UNION ALL          \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND wr.employeeID IN(',IDs,') AND wr.requstedEmployeeID IN(',IDs,') LIMIT 1)           \n" +
            "	  UNION ALL              \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE wt.checkinEmployeeID IN(',IDs,') AND wt.checkoutEmployeeID IN(',IDs,') LIMIT 1)          \n" +
            "	  UNION ALL             \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)          \n" +
            "	 UNION ALL           \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)          \n" +
            "	 UNION ALL           \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)          \n" +
            "	 UNION ALL           \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND wthu.holdEmployeeId IN(',IDs,') and wthu.unHoldEmployeeId IN(',IDs,') LIMIT 1)          \n" +
            "	UNION ALL           \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)          \n" +
            "	 UNION ALL           \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)          \n" +
            "	 UNION ALL           \n" +
            "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)          \n" +
            "	 UNION ALL           \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND holdEmployeeId IN(',IDs,') AND unHoldEmployeeId IN(',IDs,')LIMIT 1)          \n" +
            "  \n" +
            "        ) q');          \n" +
            "    PREPARE stmt FROM @SQL;          \n" +
            "    EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempEmp)=0 THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');          \n" +
            "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');          \n" +
            "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');          \n" +
            "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			PREPARE stmt2 FROM @SQL2;          \n" +
            "			PREPARE stmt3 FROM @SQL3;          \n" +
            "			PREPARE stmt4 FROM @SQL4;          \n" +
            "			EXECUTE stmt1;          \n" +
            "			EXECUTE stmt2;          \n" +
            "			EXECUTE stmt3;          \n" +
            "			EXECUTE stmt4;          \n" +
            "			SELECT           \n" +
            "    *          \n" +
            "FROM          \n" +
            "    tempEmp;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempEmp;          \n" +
            "		END IF;          \n" +
            "  \n" +
            "    DROP TABLE tempEmp;          \n" +
            "END IF;          \n" +
            "IF tableName='eco_type_category' THEN          \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)           \n" +
            "	  ) q');          \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT           \n" +
            "    *          \n" +
            "FROM          \n" +
            "    tempEcoTypeCategory;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempEcoTypeCategory;          \n" +
            "		END IF;          \n" +
            "    DROP TABLE tempEcoTypeCategory;            \n" +
            "END IF;          \n" +
            "IF tableName='eco_type_values' THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)          \n" +
            "	  ) q');          \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT           \n" +
            "    *          \n" +
            "FROM          \n" +
            "    tempEcoTypeValues;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempEcoTypeValues;          \n" +
            "		END IF;          \n" +
            "    DROP TABLE tempEcoTypeValues;            \n" +
            "END IF;          \n" +
            "IF tableName='customers' THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL           \n" +
            "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL           \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)          \n" +
            "	  ) q');          \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		          \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			PREPARE stmt2 FROM @SQL2;          \n" +
            "			PREPARE stmt3 FROM @SQL3;          \n" +
            "			EXECUTE stmt1;          \n" +
            "			EXECUTE stmt2;          \n" +
            "			EXECUTE stmt3;          \n" +
            "  \n" +
            "			SELECT           \n" +
            "    *          \n" +
            "FROM          \n" +
            "    tempCustomers;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempCustomers;          \n" +
            "		END IF;          \n" +
            "    DROP TABLE tempCustomers;            \n" +
            "END IF;          \n" +
            "IF tableName='certificate_standards' THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)          \n" +
            "  \n" +
            "	  ) q');          \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		          \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			PREPARE stmt2 FROM @SQL2;          \n" +
            "			PREPARE stmt3 FROM @SQL3;          \n" +
            "			EXECUTE stmt1;          \n" +
            "			EXECUTE stmt2;          \n" +
            "			EXECUTE stmt3;          \n" +
            "  \n" +
            "			SELECT * FROM tempCertificateStandards;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempCertificateStandards;          \n" +
            "		END IF;          \n" +
            "    DROP TABLE tempCertificateStandards;            \n" +
            "END IF;          \n" +
            "IF tableName='department' THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)          \n" +
            "  \n" +
            "	  ) q');          \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		          \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			PREPARE stmt2 FROM @SQL2;          \n" +
            "			PREPARE stmt3 FROM @SQL3;          \n" +
            "			EXECUTE stmt1;          \n" +
            "			EXECUTE stmt2;          \n" +
            "			EXECUTE stmt3;          \n" +
            "  \n" +
            "			SELECT * FROM tempDepartment;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempDepartment;          \n" +
            "		END IF;          \n" +
            "    DROP TABLE tempDepartment;            \n" +
            "END IF;          \n" +
            "IF tableName='genericcategory' THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND eqpGroupID IN(',IDs,') AND eqpSubGroupID IN(',IDs,') AND eqpTypeID IN(',IDs,') AND eqpPossessionID IN(',IDs,') AND eqpOwnershipTypeID IN(',IDs,') AND locationTypeID IN(',IDs,')   LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)          \n" +
            "  \n" +
            "	  ) q');          \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT           \n" +
            "    *          \n" +
            "FROM          \n" +
            "    tempGenericCategory;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempGenericCategory;          \n" +
            "		END IF;          \n" +
            "    DROP TABLE tempGenericCategory;            \n" +
            "END IF;          \n" +
            "IF tableName='equipment' THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)          \n" +
            "  \n" +
            "	  ) q');          \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN          \n" +
            "			IF entityID IS NOT NULL THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		          \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			PREPARE stmt2 FROM @SQL2;          \n" +
            "			PREPARE stmt3 FROM @SQL3;          \n" +
            "			EXECUTE stmt1;          \n" +
            "			EXECUTE stmt2;          \n" +
            "			EXECUTE stmt3;          \n" +
            "  \n" +
            "			ELSE          \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "			END IF;          \n" +
            "  \n" +
            "			SELECT * FROM tempEquipment;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempEquipment;          \n" +
            "		END IF;          \n" +
            "    DROP TABLE tempEquipment;            \n" +
            "END IF;          \n" +
            "IF tableName='parts' THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)          \n" +
            "	  ) q');          \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempParts)=0 THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempParts;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempParts;          \n" +
            "		END IF;          \n" +
            "    DROP TABLE tempParts;            \n" +
            "END IF;          \n" +
            "IF tableName='master_templates' THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)          \n" +
            "	  ) q');          \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempMasterTemplate;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempMasterTemplate;          \n" +
            "		END IF;          \n" +
            "    DROP TABLE tempMasterTemplate;            \n" +
            "END IF;          \n" +
            "IF tableName='operations' THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
            "  \n" +
            "	  ) q');          \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempOperations)=0 THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		          \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			PREPARE stmt2 FROM @SQL2;          \n" +
            "			PREPARE stmt3 FROM @SQL3;          \n" +
            "			EXECUTE stmt1;          \n" +
            "			EXECUTE stmt2;          \n" +
            "			EXECUTE stmt3;          \n" +
            "  \n" +
            "			SELECT * FROM tempOperations;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempOperations;          \n" +
            "		END IF;          \n" +
            "    DROP TABLE tempOperations;            \n" +
            "END IF;          \n" +
            "IF tableName='workorder' THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL		          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
            "  \n" +
            "	  ) q');          \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN          \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete work order */          \n" +
            "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;           \n" +
            "			SET @pEventTitle = CONCAT(\"Work order(s) removed\");          \n" +
            "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" removed by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			          \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			          \n" +
            "			/* [E] - Add Time line log for delete work order */			          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		          \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
            "			SET @SQl4 = CONCAT('update workorder_certification set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			PREPARE stmt2 FROM @SQL2;          \n" +
            "			PREPARE stmt3 FROM @SQL3;          \n" +
            "			PREPARE stmt4 FROM @SQL4;          \n" +
            "			EXECUTE stmt1;          \n" +
            "			EXECUTE stmt2;          \n" +
            "			EXECUTE stmt3;          \n" +
            "			EXECUTE stmt4;          \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorder;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempWorkorder;          \n" +
            "		END IF;          \n" +
            "    DROP TABLE tempWorkorder;            \n" +
            "END IF;          \n" +
            "IF tableName='roles' THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)          \n" +
            "         UNION ALL          \n" +
            "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)          \n" +
            "         UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');          \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempRoles)=0 THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempRoles;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempRoles;          \n" +
            "		END IF;          \n" +
            "    DROP TABLE tempRoles;            \n" +
            "END IF;          \n" +
            "IF tableName='standard_class' THEN          \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND classIDs IN(',IDs,') LIMIT 1)          \n" +
            "	  ) q');          \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempStandardClass;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempStandardClass;          \n" +
            "		END IF;          \n" +
            "    DROP TABLE tempStandardClass;            \n" +
            "END IF;          \n" +
            "IF tableName='dataelement' THEN          \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		          \n" +
            "		UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
            "	  ) q');          \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt2 FROM @SQL2;          \n" +
            "			EXECUTE stmt2;          \n" +
            "  \n" +
            "  \n" +
            "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)          \n" +
            "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated          \n" +
            "			FROM dataelement dl WHERE dl.dataElementID = IDs;          \n" +
            "  \n" +
            "  \n" +
            "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */          \n" +
            "  \n" +
            "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"           \n" +
            "							where type IN(''',IDs,''') and deletedAt IS NULL ');		          \n" +
            "				PREPARE stmt3 FROM @SQL3;          \n" +
            "				EXECUTE stmt3;          \n" +
            "  \n" +
            "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */          \n" +
            "  \n" +
            "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */          \n" +
            "  \n" +
            "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs           \n" +
            "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN          \n" +
            "  \n" +
            "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"           \n" +
            "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'           \n" +
            "								AND isAutoIncrement = 1 AND deletedAt IS NULL)          \n" +
            "							 and deletedAt IS NULL ');		          \n" +
            "					     PREPARE stmt4 FROM @SQL4;          \n" +
            "				             EXECUTE stmt4;          \n" +
            "					END IF;	          \n" +
            "				END IF;          \n" +
            "  \n" +
            "  \n" +
            "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN          \n" +
            "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)           \n" +
            "						    AND deletedAt IS NULL');		          \n" +
            "				PREPARE stmt5 FROM @SQL5;          \n" +
            "				EXECUTE stmt5;          \n" +
            "  \n" +
            "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"           \n" +
            "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		          \n" +
            "				PREPARE stmt6 FROM @SQL6;          \n" +
            "				EXECUTE stmt6;          \n" +
            "  \n" +
            "  \n" +
            "			END IF;          \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM tempDataElement;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempDataElement;          \n" +
            "		END IF;          \n" +
            "    DROP TABLE tempDataElement;            \n" +
            "  \n" +
            "END IF;          \n" +
            "IF tableName='workorder_preprogcomp' THEN          \n" +
            "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM          \n" +
            "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg          \n" +
            "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND          \n" +
            "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator          \n" +
            "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "    SELECT * FROM  tempComponent;          \n" +
            "    SELECT TotalCount FROM  tempComponent;          \n" +
            "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			          \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete pre program component */    \n" +
            "			SELECT partNumber,(SELECT woNumber FROM workorder WHERE woID = woppc.woID),  \n" +
            "				(SELECT opName FROM workorder_operation WHERE woOPID = refStkWOOPID)  \n" +
            "			    INTO @lvPartNumber,@lvWoNumber,@lvOpName  \n" +
            "			FROM workorder_preprogcomp woppc    \n" +
            "			WHERE woPreProgCompID = IDs  AND deletedAt IS NULL;     \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Preprogram component removed from work order\");    \n" +
            "			SET @lvEventDescription = CONCAT(\"Preprogram component \\\"\",@lvPartNumber,\"\\\" removed from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.14,NULL,deletedBy,3);  /* 3 = DELETE */    \n" +
            "			/* [E] - Add Time line log for delete pre program component */   \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt2 FROM @SQL2;          \n" +
            "			EXECUTE stmt2;          \n" +
            "  \n" +
            "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where           \n" +
            "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator          \n" +
            "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		          \n" +
            "			PREPARE stmt3 FROM @SQL3;          \n" +
            "			EXECUTE stmt3;          \n" +
            "		SELECT           \n" +
            "			*          \n" +
            "		FROM          \n" +
            "			tempComponent;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempComponent;          \n" +
            "		END IF;          \n" +
            "    DROP TABLE tempComponent;            \n" +
            "END IF;          \n" +
            "IF tableName='component' THEN          \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)          \n" +
            "		 UNION ALL          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)          \n" +
            "  \n" +
            "	  ) q');          \n" +
            "	  PREPARE stmt FROM @SQL;          \n" +
            "	   EXECUTE stmt;          \n" +
            "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN          \n" +
            "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempComponent;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempComponent;          \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempComponent;           \n" +
            "END IF;          \n" +
            "IF tableName=\"workorder_cluster\" THEN           \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)          \n" +
            "		      ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN          \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete cluster */          \n" +
            "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster          \n" +
            "		WHERE clusterID = IDs AND deletedAt IS NULL;          \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder          \n" +
            "		WHERE woID = @lvWoID AND deletedAt IS NULL ;          \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Cluster removed from work order\");          \n" +
            "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" removed from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		          \n" +
            "		/* [E] - Add Time line log for delete cluster */          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderCluster;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempWorkorderCluster;          \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempWorkorderCluster;           \n" +
            "END IF;          \n" +
            "IF tableName=\"workorder_operation\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)          \n" +
            "			 UNION ALL          \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		           \n" +
            "		      ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN          \n" +
            "			 /* [S] - Add Time line log for delete work order operation */          \n" +
            "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName          \n" +
            "			FROM workorder_operation           \n" +
            "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;           \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;          \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order\");          \n" +
            "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		          \n" +
            "			/* [E] - Add Time line log for delete work order operation */          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
            "		SET @SQl3 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
            "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
            "		SET @SQl5 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
            "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
            "		SET @SQl7 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		          \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation          \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;          \n" +
            "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		          \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation          \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			PREPARE stmt2 FROM @SQL2;          \n" +
            "			PREPARE stmt3 FROM @SQL3;          \n" +
            "			PREPARE stmt4 FROM @SQL4;          \n" +
            "			PREPARE stmt5 FROM @SQL5;          \n" +
            "			PREPARE stmt6 FROM @SQL6;          \n" +
            "			PREPARE stmt7 FROM @SQl7;          \n" +
            "			PREPARE stmt8 FROM @SQl7;          \n" +
            "			EXECUTE stmt1;          \n" +
            "			EXECUTE stmt2;          \n" +
            "			EXECUTE stmt3;          \n" +
            "			EXECUTE stmt4;          \n" +
            "			EXECUTE stmt5;          \n" +
            "			EXECUTE stmt6;          \n" +
            "			EXECUTE stmt7;          \n" +
            "			EXECUTE stmt8;          \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperation;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempWorkorderOperation;          \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempWorkorderOperation;           \n" +
            "END IF;          \n" +
            "IF tableName=\"workorder_operation_part\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)          \n" +
            "		      ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN          \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete parts from work order */          \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName          \n" +
            "		FROM workorder_operation           \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;           \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;          \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts          \n" +
            "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;           \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) removed from work order\");          \n" +
            "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" removed from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */          \n" +
            "		/* [E] - Add Time line log for delete parts from work order */          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderPart;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempWorkorderPart;          \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempWorkorderPart;           \n" +
            "END IF;          \n" +
            "IF tableName=\"workorder_operation_equipment\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)          \n" +
            "		      ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN          \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Equipment from work order */          \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName          \n" +
            "		FROM workorder_operation           \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;           \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	          \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment          \n" +
            "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;           \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Equipment & Tools removed from work order\");          \n" +
            "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" removed from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		          \n" +
            "		/* [E] -  Add Time line log for delete Equipment from work order */          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');          \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			PREPARE stmt2 FROM @SQL2;          \n" +
            "			EXECUTE stmt1;          \n" +
            "			EXECUTE stmt2;          \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEquipment;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempWorkorderEquipment;          \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempWorkorderEquipment;           \n" +
            "END IF;          \n" +
            "IF tableName=\"workorder_operation_employee\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)          \n" +
            "		      ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN          \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Employees from work order */          \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName          \n" +
            "		FROM workorder_operation           \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;           \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;          \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees          \n" +
            "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;           \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Employee(s) removed from work order\");          \n" +
            "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" removed from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		          \n" +
            "		/* [E] -  Add Time line log for delete Employee from work order */          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEmployee;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempWorkorderEmployee;          \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempWorkorderEmployee;          \n" +
            "  \n" +
            "END IF;          \n" +
            "IF tableName=\"workorder_operation_cluster\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)          \n" +
            "		      ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN          \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete operations from cluster */          \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName          \n" +
            "		FROM workorder_operation           \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;           \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;          \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster          \n" +
            "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;           \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");          \n" +
            "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		          \n" +
            "		/* [E] -  Add Time line log for delete operations from cluster */		          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		          \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation          \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;          \n" +
            "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		          \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation          \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			PREPARE stmt2 FROM @SQL2;          \n" +
            "			EXECUTE stmt1;          \n" +
            "			EXECUTE stmt2;          \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempWorkorderOperationCluster;           \n" +
            "END IF;          \n" +
            "IF tableName=\"entity\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)          \n" +
            "		     UNION ALL          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)          \n" +
            "		     UNION ALL          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)          \n" +
            "		    UNION ALL          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)          \n" +
            "		      ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempEntity)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempEntity;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempEntity;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempEntity;           \n" +
            "END IF;          \n" +
            "IF tableName=\"salesordermst\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)          \n" +
            "		      ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete sales order mst */ 	  \n" +
            "			SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber  \n" +
            "			FROM salesordermst  \n" +
            "			WHERE FIND_IN_SET(id,IDs);  \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Sales order(s) removed\");    \n" +
            "			SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" removed by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */    \n" +
            "			/* [E] - Add Time line log for delete sales order mst */	  \n" +
            "  \n" +
            "			SELECT * FROM tempSalesOrderMst;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempSalesOrderMst;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempSalesOrderMst;           \n" +
            "END IF;          \n" +
            "IF tableName=\"mfgcodemst\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)          \n" +
            "		      ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempMFGCodeMst;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempMFGCodeMst;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempMFGCodeMst;           \n" +
            "END IF;          \n" +
            "IF tableName=\"dataelement_transactionvalues_manual\" THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"           \n" +
            "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)          \n" +
            "				and deletedAt IS NULL');		          \n" +
            "			PREPARE stmt2 FROM @SQL2;          \n" +
            "			EXECUTE stmt2;          \n" +
            "  \n" +
            "  \n" +
            "END IF;          \n" +
            "IF tableName=\"shippedassembly\" THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;  \n" +
            "			/* [S] - Add Time line log for delete shipped assembly */   \n" +
            "			SELECT GROUP_CONCAT(shippedqty) , workorderID  INTO @lvShippedqty,@lvWoID  \n" +
            "			FROM shippedassembly  \n" +
            "			WHERE FIND_IN_SET(id,IDs);  \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID ;  \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Shipped assembly removed\");    \n" +
            "			SET @lvEventDescription = CONCAT(\"Shipped assembly for workorder \\\"\",@lvWoNumber,\"\\\" & quantity \\\"\",@lvShippedqty ,\"\\\" removed by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,9,NULL,deletedBy,3);  /* 3 = DELETE */    \n" +
            "			/* [E] - Add Time line log for delete shipped assembly */ 		  \n" +
            "  \n" +
            "END IF;          \n" +
            "IF tableName=\"assemblymst\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)          \n" +
            "		     UNION ALL          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)          \n" +
            "		     UNION ALL          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)          \n" +
            "		     UNION ALL          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)          \n" +
            "		    UNION ALL          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)          \n" +
            "		      ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempassemblymst;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempassemblymst;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempassemblymst;           \n" +
            "END IF;          \n" +
            "IF tableName=\"assembly_revisionmst\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND fromRevisionID IN(',IDs,') AND toRevisionID IN(',IDs,')  LIMIT 1)          \n" +
            "		     UNION ALL          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)          \n" +
            "		     UNION ALL          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)          \n" +
            "		     UNION ALL          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)          \n" +
            "		    UNION ALL          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)          \n" +
            "		      ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempassembly_revisionmst;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempassembly_revisionmst;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempassembly_revisionmst;           \n" +
            "END IF;          \n" +
            "IF tableName=\"workorder_trans_serialno\" THEN          \n" +
            "  \n" +
            "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1           \n" +
            "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;          \n" +
            "  \n" +
            "  \n" +
            "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)          \n" +
            "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)           \n" +
            "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1           \n" +
            "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;          \n" +
            "  \n" +
            "	/* condition to check total serials of type greater than actual production qty */          \n" +
            "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1          \n" +
            "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)           \n" +
            "		> IFNULL(vQty1,0)) THEN          \n" +
            "  \n" +
            "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */          \n" +
            "		IF(vQty1 IS NULL OR vQty1 = 0) THEN           \n" +
            "  \n" +
            "			/* condition to check curr opis and status match with given delete serial */          \n" +
            "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1          \n" +
            "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN          \n" +
            "  \n" +
            "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()          \n" +
            "				WHERE woTransSerialID = IDs;	          \n" +
            "  \n" +
            "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno           \n" +
            "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL          \n" +
            "				ORDER BY woTransSerialID DESC LIMIT 1;          \n" +
            "  \n" +
            "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2          \n" +
            "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	    \n" +
            "				/* [S] - Add Time line log for delete production serial from work order operation */ 	  \n" +
            "				SET @lvEventTitle = CONCAT(\"Production serial removed from work order operation\");    \n" +
            "				SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" removed from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
            "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('scanbadge/scan/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */    \n" +
            "				/* [E] - Add Time line log for delete production serial from work order operation */ 				  \n" +
            "  \n" +
            "			ELSE           \n" +
            "				SELECT 'not allowed';          \n" +
            "			END IF;          \n" +
            "  \n" +
            "  \n" +
            "		ELSE           \n" +
            "  \n" +
            "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()          \n" +
            "			WHERE woTransSerialID = IDs;	          \n" +
            "  \n" +
            "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno           \n" +
            "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL          \n" +
            "			ORDER BY woTransSerialID DESC LIMIT 1;          \n" +
            "  \n" +
            "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2          \n" +
            "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;  \n" +
            "			/* [S] - Add Time line log for delete production serial from work order operation */ 	  \n" +
            "			SET @lvEventTitle = CONCAT(\"Production serial removed from work order operation\");    \n" +
            "			SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" removed from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('scanbadge/scan/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */    \n" +
            "			/* [E] - Add Time line log for delete production serial from work order operation */      \n" +
            "  \n" +
            "		END IF;	          \n" +
            "  \n" +
            "  \n" +
            "	ELSE           \n" +
            "		SELECT 'not allowed';		          \n" +
            "	END IF;	          \n" +
            "  \n" +
            "  \n" +
            "END IF;          \n" +
            "IF tableName=\"br_label_template\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)          \n" +
            "		      ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempbr_label_template;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempbr_label_template;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempbr_label_template;           \n" +
            "END IF;          \n" +
            "IF tableName=\"measurement_types\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)          \n" +
            "		     UNION ALL          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempMeasurement_types;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempMeasurement_types;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempMeasurement_types;           \n" +
            "END IF;          \n" +
            "IF tableName=\"uoms\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg           \n" +
            "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)          \n" +
            "            UNION ALL          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg           \n" +
            "            FROM unit_detail_formula WHERE deletedAt IS NULL AND unitID IN (',IDs,')  or toUnitID IN (',IDs,')  LIMIT 1)) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempUOMs;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempUOMs;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempUOMs;           \n" +
            "END IF;          \n" +
            "IF tableName=\"jobtypes\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg           \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempJobTypess;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempJobTypess;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempJobTypess;           \n" +
            "END IF;          \n" +
            "IF tableName=\"ordertype\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg           \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempOrderTypes;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempOrderTypes;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempOrderTypes;           \n" +
            "END IF;          \n" +
            "IF tableName=\"reasonmst\" THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "END IF;          \n" +
            "IF tableName='component_sid_stock' THEN	          \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)          \n" +
            "			UNION ALL          \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		              \n" +
            "		    ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete component sid stock (receiving material) */ 	  \n" +
            "			SELECT GROUP_CONCAT(uid) INTO @lvUID  FROM component_sid_stock  \n" +
            "			WHERE FIND_IN_SET(id,IDs);	  \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Receiving material(s) removed\");    \n" +
            "			SET @lvEventDescription = CONCAT(\"Receiving material(s) of UID \\\"\",@lvUID,\"\\\" removed by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7,NULL,deletedBy,3);  /* 3 = DELETE */    \n" +
            "			/* [E] - Add Time line log for delete component sid stock (receiving material) */ 	  \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentsidstock;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempcomponentsidstock;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempcomponentsidstock;           \n" +
            "  \n" +
            "END IF;          \n" +
            "IF tableName='component_sid_stock_dataelement_values' THEN	          \n" +
            "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;      \n" +
            "			/* [S] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	  \n" +
            "			SELECT GROUP_CONCAT(dataelementid), GROUP_CONCAT(refsidid) INTO @lvCSDlIDs,@lvRefsidid     \n" +
            "			FROM component_sid_stock_dataelement_values  \n" +
            "			WHERE FIND_IN_SET(id,IDs);  \n" +
            "  \n" +
            "			SELECT uid INTO @lvUID FROM component_sid_stock WHERE id = @lvRefsidid   ;  \n" +
            "  \n" +
            "			SELECT GROUP_CONCAT(dataElementName) INTO @lvDlNames  \n" +
            "			FROM dataelement   \n" +
            "			WHERE FIND_IN_SET(dataElementID,@lvCSDlIDs);	  \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Data field(s) of receiving material removed\");    \n" +
            "			SET @lvEventDescription = CONCAT(\"Data field(s) \\\"\",@lvDlNames,\"\\\" of receiving material with UID \\\"\",@lvUID,\"\\\" removed by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7.01,NULL,deletedBy,3);  /* 3 = DELETE */    \n" +
            "			/* [E] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	  \n" +
            "END IF;          \n" +
            "IF tableName='chart_templatemst' THEN	          \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)          \n" +
            "		    ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempcharttemplatemst;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempcharttemplatemst;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempcharttemplatemst;           \n" +
            "  \n" +
            "END IF;          \n" +
            "IF tableName=\"shipping_request\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg           \n" +
            "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)          \n" +
            "            UNION ALL          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg           \n" +
            "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;    \n" +
            "			/* [S] - Add Time line log for delete shipment request */   \n" +
            "			SELECT GROUP_CONCAT(note) INTO @lvNotes FROM Shipping_Request  \n" +
            "			WHERE FIND_IN_SET(id,IDs);	  \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Shipment request removed\");    \n" +
            "			SET @lvEventDescription = CONCAT(\"Shipment request of \\\"\",@lvNotes,\"\\\" removed by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,8,NULL,deletedBy,3);  /* 3 = DELETE */    \n" +
            "			/* [E] - Add Time line log for delete shipment request */   \n" +
            "  \n" +
            "			SELECT * FROM tempShippingRequest;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempShippingRequest;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempShippingRequest;           \n" +
            "END IF;          \n" +
            "IF tableName=\"chart_rawdata_category\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg           \n" +
            "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)          \n" +
            "            UNION ALL          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg           \n" +
            "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempChartRawdataCategory;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempChartRawdataCategory;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempChartRawdataCategory;           \n" +
            "END IF;          \n" +
            "IF tableName=\"component_standard\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg           \n" +
            "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandard;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempcomponentStandard;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempcomponentStandard;           \n" +
            "END IF;          \n" +
            "IF tableName=\"component_standard_class\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg           \n" +
            "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');          \n" +
            "           /*  UNION ALL          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg           \n" +
            "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt2 FROM @SQL2;          \n" +
            "			EXECUTE stmt2;          \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandardClass;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempcomponentStandardClass;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempcomponentStandardClass;           \n" +
            "END IF;          \n" +
            "IF tableName=\"rfq_lineitems\" THEN          \n" +
            "		SELECT 0 TotalCount, '' Message;          \n" +
            "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "		PREPARE stmt1 FROM @SQL1;          \n" +
            "		EXECUTE stmt1;                      \n" +
            "END IF;          \n" +
            "IF tableName=\"requirement\" THEN          \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg           \n" +
            "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM temprequirements)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM temprequirements;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM temprequirements;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE temprequirements;           \n" +
            "END IF;          \n" +
            "IF tableName=\"workorder_trans_packagingdetail\" THEN     \n" +
            "		/* [S] - Add Time line log for delete work order transaction packing details */    \n" +
            "		SELECT  (SELECT woNumber FROM workorder WHERE woID = wtpd.woID),  \n" +
            "			(SELECT opName FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL),  \n" +
            "			(SELECT woOPID FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL)  \n" +
            "			INTO @lvWoNumber , @lvOpName ,@lvWoOPID   \n" +
            "		FROM workorder_trans_packagingdetail wtpd   \n" +
            "		WHERE wtpd.woTransPackagingDetailID = IDs AND wtpd.deletedAt IS NULL  /* here ids multiple but need one record only so */;  \n" +
            "		SET @lvEventTitle = CONCAT(\"Box serial details removed from work order operation\");    \n" +
            "		SET @lvEventDescription = CONCAT(\"Box serial details removed from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.17,CONCAT('scanbadge/scan/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */    \n" +
            "		/* [E] - Add Time line log for delete work order transaction packing details */   \n" +
            "  \n" +
            "		SELECT 0 TotalCount, '' Message;          \n" +
            "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		          \n" +
            "		PREPARE stmt1 FROM @SQL1;          \n" +
            "		EXECUTE stmt1;                      \n" +
            "END IF;          \n" +
            "IF tableName=\"customer_addresses\" THEN          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)          \n" +
            "			UNION ALL          \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg           \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM tempcustomer_addresses;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM tempcustomer_addresses;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE tempcustomer_addresses;           \n" +
            "END IF;          \n" +
            "IF tableName=\"rfqforms\" THEN          \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg           \n" +
            "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in           \n" +
            "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');          \n" +
            "  \n" +
            "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in           \n" +
            "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		          \n" +
            "  \n" +
            "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in           \n" +
            "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		          \n" +
            "  \n" +
            "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in           \n" +
            "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		          \n" +
            "  \n" +
            "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in           \n" +
            "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');          \n" +
            "  \n" +
            "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		          \n" +
            "  \n" +
            "            PREPARE stmt1 FROM @SQL1;          \n" +
            "			PREPARE stmt2 FROM @SQL2;          \n" +
            "            PREPARE stmt3 FROM @SQL3;          \n" +
            "			PREPARE stmt4 FROM @SQL4;          \n" +
            "            PREPARE stmt5 FROM @SQL5;          \n" +
            "			PREPARE stmt6 FROM @SQL6;          \n" +
            "  \n" +
            "			EXECUTE stmt1;          \n" +
            "			EXECUTE stmt2;          \n" +
            "            EXECUTE stmt3;          \n" +
            "			EXECUTE stmt4;          \n" +
            "            EXECUTE stmt5;          \n" +
            "			EXECUTE stmt6;          \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM temprfqformss;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM temprfqformss;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE temprfqformss;           \n" +
            "END IF;          \n" +
            "IF tableName=\"rfq_mountingtypemst\" THEN          \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
            "		    FROM           \n" +
            "		    (          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg           \n" +
            "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1) ) q');          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;          \n" +
            "	EXECUTE stmt;          \n" +
            "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "			SELECT * FROM temprfqpartcategory;          \n" +
            "		ELSE          \n" +
            "			SELECT * FROM temprfqpartcategory;          \n" +
            "  \n" +
            "		END IF;          \n" +
            "		DROP TABLE temprfqpartcategory;           \n" +
            "  \n" +
            "END IF;          \n" +
            "IF tableName=\"who_bought_who\" THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "END IF;          \n" +
            "IF tableName=\"rfq_parttypemst\" THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "END IF;          \n" +
            "IF tableName=\"rfq_lineitems_errorcode\" THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "END IF;          \n" +
            "IF tableName=\"rfq_lineitems_keywords\" THEN          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
            "			PREPARE stmt1 FROM @SQL1;          \n" +
            "			EXECUTE stmt1;          \n" +
            "  \n" +
            "END IF;          \n" +
            "END;  \n" +
            /* **************************** New Script -> 02-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_WorkorderTransfer` ;  \n" +
            "CREATE PROCEDURE `Sproc_WorkorderTransfer`(  \n" +
            "        IN fromWOOPID INT,  \n" +
            "        IN toWOOPID INT,  \n" +
            "        IN transferQty INT,  \n" +
            "        IN description TEXT,  \n" +
            "        IN userID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            " DECLARE insertedWoTransID INT(11);  \n" +
            " DECLARE lvfromOpName VARCHAR(250);  \n" +
            " DECLARE lvfromWoNumber VARCHAR(250);  \n" +
            " DECLARE lvtoOpName VARCHAR(250);  \n" +
            " DECLARE lvtoWoNumber VARCHAR(250);  \n" +
            "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
            "BEGIN  \n" +
            "	ROLLBACK;  \n" +
            "  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS `tempWTE`;  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS `tempOPID`;	  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS `tempError`;  \n" +
            "	RESIGNAL;  \n" +
            "END;  \n" +
            "  \n" +
            "  \n" +
            "CREATE TEMPORARY TABLE `tempError` (id TINYINT(1));  \n" +
            " # Get from and to work order operation details  \n" +
            " SELECT wo.woID, wo.opID, wo.opNumber INTO @fromWOID, @fromOPID, @fromOPNumber FROM workorder_operation wo WHERE IFNULL(wo.isDeleted, 0) = 0 AND wo.woOPID = fromWOOPID;  \n" +
            " SELECT wo.woID, wo.opID INTO @toWOID, @toOPID FROM workorder_operation wo WHERE IFNULL(wo.isDeleted, 0) = 0 AND wo.woOPID = toWOOPID;  \n" +
            "  \n" +
            " # Check if any operation is running or not  \n" +
            " CREATE TEMPORARY TABLE `tempWTE`  \n" +
            " SELECT op.opID, op.opName, op.opNumber, CONCAT(emp.firstName , ' ' , emp.lastName) AS fullName   \n" +
            " FROM Workorder_Trans_Empinout AS wte  \n" +
            " LEFT OUTER JOIN operations AS op ON wte.opID = op.opID AND op.deletedAt IS NULL  \n" +
            " LEFT OUTER JOIN employees AS emp ON wte.employeeID = emp.id AND emp.deletedAt IS NULL   \n" +
            " WHERE wte.deletedAt IS NULL AND wte.woID = @fromWOID AND wte.checkoutTime IS NULL;  \n" +
            "  \n" +
            " # If operation is running then return  \n" +
            " IF EXISTS (SELECT 1 FROM tempWTE) THEN  \n" +
            "	SELECT 'operation' AS err;  \n" +
            "    SELECT * FROM `tempWTE`;  \n" +
            "	INSERT INTO tempError VALUES (1);  \n" +
            " ELSE  \n" +
            "	# Check if work order is track by serial number  \n" +
            "    SELECT COUNT(1) INTO @woTrackBySerial FROM Workorder AS wo WHERE wo.isOperationTrackBySerialNo = 1 AND woID = @fromWOID AND IFNULL(wo.isDeleted, 0) = 0 LIMIT 1;  \n" +
            "  \n" +
            "	IF (@woTrackBySerial = 1) THEN  \n" +
            "  \n" +
            "        # Get all operations which are followed by current terminated operation  \n" +
            "        CREATE TEMPORARY TABLE `tempOPID`  \n" +
            "        SELECT wo.opID FROM Workorder_Operation AS wo WHERE wo.woID = @fromWOID AND wo.opNumber >= @fromOPNumber AND IFNULL(wo.isDeleted, 0) = 0;  \n" +
            "        # Check total serial numbers which are assigned to current terminated and following operations  \n" +
            "        SELECT IFNULL(COUNT(ws.serialNo),0)  INTO @serialCount FROM Workorder_SerialMst AS ws  \n" +
            "        WHERE ws.woID = @fromWOID AND IFNULL(ws.isTransferred, 0) = 0  \n" +
            "        AND ws.currStatus IN ('1','3','5') AND IFNULL(ws.isDeleted, 0) = 0 AND  \n" +
            "        ws.curropID IN (SELECT opID FROM tempOPID);  \n" +
            "  \n" +
            "        # If total serial number and transfer qty do not match then return  \n" +
            "        IF (@serialCount <> transferQty) THEN  \n" +
            "			SELECT 'serialcount' AS err;  \n" +
            "            SELECT @serialCount AS serialCount;  \n" +
            "			INSERT INTO tempError VALUES (1);       \n" +
            "        END IF;  \n" +
            "	END IF;      \n" +
            " END IF;  \n" +
            "IF NOT EXISTS(SELECT 1 FROM `tempError`) THEN  \n" +
            "	START TRANSACTION;  \n" +
            "  \n" +
            "    # Insert entry into work order transfer table  \n" +
            "    INSERT INTO `workorder_transfer` (`fromWOID`, `fromOPID`, `fromWOOPID`, `toWOID`, `toOPID`, `toWOOPID`, `transferDate`, `transferQty`,  \n" +
            "										`description`, `createdAt`, `createdBy`, `isDeleted`)  \n" +
            "    VALUES (@fromWOID, @fromOPID, fromWOOPID, @toWOID, @toOPID, toWOOPID, UTC_TIMESTAMP(), transferQty,  \n" +
            "		description,UTC_TIMESTAMP(), userID, 0);  \n" +
            "    SET	insertedWoTransID = LAST_INSERT_ID();		  \n" +
            "  \n" +
            "	# Update from work order status to 'Under Termination'  \n" +
            "    UPDATE Workorder SET woStatus = 6, updatedAt =  UTC_TIMESTAMP(), updatedBy = userID WHERE woID = @fromWOID AND IFNULL(isDeleted, 0) = 0;  \n" +
            "    # Update from work order reference to work order and update build qty  \n" +
            "    UPDATE Workorder SET terminateWOID = @fromWOID, buildQty = (IFNULL(buildQty,0) + transferQty), updatedAt =  UTC_TIMESTAMP(), updatedBy = userID WHERE woID = @toWOID AND IFNULL(isDeleted, 0) = 0;  \n" +
            "  \n" +
            "    # Update is terminated flag for current terminated operation  \n" +
            "    UPDATE workorder_operation SET isTerminated = 1, terminateDate = UTC_TIMESTAMP(), updatedAt =  UTC_TIMESTAMP(), updatedBy = userID  \n" +
            "    WHERE woOPID = fromWOOPID AND IFNULL(isDeleted, 0) = 0;  \n" +
            "  \n" +
            "    # Change status to 'Terminated' for follwing operations of current terminated operation  \n" +
            "    UPDATE Workorder_Operation SET opStatus = 2, updatedAt =  UTC_TIMESTAMP(), updatedBy = userID WHERE woID = @fromWOID AND opNumber > @fromOPNumber AND IFNULL(isDeleted, 0) = 0;  \n" +
            "  \n" +
            "    IF (@woTrackBySerial = 1) THEN      \n" +
            "  \n" +
            "		# Insert all serial numbers from from work order into to work order  \n" +
            "        INSERT INTO Workorder_SerialMst (woID, PrefixorSuffix, PreSuffix, dateCode, noofDigit, SerialNo, curropID, currStatus, isDeleted,  \n" +
            "		createdAt, createdBy, serialType, refSerialID)  \n" +
            "        SELECT @toWOID woID, ws.PrefixorSuffix, ws.PreSuffix, ws.dateCode, ws.noofDigit, ws.SerialNo, NULL curropID, 'Idle' currStatus,   \n" +
            "        0 isDeleted, UTC_TIMESTAMP() createdAt, userID createdBy, ws.serialType, ws.id refSerialID  \n" +
            "		FROM Workorder_SerialMst ws WHERE ws.woID = @fromWOID AND IFNULL(ws.isTransferred, 0) = 0 AND ws.currStatus IN ('1','3','5') AND IFNULL(ws.isDeleted, 0) = 0 AND  \n" +
            "		ws.curropID IN (SELECT opID FROM tempOPID);  \n" +
            "  \n" +
            "        # Update is transferred flag to all from work order serial numbers  \n" +
            "        UPDATE Workorder_SerialMst ws SET ws.isTransferred = 1, ws.updatedAt =  UTC_TIMESTAMP(), ws.updatedBy = userID  \n" +
            "		WHERE ws.woID = @fromWOID AND IFNULL(ws.isTransferred, 0) = 0 AND ws.currStatus IN ('1','3','5') AND IFNULL(ws.isDeleted, 0) = 0 AND  \n" +
            "		ws.curropID IN (SELECT opID FROM tempOPID);  \n" +
            "    END IF;  \n" +
            "	/* [S] - Add Time line log for work order operation terminate & transfer */    \n" +
            "	SELECT woop.opName , (SELECT woNumber FROM workorder WHERE woID = woop.woID)  \n" +
            "		INTO lvfromOpName,lvfromWoNumber  \n" +
            "	FROM workorder_operation woop   \n" +
            "	WHERE woOPID = 	fromWOOPID ;  \n" +
            "  \n" +
            "	SELECT woop.opName , (SELECT woNumber FROM workorder WHERE woID = woop.woID)  \n" +
            "		INTO lvtoOpName,lvtoWoNumber  \n" +
            "	FROM workorder_operation woop   \n" +
            "	WHERE woOPID = 	toWOOPID ;  \n" +
            "  \n" +
            "	SELECT CONCAT(firstName,\" \",lastName),EmployeeID INTO @lvempName,@lvEmployeeID  \n" +
            "	FROM users WHERE id=userID AND deletedAt IS NULL;  \n" +
            "  \n" +
            "	SET @lvEventTitle = CONCAT(\"Terminate and transfer quantity from one work order operation to another work order operation\");    \n" +
            "	SET @lvEventDescription = CONCAT(\"Terminate and transfer quantity \\\"\",transferQty,\"\\\" from operation \\\"\",lvfromOpName,\"\\\" of work order \",lvfromWoNumber,  \n" +
            "		\" to operation \\\"\",lvtoOpName,\"\\\" of work order \",lvtoWoNumber,\" by \" ,@lvempName,\".\");	    \n" +
            "	CALL Sproc_AddToTimeline(userID,@lvEventTitle,@lvEventDescription,'workorder_transfer',insertedWoTransID,5.07,CONCAT('scanbadge/scan/travel/',fromWOOPID,\"/\",@lvEmployeeID),userID,1);  /* 1 = CREATE */    \n" +
            "	/* [E] - Add Time line log for work order operation terminate & transfer */    \n" +
            "    COMMIT;  \n" +
            "    SELECT 1 AS `status`;  \n" +
            "END IF;	  \n" +
            "DROP TEMPORARY TABLE IF EXISTS `tempWTE`;  \n" +
            "DROP TEMPORARY TABLE IF EXISTS `tempOPID`;  \n" +
            "DROP TEMPORARY TABLE IF EXISTS `tempError`;  \n" +
            "END;  \n" +
            /* **************************** New Script -> 02-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_pauseEmployeeForOperation` ;  \n" +
            "CREATE PROCEDURE `Sproc_pauseEmployeeForOperation`(  \n" +
            "	IN pWOTransinoutID INT,  \n" +
            "	IN pCreatedBy VARCHAR(255)  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "	DECLARE lvwoNumber VARCHAR(255);  \n" +
            "	DECLARE lvopName VARCHAR(255);  \n" +
            "	DECLARE lvempName VARCHAR(255);  \n" +
            "	DECLARE lvemployeeID INT(11);  \n" +
            "	DECLARE lvopNumber DECIMAL(6,2);  \n" +
            "	DECLARE lvwoOPID INT(11);	  \n" +
            "  \n" +
            "	SELECT @pPauseTime := CONVERT_TZ(NOW(), @@session.time_zone, '+00:00');  \n" +
            "  \n" +
            "	UPDATE workorder_trans_empinout	SET isPaused = 1, updatedBy = pCreatedBy WHERE woTransinoutID = pWOTransinoutID;  \n" +
            "  \n" +
            "	INSERT INTO workorder_trans_emp_pausedet  \n" +
            "		(`woTransinoutID`,`pausedTime`, `createdBy`, `isDeleted`)  \n" +
            "		VALUES   \n" +
            "		(pWOTransinoutID, @pPauseTime, pCreatedBy, 0);  \n" +
            "  \n" +
            "	/* [S] - Add Time line log for pause operation employee to work order operation */  \n" +
            "	SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),  \n" +
            "		(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,  \n" +
            "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID) , wteio.woOPID  \n" +
            "		INTO lvwoNumber,lvopName,lvempName,lvopNumber,lvwoOPID  \n" +
            "	FROM workorder_trans_empinout  wteio  \n" +
            "	WHERE wteio.woTransinoutID = pWOTransinoutID  \n" +
            "	;  \n" +
            "  \n" +
            "	SELECT employeeID INTO lvemployeeID FROM users WHERE id = pCreatedBy;		  \n" +
            "  \n" +
            "	SET @pEventTitle = CONCAT(\"Employee pause for work order operation\");  \n" +
            "	SET @pEventDescription = CONCAT('Employee \"',lvempName,'\" pause for operation \"',lvopName,' (',lvopNumber,')\" of   \n" +
            "		work order ',lvwoNumber,' by ',(SELECT username FROM users WHERE id=pCreatedBy AND deletedAt IS NULL),'.');   \n" +
            "	CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',pWOTransinoutID,5.09,CONCAT('scanbadge/scan/travel/',lvwoOPID,'/', lvemployeeID),pCreatedBy,2);  			  \n" +
            "	/* [E] - Add Time line log for pause operation employee to work order operation */		  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 02-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_resumeEmployeeForOperation` ;  \n" +
            "CREATE PROCEDURE `Sproc_resumeEmployeeForOperation`(  \n" +
            "	IN pWOTransemppausedID INT,  \n" +
            "	IN pWOTransinoutID INT,  \n" +
            "	IN pUpdatedBy VARCHAR(255)  \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "	DECLARE lvwoNumber VARCHAR(255);  \n" +
            "	DECLARE lvopName VARCHAR(255);  \n" +
            "	DECLARE lvempName VARCHAR(255);  \n" +
            "	DECLARE lvemployeeID INT(11);  \n" +
            "	DECLARE lvopNumber DECIMAL(6,2);  \n" +
            "	DECLARE lvwoOPID INT(11);		  \n" +
            "  \n" +
            "	SELECT @pResumeTime := CONVERT_TZ(NOW(), @@session.time_zone, '+00:00');  \n" +
            "  \n" +
            "	UPDATE workorder_trans_empinout	  \n" +
            "	SET isPaused = 0, updatedBy = pUpdatedBy   \n" +
            "	WHERE woTransinoutID = pWOTransinoutID;  \n" +
            "  \n" +
            "	UPDATE workorder_trans_emp_pausedet   \n" +
            "	SET resumeTime=@pResumeTime, totalTime =  TIMESTAMPDIFF(SECOND, pausedTime,@pResumeTime), updatedBy = pUpdatedBy   \n" +
            "	WHERE woTransinoutID = pWOTransinoutID AND woTransemppausedID= pWOTransemppausedID;  \n" +
            "  \n" +
            "	/* [S] - Add Time line log for resume operation employee to work order operation */  \n" +
            "	SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),  \n" +
            "		(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,  \n" +
            "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID) , wteio.woOPID  \n" +
            "		INTO lvwoNumber,lvopName,lvempName,lvopNumber,lvwoOPID  \n" +
            "	FROM workorder_trans_empinout  wteio  \n" +
            "	WHERE wteio.woTransinoutID = pWOTransinoutID  \n" +
            "	;  \n" +
            "  \n" +
            "	SELECT employeeID INTO lvemployeeID FROM users WHERE id = pUpdatedBy;		  \n" +
            "  \n" +
            "	SET @pEventTitle = CONCAT(\"Employee resume for work order operation\");  \n" +
            "	SET @pEventDescription = CONCAT('Employee \"',lvempName,'\" resume for operation \"',lvopName,' (',lvopNumber,')\" of   \n" +
            "		work order ',lvwoNumber,' by ',(SELECT username FROM users WHERE id=pUpdatedBy AND deletedAt IS NULL),'.');   \n" +
            "	CALL Sproc_AddToTimeline(pUpdatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',pWOTransinoutID,5.10,CONCAT('scanbadge/scan/travel/',lvwoOPID,'/', lvemployeeID),pUpdatedBy,2);  			  \n" +
            "	/* [E] - Add Time line log for resume operation employee to work order operation */	  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 02-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (59,'1.00','V1',' Time related sproc and trigger - KETAN '," + userid + ");"
          );
            break;
        case 59:
            allDbChangesArray.push(
            /* **************************** New Script -> 02-08-2018  *********************************** */
            "UPDATE page_detail  \n" +
            "SET pageName = 'Task List' ,menuRoute = 'TASKLIST' ,pageRoute = 'app.task.tasklist' ,  \n" +
            " pageURL = '/tasklist', menuName = 'Task List'    \n" +
            "WHERE pageName = 'Scan Badge' ;  \n" +
            /* **************************** New Script -> 02-08-2018  *********************************** */
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.task.tasklist.traveler'  \n" +
            "WHERE pageName = 'Traveler' ;  \n" +
            /* **************************** New Script -> 02-08-2018  *********************************** */
            "UPDATE page_detail  \n" +
            "SET orderBy = 13  \n" +
            "WHERE pageName = 'Task List' ;  \n" +
            /* **************************** Add Script Version -> 02-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (60,'1.00','V1',' page detail changes for scan badge - KETAN '," + userid + ");"
          );
            break;
        case 60:
            allDbChangesArray.push(
            //            /* **************************** New Script -> 02-08-2018  *********************************** */
          "DROP TABLE IF EXISTS `rfq_assy_quotations`;  \n" +
"CREATE TABLE `rfq_assy_quotations` (  \n" +
"  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
"  `rfqAssyID` int(11) NOT NULL,  \n" +
"  `rfqAssyQtyID` int(11) NOT NULL,  \n" +
"  `rfqAssyQtyTurnTimeID` int(11) NOT NULL,  \n" +
"  `requestedQty` int(11) DEFAULT NULL,  \n" +
"  `turnTime` int(11) DEFAULT NULL,  \n" +
"  `timeType` varchar(1) DEFAULT NULL,  \n" +
"  `unitPrice` decimal(16,6) DEFAULT NULL,  \n" +
"  `materialCost` decimal(16,6) DEFAULT NULL,  \n" +
"  `shippingCost` decimal(16,6) DEFAULT NULL,  \n" +
"  `excessQtyTotalPrice` decimal(16,6) DEFAULT NULL,  \n" +
"  `total` decimal(16,6) DEFAULT NULL,  \n" +
"  `commissionProfitPercentage` decimal(5,2) DEFAULT NULL,  \n" +
"  `commissionProfitDollar` decimal(16,6) DEFAULT NULL,  \n" +
"  `commissionProfitBase` decimal(16,6) DEFAULT NULL,  \n" +
"  `materialProfitPercentage` decimal(5,2) DEFAULT NULL,  \n" +
"  `materialProfitDollar` decimal(16,6) DEFAULT NULL,  \n" +
"  `materialMargin` decimal(16,6) DEFAULT NULL,  \n" +
"  `isDeleted` tinyint(1) DEFAULT '0',  \n" +
"  `createdBy` varchar(255) NOT NULL,  \n" +
"  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
"  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
"  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
"  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
"  `deletedAt` datetime DEFAULT NULL,  \n" +
"  PRIMARY KEY (`id`),  \n" +
"  KEY `FK_rfq_assy_quotations_rfqAssyID` (`rfqAssyID`),  \n" +
"  KEY `FK_rfq_assy_quotations_rfqAssyQtyID` (`rfqAssyQtyID`),  \n" +
"  KEY `FK_rfq_assy_quotations_rfqAssyQtyTurnTimeID` (`rfqAssyQtyTurnTimeID`),  \n" +
"  CONSTRAINT `FK_rfq_assy_quotations_rfqAssyID` FOREIGN KEY (`rfqAssyID`) REFERENCES `rfq_assemblies` (`id`),  \n" +
"  CONSTRAINT `FK_rfq_assy_quotations_rfqAssyQtyID` FOREIGN KEY (`rfqAssyQtyID`) REFERENCES `rfq_assy_quantity` (`id`),  \n" +
"  CONSTRAINT `FK_rfq_assy_quotations_rfqAssyQtyTurnTimeID` FOREIGN KEY (`rfqAssyQtyTurnTimeID`) REFERENCES `rfq_assy_quantity_turn_time` (`id`)  \n" +
") ENGINE=InnoDB DEFAULT CHARSET=utf8;  \n" +
   /* **************************** Add Script Version -> 02-08-2018 *********************************** */
   "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
"CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(  \n" +
"	IN ppageIndex INT(11),  \n" +
"	IN precordPerPage INT(11),  \n" +
"	IN pOrderBy VARCHAR(255),  \n" +
"	IN pWhereClause VARCHAR(21844),  \n" +
"	IN rfqAssyID INT(11),  \n" +
"	IN puserID INT (11)  \n" +
"    )  \n" +
"BEGIN  \n" +
"  \n" +
"	    DECLARE pOffset INT(11);  \n" +
"	    DECLARE rowNumWhere VARCHAR(255) ;  \n" +
"	    SET @SQL = NULL;  \n" +
"	    IF (pOrderBy IS NOT NULL) THEN  \n" +
"			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
"		ELSE  \n" +
"			SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPn desc\") ;   \n" +
"		END IF;	  \n" +
"  \n" +
"  \n" +
"		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
"			SET pWhereClause = '1=1' ;  \n" +
"		END IF;	  \n" +
"  \n" +
"		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
"			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
"			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
"		ELSE	  \n" +
"			SET rowNumWhere = '';  \n" +
"		END IF;	  \n" +
"		SELECT  \n" +
"                     GROUP_CONCAT(DISTINCT  \n" +
"				CONCAT(  \n" +
"					'Max((IF(ra.requestQty = ''',  \n" +
"						ra.requestQty,  \n" +
"					''', rq.finalPrice, null))) AS ''',  \n" +
"						ra.requestQty,''''  \n" +
"					)  \n" +
"					) INTO @SQL  \n" +
"		FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
"		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
"		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
"		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;  \n" +
"  \n" +
"			IF(@SQL IS NOT NULL) THEN  \n" +
"				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS  \n" +
"					SELECT   \n" +
"					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,    \n" +
"					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,  \n" +
"					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn   \n" +
"                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla   \n" +
"                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',   \n" +
"					@SQL, ' FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
"					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID  \n" +
"					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id  \n" +
"					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');  \n" +
"  \n" +
"			ELSE  \n" +
"				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS  \n" +
"					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,  \n" +
"					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn   \n" +
"                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla   \n" +
"                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl  \n" +
"					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	  \n" +
"			END IF;  \n" +
"			PREPARE stmt FROM @SQLStatement;  \n" +
"			EXECUTE stmt;	  \n" +
"  \n" +
"  \n" +
"			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );  \n" +
"			PREPARE query1 FROM @SQLStatement1;  \n" +
"			EXECUTE query1;  \n" +
"			DEALLOCATE PREPARE query1;  \n" +
"  \n" +
"  \n" +
"			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
"			PREPARE query2 FROM @SQLStatement2;  \n" +
"			EXECUTE query2;  \n" +
"			DEALLOCATE PREPARE query2;  \n" +
"  \n" +
"			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
"  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
"  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
"   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);  \n" +
"			PREPARE query3 FROM @SQLStatement3;  \n" +
"			EXECUTE query3;  \n" +
"			DEALLOCATE PREPARE query3;  \n" +
"  \n" +
"			SET @SQLStatement4 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );  \n" +
"			PREPARE query4 FROM @SQLStatement4;  \n" +
"			EXECUTE query4;  \n" +
"			DEALLOCATE PREPARE query4;  \n" +
"  \n" +
"			SET @SQLStatement5 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.turnType,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt  \n" +
"  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id  \n" +
"   WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);  \n" +
"			PREPARE query5 FROM @SQLStatement5;  \n" +
"			EXECUTE query5;  \n" +
"			DEALLOCATE PREPARE query5;  \n" +
"  \n" +
"			DROP TEMPORARY TABLE consolidatetemp;    \n" +
"    END;  \n" +
    /* **************************** Add Script Version -> 02-08-2018 *********************************** */
                          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                           "VALUES (61,'1.00','V1',' Add table for rfq quotations and Alter Sproc_GetRFQConsolidateRfqLineItem sp-Champak '," + userid + ");"
                            );
            break;
        case 61:
            allDbChangesArray.push(
            /* **************************** New Script -> 02-08-2018  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetRFQNotQuotedLineItems` ;  \n" +
              "CREATE PROCEDURE `Sproc_GetRFQNotQuotedLineItems`(          \n" +
              "	IN ppageIndex INT(11),          \n" +
              "	IN precordPerPage INT(11),          \n" +
              "	IN pOrderBy VARCHAR(255),          \n" +
              "	IN pWhereClause VARCHAR(21844),          \n" +
              "	IN rfqAssyID INT(11),          \n" +
              "	IN puserID INT (11)    \n" +
              "    )  \n" +
              "BEGIN          \n" +
              "  \n" +
              "	    DECLARE pOffset INT(11);          \n" +
              "	    DECLARE rowNumWhere VARCHAR(255) ;      \n" +
              "	    SET @SQL = NULL;            \n" +
              "	    SET @SQL1 = NULL;             \n" +
              "	    IF (pOrderBy IS NOT NULL) THEN          \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
              "		ELSE          \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;           \n" +
              "		END IF;	          \n" +
              "  \n" +
              "  \n" +
              "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN          \n" +
              "			SET pWhereClause = '1=1' ;          \n" +
              "		END IF;	          \n" +
              "  \n" +
              "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
              "			SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
              "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
              "		ELSE	          \n" +
              "			SET rowNumWhere = '';          \n" +
              "		END IF;	          \n" +
              "		SELECT          \n" +
              "                      GROUP_CONCAT(DISTINCT          \n" +
              "				CONCAT(          \n" +
              "					'Max((IF(ra.requestQty = ''',          \n" +
              "						ra.requestQty,          \n" +
              "					''', rq.finalPrice, null))) AS ''',          \n" +
              "						ra.requestQty,''''          \n" +
              "					)          \n" +
              "					),      \n" +
              "			GROUP_CONCAT(DISTINCT          \n" +
              "				CONCAT(          \n" +
              "					'Max((IF(ra.requestQty = ''',          \n" +
              "						ra.requestQty,          \n" +
              "					''', rq.finalPrice, null))) IS NULL'          \n" +
              "					) SEPARATOR ' OR '         \n" +
              "					)      \n" +
              "				INTO @SQL, @SQL1      \n" +
              "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq          \n" +
              "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID          \n" +
              "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id          \n" +
              "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;        \n" +
              "			IF(@SQL IS NOT NULL) THEN          \n" +
              "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS          \n" +
              "					SELECT           \n" +
              "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,            \n" +
              "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,          \n" +
              "					(SELECT GROUP_CONCAT(IFNULL(mf.mfgCode,\"N/A\"),\"|\",rla.mfgPN)AS mfgPn           \n" +
              "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN mfgcodemst mf ON           \n" +
              "                               rla.mfgCodeID=mf.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',           \n" +
              "					@SQL,' FROM rfq_consolidated_mfgpn_lineitem rl          \n" +
              "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID          \n" +
              "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id          \n" +
              "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');        \n" +
              "  \n" +
              "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @SQL1);      \n" +
              "  \n" +
              "			ELSE          \n" +
              "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS          \n" +
              "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,          \n" +
              "					(SELECT GROUP_CONCAT(IFNULL(mf.mfgCode,\"N/A\"),\"|\",rla.mfgPN)AS mfgPn           \n" +
              "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN mfgcodemst mf ON           \n" +
              "                               rla.mfgCodeID=mf.id WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl          \n" +
              "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID');	          \n" +
              "			END IF;           \n" +
              "			PREPARE stmt FROM @SQLStatement;          \n" +
              "			EXECUTE stmt;	          \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );          \n" +
              "			PREPARE query1 FROM @SQLStatement1;          \n" +
              "			EXECUTE query1;          \n" +
              "			DEALLOCATE PREPARE query1;          \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
              "			PREPARE query2 FROM @SQLStatement2;          \n" +
              "			EXECUTE query2;          \n" +
              "			DEALLOCATE PREPARE query2;          \n" +
              "  \n" +
              "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq          \n" +
              "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID          \n" +
              "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id          \n" +
              "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);          \n" +
              "			PREPARE query3 FROM @SQLStatement3;          \n" +
              "			EXECUTE query3;          \n" +
              "			DEALLOCATE PREPARE query3;          \n" +
              "  \n" +
              "  			SET @SQLStatement4 = CONCAT(\"  \n" +
              "				SELECT requestQty,   \n" +
              "					finalPrice,   \n" +
              "					unitPrice,  \n" +
              "					supplier,   \n" +
              "					selectedMpn,   \n" +
              "					selectionMode,  \n" +
              "					qtyID,   \n" +
              "					consolidateID,  \n" +
              "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus  \n" +
              "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq       \n" +
              "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID   \n" +
              "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");          \n" +
              "			PREPARE query4 FROM @SQLStatement4;          \n" +
              "			EXECUTE query4;          \n" +
              "			DEALLOCATE PREPARE query4;          \n" +
              "  \n" +
              "			DROP TEMPORARY TABLE consolidatetemp;            \n" +
              "    END;  \n" +
            /* **************************** New Script -> 02-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQExcessMaterialLineItems` ;  \n" +
              "CREATE PROCEDURE `Sproc_GetRFQExcessMaterialLineItems`(          \n" +
              "	IN ppageIndex INT(11),          \n" +
              "	IN precordPerPage INT(11),          \n" +
              "	IN pOrderBy VARCHAR(255),          \n" +
              "	IN pWhereClause VARCHAR(21844),          \n" +
              "	IN rfqAssyID INT(11),          \n" +
              "	IN puserID INT (11)    \n" +
              "    )  \n" +
              "BEGIN          \n" +
              "  \n" +
              "	    DECLARE pOffset INT(11);          \n" +
              "	    DECLARE rowNumWhere VARCHAR(255) ;      \n" +
              "	    SET @SQLString = NULL;     \n" +
              "	    SET @HavingClause = NULL;     \n" +
              "	    SET SESSION group_concat_max_len = 150000;      \n" +
              "	    IF (pOrderBy IS NOT NULL) THEN          \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
              "		ELSE          \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` desc\") ;           \n" +
              "		END IF;	          \n" +
              "  \n" +
              "  \n" +
              "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN          \n" +
              "			SET pWhereClause = '1=1' ;          \n" +
              "		END IF;	          \n" +
              "  \n" +
              "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
              "			SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
              "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
              "		ELSE	          \n" +
              "			SET rowNumWhere = '';          \n" +
              "		END IF;	          \n" +
              "		SELECT          \n" +
              "                      GROUP_CONCAT(DISTINCT          \n" +
              "				CONCAT(          \n" +
              "					'Max((IF(ra.requestQty = ''',          \n" +
              "						ra.requestQty,          \n" +
              "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),     \n" +
              "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),     \n" +
              "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) AS ''',          \n" +
              "						ra.requestQty,''''          \n" +
              "					)          \n" +
              "					),    \n" +
              "  \n" +
              "                      GROUP_CONCAT(DISTINCT          \n" +
              "				CONCAT(          \n" +
              "					'Max((IF(ra.requestQty = ''',          \n" +
              "						ra.requestQty,          \n" +
              "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),     \n" +
              "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),     \n" +
              "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) > 0'             \n" +
              "					) SEPARATOR ' OR '         \n" +
              "					)    \n" +
              "				INTO @SQLString, @HavingClause     \n" +
              "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq          \n" +
              "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID          \n" +
              "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id          \n" +
              "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;        \n" +
              "			IF(@SQLString IS NOT NULL) THEN          \n" +
              "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS          \n" +
              "					SELECT           \n" +
              "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,            \n" +
              "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,          \n" +
              "					(SELECT GROUP_CONCAT(rla.PIDCode)AS mfgPn           \n" +
              "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',           \n" +
              "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl          \n" +
              "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID          \n" +
              "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id          \n" +
              "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');        \n" +
              "  \n" +
              "				SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);      \n" +
              "			ELSE          \n" +
              "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS          \n" +
              "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,          \n" +
              "					(SELECT GROUP_CONCAT(rla.PIDCode)AS mfgPn           \n" +
              "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl          \n" +
              "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID');	          \n" +
              "			END IF;      \n" +
              "			PREPARE stmt FROM @SQLStatement;          \n" +
              "			EXECUTE stmt;	          \n" +
              "  \n" +
              "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );          \n" +
              "			PREPARE query1 FROM @SQLStatement1;          \n" +
              "			EXECUTE query1;          \n" +
              "			DEALLOCATE PREPARE query1;          \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
              "			PREPARE query2 FROM @SQLStatement2;          \n" +
              "			EXECUTE query2;          \n" +
              "			DEALLOCATE PREPARE query2;          \n" +
              "  \n" +
              "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq          \n" +
              "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID          \n" +
              "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id          \n" +
              "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);          \n" +
              "			PREPARE query3 FROM @SQLStatement3;          \n" +
              "			EXECUTE query3;          \n" +
              "			DEALLOCATE PREPARE query3;          \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement4 = CONCAT(\"SELECT requestQty, finalPrice, unitPrice,supplier, selectedMpn, selectionMode,qtyID, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq       \n" +
              "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID WHERE consolidateID IN (select id from consolidatetemp)\");          \n" +
              "			PREPARE query4 FROM @SQLStatement4;          \n" +
              "			EXECUTE query4;          \n" +
              "			DEALLOCATE PREPARE query4;          \n" +
              "  \n" +
              "  \n" +
              "			DROP TEMPORARY TABLE consolidatetemp;            \n" +
              "    END;  \n" +
            /* **************************** Add Script Version -> 02-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (62,'1.00','V1','Not Quoted and Excess Material SP Updated - Vaibhav '," + userid + ");"
            );
            break;
        case 62:
            allDbChangesArray.push(
          //  /* **************************** New Script -> 03-08-2018  *********************************** */
                                         "ALTER TABLE component  \n" +
                          "ADD CONSTRAINT FK_component_mountingTypeID  \n" +
                          "FOREIGN KEY (mountingTypeID) REFERENCES rfq_mountingtypemst(id);  \n" +
                          "  \n" +
                          "ALTER TABLE component  \n" +
                          "ADD CONSTRAINT FK_component_uom  \n" +
                          "FOREIGN KEY (uom) REFERENCES uoms(id);  \n" +
                          "  \n" +
                          "ALTER TABLE component  \n" +
                          "ADD CONSTRAINT FK_component_replacementPartID  \n" +
                          "FOREIGN KEY (replacementPartID) REFERENCES component(id);  \n" +
                          "  \n" +
                          "insert into `genericcategory` (`gencCategoryName`, `gencCategoryCode`, `categoryType`, `displayOrder`, `isDeleted`, `parentGencCategoryID`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `systemGenerated`, `colorCode`)   \n" +
                          "values('Active','001','Part Status','1.00','0',NULL,'1','2018-08-03 05:26:19','2018-08-03 05:26:19',NULL,'1',NULL,NULL,'0',NULL);  \n" +
                          "  \n" +
                          "insert into `genericcategory` (`gencCategoryName`, `gencCategoryCode`, `categoryType`, `displayOrder`, `isDeleted`, `parentGencCategoryID`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `systemGenerated`, `colorCode`)   \n" +
                          "values('Obsolete','002','Part Status','2.00','0',NULL,'1','2018-08-03 05:27:57','2018-08-03 05:27:57',NULL,'1',NULL,NULL,'0',NULL);  \n" +
                          "  \n" +
                          "insert into `genericcategory` (`gencCategoryName`, `gencCategoryCode`, `categoryType`, `displayOrder`, `isDeleted`, `parentGencCategoryID`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `systemGenerated`, `colorCode`)   \n" +
                          "values('Last Time Buy','003','Part Status','3.00','0',NULL,'1','2018-08-03 05:28:28','2018-08-03 05:28:28',NULL,'1',NULL,NULL,'0',NULL);  \n" +
                          "  \n" +
                          "insert into `genericcategory` (`gencCategoryName`, `gencCategoryCode`, `categoryType`, `displayOrder`, `isDeleted`, `parentGencCategoryID`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `systemGenerated`, `colorCode`)   \n" +
                          "values('Not For New Design','004','Part Status','4.00','0',NULL,'1','2018-08-03 05:28:51','2018-08-03 05:28:51',NULL,'1',NULL,NULL,'0',NULL);  \n" +
                          "  \n" +
                          "insert into `genericcategory` (`gencCategoryName`, `gencCategoryCode`, `categoryType`, `displayOrder`, `isDeleted`, `parentGencCategoryID`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `systemGenerated`, `colorCode`)   \n" +
                          "values('Discountinued At Digi-Key','005','Part Status','5.00','0',NULL,'1','2018-08-03 05:29:38','2018-08-03 05:29:38',NULL,'1',NULL,NULL,'0',NULL);  \n" +
                          "  \n" +
                          "insert into `genericcategory` (`gencCategoryName`, `gencCategoryCode`, `categoryType`, `displayOrder`, `isDeleted`, `parentGencCategoryID`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `systemGenerated`, `colorCode`)   \n" +
                          "values('Preliminary','006','Part Status','6.00','0',NULL,'1','2018-08-03 05:30:26','2018-08-03 05:30:26',NULL,'1',NULL,NULL,'0',NULL);  \n" +
                          "  \n" +
                          "  \n" +
                          "UPDATE component c SET c.partStatus =   \n" +
                          "(SELECT a.gencCategoryID FROM genericcategory a WHERE a.categoryType = 'Part Status' AND a.gencCategoryName = partStatus);  \n" +
                          "  \n" +
                          "UPDATE component c SET c.partStatus =   \n" +
                          "(SELECT a.gencCategoryID FROM genericcategory a WHERE a.categoryType = 'Part Status' AND a.gencCategoryName = 'Active')  \n" +
                          "WHERE c.partStatus IS NULL;  \n" +
                          "  \n" +
                          "alter table component modify column partStatus int;  \n" +
                          "  \n" +
                          "ALTER TABLE component  \n" +
                          "ADD CONSTRAINT FK_component_partStatus  \n" +
                          "FOREIGN KEY (partStatus) REFERENCES genericcategory(gencCategoryID);  \n" +
                          "  \n" +
                          "ALTER TABLE component  \n" +
                          "ADD CONSTRAINT FK_component_rfq_parttypemst  \n" +
                          "FOREIGN KEY (partTypeID) REFERENCES rfq_parttypemst(id);  \n" +
          //  /* **************************** Add Script Version -> 03-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (63,'1.00','V1',' Alter component for add frogin key- Mona '," + userid + ");"
            );
            break;
        case 63:
            allDbChangesArray.push(
           //  /* **************************** New Script -> 03-08-2018  *********************************** */                    
           "drop procedure if exists Sproc_checkDelete;  \n" +
           "CREATE PROCEDURE `Sproc_checkDelete`(          \n" +
           "	IN tableName VARCHAR(255),          \n" +
           "	IN IDs LONGTEXT,          \n" +
           "	IN deletedBy INT,          \n" +
           "	IN entityID VARCHAR(255),          \n" +
           "	IN refrenceIDs LONGTEXT          \n" +
           "    )  \n" +
           "BEGIN          \n" +
           "	DECLARE vWoID1 INT(11);          \n" +
           "	DECLARE vOpID1 INT(11);          \n" +
           "	DECLARE vSerialNo1 VARCHAR(50);          \n" +
           "	DECLARE vProdStatus1 VARCHAR(5);          \n" +
           "	DECLARE vWoTransID1 INT(11);          \n" +
           "	DECLARE vQty1 INT(11);          \n" +
           "	DECLARE vOpID2 INT(11);          \n" +
           "	DECLARE vProdstatus2 VARCHAR(5);          \n" +
           "  \n" +
           "IF tableName='employees' THEN          \n" +
           " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)          \n" +
           "	   UNION ALL                                \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "           UNION ALL           \n" +
           "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND er.finalStatusInit IN(',IDs,') AND er.initiateBy IN(',IDs,') LIMIT 1)          \n" +
           "	   UNION ALL          \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	UNION ALL          \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL          \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL          \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL          \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL          \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	 UNION ALL          \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL          \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND wr.reqGenEmployeeID IN(',IDs,') and wr.woAuthorID IN(',IDs,') and wr.accRejBy IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL           \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND wr.commentemployeeID IN(',IDs,') AND wr.accRejBy IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL          \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND wr.employeeID IN(',IDs,') AND wr.requstedEmployeeID IN(',IDs,') LIMIT 1)           \n" +
           "	  UNION ALL              \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE wt.checkinEmployeeID IN(',IDs,') AND wt.checkoutEmployeeID IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL             \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	 UNION ALL           \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	 UNION ALL           \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	 UNION ALL           \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND wthu.holdEmployeeId IN(',IDs,') and wthu.unHoldEmployeeId IN(',IDs,') LIMIT 1)          \n" +
           "	UNION ALL           \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	 UNION ALL           \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)          \n" +
           "	 UNION ALL           \n" +
           "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	 UNION ALL           \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND holdEmployeeId IN(',IDs,') AND unHoldEmployeeId IN(',IDs,')LIMIT 1)          \n" +
           "  \n" +
           "        ) q');          \n" +
           "    PREPARE stmt FROM @SQL;          \n" +
           "    EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempEmp)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');          \n" +
           "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');          \n" +
           "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');          \n" +
           "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
           "  \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			PREPARE stmt4 FROM @SQL4;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "			EXECUTE stmt4;          \n" +
           "			SELECT           \n" +
           "    *          \n" +
           "FROM          \n" +
           "    tempEmp;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempEmp;          \n" +
           "		END IF;          \n" +
           "  \n" +
           "    DROP TABLE tempEmp;          \n" +
           "END IF;          \n" +
           "IF tableName='eco_type_category' THEN          \n" +
           "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)           \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT           \n" +
           "    *          \n" +
           "FROM          \n" +
           "    tempEcoTypeCategory;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempEcoTypeCategory;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempEcoTypeCategory;            \n" +
           "END IF;          \n" +
           "IF tableName='eco_type_values' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)          \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT           \n" +
           "    *          \n" +
           "FROM          \n" +
           "    tempEcoTypeValues;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempEcoTypeValues;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempEcoTypeValues;            \n" +
           "END IF;          \n" +
           "IF tableName='customers' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL           \n" +
           "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL           \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)          \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		          \n" +
           "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
           "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "  \n" +
           "			SELECT           \n" +
           "    *          \n" +
           "FROM          \n" +
           "    tempCustomers;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempCustomers;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempCustomers;            \n" +
           "END IF;          \n" +
           "IF tableName='certificate_standards' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)          \n" +
           "  \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
           "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "  \n" +
           "			SELECT * FROM tempCertificateStandards;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempCertificateStandards;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempCertificateStandards;            \n" +
           "END IF;          \n" +
           "IF tableName='department' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)          \n" +
           "  \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
           "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "  \n" +
           "			SELECT * FROM tempDepartment;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempDepartment;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempDepartment;            \n" +
           "END IF;          \n" +
           "IF tableName='genericcategory' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND eqpGroupID IN(',IDs,') AND eqpSubGroupID IN(',IDs,') AND eqpTypeID IN(',IDs,') AND eqpPossessionID IN(',IDs,') AND eqpOwnershipTypeID IN(',IDs,') AND locationTypeID IN(',IDs,')   LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)          \n" +
           "        UNION ALL        \n" +
           "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)          \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT           \n" +
           "    *          \n" +
           "FROM          \n" +
           "    tempGenericCategory;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempGenericCategory;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempGenericCategory;            \n" +
           "END IF;          \n" +
           "IF tableName='equipment' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)          \n" +
           "         UNION ALL          \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN          \n" +
           "			IF entityID IS NOT NULL THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
           "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "  \n" +
           "			ELSE          \n" +
           "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			END IF;          \n" +
           "  \n" +
           "			SELECT * FROM tempEquipment;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempEquipment;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempEquipment;            \n" +
           "END IF;          \n" +
           "IF tableName='parts' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)          \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempParts)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempParts;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempParts;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempParts;            \n" +
           "END IF;          \n" +
           "IF tableName='master_templates' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)          \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempMasterTemplate;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempMasterTemplate;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempMasterTemplate;            \n" +
           "END IF;          \n" +
           "IF tableName='operations' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "  \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempOperations)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
           "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "  \n" +
           "			SELECT * FROM tempOperations;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempOperations;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempOperations;            \n" +
           "END IF;          \n" +
           "IF tableName='workorder' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL		          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "  \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN          \n" +
           "  \n" +
           "			/* [S] - Add Time line log for delete work order */          \n" +
           "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;           \n" +
           "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");          \n" +
           "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			          \n" +
           "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			          \n" +
           "			/* [E] - Add Time line log for delete work order */			          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update workorder set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
           "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
           "			SET @SQl4 = CONCAT('update workorder_certification set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			PREPARE stmt4 FROM @SQL4;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "			EXECUTE stmt4;          \n" +
           "  \n" +
           "			SELECT * FROM tempWorkorder;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempWorkorder;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempWorkorder;            \n" +
           "END IF;          \n" +
           "IF tableName='roles' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)          \n" +
           "         UNION ALL          \n" +
           "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)          \n" +
           "         UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempRoles)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempRoles;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempRoles;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempRoles;            \n" +
           "END IF;          \n" +
           "IF tableName='standard_class' THEN          \n" +
           " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND classIDs IN(',IDs,') LIMIT 1)          \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempStandardClass;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempStandardClass;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempStandardClass;            \n" +
           "END IF;          \n" +
           "IF tableName='dataelement' THEN          \n" +
           "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			EXECUTE stmt2;          \n" +
           "  \n" +
           "  \n" +
           "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)          \n" +
           "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated          \n" +
           "			FROM dataelement dl WHERE dl.dataElementID = IDs;          \n" +
           "  \n" +
           "  \n" +
           "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */          \n" +
           "  \n" +
           "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"           \n" +
           "							where type IN(''',IDs,''') and deletedAt IS NULL ');		          \n" +
           "				PREPARE stmt3 FROM @SQL3;          \n" +
           "				EXECUTE stmt3;          \n" +
           "  \n" +
           "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */          \n" +
           "  \n" +
           "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */          \n" +
           "  \n" +
           "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs           \n" +
           "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN          \n" +
           "  \n" +
           "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"           \n" +
           "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'           \n" +
           "								AND isAutoIncrement = 1 AND deletedAt IS NULL)          \n" +
           "							 and deletedAt IS NULL ');		          \n" +
           "					     PREPARE stmt4 FROM @SQL4;          \n" +
           "				             EXECUTE stmt4;          \n" +
           "					END IF;	          \n" +
           "				END IF;          \n" +
           "  \n" +
           "  \n" +
           "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN          \n" +
           "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)           \n" +
           "						    AND deletedAt IS NULL');		          \n" +
           "				PREPARE stmt5 FROM @SQL5;          \n" +
           "				EXECUTE stmt5;          \n" +
           "  \n" +
           "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"           \n" +
           "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		          \n" +
           "				PREPARE stmt6 FROM @SQL6;          \n" +
           "				EXECUTE stmt6;          \n" +
           "  \n" +
           "  \n" +
           "			END IF;          \n" +
           "  \n" +
           "  \n" +
           "			SELECT * FROM tempDataElement;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempDataElement;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempDataElement;            \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName='workorder_preprogcomp' THEN          \n" +
           "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM          \n" +
           "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg          \n" +
           "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND          \n" +
           "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator          \n" +
           "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "    SELECT * FROM  tempComponent;          \n" +
           "    SELECT TotalCount FROM  tempComponent;          \n" +
           "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			          \n" +
           "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			EXECUTE stmt2;          \n" +
           "  \n" +
           "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where           \n" +
           "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator          \n" +
           "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			EXECUTE stmt3;          \n" +
           "		SELECT           \n" +
           "			*          \n" +
           "		FROM          \n" +
           "			tempComponent;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempComponent;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempComponent;            \n" +
           "END IF;          \n" +
           "IF tableName='component' THEN          \n" +
           "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)          \n" +
           "  \n" +
           "	  ) q');          \n" +
           "	  PREPARE stmt FROM @SQL;          \n" +
           "	   EXECUTE stmt;          \n" +
           "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN          \n" +
           "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempComponent;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempComponent;          \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempComponent;           \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_cluster\" THEN           \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN          \n" +
           "  \n" +
           "		/* [S] - Add Time line log for delete cluster */          \n" +
           "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster          \n" +
           "		WHERE clusterID = IDs AND deletedAt IS NULL;          \n" +
           "		SELECT woNumber INTO @lvWoNumber FROM workorder          \n" +
           "		WHERE woID = @lvWoID AND deletedAt IS NULL ;          \n" +
           "  \n" +
           "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");          \n" +
           "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
           "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		          \n" +
           "		/* [E] - Add Time line log for delete cluster */          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update workorder_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempWorkorderCluster;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempWorkorderCluster;          \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempWorkorderCluster;           \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_operation\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)          \n" +
           "			 UNION ALL          \n" +
           "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		           \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN          \n" +
           "			 /* [S] - Add Time line log for delete work order operation */          \n" +
           "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName          \n" +
           "			FROM workorder_operation           \n" +
           "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;          \n" +
           "  \n" +
           "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");          \n" +
           "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
           "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		          \n" +
           "			/* [E] - Add Time line log for delete work order operation */          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update workorder_operation set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
           "		SET @SQl2 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
           "		SET @SQl3 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
           "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
           "		SET @SQl5 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
           "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
           "		SET @SQl7 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		          \n" +
           "  \n" +
           "		-- Added for update verify workorder status again after changes in workorder operation          \n" +
           "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;          \n" +
           "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		          \n" +
           "		-- Added for update verify workorder status again after changes in workorder operation          \n" +
           "  \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			PREPARE stmt4 FROM @SQL4;          \n" +
           "			PREPARE stmt5 FROM @SQL5;          \n" +
           "			PREPARE stmt6 FROM @SQL6;          \n" +
           "			PREPARE stmt7 FROM @SQl7;          \n" +
           "			PREPARE stmt8 FROM @SQl7;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "			EXECUTE stmt4;          \n" +
           "			EXECUTE stmt5;          \n" +
           "			EXECUTE stmt6;          \n" +
           "			EXECUTE stmt7;          \n" +
           "			EXECUTE stmt8;          \n" +
           "  \n" +
           "			SELECT * FROM tempWorkorderOperation;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempWorkorderOperation;          \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempWorkorderOperation;           \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_operation_part\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN          \n" +
           "  \n" +
           "		/* [S] - Add Time line log for delete parts from work order */          \n" +
           "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName          \n" +
           "		FROM workorder_operation           \n" +
           "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;          \n" +
           "  \n" +
           "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts          \n" +
           "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");          \n" +
           "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
           "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */          \n" +
           "		/* [E] - Add Time line log for delete parts from work order */          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempWorkorderPart;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempWorkorderPart;          \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempWorkorderPart;           \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_operation_equipment\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN          \n" +
           "  \n" +
           "		/* [S] - Add Time line log for delete Equipment from work order */          \n" +
           "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName          \n" +
           "		FROM workorder_operation           \n" +
           "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	          \n" +
           "  \n" +
           "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment          \n" +
           "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");          \n" +
           "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
           "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		          \n" +
           "		/* [E] -  Add Time line log for delete Equipment from work order */          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');          \n" +
           "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "  \n" +
           "			SELECT * FROM tempWorkorderEquipment;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempWorkorderEquipment;          \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempWorkorderEquipment;           \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_operation_employee\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN          \n" +
           "  \n" +
           "		/* [S] - Add Time line log for delete Employees from work order */          \n" +
           "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName          \n" +
           "		FROM workorder_operation           \n" +
           "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;          \n" +
           "  \n" +
           "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees          \n" +
           "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");          \n" +
           "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
           "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		          \n" +
           "		/* [E] -  Add Time line log for delete Employee from work order */          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempWorkorderEmployee;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempWorkorderEmployee;          \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempWorkorderEmployee;          \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_operation_cluster\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN          \n" +
           "  \n" +
           "		/* [S] - Add Time line log for delete operations from cluster */          \n" +
           "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName          \n" +
           "		FROM workorder_operation           \n" +
           "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;          \n" +
           "  \n" +
           "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster          \n" +
           "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");          \n" +
           "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
           "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		          \n" +
           "		/* [E] -  Add Time line log for delete operations from cluster */		          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		          \n" +
           "  \n" +
           "		-- Added for update verify workorder status again after changes in workorder operation          \n" +
           "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;          \n" +
           "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		          \n" +
           "		-- Added for update verify workorder status again after changes in workorder operation          \n" +
           "  \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "  \n" +
           "			SELECT * FROM tempWorkorderOperationCluster;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempWorkorderOperationCluster;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempWorkorderOperationCluster;           \n" +
           "END IF;          \n" +
           "IF tableName=\"entity\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)          \n" +
           "		    UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempEntity)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempEntity;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempEntity;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempEntity;           \n" +
           "END IF;          \n" +
           "IF tableName=\"salesordermst\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempSalesOrderMst;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempSalesOrderMst;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempSalesOrderMst;           \n" +
           "END IF;          \n" +
           "IF tableName=\"mfgcodemst\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempMFGCodeMst;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempMFGCodeMst;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempMFGCodeMst;           \n" +
           "END IF;          \n" +
           "IF tableName=\"dataelement_transactionvalues_manual\" THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"           \n" +
           "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)          \n" +
           "				and deletedAt IS NULL');		          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			EXECUTE stmt2;          \n" +
           "  \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"shippedassembly\" THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"assemblymst\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)          \n" +
           "		    UNION ALL          \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempassemblymst;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempassemblymst;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempassemblymst;           \n" +
           "END IF;          \n" +
           "IF tableName=\"assembly_revisionmst\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND fromRevisionID IN(',IDs,') AND toRevisionID IN(',IDs,')  LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)          \n" +
           "		    UNION ALL          \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempassembly_revisionmst;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempassembly_revisionmst;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempassembly_revisionmst;           \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_trans_serialno\" THEN          \n" +
           "  \n" +
           "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1           \n" +
           "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;          \n" +
           "  \n" +
           "  \n" +
           "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)          \n" +
           "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)           \n" +
           "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1           \n" +
           "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;          \n" +
           "  \n" +
           "	/* condition to check total serials of type greater than actual production qty */          \n" +
           "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1          \n" +
           "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)           \n" +
           "		> IFNULL(vQty1,0)) THEN          \n" +
           "  \n" +
           "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */          \n" +
           "		IF(vQty1 IS NULL OR vQty1 = 0) THEN           \n" +
           "  \n" +
           "			/* condition to check curr opis and status match with given delete serial */          \n" +
           "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1          \n" +
           "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN          \n" +
           "  \n" +
           "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()          \n" +
           "				WHERE woTransSerialID = IDs;	          \n" +
           "  \n" +
           "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno           \n" +
           "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL          \n" +
           "				ORDER BY woTransSerialID DESC LIMIT 1;          \n" +
           "  \n" +
           "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2          \n" +
           "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	          \n" +
           "  \n" +
           "			ELSE           \n" +
           "				SELECT 'not allowed';          \n" +
           "			END IF;          \n" +
           "  \n" +
           "  \n" +
           "		ELSE           \n" +
           "  \n" +
           "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()          \n" +
           "			WHERE woTransSerialID = IDs;	          \n" +
           "  \n" +
           "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno           \n" +
           "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL          \n" +
           "			ORDER BY woTransSerialID DESC LIMIT 1;          \n" +
           "  \n" +
           "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2          \n" +
           "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	          \n" +
           "  \n" +
           "		END IF;	          \n" +
           "  \n" +
           "  \n" +
           "	ELSE           \n" +
           "		SELECT 'not allowed';		          \n" +
           "	END IF;	          \n" +
           "  \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"br_label_template\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempbr_label_template;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempbr_label_template;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempbr_label_template;           \n" +
           "END IF;          \n" +
           "IF tableName=\"measurement_types\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempMeasurement_types;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempMeasurement_types;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempMeasurement_types;           \n" +
           "END IF;          \n" +
           "IF tableName=\"uoms\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg           \n" +
           "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)          \n" +
           "            UNION ALL          \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg           \n" +
           "            FROM unit_detail_formula WHERE deletedAt IS NULL AND unitID IN (',IDs,')  or toUnitID IN (',IDs,')  LIMIT 1)  \n" +
           "              UNION ALL        \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND uom IN(',IDs,') LIMIT 1)) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempUOMs;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempUOMs;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempUOMs;           \n" +
           "END IF;          \n" +
           "IF tableName=\"jobtypes\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg           \n" +
           "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempJobTypess;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempJobTypess;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempJobTypess;           \n" +
           "END IF;          \n" +
           "IF tableName=\"ordertype\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg           \n" +
           "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempOrderTypes;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempOrderTypes;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempOrderTypes;           \n" +
           "END IF;          \n" +
           "IF tableName=\"reasonmst\" THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName='component_sid_stock' THEN	          \n" +
           "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)          \n" +
           "			UNION ALL          \n" +
           "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		              \n" +
           "		    ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempcomponentsidstock;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempcomponentsidstock;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempcomponentsidstock;           \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName='component_sid_stock_dataelement_values' THEN	          \n" +
           "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "END IF;          \n" +
           "IF tableName='chart_templatemst' THEN	          \n" +
           "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)          \n" +
           "		    ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempcharttemplatemst;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempcharttemplatemst;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempcharttemplatemst;           \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"shipping_request\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg           \n" +
           "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)          \n" +
           "            UNION ALL          \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg           \n" +
           "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempShippingRequest;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempShippingRequest;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempShippingRequest;           \n" +
           "END IF;          \n" +
           "IF tableName=\"chart_rawdata_category\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg           \n" +
           "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)          \n" +
           "            UNION ALL          \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg           \n" +
           "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempChartRawdataCategory;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempChartRawdataCategory;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempChartRawdataCategory;           \n" +
           "END IF;          \n" +
           "IF tableName=\"component_standard\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg           \n" +
           "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempcomponentStandard;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempcomponentStandard;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempcomponentStandard;           \n" +
           "END IF;          \n" +
           "IF tableName=\"component_standard_class\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg           \n" +
           "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');          \n" +
           "           /*  UNION ALL          \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg           \n" +
           "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			EXECUTE stmt2;          \n" +
           "  \n" +
           "			SELECT * FROM tempcomponentStandardClass;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempcomponentStandardClass;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempcomponentStandardClass;           \n" +
           "END IF;          \n" +
           "IF tableName=\"rfq_lineitems\" THEN          \n" +
           "		SELECT 0 TotalCount, '' Message;          \n" +
           "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "		PREPARE stmt1 FROM @SQL1;          \n" +
           "		EXECUTE stmt1;                      \n" +
           "END IF;          \n" +
           "IF tableName=\"requirement\" THEN          \n" +
           "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg           \n" +
           "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM temprequirements)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM temprequirements;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM temprequirements;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE temprequirements;           \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_trans_packagingdetail\" THEN          \n" +
           "		SELECT 0 TotalCount, '' Message;          \n" +
           "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "		PREPARE stmt1 FROM @SQL1;          \n" +
           "		EXECUTE stmt1;                      \n" +
           "END IF;          \n" +
           "IF tableName=\"customer_addresses\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)          \n" +
           "			UNION ALL          \n" +
           "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg           \n" +
           "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempcustomer_addresses;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempcustomer_addresses;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempcustomer_addresses;           \n" +
           "END IF;          \n" +
           "IF tableName=\"rfqforms\" THEN          \n" +
           "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg           \n" +
           "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in           \n" +
           "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');          \n" +
           "  \n" +
           "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in           \n" +
           "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		          \n" +
           "  \n" +
           "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in           \n" +
           "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		          \n" +
           "  \n" +
           "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in           \n" +
           "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		          \n" +
           "  \n" +
           "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in           \n" +
           "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');          \n" +
           "  \n" +
           "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		          \n" +
           "  \n" +
           "            PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "            PREPARE stmt3 FROM @SQL3;          \n" +
           "			PREPARE stmt4 FROM @SQL4;          \n" +
           "            PREPARE stmt5 FROM @SQL5;          \n" +
           "			PREPARE stmt6 FROM @SQL6;          \n" +
           "  \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "            EXECUTE stmt3;          \n" +
           "			EXECUTE stmt4;          \n" +
           "            EXECUTE stmt5;          \n" +
           "			EXECUTE stmt6;          \n" +
           "  \n" +
           "  \n" +
           "  \n" +
           "			SELECT * FROM temprfqformss;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM temprfqformss;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE temprfqformss;           \n" +
           "END IF;          \n" +
           "IF tableName=\"rfq_mountingtypemst\" THEN          \n" +
           "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg           \n" +
           "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1)   \n" +
           "              UNION ALL        \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mountingTypeID IN(',IDs,') LIMIT 1)) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM temprfqpartcategory;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM temprfqpartcategory;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE temprfqpartcategory;           \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"who_bought_who\" THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"rfq_parttypemst\" THEN          \n" +
           "              SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqparttypemst as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (     \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM   \n" +
           "            component WHERE deletedAt IS NULL AND partTypeID IN(',IDs,') LIMIT 1)) q');          \n" +
           "  	        PREPARE stmt FROM @SQL;          \n" +
           "	        EXECUTE stmt;    \n" +
           "          IF (SELECT TotalCount FROM temprfqparttypemst)=0 THEN       \n" +
           "			SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,',   \n" +
           "            deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;    \n" +
           "            	SELECT * FROM temprfqparttypemst;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM temprfqparttypemst;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE temprfqparttypemst;   \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"rfq_lineitems_errorcode\" THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"rfq_lineitems_keywords\" THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "END IF;          \n" +
           "END;  \n" +

           "alter table component add column partStatusText varchar(50);  \n" +
         //  /* **************************** Add Script Version -> 03-08-2018 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
             "VALUES (64,'1.00','V1',' Check Delete- Mona '," + userid + ");"
             );
            break;
        case 64:
            allDbChangesArray.push(
           //  /* **************************** New Script -> 06-08-2018  *********************************** */
          "DROP PROCEDURE IF EXISTS `Sproc_checkDelete`;  \n" +
           "CREATE PROCEDURE `Sproc_checkDelete`(          \n" +
           "	IN tableName VARCHAR(255),          \n" +
           "	IN IDs LONGTEXT,          \n" +
           "	IN deletedBy INT,          \n" +
           "	IN entityID VARCHAR(255),          \n" +
           "	IN refrenceIDs LONGTEXT          \n" +
           "    )  \n" +
           "BEGIN          \n" +
           "	DECLARE vWoID1 INT(11);          \n" +
           "	DECLARE vOpID1 INT(11);          \n" +
           "	DECLARE vSerialNo1 VARCHAR(50);          \n" +
           "	DECLARE vProdStatus1 VARCHAR(5);          \n" +
           "	DECLARE vWoTransID1 INT(11);          \n" +
           "	DECLARE vQty1 INT(11);          \n" +
           "	DECLARE vOpID2 INT(11);          \n" +
           "	DECLARE vProdstatus2 VARCHAR(5);          \n" +
           "  \n" +
           "IF tableName='employees' THEN          \n" +
           " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)          \n" +
           "	   UNION ALL                                \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "           UNION ALL           \n" +
           "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND er.finalStatusInit IN(',IDs,') AND er.initiateBy IN(',IDs,') LIMIT 1)          \n" +
           "	   UNION ALL          \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	UNION ALL          \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL          \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL          \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL          \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL          \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	 UNION ALL          \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL          \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND wr.reqGenEmployeeID IN(',IDs,') and wr.woAuthorID IN(',IDs,') and wr.accRejBy IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL           \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND wr.commentemployeeID IN(',IDs,') AND wr.accRejBy IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL          \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND wr.employeeID IN(',IDs,') AND wr.requstedEmployeeID IN(',IDs,') LIMIT 1)           \n" +
           "	  UNION ALL              \n" +
           "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE wt.checkinEmployeeID IN(',IDs,') AND wt.checkoutEmployeeID IN(',IDs,') LIMIT 1)          \n" +
           "	  UNION ALL             \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	 UNION ALL           \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	 UNION ALL           \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	 UNION ALL           \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND wthu.holdEmployeeId IN(',IDs,') and wthu.unHoldEmployeeId IN(',IDs,') LIMIT 1)          \n" +
           "	UNION ALL           \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	 UNION ALL           \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)          \n" +
           "	 UNION ALL           \n" +
           "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)          \n" +
           "	 UNION ALL           \n" +
           "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND holdEmployeeId IN(',IDs,') AND unHoldEmployeeId IN(',IDs,')LIMIT 1)          \n" +
           "  \n" +
           "        ) q');          \n" +
           "    PREPARE stmt FROM @SQL;          \n" +
           "    EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempEmp)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');          \n" +
           "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');          \n" +
           "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');          \n" +
           "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
           "  \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			PREPARE stmt4 FROM @SQL4;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "			EXECUTE stmt4;          \n" +
           "			SELECT           \n" +
           "    *          \n" +
           "FROM          \n" +
           "    tempEmp;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempEmp;          \n" +
           "		END IF;          \n" +
           "  \n" +
           "    DROP TABLE tempEmp;          \n" +
           "END IF;          \n" +
           "IF tableName='eco_type_category' THEN          \n" +
           "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)           \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT           \n" +
           "    *          \n" +
           "FROM          \n" +
           "    tempEcoTypeCategory;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempEcoTypeCategory;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempEcoTypeCategory;            \n" +
           "END IF;          \n" +
           "IF tableName='eco_type_values' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)          \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT           \n" +
           "    *          \n" +
           "FROM          \n" +
           "    tempEcoTypeValues;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempEcoTypeValues;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempEcoTypeValues;            \n" +
           "END IF;          \n" +
           "IF tableName='customers' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL           \n" +
           "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL           \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)          \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		          \n" +
           "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
           "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "  \n" +
           "			SELECT           \n" +
           "    *          \n" +
           "FROM          \n" +
           "    tempCustomers;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempCustomers;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempCustomers;            \n" +
           "END IF;          \n" +
           "IF tableName='certificate_standards' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)          \n" +
           "  \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
           "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "  \n" +
           "			SELECT * FROM tempCertificateStandards;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempCertificateStandards;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempCertificateStandards;            \n" +
           "END IF;          \n" +
           "IF tableName='department' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)          \n" +
           "  \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
           "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "  \n" +
           "			SELECT * FROM tempDepartment;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempDepartment;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempDepartment;            \n" +
           "END IF;          \n" +
           "IF tableName='genericcategory' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND eqpGroupID IN(',IDs,') AND eqpSubGroupID IN(',IDs,') AND eqpTypeID IN(',IDs,') AND eqpPossessionID IN(',IDs,') AND eqpOwnershipTypeID IN(',IDs,') AND locationTypeID IN(',IDs,')   LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)          \n" +
           "	     UNION ALL        \n" +
           "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)          \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT           \n" +
           "    *          \n" +
           "FROM          \n" +
           "    tempGenericCategory;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempGenericCategory;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempGenericCategory;            \n" +
           "END IF;          \n" +
           "IF tableName='equipment' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)          \n" +
           "  \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN          \n" +
           "			IF entityID IS NOT NULL THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
           "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "  \n" +
           "			ELSE          \n" +
           "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			END IF;          \n" +
           "  \n" +
           "			SELECT * FROM tempEquipment;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempEquipment;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempEquipment;            \n" +
           "END IF;          \n" +
           "IF tableName='parts' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)          \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempParts)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempParts;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempParts;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempParts;            \n" +
           "END IF;          \n" +
           "IF tableName='master_templates' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)          \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempMasterTemplate;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempMasterTemplate;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempMasterTemplate;            \n" +
           "END IF;          \n" +
           "IF tableName='operations' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)          \n" +
           "  \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempOperations)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
           "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "  \n" +
           "			SELECT * FROM tempOperations;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempOperations;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempOperations;            \n" +
           "END IF;          \n" +
           "IF tableName='workorder' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL		          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)          \n" +
           "  \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN          \n" +
           "  \n" +
           "			/* [S] - Add Time line log for delete work order */          \n" +
           "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;           \n" +
           "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");          \n" +
           "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			          \n" +
           "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			          \n" +
           "			/* [E] - Add Time line log for delete work order */			          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update workorder set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');          \n" +
           "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');          \n" +
           "			SET @SQl4 = CONCAT('update workorder_certification set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			PREPARE stmt4 FROM @SQL4;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "			EXECUTE stmt4;          \n" +
           "  \n" +
           "			SELECT * FROM tempWorkorder;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempWorkorder;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempWorkorder;            \n" +
           "END IF;          \n" +
           "IF tableName='roles' THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)          \n" +
           "         UNION ALL          \n" +
           "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)          \n" +
           "         UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempRoles)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempRoles;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempRoles;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempRoles;            \n" +
           "END IF;          \n" +
           "IF tableName='standard_class' THEN          \n" +
           " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND classIDs IN(',IDs,') LIMIT 1)          \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempStandardClass;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempStandardClass;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempStandardClass;            \n" +
           "END IF;          \n" +
           "IF tableName='dataelement' THEN          \n" +
           "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		          \n" +
           "		UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)          \n" +
           "	  ) q');          \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			EXECUTE stmt2;          \n" +
           "  \n" +
           "  \n" +
           "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)          \n" +
           "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated          \n" +
           "			FROM dataelement dl WHERE dl.dataElementID = IDs;          \n" +
           "  \n" +
           "  \n" +
           "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */          \n" +
           "  \n" +
           "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"           \n" +
           "							where type IN(''',IDs,''') and deletedAt IS NULL ');		          \n" +
           "				PREPARE stmt3 FROM @SQL3;          \n" +
           "				EXECUTE stmt3;          \n" +
           "  \n" +
           "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */          \n" +
           "  \n" +
           "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */          \n" +
           "  \n" +
           "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs           \n" +
           "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN          \n" +
           "  \n" +
           "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"           \n" +
           "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'           \n" +
           "								AND isAutoIncrement = 1 AND deletedAt IS NULL)          \n" +
           "							 and deletedAt IS NULL ');		          \n" +
           "					     PREPARE stmt4 FROM @SQL4;          \n" +
           "				             EXECUTE stmt4;          \n" +
           "					END IF;	          \n" +
           "				END IF;          \n" +
           "  \n" +
           "  \n" +
           "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN          \n" +
           "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)           \n" +
           "						    AND deletedAt IS NULL');		          \n" +
           "				PREPARE stmt5 FROM @SQL5;          \n" +
           "				EXECUTE stmt5;          \n" +
           "  \n" +
           "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"           \n" +
           "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		          \n" +
           "				PREPARE stmt6 FROM @SQL6;          \n" +
           "				EXECUTE stmt6;          \n" +
           "  \n" +
           "  \n" +
           "			END IF;          \n" +
           "  \n" +
           "  \n" +
           "			SELECT * FROM tempDataElement;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempDataElement;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempDataElement;            \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName='workorder_preprogcomp' THEN          \n" +
           "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM          \n" +
           "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg          \n" +
           "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND          \n" +
           "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator          \n" +
           "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "    SELECT * FROM  tempComponent;          \n" +
           "    SELECT TotalCount FROM  tempComponent;          \n" +
           "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			          \n" +
           "  \n" +
           "			/* [S] - Add Time line log for delete pre program component */    \n" +
           "			SELECT partNumber,(SELECT woNumber FROM workorder WHERE woID = woppc.woID),  \n" +
           "				(SELECT opName FROM workorder_operation WHERE woOPID = refStkWOOPID)  \n" +
           "			    INTO @lvPartNumber,@lvWoNumber,@lvOpName  \n" +
           "			FROM workorder_preprogcomp woppc    \n" +
           "			WHERE woPreProgCompID = IDs  AND deletedAt IS NULL;     \n" +
           "  \n" +
           "			SET @lvEventTitle = CONCAT(\"Preprogram component deleted from work order\");    \n" +
           "			SET @lvEventDescription = CONCAT(\"Preprogram component \\\"\",@lvPartNumber,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
           "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.14,NULL,deletedBy,3);  /* 3 = DELETE */    \n" +
           "			/* [E] - Add Time line log for delete pre program component */   \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			EXECUTE stmt2;          \n" +
           "  \n" +
           "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where           \n" +
           "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator          \n" +
           "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			EXECUTE stmt3;          \n" +
           "		SELECT           \n" +
           "			*          \n" +
           "		FROM          \n" +
           "			tempComponent;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempComponent;          \n" +
           "		END IF;          \n" +
           "    DROP TABLE tempComponent;            \n" +
           "END IF;          \n" +
           "IF tableName='component' THEN          \n" +
           "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)          \n" +
           "		 UNION ALL          \n" +
           "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)          \n" +
           "  \n" +
           "	  ) q');          \n" +
           "	  PREPARE stmt FROM @SQL;          \n" +
           "	   EXECUTE stmt;          \n" +
           "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN          \n" +
           "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempComponent;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempComponent;          \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempComponent;           \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_cluster\" THEN           \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN          \n" +
           "  \n" +
           "		/* [S] - Add Time line log for delete cluster */          \n" +
           "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster          \n" +
           "		WHERE clusterID = IDs AND deletedAt IS NULL;          \n" +
           "		SELECT woNumber INTO @lvWoNumber FROM workorder          \n" +
           "		WHERE woID = @lvWoID AND deletedAt IS NULL ;          \n" +
           "  \n" +
           "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");          \n" +
           "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
           "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		          \n" +
           "		/* [E] - Add Time line log for delete cluster */          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update workorder_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempWorkorderCluster;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempWorkorderCluster;          \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempWorkorderCluster;           \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_operation\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)          \n" +
           "			 UNION ALL          \n" +
           "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		           \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN          \n" +
           "			 /* [S] - Add Time line log for delete work order operation */          \n" +
           "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName          \n" +
           "			FROM workorder_operation           \n" +
           "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;          \n" +
           "  \n" +
           "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");          \n" +
           "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
           "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		          \n" +
           "			/* [E] - Add Time line log for delete work order operation */          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update workorder_operation set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
           "		SET @SQl2 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
           "		SET @SQl3 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
           "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
           "		SET @SQl5 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
           "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');          \n" +
           "		SET @SQl7 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		          \n" +
           "  \n" +
           "		-- Added for update verify workorder status again after changes in workorder operation          \n" +
           "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;          \n" +
           "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		          \n" +
           "		-- Added for update verify workorder status again after changes in workorder operation          \n" +
           "  \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			PREPARE stmt3 FROM @SQL3;          \n" +
           "			PREPARE stmt4 FROM @SQL4;          \n" +
           "			PREPARE stmt5 FROM @SQL5;          \n" +
           "			PREPARE stmt6 FROM @SQL6;          \n" +
           "			PREPARE stmt7 FROM @SQl7;          \n" +
           "			PREPARE stmt8 FROM @SQl7;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "			EXECUTE stmt3;          \n" +
           "			EXECUTE stmt4;          \n" +
           "			EXECUTE stmt5;          \n" +
           "			EXECUTE stmt6;          \n" +
           "			EXECUTE stmt7;          \n" +
           "			EXECUTE stmt8;          \n" +
           "  \n" +
           "			SELECT * FROM tempWorkorderOperation;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempWorkorderOperation;          \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempWorkorderOperation;           \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_operation_part\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN          \n" +
           "  \n" +
           "		/* [S] - Add Time line log for delete parts from work order */          \n" +
           "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName          \n" +
           "		FROM workorder_operation           \n" +
           "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;          \n" +
           "  \n" +
           "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts          \n" +
           "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");          \n" +
           "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
           "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */          \n" +
           "		/* [E] - Add Time line log for delete parts from work order */          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempWorkorderPart;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempWorkorderPart;          \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempWorkorderPart;           \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_operation_equipment\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN          \n" +
           "  \n" +
           "		/* [S] - Add Time line log for delete Equipment from work order */          \n" +
           "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName          \n" +
           "		FROM workorder_operation           \n" +
           "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	          \n" +
           "  \n" +
           "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment          \n" +
           "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");          \n" +
           "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
           "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		          \n" +
           "		/* [E] -  Add Time line log for delete Equipment from work order */          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');          \n" +
           "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "  \n" +
           "			SELECT * FROM tempWorkorderEquipment;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempWorkorderEquipment;          \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempWorkorderEquipment;           \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_operation_employee\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN          \n" +
           "  \n" +
           "		/* [S] - Add Time line log for delete Employees from work order */          \n" +
           "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName          \n" +
           "		FROM workorder_operation           \n" +
           "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;          \n" +
           "  \n" +
           "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees          \n" +
           "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");          \n" +
           "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
           "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		          \n" +
           "		/* [E] -  Add Time line log for delete Employee from work order */          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempWorkorderEmployee;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempWorkorderEmployee;          \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempWorkorderEmployee;          \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_operation_cluster\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN          \n" +
           "  \n" +
           "		/* [S] - Add Time line log for delete operations from cluster */          \n" +
           "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName          \n" +
           "		FROM workorder_operation           \n" +
           "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;          \n" +
           "  \n" +
           "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster          \n" +
           "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;           \n" +
           "  \n" +
           "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");          \n" +
           "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
           "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		          \n" +
           "		/* [E] -  Add Time line log for delete operations from cluster */		          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		          \n" +
           "  \n" +
           "		-- Added for update verify workorder status again after changes in workorder operation          \n" +
           "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;          \n" +
           "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		          \n" +
           "		-- Added for update verify workorder status again after changes in workorder operation          \n" +
           "  \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "  \n" +
           "			SELECT * FROM tempWorkorderOperationCluster;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempWorkorderOperationCluster;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempWorkorderOperationCluster;           \n" +
           "END IF;          \n" +
           "IF tableName=\"entity\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)          \n" +
           "		    UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempEntity)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempEntity;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempEntity;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempEntity;           \n" +
           "END IF;          \n" +
           "IF tableName=\"salesordermst\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			/* [S] - Add Time line log for delete sales order mst */ 	  \n" +
           "			SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber  \n" +
           "			FROM salesordermst  \n" +
           "			WHERE FIND_IN_SET(id,IDs);  \n" +
           "  \n" +
           "			SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");    \n" +
           "			SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
           "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */    \n" +
           "			/* [E] - Add Time line log for delete sales order mst */	  \n" +
           "  \n" +
           "			SELECT * FROM tempSalesOrderMst;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempSalesOrderMst;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempSalesOrderMst;           \n" +
           "END IF;          \n" +
           "IF tableName=\"mfgcodemst\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempMFGCodeMst;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempMFGCodeMst;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempMFGCodeMst;           \n" +
           "END IF;          \n" +
           "IF tableName=\"dataelement_transactionvalues_manual\" THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"           \n" +
           "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)          \n" +
           "				and deletedAt IS NULL');		          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			EXECUTE stmt2;          \n" +
           "  \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"shippedassembly\" THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;  \n" +
           "			/* [S] - Add Time line log for delete shipped assembly */   \n" +
           "			SELECT GROUP_CONCAT(shippedqty) , workorderID  INTO @lvShippedqty,@lvWoID  \n" +
           "			FROM shippedassembly  \n" +
           "			WHERE FIND_IN_SET(id,IDs);  \n" +
           "  \n" +
           "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID ;  \n" +
           "  \n" +
           "			SET @lvEventTitle = CONCAT(\"Shipped assembly deleted\");    \n" +
           "			SET @lvEventDescription = CONCAT(\"Shipped assembly for workorder \\\"\",@lvWoNumber,\"\\\" & quantity \\\"\",@lvShippedqty ,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
           "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,9,NULL,deletedBy,3);  /* 3 = DELETE */    \n" +
           "			/* [E] - Add Time line log for delete shipped assembly */ 		  \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"assemblymst\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)          \n" +
           "		    UNION ALL          \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempassemblymst;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempassemblymst;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempassemblymst;           \n" +
           "END IF;          \n" +
           "IF tableName=\"assembly_revisionmst\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND fromRevisionID IN(',IDs,') AND toRevisionID IN(',IDs,')  LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)          \n" +
           "		    UNION ALL          \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempassembly_revisionmst;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempassembly_revisionmst;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempassembly_revisionmst;           \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_trans_serialno\" THEN          \n" +
           "  \n" +
           "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1           \n" +
           "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;          \n" +
           "  \n" +
           "  \n" +
           "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)          \n" +
           "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)           \n" +
           "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1           \n" +
           "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;          \n" +
           "  \n" +
           "	/* condition to check total serials of type greater than actual production qty */          \n" +
           "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1          \n" +
           "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)           \n" +
           "		> IFNULL(vQty1,0)) THEN          \n" +
           "  \n" +
           "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */          \n" +
           "		IF(vQty1 IS NULL OR vQty1 = 0) THEN           \n" +
           "  \n" +
           "			/* condition to check curr opis and status match with given delete serial */          \n" +
           "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1          \n" +
           "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN          \n" +
           "  \n" +
           "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()          \n" +
           "				WHERE woTransSerialID = IDs;	          \n" +
           "  \n" +
           "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno           \n" +
           "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL          \n" +
           "				ORDER BY woTransSerialID DESC LIMIT 1;          \n" +
           "  \n" +
           "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2          \n" +
           "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	    \n" +
           "				/* [S] - Add Time line log for delete production serial from work order operation */ 	  \n" +
           "				SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");    \n" +
           "				SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
           "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('scanbadge/scan/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */    \n" +
           "				/* [E] - Add Time line log for delete production serial from work order operation */ 				  \n" +
           "  \n" +
           "			ELSE           \n" +
           "				SELECT 'not allowed';          \n" +
           "			END IF;          \n" +
           "  \n" +
           "  \n" +
           "		ELSE           \n" +
           "  \n" +
           "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()          \n" +
           "			WHERE woTransSerialID = IDs;	          \n" +
           "  \n" +
           "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno           \n" +
           "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL          \n" +
           "			ORDER BY woTransSerialID DESC LIMIT 1;          \n" +
           "  \n" +
           "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2          \n" +
           "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;  \n" +
           "			/* [S] - Add Time line log for delete production serial from work order operation */ 	  \n" +
           "			SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");    \n" +
           "			SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
           "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('scanbadge/scan/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */    \n" +
           "			/* [E] - Add Time line log for delete production serial from work order operation */      \n" +
           "  \n" +
           "		END IF;	          \n" +
           "  \n" +
           "  \n" +
           "	ELSE           \n" +
           "		SELECT 'not allowed';		          \n" +
           "	END IF;	          \n" +
           "  \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"br_label_template\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)          \n" +
           "		      ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempbr_label_template;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempbr_label_template;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempbr_label_template;           \n" +
           "END IF;          \n" +
           "IF tableName=\"measurement_types\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)          \n" +
           "		     UNION ALL          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempMeasurement_types;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempMeasurement_types;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempMeasurement_types;           \n" +
           "END IF;          \n" +
           "IF tableName=\"uoms\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg           \n" +
           "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)          \n" +
           "            UNION ALL          \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg           \n" +
           "            FROM unit_detail_formula WHERE deletedAt IS NULL AND unitID IN (',IDs,')  or toUnitID IN (',IDs,')  LIMIT 1)  \n" +
           "              UNION ALL        \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND uom IN(',IDs,') LIMIT 1)) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempUOMs;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempUOMs;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempUOMs;           \n" +
           "END IF;          \n" +
           "IF tableName=\"jobtypes\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg           \n" +
           "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempJobTypess;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempJobTypess;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempJobTypess;           \n" +
           "END IF;          \n" +
           "IF tableName=\"ordertype\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg           \n" +
           "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempOrderTypes;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempOrderTypes;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempOrderTypes;           \n" +
           "END IF;          \n" +
           "IF tableName=\"reasonmst\" THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName='component_sid_stock' THEN	          \n" +
           "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)          \n" +
           "			UNION ALL          \n" +
           "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		              \n" +
           "		    ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			/* [S] - Add Time line log for delete component sid stock (receiving material) */ 	  \n" +
           "			SELECT GROUP_CONCAT(uid) INTO @lvUID  FROM component_sid_stock  \n" +
           "			WHERE FIND_IN_SET(id,IDs);	  \n" +
           "  \n" +
           "			SET @lvEventTitle = CONCAT(\"Receiving material(s) deleted\");    \n" +
           "			SET @lvEventDescription = CONCAT(\"Receiving material(s) of UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
           "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7,NULL,deletedBy,3);  /* 3 = DELETE */    \n" +
           "			/* [E] - Add Time line log for delete component sid stock (receiving material) */ 	  \n" +
           "  \n" +
           "			SELECT * FROM tempcomponentsidstock;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempcomponentsidstock;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempcomponentsidstock;           \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName='component_sid_stock_dataelement_values' THEN	          \n" +
           "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;      \n" +
           "			/* [S] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	  \n" +
           "			SELECT GROUP_CONCAT(dataelementid), GROUP_CONCAT(refsidid) INTO @lvCSDlIDs,@lvRefsidid     \n" +
           "			FROM component_sid_stock_dataelement_values  \n" +
           "			WHERE FIND_IN_SET(id,IDs);  \n" +
           "  \n" +
           "			SELECT uid INTO @lvUID FROM component_sid_stock WHERE id = @lvRefsidid   ;  \n" +
           "  \n" +
           "			SELECT GROUP_CONCAT(dataElementName) INTO @lvDlNames  \n" +
           "			FROM dataelement   \n" +
           "			WHERE FIND_IN_SET(dataElementID,@lvCSDlIDs);	  \n" +
           "  \n" +
           "			SET @lvEventTitle = CONCAT(\"Data field(s) of receiving material deleted\");    \n" +
           "			SET @lvEventDescription = CONCAT(\"Data field(s) \\\"\",@lvDlNames,\"\\\" of receiving material with UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
           "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7.01,NULL,deletedBy,3);  /* 3 = DELETE */    \n" +
           "			/* [E] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	  \n" +
           "END IF;          \n" +
           "IF tableName='chart_templatemst' THEN	          \n" +
           "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)          \n" +
           "		    ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempcharttemplatemst;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempcharttemplatemst;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempcharttemplatemst;           \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"shipping_request\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg           \n" +
           "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)          \n" +
           "            UNION ALL          \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg           \n" +
           "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;    \n" +
           "			/* [S] - Add Time line log for delete shipment request */   \n" +
           "			SELECT GROUP_CONCAT(note) INTO @lvNotes FROM Shipping_Request  \n" +
           "			WHERE FIND_IN_SET(id,IDs);	  \n" +
           "  \n" +
           "			SET @lvEventTitle = CONCAT(\"Shipment request deleted\");    \n" +
           "			SET @lvEventDescription = CONCAT(\"Shipment request of \\\"\",@lvNotes,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
           "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,8,NULL,deletedBy,3);  /* 3 = DELETE */    \n" +
           "			/* [E] - Add Time line log for delete shipment request */   \n" +
           "  \n" +
           "			SELECT * FROM tempShippingRequest;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempShippingRequest;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempShippingRequest;           \n" +
           "END IF;          \n" +
           "IF tableName=\"chart_rawdata_category\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg           \n" +
           "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)          \n" +
           "            UNION ALL          \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg           \n" +
           "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempChartRawdataCategory;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempChartRawdataCategory;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempChartRawdataCategory;           \n" +
           "END IF;          \n" +
           "IF tableName=\"component_standard\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg           \n" +
           "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempcomponentStandard;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempcomponentStandard;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempcomponentStandard;           \n" +
           "END IF;          \n" +
           "IF tableName=\"component_standard_class\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg           \n" +
           "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');          \n" +
           "           /*  UNION ALL          \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg           \n" +
           "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "			EXECUTE stmt2;          \n" +
           "  \n" +
           "			SELECT * FROM tempcomponentStandardClass;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempcomponentStandardClass;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempcomponentStandardClass;           \n" +
           "END IF;          \n" +
           "IF tableName=\"rfq_lineitems\" THEN          \n" +
           "		SELECT 0 TotalCount, '' Message;          \n" +
           "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "		PREPARE stmt1 FROM @SQL1;          \n" +
           "		EXECUTE stmt1;                      \n" +
           "END IF;          \n" +
           "IF tableName=\"requirement\" THEN          \n" +
           "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg           \n" +
           "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM temprequirements)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM temprequirements;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM temprequirements;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE temprequirements;           \n" +
           "END IF;          \n" +
           "IF tableName=\"workorder_trans_packagingdetail\" THEN     \n" +
           "		/* [S] - Add Time line log for delete work order transaction packing details */    \n" +
           "		SELECT  (SELECT woNumber FROM workorder WHERE woID = wtpd.woID),  \n" +
           "			(SELECT opName FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL),  \n" +
           "			(SELECT woOPID FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL)  \n" +
           "			INTO @lvWoNumber , @lvOpName ,@lvWoOPID   \n" +
           "		FROM workorder_trans_packagingdetail wtpd   \n" +
           "		WHERE wtpd.woTransPackagingDetailID = IDs AND wtpd.deletedAt IS NULL  /* here ids multiple but need one record only so */;  \n" +
           "		SET @lvEventTitle = CONCAT(\"Box serial details deleted from work order operation\");    \n" +
           "		SET @lvEventDescription = CONCAT(\"Box serial details deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	    \n" +
           "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.17,CONCAT('scanbadge/scan/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */    \n" +
           "		/* [E] - Add Time line log for delete work order transaction packing details */   \n" +
           "  \n" +
           "		SELECT 0 TotalCount, '' Message;          \n" +
           "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		          \n" +
           "		PREPARE stmt1 FROM @SQL1;          \n" +
           "		EXECUTE stmt1;                      \n" +
           "END IF;          \n" +
           "IF tableName=\"customer_addresses\" THEN          \n" +
           "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)          \n" +
           "			UNION ALL          \n" +
           "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg           \n" +
           "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM tempcustomer_addresses;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM tempcustomer_addresses;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE tempcustomer_addresses;           \n" +
           "END IF;          \n" +
           "IF tableName=\"rfqforms\" THEN          \n" +
           "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg           \n" +
           "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in           \n" +
           "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');          \n" +
           "  \n" +
           "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in           \n" +
           "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		          \n" +
           "  \n" +
           "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in           \n" +
           "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		          \n" +
           "  \n" +
           "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in           \n" +
           "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		          \n" +
           "  \n" +
           "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in           \n" +
           "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');          \n" +
           "  \n" +
           "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		          \n" +
           "  \n" +
           "            PREPARE stmt1 FROM @SQL1;          \n" +
           "			PREPARE stmt2 FROM @SQL2;          \n" +
           "            PREPARE stmt3 FROM @SQL3;          \n" +
           "			PREPARE stmt4 FROM @SQL4;          \n" +
           "            PREPARE stmt5 FROM @SQL5;          \n" +
           "			PREPARE stmt6 FROM @SQL6;          \n" +
           "  \n" +
           "			EXECUTE stmt1;          \n" +
           "			EXECUTE stmt2;          \n" +
           "            EXECUTE stmt3;          \n" +
           "			EXECUTE stmt4;          \n" +
           "            EXECUTE stmt5;          \n" +
           "			EXECUTE stmt6;          \n" +
           "  \n" +
           "  \n" +
           "  \n" +
           "			SELECT * FROM temprfqformss;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM temprfqformss;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE temprfqformss;           \n" +
           "END IF;          \n" +
           "IF tableName=\"rfq_mountingtypemst\" THEN          \n" +
           "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as          \n" +
           "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "		    FROM           \n" +
           "		    (          \n" +
           "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg           \n" +
           "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1)  \n" +
           "             UNION ALL        \n" +
           "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mountingTypeID IN(',IDs,') LIMIT 1)) q');          \n" +
           "  \n" +
           "	PREPARE stmt FROM @SQL;          \n" +
           "	EXECUTE stmt;          \n" +
           "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN          \n" +
           "  \n" +
           "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "			SELECT * FROM temprfqpartcategory;          \n" +
           "		ELSE          \n" +
           "			SELECT * FROM temprfqpartcategory;          \n" +
           "  \n" +
           "		END IF;          \n" +
           "		DROP TABLE temprfqpartcategory;           \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"who_bought_who\" THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"rfq_parttypemst\" THEN          \n" +
           "			SET @SQl = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqparttypemst as          \n" +
           "				 SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message          \n" +
           "			    FROM           \n" +
           "			    (     \n" +
           "	            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM   \n" +
           "	            component WHERE deletedAt IS NULL AND partTypeID IN(',IDs,') LIMIT 1)) q');          \n" +
           "	  	        PREPARE stmt FROM @SQL;          \n" +
           "		        EXECUTE stmt;    \n" +
           "	          IF (SELECT TotalCount FROM temprfqparttypemst)=0 THEN      \n" +
           "  \n" +
           "				SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,',   \n" +
           "	            deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "	  				PREPARE stmt1 FROM @SQL1;          \n" +
           "						EXECUTE stmt1;    \n" +
           "	            	SELECT * FROM temprfqparttypemst;          \n" +
           "			ELSE          \n" +
           "				SELECT * FROM temprfqparttypemst;          \n" +
           "  \n" +
           "			END IF;          \n" +
           "            DROP TABLE temprfqparttypemst;                     \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"rfq_lineitems_errorcode\" THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "END IF;          \n" +
           "IF tableName=\"rfq_lineitems_keywords\" THEN          \n" +
           "  \n" +
           "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		          \n" +
           "			PREPARE stmt1 FROM @SQL1;          \n" +
           "			EXECUTE stmt1;          \n" +
           "  \n" +
           "END IF;          \n" +
           "END;  \n" +
           //  /* **************************** Add Script Version -> 06-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (65,'1.00','V1','Check Delete-Mona'," + userid + ");"
            );
            break;
        case 65:
            allDbChangesArray.push(
           //  /* **************************** New Script -> 06-08-2018  *********************************** */
                "ALTER TABLE rfq_lineitems_alternatepart  \n" +
                "ADD COLUMN customerApproval varchar(1) NULL;  \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart  \n" +
                "ADD COLUMN customerApprovalBy int NULL;  \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart  \n" +
                "ADD CONSTRAINT FK_rfq_lineitems_alternatepart_customerApprovalBy FOREIGN KEY (customerApprovalBy) REFERENCES employees(id);  \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart  \n" +
                "ADD COLUMN customerApprovalDate datetime NULL;  \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart  \n" +
                "ADD COLUMN org_mfgCode varchar(500) NULL;  \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart  \n" +
                "ADD COLUMN org_mfgPN varchar(150) NULL;  \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart  \n" +
                "ADD COLUMN org_distributor varchar(500) NULL;  \n" +
                "  \n" +
                "ALTER TABLE rfq_lineitems_alternatepart  \n" +
                "ADD COLUMN org_distPN varchar(150) NULL;  \n" +
                "  \n" +
                "INSERT INTO `rfq_lineitems_errorcode` (`logicID`, `errorCode`, `errorColor`, `description`, `systemVariable`, `createdBy`, `createdAt`)  \n" +
                "SELECT * FROM  \n" +
                "(SELECT '12' logicID,'CA' errorCode,'#d1d43d' errorColor, 'Customer approval is pending' description, NULL systemVariable,'1' createdBy, utc_timestamp() createdAt) a  \n" +
                "WHERE 12 NOT IN (SELECT logicID FROM rfq_lineitems_errorcode) LIMIT 1;  \n" +
           //  /* **************************** Add Script Version -> 06-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (66,'1.00','V1','New fields into rfq_lineitems_alternatepart; New Error code - Ravi'," + userid + ");"
            );
            break;
        case 66:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_checkInEmployeeForOperation` ;  \n" +
            "CREATE PROCEDURE `Sproc_checkInEmployeeForOperation`(    \n" +
            "	IN pWoID INT,    \n" +
            "	IN pOpID INT,    \n" +
            "	IN pWoOPID INT,    \n" +
            "	IN pEquipmentID INT,    \n" +
            "	IN pWorkstationID INT,    \n" +
            "	IN pIsSingleEmployee TINYINT,    \n" +
            "	IN pEmployeeID INT,    \n" +
            "	IN pWoTransID INT,    \n" +
            "	IN pIssueQty INT,    \n" +
            "	IN pCheckInSetupTime INT,    \n" +
            "	IN pCreatedBy VARCHAR(255)    \n" +
            "    )  \n" +
            "BEGIN	    \n" +
            "	DECLARE lvwoNumber VARCHAR(255);    \n" +
            "	DECLARE lvopName VARCHAR(255);    \n" +
            "	DECLARE lvempName VARCHAR(255);    \n" +
            "	DECLARE lvinsertedWoTransInOutID INT(11);    \n" +
            "	DECLARE lvemployeeID INT(11);    \n" +
            "	DECLARE lvopNumber DECIMAL(6,2);    \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE IF EXISTS error_CheckIn;    \n" +
            "	CREATE TEMPORARY TABLE error_CheckIn (    \n" +
            "		errorText NVARCHAR(2000)    \n" +
            "	);    \n" +
            "  \n" +
            "	SELECT CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') INTO @pCheckInTime;    \n" +
            "  \n" +
            "	IF(pIsSingleEmployee = 1) THEN    \n" +
            "  \n" +
            "		INSERT INTO workorder_trans_empinout    \n" +
            "		(`woTransID`,`woID`,`opID`,`woOPID`,`employeeID`, `equipmentID`, `workstationID`, `checkinTime`,     \n" +
            "		`checkinSetupTime`, `createdBy`, `isPaused`, `isDeleted`)    \n" +
            "		VALUES     \n" +
            "		(pWoTransID, pWoID, pOpID, pWoOPID, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime,     \n" +
            "		pCheckInSetupTime, pCreatedBy, 0,0);    \n" +
            "  \n" +
            "		SET lvinsertedWoTransInOutID = LAST_INSERT_ID();    \n" +
            "  \n" +
            "		/* [S] - Add Time line log for check-in to team work order operation */    \n" +
            "		SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),    \n" +
            "			(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,    \n" +
            "			(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID)     \n" +
            "			INTO lvwoNumber,lvopName,lvempName,lvopNumber    \n" +
            "		FROM workorder_trans_empinout  wteio    \n" +
            "		WHERE wteio.woTransinoutID = lvinsertedWoTransInOutID    \n" +
            "		;    \n" +
            "  \n" +
            "		SELECT employeeID INTO lvemployeeID FROM users WHERE id = pCreatedBy;		    \n" +
            "  \n" +
            "		SET @pEventTitle = CONCAT(\"Employee check-in in team operation\");    \n" +
            "		SET @pEventDescription = CONCAT('\"',lvempName,'\" check-in in team operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');    \n" +
            "		CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',lvinsertedWoTransInOutID,5.01,CONCAT('task/tasklist/travel/',pWoOPID,'/', lvemployeeID),pCreatedBy,1);  			    \n" +
            "		/* [E] - Add Time line log for check-in to team work order operation */	    \n" +
            "  \n" +
            "	ELSE    \n" +
            "		IF (IFNULL(pIssueQty,0)= 0) THEN    \n" +
            "			INSERT INTO workorder_trans    \n" +
            "			(`woID`,`opID`,`woOPID`,`issueQty`,`checkinEmployeeID`, `equipmentID`, `workstationID`, `checkinTime`,     \n" +
            "			`checkinSetupTime`, `createdBy`, `isDeleted`, `woentrytype`)    \n" +
            "			VALUES     \n" +
            "			(pWoID, pOpID, pWoOPID, pIssueQty, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime,     \n" +
            "			pCheckInSetupTime, pCreatedBy, 0, 'T');    \n" +
            "  \n" +
            "			SELECT woTransID INTO @pWoTransID FROM workorder_trans WHERE checkinTime = @pCheckInTime AND checkinEmployeeID = pEmployeeID ORDER BY checkinTime LIMIT 1;    \n" +
            "  \n" +
            "			INSERT INTO workorder_trans_empinout    \n" +
            "			(`woTransID`,`woID`,`opID`,`woOPID`,`employeeID`, `equipmentID`, `workstationID`, `checkinTime`,     \n" +
            "			`checkinSetupTime`, `createdBy`, `isPaused`, `isDeleted`)    \n" +
            "			VALUES     \n" +
            "			(@pWoTransID, pWoID, pOpID, pWoOPID, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime,     \n" +
            "			pCheckInSetupTime, pCreatedBy, 0,0);    \n" +
            "  \n" +
            "  \n" +
            "			/* [S] - Add Time line log for check-in work order operation */    \n" +
            "			SELECT (SELECT woNumber FROM workorder WHERE woID = wt.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wt.woOPID),    \n" +
            "				(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wt.checkinEmployeeID) ,    \n" +
            "				(SELECT opNumber FROM workorder_operation WHERE woOPID = wt.woOPID)     \n" +
            "				INTO lvwoNumber,lvopName,lvempName,lvopNumber    \n" +
            "			FROM workorder_trans  wt    \n" +
            "			WHERE wt.woTransID = @pWoTransID    \n" +
            "			;		    \n" +
            "  \n" +
            "			SET @pEventTitle = CONCAT(\"Employee check-in for work order operation\");    \n" +
            "			SET @pEventDescription = CONCAT('\"',lvempName,'\" check-in for operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');    \n" +
            "			CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans',@pWoTransID,5.01,CONCAT('task/tasklist/travel/',pWoOPID,'/', pEmployeeID),pCreatedBy,1);  			    \n" +
            "			/* [E] - Add Time line log for check-in work order operation */					    \n" +
            "  \n" +
            "  \n" +
            "		ELSE    \n" +
            "			CALL Sproc_GetopReadyStock(pWOID,pOpID);    \n" +
            "			SELECT issuePending INTO @pIssuePending FROM temp_Sproc_GetopReadyStock;    \n" +
            "  \n" +
            "			IF((IFNULL(pIssueQty,0)) > IFNULL(@pIssuePending,0)) THEN    \n" +
            "				INSERT INTO error_CheckIn (errorText) VALUES ('Invalid Issue Qty !!');    \n" +
            "			ELSE    \n" +
            "				INSERT INTO workorder_trans    \n" +
            "				(`woID`,`opID`,`woOPID`,`issueQty`,`checkinEmployeeID`, `equipmentID`, `workstationID`, `checkinTime`,     \n" +
            "				`checkinSetupTime`, `createdBy`, `isDeleted`, `woentrytype`)    \n" +
            "				VALUES     \n" +
            "				(pWoID, pOpID, pWoOPID, pIssueQty, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime,     \n" +
            "				pCheckInSetupTime, pCreatedBy, 0, 'T');    \n" +
            "  \n" +
            "				SELECT woTransID INTO @pWoTransID FROM workorder_trans WHERE checkinTime = @pCheckInTime AND checkinEmployeeID = pEmployeeID ORDER BY checkinTime LIMIT 1;    \n" +
            "  \n" +
            "				INSERT INTO workorder_trans_empinout    \n" +
            "				(`woTransID`,`woID`,`opID`,`woOPID`,`employeeID`, `equipmentID`, `workstationID`, `checkinTime`,     \n" +
            "				`checkinSetupTime`, `createdBy`, `isPaused`, `isDeleted`)    \n" +
            "				VALUES     \n" +
            "				(@pWoTransID, pWoID, pOpID, pWoOPID, pEmployeeID, pEquipmentID, pWorkstationID, @pCheckInTime,     \n" +
            "				pCheckInSetupTime, pCreatedBy, 0,0);    \n" +
            "  \n" +
            "				/* [S] - Add Time line log for check-in work order operation */    \n" +
            "				SELECT (SELECT woNumber FROM workorder WHERE woID = wt.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wt.woOPID),    \n" +
            "					(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wt.checkinEmployeeID) ,    \n" +
            "					(SELECT opNumber FROM workorder_operation WHERE woOPID = wt.woOPID)     \n" +
            "					INTO lvwoNumber,lvopName,lvempName,lvopNumber    \n" +
            "				FROM workorder_trans  wt    \n" +
            "				WHERE wt.woTransID = @pWoTransID    \n" +
            "				;		    \n" +
            "  \n" +
            "				SET @pEventTitle = CONCAT(\"Employee check-in for work order operation\");    \n" +
            "				SET @pEventDescription = CONCAT('\"',lvempName,'\" check-in for operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');    \n" +
            "				CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans',@pWoTransID,5.01,CONCAT('task/tasklist/travel/',pWoOPID,'/', pEmployeeID),pCreatedBy,1);  			    \n" +
            "				/* [E] - Add Time line log for check-in work order operation */	    \n" +
            "  \n" +
            "			END IF;    \n" +
            "		END IF;    \n" +
            "	END IF;    \n" +
            "	SELECT errorText FROM error_CheckIn;    \n" +
            "    END;  \n" +
             /* **************************** New Script -> 06-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_workorder_operationfullcheckout` ;  \n" +
            "CREATE PROCEDURE `Sproc_workorder_operationfullcheckout`(    \n" +
            "	IN pWOTransID INT,    \n" +
            "	IN pCheckoutEmployeeID INT,    \n" +
            "	IN pCheckoutSetupTime INT,    \n" +
            "	IN pRemark LONGTEXT    \n" +
            "    )  \n" +
            "BEGIN    \n" +
            "	DECLARE lvwoNumber VARCHAR(255);    \n" +
            "	DECLARE lvopName VARCHAR(255);    \n" +
            "	DECLARE lvempName VARCHAR(255);    \n" +
            "	DECLARE lvwoOPID INT(11);    \n" +
            "	DECLARE lvuserID INT(11);    \n" +
            "	DECLARE lvopNumber DECIMAL(6,2);    \n" +
            "  \n" +
            "	SELECT CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') INTO @pCheckoutTime;    \n" +
            "  \n" +
            "	/*Update pending pasue record */    \n" +
            "	UPDATE workorder_trans_emp_pausedet a    \n" +
            "	SET resumetime = @pCheckoutTime,    \n" +
            "	    totaltime = TIMESTAMPDIFF(SECOND, pausedTime,@pCheckoutTime),    \n" +
            "	    updatedBy = pCheckoutEmployeeID    \n" +
            "	WHERE a.woTransinoutID IN (SELECT woTransinoutID FROM workorder_trans_empinout WHERE woTransID  = pWOTransID )    \n" +
            "	AND resumetime IS NULL AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ;    \n" +
            "  \n" +
            "  \n" +
            "	/*Calculate employee production */    \n" +
            "	UPDATE workorder_trans_empinout  a    \n" +
            "	SET isPaused = 0,    \n" +
            "		checkoutTime = @pCheckoutTime,    \n" +
            "		totalTime =  TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime),    \n" +
            "		checkoutSetupTime = pCheckoutSetupTime,    \n" +
            "		productionTime = (CAST(TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime) AS SIGNED) - IFNULL(pCheckoutSetupTime,0) -     \n" +
            "				(SELECT IFNULL(SUM(totalTime),0) totalPauseTime     \n" +
            "				FROM workorder_trans_emp_pausedet b WHERE b.woTransinoutID = a.woTransinoutID )    \n" +
            "		  ),    \n" +
            "		updatedBy = pCheckoutEmployeeID,    \n" +
            "		remark = pRemark    \n" +
            "	WHERE woTransId = pWOTransID  AND checkoutTime IS NULL ;    \n" +
            "  \n" +
            "	/*calculate operation Transaction production */    \n" +
            "	UPDATE workorder_trans a    \n" +
            "	SET checkouttime = @pCheckoutTime,    \n" +
            "		totalTime = (SELECT SUM(totalTime)  FROM  workorder_trans_empinout     \n" +
            "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ) ,    \n" +
            "		productionTime = (SELECT SUM(productionTime)  FROM  workorder_trans_empinout     \n" +
            "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ),    \n" +
            "		updatedBy = pCheckoutEmployeeID,    \n" +
            "		checkoutEmployeeID = pCheckoutEmployeeID    \n" +
            "	WHERE woTransID  = pWOTransID  AND checkoutTime IS NULL;    \n" +
            "  \n" +
            "  \n" +
            "	/* [S] - Add Time line log for check-out work order operation */    \n" +
            "	SELECT (SELECT woNumber FROM workorder WHERE woID = wt.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wt.woOPID),    \n" +
            "		(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = pCheckoutEmployeeID) , wt.woOPID,    \n" +
            "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wt.woOPID)     \n" +
            "		INTO lvwoNumber,lvopName,lvempName,lvwoOPID,lvopNumber    \n" +
            "	FROM workorder_trans  wt    \n" +
            "	WHERE wt.woTransID = pWOTransID ;		    \n" +
            "  \n" +
            "	SELECT id INTO lvuserID FROM users WHERE EmployeeID = pCheckoutEmployeeID AND deletedAt IS NULL;	    \n" +
            "  \n" +
            "	SET @pEventTitle = CONCAT(\"Employee check-out from work order operation\");    \n" +
            "	SET @pEventDescription = CONCAT('\"',lvempName,'\" check-out from operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');    \n" +
            "	CALL Sproc_AddToTimeline(lvuserID,@pEventTitle,@pEventDescription,'workorder_trans',pWOTransID,5.04,CONCAT('task/tasklist/travel/',lvwoOPID,'/', pCheckoutEmployeeID),lvuserID,2);  			    \n" +
            "	/* [E] - Add Time line log for check-out work order operation */			    \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 06-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_checkoutEmployeeFromOperation` ;  \n" +
            "CREATE PROCEDURE `Sproc_checkoutEmployeeFromOperation`(    \n" +
            "	IN pWOTransID INT,    \n" +
            "	IN pWOTransinoutID INT,    \n" +
            "	IN pCheckoutEmployeeID INT,    \n" +
            "	IN pCheckoutSetupTime INT,    \n" +
            "	IN pRemark LONGTEXT    \n" +
            "    )  \n" +
            "BEGIN    \n" +
            "	DECLARE lvwoNumber VARCHAR(255);    \n" +
            "	DECLARE lvopName VARCHAR(255);    \n" +
            "	DECLARE lvempName VARCHAR(255);    \n" +
            "	DECLARE lvwoOPID INT(11);    \n" +
            "	DECLARE lvuserID INT(11);    \n" +
            "	DECLARE lvopNumber DECIMAL(6,2);    \n" +
            "	SELECT CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') INTO @pCheckoutTime;    \n" +
            "  \n" +
            "	/*Update pending pasue record */    \n" +
            "	UPDATE workorder_trans_emp_pausedet a    \n" +
            "	SET resumetime = @pCheckoutTime,    \n" +
            "	    totaltime = TIMESTAMPDIFF(SECOND, pausedTime,@pCheckoutTime),    \n" +
            "	    updatedBy = pCheckoutEmployeeID    \n" +
            "	WHERE a.woTransinoutID = pWOTransinoutID    \n" +
            "	AND resumetime IS NULL AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ;    \n" +
            "  \n" +
            "	/*Calculate employee production */    \n" +
            "	UPDATE workorder_trans_empinout  a    \n" +
            "	SET isPaused = 0,    \n" +
            "		checkoutTime = @pCheckoutTime,    \n" +
            "		totalTime =  TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime),    \n" +
            "		checkoutSetupTime = pCheckoutSetupTime,    \n" +
            "		productionTime = (CAST(TIMESTAMPDIFF(SECOND, checkinTime,@pCheckoutTime) AS SIGNED) - IFNULL(pCheckoutSetupTime,0) -     \n" +
            "				(SELECT IFNULL(SUM(totalTime),0) totalPauseTime     \n" +
            "				FROM workorder_trans_emp_pausedet b WHERE b.woTransinoutID = a.woTransinoutID )    \n" +
            "		  ),    \n" +
            "		updatedBy = pCheckoutEmployeeID,    \n" +
            "		remark = pRemark    \n" +
            "	WHERE woTransId = pWOTransID  AND woTransinoutID = pWOTransinoutID AND checkoutTime IS NULL ;    \n" +
            "  \n" +
            "  \n" +
            "	/*calculate operation Transaction production */    \n" +
            "	SELECT COUNT(1) INTO  @cnt  FROM workorder_trans_empinout WHERE  woTransId = pWOTransID  AND checkoutTime IS NULL;    \n" +
            "	IF (@cnt = 0 ) THEN     \n" +
            "  \n" +
            "	UPDATE workorder_trans a    \n" +
            "	SET checkouttime = @pCheckoutTime,    \n" +
            "		totalTime = (SELECT SUM(totalTime)  FROM  workorder_trans_empinout     \n" +
            "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ) ,    \n" +
            "		productionTime = (SELECT SUM(productionTime)  FROM  workorder_trans_empinout     \n" +
            "				WHERE woTransId = a.woTransID AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL ),    \n" +
            "		updatedBy = pCheckoutEmployeeID,    \n" +
            "		checkoutEmployeeID = pCheckoutEmployeeID    \n" +
            "	WHERE woTransID  = pWOTransID  AND checkoutTime IS NULL;	    \n" +
            "  \n" +
            "	END IF;    \n" +
            "  \n" +
            "  \n" +
            "	/* [S] - Add Time line log for check-out from team work order operation */    \n" +
            "	SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),    \n" +
            "		(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,    \n" +
            "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID)     \n" +
            "		INTO lvwoNumber,lvopName,lvempName,lvopNumber    \n" +
            "	FROM workorder_trans_empinout  wteio    \n" +
            "	WHERE wteio.woTransinoutID = pWOTransinoutID ;    \n" +
            "  \n" +
            "	SELECT id INTO lvuserID FROM users WHERE EmployeeID = pCheckoutEmployeeID AND deletedAt IS NULL;	    \n" +
            "  \n" +
            "	SET @pEventTitle = CONCAT(\"Employee check-out from team operation\");    \n" +
            "	SET @pEventDescription = CONCAT('\"',lvempName,'\" check-out from team operation \"',lvopName,' (',lvopNumber,')\" of work order ',lvwoNumber,'.');    \n" +
            "	CALL Sproc_AddToTimeline(lvuserID,@pEventTitle,@pEventDescription,'workorder_trans_empinout',pWOTransinoutID,5.04,CONCAT('task/tasklist/travel/',lvwoOPID,'/', pCheckoutEmployeeID),lvuserID,2);      \n" +
            "	/* [E] - Add Time line log for check-out from team work order operation */	    \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 06-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_WorkorderTransfer` ;  \n" +
            "CREATE PROCEDURE `Sproc_WorkorderTransfer`(    \n" +
            "        IN fromWOOPID INT,    \n" +
            "        IN toWOOPID INT,    \n" +
            "        IN transferQty INT,    \n" +
            "        IN description TEXT,    \n" +
            "        IN userID INT    \n" +
            ")  \n" +
            "BEGIN    \n" +
            " DECLARE insertedWoTransID INT(11);    \n" +
            " DECLARE lvfromOpName VARCHAR(250);    \n" +
            " DECLARE lvfromWoNumber VARCHAR(250);    \n" +
            " DECLARE lvtoOpName VARCHAR(250);    \n" +
            " DECLARE lvtoWoNumber VARCHAR(250);    \n" +
            "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
            "BEGIN    \n" +
            "	ROLLBACK;    \n" +
            "  \n" +
            "    DROP TEMPORARY TABLE IF EXISTS `tempWTE`;    \n" +
            "	DROP TEMPORARY TABLE IF EXISTS `tempOPID`;	    \n" +
            "	DROP TEMPORARY TABLE IF EXISTS `tempError`;    \n" +
            "	RESIGNAL;    \n" +
            "END;    \n" +
            "  \n" +
            "  \n" +
            "CREATE TEMPORARY TABLE `tempError` (id TINYINT(1));    \n" +
            " # Get from and to work order operation details    \n" +
            " SELECT wo.woID, wo.opID, wo.opNumber INTO @fromWOID, @fromOPID, @fromOPNumber FROM workorder_operation wo WHERE IFNULL(wo.isDeleted, 0) = 0 AND wo.woOPID = fromWOOPID;    \n" +
            " SELECT wo.woID, wo.opID INTO @toWOID, @toOPID FROM workorder_operation wo WHERE IFNULL(wo.isDeleted, 0) = 0 AND wo.woOPID = toWOOPID;    \n" +
            "  \n" +
            " # Check if any operation is running or not    \n" +
            " CREATE TEMPORARY TABLE `tempWTE`    \n" +
            " SELECT op.opID, op.opName, op.opNumber, CONCAT(emp.firstName , ' ' , emp.lastName) AS fullName     \n" +
            " FROM Workorder_Trans_Empinout AS wte    \n" +
            " LEFT OUTER JOIN operations AS op ON wte.opID = op.opID AND op.deletedAt IS NULL    \n" +
            " LEFT OUTER JOIN employees AS emp ON wte.employeeID = emp.id AND emp.deletedAt IS NULL     \n" +
            " WHERE wte.deletedAt IS NULL AND wte.woID = @fromWOID AND wte.checkoutTime IS NULL;    \n" +
            "  \n" +
            " # If operation is running then return    \n" +
            " IF EXISTS (SELECT 1 FROM tempWTE) THEN    \n" +
            "	SELECT 'operation' AS err;    \n" +
            "    SELECT * FROM `tempWTE`;    \n" +
            "	INSERT INTO tempError VALUES (1);    \n" +
            " ELSE    \n" +
            "	# Check if work order is track by serial number    \n" +
            "    SELECT COUNT(1) INTO @woTrackBySerial FROM Workorder AS wo WHERE wo.isOperationTrackBySerialNo = 1 AND woID = @fromWOID AND IFNULL(wo.isDeleted, 0) = 0 LIMIT 1;    \n" +
            "  \n" +
            "	IF (@woTrackBySerial = 1) THEN    \n" +
            "  \n" +
            "        # Get all operations which are followed by current terminated operation    \n" +
            "        CREATE TEMPORARY TABLE `tempOPID`    \n" +
            "        SELECT wo.opID FROM Workorder_Operation AS wo WHERE wo.woID = @fromWOID AND wo.opNumber >= @fromOPNumber AND IFNULL(wo.isDeleted, 0) = 0;    \n" +
            "        # Check total serial numbers which are assigned to current terminated and following operations    \n" +
            "        SELECT IFNULL(COUNT(ws.serialNo),0)  INTO @serialCount FROM Workorder_SerialMst AS ws    \n" +
            "        WHERE ws.woID = @fromWOID AND IFNULL(ws.isTransferred, 0) = 0    \n" +
            "        AND ws.currStatus IN ('1','3','5') AND IFNULL(ws.isDeleted, 0) = 0 AND    \n" +
            "        ws.curropID IN (SELECT opID FROM tempOPID);    \n" +
            "  \n" +
            "        # If total serial number and transfer qty do not match then return    \n" +
            "        IF (@serialCount <> transferQty) THEN    \n" +
            "			SELECT 'serialcount' AS err;    \n" +
            "            SELECT @serialCount AS serialCount;    \n" +
            "			INSERT INTO tempError VALUES (1);         \n" +
            "        END IF;    \n" +
            "	END IF;        \n" +
            " END IF;    \n" +
            "IF NOT EXISTS(SELECT 1 FROM `tempError`) THEN    \n" +
            "	START TRANSACTION;    \n" +
            "  \n" +
            "    # Insert entry into work order transfer table    \n" +
            "    INSERT INTO `workorder_transfer` (`fromWOID`, `fromOPID`, `fromWOOPID`, `toWOID`, `toOPID`, `toWOOPID`, `transferDate`, `transferQty`,    \n" +
            "										`description`, `createdAt`, `createdBy`, `isDeleted`)    \n" +
            "    VALUES (@fromWOID, @fromOPID, fromWOOPID, @toWOID, @toOPID, toWOOPID, UTC_TIMESTAMP(), transferQty,    \n" +
            "		description,UTC_TIMESTAMP(), userID, 0);    \n" +
            "    SET	insertedWoTransID = LAST_INSERT_ID();		    \n" +
            "  \n" +
            "	# Update from work order status to 'Under Termination'    \n" +
            "    UPDATE Workorder SET woStatus = 6, updatedAt =  UTC_TIMESTAMP(), updatedBy = userID WHERE woID = @fromWOID AND IFNULL(isDeleted, 0) = 0;    \n" +
            "    # Update from work order reference to work order and update build qty    \n" +
            "    UPDATE Workorder SET terminateWOID = @fromWOID, buildQty = (IFNULL(buildQty,0) + transferQty), updatedAt =  UTC_TIMESTAMP(), updatedBy = userID WHERE woID = @toWOID AND IFNULL(isDeleted, 0) = 0;    \n" +
            "  \n" +
            "    # Update is terminated flag for current terminated operation    \n" +
            "    UPDATE workorder_operation SET isTerminated = 1, terminateDate = UTC_TIMESTAMP(), updatedAt =  UTC_TIMESTAMP(), updatedBy = userID    \n" +
            "    WHERE woOPID = fromWOOPID AND IFNULL(isDeleted, 0) = 0;    \n" +
            "  \n" +
            "    # Change status to 'Terminated' for follwing operations of current terminated operation    \n" +
            "    UPDATE Workorder_Operation SET opStatus = 2, updatedAt =  UTC_TIMESTAMP(), updatedBy = userID WHERE woID = @fromWOID AND opNumber > @fromOPNumber AND IFNULL(isDeleted, 0) = 0;    \n" +
            "  \n" +
            "    IF (@woTrackBySerial = 1) THEN        \n" +
            "  \n" +
            "		# Insert all serial numbers from from work order into to work order    \n" +
            "        INSERT INTO Workorder_SerialMst (woID, PrefixorSuffix, PreSuffix, dateCode, noofDigit, SerialNo, curropID, currStatus, isDeleted,    \n" +
            "		createdAt, createdBy, serialType, refSerialID)    \n" +
            "        SELECT @toWOID woID, ws.PrefixorSuffix, ws.PreSuffix, ws.dateCode, ws.noofDigit, ws.SerialNo, NULL curropID, 'Idle' currStatus,     \n" +
            "        0 isDeleted, UTC_TIMESTAMP() createdAt, userID createdBy, ws.serialType, ws.id refSerialID    \n" +
            "		FROM Workorder_SerialMst ws WHERE ws.woID = @fromWOID AND IFNULL(ws.isTransferred, 0) = 0 AND ws.currStatus IN ('1','3','5') AND IFNULL(ws.isDeleted, 0) = 0 AND    \n" +
            "		ws.curropID IN (SELECT opID FROM tempOPID);    \n" +
            "  \n" +
            "        # Update is transferred flag to all from work order serial numbers    \n" +
            "        UPDATE Workorder_SerialMst ws SET ws.isTransferred = 1, ws.updatedAt =  UTC_TIMESTAMP(), ws.updatedBy = userID    \n" +
            "		WHERE ws.woID = @fromWOID AND IFNULL(ws.isTransferred, 0) = 0 AND ws.currStatus IN ('1','3','5') AND IFNULL(ws.isDeleted, 0) = 0 AND    \n" +
            "		ws.curropID IN (SELECT opID FROM tempOPID);    \n" +
            "    END IF;    \n" +
            "	/* [S] - Add Time line log for work order operation terminate & transfer */      \n" +
            "	SELECT woop.opName , (SELECT woNumber FROM workorder WHERE woID = woop.woID)    \n" +
            "		INTO lvfromOpName,lvfromWoNumber    \n" +
            "	FROM workorder_operation woop     \n" +
            "	WHERE woOPID = 	fromWOOPID ;    \n" +
            "  \n" +
            "	SELECT woop.opName , (SELECT woNumber FROM workorder WHERE woID = woop.woID)    \n" +
            "		INTO lvtoOpName,lvtoWoNumber    \n" +
            "	FROM workorder_operation woop     \n" +
            "	WHERE woOPID = 	toWOOPID ;    \n" +
            "  \n" +
            "	SELECT CONCAT(firstName,\" \",lastName),EmployeeID INTO @lvempName,@lvEmployeeID    \n" +
            "	FROM users WHERE id=userID AND deletedAt IS NULL;    \n" +
            "  \n" +
            "	SET @lvEventTitle = CONCAT(\"Terminate and transfer quantity from one work order operation to another work order operation\");      \n" +
            "	SET @lvEventDescription = CONCAT(\"Terminate and transfer quantity \\\"\",transferQty,\"\\\" from operation \\\"\",lvfromOpName,\"\\\" of work order \",lvfromWoNumber,    \n" +
            "		\" to operation \\\"\",lvtoOpName,\"\\\" of work order \",lvtoWoNumber,\" by \" ,@lvempName,\".\");	      \n" +
            "	CALL Sproc_AddToTimeline(userID,@lvEventTitle,@lvEventDescription,'workorder_transfer',insertedWoTransID,5.07,CONCAT('task/tasklist/travel/',fromWOOPID,\"/\",@lvEmployeeID),userID,1);  /* 1 = CREATE */      \n" +
            "	/* [E] - Add Time line log for work order operation terminate & transfer */      \n" +
            "    COMMIT;    \n" +
            "    SELECT 1 AS `status`;    \n" +
            "END IF;	    \n" +
            "DROP TEMPORARY TABLE IF EXISTS `tempWTE`;    \n" +
            "DROP TEMPORARY TABLE IF EXISTS `tempOPID`;    \n" +
            "DROP TEMPORARY TABLE IF EXISTS `tempError`;    \n" +
            "END;  \n" +
             /* **************************** New Script -> 06-08-2018  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_pauseEmployeeForOperation` ;  \n" +
            "CREATE PROCEDURE `Sproc_pauseEmployeeForOperation`(    \n" +
            "	IN pWOTransinoutID INT,    \n" +
            "	IN pCreatedBy VARCHAR(255)    \n" +
            "    )  \n" +
            "BEGIN    \n" +
            "	DECLARE lvwoNumber VARCHAR(255);    \n" +
            "	DECLARE lvopName VARCHAR(255);    \n" +
            "	DECLARE lvempName VARCHAR(255);    \n" +
            "	DECLARE lvemployeeID INT(11);    \n" +
            "	DECLARE lvopNumber DECIMAL(6,2);    \n" +
            "	DECLARE lvwoOPID INT(11);	    \n" +
            "  \n" +
            "	SELECT @pPauseTime := CONVERT_TZ(NOW(), @@session.time_zone, '+00:00');    \n" +
            "  \n" +
            "	UPDATE workorder_trans_empinout	SET isPaused = 1, updatedBy = pCreatedBy WHERE woTransinoutID = pWOTransinoutID;    \n" +
            "  \n" +
            "	INSERT INTO workorder_trans_emp_pausedet    \n" +
            "		(`woTransinoutID`,`pausedTime`, `createdBy`, `isDeleted`)    \n" +
            "		VALUES     \n" +
            "		(pWOTransinoutID, @pPauseTime, pCreatedBy, 0);    \n" +
            "  \n" +
            "	/* [S] - Add Time line log for pause operation employee to work order operation */    \n" +
            "	SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),    \n" +
            "		(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,    \n" +
            "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID) , wteio.woOPID    \n" +
            "		INTO lvwoNumber,lvopName,lvempName,lvopNumber,lvwoOPID    \n" +
            "	FROM workorder_trans_empinout  wteio    \n" +
            "	WHERE wteio.woTransinoutID = pWOTransinoutID    \n" +
            "	;    \n" +
            "  \n" +
            "	SELECT employeeID INTO lvemployeeID FROM users WHERE id = pCreatedBy;		    \n" +
            "  \n" +
            "	SET @pEventTitle = CONCAT(\"Employee pause for work order operation\");    \n" +
            "	SET @pEventDescription = CONCAT('Employee \"',lvempName,'\" pause for operation \"',lvopName,' (',lvopNumber,')\" of     \n" +
            "		work order ',lvwoNumber,' by ',(SELECT username FROM users WHERE id=pCreatedBy AND deletedAt IS NULL),'.');     \n" +
            "	CALL Sproc_AddToTimeline(pCreatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',pWOTransinoutID,5.09,CONCAT('task/tasklist/travel/',lvwoOPID,'/', lvemployeeID),pCreatedBy,2);  			    \n" +
            "	/* [E] - Add Time line log for pause operation employee to work order operation */		    \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 06-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_resumeEmployeeForOperation` ;  \n" +
            "CREATE PROCEDURE `Sproc_resumeEmployeeForOperation`(    \n" +
            "	IN pWOTransemppausedID INT,    \n" +
            "	IN pWOTransinoutID INT,    \n" +
            "	IN pUpdatedBy VARCHAR(255)    \n" +
            "    )  \n" +
            "BEGIN    \n" +
            "	DECLARE lvwoNumber VARCHAR(255);    \n" +
            "	DECLARE lvopName VARCHAR(255);    \n" +
            "	DECLARE lvempName VARCHAR(255);    \n" +
            "	DECLARE lvemployeeID INT(11);    \n" +
            "	DECLARE lvopNumber DECIMAL(6,2);    \n" +
            "	DECLARE lvwoOPID INT(11);		    \n" +
            "  \n" +
            "	SELECT @pResumeTime := CONVERT_TZ(NOW(), @@session.time_zone, '+00:00');    \n" +
            "  \n" +
            "	UPDATE workorder_trans_empinout	    \n" +
            "	SET isPaused = 0, updatedBy = pUpdatedBy     \n" +
            "	WHERE woTransinoutID = pWOTransinoutID;    \n" +
            "  \n" +
            "	UPDATE workorder_trans_emp_pausedet     \n" +
            "	SET resumeTime=@pResumeTime, totalTime =  TIMESTAMPDIFF(SECOND, pausedTime,@pResumeTime), updatedBy = pUpdatedBy     \n" +
            "	WHERE woTransinoutID = pWOTransinoutID AND woTransemppausedID= pWOTransemppausedID;    \n" +
            "  \n" +
            "	/* [S] - Add Time line log for resume operation employee to work order operation */    \n" +
            "	SELECT (SELECT woNumber FROM workorder WHERE woID = wteio.woID) ,(SELECT opName FROM workorder_operation WHERE woOPID = wteio.woOPID),    \n" +
            "		(SELECT CONCAT(firstName,\" \",lastName) FROM employees WHERE id = wteio.employeeID) ,    \n" +
            "		(SELECT opNumber FROM workorder_operation WHERE woOPID = wteio.woOPID) , wteio.woOPID    \n" +
            "		INTO lvwoNumber,lvopName,lvempName,lvopNumber,lvwoOPID    \n" +
            "	FROM workorder_trans_empinout  wteio    \n" +
            "	WHERE wteio.woTransinoutID = pWOTransinoutID    \n" +
            "	;    \n" +
            "  \n" +
            "	SELECT employeeID INTO lvemployeeID FROM users WHERE id = pUpdatedBy;		    \n" +
            "  \n" +
            "	SET @pEventTitle = CONCAT(\"Employee resume for work order operation\");    \n" +
            "	SET @pEventDescription = CONCAT('Employee \"',lvempName,'\" resume for operation \"',lvopName,' (',lvopNumber,')\" of     \n" +
            "		work order ',lvwoNumber,' by ',(SELECT username FROM users WHERE id=pUpdatedBy AND deletedAt IS NULL),'.');     \n" +
            "	CALL Sproc_AddToTimeline(pUpdatedBy,@pEventTitle,@pEventDescription,'workorder_trans_empinout',pWOTransinoutID,5.10,CONCAT('task/tasklist/travel/',lvwoOPID,'/', lvemployeeID),pUpdatedBy,2);  			    \n" +
            "	/* [E] - Add Time line log for resume operation employee to work order operation */	    \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** New Script -> 06-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetTimelineList` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetTimelineList`(	  \n" +
            "	IN ppageIndex INT(11),  \n" +
            "	IN precordPerPage INT(11),  \n" +
            "	IN pOrderBy VARCHAR(255),	  \n" +
            "	IN pWhereClause VARCHAR(21844)      \n" +
            "    )  \n" +
            "BEGIN  \n" +
            "  \n" +
            "	DECLARE pOffset INT(11);  \n" +
            "	DECLARE rowNumWhere VARCHAR(255);  \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
            "		SELECT 	timelineID,  \n" +
            "			userID,  \n" +
            "			eventDateTime,  \n" +
            "			eventTitle,  \n" +
            "			eventDescription,  \n" +
            "			refTransTable,  \n" +
            "			refTransID,  \n" +
            "			eventType,   \n" +
            "			url,  \n" +
            "			\"icon-account-plus\" AS `icon`  \n" +
            "		FROM timeline  \n" +
            "		WHERE IFNULL(isdeleted,0) = 0;  \n" +
            "  \n" +
            "	IF (pOrderBy IS NOT NULL) THEN  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"eventDateTime DESC\") ;  \n" +
            "	END IF;	  \n" +
            "  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;	  \n" +
            "  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE	  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;	  \n" +
            "  \n" +
            "  \n" +
            "	/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );  \n" +
            "	PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE Results;  \n" +
            "  \n" +
            "  \n" +
            "    END;  \n" +
             /* **************************** New Script -> 06-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
            "CREATE PROCEDURE `Sproc_checkDelete`(            \n" +
            "	IN tableName VARCHAR(255),            \n" +
            "	IN IDs LONGTEXT,            \n" +
            "	IN deletedBy INT,            \n" +
            "	IN entityID VARCHAR(255),            \n" +
            "	IN refrenceIDs LONGTEXT            \n" +
            "    )  \n" +
            "BEGIN            \n" +
            "	DECLARE vWoID1 INT(11);            \n" +
            "	DECLARE vOpID1 INT(11);            \n" +
            "	DECLARE vSerialNo1 VARCHAR(50);            \n" +
            "	DECLARE vProdStatus1 VARCHAR(5);            \n" +
            "	DECLARE vWoTransID1 INT(11);            \n" +
            "	DECLARE vQty1 INT(11);            \n" +
            "	DECLARE vOpID2 INT(11);            \n" +
            "	DECLARE vProdstatus2 VARCHAR(5);            \n" +
            "  \n" +
            "IF tableName='employees' THEN            \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)            \n" +
            "	   UNION ALL                                  \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)            \n" +
            "           UNION ALL             \n" +
            "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND er.finalStatusInit IN(',IDs,') AND er.initiateBy IN(',IDs,') LIMIT 1)            \n" +
            "	   UNION ALL            \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)            \n" +
            "	UNION ALL            \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)            \n" +
            "	  UNION ALL            \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)            \n" +
            "	  UNION ALL            \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)            \n" +
            "	  UNION ALL            \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)            \n" +
            "	  UNION ALL            \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)            \n" +
            "	 UNION ALL            \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)            \n" +
            "	  UNION ALL            \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND wr.reqGenEmployeeID IN(',IDs,') and wr.woAuthorID IN(',IDs,') and wr.accRejBy IN(',IDs,') LIMIT 1)            \n" +
            "	  UNION ALL             \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND wr.commentemployeeID IN(',IDs,') AND wr.accRejBy IN(',IDs,') LIMIT 1)            \n" +
            "	  UNION ALL            \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND wr.employeeID IN(',IDs,') AND wr.requstedEmployeeID IN(',IDs,') LIMIT 1)             \n" +
            "	  UNION ALL                \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE wt.checkinEmployeeID IN(',IDs,') AND wt.checkoutEmployeeID IN(',IDs,') LIMIT 1)            \n" +
            "	  UNION ALL               \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)            \n" +
            "	 UNION ALL             \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)            \n" +
            "	 UNION ALL             \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)            \n" +
            "	 UNION ALL             \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND wthu.holdEmployeeId IN(',IDs,') and wthu.unHoldEmployeeId IN(',IDs,') LIMIT 1)            \n" +
            "	UNION ALL             \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)            \n" +
            "	 UNION ALL             \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)            \n" +
            "	 UNION ALL             \n" +
            "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)            \n" +
            "	 UNION ALL             \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND holdEmployeeId IN(',IDs,') AND unHoldEmployeeId IN(',IDs,')LIMIT 1)            \n" +
            "  \n" +
            "        ) q');            \n" +
            "    PREPARE stmt FROM @SQL;            \n" +
            "    EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempEmp)=0 THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');            \n" +
            "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');            \n" +
            "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');            \n" +
            "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');            \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			PREPARE stmt2 FROM @SQL2;            \n" +
            "			PREPARE stmt3 FROM @SQL3;            \n" +
            "			PREPARE stmt4 FROM @SQL4;            \n" +
            "			EXECUTE stmt1;            \n" +
            "			EXECUTE stmt2;            \n" +
            "			EXECUTE stmt3;            \n" +
            "			EXECUTE stmt4;            \n" +
            "			SELECT             \n" +
            "    *            \n" +
            "FROM            \n" +
            "    tempEmp;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempEmp;            \n" +
            "		END IF;            \n" +
            "  \n" +
            "    DROP TABLE tempEmp;            \n" +
            "END IF;            \n" +
            "IF tableName='eco_type_category' THEN            \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)             \n" +
            "	  ) q');            \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT             \n" +
            "    *            \n" +
            "FROM            \n" +
            "    tempEcoTypeCategory;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempEcoTypeCategory;            \n" +
            "		END IF;            \n" +
            "    DROP TABLE tempEcoTypeCategory;              \n" +
            "END IF;            \n" +
            "IF tableName='eco_type_values' THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)            \n" +
            "	  ) q');            \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT             \n" +
            "    *            \n" +
            "FROM            \n" +
            "    tempEcoTypeValues;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempEcoTypeValues;            \n" +
            "		END IF;            \n" +
            "    DROP TABLE tempEcoTypeValues;              \n" +
            "END IF;            \n" +
            "IF tableName='customers' THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL             \n" +
            "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL             \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)            \n" +
            "	  ) q');            \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		            \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');            \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			PREPARE stmt2 FROM @SQL2;            \n" +
            "			PREPARE stmt3 FROM @SQL3;            \n" +
            "			EXECUTE stmt1;            \n" +
            "			EXECUTE stmt2;            \n" +
            "			EXECUTE stmt3;            \n" +
            "  \n" +
            "			SELECT             \n" +
            "    *            \n" +
            "FROM            \n" +
            "    tempCustomers;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempCustomers;            \n" +
            "		END IF;            \n" +
            "    DROP TABLE tempCustomers;              \n" +
            "END IF;            \n" +
            "IF tableName='certificate_standards' THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)            \n" +
            "  \n" +
            "	  ) q');            \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		            \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');            \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			PREPARE stmt2 FROM @SQL2;            \n" +
            "			PREPARE stmt3 FROM @SQL3;            \n" +
            "			EXECUTE stmt1;            \n" +
            "			EXECUTE stmt2;            \n" +
            "			EXECUTE stmt3;            \n" +
            "  \n" +
            "			SELECT * FROM tempCertificateStandards;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempCertificateStandards;            \n" +
            "		END IF;            \n" +
            "    DROP TABLE tempCertificateStandards;              \n" +
            "END IF;            \n" +
            "IF tableName='department' THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)            \n" +
            "  \n" +
            "	  ) q');            \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		            \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');            \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			PREPARE stmt2 FROM @SQL2;            \n" +
            "			PREPARE stmt3 FROM @SQL3;            \n" +
            "			EXECUTE stmt1;            \n" +
            "			EXECUTE stmt2;            \n" +
            "			EXECUTE stmt3;            \n" +
            "  \n" +
            "			SELECT * FROM tempDepartment;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempDepartment;            \n" +
            "		END IF;            \n" +
            "    DROP TABLE tempDepartment;              \n" +
            "END IF;            \n" +
            "IF tableName='genericcategory' THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND eqpGroupID IN(',IDs,') AND eqpSubGroupID IN(',IDs,') AND eqpTypeID IN(',IDs,') AND eqpPossessionID IN(',IDs,') AND eqpOwnershipTypeID IN(',IDs,') AND locationTypeID IN(',IDs,')   LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)            \n" +
            "	     UNION ALL          \n" +
            "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)            \n" +
            "	  ) q');            \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT             \n" +
            "    *            \n" +
            "FROM            \n" +
            "    tempGenericCategory;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempGenericCategory;            \n" +
            "		END IF;            \n" +
            "    DROP TABLE tempGenericCategory;              \n" +
            "END IF;            \n" +
            "IF tableName='equipment' THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)            \n" +
            "  \n" +
            "	  ) q');            \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN            \n" +
            "			IF entityID IS NOT NULL THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		            \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');            \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			PREPARE stmt2 FROM @SQL2;            \n" +
            "			PREPARE stmt3 FROM @SQL3;            \n" +
            "			EXECUTE stmt1;            \n" +
            "			EXECUTE stmt2;            \n" +
            "			EXECUTE stmt3;            \n" +
            "  \n" +
            "			ELSE            \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "			END IF;            \n" +
            "  \n" +
            "			SELECT * FROM tempEquipment;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempEquipment;            \n" +
            "		END IF;            \n" +
            "    DROP TABLE tempEquipment;              \n" +
            "END IF;            \n" +
            "IF tableName='parts' THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)            \n" +
            "	  ) q');            \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempParts)=0 THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempParts;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempParts;            \n" +
            "		END IF;            \n" +
            "    DROP TABLE tempParts;              \n" +
            "END IF;            \n" +
            "IF tableName='master_templates' THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)            \n" +
            "	  ) q');            \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempMasterTemplate;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempMasterTemplate;            \n" +
            "		END IF;            \n" +
            "    DROP TABLE tempMasterTemplate;              \n" +
            "END IF;            \n" +
            "IF tableName='operations' THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)            \n" +
            "  \n" +
            "	  ) q');            \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempOperations)=0 THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		            \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');            \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			PREPARE stmt2 FROM @SQL2;            \n" +
            "			PREPARE stmt3 FROM @SQL3;            \n" +
            "			EXECUTE stmt1;            \n" +
            "			EXECUTE stmt2;            \n" +
            "			EXECUTE stmt3;            \n" +
            "  \n" +
            "			SELECT * FROM tempOperations;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempOperations;            \n" +
            "		END IF;            \n" +
            "    DROP TABLE tempOperations;              \n" +
            "END IF;            \n" +
            "IF tableName='workorder' THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL		            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)            \n" +
            "  \n" +
            "	  ) q');            \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN            \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete work order */            \n" +
            "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;             \n" +
            "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");            \n" +
            "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			            \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			            \n" +
            "			/* [E] - Add Time line log for delete work order */			            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		            \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');            \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');            \n" +
            "			SET @SQl4 = CONCAT('update workorder_certification set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			PREPARE stmt2 FROM @SQL2;            \n" +
            "			PREPARE stmt3 FROM @SQL3;            \n" +
            "			PREPARE stmt4 FROM @SQL4;            \n" +
            "			EXECUTE stmt1;            \n" +
            "			EXECUTE stmt2;            \n" +
            "			EXECUTE stmt3;            \n" +
            "			EXECUTE stmt4;            \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorder;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempWorkorder;            \n" +
            "		END IF;            \n" +
            "    DROP TABLE tempWorkorder;              \n" +
            "END IF;            \n" +
            "IF tableName='roles' THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)            \n" +
            "         UNION ALL            \n" +
            "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)            \n" +
            "         UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');            \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempRoles)=0 THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempRoles;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempRoles;            \n" +
            "		END IF;            \n" +
            "    DROP TABLE tempRoles;              \n" +
            "END IF;            \n" +
            "IF tableName='standard_class' THEN            \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND classIDs IN(',IDs,') LIMIT 1)            \n" +
            "	  ) q');            \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempStandardClass;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempStandardClass;            \n" +
            "		END IF;            \n" +
            "    DROP TABLE tempStandardClass;              \n" +
            "END IF;            \n" +
            "IF tableName='dataelement' THEN            \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		            \n" +
            "		UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)            \n" +
            "	  ) q');            \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt2 FROM @SQL2;            \n" +
            "			EXECUTE stmt2;            \n" +
            "  \n" +
            "  \n" +
            "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)            \n" +
            "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated            \n" +
            "			FROM dataelement dl WHERE dl.dataElementID = IDs;            \n" +
            "  \n" +
            "  \n" +
            "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */            \n" +
            "  \n" +
            "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"             \n" +
            "							where type IN(''',IDs,''') and deletedAt IS NULL ');		            \n" +
            "				PREPARE stmt3 FROM @SQL3;            \n" +
            "				EXECUTE stmt3;            \n" +
            "  \n" +
            "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */            \n" +
            "  \n" +
            "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */            \n" +
            "  \n" +
            "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs             \n" +
            "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN            \n" +
            "  \n" +
            "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"             \n" +
            "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'             \n" +
            "								AND isAutoIncrement = 1 AND deletedAt IS NULL)            \n" +
            "							 and deletedAt IS NULL ');		            \n" +
            "					     PREPARE stmt4 FROM @SQL4;            \n" +
            "				             EXECUTE stmt4;            \n" +
            "					END IF;	            \n" +
            "				END IF;            \n" +
            "  \n" +
            "  \n" +
            "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN            \n" +
            "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)             \n" +
            "						    AND deletedAt IS NULL');		            \n" +
            "				PREPARE stmt5 FROM @SQL5;            \n" +
            "				EXECUTE stmt5;            \n" +
            "  \n" +
            "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"             \n" +
            "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		            \n" +
            "				PREPARE stmt6 FROM @SQL6;            \n" +
            "				EXECUTE stmt6;            \n" +
            "  \n" +
            "  \n" +
            "			END IF;            \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM tempDataElement;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempDataElement;            \n" +
            "		END IF;            \n" +
            "    DROP TABLE tempDataElement;              \n" +
            "  \n" +
            "END IF;            \n" +
            "IF tableName='workorder_preprogcomp' THEN            \n" +
            "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM            \n" +
            "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg            \n" +
            "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND            \n" +
            "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator            \n" +
            "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "    SELECT * FROM  tempComponent;            \n" +
            "    SELECT TotalCount FROM  tempComponent;            \n" +
            "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			            \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete pre program component */      \n" +
            "			SELECT partNumber,(SELECT woNumber FROM workorder WHERE woID = woppc.woID),    \n" +
            "				(SELECT opName FROM workorder_operation WHERE woOPID = refStkWOOPID)    \n" +
            "			    INTO @lvPartNumber,@lvWoNumber,@lvOpName    \n" +
            "			FROM workorder_preprogcomp woppc      \n" +
            "			WHERE woPreProgCompID = IDs  AND deletedAt IS NULL;       \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Preprogram component deleted from work order\");      \n" +
            "			SET @lvEventDescription = CONCAT(\"Preprogram component \\\"\",@lvPartNumber,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.14,NULL,deletedBy,3);  /* 3 = DELETE */      \n" +
            "			/* [E] - Add Time line log for delete pre program component */     \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt2 FROM @SQL2;            \n" +
            "			EXECUTE stmt2;            \n" +
            "  \n" +
            "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where             \n" +
            "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator            \n" +
            "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		            \n" +
            "			PREPARE stmt3 FROM @SQL3;            \n" +
            "			EXECUTE stmt3;            \n" +
            "		SELECT             \n" +
            "			*            \n" +
            "		FROM            \n" +
            "			tempComponent;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempComponent;            \n" +
            "		END IF;            \n" +
            "    DROP TABLE tempComponent;              \n" +
            "END IF;            \n" +
            "IF tableName='component' THEN            \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)            \n" +
            "		 UNION ALL            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)            \n" +
            "  \n" +
            "	  ) q');            \n" +
            "	  PREPARE stmt FROM @SQL;            \n" +
            "	   EXECUTE stmt;            \n" +
            "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN            \n" +
            "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempComponent;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempComponent;            \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempComponent;             \n" +
            "END IF;            \n" +
            "IF tableName=\"workorder_cluster\" THEN             \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)            \n" +
            "		      ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN            \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete cluster */            \n" +
            "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster            \n" +
            "		WHERE clusterID = IDs AND deletedAt IS NULL;            \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder            \n" +
            "		WHERE woID = @lvWoID AND deletedAt IS NULL ;            \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");            \n" +
            "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	            \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		            \n" +
            "		/* [E] - Add Time line log for delete cluster */            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderCluster;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempWorkorderCluster;            \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempWorkorderCluster;             \n" +
            "END IF;            \n" +
            "IF tableName=\"workorder_operation\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)            \n" +
            "			 UNION ALL            \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		             \n" +
            "		      ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN            \n" +
            "			 /* [S] - Add Time line log for delete work order operation */            \n" +
            "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName            \n" +
            "			FROM workorder_operation             \n" +
            "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;             \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;            \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");            \n" +
            "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	            \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		            \n" +
            "			/* [E] - Add Time line log for delete work order operation */            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');            \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');            \n" +
            "		SET @SQl3 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');            \n" +
            "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');            \n" +
            "		SET @SQl5 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');            \n" +
            "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');            \n" +
            "		SET @SQl7 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		            \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation            \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;            \n" +
            "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		            \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation            \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			PREPARE stmt2 FROM @SQL2;            \n" +
            "			PREPARE stmt3 FROM @SQL3;            \n" +
            "			PREPARE stmt4 FROM @SQL4;            \n" +
            "			PREPARE stmt5 FROM @SQL5;            \n" +
            "			PREPARE stmt6 FROM @SQL6;            \n" +
            "			PREPARE stmt7 FROM @SQl7;            \n" +
            "			PREPARE stmt8 FROM @SQl7;            \n" +
            "			EXECUTE stmt1;            \n" +
            "			EXECUTE stmt2;            \n" +
            "			EXECUTE stmt3;            \n" +
            "			EXECUTE stmt4;            \n" +
            "			EXECUTE stmt5;            \n" +
            "			EXECUTE stmt6;            \n" +
            "			EXECUTE stmt7;            \n" +
            "			EXECUTE stmt8;            \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperation;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempWorkorderOperation;            \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempWorkorderOperation;             \n" +
            "END IF;            \n" +
            "IF tableName=\"workorder_operation_part\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)            \n" +
            "		      ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN            \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete parts from work order */            \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName            \n" +
            "		FROM workorder_operation             \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;             \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;            \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts            \n" +
            "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;             \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");            \n" +
            "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	            \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */            \n" +
            "		/* [E] - Add Time line log for delete parts from work order */            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderPart;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempWorkorderPart;            \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempWorkorderPart;             \n" +
            "END IF;            \n" +
            "IF tableName=\"workorder_operation_equipment\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)            \n" +
            "		      ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN            \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Equipment from work order */            \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName            \n" +
            "		FROM workorder_operation             \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;             \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	            \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment            \n" +
            "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;             \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");            \n" +
            "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	            \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		            \n" +
            "		/* [E] -  Add Time line log for delete Equipment from work order */            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');            \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			PREPARE stmt2 FROM @SQL2;            \n" +
            "			EXECUTE stmt1;            \n" +
            "			EXECUTE stmt2;            \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEquipment;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempWorkorderEquipment;            \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempWorkorderEquipment;             \n" +
            "END IF;            \n" +
            "IF tableName=\"workorder_operation_employee\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)            \n" +
            "		      ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN            \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Employees from work order */            \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName            \n" +
            "		FROM workorder_operation             \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;             \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;            \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees            \n" +
            "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;             \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");            \n" +
            "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	            \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		            \n" +
            "		/* [E] -  Add Time line log for delete Employee from work order */            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEmployee;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempWorkorderEmployee;            \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempWorkorderEmployee;            \n" +
            "  \n" +
            "END IF;            \n" +
            "IF tableName=\"workorder_operation_cluster\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)            \n" +
            "		      ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN            \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete operations from cluster */            \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName            \n" +
            "		FROM workorder_operation             \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;             \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;            \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster            \n" +
            "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;             \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");            \n" +
            "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	            \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		            \n" +
            "		/* [E] -  Add Time line log for delete operations from cluster */		            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		            \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation            \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;            \n" +
            "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		            \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation            \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			PREPARE stmt2 FROM @SQL2;            \n" +
            "			EXECUTE stmt1;            \n" +
            "			EXECUTE stmt2;            \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempWorkorderOperationCluster;             \n" +
            "END IF;            \n" +
            "IF tableName=\"entity\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)            \n" +
            "		     UNION ALL            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)            \n" +
            "		     UNION ALL            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)            \n" +
            "		    UNION ALL            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)            \n" +
            "		      ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempEntity)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempEntity;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempEntity;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempEntity;             \n" +
            "END IF;            \n" +
            "IF tableName=\"salesordermst\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)            \n" +
            "		      ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete sales order mst */ 	    \n" +
            "			SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber    \n" +
            "			FROM salesordermst    \n" +
            "			WHERE FIND_IN_SET(id,IDs);    \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");      \n" +
            "			SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */      \n" +
            "			/* [E] - Add Time line log for delete sales order mst */	    \n" +
            "  \n" +
            "			SELECT * FROM tempSalesOrderMst;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempSalesOrderMst;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempSalesOrderMst;             \n" +
            "END IF;            \n" +
            "IF tableName=\"mfgcodemst\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)            \n" +
            "		      ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempMFGCodeMst;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempMFGCodeMst;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempMFGCodeMst;             \n" +
            "END IF;            \n" +
            "IF tableName=\"dataelement_transactionvalues_manual\" THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"             \n" +
            "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)            \n" +
            "				and deletedAt IS NULL');		            \n" +
            "			PREPARE stmt2 FROM @SQL2;            \n" +
            "			EXECUTE stmt2;            \n" +
            "  \n" +
            "  \n" +
            "END IF;            \n" +
            "IF tableName=\"shippedassembly\" THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;    \n" +
            "			/* [S] - Add Time line log for delete shipped assembly */     \n" +
            "			SELECT GROUP_CONCAT(shippedqty) , workorderID  INTO @lvShippedqty,@lvWoID    \n" +
            "			FROM shippedassembly    \n" +
            "			WHERE FIND_IN_SET(id,IDs);    \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID ;    \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Shipped assembly deleted\");      \n" +
            "			SET @lvEventDescription = CONCAT(\"Shipped assembly for workorder \\\"\",@lvWoNumber,\"\\\" & quantity \\\"\",@lvShippedqty ,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,9,NULL,deletedBy,3);  /* 3 = DELETE */      \n" +
            "			/* [E] - Add Time line log for delete shipped assembly */ 		    \n" +
            "  \n" +
            "END IF;            \n" +
            "IF tableName=\"assemblymst\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)            \n" +
            "		     UNION ALL            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)            \n" +
            "		     UNION ALL            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)            \n" +
            "		     UNION ALL            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)            \n" +
            "		    UNION ALL            \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)            \n" +
            "		      ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempassemblymst;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempassemblymst;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempassemblymst;             \n" +
            "END IF;            \n" +
            "IF tableName=\"assembly_revisionmst\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND fromRevisionID IN(',IDs,') AND toRevisionID IN(',IDs,')  LIMIT 1)            \n" +
            "		     UNION ALL            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)            \n" +
            "		     UNION ALL            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)            \n" +
            "		     UNION ALL            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)            \n" +
            "		    UNION ALL            \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)            \n" +
            "		      ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempassembly_revisionmst;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempassembly_revisionmst;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempassembly_revisionmst;             \n" +
            "END IF;            \n" +
            "IF tableName=\"workorder_trans_serialno\" THEN            \n" +
            "  \n" +
            "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1             \n" +
            "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;            \n" +
            "  \n" +
            "  \n" +
            "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)            \n" +
            "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)             \n" +
            "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1             \n" +
            "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;            \n" +
            "  \n" +
            "	/* condition to check total serials of type greater than actual production qty */            \n" +
            "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1            \n" +
            "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)             \n" +
            "		> IFNULL(vQty1,0)) THEN            \n" +
            "  \n" +
            "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */            \n" +
            "		IF(vQty1 IS NULL OR vQty1 = 0) THEN             \n" +
            "  \n" +
            "			/* condition to check curr opis and status match with given delete serial */            \n" +
            "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1            \n" +
            "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN            \n" +
            "  \n" +
            "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()            \n" +
            "				WHERE woTransSerialID = IDs;	            \n" +
            "  \n" +
            "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno             \n" +
            "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL            \n" +
            "				ORDER BY woTransSerialID DESC LIMIT 1;            \n" +
            "  \n" +
            "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2            \n" +
            "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	      \n" +
            "				/* [S] - Add Time line log for delete production serial from work order operation */ 	    \n" +
            "				SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");      \n" +
            "				SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	      \n" +
            "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */      \n" +
            "				/* [E] - Add Time line log for delete production serial from work order operation */ 				    \n" +
            "  \n" +
            "			ELSE             \n" +
            "				SELECT 'not allowed';            \n" +
            "			END IF;            \n" +
            "  \n" +
            "  \n" +
            "		ELSE             \n" +
            "  \n" +
            "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()            \n" +
            "			WHERE woTransSerialID = IDs;	            \n" +
            "  \n" +
            "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno             \n" +
            "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL            \n" +
            "			ORDER BY woTransSerialID DESC LIMIT 1;            \n" +
            "  \n" +
            "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2            \n" +
            "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;    \n" +
            "			/* [S] - Add Time line log for delete production serial from work order operation */ 	    \n" +
            "			SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");      \n" +
            "			SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */      \n" +
            "			/* [E] - Add Time line log for delete production serial from work order operation */        \n" +
            "  \n" +
            "		END IF;	            \n" +
            "  \n" +
            "  \n" +
            "	ELSE             \n" +
            "		SELECT 'not allowed';		            \n" +
            "	END IF;	            \n" +
            "  \n" +
            "  \n" +
            "END IF;            \n" +
            "IF tableName=\"br_label_template\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)            \n" +
            "		      ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempbr_label_template;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempbr_label_template;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempbr_label_template;             \n" +
            "END IF;            \n" +
            "IF tableName=\"measurement_types\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)            \n" +
            "		     UNION ALL            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempMeasurement_types;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempMeasurement_types;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempMeasurement_types;             \n" +
            "END IF;            \n" +
            "IF tableName=\"uoms\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg             \n" +
            "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)            \n" +
            "            UNION ALL            \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg             \n" +
            "            FROM unit_detail_formula WHERE deletedAt IS NULL AND unitID IN (',IDs,')  or toUnitID IN (',IDs,')  LIMIT 1)    \n" +
            "              UNION ALL          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND uom IN(',IDs,') LIMIT 1)) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempUOMs;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempUOMs;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempUOMs;             \n" +
            "END IF;            \n" +
            "IF tableName=\"jobtypes\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg             \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempJobTypess;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempJobTypess;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempJobTypess;             \n" +
            "END IF;            \n" +
            "IF tableName=\"ordertype\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg             \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempOrderTypes;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempOrderTypes;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempOrderTypes;             \n" +
            "END IF;            \n" +
            "IF tableName=\"reasonmst\" THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "END IF;            \n" +
            "IF tableName='component_sid_stock' THEN	            \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)            \n" +
            "			UNION ALL            \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		                \n" +
            "		    ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete component sid stock (receiving material) */ 	    \n" +
            "			SELECT GROUP_CONCAT(uid) INTO @lvUID  FROM component_sid_stock    \n" +
            "			WHERE FIND_IN_SET(id,IDs);	    \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Receiving material(s) deleted\");      \n" +
            "			SET @lvEventDescription = CONCAT(\"Receiving material(s) of UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7,NULL,deletedBy,3);  /* 3 = DELETE */      \n" +
            "			/* [E] - Add Time line log for delete component sid stock (receiving material) */ 	    \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentsidstock;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempcomponentsidstock;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempcomponentsidstock;             \n" +
            "  \n" +
            "END IF;            \n" +
            "IF tableName='component_sid_stock_dataelement_values' THEN	            \n" +
            "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;        \n" +
            "			/* [S] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	    \n" +
            "			SELECT GROUP_CONCAT(dataelementid), GROUP_CONCAT(refsidid) INTO @lvCSDlIDs,@lvRefsidid       \n" +
            "			FROM component_sid_stock_dataelement_values    \n" +
            "			WHERE FIND_IN_SET(id,IDs);    \n" +
            "  \n" +
            "			SELECT uid INTO @lvUID FROM component_sid_stock WHERE id = @lvRefsidid   ;    \n" +
            "  \n" +
            "			SELECT GROUP_CONCAT(dataElementName) INTO @lvDlNames    \n" +
            "			FROM dataelement     \n" +
            "			WHERE FIND_IN_SET(dataElementID,@lvCSDlIDs);	    \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Data field(s) of receiving material deleted\");      \n" +
            "			SET @lvEventDescription = CONCAT(\"Data field(s) \\\"\",@lvDlNames,\"\\\" of receiving material with UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7.01,NULL,deletedBy,3);  /* 3 = DELETE */      \n" +
            "			/* [E] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	    \n" +
            "END IF;            \n" +
            "IF tableName='chart_templatemst' THEN	            \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)            \n" +
            "		    ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempcharttemplatemst;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempcharttemplatemst;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempcharttemplatemst;             \n" +
            "  \n" +
            "END IF;            \n" +
            "IF tableName=\"shipping_request\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg             \n" +
            "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)            \n" +
            "            UNION ALL            \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg             \n" +
            "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;      \n" +
            "			/* [S] - Add Time line log for delete shipment request */     \n" +
            "			SELECT GROUP_CONCAT(note) INTO @lvNotes FROM Shipping_Request    \n" +
            "			WHERE FIND_IN_SET(id,IDs);	    \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Shipment request deleted\");      \n" +
            "			SET @lvEventDescription = CONCAT(\"Shipment request of \\\"\",@lvNotes,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,8,NULL,deletedBy,3);  /* 3 = DELETE */      \n" +
            "			/* [E] - Add Time line log for delete shipment request */     \n" +
            "  \n" +
            "			SELECT * FROM tempShippingRequest;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempShippingRequest;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempShippingRequest;             \n" +
            "END IF;            \n" +
            "IF tableName=\"chart_rawdata_category\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg             \n" +
            "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)            \n" +
            "            UNION ALL            \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg             \n" +
            "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempChartRawdataCategory;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempChartRawdataCategory;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempChartRawdataCategory;             \n" +
            "END IF;            \n" +
            "IF tableName=\"component_standard\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg             \n" +
            "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandard;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempcomponentStandard;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempcomponentStandard;             \n" +
            "END IF;            \n" +
            "IF tableName=\"component_standard_class\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg             \n" +
            "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');            \n" +
            "           /*  UNION ALL            \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg             \n" +
            "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt2 FROM @SQL2;            \n" +
            "			EXECUTE stmt2;            \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandardClass;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempcomponentStandardClass;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempcomponentStandardClass;             \n" +
            "END IF;            \n" +
            "IF tableName=\"rfq_lineitems\" THEN            \n" +
            "		SELECT 0 TotalCount, '' Message;            \n" +
            "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "		PREPARE stmt1 FROM @SQL1;            \n" +
            "		EXECUTE stmt1;                        \n" +
            "END IF;            \n" +
            "IF tableName=\"requirement\" THEN            \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg             \n" +
            "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM temprequirements)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM temprequirements;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM temprequirements;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE temprequirements;             \n" +
            "END IF;            \n" +
            "IF tableName=\"workorder_trans_packagingdetail\" THEN       \n" +
            "		/* [S] - Add Time line log for delete work order transaction packing details */      \n" +
            "		SELECT  (SELECT woNumber FROM workorder WHERE woID = wtpd.woID),    \n" +
            "			(SELECT opName FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL),    \n" +
            "			(SELECT woOPID FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL)    \n" +
            "			INTO @lvWoNumber , @lvOpName ,@lvWoOPID     \n" +
            "		FROM workorder_trans_packagingdetail wtpd     \n" +
            "		WHERE wtpd.woTransPackagingDetailID = IDs AND wtpd.deletedAt IS NULL  /* here ids multiple but need one record only so */;    \n" +
            "		SET @lvEventTitle = CONCAT(\"Box serial details deleted from work order operation\");      \n" +
            "		SET @lvEventDescription = CONCAT(\"Box serial details deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	      \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.17,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */      \n" +
            "		/* [E] - Add Time line log for delete work order transaction packing details */     \n" +
            "  \n" +
            "		SELECT 0 TotalCount, '' Message;            \n" +
            "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		            \n" +
            "		PREPARE stmt1 FROM @SQL1;            \n" +
            "		EXECUTE stmt1;                        \n" +
            "END IF;            \n" +
            "IF tableName=\"customer_addresses\" THEN            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)            \n" +
            "			UNION ALL            \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg             \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM tempcustomer_addresses;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM tempcustomer_addresses;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE tempcustomer_addresses;             \n" +
            "END IF;            \n" +
            "IF tableName=\"rfqforms\" THEN            \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg             \n" +
            "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in             \n" +
            "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');            \n" +
            "  \n" +
            "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in             \n" +
            "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		            \n" +
            "  \n" +
            "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in             \n" +
            "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		            \n" +
            "  \n" +
            "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in             \n" +
            "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		            \n" +
            "  \n" +
            "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in             \n" +
            "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');            \n" +
            "  \n" +
            "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		            \n" +
            "  \n" +
            "            PREPARE stmt1 FROM @SQL1;            \n" +
            "			PREPARE stmt2 FROM @SQL2;            \n" +
            "            PREPARE stmt3 FROM @SQL3;            \n" +
            "			PREPARE stmt4 FROM @SQL4;            \n" +
            "            PREPARE stmt5 FROM @SQL5;            \n" +
            "			PREPARE stmt6 FROM @SQL6;            \n" +
            "  \n" +
            "			EXECUTE stmt1;            \n" +
            "			EXECUTE stmt2;            \n" +
            "            EXECUTE stmt3;            \n" +
            "			EXECUTE stmt4;            \n" +
            "            EXECUTE stmt5;            \n" +
            "			EXECUTE stmt6;            \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM temprfqformss;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM temprfqformss;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE temprfqformss;             \n" +
            "END IF;            \n" +
            "IF tableName=\"rfq_mountingtypemst\" THEN            \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "		    FROM             \n" +
            "		    (            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg             \n" +
            "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1)    \n" +
            "             UNION ALL          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mountingTypeID IN(',IDs,') LIMIT 1)) q');            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;            \n" +
            "	EXECUTE stmt;            \n" +
            "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "			SELECT * FROM temprfqpartcategory;            \n" +
            "		ELSE            \n" +
            "			SELECT * FROM temprfqpartcategory;            \n" +
            "  \n" +
            "		END IF;            \n" +
            "		DROP TABLE temprfqpartcategory;             \n" +
            "  \n" +
            "END IF;            \n" +
            "IF tableName=\"who_bought_who\" THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "END IF;            \n" +
            "IF tableName=\"rfq_parttypemst\" THEN            \n" +
            "			SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqparttypemst as            \n" +
            "				 SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message            \n" +
            "			    FROM             \n" +
            "			    (       \n" +
            "	            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM     \n" +
            "	            component WHERE deletedAt IS NULL AND partTypeID IN(',IDs,') LIMIT 1)) q');            \n" +
            "	  	        PREPARE stmt FROM @SQL;            \n" +
            "		        EXECUTE stmt;      \n" +
            "	          IF (SELECT TotalCount FROM temprfqparttypemst)=0 THEN        \n" +
            "  \n" +
            "				SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,',     \n" +
            "	            deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "	  				PREPARE stmt1 FROM @SQL1;            \n" +
            "						EXECUTE stmt1;      \n" +
            "	            	SELECT * FROM temprfqparttypemst;            \n" +
            "			ELSE            \n" +
            "				SELECT * FROM temprfqparttypemst;            \n" +
            "  \n" +
            "			END IF;            \n" +
            "            DROP TABLE temprfqparttypemst;                       \n" +
            "  \n" +
            "END IF;            \n" +
            "IF tableName=\"rfq_lineitems_errorcode\" THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "END IF;            \n" +
            "IF tableName=\"rfq_lineitems_keywords\" THEN            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		            \n" +
            "			PREPARE stmt1 FROM @SQL1;            \n" +
            "			EXECUTE stmt1;            \n" +
            "  \n" +
            "END IF;            \n" +
            "END;  \n" +
            /* **************************** New Script -> 06-08-2018  *********************************** */
            "UPDATE page_detail  \n" +
            "SET pageName = 'Manage Work Order Other Details'  \n" +
            "WHERE pageName = 'Manage Work Order Otherdetails' ;  \n" +
            /* **************************** Add Script Version -> 06-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (67,'1.00','V1',' Sproc_GetTimelineList and other sp for tasklist url changes - KETAN '," + userid + ");"
            );
            break;
        case 67:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-08-2018  *********************************** */
           "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(    \n" +
            "	IN prfqAssyID INT    \n" +
            ")  \n" +
            "BEGIN    \n" +
            "	DROP temporary table if exists tempRfq_lineitems;    \n" +
            "    DROP temporary table if exists tempRfq_lineitemsAlt;    \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE tempRfq_lineitems AS        \n" +
            "	SELECT a.id, a.lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,     \n" +
            "    CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,    \n" +
            "    a.description, a.level, a.numOfPosition, a.customerRev, a.customerDescription,                \n" +
            "			CONCAT(part.partTypeName, ' | ', c.name) partclassID, a.isInstall, a.isPurchase, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID,     \n" +
            "            a.dnpQty, a.dnpDesig, a.qpaDesignatorStep    \n" +
            "            FROM rfq_lineitems a     \n" +
            "	LEFT JOIN uoms b ON a.uomID = b.id and IFNULL(b.isDeleted,0) = 0    \n" +
            "    LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id and IFNULL(part.isDeleted,0) = 0    \n" +
            "    LEFT JOIN rfq_mountingtypemst c ON part.partclassID = c.id and IFNULL(c.isDeleted,0) = 0        \n" +
            "    WHERE IFNULL(a.isDeleted,0) = 0 and a.rfqAssyID = prfqAssyID;    \n" +
            "  \n" +
            "	SELECT b.id, b.lineID, b.qpa, b.refDesig, a.mfgCode, a.mfgCodeID, a.mfgPN, a.mfgPNID,    \n" +
            "			a.distributor, a.distMfgCodeID, a.distPN, a.distMfgPNID,     \n" +
            "            b.custPN, b.custPNID, b.uomID, a.description descriptionAlternate, b.description, b.level, b.numOfPosition, b.customerRev, b.customerDescription,    \n" +
            "			b.partclassID, b.isInstall, b.isPurchase, b.leadQty, b.attritionRate, b.valueAddedCost, b.refRFQLineItemID,     \n" +
            "            b.dnpQty, b.dnpDesig, a.id as rfqAlternatePartID, b.qpaDesignatorStep,  \n" +
            "			a.mfgVerificationStep, a.mfgDistMappingStep, a.mfgCodeStep, a.customerApproval, a.org_mfgCode, a.org_mfgPN,  \n" +
            "            a.org_distributor, a.org_distPN,  \n" +
            "			a.distVerificationStep, a.distCodeStep, a.getMFGPNStep, a.obsoletePartStep, a.goodPartMappingStep, a.mfgPNStep, a.distPNStep  \n" +
            "            FROM rfq_lineitems_alternatepart a    \n" +
            "			JOIN tempRfq_lineitems b on a.rfqLineItemsID = b.id    \n" +
            "			WHERE IFNULL(a.isDeleted,0) = 0  AND b.id is not null order by CAST(b.lineID AS SIGNED), a.id;    \n" +
            "END;  \n" +
            "DROp PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode`;  \n" +
            "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(  \n" +
            "	IN ppageIndex INT(11),  \n" +
            "	IN precordPerPage INT(11),  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(21844)  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "DECLARE pOffset INT(11);  \n" +
            "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
            "			SELECT id,(case When(rfq_lineitems_errorcode.logicID=1) then 'QPA/Designator'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 2) then 'MFG Invalid'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 3) then 'MFG Verification'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 4) then 'Distributor Verification'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 5) then 'MFG-Distributor Mapping'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 6) then 'Get MFGPN'   \n" +
            "              when(rfq_lineitems_errorcode.logicID = 7) then 'Good Part Mapping'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 8) then 'Check Obsolete Parts'   \n" +
            "              when(rfq_lineitems_errorcode.logicID = 9) then 'MFG PN Invalid'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 10) then 'Distributor Invalid'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 11) then 'Distributor PN Invalid'                 \n" +
            "              when(rfq_lineitems_errorcode.logicID = 12) then 'Customer Approval'  \n" +
            "              ELSE '' END) AS `logicName`,errorCode, errorColor,   \n" +
            "              description, systemVariable,logicID  \n" +
            "			FROM `rfq_lineitems_errorcode`  \n" +
            "			WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0;  \n" +
            "  \n" +
            "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"errorCode ASC\") ;  \n" +
            "		ELSE  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "		END IF;	  \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "			SET pWhereClause = '1=1' ;  \n" +
            "		END IF;	  \n" +
            "  \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "		ELSE	  \n" +
            "			SET rowNumWhere = '';  \n" +
            "		END IF;	  \n" +
            "  \n" +
            "		/* to get total count of rows */  \n" +
            "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
            "		PREPARE query1 FROM @SQLStatement1;  \n" +
            "		EXECUTE query1;  \n" +
            "		DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "		PREPARE query2 FROM @SQLStatement2;  \n" +
            "		EXECUTE query2;  \n" +
            "		DEALLOCATE PREPARE query2;  \n" +
            "  \n" +
            "		DROP TEMPORARY TABLE Results;  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 06-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (68,'1.00','V1','ALTER SP Sproc_GetRFQLineItemsByID, Sproc_RetrieveRFQLineitemsErrorCode - Ravi'," + userid + ");"
            );
            break;
        case 68:
            allDbChangesArray.push(
            /* **************************** New Script -> 06-08-2018  *********************************** */
              "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
              "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(            \n" +
              "	IN ppageIndex INT(11),            \n" +
              "	IN precordPerPage INT(11),            \n" +
              "	IN pOrderBy VARCHAR(255),            \n" +
              "	IN pWhereClause VARCHAR(21844),            \n" +
              "	IN rfqAssyID INT(11),            \n" +
              "	IN puserID INT (11)      \n" +
              "    )  \n" +
              "BEGIN            \n" +
              "  \n" +
              "	    DECLARE pOffset INT(11);            \n" +
              "	    DECLARE rowNumWhere VARCHAR(255) ;        \n" +
              "	    SET @SQL = NULL;              \n" +
              "	    SET @SQL1 = NULL;               \n" +
              "	    IF (pOrderBy IS NOT NULL) THEN            \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
              "		ELSE            \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;             \n" +
              "		END IF;	            \n" +
              "  \n" +
              "  \n" +
              "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN            \n" +
              "			SET pWhereClause = '1=1' ;            \n" +
              "		END IF;	            \n" +
              "  \n" +
              "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
              "			SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
              "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
              "		ELSE	            \n" +
              "			SET rowNumWhere = '';            \n" +
              "		END IF;	            \n" +
              "		SELECT    \n" +
              "                     GROUP_CONCAT(DISTINCT    \n" +
              "				CONCAT(    \n" +
              "					'Max((IF(ra.requestQty = ''',    \n" +
              "						ra.requestQty,    \n" +
              "					''', rq.finalPrice, null))) AS ''',    \n" +
              "						ra.requestQty,''''    \n" +
              "					)    \n" +
              "					) INTO @SQL    \n" +
              "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
              "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
              "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
              "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;          \n" +
              "			IF(@SQL IS NOT NULL) THEN            \n" +
              "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS            \n" +
              "					SELECT             \n" +
              "						rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,              \n" +
              "						rp.partTypeName, rm.name,  \n" +
              "						(SELECT gc.gencCategoryName FROM genericcategory gc  \n" +
              "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus  \n" +
              "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn) AS PartStatus,  \n" +
              "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL) AS LTBDate,  \n" +
              "						(SELECT GROUP_CONCAT(IFNULL(mf.mfgCode,\"N/A\"),\"|\",rla.mfgPN)AS mfgPn             \n" +
              "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla   \n" +
              "						LEFT JOIN mfgcodemst mf ON rla.mfgCodeID=mf.id   \n" +
              "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',             \n" +
              "						@SQL,' FROM rfq_consolidated_mfgpn_lineitem rl            \n" +
              "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID            \n" +
              "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                    \n" +
              "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                     \n" +
              "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id          \n" +
              "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'   \n" +
              "						AND rq.selectedMpn IN (SELECT mfgPN FROM component   \n" +
              "					WHERE deletedAt IS NULL AND partstatus IN   \n" +
              "						(SELECT gencCategoryID FROM genericcategory   \n" +
              "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Not For New Design\",\"Obsolete\")))  \n" +
              "					GROUP BY rl.lineID');              \n" +
              "			END IF;             \n" +
              "			PREPARE stmt FROM @SQLStatement;            \n" +
              "			EXECUTE stmt;	            \n" +
              "  \n" +
              "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );            \n" +
              "			PREPARE query1 FROM @SQLStatement1;            \n" +
              "			EXECUTE query1;            \n" +
              "			DEALLOCATE PREPARE query1;            \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
              "			PREPARE query2 FROM @SQLStatement2;            \n" +
              "			EXECUTE query2;            \n" +
              "			DEALLOCATE PREPARE query2;            \n" +
              "  \n" +
              "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
              "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
              "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
              "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);            \n" +
              "			PREPARE query3 FROM @SQLStatement3;            \n" +
              "			EXECUTE query3;            \n" +
              "			DEALLOCATE PREPARE query3;            \n" +
              "  \n" +
              "			SET @SQLStatement4 = CONCAT(\"    \n" +
              "				SELECT requestQty,     \n" +
              "					finalPrice,     \n" +
              "					unitPrice,    \n" +
              "					supplier,     \n" +
              "					selectedMpn,     \n" +
              "					selectionMode,    \n" +
              "					qtyID,     \n" +
              "					consolidateID,    \n" +
              "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus    \n" +
              "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq         \n" +
              "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID     \n" +
              "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");            \n" +
              "			PREPARE query4 FROM @SQLStatement4;            \n" +
              "			EXECUTE query4;            \n" +
              "			DEALLOCATE PREPARE query4;            \n" +
              "  \n" +
              "			DROP TEMPORARY TABLE consolidatetemp;              \n" +
              "    END;  \n" +
            /* **************************** New Script -> 06-08-2018  *********************************** */
              "INSERT INTO systemconfigrations (`key`,`values`,clusterName,isEncrypted,isActive,isDeleted,createdBy,isEditable) VALUES  \n" +
                          "('AvnetWCToken','1161067%2Cq2ZjuoBT2xzOLWnKRPL0%2B38r%2FA74HlNfrAk08rrYyXK0TDOJke0EYpkxUcwhdRnx%2FA7Jmkm6wIpJAXQ3XckgRhd8u8Utj52XOiGX%2F8%2FLPpRYfxR804TC306rPeGhS1amlfwsNsg3VqV%2FV06MBZiUNKJOzZTnxVH1cNcrj7T2MFSX%2B4N9uP7GCq5LYta2nJhHKvhin1MICtB1YLuUZGQfNg%3D%3D','Avnet',0,1,0,'1',1),  \n" +
                          "('AvnetWCTrustedToken','1161067%2Chn5a%2F81q8%2BuwhhZRnPB4p4wkkc8%3D','Avnet',0,1,0,'1',1);  \n" +
            /* **************************** Add Script Version -> 06-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (69,'1.00','V1',' Material At Risk - Vaibhav '," + userid + ");"
            );
            break;
        case 69:
            allDbChangesArray.push(
          //  /* **************************** New Script -> 07-08-2018  *********************************** */
                           "create table component_fields_genericalias_mst(  \n" +
              "id int primary key auto_increment,  \n" +
              "refTableName varchar(50),  \n" +
              "refId int ,  \n" +
              "alias varchar(255),  \n" +
              "isDeleted tinyint(1) NOT NULL DEFAULT '0',  \n" +
              "createdBy varchar(255) NOT NULL,  \n" +
              "createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
              "updatedBy varchar(255) DEFAULT NULL,  \n" +
              "updatedAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
              "deletedBy varchar(255) DEFAULT NULL,  \n" +
              "deletedAt datetime DEFAULT NULL  \n" +
              ");  \n" +
          //  /* **************************** Add Script Version -> 07-08-2018 *********************************** */
           "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (70,'1.00','V1','create table component_fields_genericalias_mst - Mona '," + userid + ");"
            );
            break;
        case 70:
            allDbChangesArray.push(
            /* **************************** New Script -> 07-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQNotQuotedLineItems` ;  \n" +
             "CREATE PROCEDURE `Sproc_GetRFQNotQuotedLineItems`(            \n" +
             "	IN ppageIndex INT(11),            \n" +
             "	IN precordPerPage INT(11),            \n" +
             "	IN pOrderBy VARCHAR(255),            \n" +
             "	IN pWhereClause VARCHAR(21844),            \n" +
             "	IN rfqAssyID INT(11),            \n" +
             "	IN puserID INT (11)      \n" +
             "    )  \n" +
             "BEGIN            \n" +
             "  \n" +
             "	    DECLARE pOffset INT(11);            \n" +
             "	    DECLARE rowNumWhere VARCHAR(255) ;        \n" +
             "	    SET @SQL = NULL;              \n" +
             "	    SET @SQL1 = NULL;               \n" +
             "	    IF (pOrderBy IS NOT NULL) THEN            \n" +
             "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
             "		ELSE            \n" +
             "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;             \n" +
             "		END IF;	            \n" +
             "  \n" +
             "  \n" +
             "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN            \n" +
             "			SET pWhereClause = '1=1' ;            \n" +
             "		END IF;	            \n" +
             "  \n" +
             "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
             "			SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
             "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
             "		ELSE	            \n" +
             "			SET rowNumWhere = '';            \n" +
             "		END IF;	            \n" +
             "		SELECT            \n" +
             "                      GROUP_CONCAT(DISTINCT            \n" +
             "				CONCAT(            \n" +
             "					'Max((IF(ra.requestQty = ''',            \n" +
             "						ra.requestQty,            \n" +
             "					''', rq.finalPrice, null))) AS ''',            \n" +
             "						ra.requestQty,''''            \n" +
             "					)            \n" +
             "					),        \n" +
             "			GROUP_CONCAT(DISTINCT            \n" +
             "				CONCAT(            \n" +
             "					'Max((IF(ra.requestQty = ''',            \n" +
             "						ra.requestQty,            \n" +
             "					''', rq.finalPrice, null))) IS NULL'            \n" +
             "					) SEPARATOR ' OR '           \n" +
             "					)        \n" +
             "				INTO @SQL, @SQL1        \n" +
             "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
             "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
             "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
             "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;          \n" +
             "			IF(@SQL IS NOT NULL) THEN            \n" +
             "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS            \n" +
             "					SELECT             \n" +
             "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,              \n" +
             "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,            \n" +
             "					(SELECT GROUP_CONCAT(rla.PIDCode)AS mfgPn             \n" +
             "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',             \n" +
             "					@SQL,' FROM rfq_consolidated_mfgpn_lineitem rl            \n" +
             "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID            \n" +
             "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id            \n" +
             "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');          \n" +
             "  \n" +
             "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @SQL1);        \n" +
             "  \n" +
             "			ELSE            \n" +
             "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS            \n" +
             "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,            \n" +
             "					(SELECT GROUP_CONCAT(IFNULL(mf.mfgCode,\"N/A\"),\"|\",rla.mfgPN)AS mfgPn             \n" +
             "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN mfgcodemst mf ON             \n" +
             "                               rla.mfgCodeID=mf.id WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl            \n" +
             "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID');	            \n" +
             "			END IF;             \n" +
             "			PREPARE stmt FROM @SQLStatement;            \n" +
             "			EXECUTE stmt;	            \n" +
             "  \n" +
             "  \n" +
             "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );            \n" +
             "			PREPARE query1 FROM @SQLStatement1;            \n" +
             "			EXECUTE query1;            \n" +
             "			DEALLOCATE PREPARE query1;            \n" +
             "  \n" +
             "  \n" +
             "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
             "			PREPARE query2 FROM @SQLStatement2;            \n" +
             "			EXECUTE query2;            \n" +
             "			DEALLOCATE PREPARE query2;            \n" +
             "  \n" +
             "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
             "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
             "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
             "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);            \n" +
             "			PREPARE query3 FROM @SQLStatement3;            \n" +
             "			EXECUTE query3;            \n" +
             "			DEALLOCATE PREPARE query3;            \n" +
             "  \n" +
             "  			SET @SQLStatement4 = CONCAT(\"    \n" +
             "				SELECT requestQty,     \n" +
             "					finalPrice,     \n" +
             "					unitPrice,    \n" +
             "					supplier,     \n" +
             "					selectedMpn,     \n" +
             "					selectionMode,    \n" +
             "					qtyID,     \n" +
             "					consolidateID,    \n" +
             "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus    \n" +
             "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq         \n" +
             "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID     \n" +
             "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");            \n" +
             "			PREPARE query4 FROM @SQLStatement4;            \n" +
             "			EXECUTE query4;            \n" +
             "			DEALLOCATE PREPARE query4;            \n" +
             "  \n" +
             "			DROP TEMPORARY TABLE consolidatetemp;              \n" +
             "    END;  \n" +
            /* **************************** New Script -> 07-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQExcessMaterialLineItems` ;  \n" +
             "CREATE PROCEDURE `Sproc_GetRFQExcessMaterialLineItems`(            \n" +
             "	IN ppageIndex INT(11),            \n" +
             "	IN precordPerPage INT(11),            \n" +
             "	IN pOrderBy VARCHAR(255),            \n" +
             "	IN pWhereClause VARCHAR(21844),            \n" +
             "	IN rfqAssyID INT(11),            \n" +
             "	IN puserID INT (11)      \n" +
             "    )  \n" +
             "BEGIN            \n" +
             "  \n" +
             "	    DECLARE pOffset INT(11);            \n" +
             "	    DECLARE rowNumWhere VARCHAR(255) ;        \n" +
             "	    SET @SQLString = NULL;       \n" +
             "	    SET @HavingClause = NULL;       \n" +
             "	    SET SESSION group_concat_max_len = 150000;        \n" +
             "	    IF (pOrderBy IS NOT NULL) THEN            \n" +
             "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
             "		ELSE            \n" +
             "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` desc\") ;             \n" +
             "		END IF;	            \n" +
             "  \n" +
             "  \n" +
             "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN            \n" +
             "			SET pWhereClause = '1=1' ;            \n" +
             "		END IF;	            \n" +
             "  \n" +
             "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
             "			SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
             "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
             "		ELSE	            \n" +
             "			SET rowNumWhere = '';            \n" +
             "		END IF;	            \n" +
             "		SELECT            \n" +
             "                      GROUP_CONCAT(DISTINCT            \n" +
             "				CONCAT(            \n" +
             "					'Max((IF(ra.requestQty = ''',            \n" +
             "						ra.requestQty,            \n" +
             "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),       \n" +
             "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),       \n" +
             "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) AS ''',            \n" +
             "						ra.requestQty,''''            \n" +
             "					)            \n" +
             "					),      \n" +
             "  \n" +
             "                      GROUP_CONCAT(DISTINCT            \n" +
             "				CONCAT(            \n" +
             "					'Max((IF(ra.requestQty = ''',            \n" +
             "						ra.requestQty,            \n" +
             "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),       \n" +
             "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),       \n" +
             "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) > 0'               \n" +
             "					) SEPARATOR ' OR '           \n" +
             "					)      \n" +
             "				INTO @SQLString, @HavingClause       \n" +
             "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
             "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
             "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
             "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;          \n" +
             "			IF(@SQLString IS NOT NULL) THEN            \n" +
             "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS            \n" +
             "					SELECT             \n" +
             "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,              \n" +
             "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,            \n" +
             "					(SELECT GROUP_CONCAT(rla.PIDCode)AS mfgPn             \n" +
             "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',             \n" +
             "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl            \n" +
             "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID            \n" +
             "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id            \n" +
             "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');          \n" +
             "  \n" +
             "				SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);            \n" +
             "			END IF;        \n" +
             "			PREPARE stmt FROM @SQLStatement;            \n" +
             "			EXECUTE stmt;	            \n" +
             "  \n" +
             "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );            \n" +
             "			PREPARE query1 FROM @SQLStatement1;            \n" +
             "			EXECUTE query1;            \n" +
             "			DEALLOCATE PREPARE query1;            \n" +
             "  \n" +
             "  \n" +
             "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
             "			PREPARE query2 FROM @SQLStatement2;            \n" +
             "			EXECUTE query2;            \n" +
             "			DEALLOCATE PREPARE query2;            \n" +
             "  \n" +
             "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
             "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
             "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
             "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);            \n" +
             "			PREPARE query3 FROM @SQLStatement3;            \n" +
             "			EXECUTE query3;            \n" +
             "			DEALLOCATE PREPARE query3;            \n" +
             "  \n" +
             "  \n" +
             "			SET @SQLStatement4 = CONCAT(\"SELECT requestQty, finalPrice, unitPrice,supplier, selectedMpn, selectionMode,qtyID, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq         \n" +
             "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID WHERE consolidateID IN (select id from consolidatetemp)\");            \n" +
             "			PREPARE query4 FROM @SQLStatement4;            \n" +
             "			EXECUTE query4;            \n" +
             "			DEALLOCATE PREPARE query4;            \n" +
             "  \n" +
             "  \n" +
             "			DROP TEMPORARY TABLE consolidatetemp;              \n" +
             "    END;  \n" +
             /* **************************** New Script -> 07-08-2018  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
             "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(            \n" +
             "	IN ppageIndex INT(11),            \n" +
             "	IN precordPerPage INT(11),            \n" +
             "	IN pOrderBy VARCHAR(255),            \n" +
             "	IN pWhereClause VARCHAR(21844),            \n" +
             "	IN rfqAssyID INT(11),            \n" +
             "	IN puserID INT (11)      \n" +
             "    )  \n" +
             "BEGIN            \n" +
             "  \n" +
             "	    DECLARE pOffset INT(11);            \n" +
             "	    DECLARE rowNumWhere VARCHAR(255) ;        \n" +
             "	    SET @SQL = NULL;              \n" +
             "	    SET @SQL1 = NULL;               \n" +
             "	    IF (pOrderBy IS NOT NULL) THEN            \n" +
             "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
             "		ELSE            \n" +
             "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;             \n" +
             "		END IF;	            \n" +
             "  \n" +
             "  \n" +
             "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN            \n" +
             "			SET pWhereClause = '1=1' ;            \n" +
             "		END IF;	            \n" +
             "  \n" +
             "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
             "			SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
             "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
             "		ELSE	            \n" +
             "			SET rowNumWhere = '';            \n" +
             "		END IF;	            \n" +
             "		SELECT    \n" +
             "                     GROUP_CONCAT(DISTINCT    \n" +
             "				CONCAT(    \n" +
             "					'Max((IF(ra.requestQty = ''',    \n" +
             "						ra.requestQty,    \n" +
             "					''', rq.finalPrice, null))) AS ''',    \n" +
             "						ra.requestQty,''''    \n" +
             "					)    \n" +
             "					) INTO @SQL    \n" +
             "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
             "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
             "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
             "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;          \n" +
             "			IF(@SQL IS NOT NULL) THEN            \n" +
             "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS            \n" +
             "					SELECT             \n" +
             "						rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,              \n" +
             "						rp.partTypeName, rm.name,  \n" +
             "						(SELECT gc.gencCategoryName FROM genericcategory gc  \n" +
             "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus  \n" +
             "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn) AS PartStatus,  \n" +
             "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL) AS LTBDate,  \n" +
             "						(SELECT GROUP_CONCAT(rla.PIDCode)AS mfgPn             \n" +
             "							FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',             \n" +
             "						@SQL,' FROM rfq_consolidated_mfgpn_lineitem rl            \n" +
             "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID            \n" +
             "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                    \n" +
             "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                     \n" +
             "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id          \n" +
             "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'   \n" +
             "						AND rq.selectedMpn IN (SELECT mfgPN FROM component   \n" +
             "					WHERE deletedAt IS NULL AND partstatus IN   \n" +
             "						(SELECT gencCategoryID FROM genericcategory   \n" +
             "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Not For New Design\",\"Obsolete\")))  \n" +
             "					GROUP BY rl.lineID');              \n" +
             "			END IF;             \n" +
             "			PREPARE stmt FROM @SQLStatement;            \n" +
             "			EXECUTE stmt;	            \n" +
             "  \n" +
             "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );            \n" +
             "			PREPARE query1 FROM @SQLStatement1;            \n" +
             "			EXECUTE query1;            \n" +
             "			DEALLOCATE PREPARE query1;            \n" +
             "  \n" +
             "  \n" +
             "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
             "			PREPARE query2 FROM @SQLStatement2;            \n" +
             "			EXECUTE query2;            \n" +
             "			DEALLOCATE PREPARE query2;            \n" +
             "  \n" +
             "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
             "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
             "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
             "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);            \n" +
             "			PREPARE query3 FROM @SQLStatement3;            \n" +
             "			EXECUTE query3;            \n" +
             "			DEALLOCATE PREPARE query3;            \n" +
             "  \n" +
             "			SET @SQLStatement4 = CONCAT(\"    \n" +
             "				SELECT requestQty,     \n" +
             "					finalPrice,     \n" +
             "					unitPrice,    \n" +
             "					supplier,     \n" +
             "					selectedMpn,     \n" +
             "					selectionMode,    \n" +
             "					qtyID,     \n" +
             "					consolidateID,    \n" +
             "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus    \n" +
             "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq         \n" +
             "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID     \n" +
             "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");            \n" +
             "			PREPARE query4 FROM @SQLStatement4;            \n" +
             "			EXECUTE query4;            \n" +
             "			DEALLOCATE PREPARE query4;            \n" +
             "  \n" +
             "			DROP TEMPORARY TABLE consolidatetemp;              \n" +
             "    END;  \n" +
             /* **************************** New Script -> 07-08-2018  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLeadTimeRiskLineItems` ;  \n" +
             "CREATE PROCEDURE `Sproc_GetRFQLeadTimeRiskLineItems`(            \n" +
             "	IN ppageIndex INT(11),            \n" +
             "	IN precordPerPage INT(11),            \n" +
             "	IN pOrderBy VARCHAR(255),            \n" +
             "	IN pWhereClause VARCHAR(21844),            \n" +
             "	IN rfqAssyID INT(11),            \n" +
             "	IN puserID INT (11)      \n" +
             "    )  \n" +
             "BEGIN            \n" +
             "  \n" +
             "	    DECLARE pOffset INT(11);            \n" +
             "	    DECLARE rowNumWhere VARCHAR(255) ;    \n" +
             "	    SET SESSION group_concat_max_len = 150000;            \n" +
             "	    SET @SQLString = NULL;         \n" +
             "	    SET @HavingClause = NULL;             \n" +
             "	    IF (pOrderBy IS NOT NULL) THEN            \n" +
             "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
             "		ELSE            \n" +
             "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;             \n" +
             "		END IF;	            \n" +
             "  \n" +
             "  \n" +
             "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN            \n" +
             "			SET pWhereClause = '1=1' ;            \n" +
             "		END IF;	            \n" +
             "  \n" +
             "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
             "			SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
             "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
             "		ELSE	            \n" +
             "			SET rowNumWhere = '';            \n" +
             "		END IF;	            \n" +
             "		SELECT            \n" +
             "                      GROUP_CONCAT(DISTINCT            \n" +
             "				CONCAT(            \n" +
             "					'Max((IF(ra.requestQty = ''',            \n" +
             "						ra.requestQty,            \n" +
             "					''', (SELECT IFNULL(leadTime,0) from component where mfgPN = rq.selectedMpn AND deletedAt IS NULL AND IFNULL(isDeleted,0)=0), null))) AS ''',            \n" +
             "						ra.requestQty,''''            \n" +
             "					)            \n" +
             "					),  \n" +
             "		GROUP_CONCAT(DISTINCT            \n" +
             "				CONCAT(            \n" +
             "					'Max((IF(ra.requestQty = ''',            \n" +
             "						ra.requestQty,            \n" +
             "					''', (SELECT IFNULL(leadTime,0) from component where mfgPN = rq.selectedMpn AND deletedAt IS NULL AND IFNULL(isDeleted,0)=0), null))) < 16'  \n" +
             "					) SEPARATOR ' OR '                \n" +
             "					)   \n" +
             "				INTO @SQLString,@HavingClause       \n" +
             "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
             "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
             "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
             "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;          \n" +
             "			IF(@SQLString IS NOT NULL) THEN            \n" +
             "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS            \n" +
             "					SELECT             \n" +
             "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,           \n" +
             "					(SELECT GROUP_CONCAT(rla.PIDCode)AS mfgPn             \n" +
             "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',             \n" +
             "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl            \n" +
             "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID            \n" +
             "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id            \n" +
             "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'   \n" +
             "					GROUP BY rl.lineID');     \n" +
             "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	            \n" +
             "			END IF;             \n" +
             "			PREPARE stmt FROM @SQLStatement;            \n" +
             "			EXECUTE stmt;	            \n" +
             "  \n" +
             "  \n" +
             "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );            \n" +
             "			PREPARE query1 FROM @SQLStatement1;            \n" +
             "			EXECUTE query1;            \n" +
             "			DEALLOCATE PREPARE query1;            \n" +
             "  \n" +
             "  \n" +
             "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
             "			PREPARE query2 FROM @SQLStatement2;            \n" +
             "			EXECUTE query2;            \n" +
             "			DEALLOCATE PREPARE query2;            \n" +
             "  \n" +
             "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
             "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
             "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
             "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);            \n" +
             "			PREPARE query3 FROM @SQLStatement3;            \n" +
             "			EXECUTE query3;            \n" +
             "			DEALLOCATE PREPARE query3;            \n" +
             "  \n" +
             "  			SET @SQLStatement4 = CONCAT(\"    \n" +
             "				SELECT requestQty,     \n" +
             "					finalPrice,     \n" +
             "					unitPrice,    \n" +
             "					supplier,     \n" +
             "					selectedMpn,     \n" +
             "					selectionMode,    \n" +
             "					qtyID,     \n" +
             "					consolidateID  \n" +
             "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq         \n" +
             "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID     \n" +
             "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");            \n" +
             "			PREPARE query4 FROM @SQLStatement4;            \n" +
             "			EXECUTE query4;            \n" +
             "			DEALLOCATE PREPARE query4;            \n" +
             "  \n" +
             "			DROP TEMPORARY TABLE consolidatetemp;              \n" +
             "    END;  \n" +
             /* **************************** New Script -> 07-08-2018  *********************************** */
            /* **************************** Add Script Version -> 07-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (71,'1.00','V1','Review Pricing Related SP Added - Vaibhav '," + userid + ");"
            );
            break;
        case 71:
            allDbChangesArray.push(
            /* **************************** New Script -> 07-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_UpdateAssyConsolidateQuantity` ;  \n" +
            "CREATE PROCEDURE `Sproc_UpdateAssyConsolidateQuantity`(  \n" +
            "      IN rfqAssyID INT,  \n" +
            "      IN qtyID INT  \n" +
            "  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "IF(qtyID IS NOT NULL) THEN   \n" +
            "         UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq SET rq.finalPrice=(NULL),rq.unitPrice=(NULL),rq.supplier=(NULL),  \n" +
            "         rq.selectedMpn=(NULL),rq.selectionMode=(NULL),rq.min=(NULL),rq.mult=(NULL),rq.currentStock=(NULL)  \n" +
            "         WHERE rq.qtyID=qtyID AND  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=rfqAssyID AND rl.isdeleted=FALSE);  \n" +
            "         ELSE  \n" +
            "         UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq SET rq.finalPrice=(NULL),rq.unitPrice=(NULL),rq.supplier=(NULL),  \n" +
            "         rq.selectedMpn=(NULL),rq.selectionMode=(NULL),rq.min=(NULL),rq.mult=(NULL),rq.currentStock=(NULL)  \n" +
            "         WHERE  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=rfqAssyID AND rl.isdeleted=FALSE);  \n" +
            "END IF;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 07-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (72,'1.00','V1','Create Sproc_UpdateAssyConsolidateQuantity - Champak '," + userid + ");"
            );
            break;
        case 72:
            allDbChangesArray.push(
            /* **************************** New Script -> 07-08-2018  *********************************** */
            "ALTER TABLE component MODIFY COLUMN PIDCode VARCHAR(40);  \n" +
            /* **************************** Add Script Version -> 07-08-2018 *********************************** */
            "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity ADD COLUMN selectedPIDCode VARCHAR(40) NULL;  \n" +
            /* **************************** Add Script Version -> 07-08-2018 *********************************** */
            "UPDATE rfq_consolidate_mfgpn_lineitem_quantity    \n" +
            "SET selectedPIDCode=(SELECT PIDCode FROM component a WHERE  a.mfgPN=selectedMpn AND deletedAt IS NULL);  \n" +
            /* **************************** Add Script Version -> 07-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(    \n" +
            "	IN ppageIndex INT(11),    \n" +
            "	IN precordPerPage INT(11),    \n" +
            "	IN pOrderBy VARCHAR(255),    \n" +
            "	IN pWhereClause VARCHAR(21844),    \n" +
            "	IN rfqAssyID INT(11),    \n" +
            "	IN puserID INT (11)    \n" +
            "    )  \n" +
            "BEGIN    \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);    \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;    \n" +
            "	    SET @SQLString = NULL;    \n" +
            "	    SET SESSION group_concat_max_len = 150000;        \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN    \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
            "		ELSE    \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPn desc\") ;     \n" +
            "		END IF;	    \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN    \n" +
            "			SET pWhereClause = '1=1' ;    \n" +
            "		END IF;	    \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
            "		ELSE	    \n" +
            "			SET rowNumWhere = '';    \n" +
            "		END IF;	    \n" +
            "		SELECT    \n" +
            "                     GROUP_CONCAT(DISTINCT    \n" +
            "				CONCAT(    \n" +
            "					'Max((IF(ra.requestQty = ''',    \n" +
            "						ra.requestQty,    \n" +
            "					''', rq.finalPrice, null))) AS ''',    \n" +
            "						ra.requestQty,''''    \n" +
            "					)    \n" +
            "					) INTO @SQLString    \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq    \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID    \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id    \n" +
            "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;    \n" +
            "  \n" +
            "			IF(@SQLString IS NOT NULL) THEN    \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS    \n" +
            "					SELECT     \n" +
            "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,      \n" +
            "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,    \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn     \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla     \n" +
            "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',     \n" +
            "					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl    \n" +
            "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID    \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id    \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');    \n" +
            "  \n" +
            "			ELSE    \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS    \n" +
            "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,    \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn     \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla     \n" +
            "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl    \n" +
            "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	    \n" +
            "			END IF;    \n" +
            "			PREPARE stmt FROM @SQLStatement;    \n" +
            "			EXECUTE stmt;	    \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );    \n" +
            "			PREPARE query1 FROM @SQLStatement1;    \n" +
            "			EXECUTE query1;    \n" +
            "			DEALLOCATE PREPARE query1;    \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
            "			PREPARE query2 FROM @SQLStatement2;    \n" +
            "			EXECUTE query2;    \n" +
            "			DEALLOCATE PREPARE query2;    \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq    \n" +
            "  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID    \n" +
            "  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id    \n" +
            "   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);    \n" +
            "			PREPARE query3 FROM @SQLStatement3;    \n" +
            "			EXECUTE query3;    \n" +
            "			DEALLOCATE PREPARE query3;    \n" +
            "  \n" +
            "			SET @SQLStatement4 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );    \n" +
            "			PREPARE query4 FROM @SQLStatement4;    \n" +
            "			EXECUTE query4;    \n" +
            "			DEALLOCATE PREPARE query4;    \n" +
            "  \n" +
            "			SET @SQLStatement5 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.turnType,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt    \n" +
            "  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id    \n" +
            "   WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);    \n" +
            "			PREPARE query5 FROM @SQLStatement5;    \n" +
            "			EXECUTE query5;    \n" +
            "			DEALLOCATE PREPARE query5;    \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;      \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 07-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQNotQuotedLineItems` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQNotQuotedLineItems`(            \n" +
            "	IN ppageIndex INT(11),            \n" +
            "	IN precordPerPage INT(11),            \n" +
            "	IN pOrderBy VARCHAR(255),            \n" +
            "	IN pWhereClause VARCHAR(21844),            \n" +
            "	IN rfqAssyID INT(11),            \n" +
            "	IN puserID INT (11)      \n" +
            "    )  \n" +
            "BEGIN            \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);            \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;        \n" +
            "	    SET @SQLString = NULL;              \n" +
            "	    SET @HavingClause = NULL;  \n" +
            "	    SET SESSION group_concat_max_len = 150000;                  \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN            \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
            "		ELSE            \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;             \n" +
            "		END IF;	            \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN            \n" +
            "			SET pWhereClause = '1=1' ;            \n" +
            "		END IF;	            \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
            "		ELSE	            \n" +
            "			SET rowNumWhere = '';            \n" +
            "		END IF;	            \n" +
            "		SELECT            \n" +
            "                      GROUP_CONCAT(DISTINCT            \n" +
            "				CONCAT(            \n" +
            "					'Max((IF(ra.requestQty = ''',            \n" +
            "						ra.requestQty,            \n" +
            "					''', rq.finalPrice, null))) AS ''',            \n" +
            "						ra.requestQty,''''            \n" +
            "					)            \n" +
            "					),        \n" +
            "			GROUP_CONCAT(DISTINCT            \n" +
            "				CONCAT(            \n" +
            "					'Max((IF(ra.requestQty = ''',            \n" +
            "						ra.requestQty,            \n" +
            "					''', rq.finalPrice, null))) IS NULL'            \n" +
            "					) SEPARATOR ' OR '           \n" +
            "					)        \n" +
            "				INTO @SQLString, @HavingClause        \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
            "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;          \n" +
            "			IF(@SQLString IS NOT NULL) THEN            \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS            \n" +
            "					SELECT             \n" +
            "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,              \n" +
            "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,            \n" +
            "					(SELECT GROUP_CONCAT(rla.PIDCode)AS mfgPn             \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',             \n" +
            "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl            \n" +
            "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID            \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id            \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');          \n" +
            "  \n" +
            "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                 \n" +
            "			END IF;             \n" +
            "			PREPARE stmt FROM @SQLStatement;            \n" +
            "			EXECUTE stmt;	            \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );            \n" +
            "			PREPARE query1 FROM @SQLStatement1;            \n" +
            "			EXECUTE query1;            \n" +
            "			DEALLOCATE PREPARE query1;            \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
            "			PREPARE query2 FROM @SQLStatement2;            \n" +
            "			EXECUTE query2;            \n" +
            "			DEALLOCATE PREPARE query2;            \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
            "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
            "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
            "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);            \n" +
            "			PREPARE query3 FROM @SQLStatement3;            \n" +
            "			EXECUTE query3;            \n" +
            "			DEALLOCATE PREPARE query3;            \n" +
            "  \n" +
            "  			SET @SQLStatement4 = CONCAT(\"    \n" +
            "				SELECT requestQty,     \n" +
            "					finalPrice,     \n" +
            "					unitPrice,    \n" +
            "					supplier,     \n" +
            "					selectedMpn,     \n" +
            "					selectionMode,    \n" +
            "					selectedPIDCode,  \n" +
            "					qtyID,     \n" +
            "					consolidateID,    \n" +
            "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus    \n" +
            "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq         \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID     \n" +
            "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");            \n" +
            "			PREPARE query4 FROM @SQLStatement4;            \n" +
            "			EXECUTE query4;            \n" +
            "			DEALLOCATE PREPARE query4;            \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;              \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 07-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQExcessMaterialLineItems` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQExcessMaterialLineItems`(            \n" +
            "	IN ppageIndex INT(11),            \n" +
            "	IN precordPerPage INT(11),            \n" +
            "	IN pOrderBy VARCHAR(255),            \n" +
            "	IN pWhereClause VARCHAR(21844),            \n" +
            "	IN rfqAssyID INT(11),            \n" +
            "	IN puserID INT (11)      \n" +
            "    )  \n" +
            "BEGIN            \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);            \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;        \n" +
            "	    SET @SQLString = NULL;       \n" +
            "	    SET @HavingClause = NULL;       \n" +
            "	    SET SESSION group_concat_max_len = 150000;        \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN            \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
            "		ELSE            \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` desc\") ;             \n" +
            "		END IF;	            \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN            \n" +
            "			SET pWhereClause = '1=1' ;            \n" +
            "		END IF;	            \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
            "		ELSE	            \n" +
            "			SET rowNumWhere = '';            \n" +
            "		END IF;	            \n" +
            "		SELECT            \n" +
            "                      GROUP_CONCAT(DISTINCT            \n" +
            "				CONCAT(            \n" +
            "					'Max((IF(ra.requestQty = ''',            \n" +
            "						ra.requestQty,            \n" +
            "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),       \n" +
            "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),       \n" +
            "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) AS ''',            \n" +
            "						ra.requestQty,''''            \n" +
            "					)            \n" +
            "					),      \n" +
            "  \n" +
            "                      GROUP_CONCAT(DISTINCT            \n" +
            "				CONCAT(            \n" +
            "					'Max((IF(ra.requestQty = ''',            \n" +
            "						ra.requestQty,            \n" +
            "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),       \n" +
            "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),       \n" +
            "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) > 0'               \n" +
            "					) SEPARATOR ' OR '           \n" +
            "					)      \n" +
            "				INTO @SQLString, @HavingClause       \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
            "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;          \n" +
            "			IF(@SQLString IS NOT NULL) THEN            \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS            \n" +
            "					SELECT             \n" +
            "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,              \n" +
            "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,            \n" +
            "					(SELECT GROUP_CONCAT(rla.PIDCode)AS mfgPn             \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',             \n" +
            "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl            \n" +
            "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID            \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id            \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');          \n" +
            "  \n" +
            "				SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);            \n" +
            "			END IF;        \n" +
            "			PREPARE stmt FROM @SQLStatement;            \n" +
            "			EXECUTE stmt;	            \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );            \n" +
            "			PREPARE query1 FROM @SQLStatement1;            \n" +
            "			EXECUTE query1;            \n" +
            "			DEALLOCATE PREPARE query1;            \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
            "			PREPARE query2 FROM @SQLStatement2;            \n" +
            "			EXECUTE query2;            \n" +
            "			DEALLOCATE PREPARE query2;            \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
            "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
            "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
            "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);            \n" +
            "			PREPARE query3 FROM @SQLStatement3;            \n" +
            "			EXECUTE query3;            \n" +
            "			DEALLOCATE PREPARE query3;            \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement4 = CONCAT(\"SELECT requestQty, finalPrice, unitPrice,supplier, selectedMpn, selectionMode,qtyID,    \n" +
            "					selectedPIDCode, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq         \n" +
            "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID WHERE consolidateID IN (select id from consolidatetemp)\");            \n" +
            "			PREPARE query4 FROM @SQLStatement4;            \n" +
            "			EXECUTE query4;            \n" +
            "			DEALLOCATE PREPARE query4;            \n" +
            "  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;              \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 07-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQCustomRulesLineItems` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQCustomRulesLineItems`(    \n" +
            "	IN ppageIndex INT(11),    \n" +
            "	IN precordPerPage INT(11),    \n" +
            "	IN pOrderBy VARCHAR(255),    \n" +
            "	IN pWhereClause VARCHAR(21844),    \n" +
            "	IN rfqAssyID INT(11),    \n" +
            "	IN puserID INT (11)    \n" +
            "    )  \n" +
            "BEGIN    \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);    \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;    \n" +
            "	    SET @SQLString = NULL;    \n" +
            "	    SET SESSION group_concat_max_len = 150000;        \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN    \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
            "		ELSE    \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPn desc\") ;     \n" +
            "		END IF;	    \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN    \n" +
            "			SET pWhereClause = '1=1' ;    \n" +
            "		END IF;	    \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
            "		ELSE	    \n" +
            "			SET rowNumWhere = '';    \n" +
            "		END IF;	    \n" +
            "		SELECT    \n" +
            "                     GROUP_CONCAT(DISTINCT    \n" +
            "				CONCAT(    \n" +
            "					'Max((IF(ra.requestQty = ''',    \n" +
            "						ra.requestQty,    \n" +
            "					''', rq.finalPrice, null))) AS ''',    \n" +
            "						ra.requestQty,''''    \n" +
            "					)    \n" +
            "					) INTO @SQLString    \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq    \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID    \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id    \n" +
            "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;    \n" +
            "  \n" +
            "			IF(@SQLString IS NOT NULL) THEN    \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS    \n" +
            "					SELECT     \n" +
            "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,      \n" +
            "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,    \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn     \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla     \n" +
            "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',     \n" +
            "					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl    \n" +
            "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID    \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id    \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');    \n" +
            "  \n" +
            "			ELSE    \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS    \n" +
            "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,    \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn     \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla     \n" +
            "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl    \n" +
            "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	    \n" +
            "			END IF;    \n" +
            "			PREPARE stmt FROM @SQLStatement;    \n" +
            "			EXECUTE stmt;	    \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );    \n" +
            "			PREPARE query1 FROM @SQLStatement1;    \n" +
            "			EXECUTE query1;    \n" +
            "			DEALLOCATE PREPARE query1;    \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
            "			PREPARE query2 FROM @SQLStatement2;    \n" +
            "			EXECUTE query2;    \n" +
            "			DEALLOCATE PREPARE query2;    \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq    \n" +
            "  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID    \n" +
            "  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id    \n" +
            "   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);    \n" +
            "			PREPARE query3 FROM @SQLStatement3;    \n" +
            "			EXECUTE query3;    \n" +
            "			DEALLOCATE PREPARE query3;    \n" +
            "  \n" +
            "			SET @SQLStatement4 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );    \n" +
            "			PREPARE query4 FROM @SQLStatement4;    \n" +
            "			EXECUTE query4;    \n" +
            "			DEALLOCATE PREPARE query4;    \n" +
            "  \n" +
            "			SET @SQLStatement5 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.turnType,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt    \n" +
            "  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id    \n" +
            "   WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);    \n" +
            "			PREPARE query5 FROM @SQLStatement5;    \n" +
            "			EXECUTE query5;    \n" +
            "			DEALLOCATE PREPARE query5;    \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;      \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 07-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(              \n" +
            "	IN ppageIndex INT(11),              \n" +
            "	IN precordPerPage INT(11),              \n" +
            "	IN pOrderBy VARCHAR(255),              \n" +
            "	IN pWhereClause VARCHAR(21844),              \n" +
            "	IN rfqAssyID INT(11),              \n" +
            "	IN puserID INT (11)        \n" +
            "    )  \n" +
            "BEGIN              \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);              \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;          \n" +
            "	    SET @SQLString = NULL;           \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN              \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
            "		ELSE              \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;               \n" +
            "		END IF;	              \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN              \n" +
            "			SET pWhereClause = '1=1' ;              \n" +
            "		END IF;	              \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN               \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		              \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
            "		ELSE	              \n" +
            "			SET rowNumWhere = '';              \n" +
            "		END IF;	              \n" +
            "		SELECT      \n" +
            "                     GROUP_CONCAT(DISTINCT      \n" +
            "				CONCAT(      \n" +
            "					'Max((IF(ra.requestQty = ''',      \n" +
            "						ra.requestQty,      \n" +
            "					''', rq.finalPrice, null))) AS ''',      \n" +
            "						ra.requestQty,''''      \n" +
            "					)      \n" +
            "					) INTO @SQLString      \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq              \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID              \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id              \n" +
            "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;            \n" +
            "			IF(@SQLString IS NOT NULL) THEN              \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS              \n" +
            "					SELECT               \n" +
            "						rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                \n" +
            "						rp.partTypeName, rm.name,    \n" +
            "						(SELECT gc.gencCategoryName FROM genericcategory gc    \n" +
            "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus    \n" +
            "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn) AS PartStatus,    \n" +
            "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL) AS LTBDate,    \n" +
            "						(SELECT GROUP_CONCAT(rla.PIDCode)AS mfgPn             \n" +
            "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',               \n" +
            "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl              \n" +
            "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID              \n" +
            "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                      \n" +
            "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                       \n" +
            "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id            \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'     \n" +
            "						AND rq.selectedMpn IN (SELECT mfgPN FROM component     \n" +
            "					WHERE deletedAt IS NULL AND partstatus IN     \n" +
            "						(SELECT gencCategoryID FROM genericcategory     \n" +
            "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Not For New Design\",\"Obsolete\")))    \n" +
            "					GROUP BY rl.lineID');                \n" +
            "			END IF;               \n" +
            "			PREPARE stmt FROM @SQLStatement;              \n" +
            "			EXECUTE stmt;	              \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );              \n" +
            "			PREPARE query1 FROM @SQLStatement1;              \n" +
            "			EXECUTE query1;              \n" +
            "			DEALLOCATE PREPARE query1;              \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
            "			PREPARE query2 FROM @SQLStatement2;              \n" +
            "			EXECUTE query2;              \n" +
            "			DEALLOCATE PREPARE query2;              \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq              \n" +
            "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID              \n" +
            "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id              \n" +
            "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);              \n" +
            "			PREPARE query3 FROM @SQLStatement3;              \n" +
            "			EXECUTE query3;              \n" +
            "			DEALLOCATE PREPARE query3;              \n" +
            "  \n" +
            "			SET @SQLStatement4 = CONCAT(\"      \n" +
            "				SELECT requestQty,       \n" +
            "					finalPrice,       \n" +
            "					unitPrice,      \n" +
            "					supplier,       \n" +
            "					selectedMpn,       \n" +
            "					selectionMode,      \n" +
            "					qtyID,       \n" +
            "					consolidateID,  \n" +
            "					selectedPIDCode,      \n" +
            "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus      \n" +
            "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq           \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID       \n" +
            "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");              \n" +
            "			PREPARE query4 FROM @SQLStatement4;              \n" +
            "			EXECUTE query4;              \n" +
            "			DEALLOCATE PREPARE query4;              \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;                \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 07-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLeadTimeRiskLineItems` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQLeadTimeRiskLineItems`(            \n" +
            "	IN ppageIndex INT(11),            \n" +
            "	IN precordPerPage INT(11),            \n" +
            "	IN pOrderBy VARCHAR(255),            \n" +
            "	IN pWhereClause VARCHAR(21844),            \n" +
            "	IN rfqAssyID INT(11),            \n" +
            "	IN puserID INT (11)      \n" +
            "    )  \n" +
            "BEGIN            \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);            \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;    \n" +
            "	    SET SESSION group_concat_max_len = 150000;            \n" +
            "	    SET @SQLString = NULL;         \n" +
            "	    SET @HavingClause = NULL;             \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN            \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
            "		ELSE            \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;             \n" +
            "		END IF;	            \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN            \n" +
            "			SET pWhereClause = '1=1' ;            \n" +
            "		END IF;	            \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
            "		ELSE	            \n" +
            "			SET rowNumWhere = '';            \n" +
            "		END IF;	            \n" +
            "		SELECT            \n" +
            "                      GROUP_CONCAT(DISTINCT            \n" +
            "				CONCAT(            \n" +
            "					'Max((IF(ra.requestQty = ''',            \n" +
            "						ra.requestQty,            \n" +
            "					''', (SELECT IFNULL(leadTime,0) from component where mfgPN = rq.selectedMpn AND deletedAt IS NULL AND IFNULL(isDeleted,0)=0), null))) AS ''',            \n" +
            "						ra.requestQty,''''            \n" +
            "					)            \n" +
            "					),  \n" +
            "		GROUP_CONCAT(DISTINCT            \n" +
            "				CONCAT(            \n" +
            "					'Max((IF(ra.requestQty = ''',            \n" +
            "						ra.requestQty,            \n" +
            "					''', (SELECT IFNULL(leadTime,0) from component where mfgPN = rq.selectedMpn AND deletedAt IS NULL AND IFNULL(isDeleted,0)=0), null))) < 16'  \n" +
            "					) SEPARATOR ' OR '                \n" +
            "					)   \n" +
            "				INTO @SQLString,@HavingClause       \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
            "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;          \n" +
            "			IF(@SQLString IS NOT NULL) THEN            \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS            \n" +
            "					SELECT             \n" +
            "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,           \n" +
            "					(SELECT GROUP_CONCAT(rla.PIDCode)AS mfgPn             \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',             \n" +
            "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl            \n" +
            "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID            \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id            \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'   \n" +
            "					GROUP BY rl.lineID');     \n" +
            "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	            \n" +
            "			END IF;             \n" +
            "			PREPARE stmt FROM @SQLStatement;            \n" +
            "			EXECUTE stmt;	            \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );            \n" +
            "			PREPARE query1 FROM @SQLStatement1;            \n" +
            "			EXECUTE query1;            \n" +
            "			DEALLOCATE PREPARE query1;            \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
            "			PREPARE query2 FROM @SQLStatement2;            \n" +
            "			EXECUTE query2;            \n" +
            "			DEALLOCATE PREPARE query2;            \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
            "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
            "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
            "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);            \n" +
            "			PREPARE query3 FROM @SQLStatement3;            \n" +
            "			EXECUTE query3;            \n" +
            "			DEALLOCATE PREPARE query3;            \n" +
            "  \n" +
            "  			SET @SQLStatement4 = CONCAT(\"    \n" +
            "				SELECT requestQty,     \n" +
            "					finalPrice,     \n" +
            "					unitPrice,    \n" +
            "					supplier,     \n" +
            "					selectedMpn,     \n" +
            "					selectionMode,   \n" +
            "					selectedPIDCode,   \n" +
            "					qtyID,     \n" +
            "					consolidateID  \n" +
            "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq         \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID     \n" +
            "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");            \n" +
            "			PREPARE query4 FROM @SQLStatement4;            \n" +
            "			EXECUTE query4;            \n" +
            "			DEALLOCATE PREPARE query4;            \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;              \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 07-08-2018 *********************************** */
            /* **************************** Add Script Version -> 07-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (73,'1.00','V1','PID code updated in all SP - Vaibhav '," + userid + ");"
            );
            break;
        case 73:
            allDbChangesArray.push(
            /* **************************** New Script -> 08-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(    \n" +
            "	IN prfqAssyID INT    \n" +
            ")  \n" +
            "BEGIN    \n" +
            "	DROP temporary table if exists tempRfq_lineitems;    \n" +
            "    DROP temporary table if exists tempRfq_lineitemsAlt;    \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE tempRfq_lineitems AS        \n" +
            "	SELECT a.id, a.lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,     \n" +
            "    CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,    \n" +
            "    a.description, a.level, a.numOfPosition, a.customerRev, a.customerDescription,                \n" +
            "			CONCAT(part.partTypeName, ' | ', c.name) partclassID, a.isInstall, a.isPurchase, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID,     \n" +
            "            a.dnpQty, a.dnpDesig, a.qpaDesignatorStep    \n" +
            "            FROM rfq_lineitems a     \n" +
            "	LEFT JOIN uoms b ON a.uomID = b.id and IFNULL(b.isDeleted,0) = 0    \n" +
            "    LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id and IFNULL(part.isDeleted,0) = 0    \n" +
            "    LEFT JOIN rfq_mountingtypemst c ON part.partclassID = c.id and IFNULL(c.isDeleted,0) = 0        \n" +
            "    WHERE IFNULL(a.isDeleted,0) = 0 and a.rfqAssyID = prfqAssyID;    \n" +
            "  \n" +
            "	SELECT b.id, b.lineID, b.qpa, b.refDesig, a.mfgCode, a.mfgCodeID, a.mfgPN, a.mfgPNID,    \n" +
            "			a.distributor, a.distMfgCodeID, a.distPN, a.distMfgPNID,     \n" +
            "            b.custPN, b.custPNID, b.uomID, a.description descriptionAlternate, b.description, b.level, b.numOfPosition, b.customerRev, b.customerDescription,    \n" +
            "			b.partclassID, b.isInstall, b.isPurchase, b.leadQty, b.attritionRate, b.valueAddedCost, b.refRFQLineItemID,     \n" +
            "            b.dnpQty, b.dnpDesig, a.id as rfqAlternatePartID, b.qpaDesignatorStep,  \n" +
            "			a.mfgVerificationStep, a.mfgDistMappingStep, a.mfgCodeStep, a.customerApproval, a.org_mfgCode, a.org_mfgPN,  \n" +
            "            a.org_distributor, a.org_distPN,  \n" +
            "			a.distVerificationStep, a.distCodeStep, a.getMFGPNStep, a.obsoletePartStep, a.goodPartMappingStep, a.mfgPNStep, a.distPNStep,  \n" +
            "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isGoodPart  \n" +
            "            FROM rfq_lineitems_alternatepart a    \n" +
            "			JOIN tempRfq_lineitems b on a.rfqLineItemsID = b.id              \n" +
            "			WHERE IFNULL(a.isDeleted,0) = 0  AND b.id is not null order by CAST(b.lineID AS SIGNED), a.id;    \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 08-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (74,'1.00','V1','ALTER SP Sproc_GetRFQLineItemsByID - Ravi '," + userid + ");"
            );
            break;
        case 74:
            allDbChangesArray.push(
            /* **************************** New Script -> 08-08-2018  *********************************** */
            "ALTER TABLE rfq_lineitems_alternatepart  \n" +
            "ADD COLUMN badMfgPN varchar(500) NULL;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(      \n" +
            "	IN prfqAssyID INT      \n" +
            ")  \n" +
            "BEGIN      \n" +
            "	DROP temporary table if exists tempRfq_lineitems;      \n" +
            "    DROP temporary table if exists tempRfq_lineitemsAlt;      \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE tempRfq_lineitems AS          \n" +
            "	SELECT a.id, a.lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,       \n" +
            "    CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,      \n" +
            "    a.description, a.level, a.numOfPosition, a.customerRev, a.customerDescription,                  \n" +
            "			CONCAT(part.partTypeName, ' | ', c.name) partclassID, a.isInstall, a.isPurchase, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID,       \n" +
            "            a.dnpQty, a.dnpDesig, a.qpaDesignatorStep      \n" +
            "            FROM rfq_lineitems a       \n" +
            "	LEFT JOIN uoms b ON a.uomID = b.id and IFNULL(b.isDeleted,0) = 0      \n" +
            "    LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id and IFNULL(part.isDeleted,0) = 0      \n" +
            "    LEFT JOIN rfq_mountingtypemst c ON part.partclassID = c.id and IFNULL(c.isDeleted,0) = 0          \n" +
            "    WHERE IFNULL(a.isDeleted,0) = 0 and a.rfqAssyID = prfqAssyID;      \n" +
            "  \n" +
            "	SELECT b.id, b.lineID, b.qpa, b.refDesig, a.mfgCode, a.mfgCodeID, a.mfgPN, a.mfgPNID,      \n" +
            "			a.distributor, a.distMfgCodeID, a.distPN, a.distMfgPNID,       \n" +
            "            b.custPN, b.custPNID, b.uomID, a.description descriptionAlternate, b.description, b.level, b.numOfPosition, b.customerRev, b.customerDescription,      \n" +
            "			b.partclassID, b.isInstall, b.isPurchase, b.leadQty, b.attritionRate, b.valueAddedCost, b.refRFQLineItemID,       \n" +
            "            b.dnpQty, b.dnpDesig, a.id as rfqAlternatePartID, b.qpaDesignatorStep,    \n" +
            "			a.mfgVerificationStep, a.mfgDistMappingStep, a.mfgCodeStep, a.customerApproval, a.org_mfgCode, a.org_mfgPN,    \n" +
            "            a.org_distributor, a.org_distPN,    \n" +
            "			a.distVerificationStep, a.distCodeStep, a.getMFGPNStep, a.obsoletePartStep, a.goodPartMappingStep, a.mfgPNStep, a.distPNStep,  \n" +
            "            a.badMfgPN,  \n" +
            "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isGoodPart              \n" +
            "            FROM rfq_lineitems_alternatepart a      \n" +
            "			JOIN tempRfq_lineitems b on a.rfqLineItemsID = b.id                \n" +
            "			WHERE IFNULL(a.isDeleted,0) = 0  AND b.id is not null order by CAST(b.lineID AS SIGNED), a.id;      \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 08-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (75,'1.00','V1','ALTER rfq_lineitems_alternatepart; ALTER SP Sproc_GetRFQLineItemsByID - Ravi '," + userid + ");"
            );
            break;

        case 75:
            allDbChangesArray.push(
            /* **************************** New Script -> 08-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(      \n" +
            "	IN ppageIndex INT(11),      \n" +
            "	IN precordPerPage INT(11),      \n" +
            "	IN pOrderBy VARCHAR(255),      \n" +
            "	IN pWhereClause VARCHAR(21844),      \n" +
            "	IN rfqAssyID INT(11),      \n" +
            "	IN puserID INT (11)      \n" +
            "    )  \n" +
            "BEGIN      \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);      \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;      \n" +
            "	    SET @SQLString = NULL;      \n" +
            "	    SET SESSION group_concat_max_len = 150000;          \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN      \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
            "		ELSE      \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;       \n" +
            "		END IF;	      \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN      \n" +
            "			SET pWhereClause = '1=1' ;      \n" +
            "		END IF;	      \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
            "		ELSE	      \n" +
            "			SET rowNumWhere = '';      \n" +
            "		END IF;	      \n" +
            "		SELECT      \n" +
            "                     GROUP_CONCAT(DISTINCT      \n" +
            "				CONCAT(      \n" +
            "					'Max((IF(ra.requestQty = ''',      \n" +
            "						ra.requestQty,      \n" +
            "					''', rq.finalPrice, null))) AS ''',      \n" +
            "						ra.requestQty,''''      \n" +
            "					)      \n" +
            "					) INTO @SQLString      \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq      \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID      \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id      \n" +
            "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;      \n" +
            "  \n" +
            "			IF(@SQLString IS NOT NULL) THEN      \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS      \n" +
            "					SELECT       \n" +
            "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,        \n" +
            "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,      \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn       \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla       \n" +
            "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',       \n" +
            "					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl      \n" +
            "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID      \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id      \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');      \n" +
            "  \n" +
            "			ELSE      \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS      \n" +
            "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,      \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn       \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla       \n" +
            "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl      \n" +
            "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	      \n" +
            "			END IF;      \n" +
            "			PREPARE stmt FROM @SQLStatement;      \n" +
            "			EXECUTE stmt;	      \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );      \n" +
            "			PREPARE query1 FROM @SQLStatement1;      \n" +
            "			EXECUTE query1;      \n" +
            "			DEALLOCATE PREPARE query1;      \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
            "			PREPARE query2 FROM @SQLStatement2;      \n" +
            "			EXECUTE query2;      \n" +
            "			DEALLOCATE PREPARE query2;      \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );      \n" +
            "			PREPARE query3 FROM @SQLStatement3;      \n" +
            "			EXECUTE query3;      \n" +
            "			DEALLOCATE PREPARE query3;      \n" +
            "  \n" +
            "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.turnType,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt      \n" +
            "  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id      \n" +
            "   WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);      \n" +
            "			PREPARE query4 FROM @SQLStatement4;      \n" +
            "			EXECUTE query4;      \n" +
            "			DEALLOCATE PREPARE query4;  \n" +
            "  \n" +
            "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty, rq.finalPrice, unitPrice,supplier,rq.min,rq.mult, selectedMpn, selectionMode,qtyID,      \n" +
            "					selectedPIDCode,ct.qpa, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq           \n" +
            "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID   \n" +
            "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id   \n" +
            "				WHERE ct.rfqAssyID=\",rfqAssyID);          \n" +
            "			PREPARE query5 FROM @SQLStatement5;              \n" +
            "			EXECUTE query5;              \n" +
            "			DEALLOCATE PREPARE query5;     \n" +
            "  \n" +
            "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty, (SUM(rq.finalPrice)) AS Total  \n" +
            "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
            "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id  \n" +
            "							WHERE rl.rfqAssyid=\",rfqAssyID,' GROUP BY rq.qtyID');          \n" +
            "  \n" +
            "			PREPARE query6 FROM @SQLStatement6;              \n" +
            "			EXECUTE query6;              \n" +
            "			DEALLOCATE PREPARE query6;                  \n" +
            "  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;        \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 08-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (76,'1.00','V1','ALTER Sproc_GetRFQConsolidateRfqLineItem; - Champak '," + userid + ");"
            );
            break;
        case 76:
            allDbChangesArray.push(
            /* **************************** New Script -> 09-08-2018  *********************************** */
            "create table help_blog_keyword(  \n" +
            "id int primary key auto_increment,  \n" +
            "keyword varchar(100),  \n" +
            "helpBlogId int,  \n" +
            "isDeleted tinyint(1) NOT NULL DEFAULT '0',  \n" +
            "createdBy varchar(255) NOT NULL,  \n" +
            "createdAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
            "updatedBy varchar(255) DEFAULT NULL,  \n" +
            "updatedAt datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
            "deletedBy varchar(255) DEFAULT NULL,  \n" +
            "deletedAt datetime DEFAULT NULL,  \n" +
            "CONSTRAINT FK_help_blog_keyword_helpBlogId FOREIGN KEY (helpBlogId) REFERENCES help_blog(id)  \n" +
            ");  \n" +
            "ALTER TABLE rfq_assy_bom  \n" +
            "DROP FOREIGN KEY FK_rfq_assy_bom_rfqLineItemsID;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_DeleteRFQAssyDetails`;  \n" +
            "CREATE PROCEDURE Sproc_DeleteRFQAssyDetails(  \n" +
            "	IN pRFQAssyID INT,        \n" +
            "    IN pUserID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
            "BEGIN  \n" +
            "	ROLLBACK;        \n" +
            "	RESIGNAL;        \n" +
            "END;        \n" +
            "DECLARE EXIT HANDLER FOR SQLWARNING        \n" +
            "  BEGIN        \n" +
            "	ROLLBACK;  \n" +
            "	RESIGNAL;  \n" +
            "END;  \n" +
            "START TRANSACTION;        \n" +
            "  \n" +
            "UPDATE rfq_lineitems_alternatepart rla SET rla.isDeleted = 1, rla.deletedAt = utc_timestamp(), rla.deletedBy = pUserID WHERE rla.rfqAssyID = pRFQAssyID;  \n" +
            "UPDATE rfq_assy_bom_relationship rabr SET rabr.isDeleted = 1, rabr.deletedAt = utc_timestamp(), rabr.deletedBy = pUserID WHERE rabr.rfqAssyID = pRFQAssyID;  \n" +
            "UPDATE component_cust_alias_rev_pn ccarp SET ccarp.isDeleted = 1, ccarp.deletedAt = utc_timestamp(), ccarp.deletedBy = pUserID  where ccarp.refComponentCustAliasRevID IN  \n" +
            "(  \n" +
            "	SELECT ccar.id from component_cust_alias_rev ccar where ccar.rfqAssyBomID IN   \n" +
            "	(select rab.id from rfq_assy_bom rab WHERE rab.reqAssyID = 12 AND rab.bomNumber IS NOT NULL)  \n" +
            ");  \n" +
            "UPDATE component_cust_alias_rev ccar SET ccar.isDeleted = 1, ccar.deletedAt = utc_timestamp(), ccar.deletedBy = pUserID  where ccar.rfqAssyBomID IN   \n" +
            "(  \n" +
            "	select rab.id from rfq_assy_bom rab WHERE rab.reqAssyID = 12 AND rab.bomNumber IS NOT NULL  \n" +
            ");  \n" +
            "UPDATE rfq_consolidate_mfgpn_lineitem_quantity rcmlq SET rcmlq.isDeleted = 1, rcmlq.deletedAt = utc_timestamp(), rcmlq.deletedBy = pUserID WHERE rcmlq.consolidateID IN (  \n" +
            "	SELECT rcml.id FROM rfq_consolidated_mfgpn_lineitem rcml WHERE rcml.rfqAssyID = pRFQAssyID AND rcml.isDeleted = 0 AND rcml.deletedAt IS NULL  \n" +
            ");  \n" +
            "DELETE FROM rfq_assy_autopricingstatus WHERE rfqAssyID = pRFQAssyID;  \n" +
            "DELETE FROM rfq_lineitem_autopricingstatus WHERE rfqAssyID = pRFQAssyID;  \n" +
            "UPDATE rfq_assy_quotations raq SET raq.isDeleted = 1, raq.deletedAt = utc_timestamp(), raq.deletedBy = pUserID WHERE raq.rfqAssyID = pRFQAssyID;  \n" +
            "UPDATE rfq_consolidated_mfgpn_lineitem_alternate rcmla SET rcmla.isDeleted = 1, rcmla.deletedAt = utc_timestamp(), rcmla.deletedBy = pUserID WHERE rcmla.consolidateID IN (  \n" +
            "	SELECT rcml.id FROM rfq_consolidated_mfgpn_lineitem rcml WHERE rcml.rfqAssyID = pRFQAssyID AND rcml.isDeleted = 0 AND rcml.deletedAt IS NULL  \n" +
            ");  \n" +
            "UPDATE rfq_consolidated_mfgpn_lineitem rcml SET rcml.isDeleted = 1, rcml.deletedAt = utc_timestamp(), rcml.deletedBy = pUserID WHERE rcml.rfqAssyID = pRFQAssyID;  \n" +
            "UPDATE rfq_lineitems rl SET rl.isDeleted = 1, rl.deletedAt = utc_timestamp(), rl.deletedBy = pUserID WHERE rl.rfqAssyID = pRFQAssyID;  \n" +
            "UPDATE rfq_assy_bom rab SET rab.isDeleted = 1, rab.deletedAt = utc_timestamp(), rab.deletedBy = pUserID WHERE rab.reqAssyID = pRFQAssyID AND rab.bomNumber IS NOT NULL;  \n" +
            "UPDATE rfq_assemblies ra SET ra.isBOMVerified = NULL, ra.isReadyForPricing = NULL, ra.status = NULL WHERE ra.id = pRFQAssyID;  \n" +
            "COMMIT;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 09-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (77,'1.00','V1','CREATE SP Sproc_DeleteRFQAssyDetails, help_blog_keyword; - RAVI'," + userid + ");"
            );
            break;

        case 77:
            allDbChangesArray.push(
           //  /* **************************** New Script -> 10-08-2018  *********************************** */
           "ALTER TABLE rfq_lineitems_additional_comment CHANGE `rfqAssyBomID` `rfqAssyID` int;  \n" +
           "  \n" +
           "ALTER TABLE rfq_lineitems_additional_comment  \n" +
           "  DROP FOREIGN KEY rfq_lineitems_additional_comment_ibfk_2;  \n" +
           "  \n" +
           "ALTER TABLE rfq_lineitems_additional_comment  \n" +
           "ADD CONSTRAINT FK_rfq_lineitems_additional_comment_rfqAssyID  \n" +
           "FOREIGN KEY (rfqAssyID) REFERENCES rfq_assemblies(id);  \n" +
           //  /* **************************** Add Script Version -> 10-08-2018 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
             "VALUES (78,'1.00','V1',' alter rfq_lineitems_additional_comment-Mona '," + userid + ");"
            );
            break;
        case 78:
            allDbChangesArray.push(
            /* **************************** New Script -> 10-08-2018  *********************************** */
            "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Equipment Group Generic Category','0','0','','app.equipmentgroup.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Equipment Type Generic Category','0','0','','app.equipmenttype.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Equipment Ownership Generic Category','0','0','','app.equipmentownership.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Standard Type Generic Category','0','0','','app.standardtype.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Part Type Generic Category','0','0','','app.parttype.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Part Status Generic Category','0','0','','app.partstatus.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Employee Title Generic Category','0','0','','app.employeetitle.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Operation Type Generic Category','0','0','','app.operationtype.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Shipping Status Generic Category','0','0','','app.shippingstatus.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Location Type Generic Category','0','0','','app.locationtype.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Work Area Generic Category','0','0','','app.workarea.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Shipping Type Generic Category','0','0','','app.shippingtype.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Terms Generic Category','0','0','','app.terms.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Operation Verification Status Generic Category','0','0','','app.verificationstatus.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Printer Generic Category','0','0','','app.printer.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            " INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            " `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`,  \n" +
            " `deletedAt`, `createdBy`, `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            " VALUES('Manage Print Format Generic Category','0','0','','app.printformat.managegenericcategory',  \n" +
            " '/managegenericcategory/:categoryTypeID/:gencCategoryID',NULL,NULL,  \n" +
            " (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'Generic Category'),  \n" +
            " '0',NULL,NULL,NULL,  \n" +
            " '1',NOW(),NOW(),NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "  \n" +
            "UPDATE page_detail  \n" +
            "SET isDeleted = 1 , deletedAt = NOW() ,  deletedBy = 1  \n" +
            "WHERE pageName = 'Manage Generic Category' ;  \n" +
            /* **************************** Add Script Version -> 10-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (79,'1.00','V1',' Page detail entries for manage generic categories - KETAN '," + userid + ");"
          );
            break;
        case 79:
            allDbChangesArray.push(
            /* **************************** New Script -> 10-08-2018  *********************************** */
           "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerAliasByID`;  \n" +
            "CREATE PROCEDURE `Sproc_GetCustomerAliasByID`(    \n" +
            "	IN pRefComponentID INT    \n" +
            ")  \n" +
            "BEGIN    \n" +
            "select concat(a.custpn,'-', a.revision,'-' ,a.flextronRevision,'(',c.customerCode,')') As customerAlias    \n" +
            "from ((component_cust_alias_rev as a  join component_cust_alias_rev_pn as cust    \n" +
            "on  cust.refComponentCustAliasRevID= a.id)    \n" +
            "join customers as c on a.customerID = c.id) where refComponentID = pRefComponentID ;    \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 10-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (80,'1.00','V1','ALTER SP Sproc_GetCustomerAliasByID - RAVI'," + userid + ");"
          );
            break;
        case 80:
            allDbChangesArray.push(
            /* **************************** New Script -> 11-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerAliasByID`;  \n" +
            "CREATE PROCEDURE `Sproc_GetCustomerAliasByID`(      \n" +
            "	IN pRefComponentID INT      \n" +
            ")  \n" +
            "BEGIN      \n" +
            "select   \n" +
            "CASE WHEN a.revision IS NULL THEN  \n" +
            "concat(a.custpn,'-',a.flextronRevision,'(',c.customerCode,')')   \n" +
            "ELSE  \n" +
            "concat(a.custpn,'-', a.revision,'-' ,a.flextronRevision,'(',c.customerCode,')') END  \n" +
            "As customerAlias      \n" +
            "from ((component_cust_alias_rev as a  join component_cust_alias_rev_pn as cust      \n" +
            "on  cust.refComponentCustAliasRevID= a.id)      \n" +
            "join customers as c on a.customerID = c.id) where refComponentID = pRefComponentID ;      \n" +
            "END;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_VerifyCustPN`;  \n" +
            "CREATE PROCEDURE `Sproc_VerifyCustPN`(  \n" +
            "	IN prfqLineItemIds VARCHAR(5000),  -- comma seperated lineItemIDs  \n" +
            "	IN prfqAssyID VARCHAR(500)  \n" +
            ")  \n" +
            "BEGIN      \n" +
            "	DECLARE totalCount INT DEFAULT 0;  \n" +
            "	DECLARE currIndex INT DEFAULT 0;  \n" +
            "    DECLARE currLineItem VARCHAR(8);  \n" +
            "    DECLARE currCustRev VARCHAR(10);  \n" +
            "    DECLARE currCustPN VARCHAR(500);  \n" +
            "	-- This procedure will insert data into temporary table 'tmp_sproc_stringtotable'  \n" +
            "	call Sproc_StringToTable(prfqLineItemIds);  \n" +
            "    -- get data inserted by SP  \n" +
            "    select count(1) into totalCount FROM tmp_sproc_stringtotable;  \n" +
            "  \n" +
            " WHILE currIndex < totalCount DO  \n" +
            "		SELECT a.item INTO currLineItem FROM tmp_sproc_stringtotable a LIMIT currIndex, 1;  \n" +
            "		SET currIndex = currIndex + 1;  \n" +
            "  \n" +
            "        SELECT rl.custPN, rl.customerRev INTO currCustPN, currCustRev FROM rfq_lineitems rl WHERE rl.id = currLineItem AND rl.custPN IS NOT NULL AND IFNULL(rl.isDeleted,0) = 0;  \n" +
            "  \n" +
            "        IF (currCustPN IS NOT NULL) THEN  \n" +
            "  \n" +
            "			-- get customer id and rfq bom id from RFQ table and rfq bom table based on prfqAssyID   \n" +
            "			SELECT rf.customerId INTO  @customerId FROM rfq_assemblies ra   \n" +
            "			JOIN rfqforms rf ON ra.rfqrefID = rf.id AND rf.isDeleted = 0 AND rf.deletedAt IS NULL   \n" +
            "			WHERE ra.id = prfqAssyID  \n" +
            "			AND ra.isDeleted = 0 AND ra.deletedAt IS NULL LIMIT 1;  \n" +
            "  \n" +
            "			SELECT rl.rfqAssyBomID INTO @rfqAssyBomID FROM rfq_lineitems rl WHERE rl.id = currLineItem AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;  \n" +
            "  \n" +
            "			-- if found customer data in rfq table than check for rev. available in customer alias rev table for combination of (Customer PN#, Cust. Rev., CustomerID)  \n" +
            "			IF (@customerId IS NOT NULL) THEN  \n" +
            "  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (  \n" +
            "				SELECT c.id,c.custpn,c.flextronRevision FROM component_cust_alias_rev c  \n" +
            "				WHERE IFNULL(c.isDeleted,0) = 0 AND c.customerID =@customerId AND c.revision = currCustRev AND c.custpn = currCustPN order by c.id desc limit 1);  \n" +
            "  \n" +
            "			END IF;  \n" +
            "  \n" +
            "				-- start - get all data from component_cust_alias_rev_pn to check existing MFG PN with lineItem alternate pn  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev_pn;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev_pn AS (  \n" +
            "				SELECT crp.refComponentID   \n" +
            "				FROM component_cust_alias_rev_pn crp   \n" +
            "				LEFT JOIN component_cust_alias_rev cr ON cr.id=crp.refComponentCustAliasRevID AND IFNULL(cr.isDeleted,0) = 0   \n" +
            "				WHERE IFNULL(crp.isDeleted,0) = 0 AND crp.refComponentCustAliasRevID IN (SELECT id FROM temp_component_cust_alias_rev));  \n" +
            "  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_component;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_component AS(SELECT c.mfgPN FROM component c  \n" +
            "				WHERE IFNULL(c.isDeleted,0) = 0 AND c.id IN(SELECT refComponentID FROM temp_component_cust_alias_rev_pn));  \n" +
            "  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_rfq_lineitems_alternatepart;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_rfq_lineitems_alternatepart AS(SELECT r.mfgPN FROM rfq_lineitems_alternatepart r  \n" +
            "				WHERE IFNULL(r.isDeleted,0) = 0 AND r.rfqLineItemsID  = currLineItem);		  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_result;  \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_result AS(  \n" +
            "				/* this return new added mfgPN*/  \n" +
            "				 SELECT mfgPN  \n" +
            "				FROM (  \n" +
            "				SELECT mfgPN FROM temp_component  \n" +
            "				UNION ALL  \n" +
            "				SELECT mfgPN FROM temp_rfq_lineitems_alternatepart  \n" +
            "				) tbl  \n" +
            "				GROUP BY mfgPN  \n" +
            "				HAVING COUNT(*) = 1  \n" +
            "				ORDER BY mfgPN  \n" +
            "				);  \n" +
            "  \n" +
            "				-- end - get all data from component_cust_alias_rev_pn to check existing MFG PN with lineItem alternate pn  \n" +
            "  \n" +
            "				-- start - get new data for insert  \n" +
            "				IF (SELECT COUNT(1) FROM temp_result) >0 THEN  \n" +
            "					DROP TEMPORARY TABLE IF EXISTS temp_newPN;  \n" +
            "					SET @SQL1 = CONCAT('CREATE TEMPORARY TABLE if not exists temp_newPN as  \n" +
            "						SELECT GROUP_CONCAT(c.mfgPN SEPARATOR \",\") mfgPN  \n" +
            "						FROM   \n" +
            "						(  \n" +
            "						(SELECT a.mfgPN as mfgPN  \n" +
            "						FROM temp_rfq_lineitems_alternatepart a  \n" +
            "						WHERE NOT EXISTS (SELECT b.mfgPN FROM temp_component b  \n" +
            "								 WHERE a.mfgPN=b.mfgPN)  \n" +
            "						) as c)');  \n" +
            "					PREPARE stmt FROM @SQL1;  \n" +
            "					EXECUTE stmt;  \n" +
            "  \n" +
            "					IF (SELECT COUNT(mfgPN) FROM temp_newPN) >0 THEN  \n" +
            "  \n" +
            "						-- check if data available for same combination  \n" +
            "						IF (SELECT COUNT(*) FROM temp_component_cust_alias_rev) >0 THEN  \n" +
            "							-- Update flextron revision as match with exisiting data with new data  \n" +
            "							SELECT flextronRevision INTO @nextflextronRevision FROM temp_component_cust_alias_rev;  \n" +
            "							SELECT CHAR(ASCII(@nextflextronRevision) + 1) INTO @nextflextronRevision;  \n" +
            "							-- Add all mfg part numbers in customer alias with new revision  \n" +
            "							INSERT INTO component_cust_alias_rev(customerID,custpn,revision,flextronRevision,rfqAssyBomID) VALUES(@customerId,currCustPN,currCustRev,@nextflextronRevision,@rfqAssyBomID);  \n" +
            "							SELECT LAST_INSERT_ID() INTO @maxRevId;  \n" +
            "							INSERT INTO component_cust_alias_rev_pn(refComponentCustAliasRevID,refComponentID) SELECT @maxRevId,sub.id FROM(SELECT id FROM component WHERE mfgPN IN(SELECT mfgPN FROM temp_rfq_lineitems_alternatepart)) sub;  \n" +
            "							-- Update flextron revision and custPNID in line item table  \n" +
            "							UPDATE rfq_lineitems  \n" +
            "							SET flextronRev=@nextflextronRevision,  \n" +
            "							custPNID = @maxRevId  \n" +
            "							WHERE custPN=currCustPN AND id = currLineItem;  \n" +
            "  \n" +
            "						ELSE  \n" +
            "  \n" +
            "							-- Add all mfg part numbers in customer alias with new revision  \n" +
            "							INSERT INTO component_cust_alias_rev(customerID,custpn,revision,flextronRevision,rfqAssyBomID) VALUES(@customerId,currCustPN,currCustRev,'A',@rfqAssyBomID);  \n" +
            "							SELECT LAST_INSERT_ID() INTO @maxRevId;  \n" +
            "							INSERT INTO component_cust_alias_rev_pn(refComponentCustAliasRevID,refComponentID) SELECT @maxRevId,sub.id FROM(SELECT id FROM component WHERE FIND_IN_SET(mfgPN,(SELECT mfgPN FROM temp_newPN)))sub;  \n" +
            "							UPDATE rfq_lineitems rfq SET rfq.custPNID = @maxRevId WHERE rfq.id = currLineItem;  \n" +
            "						END IF;  \n" +
            "  \n" +
            "						-- get customer partnumber if any changes  \n" +
            "					   IF (SELECT COUNT(*) FROM temp_component) >0 THEN  \n" +
            "							ALTER TABLE temp_newPN ADD COLUMN custPN VARCHAR(255);  \n" +
            "							UPDATE temp_newPN SET custPN=currCustPN;  \n" +
            "							SELECT * FROM temp_newPN;  \n" +
            "						END IF;  \n" +
            "  \n" +
            "					END IF;  \n" +
            "				-- ELSE  \n" +
            "				-- 	SELECT * FROM temp_result;  \n" +
            "				END IF;  \n" +
            "				-- end - get new data for insert  \n" +
            "  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev_pn;  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_component;  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_rfq_lineitems_alternatepart;  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_result;  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_newPN;  \n" +
            "        END IF;  \n" +
            "	END WHILE;  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 11-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (81,'1.00','V1','ALTER SP Sproc_GetCustomerAliasByID AND Sproc_VerifyCustPN - RAVI'," + userid + ");"
          );
            break;
        case 81:
            allDbChangesArray.push(
            /* **************************** New Script -> 13-08-2018  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQList`(	      \n" +
            "	IN ppageIndex INT(11),      \n" +
            "	IN precordPerPage INT(11),      \n" +
            "	IN pOrderBy VARCHAR(255),	      \n" +
            "    IN pWhereClause VARCHAR(21844)          \n" +
            "    )  \n" +
            "BEGIN      \n" +
            "  \n" +
            "	DECLARE pOffset INT(11);      \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
            "	/* DECLARE SQLStatement varchar(255); */      \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
            "  \n" +
            "   select count(rl.id) as isBom, rf.id,      \n" +
            "    (select asb.id from rfq_assy_bom asb where IFNULL(asb.isdeleted,0) = 0 and asb.reqAssyID = ra.id  group by rf.id) as assyBomID,      \n" +
            "	ra.assemblyName, ra.assemblyNumber,      \n" +
            "	job.name as JobType, ord.name as OrderType, cu.companyName as Customer, em.firstName as RFQ_SubmitedBy,      \n" +
            "	rf.quoteindate, rf.quoteduedate, ra.id rfqAssyID  \n" +
            "    from rfqforms rf      \n" +
            "	inner join rfq_assemblies ra on ra.rfqrefID = rf.id and IFNULL(ra.isdeleted,0) = 0      \n" +
            "	inner join jobtype job on job.id = rf.jobtypeID and IFNULL(job.isdeleted,0) = 0      \n" +
            "	inner join ordertype ord on ord.id = rf.ordertypeID and IFNULL(ord.isdeleted,0) = 0      \n" +
            "	inner join employees em on em.id = rf.employeeID and IFNULL(em.isdeleted,0) = 0      \n" +
            "	inner join customers cu on cu.id = rf.customerId and IFNULL(cu.isdeleted,0) = 0      \n" +
            "	join rfq_assy_bom ab on ab.reqAssyID = ra.id and IFNULL(ab.isdeleted,0) = 0 and ab.bomNumber is null  \n" +
            "    left outer join rfq_lineitems rl on rl.rfqAssyID = ra.id and rl.isDeleted = 0   \n" +
            "	where IFNULL(rf.isdeleted,0) = 0 group by ra.id ;      \n" +
            "  \n" +
            "    IF (pOrderBy IS NOT NULL) THEN      \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
            "	ELSE      \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;      \n" +
            "	END IF;	      \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
            "  \n" +
            "		SET pWhereClause = '1=1' ;      \n" +
            "	END IF;	      \n" +
            "  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
            "	ELSE	      \n" +
            "		SET rowNumWhere = '';      \n" +
            "	END IF;	      \n" +
            "  \n" +
            "  \n" +
            "	/* to get total count of rows */      \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );          \n" +
            "	PREPARE query1 FROM @SQLStatement1;      \n" +
            "	EXECUTE query1;      \n" +
            "	DEALLOCATE PREPARE query1;      \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
            "	PREPARE query2 FROM @SQLStatement2;      \n" +
            "	EXECUTE query2;      \n" +
            "	DEALLOCATE PREPARE query2;      \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE Results;      \n" +
            "  \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 13-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (82,'1.00','V1','Get rfqList sp - shirish'," + userid + ");"
            );
            break;
        case 82:
            allDbChangesArray.push(
            /* **************************** New Script -> 13-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_CopyAssyBOMQuote`;  \n" +
            "CREATE PROCEDURE `Sproc_CopyAssyBOMQuote`(    \n" +
            "	IN poldAssyID int(1),    \n" +
            "	IN pnewAssyID INT(1),  \n" +
            "    IN UserID int(1),  \n" +
            "    IN pIsCopyPricing tinyint  \n" +
            ")  \n" +
            "BEGIN    \n" +
            "DECLARE pCount int(11);  \n" +
            "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
            "BEGIN    \n" +
            "	ROLLBACK;    \n" +
            "	RESIGNAL;    \n" +
            "END;    \n" +
            "DECLARE EXIT HANDLER FOR SQLWARNING    \n" +
            "  BEGIN    \n" +
            "	ROLLBACK;    \n" +
            "	RESIGNAL;    \n" +
            "END;    \n" +
            "  \n" +
            "    START TRANSACTION;    \n" +
            "  \n" +
            "		select Count(*) INTO pCount from rfq_lineItems where rfqAssyID = pnewAssyID;  \n" +
            "# Remove existing BOM data from newAssembly  \n" +
            "		IF(pCount>0) THEN  \n" +
            "  \n" +
            "			update rfq_assy_bom set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where reqAssyID = pnewAssyID and bomNumber IS NOT NULL;  \n" +
            "			update rfq_assy_bom_relationship set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_lineitems set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_lineitems_alternatepart set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_consolidated_mfgpn_lineitem set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_consolidated_mfgpn_lineitem_alternate set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where consolidateID in (select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = pnewAssyID);  \n" +
            "			update rfq_consolidate_mfgpn_lineitem_quantity set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where consolidateID in (select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = pnewAssyID);  \n" +
            "			update rfq_assy_quotations set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_assy_quantity_price_selection_setting set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where qtyID in (select id from rfq_assy_quantity where rfqAssyID = pnewAssyID);  \n" +
            "        END IF;  \n" +
            "	IF(pIsCopyPricing) THEN  \n" +
            "# update isverifiedBOM and isReadyforPricing flag in rfq_assemblies table  \n" +
            "		select Count(*) INTO pCount from rfq_lineItems where rfqAssyID = poldAssyID and isDeleted = 0;  \n" +
            "			IF (pCount>0) THEN  \n" +
            "					update rfq_assemblies set   \n" +
            "					isBOMVerified = true,   \n" +
            "					isReadyForPricing = true,  \n" +
            "					updatedAt = UTC_TIMESTAMP(),  \n" +
            "					updatedBy = UserID  \n" +
            "					where id = pnewAssyID;  \n" +
            "			ELSE   \n" +
            "					update rfq_assemblies set   \n" +
            "					isBOMVerified = false,   \n" +
            "					isReadyForPricing = false  \n" +
            "					where id = pnewAssyID;  \n" +
            "            END IF;  \n" +
            "	ELSE   \n" +
            "		IF(pCount>0) THEN  \n" +
            "  \n" +
            "			update rfq_assemblies set   \n" +
            "			isBOMVerified = true,   \n" +
            "			isReadyForPricing = false,  \n" +
            "			updatedAt = UTC_TIMESTAMP(),  \n" +
            "			updatedBy = UserID  \n" +
            "			where id = pnewAssyID;  \n" +
            "  \n" +
            "		END if;  \n" +
            "  \n" +
            "	END IF;  \n" +
            "# Copy Assy BOM data of old assy to new Assy  \n" +
            "			INSERT INTO `rfq_assy_bom`  \n" +
            "			(`reqAssyID`, `isActive`, `description`, `createdBy`, `createdAt`, `bomNumber`)  \n" +
            "			select   \n" +
            "			pnewAssyID `reqAssyID`, `isActive`, `description`,UserID `createdBy`, UTC_TIMESTAMP() `createdAt`, `bomNumber`   \n" +
            "			from rfq_assy_bom where reqAssyID = poldAssyID and IFNULL(isDeleted,0) = 0 and bomNumber IS NOT NULL;   \n" +
            "  \n" +
            "# Copy rfq lineItems data of old assy to new Assy  \n" +
            "			INSERT INTO `rfq_lineitems`  \n" +
            "			(`rfqAssyBomID`, `rfqAssyID`, `lineID`, `qpa`, `refDesig`, `custPN`, `custPNID`, `uomID`, `description`, `level`, `isInstall`,  \n" +
            "			`isPurchase`, `isNoBidsPN`,  `isDraft`, `isActive`, `partTypeID`, `partclassID`,  `leadQty`, `attritionRate`, `totalQty`,   \n" +
            "			`manualAdj`, `createdBy`, `createdAt`, `customerRev`, `flextronRev`, `customerDescription`, `numOfPosition`, `valueAddedCost`,   \n" +
            "			`refRFQLineItemID`, `dnpQty`, `dnpDesig`, `org_lineID`, `org_qpa`, `org_refDesig`, `org_custPN`, `org_uomName`, `org_level`,   \n" +
            "			`org_isInstall`, `org_isPurchase`, `org_customerRev`, `org_customerDescription`, `org_numOfPosition`, `org_refLineID`,   \n" +
            "			`qpaDesignatorStep`)  \n" +
            "			select (select id from rfq_assy_bom where reqAssyID = pnewAssyID and bomNumber IS NULL) `rfqAssyBomID`,pnewAssyID `rfqAssyID`, `lineID`, `qpa`,  \n" +
            "			 `refDesig`, `custPN`, `custPNID`, `uomID`, `description`, `level`, `isInstall`,  \n" +
            "			`isPurchase`, `isNoBidsPN`,  `isDraft`, `isActive`, `partTypeID`, `partclassID`,  `leadQty`, `attritionRate`, `totalQty`,   \n" +
            "			`manualAdj`, UserID `createdBy`, UTC_TIMESTAMP() `createdAt`, `customerRev`, `flextronRev`, `customerDescription`, `numOfPosition`,   \n" +
            "			`valueAddedCost`, `refRFQLineItemID`, `dnpQty`, `dnpDesig`, `org_lineID`, `org_qpa`, `org_refDesig`, `org_custPN`,  \n" +
            "			`org_uomName`, `org_level`, `org_isInstall`, `org_isPurchase`, `org_customerRev`, `org_customerDescription`,   \n" +
            "			`org_numOfPosition`, `org_refLineID`, `qpaDesignatorStep`  \n" +
            "			 from rfq_lineitems where rfqAssyID = poldAssyID and IFNULL(isDeleted,0) = 0;  \n" +
            "# Copy rfq lineitems alternatepart data of old assy to new Assy  \n" +
            "			INSERT INTO `rfq_lineitems_alternatepart`  \n" +
            "			( `rfqLineItemsID`, `distributor`, `distMfgCodeID`, `distPN`, `distMfgPNID`, `mfgCode`, `mfgCodeID`, `mfgPN`, `mfgPNID`,  \n" +
            "			`description`, `isActive`, `isApproved`, `isNoBidsPN`, `isDraft`, `isROHS`, `copyAlternetPartID`, `createdBy`, `createdAt`,  \n" +
            "			`mfgVerificationStep`, `mfgDistMappingStep`, `mfgCodeStep`, `distVerificationStep`, `distCodeStep`,  \n" +
            "			`getMFGPNStep`, `obsoletePartStep`, `goodPartMappingStep`, `rfqAssyID`, `mfgPNStep`, `distPNStep`)  \n" +
            "			select rl.id `rfqLineItemsID`, ra.`distributor`, ra.`distMfgCodeID`, ra.`distPN`, ra.`distMfgPNID`, ra.`mfgCode`, ra.`mfgCodeID`, ra.`mfgPN`, ra.`mfgPNID`,  \n" +
            "			ra.`description`, ra.`isActive`, ra.`isApproved`, ra.`isNoBidsPN`, ra.`isDraft`, ra.`isROHS`, ra.`copyAlternetPartID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`,  \n" +
            "			ra.`mfgVerificationStep`, ra.`mfgDistMappingStep`, ra.`mfgCodeStep`, ra.`distVerificationStep`, ra.`distCodeStep`,  \n" +
            "			ra.`getMFGPNStep`, ra.`obsoletePartStep`, ra.`goodPartMappingStep`,pnewAssyID `rfqAssyID`, ra.`mfgPNStep`, ra.`distPNStep`  \n" +
            "			 from rfq_lineitems_alternatepart ra  \n" +
            "			 join rfq_lineitems ral on ral.id = ra.rfqLineItemsID and ral.rfqAssyID = poldAssyID and ifnull(ral.isDeleted,0) = 0  \n" +
            "			 join rfq_lineitems rl on rl.lineID = ral.lineID and rl.rfqAssyID = pnewAssyID and ifnull(rl.isDeleted,0) = 0  \n" +
            "			 where ra.rfqAssyID = poldAssyID and IFNULL(ra.isDeleted, 0) = 0;  \n" +
            "# update sub assy id in rfq lineItems data of old assy to new Assy  \n" +
            "  \n" +
            "			update rfq_lineitems rli, (select ab.id, ra.rfqLineItemsID, rl.lineID from rfq_lineitems rl join  rfq_lineitems_alternatepart ra on ra.rfqLineItemsID = rl.id   \n" +
            "										right join rfq_assy_bom ab on ab.bomNumber = ra.mfgPN and ab.reqAssyID = pnewAssyID where ra.rfqAssyID = pnewAssyID) rab   \n" +
            "			set rli.rfqAssyBomID = rab.id  \n" +
            "			where   \n" +
            "			rab.lineID = rli.refRFQLineItemID and rli.rfqAssyID = pnewAssyID;  \n" +
            "# update sub assy id in rfq lineItems data of old assy to new Assy  \n" +
            "			update rfq_lineitems_alternatepart rap, (select rl.id, rl.rfqAssyBomID, ra.rfqLineItemsID, rl.lineID from rfq_lineitems rl   \n" +
            "														join  rfq_lineitems_alternatepart ra on ra.rfqLineItemsID = rl.id   \n" +
            "														where ra.rfqAssyID = pnewAssyID) rab   \n" +
            "			set rap.rfqAssyBomID = rab.rfqAssyBomID  \n" +
            "			where   \n" +
            "			rab.rfqLineItemsID = rap.rfqLineItemsID and rap.rfqAssyID = pnewAssyID;  \n" +
            "# update lineItem ref in rfq assy bom   \n" +
            "			update rfq_assy_bom rab, (select * from rfq_lineitems where rfqAssyID = pnewAssyID and IFNULL(isDeleted,0)=0)rl,  \n" +
            "									(select * from rfq_lineitems_alternatepart where rfqAssyID = pnewAssyID and IFNULL(isDeleted,0)=0)rap  \n" +
            "			set rab.rfqLineItemsID = rl.id  \n" +
            "			where rab.reqAssyID = pnewAssyID and rap.mfgPN = rab.bomNumber and rap.rfqLineItemsID = rl.id  ;  \n" +
            "# Copy assy bom relationship data of old assy to new Assy  \n" +
            "			INSERT INTO `rfq_assy_bom_relationship`  \n" +
            "			(`rfqAssyBomID`,`parentRFQAssyBOMID`, `parentLineitemsID`, `rfqAssyID`, `createdBy`, `createdAt`)  \n" +
            "			select ab2.id `rfqAssyBomID`, rl.rfqAssyBomID `parentRFQAssyBOMID`, rl.id `parentLineitemsID`,pnewAssyID `rfqAssyID`, UserID `createdBy`, UTC_TIMESTAMP() `createdAt`   \n" +
            "            from rfq_assy_bom_relationship abr  \n" +
            "			join rfq_assy_bom ab1 on ab1.id = abr.rfqAssyBomID and ab1.reqAssyID = poldAssyID and ab1.bomNumber IS NOT NULL and IFNULL(ab1.isDeleted,0) = 0  \n" +
            "			join rfq_assy_bom ab2 on ab2.bomNumber = ab1.bomNumber and ab2.reqAssyID = pnewAssyID and ab2.bomNumber IS NOT NULL and IFNULL(ab2.isDeleted,0) = 0  \n" +
            "			join rfq_lineitems_alternatepart rla on rla.mfgPN = ab2.bomNumber and rla.rfqAssyID = pnewAssyID and IFNULL(rla.isDeleted,0) = 0  \n" +
            "			join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.rfqAssyID = pnewAssyID and IFNULL(rl.isDeleted,0) = 0  \n" +
            "			where abr.rfqAssyID = poldAssyID and IFNULL(abr.isDeleted,0) = 0;   \n" +
            "# copy rfq_consolidated_mfgpn_lineitem data from old assy to new assy  \n" +
            "		IF(pIsCopyPricing) THEN  \n" +
            "  \n" +
            "			INSERT INTO `rfq_consolidated_mfgpn_lineitem`  \n" +
            "			(`rfqAssyBomID`, `lineID`, `isInstall`, `isPurchase`, `rfqAssyID`, `partTypeID`, `partClassID`, `leadQty`, `attritionRate`, `isActive`, `rfqLineItemID`, `uomID`,  \n" +
            "			`isNoBidsPN`, `isDraft`, `leads`, `totalQty`, `requestQty`, `originalTotalQty`, `qpa`, `createdAt`, `createdBy`, `isMultiple`, `valueAddedCost`,   \n" +
            "			`numOfPosition`,`consolidatedLineItemIDs`)  \n" +
            "			select rl.`rfqAssyBomID`, rcl.`lineID`, rcl.`isInstall`, rcl.`isPurchase`, rl.`rfqAssyID`, rcl.`partTypeID`, rcl.`partClassID`, rcl.`leadQty`, rcl.`attritionRate`,  \n" +
            "            rcl.`isActive`, rl.id `rfqLineItemID`, rcl.`uomID`, rcl.`isNoBidsPN`, rcl.`isDraft`, rcl.`leads`, rcl.`totalQty`, rcl.`requestQty`, rcl.`originalTotalQty`,   \n" +
            "            rcl.`qpa`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, rcl.`isMultiple`, rcl.`valueAddedCost`, rcl.`numOfPosition`,  \n" +
            "            fun_getconsolidatedlineitems(rcl.id,poldAssyID,pnewAssyID) `consolidatedLineItemIDs`   \n" +
            "			from rfq_consolidated_mfgpn_lineitem rcl  \n" +
            "			join rfq_lineitems rl on rl.lineID = rcl.lineID and rl.rfqAssyID = pnewAssyID and IFNULL(rl.isDeleted,0) = 0  \n" +
            "			 where rcl.rfqAssyID = poldAssyID and IFNULL(rcl.isDeleted,0) = 0;  \n" +
            "# copy rfq_consolidated_mfgpn_lineitem_alternate data from old assy to new assy  \n" +
            "			INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`  \n" +
            "			(`mfgPN`, `consolidateID`, `mfgPNID`, `createdBy`, `createdAt`, `mfgCodeID`, `PIDCode`)  \n" +
            "			select rap.`mfgPN`,rcl.id `consolidateID`, rap.`mfgPNID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`, rap.`mfgCodeID`, com.PIDCode `PIDCode`   \n" +
            "            from rfq_lineitems_alternatepart rap  \n" +
            "			join rfq_consolidated_mfgpn_lineitem rcl on rcl.rfqAssyID = rap.rfqAssyID and rcl.rfqLineItemID = rap.rfqLineItemsID  \n" +
            "			join component com on com.id = rap.mfgPNID and IFNULL(com.isDeleted,0) = 0  \n" +
            "			where rap.rfqAssyID = pnewAssyID  \n" +
            "			group by rap.mfgPNID,rap.rfqLineItemsID;  \n" +
            "# copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy  \n" +
            "		# create temporary table for rfq_consolidate_mfgpn_lineitem_quantity of old assembly  \n" +
            "			drop temporary table if exists result;  \n" +
            "			create temporary table result   \n" +
            "			select rcl.lineID, raq.requestQty, rcl.qpa,rlq.* from rfq_consolidate_mfgpn_lineitem_quantity rlq   \n" +
            "			left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rlq.consolidateID and rcl.rfqAssyID = poldAssyID  \n" +
            "			left join rfq_assy_quantity raq on raq.id = rlq.qtyID  and raq.rfqAssyID = poldAssyID  \n" +
            "			where rlq.isDeleted = 0 and rcl.isDeleted = 0 and raq.isDeleted = 0 and raq.rfqAssyID = poldAssyID;  \n" +
            "  \n" +
            "		# create temporary table for mapping quantity between old assembly and new assembly  \n" +
            "  \n" +
            "			drop temporary table if exists mapping;  \n" +
            "			create temporary table mapping  \n" +
            "			select a.requestQty, ifNull((select Max(b.requestqty)  from rfq_assy_quantity b   \n" +
            "			where b.rfqAssyID = poldAssyID and b.requestqty <= a.requestQty and b.isDeleted = 0),  \n" +
            "			(select Min(b.requestqty)  from rfq_assy_quantity b   \n" +
            "			where b.rfqAssyID = poldAssyID and b.requestqty > a.requestQty and b.isDeleted = 0))mappingQty  \n" +
            "			from rfq_assy_quantity a   \n" +
            "			where a.rfqAssyID = pnewAssyID;  \n" +
            "		# copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy  \n" +
            "  \n" +
            "            INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`  \n" +
            "			(`qtyID`, `finalPrice`, `consolidateID`, `createdAt`, `createdBy`, `unitPrice`, `supplier`, `selectedMpn`, `selectionMode`,  \n" +
            "			`min`, `mult`, `currentStock`)  \n" +
            "			select rq.id `qtyID`, ((R.finalPrice /(R.requestQty*R.qpa))*(cl.qpa*rq.requestQty)) `finalPrice`, cl.id `consolidateID`,   \n" +
            "			UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, (R.finalPrice /(R.requestQty*R.qpa)) `unitPrice`, R.`supplier`, R.`selectedMpn`,  \n" +
            "			R.`selectionMode`, R.`min`, R.`mult`, R.`currentStock`         \n" +
            "			from rfq_consolidated_mfgpn_lineitem cl      \n" +
            "			join rfq_assy_quantity rq on rq.rfqAssyID = cl.rfqAssyID and rq.isDeleted = 0  \n" +
            "			left join rfq_consolidate_mfgpn_lineitem_quantity clq on clq.consolidateID = cl.id and clq.qtyID = rq.id   \n" +
            "			left join result R on R.lineID = cl.lineID   \n" +
            "            left join mapping m on  rq.requestQty = m.requestQty   \n" +
            "			where cl.rfqAssyID = pnewAssyID and cl.isDeleted = 0 and m.mappingQty = R.requestQty AND IFNULL(rq.isDeleted,0) = 0;  \n" +
            "  \n" +
            "             drop temporary table if exists mapping;  \n" +
            "             drop temporary table if exists result;  \n" +
            "	END IF;  \n" +
            "     COMMIT;    \n" +
            "	select * from rfq_lineitems where rfqAssyID = pnewAssyID and isDeleted = 0;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 13-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (83,'1.00','V1','copy assyBOM quote - shirish'," + userid + ");"
            );
            break;
        case 83:
            allDbChangesArray.push(
            //  /* **************************** New Script -> 13-08-2018  *********************************** */
           "Drop procedure if exists Sproc_AddOperationInWorkOrder;  \n" +
                "CREATE PROCEDURE `Sproc_AddOperationInWorkOrder`(  \n" +
                "	IN pwoID INT(1),  \n" +
                "	IN popID VARCHAR(5000),  \n" +
                "	IN puserID VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "IF (NOT EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woID = pwoID))  \n" +
                "	THEN SELECT 'Work Order does not exsist' errorCode;  \n" +
                "ELSE  \n" +
                "	/*Generate Dummy data from string to row */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS t;  \n" +
                "	CREATE TEMPORARY TABLE t( txt TEXT );  \n" +
                "	INSERT INTO t VALUES(popID);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp;  \n" +
                "	CREATE TEMPORARY TABLE temp( val CHAR(255) );  \n" +
                "	SET @SQL = CONCAT(\"insert into temp (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t), \",\", \"'),('\"),\"');\");  \n" +
                "	PREPARE stmt1 FROM @SQL;  \n" +
                "	EXECUTE stmt1;  \n" +
                "	SELECT DISTINCT(val) FROM temp;  \n" +
                "	/*Generate Dummy data from string to row */  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "	/*Delete old operation from workorder */  \n" +
                "	UPDATE  workorder_operation_equipment_dataelement   \n" +
                "	SET isDeleted = 1,  \n" +
                "	    deletedAt = UTC_TIMESTAMP() ,  \n" +
                "	    deletedBy = puserID  \n" +
                "	WHERE woOPid IN (SELECT woopid FROM workorder_operation   \n" +
                "			WHERE woid = pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp))AND deletedAt IS NULL;  \n" +
                "	UPDATE  workorder_operation_equipment   \n" +
                "	SET isDeleted = 1,  \n" +
                "	    deletedAt = UTC_TIMESTAMP() ,  \n" +
                "	    deletedBy = puserID  \n" +
                "	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;  \n" +
                "	UPDATE workorder_operation_employee   \n" +
                "	SET isDeleted = 1,  \n" +
                "	    deletedAt = UTC_TIMESTAMP(),  \n" +
                "	    deletedBy = puserID  \n" +
                "	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;  \n" +
                "	UPDATE workorder_operation_part   \n" +
                "	SET isDeleted = 1,  \n" +
                "	    deletedAt = UTC_TIMESTAMP(),  \n" +
                "	    deletedBy = puserID  \n" +
                "	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;  \n" +
                "	UPDATE workorder_operation_dataelement  \n" +
                "	SET isDeleted = 1,  \n" +
                "	    deletedAt = UTC_TIMESTAMP() ,  \n" +
                "	    deletedBy = puserID  \n" +
                "	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;  \n" +
                "	UPDATE workorder_operation   \n" +
                "	SET isDeleted = 1,  \n" +
                "	    deletedAt = UTC_TIMESTAMP() ,  \n" +
                "	    deletedBy = puserID  \n" +
                "	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp) AND deletedAt IS NULL;  \n" +
                "	/*Delete old operation from workorder*/  \n" +
                "  \n" +
                "	INSERT INTO workorder_operation  \n" +
                "	(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,  \n" +
                "	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,  \n" +
                "	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,  \n" +
                "	opVersion, isIssueQty, isRework,`colorCode`)  \n" +
                "	SELECT   pwoID WOID ,`opID`,UTC_TIMESTAMP() `createdAt`,puserID `createdBy`,`opName`,`opNumber`,  \n" +
                "	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,  \n" +
                "	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,'A' opVersion, `isIssueQty`, `isRework`,`colorCode`  \n" +
                "	 FROM operations wo   \n" +
                "	 WHERE opid IN(SELECT DISTINCT(val) FROM temp)  AND   \n" +
                "		opid NOT IN (SELECT opid FROM workorder_operation WHERE woid = pwoid AND  deletedAt IS NULL) AND   \n" +
                "		wo.deletedAt IS NULL ;  \n" +
                "	INSERT INTO workorder_operation_dataelement  \n" +
                "	(`woID`,`opID`,`dataElementID`, `displayOrder`,`createdAt`,`createdBy`,`woOPID`,`isDeleted`)  \n" +
                "	SELECT a.woID ,b.opID ,b.dataElementID, b.displayOrder ,a.createdAt, a.createdBy,a.woOPID, a.isDeleted   \n" +
                "	FROM workorder_operation a JOIN operation_dataelement b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL   \n" +
                "	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND   \n" +
                "		a.deletedAt IS NULL AND b.deletedAt IS NULL AND   \n" +
                "		NOT EXISTS (SELECT 'Y' FROM  workorder_operation_dataelement c   \n" +
                "				WHERE c.woid = a.woid AND   \n" +
                "				      c.opid = a.opid AND   \n" +
                "				      c.dataElementID = b.dataElementID AND   \n" +
                "				      c.deletedAt IS NULL);	  \n" +
                "  \n" +
                "	INSERT INTO workorder_operation_part  \n" +
                "	(`woID`,`opID`,`partID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)  \n" +
                "	SELECT a.woID,b.opID,b.partID,a.createdAt, a.createdBy,a.woOPID, a.isDeleted   \n" +
                "	FROM workorder_operation a JOIN operation_part b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL   \n" +
                "	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND   \n" +
                "		a.deletedAt IS NULL AND b.deletedAt IS NULL AND   \n" +
                "		NOT EXISTS (SELECT 'Y' FROM  workorder_operation_part c   \n" +
                "				WHERE c.woid = a.woid AND   \n" +
                "				      c.opid = a.opid AND   \n" +
                "				      c.partid = b.partid AND   \n" +
                "				      c.deletedAt IS NULL) ;  \n" +
                "  \n" +
                "	INSERT INTO workorder_operation_employee  \n" +
                "	(`woID`,`opID`,`employeeID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)  \n" +
                "	SELECT a.woID,a.opID,b.employeeID,UTC_TIMESTAMP() `createdAt`,a.createdBy,a.woOPID, a.isDeleted   \n" +
                "	FROM workorder_operation a JOIN  operation_employee   b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL   \n" +
                "	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND   \n" +
                "		NOT EXISTS (SELECT 'Y' FROM workorder_operation_employee c   \n" +
                "					WHERE c.woid = a.woid AND 	  \n" +
                "					      c.opid = a.opid AND   \n" +
                "					      c.employeeid = b.employeeid AND   \n" +
                "					      c.deletedAt IS NULL) AND   \n" +
                "	       a.deletedAt IS NULL AND b.deletedAt IS NULL ;  \n" +
                "  \n" +
                "	INSERT INTO workorder_operation_equipment  \n" +
                "	(`woID`,`opID`,`eqpID`,`createdAt`,`createdBy`,`woOPID`,  `isDeleted`)  \n" +
                "	SELECT a.woID,a.opID,b.eqpID,UTC_TIMESTAMP() `createdAt`,a.createdBy,a.woOPID, a.isDeleted   \n" +
                "	FROM workorder_operation a JOIN  operation_equipment  b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL   \n" +
                "	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND   \n" +
                "		NOT EXISTS (SELECT 'Y' FROM workorder_operation_equipment c   \n" +
                "				 WHERE c.woid = a.woid AND   \n" +
                "					c.opid = a.opid AND   \n" +
                "					c.eqpid = b.eqpid AND   \n" +
                "					c.deletedAt IS NULL) AND   \n" +
                "	       a.deletedAt IS NULL AND b.deletedAt IS NULL ;          \n" +
                "  \n" +
                "        INSERT INTO workorder_operation_equipment_dataelement  \n" +
                "        (woid,eqpid,opid,woopid,dataElementID,displayorder,createdAt,createdBy,isDeleted)  \n" +
                "	SELECT a.woID,a.eqpid,a.opid,a.woopid,b.dataElementID,b.displayOrder,UTC_TIMESTAMP() `createdAt`,a.createdBy, a.isDeleted   \n" +
                "	FROM workorder_operation_equipment a JOIN  equipment_dataelement  b  \n" +
                "	 ON a.eqpid = b.eqpid AND a.deletedAt IS NULL AND b.deletedAt IS NULL   \n" +
                "	 AND b.dataelementID IN (SELECT dataElementID FROM dataelement WHERE dataelement_use_at IN ('Both', 'Operation'))  \n" +
                "	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND   \n" +
                "		NOT EXISTS (SELECT 'Y' FROM workorder_operation_equipment_dataelement c  \n" +
                "				WHERE c.woid = a.woid AND   \n" +
                "				      c.opid = a.opid AND  \n" +
                "				      c.woopid = a.woopid AND   \n" +
                "				      c.eqpid = a.eqpid AND   \n" +
                "				      c.dataElementID = b.dataElementID  AND   \n" +
                "				      c.deletedAt IS NULL) AND  \n" +
                "	       a.deletedAt IS NULL AND b.deletedAt IS NULL ;  \n" +
                "	UPDATE workorder SET updatedby=puserID, isOperationsVerified=0,  \n" +
                "			updatedat=CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') WHERE woid=pwoID;  \n" +
                "	COMMIT;  \n" +
                "END IF;  \n" +
                "END;  \n" +
            //  /* **************************** Add Script Version -> 13-08-2018 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
             "VALUES (84,'1.00','V1',' Sproc_AddOperationInWorkOrder - Mona '," + userid + ");"
             );
            break;
        case 84:
            allDbChangesArray.push(
            /* **************************** New Script -> 13-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_CopyAssyBOMQuote`;  \n" +
            "CREATE PROCEDURE `Sproc_CopyAssyBOMQuote`(    \n" +
            "	IN poldAssyID int(1),    \n" +
            "	IN pnewAssyID INT(1),  \n" +
            "    IN UserID int(1),  \n" +
            "    IN pIsCopyPricing tinyint  \n" +
            ")  \n" +
            "BEGIN    \n" +
            "DECLARE pCount int(11);  \n" +
            "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
            "BEGIN    \n" +
            "	ROLLBACK;    \n" +
            "	RESIGNAL;    \n" +
            "END;    \n" +
            "DECLARE EXIT HANDLER FOR SQLWARNING    \n" +
            "  BEGIN    \n" +
            "	ROLLBACK;    \n" +
            "	RESIGNAL;    \n" +
            "END;    \n" +
            "  \n" +
            "    START TRANSACTION;    \n" +
            "  \n" +
            "		select Count(*) INTO pCount from rfq_lineItems where rfqAssyID = pnewAssyID;  \n" +
            "# Remove existing BOM data from newAssembly  \n" +
            "		IF(pCount>0) THEN  \n" +
            "  \n" +
            "			update rfq_assy_bom set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where reqAssyID = pnewAssyID and bomNumber IS NOT NULL;  \n" +
            "			update rfq_assy_bom_relationship set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_lineitems set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_lineitems_alternatepart set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_consolidated_mfgpn_lineitem set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_consolidated_mfgpn_lineitem_alternate set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where consolidateID in (select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = pnewAssyID);  \n" +
            "			update rfq_consolidate_mfgpn_lineitem_quantity set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where consolidateID in (select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = pnewAssyID);  \n" +
            "			update rfq_assy_quotations set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_assy_quantity_price_selection_setting set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where qtyID in (select id from rfq_assy_quantity where rfqAssyID = pnewAssyID);  \n" +
            "        END IF;  \n" +
            "	IF(pIsCopyPricing) THEN  \n" +
            "# update isverifiedBOM and isReadyforPricing flag in rfq_assemblies table  \n" +
            "		select Count(*) INTO pCount from rfq_lineItems where rfqAssyID = poldAssyID and isDeleted = 0;  \n" +
            "			IF (pCount>0) THEN  \n" +
            "					update rfq_assemblies set   \n" +
            "					isBOMVerified = true,   \n" +
            "					isReadyForPricing = true,  \n" +
            "					updatedAt = UTC_TIMESTAMP(),  \n" +
            "					updatedBy = UserID  \n" +
            "					where id = pnewAssyID;  \n" +
            "			ELSE   \n" +
            "					update rfq_assemblies set   \n" +
            "					isBOMVerified = false,   \n" +
            "					isReadyForPricing = false  \n" +
            "					where id = pnewAssyID;  \n" +
            "            END IF;  \n" +
            "	ELSE   \n" +
            "		IF(pCount>0) THEN  \n" +
            "  \n" +
            "			update rfq_assemblies set   \n" +
            "			isBOMVerified = true,   \n" +
            "			isReadyForPricing = false,  \n" +
            "			updatedAt = UTC_TIMESTAMP(),  \n" +
            "			updatedBy = UserID  \n" +
            "			where id = pnewAssyID;  \n" +
            "  \n" +
            "		END if;  \n" +
            "  \n" +
            "	END IF;  \n" +
            "# Copy Assy BOM data of old assy to new Assy  \n" +
            "			INSERT INTO `rfq_assy_bom`  \n" +
            "			(`reqAssyID`, `isActive`, `description`, `createdBy`, `createdAt`, `bomNumber`)  \n" +
            "			select   \n" +
            "			pnewAssyID `reqAssyID`, `isActive`, `description`,UserID `createdBy`, UTC_TIMESTAMP() `createdAt`, `bomNumber`   \n" +
            "			from rfq_assy_bom where reqAssyID = poldAssyID and IFNULL(isDeleted,0) = 0 and bomNumber IS NOT NULL;   \n" +
            "  \n" +
            "# Copy rfq lineItems data of old assy to new Assy  \n" +
            "			INSERT INTO `rfq_lineitems`  \n" +
            "			(`rfqAssyBomID`, `rfqAssyID`, `lineID`, `qpa`, `refDesig`, `custPN`, `custPNID`, `uomID`, `description`, `level`, `isInstall`,  \n" +
            "			`isPurchase`, `isNoBidsPN`,  `isDraft`, `isActive`, `partTypeID`, `partclassID`,  `leadQty`, `attritionRate`, `totalQty`,   \n" +
            "			`manualAdj`, `createdBy`, `createdAt`, `customerRev`, `flextronRev`, `customerDescription`, `numOfPosition`, `valueAddedCost`,   \n" +
            "			`refRFQLineItemID`, `dnpQty`, `dnpDesig`, `org_lineID`, `org_qpa`, `org_refDesig`, `org_custPN`, `org_uomName`, `org_level`,   \n" +
            "			`org_isInstall`, `org_isPurchase`, `org_customerRev`, `org_customerDescription`, `org_numOfPosition`, `org_refLineID`,   \n" +
            "			`qpaDesignatorStep`)  \n" +
            "			select (select id from rfq_assy_bom where reqAssyID = pnewAssyID and bomNumber IS NULL) `rfqAssyBomID`,pnewAssyID `rfqAssyID`, `lineID`, `qpa`,  \n" +
            "			 `refDesig`, `custPN`, `custPNID`, `uomID`, `description`, `level`, `isInstall`,  \n" +
            "			`isPurchase`, `isNoBidsPN`,  `isDraft`, `isActive`, `partTypeID`, `partclassID`,  `leadQty`, `attritionRate`, `totalQty`,   \n" +
            "			`manualAdj`, UserID `createdBy`, UTC_TIMESTAMP() `createdAt`, `customerRev`, `flextronRev`, `customerDescription`, `numOfPosition`,   \n" +
            "			`valueAddedCost`, `refRFQLineItemID`, `dnpQty`, `dnpDesig`, `org_lineID`, `org_qpa`, `org_refDesig`, `org_custPN`,  \n" +
            "			`org_uomName`, `org_level`, `org_isInstall`, `org_isPurchase`, `org_customerRev`, `org_customerDescription`,   \n" +
            "			`org_numOfPosition`, `org_refLineID`, `qpaDesignatorStep`  \n" +
            "			 from rfq_lineitems where rfqAssyID = poldAssyID and IFNULL(isDeleted,0) = 0;  \n" +
            "# Copy rfq lineitems alternatepart data of old assy to new Assy  \n" +
            "			INSERT INTO `rfq_lineitems_alternatepart`  \n" +
            "			( `rfqLineItemsID`, `distributor`, `distMfgCodeID`, `distPN`, `distMfgPNID`, `mfgCode`, `mfgCodeID`, `mfgPN`, `mfgPNID`,  \n" +
            "			`description`, `isActive`, `isApproved`, `isNoBidsPN`, `isDraft`, `isROHS`, `copyAlternetPartID`, `createdBy`, `createdAt`,  \n" +
            "			`mfgVerificationStep`, `mfgDistMappingStep`, `mfgCodeStep`, `distVerificationStep`, `distCodeStep`,  \n" +
            "			`getMFGPNStep`, `obsoletePartStep`, `goodPartMappingStep`, `rfqAssyID`, `mfgPNStep`, `distPNStep`)  \n" +
            "			select rl.id `rfqLineItemsID`, ra.`distributor`, ra.`distMfgCodeID`, ra.`distPN`, ra.`distMfgPNID`, ra.`mfgCode`, ra.`mfgCodeID`, ra.`mfgPN`, ra.`mfgPNID`,  \n" +
            "			ra.`description`, ra.`isActive`, ra.`isApproved`, ra.`isNoBidsPN`, ra.`isDraft`, ra.`isROHS`, ra.`copyAlternetPartID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`,  \n" +
            "			ra.`mfgVerificationStep`, ra.`mfgDistMappingStep`, ra.`mfgCodeStep`, ra.`distVerificationStep`, ra.`distCodeStep`,  \n" +
            "			ra.`getMFGPNStep`, ra.`obsoletePartStep`, ra.`goodPartMappingStep`,pnewAssyID `rfqAssyID`, ra.`mfgPNStep`, ra.`distPNStep`  \n" +
            "			 from rfq_lineitems_alternatepart ra  \n" +
            "			 join rfq_lineitems ral on ral.id = ra.rfqLineItemsID and ral.rfqAssyID = poldAssyID and ifnull(ral.isDeleted,0) = 0  \n" +
            "			 join rfq_lineitems rl on rl.lineID = ral.lineID and rl.rfqAssyID = pnewAssyID and ifnull(rl.isDeleted,0) = 0  \n" +
            "			 where ra.rfqAssyID = poldAssyID and IFNULL(ra.isDeleted, 0) = 0;  \n" +
            "# update sub assy id in rfq lineItems data of old assy to new Assy  \n" +
            "  \n" +
            "			update rfq_lineitems rli, (select ab.id, ra.rfqLineItemsID, rl.lineID from rfq_lineitems rl join  rfq_lineitems_alternatepart ra on ra.rfqLineItemsID = rl.id   \n" +
            "										right join rfq_assy_bom ab on ab.bomNumber = ra.mfgPN and ab.reqAssyID = pnewAssyID and ab.isDeleted = 0 where ra.rfqAssyID = pnewAssyID) rab   \n" +
            "			set rli.rfqAssyBomID = rab.id  \n" +
            "			where   \n" +
            "			rab.lineID = rli.refRFQLineItemID and rli.rfqAssyID = pnewAssyID;  \n" +
            "# update sub assy id in rfq lineItems data of old assy to new Assy  \n" +
            "			update rfq_lineitems_alternatepart rap, (select rl.id, rl.rfqAssyBomID, ra.rfqLineItemsID, rl.lineID from rfq_lineitems rl   \n" +
            "														join  rfq_lineitems_alternatepart ra on ra.rfqLineItemsID = rl.id   \n" +
            "														where ra.rfqAssyID = pnewAssyID and rl.isDeleted = 0) rab   \n" +
            "			set rap.rfqAssyBomID = rab.rfqAssyBomID  \n" +
            "			where   \n" +
            "			rab.rfqLineItemsID = rap.rfqLineItemsID and rap.rfqAssyID = pnewAssyID;  \n" +
            "# update lineItem ref in rfq assy bom   \n" +
            "			update rfq_assy_bom rab, (select * from rfq_lineitems where rfqAssyID = pnewAssyID and IFNULL(isDeleted,0)=0)rl,  \n" +
            "									(select * from rfq_lineitems_alternatepart where rfqAssyID = pnewAssyID and IFNULL(isDeleted,0)=0)rap  \n" +
            "			set rab.rfqLineItemsID = rl.id  \n" +
            "			where rab.reqAssyID = pnewAssyID and rap.mfgPN = rab.bomNumber and rap.rfqLineItemsID = rl.id  ;  \n" +
            "# Copy assy bom relationship data of old assy to new Assy  \n" +
            "			INSERT INTO `rfq_assy_bom_relationship`  \n" +
            "			(`rfqAssyBomID`,`parentRFQAssyBOMID`, `parentLineitemsID`, `rfqAssyID`, `createdBy`, `createdAt`)  \n" +
            "			select ab2.id `rfqAssyBomID`, rl.rfqAssyBomID `parentRFQAssyBOMID`, rl.id `parentLineitemsID`,pnewAssyID `rfqAssyID`, UserID `createdBy`, UTC_TIMESTAMP() `createdAt`   \n" +
            "            from rfq_assy_bom_relationship abr  \n" +
            "			join rfq_assy_bom ab1 on ab1.id = abr.rfqAssyBomID and ab1.reqAssyID = poldAssyID and ab1.bomNumber IS NOT NULL and IFNULL(ab1.isDeleted,0) = 0  \n" +
            "			join rfq_assy_bom ab2 on ab2.bomNumber = ab1.bomNumber and ab2.reqAssyID = pnewAssyID and ab2.bomNumber IS NOT NULL and IFNULL(ab2.isDeleted,0) = 0  \n" +
            "			join rfq_lineitems_alternatepart rla on rla.mfgPN = ab2.bomNumber and rla.rfqAssyID = pnewAssyID and IFNULL(rla.isDeleted,0) = 0  \n" +
            "			join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.rfqAssyID = pnewAssyID and IFNULL(rl.isDeleted,0) = 0  \n" +
            "			where abr.rfqAssyID = poldAssyID and IFNULL(abr.isDeleted,0) = 0;   \n" +
            "# copy rfq_consolidated_mfgpn_lineitem data from old assy to new assy  \n" +
            "		IF(pIsCopyPricing) THEN  \n" +
            "  \n" +
            "			INSERT INTO `rfq_consolidated_mfgpn_lineitem`  \n" +
            "			(`rfqAssyBomID`, `lineID`, `isInstall`, `isPurchase`, `rfqAssyID`, `partTypeID`, `partClassID`, `leadQty`, `attritionRate`, `isActive`, `rfqLineItemID`, `uomID`,  \n" +
            "			`isNoBidsPN`, `isDraft`, `leads`, `totalQty`, `requestQty`, `originalTotalQty`, `qpa`, `createdAt`, `createdBy`, `isMultiple`, `valueAddedCost`,   \n" +
            "			`numOfPosition`,`consolidatedLineItemIDs`)  \n" +
            "			select rl.`rfqAssyBomID`, rcl.`lineID`, rcl.`isInstall`, rcl.`isPurchase`, rl.`rfqAssyID`, rcl.`partTypeID`, rcl.`partClassID`, rcl.`leadQty`, rcl.`attritionRate`,  \n" +
            "            rcl.`isActive`, rl.id `rfqLineItemID`, rcl.`uomID`, rcl.`isNoBidsPN`, rcl.`isDraft`, rcl.`leads`, rcl.`totalQty`, rcl.`requestQty`, rcl.`originalTotalQty`,   \n" +
            "            rcl.`qpa`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, rcl.`isMultiple`, rcl.`valueAddedCost`, rcl.`numOfPosition`,  \n" +
            "            fun_getconsolidatedlineitems(rcl.id,poldAssyID,pnewAssyID) `consolidatedLineItemIDs`   \n" +
            "			from rfq_consolidated_mfgpn_lineitem rcl  \n" +
            "			join rfq_lineitems rl on rl.lineID = rcl.lineID and rl.rfqAssyID = pnewAssyID and IFNULL(rl.isDeleted,0) = 0  \n" +
            "			 where rcl.rfqAssyID = poldAssyID and IFNULL(rcl.isDeleted,0) = 0;  \n" +
            "# copy rfq_consolidated_mfgpn_lineitem_alternate data from old assy to new assy  \n" +
            "			INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`  \n" +
            "			(`mfgPN`, `consolidateID`, `mfgPNID`, `createdBy`, `createdAt`, `mfgCodeID`, `PIDCode`)  \n" +
            "			select rap.`mfgPN`,rcl.id `consolidateID`, rap.`mfgPNID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`, rap.`mfgCodeID`, com.PIDCode `PIDCode`   \n" +
            "            from rfq_lineitems_alternatepart rap  \n" +
            "			join rfq_consolidated_mfgpn_lineitem rcl on rcl.rfqAssyID = rap.rfqAssyID and rcl.rfqLineItemID = rap.rfqLineItemsID  \n" +
            "			join component com on com.id = rap.mfgPNID and IFNULL(com.isDeleted,0) = 0  \n" +
            "			where rap.rfqAssyID = pnewAssyID  \n" +
            "			group by rap.mfgPNID,rap.rfqLineItemsID;  \n" +
            "# copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy  \n" +
            "		# create temporary table for rfq_consolidate_mfgpn_lineitem_quantity of old assembly  \n" +
            "			drop temporary table if exists result;  \n" +
            "			create temporary table result   \n" +
            "			select rcl.lineID, raq.requestQty, rcl.qpa,rlq.* from rfq_consolidate_mfgpn_lineitem_quantity rlq   \n" +
            "			left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rlq.consolidateID and rcl.rfqAssyID = poldAssyID  \n" +
            "			left join rfq_assy_quantity raq on raq.id = rlq.qtyID  and raq.rfqAssyID = poldAssyID  \n" +
            "			where rlq.isDeleted = 0 and rcl.isDeleted = 0 and raq.isDeleted = 0 and raq.rfqAssyID = poldAssyID;  \n" +
            "  \n" +
            "		# create temporary table for mapping quantity between old assembly and new assembly  \n" +
            "  \n" +
            "			drop temporary table if exists mapping;  \n" +
            "			create temporary table mapping  \n" +
            "			select a.requestQty, ifNull((select Max(b.requestqty)  from rfq_assy_quantity b   \n" +
            "			where b.rfqAssyID = poldAssyID and b.requestqty <= a.requestQty and b.isDeleted = 0),  \n" +
            "			(select Min(b.requestqty)  from rfq_assy_quantity b   \n" +
            "			where b.rfqAssyID = poldAssyID and b.requestqty > a.requestQty and b.isDeleted = 0))mappingQty  \n" +
            "			from rfq_assy_quantity a   \n" +
            "			where a.rfqAssyID = pnewAssyID;  \n" +
            "		# copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy  \n" +
            "  \n" +
            "            INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`  \n" +
            "			(`qtyID`, `finalPrice`, `consolidateID`, `createdAt`, `createdBy`, `unitPrice`, `supplier`, `selectedMpn`, `selectionMode`,  \n" +
            "			`min`, `mult`, `currentStock`)  \n" +
            "			select rq.id `qtyID`, ((R.finalPrice /(R.requestQty*R.qpa))*(cl.qpa*rq.requestQty)) `finalPrice`, cl.id `consolidateID`,   \n" +
            "			UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, (R.finalPrice /(R.requestQty*R.qpa)) `unitPrice`, R.`supplier`, R.`selectedMpn`,  \n" +
            "			R.`selectionMode`, R.`min`, R.`mult`, R.`currentStock`         \n" +
            "			from rfq_consolidated_mfgpn_lineitem cl      \n" +
            "			join rfq_assy_quantity rq on rq.rfqAssyID = cl.rfqAssyID and rq.isDeleted = 0  \n" +
            "			left join rfq_consolidate_mfgpn_lineitem_quantity clq on clq.consolidateID = cl.id and clq.qtyID = rq.id   \n" +
            "			left join result R on R.lineID = cl.lineID   \n" +
            "            left join mapping m on  rq.requestQty = m.requestQty   \n" +
            "			where cl.rfqAssyID = pnewAssyID and cl.isDeleted = 0 and m.mappingQty = R.requestQty AND IFNULL(rq.isDeleted,0) = 0;  \n" +
            "  \n" +
            "             drop temporary table if exists mapping;  \n" +
            "             drop temporary table if exists result;  \n" +
            "	END IF;  \n" +
            "     COMMIT;    \n" +
            "	select * from rfq_lineitems where rfqAssyID = pnewAssyID and isDeleted = 0;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 13-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (85,'1.00','V1','copy assyBOM quote - shirish'," + userid + ");"
            );
            break;
        case 85:
            allDbChangesArray.push(
            /* **************************** New Script -> 13-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
"CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(      \n" +
"	IN ppageIndex INT(11),      \n" +
"	IN precordPerPage INT(11),      \n" +
"	IN pOrderBy VARCHAR(255),      \n" +
"	IN pWhereClause VARCHAR(21844),      \n" +
"	IN rfqAssyID INT(11),      \n" +
"	IN puserID INT (11)      \n" +
"    )  \n" +
"BEGIN      \n" +
"  \n" +
"	    DECLARE pOffset INT(11);      \n" +
"	    DECLARE rowNumWhere VARCHAR(255) ;      \n" +
"	    SET @SQLString = NULL;      \n" +
"	    SET SESSION group_concat_max_len = 150000;          \n" +
"	    IF (pOrderBy IS NOT NULL) THEN      \n" +
"			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
"		ELSE      \n" +
"			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;       \n" +
"		END IF;	      \n" +
"  \n" +
"  \n" +
"		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN      \n" +
"			SET pWhereClause = '1=1' ;      \n" +
"		END IF;	      \n" +
"  \n" +
"		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
"			SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
"			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
"		ELSE	      \n" +
"			SET rowNumWhere = '';      \n" +
"		END IF;	      \n" +
"		SELECT      \n" +
"                     GROUP_CONCAT(DISTINCT      \n" +
"				CONCAT(      \n" +
"					'Max((IF(ra.requestQty = ''',      \n" +
"						ra.requestQty,      \n" +
"					''', rq.finalPrice, null))) AS ''',      \n" +
"						ra.requestQty,''''      \n" +
"					)      \n" +
"					) INTO @SQLString      \n" +
"		FROM rfq_consolidate_mfgpn_lineitem_quantity rq      \n" +
"		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID      \n" +
"		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id      \n" +
"		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;      \n" +
"  \n" +
"			IF(@SQLString IS NOT NULL) THEN      \n" +
"				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS      \n" +
"					SELECT       \n" +
"					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,        \n" +
"					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,  \n" +
"					(SELECT   \n" +
"                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)            \n" +
"                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN   \n" +
"                                     component c ON rla.mfgpnid=c.id   \n" +
"                                     LEFT JOIN mfgcodemst mg ON    \n" +
"                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,      \n" +
"					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn       \n" +
"                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla       \n" +
"                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',       \n" +
"					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl      \n" +
"					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID      \n" +
"					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id      \n" +
"					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');      \n" +
"  \n" +
"			ELSE      \n" +
"				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS      \n" +
"					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,   \n" +
"					 GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)            \n" +
"                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN   \n" +
"                                     component c ON rla.mfgpnid=c.id   \n" +
"                                     LEFT JOIN mfgcodemst mg ON    \n" +
"                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,        \n" +
"					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn       \n" +
"                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla       \n" +
"                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl      \n" +
"					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	      \n" +
"			END IF;      \n" +
"			PREPARE stmt FROM @SQLStatement;      \n" +
"			EXECUTE stmt;	      \n" +
"  \n" +
"  \n" +
"			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );      \n" +
"			PREPARE query1 FROM @SQLStatement1;      \n" +
"			EXECUTE query1;      \n" +
"			DEALLOCATE PREPARE query1;      \n" +
"  \n" +
"  \n" +
"			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
"			PREPARE query2 FROM @SQLStatement2;      \n" +
"			EXECUTE query2;      \n" +
"			DEALLOCATE PREPARE query2;      \n" +
"  \n" +
"  \n" +
"  \n" +
"			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );      \n" +
"			PREPARE query3 FROM @SQLStatement3;      \n" +
"			EXECUTE query3;      \n" +
"			DEALLOCATE PREPARE query3;      \n" +
"  \n" +
"			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.turnType,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt      \n" +
"  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id      \n" +
"   WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);      \n" +
"			PREPARE query4 FROM @SQLStatement4;      \n" +
"			EXECUTE query4;      \n" +
"			DEALLOCATE PREPARE query4;  \n" +
"  \n" +
"			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty, rq.finalPrice, unitPrice,supplier,rq.min,rq.mult, selectedMpn, selectionMode,qtyID,      \n" +
"					selectedPIDCode,ct.qpa, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq           \n" +
"				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID   \n" +
"				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id   \n" +
"				WHERE ct.rfqAssyID=\",rfqAssyID);          \n" +
"			PREPARE query5 FROM @SQLStatement5;              \n" +
"			EXECUTE query5;              \n" +
"			DEALLOCATE PREPARE query5;     \n" +
"  \n" +
"			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty, (SUM(rq.finalPrice)) AS Total  \n" +
"					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
"					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id  \n" +
"							WHERE rl.rfqAssyid=\",rfqAssyID,' GROUP BY rq.qtyID');          \n" +
"  \n" +
"			PREPARE query6 FROM @SQLStatement6;              \n" +
"			EXECUTE query6;              \n" +
"			DEALLOCATE PREPARE query6;                  \n" +
"  \n" +
"  \n" +
"			DROP TEMPORARY TABLE consolidatetemp;        \n" +
"    END;  \n" +
"DROP PROCEDURE IF EXISTS `Sproc_GetRFQNotQuotedLineItems` ;  \n" +
"CREATE PROCEDURE `Sproc_GetRFQNotQuotedLineItems`(              \n" +
"	IN ppageIndex INT(11),              \n" +
"	IN precordPerPage INT(11),              \n" +
"	IN pOrderBy VARCHAR(255),              \n" +
"	IN pWhereClause VARCHAR(21844),              \n" +
"	IN rfqAssyID INT(11),              \n" +
"	IN puserID INT (11)        \n" +
"    )  \n" +
"BEGIN              \n" +
"  \n" +
"	    DECLARE pOffset INT(11);              \n" +
"	    DECLARE rowNumWhere VARCHAR(255) ;          \n" +
"	    SET @SQLString = NULL;                \n" +
"	    SET @HavingClause = NULL;    \n" +
"	    SET SESSION group_concat_max_len = 150000;                    \n" +
"	    IF (pOrderBy IS NOT NULL) THEN              \n" +
"			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
"		ELSE              \n" +
"			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;               \n" +
"		END IF;	              \n" +
"  \n" +
"  \n" +
"		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN              \n" +
"			SET pWhereClause = '1=1' ;              \n" +
"		END IF;	              \n" +
"  \n" +
"		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN               \n" +
"			SET pOffset = (ppageIndex -1) * precordPerPage; 		              \n" +
"			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
"		ELSE	              \n" +
"			SET rowNumWhere = '';              \n" +
"		END IF;	              \n" +
"		SELECT              \n" +
"                      GROUP_CONCAT(DISTINCT              \n" +
"				CONCAT(              \n" +
"					'Max((IF(ra.requestQty = ''',              \n" +
"						ra.requestQty,              \n" +
"					''', rq.finalPrice, null))) AS ''',              \n" +
"						ra.requestQty,''''              \n" +
"					)              \n" +
"					),          \n" +
"			GROUP_CONCAT(DISTINCT              \n" +
"				CONCAT(              \n" +
"					'Max((IF(ra.requestQty = ''',              \n" +
"						ra.requestQty,              \n" +
"					''', rq.finalPrice, null))) IS NULL'              \n" +
"					) SEPARATOR ' OR '             \n" +
"					)          \n" +
"				INTO @SQLString, @HavingClause          \n" +
"		FROM rfq_consolidate_mfgpn_lineitem_quantity rq              \n" +
"		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID              \n" +
"		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id              \n" +
"		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;            \n" +
"			IF(@SQLString IS NOT NULL) THEN              \n" +
"				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS              \n" +
"					SELECT               \n" +
"					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                \n" +
"					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,  \n" +
"					(SELECT   \n" +
"                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)            \n" +
"                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN   \n" +
"                                     component c ON rla.mfgpnid=c.id   \n" +
"                                     LEFT JOIN mfgcodemst mg ON    \n" +
"                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,              \n" +
"					(SELECT GROUP_CONCAT(rla.PIDCode)AS mfgPn               \n" +
"                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',               \n" +
"					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl              \n" +
"					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID              \n" +
"					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id              \n" +
"					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');            \n" +
"  \n" +
"					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                   \n" +
"			END IF;               \n" +
"			PREPARE stmt FROM @SQLStatement;              \n" +
"			EXECUTE stmt;	              \n" +
"  \n" +
"  \n" +
"			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );              \n" +
"			PREPARE query1 FROM @SQLStatement1;              \n" +
"			EXECUTE query1;              \n" +
"			DEALLOCATE PREPARE query1;              \n" +
"  \n" +
"  \n" +
"			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
"			PREPARE query2 FROM @SQLStatement2;              \n" +
"			EXECUTE query2;              \n" +
"			DEALLOCATE PREPARE query2;              \n" +
"  \n" +
"			SET @SQLStatement3 = CONCAT(\" SELECT distinct ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq              \n" +
"			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
"			   WHERE  ra.rfqAssyID=\",rfqAssyID);              \n" +
"			PREPARE query3 FROM @SQLStatement3;              \n" +
"			EXECUTE query3;              \n" +
"			DEALLOCATE PREPARE query3;              \n" +
"  \n" +
"  			SET @SQLStatement4 = CONCAT(\"      \n" +
"				SELECT requestQty,       \n" +
"					finalPrice,       \n" +
"					unitPrice,      \n" +
"					supplier,       \n" +
"					selectedMpn,       \n" +
"					selectionMode,      \n" +
"					selectedPIDCode,    \n" +
"					qtyID,       \n" +
"					consolidateID,      \n" +
"					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus      \n" +
"					FROM rfq_consolidate_mfgpn_lineitem_quantity rq           \n" +
"					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID       \n" +
"					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");              \n" +
"			PREPARE query4 FROM @SQLStatement4;              \n" +
"			EXECUTE query4;              \n" +
"			DEALLOCATE PREPARE query4;              \n" +
"  \n" +
"			DROP TEMPORARY TABLE consolidatetemp;                \n" +
"    END;  \n" +
            /* **************************** Add Script Version -> 13-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (86,'1.00','V1',' Alter Sproc_GetRFQConsolidateRfqLineItem and Sproc_GetRFQNotQuotedLineItems - Champak '," + userid + ");"
            );
            break;
        case 86:
            allDbChangesArray.push(
           //  /* **************************** New Script -> 13-08-2018  *********************************** */
         "insert into feature_mst(featureName,isActive,isDeleted,createdAt,createdBy)  \n" +
             "values('Edit Manufacturer Code', 1 , 0, utc_timestamp() , 1);  \n" +
           //  /* **************************** Add Script Version -> 13-08-2018 *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (87,'1.00','V1','insert into feature_mst - Mona '," + userid + ");"
            );
            break;
        case 87:
            allDbChangesArray.push(
            /* **************************** New Script -> 13-08-2018  *********************************** */
            "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity ADD `leadTime` INT NULL;  \n" +
            "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity ADD `supplierStock` INT NULL;  \n" +
            "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity ADD `grossStock` INT NULL;  \n" +

            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
              "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(        \n" +
              "	IN ppageIndex INT(11),        \n" +
              "	IN precordPerPage INT(11),        \n" +
              "	IN pOrderBy VARCHAR(255),        \n" +
              "	IN pWhereClause VARCHAR(21844),        \n" +
              "	IN rfqAssyID INT(11),        \n" +
              "	IN puserID INT (11)        \n" +
              "    )  \n" +
              "BEGIN        \n" +
              "  \n" +
              "	    DECLARE pOffset INT(11);        \n" +
              "	    DECLARE rowNumWhere VARCHAR(255) ;        \n" +
              "	    SET @SQLString = NULL;        \n" +
              "	    SET SESSION group_concat_max_len = 150000;            \n" +
              "	    IF (pOrderBy IS NOT NULL) THEN        \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
              "		ELSE        \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;         \n" +
              "		END IF;	        \n" +
              "  \n" +
              "  \n" +
              "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN        \n" +
              "			SET pWhereClause = '1=1' ;        \n" +
              "		END IF;	        \n" +
              "  \n" +
              "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
              "			SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
              "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
              "		ELSE	        \n" +
              "			SET rowNumWhere = '';        \n" +
              "		END IF;	        \n" +
              "		SELECT        \n" +
              "                     GROUP_CONCAT(DISTINCT        \n" +
              "				CONCAT(        \n" +
              "					'Max((IF(ra.requestQty = ''',        \n" +
              "						ra.requestQty,        \n" +
              "					''', rq.finalPrice, null))) AS ''',        \n" +
              "						ra.requestQty,''''        \n" +
              "					)        \n" +
              "					) INTO @SQLString        \n" +
              "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq        \n" +
              "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID        \n" +
              "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id        \n" +
              "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;        \n" +
              "  \n" +
              "			IF(@SQLString IS NOT NULL) THEN        \n" +
              "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS        \n" +
              "					SELECT         \n" +
              "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,          \n" +
              "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,    \n" +
              "					(SELECT     \n" +
              "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)              \n" +
              "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN     \n" +
              "                                     component c ON rla.mfgpnid=c.id     \n" +
              "                                     LEFT JOIN mfgcodemst mg ON      \n" +
              "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,        \n" +
              "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn         \n" +
              "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla         \n" +
              "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',         \n" +
              "					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl        \n" +
              "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID        \n" +
              "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id        \n" +
              "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');        \n" +
              "  \n" +
              "			ELSE        \n" +
              "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS        \n" +
              "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,     \n" +
              "					 GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)              \n" +
              "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN     \n" +
              "                                     component c ON rla.mfgpnid=c.id     \n" +
              "                                     LEFT JOIN mfgcodemst mg ON      \n" +
              "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,          \n" +
              "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn         \n" +
              "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla         \n" +
              "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl        \n" +
              "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	        \n" +
              "			END IF;        \n" +
              "			PREPARE stmt FROM @SQLStatement;        \n" +
              "			EXECUTE stmt;	        \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );        \n" +
              "			PREPARE query1 FROM @SQLStatement1;        \n" +
              "			EXECUTE query1;        \n" +
              "			DEALLOCATE PREPARE query1;        \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
              "			PREPARE query2 FROM @SQLStatement2;        \n" +
              "			EXECUTE query2;        \n" +
              "			DEALLOCATE PREPARE query2;        \n" +
              "  \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );        \n" +
              "			PREPARE query3 FROM @SQLStatement3;        \n" +
              "			EXECUTE query3;        \n" +
              "			DEALLOCATE PREPARE query3;        \n" +
              "  \n" +
              "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.turnType,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt        \n" +
              "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id        \n" +
              "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);        \n" +
              "			PREPARE query4 FROM @SQLStatement4;        \n" +
              "			EXECUTE query4;        \n" +
              "			DEALLOCATE PREPARE query4;    \n" +
              "  \n" +
              "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty, rq.finalPrice, unitPrice,supplier,rq.min,rq.mult, selectedMpn, selectionMode,qtyID,   \n" +
              "					currentStock,  \n" +
              "					leadTime,   \n" +
              "					supplierStock,  \n" +
              "					grossStock,      \n" +
              "					selectedPIDCode,ct.qpa, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq             \n" +
              "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID     \n" +
              "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id     \n" +
              "				WHERE ct.rfqAssyID=\",rfqAssyID);            \n" +
              "			PREPARE query5 FROM @SQLStatement5;                \n" +
              "			EXECUTE query5;                \n" +
              "			DEALLOCATE PREPARE query5;       \n" +
              "  \n" +
              "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty, (SUM(rq.finalPrice)) AS Total, (SUM(rq.unitPrice)) AS TotalUnitPrice  \n" +
              "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq    \n" +
              "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id    \n" +
              "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,'  GROUP BY rq.qtyID');            \n" +
              "  \n" +
              "			PREPARE query6 FROM @SQLStatement6;                \n" +
              "			EXECUTE query6;                \n" +
              "			DEALLOCATE PREPARE query6;                    \n" +
              "  \n" +
              "  \n" +
              "			DROP TEMPORARY TABLE consolidatetemp;          \n" +
              "    END;  \n" +
            /* **************************** Add Script Version -> 13-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQNotQuotedLineItems` ;  \n" +
          "CREATE PROCEDURE `Sproc_GetRFQNotQuotedLineItems`(                \n" +
          "	IN ppageIndex INT(11),                \n" +
          "	IN precordPerPage INT(11),                \n" +
          "	IN pOrderBy VARCHAR(255),                \n" +
          "	IN pWhereClause VARCHAR(21844),                \n" +
          "	IN rfqAssyID INT(11),                \n" +
          "	IN puserID INT (11)          \n" +
          "    )  \n" +
          "BEGIN                \n" +
          "  \n" +
          "	    DECLARE pOffset INT(11);                \n" +
          "	    DECLARE rowNumWhere VARCHAR(255) ;            \n" +
          "	    SET @SQLString = NULL;                  \n" +
          "	    SET @HavingClause = NULL;      \n" +
          "	    SET SESSION group_concat_max_len = 150000;                      \n" +
          "	    IF (pOrderBy IS NOT NULL) THEN                \n" +
          "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
          "		ELSE                \n" +
          "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;                 \n" +
          "		END IF;	                \n" +
          "  \n" +
          "  \n" +
          "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                \n" +
          "			SET pWhereClause = '1=1' ;                \n" +
          "		END IF;	                \n" +
          "  \n" +
          "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
          "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
          "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
          "		ELSE	                \n" +
          "			SET rowNumWhere = '';                \n" +
          "		END IF;	                \n" +
          "		SELECT                \n" +
          "                      GROUP_CONCAT(DISTINCT                \n" +
          "				CONCAT(                \n" +
          "					'Max((IF(ra.requestQty = ''',                \n" +
          "						ra.requestQty,                \n" +
          "					''', rq.finalPrice, null))) AS ''',                \n" +
          "						ra.requestQty,''''                \n" +
          "					)                \n" +
          "					),            \n" +
          "			GROUP_CONCAT(DISTINCT                \n" +
          "				CONCAT(                \n" +
          "					'Max((IF(ra.requestQty = ''',                \n" +
          "						ra.requestQty,                \n" +
          "					''', rq.finalPrice, null))) IS NULL'                \n" +
          "					) SEPARATOR ' OR '               \n" +
          "					)            \n" +
          "				INTO @SQLString, @HavingClause            \n" +
          "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                \n" +
          "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                \n" +
          "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                \n" +
          "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;              \n" +
          "			IF(@SQLString IS NOT NULL) THEN                \n" +
          "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                \n" +
          "					SELECT                 \n" +
          "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                  \n" +
          "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,    \n" +
          "					(SELECT     \n" +
          "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)              \n" +
          "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN     \n" +
          "                                     component c ON rla.mfgpnid=c.id     \n" +
          "                                     LEFT JOIN mfgcodemst mg ON      \n" +
          "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                \n" +
          "					(SELECT GROUP_CONCAT(rla.PIDCode)AS mfgPn                 \n" +
          "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                 \n" +
          "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                \n" +
          "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                \n" +
          "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                \n" +
          "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');              \n" +
          "  \n" +
          "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                     \n" +
          "			END IF;                 \n" +
          "			PREPARE stmt FROM @SQLStatement;                \n" +
          "			EXECUTE stmt;	                \n" +
          "  \n" +
          "  \n" +
          "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                \n" +
          "			PREPARE query1 FROM @SQLStatement1;                \n" +
          "			EXECUTE query1;                \n" +
          "			DEALLOCATE PREPARE query1;                \n" +
          "  \n" +
          "  \n" +
          "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
          "			PREPARE query2 FROM @SQLStatement2;                \n" +
          "			EXECUTE query2;                \n" +
          "			DEALLOCATE PREPARE query2;                \n" +
          "  \n" +
          "			SET @SQLStatement3 = CONCAT(\" SELECT distinct ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                \n" +
          "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID    \n" +
          "			   WHERE  ra.rfqAssyID=\",rfqAssyID);                \n" +
          "			PREPARE query3 FROM @SQLStatement3;                \n" +
          "			EXECUTE query3;                \n" +
          "			DEALLOCATE PREPARE query3;                \n" +
          "  \n" +
          "  			SET @SQLStatement4 = CONCAT(\"        \n" +
          "				SELECT requestQty,         \n" +
          "					finalPrice,         \n" +
          "					unitPrice,        \n" +
          "					supplier,         \n" +
          "					selectedMpn,         \n" +
          "					selectionMode,        \n" +
          "					selectedPIDCode,      \n" +
          "					qtyID,         \n" +
          "					consolidateID,   \n" +
          "					currentStock,  \n" +
          "					leadTime,   \n" +
          "					supplierStock,  \n" +
          "					grossStock,           \n" +
          "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus        \n" +
          "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq             \n" +
          "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID         \n" +
          "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                \n" +
          "			PREPARE query4 FROM @SQLStatement4;                \n" +
          "			EXECUTE query4;                \n" +
          "			DEALLOCATE PREPARE query4;                \n" +
          "  \n" +
          "			DROP TEMPORARY TABLE consolidatetemp;                  \n" +
          "    END;  \n" +
            /* **************************** Add Script Version -> 13-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQExcessMaterialLineItems` ;  \n" +
              "CREATE PROCEDURE `Sproc_GetRFQExcessMaterialLineItems`(                \n" +
              "	IN ppageIndex INT(11),                \n" +
              "	IN precordPerPage INT(11),                \n" +
              "	IN pOrderBy VARCHAR(255),                \n" +
              "	IN pWhereClause VARCHAR(21844),                \n" +
              "	IN rfqAssyID INT(11),                \n" +
              "	IN puserID INT (11)          \n" +
              "    )  \n" +
              "BEGIN                \n" +
              "  \n" +
              "	    DECLARE pOffset INT(11);                \n" +
              "	    DECLARE rowNumWhere VARCHAR(255) ;            \n" +
              "	    SET @SQLString = NULL;           \n" +
              "	    SET @HavingClause = NULL;           \n" +
              "	    SET SESSION group_concat_max_len = 150000;            \n" +
              "	    IF (pOrderBy IS NOT NULL) THEN                \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
              "		ELSE                \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` asc\") ;                 \n" +
              "		END IF;	                \n" +
              "  \n" +
              "  \n" +
              "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                \n" +
              "			SET pWhereClause = '1=1' ;                \n" +
              "		END IF;	                \n" +
              "  \n" +
              "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
              "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
              "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
              "		ELSE	                \n" +
              "			SET rowNumWhere = '';                \n" +
              "		END IF;	                \n" +
              "		SELECT                \n" +
              "                      GROUP_CONCAT(DISTINCT                \n" +
              "				CONCAT(                \n" +
              "					'Max((IF(ra.requestQty = ''',                \n" +
              "						ra.requestQty,                \n" +
              "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),           \n" +
              "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),           \n" +
              "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) AS ''',                \n" +
              "						ra.requestQty,''''                \n" +
              "					)                \n" +
              "					),          \n" +
              "  \n" +
              "                      GROUP_CONCAT(DISTINCT                \n" +
              "				CONCAT(                \n" +
              "					'Max((IF(ra.requestQty = ''',                \n" +
              "						ra.requestQty,                \n" +
              "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),           \n" +
              "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),           \n" +
              "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) > 0'                   \n" +
              "					) SEPARATOR ' OR '               \n" +
              "					)          \n" +
              "				INTO @SQLString, @HavingClause           \n" +
              "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                \n" +
              "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                \n" +
              "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                \n" +
              "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;              \n" +
              "			IF(@SQLString IS NOT NULL) THEN                \n" +
              "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                \n" +
              "					SELECT                 \n" +
              "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                  \n" +
              "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,                \n" +
              "					(SELECT GROUP_CONCAT(rla.PIDCode)AS mfgPn                 \n" +
              "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                 \n" +
              "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                \n" +
              "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                \n" +
              "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                \n" +
              "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');              \n" +
              "  \n" +
              "				SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                \n" +
              "			END IF;            \n" +
              "			PREPARE stmt FROM @SQLStatement;                \n" +
              "			EXECUTE stmt;	                \n" +
              "  \n" +
              "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                \n" +
              "			PREPARE query1 FROM @SQLStatement1;                \n" +
              "			EXECUTE query1;                \n" +
              "			DEALLOCATE PREPARE query1;                \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
              "			PREPARE query2 FROM @SQLStatement2;                \n" +
              "			EXECUTE query2;                \n" +
              "			DEALLOCATE PREPARE query2;                \n" +
              "  \n" +
              "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                \n" +
              "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                \n" +
              "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                \n" +
              "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                \n" +
              "			PREPARE query3 FROM @SQLStatement3;                \n" +
              "			EXECUTE query3;                \n" +
              "			DEALLOCATE PREPARE query3;                \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement4 = CONCAT(\"SELECT requestQty, finalPrice, unitPrice,supplier, selectedMpn, selectionMode,qtyID,    \n" +
              "					selectedPIDCode,      \n" +
              "					min, mult,    \n" +
              "					currentStock,    \n" +
              "					leadTime,     \n" +
              "					supplierStock,    \n" +
              "					grossStock,        \n" +
              "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus,    \n" +
              "					selectedPIDCode,   \n" +
              "					consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq             \n" +
              "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID WHERE consolidateID IN (select id from consolidatetemp)\");                \n" +
              "			PREPARE query4 FROM @SQLStatement4;                \n" +
              "			EXECUTE query4;                \n" +
              "			DEALLOCATE PREPARE query4;                \n" +
              "  \n" +
              "  \n" +
              "			DROP TEMPORARY TABLE consolidatetemp;                  \n" +
              "    END;  \n" +
            /* **************************** Add Script Version -> 13-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (88,'1.00','V1',' Alter Sproc_GetRFQConsolidateRfqLineItem - Vaibhav '," + userid + ");"
            );
            break;
        case 88:
            allDbChangesArray.push(
            /* **************************** New Script -> 13-08-2018  *********************************** */
            "DROP FUNCTION IF EXISTS `fun_getconsolidatedlineitems`;  \n" +
            "CREATE FUNCTION `fun_getconsolidatedlineitems`(  \n" +
            "	consolidtedID int(11),  \n" +
            "    poldRFQAssyID int(11),  \n" +
            "    pnewRFQAssyID int(11)  \n" +
            ") RETURNS text  \n" +
            "BEGIN  \n" +
            "DECLARE list1 varchar(1000);  \n" +
            "DECLARE plineID varchar(1000);  \n" +
            "DECLARE list2 varchar(1000);  \n" +
            "select consolidatedLineItemIDs,lineID INTO list1,plineID from rfq_consolidated_mfgpn_lineitem where rfqAssyID = poldRFQAssyID and id = consolidtedID and isDeleted = 0;  \n" +
            "  \n" +
            " select group_concat(id) INTO list2 from rfq_lineitems where rfqAssyID = pnewRFQAssyID and isDeleted = 0 and lineID in(  \n" +
            " select lineID from rfq_lineitems where rfqAssyID = poldRFQAssyID and isDeleted = 0 and concat(',',list1,',') like concat('%,',id,',%')  \n" +
            ") ;  \n" +
            "#select group_concat(lineID) into list3 from rfq_lineitems where rfqAssyID = poldRFQAssyID and isDeleted = 0 and concat(',',list1,',') like concat('%,',id,',%');  \n" +
            " return list2;  \n" +
            "END ;  \n" +
            /* **************************** Add Script Version -> 13-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (89,'1.00','V1','get consolidated lineitems - shirish '," + userid + ");"
            );
            break;
        case 89:
            allDbChangesArray.push(
            /* **************************** New Script -> 14-08-2018  *********************************** */
          "INSERT INTO systemconfigrations(`key`,`values`,clusterName,isEncrypted,isActive,isDeleted,createdBy,isEditable)  \n" +
          "VALUES ('PIDCodeLength','30','Component',0,1,0,'1',1);  \n" +
            /* **************************** Add Script Version -> 14-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (90,'1.00','V1','Added system configuration parameter for PIDCodeLength - Champak '," + userid + ");"
            );
            break;
        case 90:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 14-08-2018 *********************************** */
                "INSERT INTO `page_detail`  \n" +
                "            (`pageName`,  \n" +
                "             `RO`,  \n" +
                "             `RW`,  \n" +
                "             `menuRoute`,  \n" +
                "             `pageRoute`,  \n" +
                "             `pageURL`,  \n" +
                "             `menuName`,  \n" +
                "             `parentPageRoute`,  \n" +
                "             `parentPageID`,  \n" +
                "             `hasChild`,  \n" +
                "             `orderBy`,  \n" +
                "             `tabLevel`,  \n" +
                "             `iconClass`,  \n" +
                "             `isActive`,  \n" +
                "             `createdAt`,  \n" +
                "             `updatedAt`,  \n" +
                "             `deletedAt`,  \n" +
                "             `createdBy`,  \n" +
                "             `updatedBy`,  \n" +
                "             `deletedBy`,  \n" +
                "             `isDeleted`,  \n" +
                "             `parentTabID`)  \n" +
                "VALUES ('Quote Dynamic Fields1',  \n" +
                "        '0',  \n" +
                "        '0',  \n" +
                "        'admin.rfqsetting.quotedynamicfields',  \n" +
                "        'app.quotedynamicfields',  \n" +
                "        'rfqsetting/quotedynamicfields',  \n" +
                "        'Quote Dynamic Fields',  \n" +
                "        'NULL',  \n" +
                "        (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'RFQ Setting'),  \n" +
                "        '0',  \n" +
                "        '8',  \n" +
                "        '2',  \n" +
                "        'mdi mdi-teach',  \n" +
                "        '1',  \n" +
                "        '2018-08-13 12:23:55',  \n" +
                "         NULL,  \n" +
                "         NULL,  \n" +
                "        '1',  \n" +
                "         NULL,  \n" +
                "         NULL,  \n" +
                "        '0',  \n" +
                "         NULL);  \n" +
                /********************** New Script -> 14-08-2018 *********************************/
                "DROP TABLE IF EXISTS `quotecharges_dynamic_fields_mst`;  \n" +
                "  \n" +
                "  \n" +
                "CREATE TABLE `quotecharges_dynamic_fields_mst` (  \n" +
                "  `id` INT(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `fieldName` VARCHAR(100) NOT NULL,  \n" +
                "  `dataType` INT(11) DEFAULT NULL,  \n" +
                "  `costingType` VARCHAR(50) NOT NULL,  \n" +
                "  `displayPercentage` TINYINT(1) NOT NULL,  \n" +
                "  `displayMargin` TINYINT(1) NOT NULL,  \n" +
                "  `createdAt` DATETIME NOT NULL,  \n" +
                "  `updatedAt` DATETIME DEFAULT NULL,  \n" +
                "  `deletedAt` DATETIME DEFAULT NULL,  \n" +
                "  `createdBy` VARCHAR(255) NOT NULL,  \n" +
                "  `updatedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "  `deletedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "  `isDeleted` TINYINT(1) DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`)  \n" +
                ") ENGINE=INNODB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;  \n" +
                /************************ New Script -> 14-08-2018 ********************************/
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveQuoteDynamicFields` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveQuoteDynamicFields`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(21844)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
                "		 SELECT qc.id, qc.fieldName, qc.dataType, qc.costingType, qc.displayPercentage, qc.displayMargin, qc.isDeleted, qc.createdBy, qc.updatedBy,qc.deletedBy, qc.createdAt, qc.updatedAt,qc.deletedAt,  \n" +
                "		 (CASE WHEN (qc.displayPercentage = 0) THEN 'No'   \n" +
                "				WHEN (qc.displayPercentage = 1) THEN 'Yes' ELSE '' END) AS `displayPercentageConvertedValue`,  \n" +
                "		(CASE WHEN (qc.displayMargin = 0) THEN 'No'   \n" +
                "				WHEN (qc.displayMargin = 1) THEN 'Yes' ELSE '' END) AS `displayMarginConvertedValue`  \n" +
                "		FROM `quotecharges_dynamic_fields_mst` AS qc   \n" +
                "		WHERE qc.`deletedAt` IS NULL  \n" +
                "		;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"fieldName ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE Results;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 14-08-2018 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(              \n" +
                "	IN tableName VARCHAR(255),              \n" +
                "	IN IDs LONGTEXT,              \n" +
                "	IN deletedBy INT,              \n" +
                "	IN entityID VARCHAR(255),              \n" +
                "	IN refrenceIDs LONGTEXT              \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "	DECLARE vWoID1 INT(11);              \n" +
                "	DECLARE vOpID1 INT(11);              \n" +
                "	DECLARE vSerialNo1 VARCHAR(50);              \n" +
                "	DECLARE vProdStatus1 VARCHAR(5);              \n" +
                "	DECLARE vWoTransID1 INT(11);              \n" +
                "	DECLARE vQty1 INT(11);              \n" +
                "	DECLARE vOpID2 INT(11);              \n" +
                "	DECLARE vProdstatus2 VARCHAR(5);              \n" +
                "  \n" +
                "IF tableName='employees' THEN              \n" +
                " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)              \n" +
                "	   UNION ALL                                    \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)              \n" +
                "           UNION ALL               \n" +
                "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND er.finalStatusInit IN(',IDs,') AND er.initiateBy IN(',IDs,') LIMIT 1)              \n" +
                "	   UNION ALL              \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)              \n" +
                "	UNION ALL              \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)              \n" +
                "	  UNION ALL              \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)              \n" +
                "	  UNION ALL              \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)              \n" +
                "	  UNION ALL              \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)              \n" +
                "	  UNION ALL              \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)              \n" +
                "	 UNION ALL              \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)              \n" +
                "	  UNION ALL              \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND wr.reqGenEmployeeID IN(',IDs,') and wr.woAuthorID IN(',IDs,') and wr.accRejBy IN(',IDs,') LIMIT 1)              \n" +
                "	  UNION ALL               \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND wr.commentemployeeID IN(',IDs,') AND wr.accRejBy IN(',IDs,') LIMIT 1)              \n" +
                "	  UNION ALL              \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND wr.employeeID IN(',IDs,') AND wr.requstedEmployeeID IN(',IDs,') LIMIT 1)               \n" +
                "	  UNION ALL                  \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE wt.checkinEmployeeID IN(',IDs,') AND wt.checkoutEmployeeID IN(',IDs,') LIMIT 1)              \n" +
                "	  UNION ALL                 \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)              \n" +
                "	 UNION ALL               \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)              \n" +
                "	 UNION ALL               \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)              \n" +
                "	 UNION ALL               \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND wthu.holdEmployeeId IN(',IDs,') and wthu.unHoldEmployeeId IN(',IDs,') LIMIT 1)              \n" +
                "	UNION ALL               \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)              \n" +
                "	 UNION ALL               \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)              \n" +
                "	 UNION ALL               \n" +
                "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)              \n" +
                "	 UNION ALL               \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND holdEmployeeId IN(',IDs,') AND unHoldEmployeeId IN(',IDs,')LIMIT 1)              \n" +
                "  \n" +
                "        ) q');              \n" +
                "    PREPARE stmt FROM @SQL;              \n" +
                "    EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempEmp)=0 THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');              \n" +
                "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');              \n" +
                "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');              \n" +
                "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');              \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			PREPARE stmt2 FROM @SQL2;              \n" +
                "			PREPARE stmt3 FROM @SQL3;              \n" +
                "			PREPARE stmt4 FROM @SQL4;              \n" +
                "			EXECUTE stmt1;              \n" +
                "			EXECUTE stmt2;              \n" +
                "			EXECUTE stmt3;              \n" +
                "			EXECUTE stmt4;              \n" +
                "			SELECT               \n" +
                "    *              \n" +
                "FROM              \n" +
                "    tempEmp;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempEmp;              \n" +
                "		END IF;              \n" +
                "  \n" +
                "    DROP TABLE tempEmp;              \n" +
                "END IF;              \n" +
                "IF tableName='eco_type_category' THEN              \n" +
                "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)               \n" +
                "	  ) q');              \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT               \n" +
                "    *              \n" +
                "FROM              \n" +
                "    tempEcoTypeCategory;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempEcoTypeCategory;              \n" +
                "		END IF;              \n" +
                "    DROP TABLE tempEcoTypeCategory;                \n" +
                "END IF;              \n" +
                "IF tableName='eco_type_values' THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)              \n" +
                "	  ) q');              \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT               \n" +
                "    *              \n" +
                "FROM              \n" +
                "    tempEcoTypeValues;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempEcoTypeValues;              \n" +
                "		END IF;              \n" +
                "    DROP TABLE tempEcoTypeValues;                \n" +
                "END IF;              \n" +
                "IF tableName='customers' THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL               \n" +
                "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL               \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)              \n" +
                "	  ) q');              \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		              \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');              \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			PREPARE stmt2 FROM @SQL2;              \n" +
                "			PREPARE stmt3 FROM @SQL3;              \n" +
                "			EXECUTE stmt1;              \n" +
                "			EXECUTE stmt2;              \n" +
                "			EXECUTE stmt3;              \n" +
                "  \n" +
                "			SELECT               \n" +
                "    *              \n" +
                "FROM              \n" +
                "    tempCustomers;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempCustomers;              \n" +
                "		END IF;              \n" +
                "    DROP TABLE tempCustomers;                \n" +
                "END IF;              \n" +
                "IF tableName='certificate_standards' THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)              \n" +
                "  \n" +
                "	  ) q');              \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		              \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');              \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			PREPARE stmt2 FROM @SQL2;              \n" +
                "			PREPARE stmt3 FROM @SQL3;              \n" +
                "			EXECUTE stmt1;              \n" +
                "			EXECUTE stmt2;              \n" +
                "			EXECUTE stmt3;              \n" +
                "  \n" +
                "			SELECT * FROM tempCertificateStandards;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempCertificateStandards;              \n" +
                "		END IF;              \n" +
                "    DROP TABLE tempCertificateStandards;                \n" +
                "END IF;              \n" +
                "IF tableName='department' THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)              \n" +
                "  \n" +
                "	  ) q');              \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		              \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');              \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			PREPARE stmt2 FROM @SQL2;              \n" +
                "			PREPARE stmt3 FROM @SQL3;              \n" +
                "			EXECUTE stmt1;              \n" +
                "			EXECUTE stmt2;              \n" +
                "			EXECUTE stmt3;              \n" +
                "  \n" +
                "			SELECT * FROM tempDepartment;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempDepartment;              \n" +
                "		END IF;              \n" +
                "    DROP TABLE tempDepartment;                \n" +
                "END IF;              \n" +
                "IF tableName='genericcategory' THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND eqpGroupID IN(',IDs,') AND eqpSubGroupID IN(',IDs,') AND eqpTypeID IN(',IDs,') AND eqpPossessionID IN(',IDs,') AND eqpOwnershipTypeID IN(',IDs,') AND locationTypeID IN(',IDs,')   LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)              \n" +
                "	     UNION ALL            \n" +
                "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)              \n" +
                "	  ) q');              \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT               \n" +
                "    *              \n" +
                "FROM              \n" +
                "    tempGenericCategory;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempGenericCategory;              \n" +
                "		END IF;              \n" +
                "    DROP TABLE tempGenericCategory;                \n" +
                "END IF;              \n" +
                "IF tableName='equipment' THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)              \n" +
                "  \n" +
                "	  ) q');              \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN              \n" +
                "			IF entityID IS NOT NULL THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		              \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');              \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			PREPARE stmt2 FROM @SQL2;              \n" +
                "			PREPARE stmt3 FROM @SQL3;              \n" +
                "			EXECUTE stmt1;              \n" +
                "			EXECUTE stmt2;              \n" +
                "			EXECUTE stmt3;              \n" +
                "  \n" +
                "			ELSE              \n" +
                "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "			END IF;              \n" +
                "  \n" +
                "			SELECT * FROM tempEquipment;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempEquipment;              \n" +
                "		END IF;              \n" +
                "    DROP TABLE tempEquipment;                \n" +
                "END IF;              \n" +
                "IF tableName='parts' THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)              \n" +
                "	  ) q');              \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempParts)=0 THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempParts;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempParts;              \n" +
                "		END IF;              \n" +
                "    DROP TABLE tempParts;                \n" +
                "END IF;              \n" +
                "IF tableName='master_templates' THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)              \n" +
                "	  ) q');              \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempMasterTemplate;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempMasterTemplate;              \n" +
                "		END IF;              \n" +
                "    DROP TABLE tempMasterTemplate;                \n" +
                "END IF;              \n" +
                "IF tableName='operations' THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)              \n" +
                "  \n" +
                "	  ) q');              \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempOperations)=0 THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		              \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');              \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			PREPARE stmt2 FROM @SQL2;              \n" +
                "			PREPARE stmt3 FROM @SQL3;              \n" +
                "			EXECUTE stmt1;              \n" +
                "			EXECUTE stmt2;              \n" +
                "			EXECUTE stmt3;              \n" +
                "  \n" +
                "			SELECT * FROM tempOperations;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempOperations;              \n" +
                "		END IF;              \n" +
                "    DROP TABLE tempOperations;                \n" +
                "END IF;              \n" +
                "IF tableName='workorder' THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL		              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)              \n" +
                "  \n" +
                "	  ) q');              \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN              \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete work order */              \n" +
                "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;               \n" +
                "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");              \n" +
                "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			              \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			              \n" +
                "			/* [E] - Add Time line log for delete work order */			              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update workorder set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		              \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');              \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');              \n" +
                "			SET @SQl4 = CONCAT('update workorder_certification set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			PREPARE stmt2 FROM @SQL2;              \n" +
                "			PREPARE stmt3 FROM @SQL3;              \n" +
                "			PREPARE stmt4 FROM @SQL4;              \n" +
                "			EXECUTE stmt1;              \n" +
                "			EXECUTE stmt2;              \n" +
                "			EXECUTE stmt3;              \n" +
                "			EXECUTE stmt4;              \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorder;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempWorkorder;              \n" +
                "		END IF;              \n" +
                "    DROP TABLE tempWorkorder;                \n" +
                "END IF;              \n" +
                "IF tableName='roles' THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)              \n" +
                "         UNION ALL              \n" +
                "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)              \n" +
                "         UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');              \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempRoles)=0 THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempRoles;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempRoles;              \n" +
                "		END IF;              \n" +
                "    DROP TABLE tempRoles;                \n" +
                "END IF;              \n" +
                "IF tableName='standard_class' THEN              \n" +
                " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND classIDs IN(',IDs,') LIMIT 1)              \n" +
                "	  ) q');              \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempStandardClass;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempStandardClass;              \n" +
                "		END IF;              \n" +
                "    DROP TABLE tempStandardClass;                \n" +
                "END IF;              \n" +
                "IF tableName='dataelement' THEN              \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		              \n" +
                "		UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)              \n" +
                "	  ) q');              \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt2 FROM @SQL2;              \n" +
                "			EXECUTE stmt2;              \n" +
                "  \n" +
                "  \n" +
                "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)              \n" +
                "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated              \n" +
                "			FROM dataelement dl WHERE dl.dataElementID = IDs;              \n" +
                "  \n" +
                "  \n" +
                "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */              \n" +
                "  \n" +
                "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"               \n" +
                "							where type IN(''',IDs,''') and deletedAt IS NULL ');		              \n" +
                "				PREPARE stmt3 FROM @SQL3;              \n" +
                "				EXECUTE stmt3;              \n" +
                "  \n" +
                "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */              \n" +
                "  \n" +
                "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */              \n" +
                "  \n" +
                "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs               \n" +
                "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN              \n" +
                "  \n" +
                "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"               \n" +
                "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'               \n" +
                "								AND isAutoIncrement = 1 AND deletedAt IS NULL)              \n" +
                "							 and deletedAt IS NULL ');		              \n" +
                "					     PREPARE stmt4 FROM @SQL4;              \n" +
                "				             EXECUTE stmt4;              \n" +
                "					END IF;	              \n" +
                "				END IF;              \n" +
                "  \n" +
                "  \n" +
                "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN              \n" +
                "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)               \n" +
                "						    AND deletedAt IS NULL');		              \n" +
                "				PREPARE stmt5 FROM @SQL5;              \n" +
                "				EXECUTE stmt5;              \n" +
                "  \n" +
                "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"               \n" +
                "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		              \n" +
                "				PREPARE stmt6 FROM @SQL6;              \n" +
                "				EXECUTE stmt6;              \n" +
                "  \n" +
                "  \n" +
                "			END IF;              \n" +
                "  \n" +
                "  \n" +
                "			SELECT * FROM tempDataElement;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempDataElement;              \n" +
                "		END IF;              \n" +
                "    DROP TABLE tempDataElement;                \n" +
                "  \n" +
                "END IF;              \n" +
                "IF tableName='workorder_preprogcomp' THEN              \n" +
                "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM              \n" +
                "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg              \n" +
                "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND              \n" +
                "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator              \n" +
                "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "    SELECT * FROM  tempComponent;              \n" +
                "    SELECT TotalCount FROM  tempComponent;              \n" +
                "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			              \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete pre program component */        \n" +
                "			SELECT partNumber,(SELECT woNumber FROM workorder WHERE woID = woppc.woID),      \n" +
                "				(SELECT opName FROM workorder_operation WHERE woOPID = refStkWOOPID)      \n" +
                "			    INTO @lvPartNumber,@lvWoNumber,@lvOpName      \n" +
                "			FROM workorder_preprogcomp woppc        \n" +
                "			WHERE woPreProgCompID = IDs  AND deletedAt IS NULL;         \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Preprogram component deleted from work order\");        \n" +
                "			SET @lvEventDescription = CONCAT(\"Preprogram component \\\"\",@lvPartNumber,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	        \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.14,NULL,deletedBy,3);  /* 3 = DELETE */        \n" +
                "			/* [E] - Add Time line log for delete pre program component */       \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt2 FROM @SQL2;              \n" +
                "			EXECUTE stmt2;              \n" +
                "  \n" +
                "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where               \n" +
                "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator              \n" +
                "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		              \n" +
                "			PREPARE stmt3 FROM @SQL3;              \n" +
                "			EXECUTE stmt3;              \n" +
                "		SELECT               \n" +
                "			*              \n" +
                "		FROM              \n" +
                "			tempComponent;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempComponent;              \n" +
                "		END IF;              \n" +
                "    DROP TABLE tempComponent;                \n" +
                "END IF;              \n" +
                "IF tableName='component' THEN              \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)              \n" +
                "		 UNION ALL              \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)              \n" +
                "  \n" +
                "	  ) q');              \n" +
                "	  PREPARE stmt FROM @SQL;              \n" +
                "	   EXECUTE stmt;              \n" +
                "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN              \n" +
                "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempComponent;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempComponent;              \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempComponent;               \n" +
                "END IF;              \n" +
                "IF tableName=\"workorder_cluster\" THEN               \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)              \n" +
                "		      ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN              \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete cluster */              \n" +
                "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster              \n" +
                "		WHERE clusterID = IDs AND deletedAt IS NULL;              \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder              \n" +
                "		WHERE woID = @lvWoID AND deletedAt IS NULL ;              \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");              \n" +
                "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	              \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		              \n" +
                "		/* [E] - Add Time line log for delete cluster */              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderCluster;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempWorkorderCluster;              \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempWorkorderCluster;               \n" +
                "END IF;              \n" +
                "IF tableName=\"workorder_operation\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)              \n" +
                "			 UNION ALL              \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		               \n" +
                "		      ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN              \n" +
                "			 /* [S] - Add Time line log for delete work order operation */              \n" +
                "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName              \n" +
                "			FROM workorder_operation               \n" +
                "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;               \n" +
                "  \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;              \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");              \n" +
                "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	              \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		              \n" +
                "			/* [E] - Add Time line log for delete work order operation */              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');              \n" +
                "		SET @SQl2 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');              \n" +
                "		SET @SQl3 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');              \n" +
                "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');              \n" +
                "		SET @SQl5 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');              \n" +
                "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');              \n" +
                "		SET @SQl7 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		              \n" +
                "  \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation              \n" +
                "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;              \n" +
                "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		              \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation              \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			PREPARE stmt2 FROM @SQL2;              \n" +
                "			PREPARE stmt3 FROM @SQL3;              \n" +
                "			PREPARE stmt4 FROM @SQL4;              \n" +
                "			PREPARE stmt5 FROM @SQL5;              \n" +
                "			PREPARE stmt6 FROM @SQL6;              \n" +
                "			PREPARE stmt7 FROM @SQl7;              \n" +
                "			PREPARE stmt8 FROM @SQl7;              \n" +
                "			EXECUTE stmt1;              \n" +
                "			EXECUTE stmt2;              \n" +
                "			EXECUTE stmt3;              \n" +
                "			EXECUTE stmt4;              \n" +
                "			EXECUTE stmt5;              \n" +
                "			EXECUTE stmt6;              \n" +
                "			EXECUTE stmt7;              \n" +
                "			EXECUTE stmt8;              \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderOperation;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempWorkorderOperation;              \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempWorkorderOperation;               \n" +
                "END IF;              \n" +
                "IF tableName=\"workorder_operation_part\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)              \n" +
                "		      ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN              \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete parts from work order */              \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName              \n" +
                "		FROM workorder_operation               \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;               \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;              \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts              \n" +
                "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;               \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");              \n" +
                "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	              \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */              \n" +
                "		/* [E] - Add Time line log for delete parts from work order */              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderPart;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempWorkorderPart;              \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempWorkorderPart;               \n" +
                "END IF;              \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)              \n" +
                "		      ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN              \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete Equipment from work order */              \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName              \n" +
                "		FROM workorder_operation               \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;               \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	              \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment              \n" +
                "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;               \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");              \n" +
                "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	              \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		              \n" +
                "		/* [E] -  Add Time line log for delete Equipment from work order */              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');              \n" +
                "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			PREPARE stmt2 FROM @SQL2;              \n" +
                "			EXECUTE stmt1;              \n" +
                "			EXECUTE stmt2;              \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderEquipment;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempWorkorderEquipment;              \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempWorkorderEquipment;               \n" +
                "END IF;              \n" +
                "IF tableName=\"workorder_operation_employee\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)              \n" +
                "		      ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN              \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete Employees from work order */              \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName              \n" +
                "		FROM workorder_operation               \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;               \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;              \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees              \n" +
                "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;               \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");              \n" +
                "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	              \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		              \n" +
                "		/* [E] -  Add Time line log for delete Employee from work order */              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderEmployee;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempWorkorderEmployee;              \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempWorkorderEmployee;              \n" +
                "  \n" +
                "END IF;              \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)              \n" +
                "		      ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN              \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete operations from cluster */              \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName              \n" +
                "		FROM workorder_operation               \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;               \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;              \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster              \n" +
                "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;               \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");              \n" +
                "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	              \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		              \n" +
                "		/* [E] -  Add Time line log for delete operations from cluster */		              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		              \n" +
                "  \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation              \n" +
                "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;              \n" +
                "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		              \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation              \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			PREPARE stmt2 FROM @SQL2;              \n" +
                "			EXECUTE stmt1;              \n" +
                "			EXECUTE stmt2;              \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderOperationCluster;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempWorkorderOperationCluster;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempWorkorderOperationCluster;               \n" +
                "END IF;              \n" +
                "IF tableName=\"entity\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)              \n" +
                "		     UNION ALL              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)              \n" +
                "		     UNION ALL              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)              \n" +
                "		    UNION ALL              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)              \n" +
                "		      ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempEntity)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempEntity;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempEntity;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempEntity;               \n" +
                "END IF;              \n" +
                "IF tableName=\"salesordermst\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)              \n" +
                "		      ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete sales order mst */ 	      \n" +
                "			SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber      \n" +
                "			FROM salesordermst      \n" +
                "			WHERE FIND_IN_SET(id,IDs);      \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");        \n" +
                "			SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	        \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */        \n" +
                "			/* [E] - Add Time line log for delete sales order mst */	      \n" +
                "  \n" +
                "			SELECT * FROM tempSalesOrderMst;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempSalesOrderMst;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempSalesOrderMst;               \n" +
                "END IF;              \n" +
                "IF tableName=\"mfgcodemst\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)              \n" +
                "		      ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempMFGCodeMst;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempMFGCodeMst;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempMFGCodeMst;               \n" +
                "END IF;              \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"               \n" +
                "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)              \n" +
                "				and deletedAt IS NULL');		              \n" +
                "			PREPARE stmt2 FROM @SQL2;              \n" +
                "			EXECUTE stmt2;              \n" +
                "  \n" +
                "  \n" +
                "END IF;              \n" +
                "IF tableName=\"shippedassembly\" THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;      \n" +
                "			/* [S] - Add Time line log for delete shipped assembly */       \n" +
                "			SELECT GROUP_CONCAT(shippedqty) , workorderID  INTO @lvShippedqty,@lvWoID      \n" +
                "			FROM shippedassembly      \n" +
                "			WHERE FIND_IN_SET(id,IDs);      \n" +
                "  \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID ;      \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Shipped assembly deleted\");        \n" +
                "			SET @lvEventDescription = CONCAT(\"Shipped assembly for workorder \\\"\",@lvWoNumber,\"\\\" & quantity \\\"\",@lvShippedqty ,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	        \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,9,NULL,deletedBy,3);  /* 3 = DELETE */        \n" +
                "			/* [E] - Add Time line log for delete shipped assembly */ 		      \n" +
                "  \n" +
                "END IF;              \n" +
                "IF tableName=\"assemblymst\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)              \n" +
                "		     UNION ALL              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)              \n" +
                "		     UNION ALL              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)              \n" +
                "		     UNION ALL              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)              \n" +
                "		    UNION ALL              \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)              \n" +
                "		      ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempassemblymst;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempassemblymst;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempassemblymst;               \n" +
                "END IF;              \n" +
                "IF tableName=\"assembly_revisionmst\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND fromRevisionID IN(',IDs,') AND toRevisionID IN(',IDs,')  LIMIT 1)              \n" +
                "		     UNION ALL              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)              \n" +
                "		     UNION ALL              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)              \n" +
                "		     UNION ALL              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)              \n" +
                "		    UNION ALL              \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)              \n" +
                "		      ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempassembly_revisionmst;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempassembly_revisionmst;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempassembly_revisionmst;               \n" +
                "END IF;              \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN              \n" +
                "  \n" +
                "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1               \n" +
                "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;              \n" +
                "  \n" +
                "  \n" +
                "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)              \n" +
                "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)               \n" +
                "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1               \n" +
                "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;              \n" +
                "  \n" +
                "	/* condition to check total serials of type greater than actual production qty */              \n" +
                "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1              \n" +
                "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)               \n" +
                "		> IFNULL(vQty1,0)) THEN              \n" +
                "  \n" +
                "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */              \n" +
                "		IF(vQty1 IS NULL OR vQty1 = 0) THEN               \n" +
                "  \n" +
                "			/* condition to check curr opis and status match with given delete serial */              \n" +
                "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1              \n" +
                "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN              \n" +
                "  \n" +
                "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()              \n" +
                "				WHERE woTransSerialID = IDs;	              \n" +
                "  \n" +
                "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno               \n" +
                "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL              \n" +
                "				ORDER BY woTransSerialID DESC LIMIT 1;              \n" +
                "  \n" +
                "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2              \n" +
                "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	        \n" +
                "				/* [S] - Add Time line log for delete production serial from work order operation */ 	      \n" +
                "				SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");        \n" +
                "				SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	        \n" +
                "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */        \n" +
                "				/* [E] - Add Time line log for delete production serial from work order operation */ 				      \n" +
                "  \n" +
                "			ELSE               \n" +
                "				SELECT 'not allowed';              \n" +
                "			END IF;              \n" +
                "  \n" +
                "  \n" +
                "		ELSE               \n" +
                "  \n" +
                "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()              \n" +
                "			WHERE woTransSerialID = IDs;	              \n" +
                "  \n" +
                "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno               \n" +
                "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL              \n" +
                "			ORDER BY woTransSerialID DESC LIMIT 1;              \n" +
                "  \n" +
                "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2              \n" +
                "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;      \n" +
                "			/* [S] - Add Time line log for delete production serial from work order operation */ 	      \n" +
                "			SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");        \n" +
                "			SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	        \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */        \n" +
                "			/* [E] - Add Time line log for delete production serial from work order operation */          \n" +
                "  \n" +
                "		END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	ELSE               \n" +
                "		SELECT 'not allowed';		              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "END IF;              \n" +
                "IF tableName=\"br_label_template\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)              \n" +
                "		      ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempbr_label_template;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempbr_label_template;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempbr_label_template;               \n" +
                "END IF;              \n" +
                "IF tableName=\"measurement_types\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)              \n" +
                "		     UNION ALL              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempMeasurement_types;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempMeasurement_types;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempMeasurement_types;               \n" +
                "END IF;              \n" +
                "IF tableName=\"uoms\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg               \n" +
                "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)              \n" +
                "            UNION ALL              \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg               \n" +
                "            FROM unit_detail_formula WHERE deletedAt IS NULL AND unitID IN (',IDs,')  or toUnitID IN (',IDs,')  LIMIT 1)      \n" +
                "              UNION ALL            \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND uom IN(',IDs,') LIMIT 1)) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempUOMs;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempUOMs;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempUOMs;               \n" +
                "END IF;              \n" +
                "IF tableName=\"jobtypes\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg               \n" +
                "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempJobTypess;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempJobTypess;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempJobTypess;               \n" +
                "END IF;              \n" +
                "IF tableName=\"ordertype\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg               \n" +
                "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempOrderTypes;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempOrderTypes;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempOrderTypes;               \n" +
                "END IF;              \n" +
                "IF tableName=\"reasonmst\" THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "END IF;              \n" +
                "IF tableName='component_sid_stock' THEN	              \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)              \n" +
                "			UNION ALL              \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		                  \n" +
                "		    ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete component sid stock (receiving material) */ 	      \n" +
                "			SELECT GROUP_CONCAT(uid) INTO @lvUID  FROM component_sid_stock      \n" +
                "			WHERE FIND_IN_SET(id,IDs);	      \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Receiving material(s) deleted\");        \n" +
                "			SET @lvEventDescription = CONCAT(\"Receiving material(s) of UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	        \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7,NULL,deletedBy,3);  /* 3 = DELETE */        \n" +
                "			/* [E] - Add Time line log for delete component sid stock (receiving material) */ 	      \n" +
                "  \n" +
                "			SELECT * FROM tempcomponentsidstock;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempcomponentsidstock;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempcomponentsidstock;               \n" +
                "  \n" +
                "END IF;              \n" +
                "IF tableName='component_sid_stock_dataelement_values' THEN	              \n" +
                "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;          \n" +
                "			/* [S] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	      \n" +
                "			SELECT GROUP_CONCAT(dataelementid), GROUP_CONCAT(refsidid) INTO @lvCSDlIDs,@lvRefsidid         \n" +
                "			FROM component_sid_stock_dataelement_values      \n" +
                "			WHERE FIND_IN_SET(id,IDs);      \n" +
                "  \n" +
                "			SELECT uid INTO @lvUID FROM component_sid_stock WHERE id = @lvRefsidid   ;      \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(dataElementName) INTO @lvDlNames      \n" +
                "			FROM dataelement       \n" +
                "			WHERE FIND_IN_SET(dataElementID,@lvCSDlIDs);	      \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Data field(s) of receiving material deleted\");        \n" +
                "			SET @lvEventDescription = CONCAT(\"Data field(s) \\\"\",@lvDlNames,\"\\\" of receiving material with UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	        \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7.01,NULL,deletedBy,3);  /* 3 = DELETE */        \n" +
                "			/* [E] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	      \n" +
                "END IF;              \n" +
                "IF tableName='chart_templatemst' THEN	              \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)              \n" +
                "		    ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempcharttemplatemst;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempcharttemplatemst;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempcharttemplatemst;               \n" +
                "  \n" +
                "END IF;              \n" +
                "IF tableName=\"shipping_request\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg               \n" +
                "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)              \n" +
                "            UNION ALL              \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg               \n" +
                "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;        \n" +
                "			/* [S] - Add Time line log for delete shipment request */       \n" +
                "			SELECT GROUP_CONCAT(note) INTO @lvNotes FROM Shipping_Request      \n" +
                "			WHERE FIND_IN_SET(id,IDs);	      \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Shipment request deleted\");        \n" +
                "			SET @lvEventDescription = CONCAT(\"Shipment request of \\\"\",@lvNotes,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	        \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,8,NULL,deletedBy,3);  /* 3 = DELETE */        \n" +
                "			/* [E] - Add Time line log for delete shipment request */       \n" +
                "  \n" +
                "			SELECT * FROM tempShippingRequest;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempShippingRequest;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempShippingRequest;               \n" +
                "END IF;              \n" +
                "IF tableName=\"chart_rawdata_category\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg               \n" +
                "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)              \n" +
                "            UNION ALL              \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg               \n" +
                "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempChartRawdataCategory;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempChartRawdataCategory;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempChartRawdataCategory;               \n" +
                "END IF;              \n" +
                "IF tableName=\"component_standard\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg               \n" +
                "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempcomponentStandard;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempcomponentStandard;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempcomponentStandard;               \n" +
                "END IF;              \n" +
                "IF tableName=\"component_standard_class\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg               \n" +
                "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');              \n" +
                "           /*  UNION ALL              \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg               \n" +
                "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt2 FROM @SQL2;              \n" +
                "			EXECUTE stmt2;              \n" +
                "  \n" +
                "			SELECT * FROM tempcomponentStandardClass;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempcomponentStandardClass;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempcomponentStandardClass;               \n" +
                "END IF;              \n" +
                "IF tableName=\"rfq_lineitems\" THEN              \n" +
                "		SELECT 0 TotalCount, '' Message;              \n" +
                "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "		PREPARE stmt1 FROM @SQL1;              \n" +
                "		EXECUTE stmt1;                          \n" +
                "END IF;              \n" +
                "IF tableName=\"requirement\" THEN              \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg               \n" +
                "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM temprequirements)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM temprequirements;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM temprequirements;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE temprequirements;               \n" +
                "END IF;              \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN         \n" +
                "		/* [S] - Add Time line log for delete work order transaction packing details */        \n" +
                "		SELECT  (SELECT woNumber FROM workorder WHERE woID = wtpd.woID),      \n" +
                "			(SELECT opName FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL),      \n" +
                "			(SELECT woOPID FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL)      \n" +
                "			INTO @lvWoNumber , @lvOpName ,@lvWoOPID       \n" +
                "		FROM workorder_trans_packagingdetail wtpd       \n" +
                "		WHERE wtpd.woTransPackagingDetailID = IDs AND wtpd.deletedAt IS NULL  /* here ids multiple but need one record only so */;      \n" +
                "		SET @lvEventTitle = CONCAT(\"Box serial details deleted from work order operation\");        \n" +
                "		SET @lvEventDescription = CONCAT(\"Box serial details deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	        \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.17,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */        \n" +
                "		/* [E] - Add Time line log for delete work order transaction packing details */       \n" +
                "  \n" +
                "		SELECT 0 TotalCount, '' Message;              \n" +
                "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		              \n" +
                "		PREPARE stmt1 FROM @SQL1;              \n" +
                "		EXECUTE stmt1;                          \n" +
                "END IF;              \n" +
                "IF tableName=\"customer_addresses\" THEN              \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)              \n" +
                "			UNION ALL              \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg               \n" +
                "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM tempcustomer_addresses;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM tempcustomer_addresses;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE tempcustomer_addresses;               \n" +
                "END IF;              \n" +
                "IF tableName=\"rfqforms\" THEN              \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg               \n" +
                "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in               \n" +
                "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');              \n" +
                "  \n" +
                "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in               \n" +
                "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		              \n" +
                "  \n" +
                "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in               \n" +
                "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		              \n" +
                "  \n" +
                "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in               \n" +
                "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		              \n" +
                "  \n" +
                "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in               \n" +
                "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');              \n" +
                "  \n" +
                "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		              \n" +
                "  \n" +
                "            PREPARE stmt1 FROM @SQL1;              \n" +
                "			PREPARE stmt2 FROM @SQL2;              \n" +
                "            PREPARE stmt3 FROM @SQL3;              \n" +
                "			PREPARE stmt4 FROM @SQL4;              \n" +
                "            PREPARE stmt5 FROM @SQL5;              \n" +
                "			PREPARE stmt6 FROM @SQL6;              \n" +
                "  \n" +
                "			EXECUTE stmt1;              \n" +
                "			EXECUTE stmt2;              \n" +
                "            EXECUTE stmt3;              \n" +
                "			EXECUTE stmt4;              \n" +
                "            EXECUTE stmt5;              \n" +
                "			EXECUTE stmt6;              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SELECT * FROM temprfqformss;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM temprfqformss;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE temprfqformss;               \n" +
                "END IF;              \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN              \n" +
                "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as              \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "		    FROM               \n" +
                "		    (              \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg               \n" +
                "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1)      \n" +
                "             UNION ALL            \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mountingTypeID IN(',IDs,') LIMIT 1)) q');              \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;              \n" +
                "	EXECUTE stmt;              \n" +
                "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN              \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "			SELECT * FROM temprfqpartcategory;              \n" +
                "		ELSE              \n" +
                "			SELECT * FROM temprfqpartcategory;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "		DROP TABLE temprfqpartcategory;               \n" +
                "  \n" +
                "END IF;              \n" +
                "IF tableName=\"who_bought_who\" THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "END IF;              \n" +
                "IF tableName=\"rfq_parttypemst\" THEN              \n" +
                "			SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqparttypemst as              \n" +
                "				 SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message              \n" +
                "			    FROM               \n" +
                "			    (         \n" +
                "	            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM       \n" +
                "	            component WHERE deletedAt IS NULL AND partTypeID IN(',IDs,') LIMIT 1)) q');              \n" +
                "	  	        PREPARE stmt FROM @SQL;              \n" +
                "		        EXECUTE stmt;        \n" +
                "	          IF (SELECT TotalCount FROM temprfqparttypemst)=0 THEN          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,',       \n" +
                "	            deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "	  				PREPARE stmt1 FROM @SQL1;              \n" +
                "						EXECUTE stmt1;        \n" +
                "	            	SELECT * FROM temprfqparttypemst;              \n" +
                "			ELSE              \n" +
                "				SELECT * FROM temprfqparttypemst;              \n" +
                "  \n" +
                "			END IF;              \n" +
                "            DROP TABLE temprfqparttypemst;                         \n" +
                "  \n" +
                "END IF;              \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "END IF;              \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN              \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "END IF;      \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN              \n" +
                "SET @SQl1 = CONCAT('update quotecharges_dynamic_fields_mst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		              \n" +
                "			PREPARE stmt1 FROM @SQL1;              \n" +
                "			EXECUTE stmt1;              \n" +
                "  \n" +
                "END IF;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-08-2018 *********************************** */
              "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
                "VALUES (91,'1.00','V1','Quote Dynamic fields Master changes - Kinjal '," + userid + ");"
                );
            break;
        case 91:
            allDbChangesArray.push(
            /* **************************** New Script -> 14-08-2018  *********************************** */
           "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
           "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(      \n" +
           "	IN rfqAssyID int(1),      \n" +
           "	IN userID INT(1)      \n" +
           ")  \n" +
           "BEGIN      \n" +
           "DECLARE EXIT HANDLER FOR SQLEXCEPTION      \n" +
           "BEGIN      \n" +
           "	ROLLBACK;      \n" +
           "	RESIGNAL;      \n" +
           "END;      \n" +
           "DECLARE EXIT HANDLER FOR SQLWARNING      \n" +
           "  BEGIN      \n" +
           "	ROLLBACK;      \n" +
           "	RESIGNAL;      \n" +
           "END;      \n" +
           " DROP TEMPORARY TABLE if exists Results;      \n" +
           "  \n" +
           "    START TRANSACTION;      \n" +
           "  \n" +
           "# Select Consolidated rfq_lineitems      \n" +
           "  \n" +
           "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
           "		select rfqLineItemsID as rfqLineItemsID,attritionRate,isInstall,       \n" +
           "		isPurchase,partclassID,partTypeID,leadQty,isActive,isNoBidsPN,isDraft,      \n" +
           "		lineID,numOfPosition,rfqAssyID,uomID,ab.rfqAssyBomID,      \n" +
           "		sum(qpa2) qpa, cast((sum(adcost1)/sum(qpa2)) as decimal(10,5)) as valueAddedCost,      \n" +
           "		mfg,count(*)as multiple,group_concat(rfqLineItemsID) as consolidatedLineItemIDs      \n" +
           "		from       \n" +
           "		(select *,(qpa1*valueAddedCost)as adcost1, qpa1 as qpa2, group_concat(distinct(part)) mfg      \n" +
           "		from      \n" +
           "		(select b.rfqLineItemsID, a.valueAddedCost, a.refRFQLineItemID,       \n" +
           "		fun_getQPAOfLineItems(a.lineID,rfqAssyID)as qpa1, (fun_getQPAOfLineItems(a.lineID,rfqAssyID)* a.valueAddedCost)as addCost,       \n" +
           "		concat(b.mfgCodeID,' | ', b.mfgPNID ) as part,a.attritionRate,a.isInstall,       \n" +
           "		a.isPurchase,a.partclassID,a.partTypeID,a.leadQty,a.isActive,a.isNoBidsPN,a.isDraft,      \n" +
           "		a.lineID,a.numOfPosition,a.rfqAssyID,a.uomID,a.rfqAssyBomID      \n" +
           "		from rfq_lineitems_alternatepart b       \n" +
           "        join rfq_lineitems a on b.rfqLineItemsID = a.id AND a.rfqAssyID = rfqAssyID AND IFNULL(a.isDeleted,0) = 0     \n" +
           "        where IFNULL(b.isDeleted,0) = 0 and (b.mfgPNID is not NULL or b.mfgPN is not NULL)    \n" +
           "		group by b.rfqLineItemsID, b.mfgPN, concat(b.mfgCode,' | ', b.mfgPN)) aa      \n" +
           "		group by aa.rfqLineItemsID) ab       \n" +
           "		group by mfg;     \n" +
           "  \n" +
           "# Delete consolidated lineItem if consolidatedLineItemIDs  change      \n" +
           "  \n" +
           "			update rfq_consolidated_mfgpn_lineitem cl      \n" +
           "			set       \n" +
           "			cl.isDeleted = true,      \n" +
           "			cl.deletedAt = UTC_TIMESTAMP(),      \n" +
           "			cl.deletedBy = userID      \n" +
           "			where cl.rfqAssyID = rfqAssyID and cl.id not in (      \n" +
           "            select * from(           \n" +
           "			select id from rfq_consolidated_mfgpn_lineitem rcl      \n" +
           "			join Results R on R.rfqAssyID = rcl.rfqAssyID       \n" +
           "			where rcl.rfqAssyID = rfqAssyID and rcl.id  is not NUll  and rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs      \n" +
           "            and IFNULL(rcl.isDeleted,0) = 0)a);      \n" +
           "  \n" +
           "  \n" +
           "# insert Consolidated lineItems       \n" +
           "  \n" +
           "        INSERT INTO `rfq_consolidated_mfgpn_lineitem`      \n" +
           "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,      \n" +
           "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,      \n" +
           "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`)      \n" +
           "		select R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,rfqAssyID `rfqAssyID`,R.`partTypeID`,      \n" +
           "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_TIMESTAMP() `createdAt`,      \n" +
           "		userID `createdBy`, R.`numOfPosition`,      \n" +
           "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`       \n" +
           "        from Results R      \n" +
           "		 left join rfq_consolidated_mfgpn_lineitem cl on cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs and cl.rfqAssyID = R.rfqAssyID and IFNULL(cl.isDeleted,0) = 0      \n" +
           "		 where cl.id is NUll;      \n" +
           "  \n" +
           "  \n" +
           "  \n" +
           "# insert Consolidated lineItems Quentity      \n" +
           "  \n" +
           "        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`      \n" +
           "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)      \n" +
           "		select rq.id `qtyID`, cl.id `consolidateID`,userID `createdBy`,UTC_TIMESTAMP() `createdAt`  from rfq_consolidated_mfgpn_lineitem cl      \n" +
           "		join rfq_assy_quantity rq on rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0      \n" +
           "        left join rfq_consolidate_mfgpn_lineitem_quantity clq on clq.consolidateID = cl.id and clq.qtyID = rq.id       \n" +
           "		where cl.rfqAssyID = rfqAssyID and cl.isDeleted = 0 and clq.id IS NULL;      \n" +
           "  \n" +
           "# Update Consilidated LineItems Quantity      \n" +
           "  \n" +
           "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (select * from Results) Rs, (select cl.id ,cl.qpa,cl.consolidatedLineItemIDs from rfq_consolidated_mfgpn_lineitem cl       \n" +
           "		where cl.rfqAssyID = rfqAssyID and cl.id  is NoT NUll       \n" +
           "            and IFNULL(cl.isDeleted,0) = 0) rcl       \n" +
           "		set       \n" +
           "		rq.updatedAt = UTC_TIMESTAMP(),      \n" +
           "        rq.updatedBy = userID,      \n" +
           "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN null WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)      \n" +
           "		where  IFNULL(rq.isDeleted,0) = 0 and rcl.qpa != Rs.qpa and rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs and rq.consolidateID in(rcl.id);      \n" +
           "  \n" +
           "  \n" +
           "  \n" +
           "  \n" +
           "# Update Consilidated LineItems      \n" +
           "  \n" +
           "        UPDATE rfq_consolidated_mfgpn_lineitem cl, (select * from Results) R       \n" +
           "		set       \n" +
           "		cl.isInstall = R.isInstall ,      \n" +
           "		cl.isPurchase = R.isPurchase,      \n" +
           "		cl.numOfPosition = R.numOfPosition,      \n" +
           "		cl.attritionRate = R.attritionRate,      \n" +
           "		cl.leadQty = R.leadQty,      \n" +
           "		cl.valueAddedCost = R.valueAddedCost,      \n" +
           "        cl.updatedAt = UTC_TIMESTAMP(),      \n" +
           "        cl.rfqLineItemID = R.rfqLineItemsID,      \n" +
           "        cl.qpa = R.qpa,      \n" +
           "        cl.uomID = R.uomID,      \n" +
           "        cl.lineID = R.lineID,      \n" +
           "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,      \n" +
           "        cl.updatedBy = userID      \n" +
           "		where cl.rfqAssyID = rfqAssyID and cl.id  is NoT NUll and cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs      \n" +
           "            and IFNULL(cl.isDeleted,0) = 0;      \n" +
           "  \n" +
           "  \n" +
           "# delete from consolidated Alternatepart if lineItem removed      \n" +
           "  \n" +
           "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap      \n" +
           "		set       \n" +
           "        cap.isDeleted = true,      \n" +
           "        cap.deletedAt = UTC_TIMESTAMP(),      \n" +
           "		cap.deletedBy = userID      \n" +
           "		where  cap.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null        \n" +
           "        and IFNULL(cl.isDeleted,0) = 1);           \n" +
           "  \n" +
           "  \n" +
           "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem      \n" +
           "  \n" +
           "  \n" +
           "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate       \n" +
           "		set       \n" +
           "        isDeleted = true,      \n" +
           "        deletedAt = UTC_TIMESTAMP(),      \n" +
           "		deletedBy = userID      \n" +
           "        where id in(       \n" +
           "        select capID from (      \n" +
           "		select distinct(cap.id)as capID      \n" +
           "		from rfq_lineitems_alternatepart ap       \n" +
           "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID      \n" +
           "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID      \n" +
           "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID       \n" +
           "		join rfq_parttypemst pt on pt.id = rl.partTypeID AND pt.category != 3      \n" +
           "		where rl.rfqAssyID = rfqAssyID and cap.consolidateID IS not NULL and IFNULL(cl.isDeleted,0) = 0 and IFNULL(ap.isDeleted,0) = 1) as rcap);      \n" +
           "  \n" +
           "# delete Consolidated lineItems Quentity       \n" +
           "  \n" +
           "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (select * from rfq_assy_quantity where rfqAssyID = rfqAssyID and isDeleted = 1) rq    \n" +
           "		set       \n" +
           "        cq.isDeleted = true,      \n" +
           "        cq.deletedAt = UTC_TIMESTAMP(),      \n" +
           "		cq.deletedBy = userID      \n" +
           "		where cq.qtyID = rq.id and cq.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null        \n" +
           "        and IFNULL(cl.isDeleted,0) = 1);           \n" +
           "  \n" +
           "# delete Consolidated lineitem Quantity if rfq Quantity remove    \n" +
           "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (select * from rfq_assy_quantity q where q.rfqAssyID = rfqAssyID and IFNULL(q.isDeleted,0) = 1 ) rq    \n" +
           "		set       \n" +
           "        cq.isDeleted = true,      \n" +
           "        cq.deletedAt = UTC_TIMESTAMP(),      \n" +
           "		cq.deletedBy = userID      \n" +
           "        where cq.consolidateID in(select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = rfqAssyID and IFNULL(isDeleted, 0) = 0)        \n" +
           "        and rq.id = cq.qtyID and IFNULL(cq.isDeleted,0)= 0;        \n" +
           "  \n" +
           "# delete Consolidate lineItems       \n" +
           "  \n" +
           "		UPDATE rfq_consolidated_mfgpn_lineitem cl      \n" +
           "		set       \n" +
           "        cl.isDeleted = true,      \n" +
           "        cl.deletedAt = UTC_TIMESTAMP(),      \n" +
           "		cl.deletedBy = userID      \n" +
           "		where  cl.rfqAssyID = rfqAssyID and cl.id is Not Null  and IFNULL(cl.isDeleted,0) = 0      \n" +
           "		and cl.rfqLineItemID not in(select rfqLineItemsID from Results);              \n" +
           "  \n" +
           "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part       \n" +
           "  \n" +
           "        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`      \n" +
           "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`)      \n" +
           "		select distinct(ap.`mfgPN`),(select rcl.id from rfq_consolidated_mfgpn_lineitem rcl where rcl.rfqAssyID = rfqAssyID and rcl.lineID = rl.lineID and IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,      \n" +
           "			ap.`mfgPNID`,ap.`mfgCodeID`, com.`PIDCode`, userID `createdBy`,UTC_TIMESTAMP() `createdAt`      \n" +
           "		from rfq_lineitems_alternatepart ap       \n" +
           "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID      \n" +
           "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID  \n" +
           "        join component com on com.id = ap.mfgPNID and IFNULL(com.isDeleted,0) = 0  \n" +
           "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID      \n" +
           "		where rl.rfqAssyID = rfqAssyID and ap.isDeleted = 0 and IFNULL(cl.isDeleted,0) = 0 and cap.consolidateID IS NULL;    \n" +
           "  \n" +
           "  \n" +
           "# Delete consolidated mfgPart if mfgPart Changed  \n" +
           "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (select a.id from rfq_consolidated_mfgpn_lineitem a where a.rfqAssyID = rfqAssyID and a.isDeleted = 0) rcl  \n" +
           "		set       \n" +
           "        cap.isDeleted = true,      \n" +
           "        cap.deletedAt = UTC_TIMESTAMP(),      \n" +
           "		cap.deletedBy = userID  \n" +
           "		where cap.consolidateID in (rcl.id) and cap.id not in (   \n" +
           "        select  distinct(cap.id)      \n" +
           "		from rfq_lineitems_alternatepart ap       \n" +
           "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID      \n" +
           "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID  \n" +
           "		where rl.rfqAssyID = rfqAssyID and cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID  and ap.isDeleted = 0 and IFNULL(cl.isDeleted,0) = 0);  \n" +
           "  \n" +
           "    COMMIT;      \n" +
           "    DROP TEMPORARY TABLE if exists Results;      \n" +
           "END;  \n" +
            /* **************************** Add Script Version -> 14-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (92,'1.00','V1','create consolidated lineitem sp - shirish '," + userid + ");"
            );
            break;
        case 92:
            allDbChangesArray.push(
            /* **************************** New Script -> 13-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
           "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(      \n" +
           "	IN rfqAssyID int(1),      \n" +
           "	IN userID INT(1)      \n" +
           ")  \n" +
           "BEGIN      \n" +
           "DECLARE EXIT HANDLER FOR SQLEXCEPTION      \n" +
           "BEGIN      \n" +
           "	ROLLBACK;      \n" +
           "	RESIGNAL;      \n" +
           "END;      \n" +
           "DECLARE EXIT HANDLER FOR SQLWARNING      \n" +
           "  BEGIN      \n" +
           "	ROLLBACK;      \n" +
           "	RESIGNAL;      \n" +
           "END;      \n" +
           " DROP TEMPORARY TABLE if exists Results;      \n" +
           "  \n" +
           "    START TRANSACTION;      \n" +
           "  \n" +
           "# Select Consolidated rfq_lineitems      \n" +
           "  \n" +
           "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
           "		select rfqLineItemsID as rfqLineItemsID,attritionRate,isInstall,       \n" +
           "		isPurchase,partclassID,partTypeID,leadQty,isActive,isNoBidsPN,isDraft,      \n" +
           "		lineID,numOfPosition,rfqAssyID,uomID,ab.rfqAssyBomID,      \n" +
           "		sum(qpa2) qpa, cast((sum(adcost1)/sum(qpa2)) as decimal(10,5)) as valueAddedCost,      \n" +
           "		mfg,count(*)as multiple,group_concat(rfqLineItemsID) as consolidatedLineItemIDs      \n" +
           "		from       \n" +
           "		(select *,(qpa1*valueAddedCost)as adcost1, qpa1 as qpa2, group_concat(distinct(part)) mfg      \n" +
           "		from      \n" +
           "		(select b.rfqLineItemsID, a.valueAddedCost, a.refRFQLineItemID,       \n" +
           "		fun_getQPAOfLineItems(a.lineID,rfqAssyID)as qpa1, (fun_getQPAOfLineItems(a.lineID,rfqAssyID)* a.valueAddedCost)as addCost,       \n" +
           "		concat(b.mfgCodeID,' | ', b.mfgPNID ) as part,a.attritionRate,a.isInstall,       \n" +
           "		a.isPurchase,a.partclassID,a.partTypeID,a.leadQty,a.isActive,a.isNoBidsPN,a.isDraft,      \n" +
           "		a.lineID,a.numOfPosition,a.rfqAssyID,a.uomID,a.rfqAssyBomID      \n" +
           "		from rfq_lineitems_alternatepart b       \n" +
           "        join rfq_lineitems a on b.rfqLineItemsID = a.id AND a.rfqAssyID = rfqAssyID AND IFNULL(a.isDeleted,0) = 0     \n" +
           "        where IFNULL(b.isDeleted,0) = 0 and (b.mfgPNID is not NULL or b.mfgPN is not NULL)    \n" +
           "		group by b.rfqLineItemsID, b.mfgPN, concat(b.mfgCode,' | ', b.mfgPN)) aa      \n" +
           "		group by aa.rfqLineItemsID) ab       \n" +
           "		group by mfg;     \n" +
           "  \n" +
           "# Delete consolidated lineItem if consolidatedLineItemIDs  change      \n" +
           "  \n" +
           "			update rfq_consolidated_mfgpn_lineitem cl      \n" +
           "			set       \n" +
           "			cl.isDeleted = true,      \n" +
           "			cl.deletedAt = UTC_TIMESTAMP(),      \n" +
           "			cl.deletedBy = userID      \n" +
           "			where cl.rfqAssyID = rfqAssyID and cl.id not in (      \n" +
           "            select * from(           \n" +
           "			select id from rfq_consolidated_mfgpn_lineitem rcl      \n" +
           "			join Results R on R.rfqAssyID = rcl.rfqAssyID       \n" +
           "			where rcl.rfqAssyID = rfqAssyID and rcl.id  is not NUll  and rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs      \n" +
           "            and IFNULL(rcl.isDeleted,0) = 0)a);      \n" +
           "  \n" +
           "  \n" +
           "# insert Consolidated lineItems       \n" +
           "  \n" +
           "        INSERT INTO `rfq_consolidated_mfgpn_lineitem`      \n" +
           "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,      \n" +
           "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,      \n" +
           "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`)      \n" +
           "		select R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,rfqAssyID `rfqAssyID`,R.`partTypeID`,      \n" +
           "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_TIMESTAMP() `createdAt`,      \n" +
           "		userID `createdBy`, R.`numOfPosition`,      \n" +
           "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`       \n" +
           "        from Results R      \n" +
           "		 left join rfq_consolidated_mfgpn_lineitem cl on cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs and cl.rfqAssyID = R.rfqAssyID and IFNULL(cl.isDeleted,0) = 0      \n" +
           "		 where cl.id is NUll;      \n" +
           "  \n" +
           "  \n" +
           "  \n" +
           "# insert Consolidated lineItems Quentity      \n" +
           "  \n" +
           "        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`      \n" +
           "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)      \n" +
           "		select rq.id `qtyID`, cl.id `consolidateID`,userID `createdBy`,UTC_TIMESTAMP() `createdAt`  from rfq_consolidated_mfgpn_lineitem cl      \n" +
           "		join rfq_assy_quantity rq on rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0      \n" +
           "        left join rfq_consolidate_mfgpn_lineitem_quantity clq on clq.consolidateID = cl.id and clq.qtyID = rq.id       \n" +
           "		where cl.rfqAssyID = rfqAssyID and cl.isDeleted = 0 and clq.id IS NULL;      \n" +
           "  \n" +
           "# Update Consilidated LineItems Quantity      \n" +
           "  \n" +
           "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (select * from Results) Rs, (select cl.id ,cl.qpa,cl.consolidatedLineItemIDs from rfq_consolidated_mfgpn_lineitem cl       \n" +
           "		where cl.rfqAssyID = rfqAssyID and cl.id  is NoT NUll       \n" +
           "            and IFNULL(cl.isDeleted,0) = 0) rcl       \n" +
           "		set       \n" +
           "		rq.updatedAt = UTC_TIMESTAMP(),      \n" +
           "        rq.updatedBy = userID,      \n" +
           "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN null WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)      \n" +
           "		where  IFNULL(rq.isDeleted,0) = 0 and rcl.qpa != Rs.qpa and rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs and rq.consolidateID in(rcl.id);      \n" +
           "  \n" +
           "  \n" +
           "  \n" +
           "  \n" +
           "# Update Consilidated LineItems      \n" +
           "  \n" +
           "        UPDATE rfq_consolidated_mfgpn_lineitem cl, (select * from Results) R       \n" +
           "		set       \n" +
           "		cl.isInstall = R.isInstall ,      \n" +
           "		cl.isPurchase = R.isPurchase,      \n" +
           "		cl.numOfPosition = R.numOfPosition,      \n" +
           "		cl.attritionRate = R.attritionRate,      \n" +
           "		cl.leadQty = R.leadQty,      \n" +
           "		cl.valueAddedCost = R.valueAddedCost,      \n" +
           "        cl.updatedAt = UTC_TIMESTAMP(),      \n" +
           "        cl.rfqLineItemID = R.rfqLineItemsID,      \n" +
           "        cl.qpa = R.qpa,      \n" +
           "        cl.uomID = R.uomID,      \n" +
           "        cl.lineID = R.lineID,      \n" +
           "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,      \n" +
           "        cl.updatedBy = userID      \n" +
           "		where cl.rfqAssyID = rfqAssyID and cl.id  is NoT NUll and cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs      \n" +
           "            and IFNULL(cl.isDeleted,0) = 0;      \n" +
           "  \n" +
           "  \n" +
           "# delete from consolidated Alternatepart if lineItem removed      \n" +
           "  \n" +
           "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap      \n" +
           "		set       \n" +
           "        cap.isDeleted = true,      \n" +
           "        cap.deletedAt = UTC_TIMESTAMP(),      \n" +
           "		cap.deletedBy = userID      \n" +
           "		where  cap.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null        \n" +
           "        and IFNULL(cl.isDeleted,0) = 1);           \n" +
           "  \n" +
           "  \n" +
           "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem      \n" +
           "  \n" +
           "  \n" +
           "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate       \n" +
           "		set       \n" +
           "        isDeleted = true,      \n" +
           "        deletedAt = UTC_TIMESTAMP(),      \n" +
           "		deletedBy = userID      \n" +
           "        where id in(       \n" +
           "        select capID from (      \n" +
           "		select distinct(cap.id)as capID      \n" +
           "		from rfq_lineitems_alternatepart ap       \n" +
           "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID      \n" +
           "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID      \n" +
           "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID       \n" +
           "		join rfq_parttypemst pt on pt.id = rl.partTypeID AND pt.category != 3      \n" +
           "		where rl.rfqAssyID = rfqAssyID and cap.consolidateID IS not NULL and IFNULL(cl.isDeleted,0) = 0 and IFNULL(ap.isDeleted,0) = 1) as rcap);      \n" +
           "  \n" +
           "# delete Consolidated lineItems Quentity       \n" +
           "  \n" +
           "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (select * from rfq_assy_quantity where rfqAssyID = rfqAssyID and isDeleted = 1) rq    \n" +
           "		set       \n" +
           "        cq.isDeleted = true,      \n" +
           "        cq.deletedAt = UTC_TIMESTAMP(),      \n" +
           "		cq.deletedBy = userID      \n" +
           "		where cq.qtyID = rq.id and cq.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null        \n" +
           "        and IFNULL(cl.isDeleted,0) = 1);           \n" +
           "  \n" +
           "# delete Consolidated lineitem Quantity if rfq Quantity remove    \n" +
           "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (select * from rfq_assy_quantity q where q.rfqAssyID = rfqAssyID and IFNULL(q.isDeleted,0) = 1 ) rq    \n" +
           "		set       \n" +
           "        cq.isDeleted = true,      \n" +
           "        cq.deletedAt = UTC_TIMESTAMP(),      \n" +
           "		cq.deletedBy = userID      \n" +
           "        where cq.consolidateID in(select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = rfqAssyID and IFNULL(isDeleted, 0) = 0)        \n" +
           "        and rq.id = cq.qtyID and IFNULL(cq.isDeleted,0)= 0;        \n" +
           "  \n" +
           "# delete Consolidate lineItems       \n" +
           "  \n" +
           "		UPDATE rfq_consolidated_mfgpn_lineitem cl      \n" +
           "		set       \n" +
           "        cl.isDeleted = true,      \n" +
           "        cl.deletedAt = UTC_TIMESTAMP(),      \n" +
           "		cl.deletedBy = userID      \n" +
           "		where  cl.rfqAssyID = rfqAssyID and cl.id is Not Null  and IFNULL(cl.isDeleted,0) = 0      \n" +
           "		and cl.rfqLineItemID not in(select rfqLineItemsID from Results);              \n" +
           "  \n" +
           "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part       \n" +
           "  \n" +
           "        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`      \n" +
           "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`)      \n" +
           "		select distinct(ap.`mfgPN`),(select rcl.id from rfq_consolidated_mfgpn_lineitem rcl where rcl.rfqAssyID = rfqAssyID and rcl.lineID = rl.lineID and IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,      \n" +
           "			ap.`mfgPNID`,ap.`mfgCodeID`, com.`PIDCode`, userID `createdBy`,UTC_TIMESTAMP() `createdAt`      \n" +
           "		from rfq_lineitems_alternatepart ap       \n" +
           "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID      \n" +
           "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID  \n" +
           "        join component com on com.id = ap.mfgPNID and IFNULL(com.isDeleted,0) = 0  \n" +
           "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID and cap.isDeleted = 0      \n" +
           "		where rl.rfqAssyID = rfqAssyID and ap.isDeleted = 0 and IFNULL(cl.isDeleted,0) = 0 and cap.consolidateID IS NULL;    \n" +
           "  \n" +
           "  \n" +
           "# Delete consolidated mfgPart if mfgPart Changed  \n" +
           "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (select a.id from rfq_consolidated_mfgpn_lineitem a where a.rfqAssyID = rfqAssyID and a.isDeleted = 0) rcl  \n" +
           "		set       \n" +
           "        cap.isDeleted = true,      \n" +
           "        cap.deletedAt = UTC_TIMESTAMP(),      \n" +
           "		cap.deletedBy = userID  \n" +
           "		where cap.consolidateID in (rcl.id) and cap.id not in (   \n" +
           "        select  distinct(cap.id)      \n" +
           "		from rfq_lineitems_alternatepart ap       \n" +
           "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID      \n" +
           "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID  \n" +
           "		where rl.rfqAssyID = rfqAssyID and cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID  and ap.isDeleted = 0 and IFNULL(cl.isDeleted,0) = 0);  \n" +
           "  \n" +
           "    COMMIT;      \n" +
           "    DROP TEMPORARY TABLE if exists Results;      \n" +
           "END;  \n" +
            /* **************************** Add Script Version -> 13-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (93,'1.00','V1','create consolidated lineitem sp - shirish'," + userid + ");"
            );
            break;
        case 93:
            allDbChangesArray.push(
           //  /* **************************** New Script -> 13-08-2018  *********************************** */
          "alter table component add column isPIDManual tinyint(1);  \n" +
          "alter table component modify column PIDCode varchar(50);  \n" +
           //  /* **************************** Add Script Version -> 13-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (94,'1.00','V1',' Alter component-Mona'," + userid + ");"
            );
            break;
        case 94:
            allDbChangesArray.push(
           //  /* **************************** New Script -> 15-08-2018  *********************************** */
         "ALTER TABLE quotecharges_dynamic_fields_mst ADD COLUMN displayOrder DECIMAL(10,4) NULL;  \n" +
         //  /* **************************** New Script -> 15-08-2018  *********************************** */
         "DROP PROCEDURE IF EXISTS `Sproc_RetrieveQuoteDynamicFields` ;  \n" +
           "CREATE PROCEDURE `Sproc_RetrieveQuoteDynamicFields`(    \n" +
           "	IN ppageIndex INT(11),    \n" +
           "	IN precordPerPage INT(11),    \n" +
           "	IN pOrderBy VARCHAR(255),    \n" +
           "	IN pWhereClause VARCHAR(21844)    \n" +
           "	)  \n" +
           "BEGIN    \n" +
           "  \n" +
           "		DECLARE pOffset INT(11);    \n" +
           "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
           "  \n" +
           "  \n" +
           "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
           "		 SELECT qc.id, qc.fieldName, qc.dataType, qc.costingType, qc.displayPercentage, qc.displayMargin, qc.displayOrder, qc.isDeleted, qc.createdBy, qc.updatedBy,qc.deletedBy, qc.createdAt, qc.updatedAt,qc.deletedAt,    \n" +
           "		 (CASE WHEN (qc.displayPercentage = 0) THEN 'No'     \n" +
           "				WHEN (qc.displayPercentage = 1) THEN 'Yes' ELSE '' END) AS `displayPercentageConvertedValue`,    \n" +
           "		(CASE WHEN (qc.displayMargin = 0) THEN 'No'     \n" +
           "				WHEN (qc.displayMargin = 1) THEN 'Yes' ELSE '' END) AS `displayMarginConvertedValue`    \n" +
           "		FROM `quotecharges_dynamic_fields_mst` AS qc     \n" +
           "		WHERE qc.`deletedAt` IS NULL    \n" +
           "		;    \n" +
           "  \n" +
           "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
           "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"fieldName ASC\") ;    \n" +
           "		ELSE    \n" +
           "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
           "		END IF;	    \n" +
           "  \n" +
           "  \n" +
           "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
           "			SET pWhereClause = '1=1' ;    \n" +
           "		END IF;	    \n" +
           "  \n" +
           "  \n" +
           "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
           "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
           "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
           "		ELSE	    \n" +
           "			SET rowNumWhere = '';    \n" +
           "		END IF;	    \n" +
           "  \n" +
           "		/* to get total count of rows */    \n" +
           "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
           "		PREPARE query1 FROM @SQLStatement1;    \n" +
           "		EXECUTE query1;    \n" +
           "		DEALLOCATE PREPARE query1;    \n" +
           "  \n" +
           "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
           "		PREPARE query2 FROM @SQLStatement2;    \n" +
           "		EXECUTE query2;    \n" +
           "		DEALLOCATE PREPARE query2;    \n" +
           "  \n" +
           "		DROP TEMPORARY TABLE Results;    \n" +
           "  \n" +
           "    END;  \n" +
           //  /* **************************** Add Script Version -> 15-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (95,'1.00','V1',' Alter quotecharges_dynamic_fields_mst-Kinjal'," + userid + ");"
            );
            break;
        case 95:
            allDbChangesArray.push(
            /* **************************** New Script -> 15-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
             "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(          \n" +
             "	IN ppageIndex INT(11),          \n" +
             "	IN precordPerPage INT(11),          \n" +
             "	IN pOrderBy VARCHAR(255),          \n" +
             "	IN pWhereClause VARCHAR(21844),          \n" +
             "	IN rfqAssyID INT(11),          \n" +
             "	IN puserID INT (11)          \n" +
             "    )  \n" +
             "BEGIN          \n" +
             "  \n" +
             "	    DECLARE pOffset INT(11);          \n" +
             "	    DECLARE rowNumWhere VARCHAR(255) ;          \n" +
             "	    SET @SQLString = NULL;          \n" +
             "	    SET SESSION group_concat_max_len = 150000;              \n" +
             "	    IF (pOrderBy IS NOT NULL) THEN          \n" +
             "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
             "		ELSE          \n" +
             "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;           \n" +
             "		END IF;	          \n" +
             "  \n" +
             "  \n" +
             "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN          \n" +
             "			SET pWhereClause = '1=1' ;          \n" +
             "		END IF;	          \n" +
             "  \n" +
             "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
             "			SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
             "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
             "		ELSE	          \n" +
             "			SET rowNumWhere = '';          \n" +
             "		END IF;	          \n" +
             "		SELECT          \n" +
             "                     GROUP_CONCAT(DISTINCT          \n" +
             "				CONCAT(          \n" +
             "					'Max((IF(ra.requestQty = ''',          \n" +
             "						ra.requestQty,          \n" +
             "					''', rq.finalPrice, null))) AS ''',          \n" +
             "						ra.requestQty,''''          \n" +
             "					)          \n" +
             "					) INTO @SQLString          \n" +
             "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq          \n" +
             "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID          \n" +
             "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id          \n" +
             "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;          \n" +
             "  \n" +
             "			IF(@SQLString IS NOT NULL) THEN          \n" +
             "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS          \n" +
             "					SELECT           \n" +
             "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,            \n" +
             "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,      \n" +
             "					(SELECT       \n" +
             "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                \n" +
             "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN       \n" +
             "                                     component c ON rla.mfgpnid=c.id       \n" +
             "                                     LEFT JOIN mfgcodemst mg ON        \n" +
             "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,          \n" +
             "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn           \n" +
             "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla           \n" +
             "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',           \n" +
             "					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl          \n" +
             "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID          \n" +
             "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id          \n" +
             "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');          \n" +
             "  \n" +
             "			ELSE          \n" +
             "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS          \n" +
             "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,       \n" +
             "					 GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                \n" +
             "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN       \n" +
             "                                     component c ON rla.mfgpnid=c.id       \n" +
             "                                     LEFT JOIN mfgcodemst mg ON        \n" +
             "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,            \n" +
             "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn           \n" +
             "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla           \n" +
             "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl          \n" +
             "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	          \n" +
             "			END IF;          \n" +
             "			PREPARE stmt FROM @SQLStatement;          \n" +
             "			EXECUTE stmt;	          \n" +
             "  \n" +
             "  \n" +
             "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );          \n" +
             "			PREPARE query1 FROM @SQLStatement1;          \n" +
             "			EXECUTE query1;          \n" +
             "			DEALLOCATE PREPARE query1;          \n" +
             "  \n" +
             "  \n" +
             "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
             "			PREPARE query2 FROM @SQLStatement2;          \n" +
             "			EXECUTE query2;          \n" +
             "			DEALLOCATE PREPARE query2;          \n" +
             "  \n" +
             "  \n" +
             "  \n" +
             "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );          \n" +
             "			PREPARE query3 FROM @SQLStatement3;          \n" +
             "			EXECUTE query3;          \n" +
             "			DEALLOCATE PREPARE query3;          \n" +
             "  \n" +
             "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.turnType,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt          \n" +
             "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id          \n" +
             "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);          \n" +
             "			PREPARE query4 FROM @SQLStatement4;          \n" +
             "			EXECUTE query4;          \n" +
             "			DEALLOCATE PREPARE query4;      \n" +
             "  \n" +
             "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty, rq.finalPrice, unitPrice,supplier,rq.min,rq.mult, selectedMpn, selectionMode,qtyID,     \n" +
             "					currentStock,    \n" +
             "					leadTime,     \n" +
             "					supplierStock,    \n" +
             "					grossStock,        \n" +
             "					selectedPIDCode,ct.qpa, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq               \n" +
             "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID       \n" +
             "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id       \n" +
             "				WHERE ct.rfqAssyID=\",rfqAssyID);              \n" +
             "			PREPARE query5 FROM @SQLStatement5;                  \n" +
             "			EXECUTE query5;                  \n" +
             "			DEALLOCATE PREPARE query5;         \n" +
             "  \n" +
             "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,   \n" +
             "						(SUM(rq.finalPrice)) AS Total,   \n" +
             "						(SUM(rq.unitPrice)) AS TotalUnitPrice,  \n" +
             "						(SUM(rq.finalPrice)/ IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice  \n" +
             "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq      \n" +
             "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id      \n" +
             "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");              \n" +
             "  \n" +
             "			PREPARE query6 FROM @SQLStatement6;                  \n" +
             "			EXECUTE query6;                  \n" +
             "			DEALLOCATE PREPARE query6;                      \n" +
             "  \n" +
             "  \n" +
             "			DROP TEMPORARY TABLE consolidatetemp;            \n" +
             "    END;  \n" +
            /* **************************** Add Script Version -> 15-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (96,'1.00','V1','Consolidate SP changes - Vaibahv '," + userid + ");"
            );
            break;
        case 96:
            allDbChangesArray.push(
           //  /* **************************** New Script -> 16-08-2018  *********************************** */
                 "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                \n" +
                "	IN tableName VARCHAR(255),                \n" +
                "	IN IDs LONGTEXT,                \n" +
                "	IN deletedBy INT,                \n" +
                "	IN entityID VARCHAR(255),                \n" +
                "	IN refrenceIDs LONGTEXT                \n" +
                "    )  \n" +
                "BEGIN                \n" +
                "	DECLARE vWoID1 INT(11);                \n" +
                "	DECLARE vOpID1 INT(11);                \n" +
                "	DECLARE vSerialNo1 VARCHAR(50);                \n" +
                "	DECLARE vProdStatus1 VARCHAR(5);                \n" +
                "	DECLARE vWoTransID1 INT(11);                \n" +
                "	DECLARE vQty1 INT(11);                \n" +
                "	DECLARE vOpID2 INT(11);                \n" +
                "	DECLARE vProdstatus2 VARCHAR(5);                \n" +
                "  \n" +
                "IF tableName='employees' THEN                \n" +
                " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)                \n" +
                "	   UNION ALL                                      \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)                \n" +
                "           UNION ALL                 \n" +
                "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND er.finalStatusInit IN(',IDs,') AND er.initiateBy IN(',IDs,') LIMIT 1)                \n" +
                "	   UNION ALL                \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)                \n" +
                "	UNION ALL                \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)                \n" +
                "	  UNION ALL                \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)                \n" +
                "	  UNION ALL                \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)                \n" +
                "	  UNION ALL                \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)                \n" +
                "	  UNION ALL                \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)                \n" +
                "	 UNION ALL                \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)                \n" +
                "	  UNION ALL                \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND wr.reqGenEmployeeID IN(',IDs,') and wr.woAuthorID IN(',IDs,') and wr.accRejBy IN(',IDs,') LIMIT 1)                \n" +
                "	  UNION ALL                 \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND wr.commentemployeeID IN(',IDs,') AND wr.accRejBy IN(',IDs,') LIMIT 1)                \n" +
                "	  UNION ALL                \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND wr.employeeID IN(',IDs,') AND wr.requstedEmployeeID IN(',IDs,') LIMIT 1)                 \n" +
                "	  UNION ALL                    \n" +
                "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE wt.checkinEmployeeID IN(',IDs,') AND wt.checkoutEmployeeID IN(',IDs,') LIMIT 1)                \n" +
                "	  UNION ALL                   \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)                \n" +
                "	 UNION ALL                 \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)                \n" +
                "	 UNION ALL                 \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)                \n" +
                "	 UNION ALL                 \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND wthu.holdEmployeeId IN(',IDs,') and wthu.unHoldEmployeeId IN(',IDs,') LIMIT 1)                \n" +
                "	UNION ALL                 \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)                \n" +
                "	 UNION ALL                 \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)                \n" +
                "	 UNION ALL                 \n" +
                "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)                \n" +
                "	 UNION ALL                 \n" +
                "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND holdEmployeeId IN(',IDs,') AND unHoldEmployeeId IN(',IDs,')LIMIT 1)                \n" +
                "  \n" +
                "        ) q');                \n" +
                "    PREPARE stmt FROM @SQL;                \n" +
                "    EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempEmp)=0 THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');                \n" +
                "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');                \n" +
                "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');                \n" +
                "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			PREPARE stmt2 FROM @SQL2;                \n" +
                "			PREPARE stmt3 FROM @SQL3;                \n" +
                "			PREPARE stmt4 FROM @SQL4;                \n" +
                "			EXECUTE stmt1;                \n" +
                "			EXECUTE stmt2;                \n" +
                "			EXECUTE stmt3;                \n" +
                "			EXECUTE stmt4;                \n" +
                "			SELECT                 \n" +
                "    *                \n" +
                "FROM                \n" +
                "    tempEmp;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempEmp;                \n" +
                "		END IF;                \n" +
                "  \n" +
                "    DROP TABLE tempEmp;                \n" +
                "END IF;                \n" +
                "IF tableName='eco_type_category' THEN                \n" +
                "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                 \n" +
                "	  ) q');                \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT                 \n" +
                "    *                \n" +
                "FROM                \n" +
                "    tempEcoTypeCategory;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempEcoTypeCategory;                \n" +
                "		END IF;                \n" +
                "    DROP TABLE tempEcoTypeCategory;                  \n" +
                "END IF;                \n" +
                "IF tableName='eco_type_values' THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)                \n" +
                "	  ) q');                \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT                 \n" +
                "    *                \n" +
                "FROM                \n" +
                "    tempEcoTypeValues;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempEcoTypeValues;                \n" +
                "		END IF;                \n" +
                "    DROP TABLE tempEcoTypeValues;                  \n" +
                "END IF;                \n" +
                "IF tableName='customers' THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                 \n" +
                "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                 \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                \n" +
                "	  ) q');                \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			PREPARE stmt2 FROM @SQL2;                \n" +
                "			PREPARE stmt3 FROM @SQL3;                \n" +
                "			EXECUTE stmt1;                \n" +
                "			EXECUTE stmt2;                \n" +
                "			EXECUTE stmt3;                \n" +
                "  \n" +
                "			SELECT                 \n" +
                "    *                \n" +
                "FROM                \n" +
                "    tempCustomers;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempCustomers;                \n" +
                "		END IF;                \n" +
                "    DROP TABLE tempCustomers;                  \n" +
                "END IF;                \n" +
                "IF tableName='certificate_standards' THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                \n" +
                "  \n" +
                "	  ) q');                \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		                \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			PREPARE stmt2 FROM @SQL2;                \n" +
                "			PREPARE stmt3 FROM @SQL3;                \n" +
                "			EXECUTE stmt1;                \n" +
                "			EXECUTE stmt2;                \n" +
                "			EXECUTE stmt3;                \n" +
                "  \n" +
                "			SELECT * FROM tempCertificateStandards;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempCertificateStandards;                \n" +
                "		END IF;                \n" +
                "    DROP TABLE tempCertificateStandards;                  \n" +
                "END IF;                \n" +
                "IF tableName='department' THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                \n" +
                "  \n" +
                "	  ) q');                \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		                \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			PREPARE stmt2 FROM @SQL2;                \n" +
                "			PREPARE stmt3 FROM @SQL3;                \n" +
                "			EXECUTE stmt1;                \n" +
                "			EXECUTE stmt2;                \n" +
                "			EXECUTE stmt3;                \n" +
                "  \n" +
                "			SELECT * FROM tempDepartment;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempDepartment;                \n" +
                "		END IF;                \n" +
                "    DROP TABLE tempDepartment;                  \n" +
                "END IF;                \n" +
                "IF tableName='genericcategory' THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND eqpGroupID IN(',IDs,') AND eqpSubGroupID IN(',IDs,') AND eqpTypeID IN(',IDs,') AND eqpPossessionID IN(',IDs,') AND eqpOwnershipTypeID IN(',IDs,') AND locationTypeID IN(',IDs,')   LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)                \n" +
                "	     UNION ALL              \n" +
                "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)                \n" +
                "	  ) q');                \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT                 \n" +
                "    *                \n" +
                "FROM                \n" +
                "    tempGenericCategory;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempGenericCategory;                \n" +
                "		END IF;                \n" +
                "    DROP TABLE tempGenericCategory;                  \n" +
                "END IF;                \n" +
                "IF tableName='equipment' THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)                \n" +
                "  \n" +
                "	  ) q');                \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN                \n" +
                "			IF entityID IS NOT NULL THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		                \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			PREPARE stmt2 FROM @SQL2;                \n" +
                "			PREPARE stmt3 FROM @SQL3;                \n" +
                "			EXECUTE stmt1;                \n" +
                "			EXECUTE stmt2;                \n" +
                "			EXECUTE stmt3;                \n" +
                "  \n" +
                "			ELSE                \n" +
                "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "			END IF;                \n" +
                "  \n" +
                "			SELECT * FROM tempEquipment;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempEquipment;                \n" +
                "		END IF;                \n" +
                "    DROP TABLE tempEquipment;                  \n" +
                "END IF;                \n" +
                "IF tableName='parts' THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                \n" +
                "	  ) q');                \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempParts)=0 THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempParts;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempParts;                \n" +
                "		END IF;                \n" +
                "    DROP TABLE tempParts;                  \n" +
                "END IF;                \n" +
                "IF tableName='master_templates' THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)                \n" +
                "	  ) q');                \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempMasterTemplate;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempMasterTemplate;                \n" +
                "		END IF;                \n" +
                "    DROP TABLE tempMasterTemplate;                  \n" +
                "END IF;                \n" +
                "IF tableName='operations' THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                \n" +
                "  \n" +
                "	  ) q');                \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempOperations)=0 THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		                \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			PREPARE stmt2 FROM @SQL2;                \n" +
                "			PREPARE stmt3 FROM @SQL3;                \n" +
                "			EXECUTE stmt1;                \n" +
                "			EXECUTE stmt2;                \n" +
                "			EXECUTE stmt3;                \n" +
                "  \n" +
                "			SELECT * FROM tempOperations;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempOperations;                \n" +
                "		END IF;                \n" +
                "    DROP TABLE tempOperations;                  \n" +
                "END IF;                \n" +
                "IF tableName='workorder' THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL		                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                \n" +
                "  \n" +
                "	  ) q');                \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN                \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete work order */                \n" +
                "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;                 \n" +
                "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");                \n" +
                "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			                \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			                \n" +
                "			/* [E] - Add Time line log for delete work order */			                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update workorder set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                \n" +
                "			SET @SQl4 = CONCAT('update workorder_certification set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			PREPARE stmt2 FROM @SQL2;                \n" +
                "			PREPARE stmt3 FROM @SQL3;                \n" +
                "			PREPARE stmt4 FROM @SQL4;                \n" +
                "			EXECUTE stmt1;                \n" +
                "			EXECUTE stmt2;                \n" +
                "			EXECUTE stmt3;                \n" +
                "			EXECUTE stmt4;                \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorder;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempWorkorder;                \n" +
                "		END IF;                \n" +
                "    DROP TABLE tempWorkorder;                  \n" +
                "END IF;                \n" +
                "IF tableName='roles' THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                \n" +
                "         UNION ALL                \n" +
                "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                \n" +
                "         UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');                \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempRoles)=0 THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempRoles;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempRoles;                \n" +
                "		END IF;                \n" +
                "    DROP TABLE tempRoles;                  \n" +
                "END IF;                \n" +
                "IF tableName='standard_class' THEN                \n" +
                " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND classIDs IN(',IDs,') LIMIT 1)                \n" +
                "	  ) q');                \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempStandardClass;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempStandardClass;                \n" +
                "		END IF;                \n" +
                "    DROP TABLE tempStandardClass;                  \n" +
                "END IF;                \n" +
                "IF tableName='dataelement' THEN                \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		                \n" +
                "		UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                \n" +
                "	  ) q');                \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt2 FROM @SQL2;                \n" +
                "			EXECUTE stmt2;                \n" +
                "  \n" +
                "  \n" +
                "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)                \n" +
                "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated                \n" +
                "			FROM dataelement dl WHERE dl.dataElementID = IDs;                \n" +
                "  \n" +
                "  \n" +
                "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */                \n" +
                "  \n" +
                "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                 \n" +
                "							where type IN(''',IDs,''') and deletedAt IS NULL ');		                \n" +
                "				PREPARE stmt3 FROM @SQL3;                \n" +
                "				EXECUTE stmt3;                \n" +
                "  \n" +
                "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */                \n" +
                "  \n" +
                "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */                \n" +
                "  \n" +
                "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs                 \n" +
                "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN                \n" +
                "  \n" +
                "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                 \n" +
                "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'                 \n" +
                "								AND isAutoIncrement = 1 AND deletedAt IS NULL)                \n" +
                "							 and deletedAt IS NULL ');		                \n" +
                "					     PREPARE stmt4 FROM @SQL4;                \n" +
                "				             EXECUTE stmt4;                \n" +
                "					END IF;	                \n" +
                "				END IF;                \n" +
                "  \n" +
                "  \n" +
                "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN                \n" +
                "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)                 \n" +
                "						    AND deletedAt IS NULL');		                \n" +
                "				PREPARE stmt5 FROM @SQL5;                \n" +
                "				EXECUTE stmt5;                \n" +
                "  \n" +
                "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                 \n" +
                "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		                \n" +
                "				PREPARE stmt6 FROM @SQL6;                \n" +
                "				EXECUTE stmt6;                \n" +
                "  \n" +
                "  \n" +
                "			END IF;                \n" +
                "  \n" +
                "  \n" +
                "			SELECT * FROM tempDataElement;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempDataElement;                \n" +
                "		END IF;                \n" +
                "    DROP TABLE tempDataElement;                  \n" +
                "  \n" +
                "END IF;                \n" +
                "IF tableName='workorder_preprogcomp' THEN                \n" +
                "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                \n" +
                "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg                \n" +
                "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND                \n" +
                "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                \n" +
                "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "    SELECT * FROM  tempComponent;                \n" +
                "    SELECT TotalCount FROM  tempComponent;                \n" +
                "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			                \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete pre program component */          \n" +
                "			SELECT partNumber,(SELECT woNumber FROM workorder WHERE woID = woppc.woID),        \n" +
                "				(SELECT opName FROM workorder_operation WHERE woOPID = refStkWOOPID)        \n" +
                "			    INTO @lvPartNumber,@lvWoNumber,@lvOpName        \n" +
                "			FROM workorder_preprogcomp woppc          \n" +
                "			WHERE woPreProgCompID = IDs  AND deletedAt IS NULL;           \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Preprogram component deleted from work order\");          \n" +
                "			SET @lvEventDescription = CONCAT(\"Preprogram component \\\"\",@lvPartNumber,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.14,NULL,deletedBy,3);  /* 3 = DELETE */          \n" +
                "			/* [E] - Add Time line log for delete pre program component */         \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt2 FROM @SQL2;                \n" +
                "			EXECUTE stmt2;                \n" +
                "  \n" +
                "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where                 \n" +
                "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                \n" +
                "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		                \n" +
                "			PREPARE stmt3 FROM @SQL3;                \n" +
                "			EXECUTE stmt3;                \n" +
                "		SELECT                 \n" +
                "			*                \n" +
                "		FROM                \n" +
                "			tempComponent;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempComponent;                \n" +
                "		END IF;                \n" +
                "    DROP TABLE tempComponent;                  \n" +
                "END IF;                \n" +
                "IF tableName='component' THEN                \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                \n" +
                "		 UNION ALL                \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                \n" +
                "  \n" +
                "	  ) q');                \n" +
                "	  PREPARE stmt FROM @SQL;                \n" +
                "	   EXECUTE stmt;                \n" +
                "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN                \n" +
                "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempComponent;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempComponent;                \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempComponent;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"workorder_cluster\" THEN                 \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)                \n" +
                "		      ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN                \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete cluster */                \n" +
                "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster                \n" +
                "		WHERE clusterID = IDs AND deletedAt IS NULL;                \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder                \n" +
                "		WHERE woID = @lvWoID AND deletedAt IS NULL ;                \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");                \n" +
                "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		                \n" +
                "		/* [E] - Add Time line log for delete cluster */                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderCluster;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempWorkorderCluster;                \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempWorkorderCluster;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"workorder_operation\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)                \n" +
                "			 UNION ALL                \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		                 \n" +
                "		      ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN                \n" +
                "			 /* [S] - Add Time line log for delete work order operation */                \n" +
                "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName                \n" +
                "			FROM workorder_operation                 \n" +
                "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;                 \n" +
                "  \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");                \n" +
                "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		                \n" +
                "			/* [E] - Add Time line log for delete work order operation */                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                \n" +
                "		SET @SQl2 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                \n" +
                "		SET @SQl3 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                \n" +
                "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                \n" +
                "		SET @SQl5 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                \n" +
                "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                \n" +
                "		SET @SQl7 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		                \n" +
                "  \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation                \n" +
                "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;                \n" +
                "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		                \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation                \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			PREPARE stmt2 FROM @SQL2;                \n" +
                "			PREPARE stmt3 FROM @SQL3;                \n" +
                "			PREPARE stmt4 FROM @SQL4;                \n" +
                "			PREPARE stmt5 FROM @SQL5;                \n" +
                "			PREPARE stmt6 FROM @SQL6;                \n" +
                "			PREPARE stmt7 FROM @SQl7;                \n" +
                "			PREPARE stmt8 FROM @SQl7;                \n" +
                "			EXECUTE stmt1;                \n" +
                "			EXECUTE stmt2;                \n" +
                "			EXECUTE stmt3;                \n" +
                "			EXECUTE stmt4;                \n" +
                "			EXECUTE stmt5;                \n" +
                "			EXECUTE stmt6;                \n" +
                "			EXECUTE stmt7;                \n" +
                "			EXECUTE stmt8;                \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderOperation;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempWorkorderOperation;                \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempWorkorderOperation;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"workorder_operation_part\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                \n" +
                "		      ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN                \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete parts from work order */                \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                \n" +
                "		FROM workorder_operation                 \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                 \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts                \n" +
                "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;                 \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");                \n" +
                "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */                \n" +
                "		/* [E] - Add Time line log for delete parts from work order */                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_part set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderPart;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempWorkorderPart;                \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempWorkorderPart;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                \n" +
                "		      ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN                \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete Equipment from work order */                \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                \n" +
                "		FROM workorder_operation                 \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                 \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	                \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment                \n" +
                "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;                 \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");                \n" +
                "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                \n" +
                "		/* [E] -  Add Time line log for delete Equipment from work order */                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');                \n" +
                "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			PREPARE stmt2 FROM @SQL2;                \n" +
                "			EXECUTE stmt1;                \n" +
                "			EXECUTE stmt2;                \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderEquipment;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempWorkorderEquipment;                \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempWorkorderEquipment;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                \n" +
                "		      ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN                \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete Employees from work order */                \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                \n" +
                "		FROM workorder_operation                 \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                 \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees                \n" +
                "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;                 \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");                \n" +
                "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                \n" +
                "		/* [E] -  Add Time line log for delete Employee from work order */                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_employee set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderEmployee;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempWorkorderEmployee;                \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempWorkorderEmployee;                \n" +
                "  \n" +
                "END IF;                \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)                \n" +
                "		      ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN                \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete operations from cluster */                \n" +
                "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                \n" +
                "		FROM workorder_operation                 \n" +
                "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                 \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster                \n" +
                "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;                 \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");                \n" +
                "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                \n" +
                "		/* [E] -  Add Time line log for delete operations from cluster */		                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update workorder_operation_cluster set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                \n" +
                "  \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation                \n" +
                "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;                \n" +
                "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		                \n" +
                "		-- Added for update verify workorder status again after changes in workorder operation                \n" +
                "  \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			PREPARE stmt2 FROM @SQL2;                \n" +
                "			EXECUTE stmt1;                \n" +
                "			EXECUTE stmt2;                \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderOperationCluster;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempWorkorderOperationCluster;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempWorkorderOperationCluster;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"entity\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                \n" +
                "		     UNION ALL                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                \n" +
                "		     UNION ALL                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                \n" +
                "		    UNION ALL                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                \n" +
                "		      ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempEntity)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempEntity;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempEntity;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempEntity;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"salesordermst\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)                \n" +
                "		      ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete sales order mst */ 	        \n" +
                "			SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber        \n" +
                "			FROM salesordermst        \n" +
                "			WHERE FIND_IN_SET(id,IDs);        \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");          \n" +
                "			SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */          \n" +
                "			/* [E] - Add Time line log for delete sales order mst */	        \n" +
                "  \n" +
                "			SELECT * FROM tempSalesOrderMst;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempSalesOrderMst;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempSalesOrderMst;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"mfgcodemst\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)                \n" +
                "		      ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempMFGCodeMst;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempMFGCodeMst;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempMFGCodeMst;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                 \n" +
                "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)                \n" +
                "				and deletedAt IS NULL');		                \n" +
                "			PREPARE stmt2 FROM @SQL2;                \n" +
                "			EXECUTE stmt2;                \n" +
                "  \n" +
                "  \n" +
                "END IF;                \n" +
                "IF tableName=\"shippedassembly\" THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;        \n" +
                "			/* [S] - Add Time line log for delete shipped assembly */         \n" +
                "			SELECT GROUP_CONCAT(shippedqty) , workorderID  INTO @lvShippedqty,@lvWoID        \n" +
                "			FROM shippedassembly        \n" +
                "			WHERE FIND_IN_SET(id,IDs);        \n" +
                "  \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID ;        \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Shipped assembly deleted\");          \n" +
                "			SET @lvEventDescription = CONCAT(\"Shipped assembly for workorder \\\"\",@lvWoNumber,\"\\\" & quantity \\\"\",@lvShippedqty ,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,9,NULL,deletedBy,3);  /* 3 = DELETE */          \n" +
                "			/* [E] - Add Time line log for delete shipped assembly */ 		        \n" +
                "  \n" +
                "END IF;                \n" +
                "IF tableName=\"assemblymst\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                \n" +
                "		     UNION ALL                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                \n" +
                "		     UNION ALL                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                \n" +
                "		     UNION ALL                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                \n" +
                "		    UNION ALL                \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)                \n" +
                "		      ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempassemblymst;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempassemblymst;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempassemblymst;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"assembly_revisionmst\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND fromRevisionID IN(',IDs,') AND toRevisionID IN(',IDs,')  LIMIT 1)                \n" +
                "		     UNION ALL                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                \n" +
                "		     UNION ALL                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                \n" +
                "		     UNION ALL                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                \n" +
                "		    UNION ALL                \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)                \n" +
                "		      ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempassembly_revisionmst;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempassembly_revisionmst;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempassembly_revisionmst;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                \n" +
                "  \n" +
                "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1                 \n" +
                "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;                \n" +
                "  \n" +
                "  \n" +
                "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)                \n" +
                "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)                 \n" +
                "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1                 \n" +
                "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;                \n" +
                "  \n" +
                "	/* condition to check total serials of type greater than actual production qty */                \n" +
                "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1                \n" +
                "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)                 \n" +
                "		> IFNULL(vQty1,0)) THEN                \n" +
                "  \n" +
                "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */                \n" +
                "		IF(vQty1 IS NULL OR vQty1 = 0) THEN                 \n" +
                "  \n" +
                "			/* condition to check curr opis and status match with given delete serial */                \n" +
                "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1                \n" +
                "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN                \n" +
                "  \n" +
                "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                \n" +
                "				WHERE woTransSerialID = IDs;	                \n" +
                "  \n" +
                "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                 \n" +
                "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                \n" +
                "				ORDER BY woTransSerialID DESC LIMIT 1;                \n" +
                "  \n" +
                "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                \n" +
                "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	          \n" +
                "				/* [S] - Add Time line log for delete production serial from work order operation */ 	        \n" +
                "				SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");          \n" +
                "				SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
                "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */          \n" +
                "				/* [E] - Add Time line log for delete production serial from work order operation */ 				        \n" +
                "  \n" +
                "			ELSE                 \n" +
                "				SELECT 'not allowed';                \n" +
                "			END IF;                \n" +
                "  \n" +
                "  \n" +
                "		ELSE                 \n" +
                "  \n" +
                "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                \n" +
                "			WHERE woTransSerialID = IDs;	                \n" +
                "  \n" +
                "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                 \n" +
                "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                \n" +
                "			ORDER BY woTransSerialID DESC LIMIT 1;                \n" +
                "  \n" +
                "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                \n" +
                "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;        \n" +
                "			/* [S] - Add Time line log for delete production serial from work order operation */ 	        \n" +
                "			SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");          \n" +
                "			SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */          \n" +
                "			/* [E] - Add Time line log for delete production serial from work order operation */            \n" +
                "  \n" +
                "		END IF;	                \n" +
                "  \n" +
                "  \n" +
                "	ELSE                 \n" +
                "		SELECT 'not allowed';		                \n" +
                "	END IF;	                \n" +
                "  \n" +
                "  \n" +
                "END IF;                \n" +
                "IF tableName=\"br_label_template\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)                \n" +
                "		      ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempbr_label_template;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempbr_label_template;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempbr_label_template;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"measurement_types\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)                \n" +
                "		     UNION ALL                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempMeasurement_types;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempMeasurement_types;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempMeasurement_types;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"uoms\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg                 \n" +
                "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)                \n" +
                "            UNION ALL                \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg                 \n" +
                "            FROM unit_detail_formula WHERE deletedAt IS NULL AND unitID IN (',IDs,')  or toUnitID IN (',IDs,')  LIMIT 1)        \n" +
                "              UNION ALL              \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND uom IN(',IDs,') LIMIT 1)) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempUOMs;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempUOMs;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempUOMs;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"jobtypes\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                 \n" +
                "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempJobTypess;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempJobTypess;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempJobTypess;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"ordertype\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                 \n" +
                "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempOrderTypes;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempOrderTypes;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempOrderTypes;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"reasonmst\" THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "END IF;                \n" +
                "IF tableName='component_sid_stock' THEN	                \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)                \n" +
                "			UNION ALL                \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		                    \n" +
                "		    ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete component sid stock (receiving material) */ 	        \n" +
                "			SELECT GROUP_CONCAT(uid) INTO @lvUID  FROM component_sid_stock        \n" +
                "			WHERE FIND_IN_SET(id,IDs);	        \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Receiving material(s) deleted\");          \n" +
                "			SET @lvEventDescription = CONCAT(\"Receiving material(s) of UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7,NULL,deletedBy,3);  /* 3 = DELETE */          \n" +
                "			/* [E] - Add Time line log for delete component sid stock (receiving material) */ 	        \n" +
                "  \n" +
                "			SELECT * FROM tempcomponentsidstock;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempcomponentsidstock;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempcomponentsidstock;                 \n" +
                "  \n" +
                "END IF;                \n" +
                "IF tableName='component_sid_stock_dataelement_values' THEN	                \n" +
                "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;            \n" +
                "			/* [S] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	        \n" +
                "			SELECT GROUP_CONCAT(dataelementid), GROUP_CONCAT(refsidid) INTO @lvCSDlIDs,@lvRefsidid           \n" +
                "			FROM component_sid_stock_dataelement_values        \n" +
                "			WHERE FIND_IN_SET(id,IDs);        \n" +
                "  \n" +
                "			SELECT uid INTO @lvUID FROM component_sid_stock WHERE id = @lvRefsidid   ;        \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(dataElementName) INTO @lvDlNames        \n" +
                "			FROM dataelement         \n" +
                "			WHERE FIND_IN_SET(dataElementID,@lvCSDlIDs);	        \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Data field(s) of receiving material deleted\");          \n" +
                "			SET @lvEventDescription = CONCAT(\"Data field(s) \\\"\",@lvDlNames,\"\\\" of receiving material with UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7.01,NULL,deletedBy,3);  /* 3 = DELETE */          \n" +
                "			/* [E] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	        \n" +
                "END IF;                \n" +
                "IF tableName='chart_templatemst' THEN	                \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)                \n" +
                "		    ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempcharttemplatemst;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempcharttemplatemst;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempcharttemplatemst;                 \n" +
                "  \n" +
                "END IF;                \n" +
                "IF tableName=\"shipping_request\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg                 \n" +
                "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)                \n" +
                "            UNION ALL                \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg                 \n" +
                "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;          \n" +
                "			/* [S] - Add Time line log for delete shipment request */         \n" +
                "			SELECT GROUP_CONCAT(note) INTO @lvNotes FROM Shipping_Request        \n" +
                "			WHERE FIND_IN_SET(id,IDs);	        \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Shipment request deleted\");          \n" +
                "			SET @lvEventDescription = CONCAT(\"Shipment request of \\\"\",@lvNotes,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,8,NULL,deletedBy,3);  /* 3 = DELETE */          \n" +
                "			/* [E] - Add Time line log for delete shipment request */         \n" +
                "  \n" +
                "			SELECT * FROM tempShippingRequest;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempShippingRequest;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempShippingRequest;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg                 \n" +
                "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)                \n" +
                "            UNION ALL                \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg                 \n" +
                "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempChartRawdataCategory;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempChartRawdataCategory;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempChartRawdataCategory;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"component_standard\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg                 \n" +
                "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempcomponentStandard;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempcomponentStandard;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempcomponentStandard;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"component_standard_class\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg                 \n" +
                "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');                \n" +
                "           /*  UNION ALL                \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg                 \n" +
                "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt2 FROM @SQL2;                \n" +
                "			EXECUTE stmt2;                \n" +
                "  \n" +
                "			SELECT * FROM tempcomponentStandardClass;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempcomponentStandardClass;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempcomponentStandardClass;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"rfq_lineitems\" THEN                \n" +
                "		SELECT 0 TotalCount, '' Message;                \n" +
                "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "		PREPARE stmt1 FROM @SQL1;                \n" +
                "		EXECUTE stmt1;                            \n" +
                "END IF;                \n" +
                "IF tableName=\"requirement\" THEN                \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg                 \n" +
                "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM temprequirements)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM temprequirements;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM temprequirements;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE temprequirements;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN           \n" +
                "		/* [S] - Add Time line log for delete work order transaction packing details */          \n" +
                "		SELECT  (SELECT woNumber FROM workorder WHERE woID = wtpd.woID),        \n" +
                "			(SELECT opName FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL),        \n" +
                "			(SELECT woOPID FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL)        \n" +
                "			INTO @lvWoNumber , @lvOpName ,@lvWoOPID         \n" +
                "		FROM workorder_trans_packagingdetail wtpd         \n" +
                "		WHERE wtpd.woTransPackagingDetailID = IDs AND wtpd.deletedAt IS NULL  /* here ids multiple but need one record only so */;        \n" +
                "		SET @lvEventTitle = CONCAT(\"Box serial details deleted from work order operation\");          \n" +
                "		SET @lvEventDescription = CONCAT(\"Box serial details deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	          \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.17,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */          \n" +
                "		/* [E] - Add Time line log for delete work order transaction packing details */         \n" +
                "  \n" +
                "		SELECT 0 TotalCount, '' Message;                \n" +
                "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		                \n" +
                "		PREPARE stmt1 FROM @SQL1;                \n" +
                "		EXECUTE stmt1;                            \n" +
                "END IF;                \n" +
                "IF tableName=\"customer_addresses\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)                \n" +
                "			UNION ALL                \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                 \n" +
                "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempcustomer_addresses;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempcustomer_addresses;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempcustomer_addresses;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"rfqforms\" THEN                \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg                 \n" +
                "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in                 \n" +
                "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');                \n" +
                "  \n" +
                "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in                 \n" +
                "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		                \n" +
                "  \n" +
                "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in                 \n" +
                "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		                \n" +
                "  \n" +
                "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in                 \n" +
                "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		                \n" +
                "  \n" +
                "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in                 \n" +
                "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');                \n" +
                "  \n" +
                "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		                \n" +
                "  \n" +
                "            PREPARE stmt1 FROM @SQL1;                \n" +
                "			PREPARE stmt2 FROM @SQL2;                \n" +
                "            PREPARE stmt3 FROM @SQL3;                \n" +
                "			PREPARE stmt4 FROM @SQL4;                \n" +
                "            PREPARE stmt5 FROM @SQL5;                \n" +
                "			PREPARE stmt6 FROM @SQL6;                \n" +
                "  \n" +
                "			EXECUTE stmt1;                \n" +
                "			EXECUTE stmt2;                \n" +
                "            EXECUTE stmt3;                \n" +
                "			EXECUTE stmt4;                \n" +
                "            EXECUTE stmt5;                \n" +
                "			EXECUTE stmt6;                \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SELECT * FROM temprfqformss;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM temprfqformss;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE temprfqformss;                 \n" +
                "END IF;                \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                \n" +
                "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg                 \n" +
                "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1)        \n" +
                "             UNION ALL              \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mountingTypeID IN(',IDs,') LIMIT 1)) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM temprfqpartcategory;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM temprfqpartcategory;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE temprfqpartcategory;                 \n" +
                "  \n" +
                "END IF;                \n" +
                "IF tableName=\"who_bought_who\" THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "END IF;                \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                \n" +
                "			SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqparttypemst as                \n" +
                "				 SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "			    FROM                 \n" +
                "			    (           \n" +
                "	            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM         \n" +
                "	            component WHERE deletedAt IS NULL AND partTypeID IN(',IDs,') LIMIT 1)) q');                \n" +
                "	  	        PREPARE stmt FROM @SQL;                \n" +
                "		        EXECUTE stmt;          \n" +
                "	          IF (SELECT TotalCount FROM temprfqparttypemst)=0 THEN            \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,',         \n" +
                "	            deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "	  				PREPARE stmt1 FROM @SQL1;                \n" +
                "						EXECUTE stmt1;          \n" +
                "	            	SELECT * FROM temprfqparttypemst;                \n" +
                "			ELSE                \n" +
                "				SELECT * FROM temprfqparttypemst;                \n" +
                "  \n" +
                "			END IF;                \n" +
                "            DROP TABLE temprfqparttypemst;                           \n" +
                "  \n" +
                "END IF;                \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "END IF;                \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "END IF;          \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempQuotecharges_dynamic_fields_mst as                \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                \n" +
                "		    FROM                 \n" +
                "		    (                \n" +
                "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                 \n" +
                "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "		IF (SELECT TotalCount FROM tempQuotecharges_dynamic_fields_mst)=0 THEN                \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update quotecharges_dynamic_fields_mst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "  \n" +
                "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                \n" +
                "		ELSE                \n" +
                "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                \n" +
                "  \n" +
                "		END IF;                \n" +
                "		DROP TABLE tempQuotecharges_dynamic_fields_mst;                 \n" +
                "END IF;                     \n" +
                "END ;  \n" +
           //  /* **************************** Add Script Version -> 16-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (97,'1.00','V1','Delete quote dynamic field - Kinjal'," + userid + ");"
            );
            break;
        case 97:
            allDbChangesArray.push(
            /* **************************** New Script -> 16-08-2018  *********************************** */
            "INSERT INTO identity (`type`,`maxValue`,isDeleted,createdBy) VALUES   \n" +
            "('AliasGroupID',0,0,'1'),   \n" +
            "('PackagingGroupID',0,0,'1'),    \n" +
            "('AlternateGroupID',0,0,'1');    \n" +
            "UPDATE identity SET `maxValue`= (  \n" +
            "SELECT aliasgroupID FROM  \n" +
            "(  \n" +
            "(SELECT (MAX(IFNULL(a.aliasgroupID,0))+1) aliasgroupID FROM component_alias a LIMIT 1)  \n" +
            "UNION  \n" +
            "SELECT 1 aliasgroupID) as a order by aliasgroupID desc LIMIT 1  \n" +
            ")   \n" +
            "WHERE `type`='AliasGroupID';   \n" +
            "UPDATE identity SET `maxValue`= (  \n" +
            "SELECT aliasgroupID FROM  \n" +
            "(  \n" +
            "(SELECT (MAX(IFNULL(a.aliasgroupID,0))+1) aliasgroupID FROM component_packagingalias a LIMIT 1)  \n" +
            "UNION  \n" +
            "SELECT 1 aliasgroupID) as a order by aliasgroupID desc LIMIT 1  \n" +
            ")   \n" +
            "WHERE `type`='PackagingGroupID';    \n" +
            "UPDATE identity SET `maxValue`= (  \n" +
            "SELECT aliasgroupID FROM  \n" +
            "(  \n" +
            "(SELECT (MAX(IFNULL(a.aliasgroupID,0))+1) aliasgroupID FROM component_alternatepn a LIMIT 1)  \n" +
            "UNION  \n" +
            "SELECT 1 aliasgroupID) as a order by aliasgroupID desc LIMIT 1  \n" +
            ")   \n" +
            "WHERE `type`='AlternateGroupID';   \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_GetmaxComponentGroupValue`;   \n" +
            "CREATE PROCEDURE `Sproc_GetmaxComponentGroupValue`(  \n" +
            "	IN maxType VARCHAR(255)  \n" +
            "    )   \n" +
            "BEGIN  \n" +
            " 	SELECT `maxValue`,id FROM `identity` WHERE `type`= maxType AND isdeleted=0;  \n" +
            "	UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,0)+1 WHERE `type`=maxType AND isdeleted=0;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 16-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (98,'1.00','V1','Added AliasGroupID,PackagingGroupID and AlternateID in identity-Champak'," + userid + ");"
            );
            break;
        case 98:
            allDbChangesArray.push(
            /* **************************** New Script -> 16-08-2018  *********************************** */
            "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BI_TimeLineLog` ;  \n" +
            "CREATE TRIGGER `Trg_BI_TimeLineLog` BEFORE INSERT ON `timeline`   \n" +
            "    FOR EACH ROW BEGIN    \n" +
            "	DECLARE lvRefTransID INT(11);    \n" +
            "	DECLARE lvGencFileOwnerType VARCHAR(255);    \n" +
            "	DECLARE lvGencOriginalName VARCHAR(255);	    \n" +
            "	DECLARE lvWoID INT(11);	    \n" +
            "	DECLARE lvWoNumber VARCHAR(255);    \n" +
            "	DECLARE lvOpName VARCHAR(255);    \n" +
            "	DECLARE lvActionType VARCHAR(50);    \n" +
            "	DECLARE lvClusterName VARCHAR(255);    \n" +
            "	DECLARE lvPartNumber VARCHAR(255);    \n" +
            "	DECLARE lvAssetName VARCHAR(255);     \n" +
            "	DECLARE lvEmpName VARCHAR(255);     \n" +
            "	DECLARE lvEcoNumber VARCHAR(255);    \n" +
            "	DECLARE lvClusterID INT(11);    \n" +
            "	DECLARE lvWoOpIDs VARCHAR(5000);    \n" +
            "	DECLARE lvPartID INT(11);    \n" +
            "	DECLARE lvEqpID INT(11);    \n" +
            "	DECLARE lvEmpID INT(11);    \n" +
            "	DECLARE lvEntityID INT(11);    \n" +
            "	DECLARE lvRefParentId INT(11);    \n" +
            "	DECLARE lvGencFolderName VARCHAR(255);    \n" +
            "	DECLARE lvSalesOrderNumber VARCHAR(100);  \n" +
            "	DECLARE lvUid INT(11);  \n" +
            "  \n" +
            "       CASE  NEW.refTransTable    \n" +
            "  \n" +
            "	 WHEN \"genericfiles\" THEN     \n" +
            "  \n" +
            "		SELECT refTransID,gencFileOwnerType,gencOriginalName,refParentId     \n" +
            "				INTO lvRefTransID,lvGencFileOwnerType,lvGencOriginalName,lvRefParentId    \n" +
            "		FROM genericfiles WHERE gencFileID = NEW.refTransID ;    \n" +
            "  \n" +
            "  \n" +
            "	       IF (lvRefTransID IS NOT NULL AND lvGencFileOwnerType IS NOT NULL AND NEW.eventAction IS NOT NULL) THEN    \n" +
            "  \n" +
            "	       SELECT CASE NEW.eventAction WHEN 1 THEN \"uploaded\" WHEN 2 THEN \"updated\" WHEN 3 THEN \"deleted\"    \n" +
            "				WHEN 4 THEN \"downloaded\" WHEN 5 THEN \"moved to folder\" WHEN 6 THEN \"moved to other folder\"    \n" +
            "				WHEN 7 THEN \"viewed\" WHEN 8 THEN \"opened in edit mode\"    \n" +
            "				END AS actionType INTO lvActionType;    \n" +
            "  \n" +
            "		CASE  lvGencFileOwnerType    \n" +
            "		   WHEN 'workorder' THEN  	    \n" +
            "			SELECT woID, woNumber INTO lvWoID,lvWoNumber FROM workorder WHERE woID = lvRefTransID ;    \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType, \" for work order\") ;    \n" +
            "  \n" +
            "			IF(NEW.eventAction = 5) THEN    \n" +
            "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ' , lvActionType,' \"',    \n" +
            "			  (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for work order ',lvWoNumber,' by ',    \n" +
            "								(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			ELSE    \n" +
            " 			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ', lvActionType,' for work order ',lvWoNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			END IF;    \n" +
            "  \n" +
            "			SET NEW.eventType = 4.22;    \n" +
            "			IF(NEW.eventAction <> 3) THEN    \n" +
            "			  SET NEW.url = CONCAT(\"workorder/manage/documents/\",lvWoID) ;    \n" +
            "			END IF;    \n" +
            "  \n" +
            "		   WHEN 'workorder_operation' THEN  	    \n" +
            "			SELECT woop.opName,(SELECT woNumber FROM workorder WHERE woID = woop.woID LIMIT 1) AS woNumber INTO lvOpName,lvWoNumber     \n" +
            "			FROM workorder_operation woop WHERE woop.woOPID = lvRefTransID ;    \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType,\" for work order operation\") ;    \n" +
            "  \n" +
            "			IF(NEW.eventAction = 5) THEN    \n" +
            "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ' , lvActionType,' \"',    \n" +
            "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;	    \n" +
            "			ELSE    \n" +
            "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ', lvActionType,' for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			END IF;				    \n" +
            "  \n" +
            "			SET NEW.eventType = 4.23;				    \n" +
            "			IF(NEW.eventAction <> 3) THEN				    \n" +
            "			  SET NEW.url = CONCAT(\"workorder/operation/documents/\",lvRefTransID) ;    \n" +
            "			END IF;    \n" +
            "  \n" +
            "		   WHEN 'eco_request' THEN  	    \n" +
            "			SELECT er.ecoNumber ,er.woID,(SELECT woNumber FROM workorder WHERE woID = er.woID LIMIT 1) AS woNumber INTO lvEcoNumber,lvWoID,lvWoNumber     \n" +
            "			FROM eco_request er WHERE er.ecoReqID = lvRefTransID ;    \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType,\" for eco request in work order\") ;    \n" +
            "  \n" +
            "			IF(NEW.eventAction = 5) THEN			    \n" +
            "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ' , lvActionType,' \"',    \n" +
            "			   (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			ELSE    \n" +
            "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ',lvActionType,' for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			END IF;		    \n" +
            "  \n" +
            "			SET NEW.eventType = 4.24;				    \n" +
            "			IF(NEW.eventAction <> 3) THEN				    \n" +
            "			  SET NEW.url = CONCAT(\"workorder/workorders/ecorequest/\",lvWoID,\"/\",lvRefTransID) ;    \n" +
            "			END IF;    \n" +
            "  \n" +
            "		  WHEN 'salesorder' THEN    \n" +
            "  \n" +
            "		   	SELECT salesOrderNumber INTO lvSalesOrderNumber FROM salesordermst WHERE id = lvRefTransID ;    \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType, \" for sales order\") ;    \n" +
            "  \n" +
            "			IF(NEW.eventAction = 5) THEN    \n" +
            "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ' , lvActionType,' \"',    \n" +
            "			  (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for sales order ',lvSalesOrderNumber,' by ',    \n" +
            "								(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			ELSE    \n" +
            " 			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ', lvActionType,' for sales order ',lvSalesOrderNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			END IF;    \n" +
            "  \n" +
            "			SET NEW.eventType = 6.01;    \n" +
            "			IF(NEW.eventAction <> 3) THEN    \n" +
            "			  SET NEW.url = CONCAT(\"transaction/manage/\",lvRefTransID) ;    \n" +
            "			END IF;   \n" +
            "  \n" +
            "  \n" +
            "		  WHEN 'component_sid_stock' THEN    \n" +
            "  \n" +
            "		   	SELECT uid INTO lvUid FROM component_sid_stock WHERE id = lvRefTransID ;    \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType, \" for receiving material\") ;    \n" +
            "  \n" +
            " 			SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ', lvActionType,' for receiving material of UID \"',lvUid,'\" by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "  \n" +
            "			SET NEW.eventType = 7.02;    \n" +
            "			IF(NEW.eventAction <> 3) THEN    \n" +
            "			  SET NEW.url = CONCAT(\"transaction/receivingmaterial/managereceivingmaterial/\",lvRefTransID) ;    \n" +
            "			END IF; 	 		  \n" +
            "  \n" +
            "  		   ELSE     \n" +
            "			BEGIN END;  	    \n" +
            " 		END CASE;	    \n" +
            "  \n" +
            "	       END IF;    \n" +
            "  \n" +
            "	WHEN \"generic_folder\" THEN     \n" +
            "  \n" +
            "		SELECT refTransID,gencFileOwnerType,gencFolderName,refParentId     \n" +
            "					INTO lvRefTransID,lvGencFileOwnerType,lvGencFolderName,lvRefParentId     \n" +
            "		FROM generic_folder WHERE gencFolderID = NEW.refTransID ;    \n" +
            "  \n" +
            "    	   IF (lvRefTransID IS NOT NULL AND lvGencFileOwnerType IS NOT NULL AND NEW.eventAction IS NOT NULL) THEN    \n" +
            "  \n" +
            "		SELECT CASE NEW.eventAction WHEN 1 THEN \"created\" WHEN 2 THEN \"renamed\" WHEN 3 THEN \"removed\"     \n" +
            "		WHEN 6 THEN \"moved to other folder\" END AS actionType INTO lvActionType;    \n" +
            "  \n" +
            "		CASE  lvGencFileOwnerType    \n" +
            "		   WHEN 'workorder' THEN  	    \n" +
            "  \n" +
            "			SELECT woID, woNumber INTO lvWoID,lvWoNumber FROM workorder WHERE woID = lvRefTransID ;    \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document folder \",lvActionType, \" for work order\") ;    \n" +
            "  \n" +
            "			IF(NEW.eventAction = 6) THEN    \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' \"',    \n" +
            "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for work order ',lvWoNumber,' by ',    \n" +
            "								(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			ELSE     \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' for work order ',lvWoNumber,' by ',    \n" +
            "								(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;					    \n" +
            "			END IF;    \n" +
            "  \n" +
            "			SET NEW.eventType = 4.25;    \n" +
            "			IF(NEW.eventAction <> 3) THEN    \n" +
            "			  SET NEW.url = CONCAT(\"workorder/manage/documents/\",lvWoID) ;    \n" +
            "			END IF;    \n" +
            "  \n" +
            "		  WHEN 'workorder_operation' THEN  	    \n" +
            "  \n" +
            "			SELECT woop.opName,(SELECT woNumber FROM workorder WHERE woID = woop.woID LIMIT 1) AS woNumber INTO lvOpName,lvWoNumber     \n" +
            "			FROM workorder_operation woop WHERE woop.woOPID = lvRefTransID ;    \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document folder \",lvActionType, \" for work order operation\") ;    \n" +
            "  \n" +
            "			IF(NEW.eventAction = 6) THEN    \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' \"',    \n" +
            "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			ELSE     \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,'     \n" +
            "			     for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			END IF;    \n" +
            "  \n" +
            "			SET NEW.eventType = 4.26;    \n" +
            "			IF(NEW.eventAction <> 3) THEN    \n" +
            "			   SET NEW.url = CONCAT(\"workorder/operation/documents/\",lvRefTransID) ;    \n" +
            "			END IF;    \n" +
            "  \n" +
            "		  WHEN 'eco_request' THEN  	    \n" +
            "  \n" +
            "			SELECT er.ecoNumber ,er.woID,(SELECT woNumber FROM workorder WHERE woID = er.woID LIMIT 1) AS woNumber INTO lvEcoNumber,lvWoID,lvWoNumber     \n" +
            "			FROM eco_request er WHERE er.ecoReqID = lvRefTransID ;			    \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document folder \",lvActionType,\" for eco request in work order\") ;    \n" +
            "  \n" +
            "			IF(NEW.eventAction = 6) THEN    \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' \"',    \n" +
            "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			ELSE    \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,'    \n" +
            "			    for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;				    \n" +
            "			END IF;    \n" +
            "  \n" +
            "			SET NEW.eventType = 4.27;    \n" +
            "			IF(NEW.eventAction <> 3) THEN    \n" +
            "			   SET NEW.url = CONCAT(\"workorder/workorders/ecorequest/\",lvWoID,\"/\",lvRefTransID) ;    \n" +
            "			END IF;	    \n" +
            "  \n" +
            "		  WHEN 'salesorder' THEN    \n" +
            "  \n" +
            "		   	SELECT salesOrderNumber INTO lvSalesOrderNumber FROM salesordermst WHERE id = lvRefTransID ;    \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document folder \",lvActionType, \" for sales order\") ;    \n" +
            "  \n" +
            "			IF(NEW.eventAction = 6) THEN    \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' \"',    \n" +
            "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for sales order \"',lvSalesOrderNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			ELSE    \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,'    \n" +
            "			    for sales order \"',lvSalesOrderNumber,'\" by ',(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;				    \n" +
            "			END IF;  			  \n" +
            "  \n" +
            "			SET NEW.eventType = 6.02;    \n" +
            "			IF(NEW.eventAction <> 3) THEN    \n" +
            "			  SET NEW.url = CONCAT(\"transaction/manage/\",lvRefTransID) ;    \n" +
            "			END IF;  	  \n" +
            "		   ELSE     \n" +
            "			BEGIN END;  		    \n" +
            "  \n" +
            "		   END CASE;	    \n" +
            "  \n" +
            "	   END IF;		    \n" +
            "  \n" +
            "  \n" +
            "	WHEN \"workorder_operation_cluster\" THEN     \n" +
            "		IF(NEW.eventAction = 1 OR NEW.eventAction = 2 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN    \n" +
            "  \n" +
            "			SELECT CASE NEW.eventAction WHEN 1 THEN \"moved\" WHEN 2 THEN \"moved\" END AS actionType INTO lvActionType;		    \n" +
            "  \n" +
            "			SELECT  clusterID,GROUP_CONCAT(woOPID) INTO lvClusterID,lvWoOpIDs    \n" +
            "			FROM  workorder_operation_cluster    \n" +
            "			WHERE FIND_IN_SET(woClusterID,NEW.refTransID);     \n" +
            "  \n" +
            "			SELECT clusterName,woID INTO lvClusterName,lvWoID FROM workorder_cluster WHERE clusterID = lvClusterID ;    \n" +
            "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;    \n" +
            "  \n" +
            "			SELECT GROUP_CONCAT(opName) INTO lvOpName    \n" +
            "			FROM workorder_operation    \n" +
            "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);    \n" +
            "  \n" +
            "			SET NEW.eventTitle = CONCAT(\"Operation(s) \",lvActionType,\" to cluster in work order\") ;    \n" +
            "			SET NEW.eventDescription = CONCAT('Operation(s) \"',lvOpName ,'\" ',lvActionType,' to cluster \"',lvClusterName,'\" in work order ',lvWoNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "		END IF;    \n" +
            "  \n" +
            "	WHEN \"workorder_operation_part\" THEN 	    \n" +
            "		IF(NEW.eventAction = 1 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN    \n" +
            "  \n" +
            "			SELECT CASE NEW.eventAction WHEN 1 THEN \"added\" END AS actionType INTO lvActionType;			    \n" +
            "  \n" +
            "			SELECT woID,partID,GROUP_CONCAT(woOPID) INTO lvWoID,lvPartID,lvWoOpIDs    \n" +
            "			FROM  workorder_operation_part    \n" +
            "			WHERE FIND_IN_SET(woOPPartID,NEW.refTransID);     \n" +
            "  \n" +
            "			SELECT partNumber INTO lvPartNumber FROM parts WHERE partID = lvPartID;    \n" +
            "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;    \n" +
            "  \n" +
            "			SELECT GROUP_CONCAT(opName) INTO lvOpName    \n" +
            "			FROM workorder_operation    \n" +
            "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);    \n" +
            "  \n" +
            "  \n" +
            "			SET NEW.eventTitle = CONCAT(\"Supply & Material \",lvActionType,\" to work order operation(s)\") ;    \n" +
            "			SET NEW.eventDescription = CONCAT('Supply & Material \"',lvPartNumber ,'\" ',lvActionType,' to Operation(s) \"',lvOpName,'\" in work order ',lvWoNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			SET NEW.url = CONCAT(\"workorder/manage/parts/\",lvWoID) ;    \n" +
            "  \n" +
            "		END IF;    \n" +
            "  \n" +
            "	WHEN \"workorder_operation_equipment\" THEN 	    \n" +
            "		IF(NEW.eventAction = 1 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN    \n" +
            "  \n" +
            "			SELECT CASE NEW.eventAction WHEN 1 THEN \"added\" END AS actionType INTO lvActionType;			    \n" +
            "  \n" +
            "			SELECT woID,eqpID,GROUP_CONCAT(woOPID) INTO lvWoID,lvEqpID,lvWoOpIDs    \n" +
            "			FROM  workorder_operation_equipment    \n" +
            "			WHERE FIND_IN_SET(woOpEqpID,NEW.refTransID);     \n" +
            "  \n" +
            "			SELECT assetName INTO lvAssetName FROM equipment WHERE eqpID = lvEqpID;    \n" +
            "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;    \n" +
            "  \n" +
            "			SELECT GROUP_CONCAT(opName) INTO lvOpName    \n" +
            "			FROM workorder_operation    \n" +
            "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);    \n" +
            "  \n" +
            "  \n" +
            "			SET NEW.eventTitle = CONCAT(\"Equipment & Tools \",lvActionType,\" to work order operation(s)\") ;    \n" +
            "			SET NEW.eventDescription = CONCAT('Equipment & Tools \"',lvAssetName ,'\" ',lvActionType,' to Operation(s) \"',lvOpName,'\" in work order ',lvWoNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			SET NEW.url = CONCAT(\"workorder/manage/equipments/\",lvWoID) ;    \n" +
            "  \n" +
            "		END IF;	    \n" +
            "	WHEN \"workorder_operation_employee\" THEN 	    \n" +
            "		IF(NEW.eventAction = 1 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN    \n" +
            "  \n" +
            "			SELECT CASE NEW.eventAction WHEN 1 THEN \"added\" END AS actionType INTO lvActionType;			    \n" +
            "  \n" +
            "			SELECT woID,employeeID,GROUP_CONCAT(woOPID) INTO lvWoID,lvEmpID,lvWoOpIDs    \n" +
            "			FROM  workorder_operation_employee    \n" +
            "			WHERE FIND_IN_SET(woOpEmployeeID,NEW.refTransID);     \n" +
            "  \n" +
            "			SELECT CONCAT(firstName,\" \",lastName) INTO lvEmpName FROM employees WHERE id=lvEmpID;    \n" +
            "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;    \n" +
            "  \n" +
            "			SELECT GROUP_CONCAT(opName) INTO lvOpName    \n" +
            "			FROM workorder_operation    \n" +
            "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);    \n" +
            "  \n" +
            "  \n" +
            "			SET NEW.eventTitle = CONCAT(\"Employee \",lvActionType,\" to work order operation(s)\") ;    \n" +
            "			SET NEW.eventDescription = CONCAT('Employee \"',lvEmpName ,'\" ',lvActionType,' to Operation(s) \"',lvOpName,'\" in work order ',lvWoNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			SET NEW.url = CONCAT(\"workorder/manage/employees/\",lvWoID) ;    \n" +
            "  \n" +
            "		END IF;	    \n" +
            "  \n" +
            "	WHEN \"dataelement_transactionvalues\" THEN 	    \n" +
            "  \n" +
            "	    IF(NEW.eventAction = 2 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN    \n" +
            "  \n" +
            "		SELECT entityID,RefTransID INTO lvEntityID,lvRefTransID    \n" +
            "		FROM dataelement_transactionvalues    \n" +
            "		WHERE dataElementTransID = NEW.refTransID     \n" +
            "		LIMIT 1;  \n" +
            "  \n" +
            "		SELECT CASE NEW.eventAction WHEN 2 THEN \"updated\" END AS actionType INTO lvActionType;    \n" +
            "  \n" +
            "		CASE  lvEntityID    \n" +
            "		   WHEN \"-7\" THEN  /* -7 --> work order */    \n" +
            "			SELECT woNumber,lvWoID INTO lvWoNumber FROM workorder WHERE woID = lvRefTransID;     \n" +
            "			SET NEW.eventTitle = CONCAT(\"Other details \",lvActionType,\" for work order\") ;    \n" +
            "			SET NEW.eventDescription = CONCAT(\"Other details \",lvActionType,\" for work order \",lvWoNumber,\" by \",    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),\".\") ;    \n" +
            "			SET NEW.url = CONCAT(\"workorder/manage/otherdetails/\",lvRefTransID) ;    \n" +
            "			SET NEW.eventType = 4.20;    \n" +
            "		   WHEN \"-1\" THEN  /* -1 --> work order operation */    \n" +
            "  \n" +
            "			SELECT (SELECT woNumber FROM workorder wo WHERE woID = woop.woID),woop.opName    \n" +
            "			INTO lvWoNumber,lvOpName     \n" +
            "			FROM workorder_operation woop WHERE woop.woOPID = lvRefTransID;     \n" +
            "  \n" +
            "			SET NEW.eventTitle = CONCAT(\"Other details \",lvActionType,\" for work order operation\") ;    \n" +
            "			SET NEW.eventDescription = CONCAT('Other details ',lvActionType,' for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			SET NEW.url = CONCAT(\"workorder/operation/otherdetails/\",lvRefTransID) ;	    \n" +
            "			SET NEW.eventType = 4.21;    \n" +
            "  \n" +
            "		  WHEN \"-10\" THEN  /* -10 --> sales order */    \n" +
            "  \n" +
            "			SELECT salesOrderNumber INTO lvSalesOrderNumber FROM salesordermst WHERE id = lvRefTransID ;   \n" +
            "  \n" +
            "			SET NEW.eventTitle = CONCAT(\"Other details \",lvActionType,\" for sales order\") ;    \n" +
            "			SET NEW.eventDescription = CONCAT('Other details ',lvActionType,' for sales order \"',lvSalesOrderNumber,'\" by ',    \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;    \n" +
            "			SET NEW.url = CONCAT(\"transaction/manage/\",lvRefTransID) ;	    \n" +
            "			SET NEW.eventType = 6.03;    \n" +
            "  \n" +
            "		   ELSE     \n" +
            "			BEGIN END;  	    \n" +
            "		END CASE;	    \n" +
            "	    END IF;	   \n" +
            "  \n" +
            "  \n" +
            "	ELSE     \n" +
            "		BEGIN END;     \n" +
            "  \n" +
            "	END CASE;    \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 16-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (99,'1.00','V1',' Trigger Trg_BI_TimeLineLog - KETAN '," + userid + ");"
          );
            break;
        case 99:
            allDbChangesArray.push(
            /* **************************** New Script -> 17-08-2018  *********************************** */
           "INSERT INTO systemconfigrations(`key`,`values`,clusterName,isEncrypted,isActive,isDeleted,createdBy,isEditable)  \n" +
"VALUES  \n" +
"('DigiKeyCustomeID','3273576','DigiKey',0,1,0,'1',1);  \n" +
            /* **************************** Add Script Version -> 17-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (100,'1.00','V1','Added Customer id in system configuration-Champak'," + userid + ");"
            );
            break;
        case 100:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-08-2018  *********************************** */
                "UPDATE page_detail   \n" +
                "SET pageName = 'Chart Raw Data Category'   \n" +
                "WHERE pageName = 'Chart Rawdata Category';  \n" +
                "UPDATE page_detail   \n" +
                "SET pageName = 'Manage Work Order Invite People'  \n" +
                "WHERE pageName = 'Manage Work Order Invitepeople';  \n" +
                "UPDATE page_detail   \n" +
                "SET pageName = 'Manage Work Order Operation Data Fields'   \n" +
                "WHERE pageName = 'Manage Work Order Operation datafields';  \n" +
                "UPDATE page_detail   \n" +
                "SET pageName = 'Manage Work Order Operation First Article'   \n" +
                "WHERE pageName = 'Manage Work Order Operation firstarticle';  \n" +
                "UPDATE page_detail   \n" +
                "SET pageName = 'Manage Work Order Operation Other Details'   \n" +
                "WHERE pageName = 'Manage Work Order Operation OtherDetails';  \n" +
                "UPDATE page_detail   \n" +
                "SET pageName = 'Manage Work Order Shipping Details'   \n" +
                "WHERE pageName = 'Manage Work Order Shippingdetails';  \n" +
                /* **************************** Add Script Version -> 17-08-2018 *********************************** */
              "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
              "VALUES (101,'1.00','V1','page names updated-Kinjal'," + userid + ");"
                );
            break;
        case 101:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-08-2018  *********************************** */
               "SET sql_mode='NO_AUTO_VALUE_ON_ZERO';  \n" +
                "INSERT INTO mfgcodemst  \n" +
                "(`id`, `mfgCode`, `isDeleted`, `createdAt`, `createdBy`, `mfgType`)  \n" +
                "SELECT * FROM  \n" +
                "(SELECT 0 id, 'FLEXTRON' mfgCode, '0' isDeleted, utc_timestamp() createdAt, 1 createdBy, 'MFG' mfgType) as a  \n" +
                "WHERE 'FLEXTRON' NOT IN (SELECT 'FLEXTRON' FROM mfgcodemst a WHERE a.mfgCode = 'FLEXTRON' AND a.isDeleted = 0) LIMIT 1;  \n" +
                "  \n" +
                "INSERT INTO `component`  \n" +
                "(`id`, `PID`, `mfgPN`, `mfgcodeID`, `minQty`, `maxQty`,  \n" +
                "`packageQty`, `isDeleted`, `createdBy`, `createdAt`, `PIDCode`, `isGoodPart`)  \n" +
                "SELECT * FROM  \n" +
                "(SELECT 0 id, 0 PID, 'NOT-A-COMPONENT' mfgPN,   \n" +
                "(SELECT a.id FROM mfgcodemst a WHERE a.mfgCode = 'FLEXTRON' AND a.isDeleted = 0 LIMIT 1),  \n" +
                "1 minQty,1 maxQty,1 packageQty,0 isDeleted,1 createdBy,utc_timestamp() createdAt,'FLEXTRON+NOT-A-COMPONENT' PIDCode, 1 isGoodPart) as a;  \n" +
                "  \n" +
                "SET sql_mode='';  \n" +
                /* **************************** Add Script Version -> 17-08-2018 *********************************** */
              "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
              "VALUES (102,'1.00','V1','Insert FLEXTRON mfg and component'," + userid + ");"
                );
            break;
        case 102:
            allDbChangesArray.push(
            /* **************************** New Script -> 17-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_CopyAssyBOMQuote`;  \n" +
            "CREATE PROCEDURE `Sproc_CopyAssyBOMQuote`(    \n" +
            "	IN poldAssyID int(1),    \n" +
            "	IN pnewAssyID INT(1),  \n" +
            "    IN UserID int(1),  \n" +
            "    IN pIsCopyPricing tinyint  \n" +
            ")  \n" +
            "BEGIN    \n" +
            "DECLARE pCount int(11);  \n" +
            "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
            "BEGIN    \n" +
            "	ROLLBACK;    \n" +
            "	RESIGNAL;    \n" +
            "END;    \n" +
            "DECLARE EXIT HANDLER FOR SQLWARNING    \n" +
            "  BEGIN    \n" +
            "	ROLLBACK;    \n" +
            "	RESIGNAL;    \n" +
            "END;    \n" +
            "  \n" +
            "    START TRANSACTION;    \n" +
            "  \n" +
            "		select Count(*) INTO pCount from rfq_lineItems where rfqAssyID = pnewAssyID;  \n" +
            "# Remove existing BOM data from newAssembly  \n" +
            "		IF(pCount>0) THEN  \n" +
            "  \n" +
            "			update rfq_assy_bom set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where reqAssyID = pnewAssyID and bomNumber IS NOT NULL;  \n" +
            "			update rfq_assy_bom_relationship set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_lineitems set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_lineitems_alternatepart set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_consolidated_mfgpn_lineitem set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_consolidated_mfgpn_lineitem_alternate set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where consolidateID in (select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = pnewAssyID);  \n" +
            "			update rfq_consolidate_mfgpn_lineitem_quantity set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where consolidateID in (select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = pnewAssyID);  \n" +
            "			update rfq_assy_quotations set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_assy_quantity_price_selection_setting set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where qtyID in (select id from rfq_assy_quantity where rfqAssyID = pnewAssyID);  \n" +
            "        END IF;  \n" +
            "	IF(pIsCopyPricing) THEN  \n" +
            "# update isverifiedBOM and isReadyforPricing flag in rfq_assemblies table  \n" +
            "		select Count(*) INTO pCount from rfq_lineItems where rfqAssyID = poldAssyID and isDeleted = 0;  \n" +
            "			IF (pCount>0) THEN  \n" +
            "					update rfq_assemblies set   \n" +
            "					isBOMVerified = true,   \n" +
            "					isReadyForPricing = true,  \n" +
            "					updatedAt = UTC_TIMESTAMP(),  \n" +
            "					updatedBy = UserID  \n" +
            "					where id = pnewAssyID;  \n" +
            "			ELSE   \n" +
            "					update rfq_assemblies set   \n" +
            "					isBOMVerified = false,   \n" +
            "					isReadyForPricing = false  \n" +
            "					where id = pnewAssyID;  \n" +
            "            END IF;  \n" +
            "	ELSE   \n" +
            "		IF(pCount>0) THEN  \n" +
            "  \n" +
            "			update rfq_assemblies set   \n" +
            "			isBOMVerified = true,   \n" +
            "			isReadyForPricing = false,  \n" +
            "			updatedAt = UTC_TIMESTAMP(),  \n" +
            "			updatedBy = UserID  \n" +
            "			where id = pnewAssyID;  \n" +
            "  \n" +
            "		END if;  \n" +
            "  \n" +
            "	END IF;  \n" +
            "# Copy Assy BOM data of old assy to new Assy  \n" +
            "			INSERT INTO `rfq_assy_bom`  \n" +
            "			(`reqAssyID`, `isActive`, `description`, `createdBy`, `createdAt`, `bomNumber`)  \n" +
            "			select   \n" +
            "			pnewAssyID `reqAssyID`, `isActive`, `description`,UserID `createdBy`, UTC_TIMESTAMP() `createdAt`, `bomNumber`   \n" +
            "			from rfq_assy_bom where reqAssyID = poldAssyID and IFNULL(isDeleted,0) = 0 and bomNumber IS NOT NULL;   \n" +
            "  \n" +
            "# Copy rfq lineItems data of old assy to new Assy  \n" +
            "			INSERT INTO `rfq_lineitems`  \n" +
            "			(`rfqAssyBomID`, `rfqAssyID`, `lineID`, `qpa`, `refDesig`, `custPN`, `custPNID`, `uomID`, `description`, `level`, `isInstall`,  \n" +
            "			`isPurchase`, `isNoBidsPN`,  `isDraft`, `isActive`, `partTypeID`, `partclassID`,  `leadQty`, `attritionRate`, `totalQty`,   \n" +
            "			`manualAdj`, `createdBy`, `createdAt`, `customerRev`, `flextronRev`, `customerDescription`, `numOfPosition`, `valueAddedCost`,   \n" +
            "			`refRFQLineItemID`, `dnpQty`, `dnpDesig`, `org_lineID`, `org_qpa`, `org_refDesig`, `org_custPN`, `org_uomName`, `org_level`,   \n" +
            "			`org_isInstall`, `org_isPurchase`, `org_customerRev`, `org_customerDescription`, `org_numOfPosition`, `org_refLineID`,   \n" +
            "			`qpaDesignatorStep`)  \n" +
            "			select (select id from rfq_assy_bom where reqAssyID = pnewAssyID and bomNumber IS NULL) `rfqAssyBomID`,pnewAssyID `rfqAssyID`, `lineID`, `qpa`,  \n" +
            "			 `refDesig`, `custPN`, `custPNID`, `uomID`, `description`, `level`, `isInstall`,  \n" +
            "			`isPurchase`, `isNoBidsPN`,  `isDraft`, `isActive`, `partTypeID`, `partclassID`,  `leadQty`, `attritionRate`, `totalQty`,   \n" +
            "			`manualAdj`, UserID `createdBy`, UTC_TIMESTAMP() `createdAt`, `customerRev`, `flextronRev`, `customerDescription`, `numOfPosition`,   \n" +
            "			`valueAddedCost`, `refRFQLineItemID`, `dnpQty`, `dnpDesig`, `org_lineID`, `org_qpa`, `org_refDesig`, `org_custPN`,  \n" +
            "			`org_uomName`, `org_level`, `org_isInstall`, `org_isPurchase`, `org_customerRev`, `org_customerDescription`,   \n" +
            "			`org_numOfPosition`, `org_refLineID`, `qpaDesignatorStep`  \n" +
            "			 from rfq_lineitems where rfqAssyID = poldAssyID and IFNULL(isDeleted,0) = 0;  \n" +
            "# Copy rfq lineitems alternatepart data of old assy to new Assy  \n" +
            "			INSERT INTO `rfq_lineitems_alternatepart`  \n" +
            "			( `rfqLineItemsID`, `distributor`, `distMfgCodeID`, `distPN`, `distMfgPNID`, `mfgCode`, `mfgCodeID`, `mfgPN`, `mfgPNID`,  \n" +
            "			`description`, `isActive`, `isApproved`, `isNoBidsPN`, `isDraft`, `isROHS`, `copyAlternetPartID`, `createdBy`, `createdAt`,  \n" +
            "			`mfgVerificationStep`, `mfgDistMappingStep`, `mfgCodeStep`, `distVerificationStep`, `distCodeStep`,  \n" +
            "			`getMFGPNStep`, `obsoletePartStep`, `goodPartMappingStep`, `rfqAssyID`, `mfgPNStep`, `distPNStep`)  \n" +
            "			select rl.id `rfqLineItemsID`, ra.`distributor`, ra.`distMfgCodeID`, ra.`distPN`, ra.`distMfgPNID`, ra.`mfgCode`, ra.`mfgCodeID`, ra.`mfgPN`, ra.`mfgPNID`,  \n" +
            "			ra.`description`, ra.`isActive`, ra.`isApproved`, ra.`isNoBidsPN`, ra.`isDraft`, ra.`isROHS`, ra.`copyAlternetPartID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`,  \n" +
            "			ra.`mfgVerificationStep`, ra.`mfgDistMappingStep`, ra.`mfgCodeStep`, ra.`distVerificationStep`, ra.`distCodeStep`,  \n" +
            "			ra.`getMFGPNStep`, ra.`obsoletePartStep`, ra.`goodPartMappingStep`,pnewAssyID `rfqAssyID`, ra.`mfgPNStep`, ra.`distPNStep`  \n" +
            "			 from rfq_lineitems_alternatepart ra  \n" +
            "			 join rfq_lineitems ral on ral.id = ra.rfqLineItemsID and ral.rfqAssyID = poldAssyID and ifnull(ral.isDeleted,0) = 0  \n" +
            "			 join rfq_lineitems rl on rl.lineID = ral.lineID and rl.rfqAssyID = pnewAssyID and ifnull(rl.isDeleted,0) = 0  \n" +
            "			 where ra.rfqAssyID = poldAssyID and IFNULL(ra.isDeleted, 0) = 0;  \n" +
            "# update sub assy id in rfq lineItems data of old assy to new Assy  \n" +
            "  \n" +
            "			update rfq_lineitems rli, (select ab.id, ra.rfqLineItemsID, rl.lineID from rfq_lineitems rl join  rfq_lineitems_alternatepart ra on ra.rfqLineItemsID = rl.id   \n" +
            "										right join rfq_assy_bom ab on ab.bomNumber = ra.mfgPN and ab.reqAssyID = pnewAssyID and ab.isDeleted = 0 where ra.rfqAssyID = pnewAssyID) rab   \n" +
            "			set rli.rfqAssyBomID = rab.id  \n" +
            "			where   \n" +
            "			rab.lineID = rli.refRFQLineItemID and rli.rfqAssyID = pnewAssyID;  \n" +
            "# update sub assy id in rfq lineItems data of old assy to new Assy  \n" +
            "			update rfq_lineitems_alternatepart rap, (select rl.id, rl.rfqAssyBomID, ra.rfqLineItemsID, rl.lineID from rfq_lineitems rl   \n" +
            "														join  rfq_lineitems_alternatepart ra on ra.rfqLineItemsID = rl.id   \n" +
            "														where ra.rfqAssyID = pnewAssyID and rl.isDeleted = 0) rab   \n" +
            "			set rap.rfqAssyBomID = rab.rfqAssyBomID  \n" +
            "			where   \n" +
            "			rab.rfqLineItemsID = rap.rfqLineItemsID and rap.rfqAssyID = pnewAssyID;  \n" +
            "# update lineItem ref in rfq assy bom   \n" +
            "			update rfq_assy_bom rab, (select * from rfq_lineitems where rfqAssyID = pnewAssyID and IFNULL(isDeleted,0)=0)rl,  \n" +
            "									(select * from rfq_lineitems_alternatepart where rfqAssyID = pnewAssyID and IFNULL(isDeleted,0)=0)rap  \n" +
            "			set rab.rfqLineItemsID = rl.id  \n" +
            "			where rab.reqAssyID = pnewAssyID and rap.mfgPN = rab.bomNumber and rap.rfqLineItemsID = rl.id  ;  \n" +
            "# Copy assy bom relationship data of old assy to new Assy  \n" +
            "			INSERT INTO `rfq_assy_bom_relationship`  \n" +
            "			(`rfqAssyBomID`,`parentRFQAssyBOMID`, `parentLineitemsID`, `rfqAssyID`, `createdBy`, `createdAt`)  \n" +
            "			select ab2.id `rfqAssyBomID`, rl.rfqAssyBomID `parentRFQAssyBOMID`, rl.id `parentLineitemsID`,pnewAssyID `rfqAssyID`, UserID `createdBy`, UTC_TIMESTAMP() `createdAt`   \n" +
            "            from rfq_assy_bom_relationship abr  \n" +
            "			join rfq_assy_bom ab1 on ab1.id = abr.rfqAssyBomID and ab1.reqAssyID = poldAssyID and ab1.bomNumber IS NOT NULL and IFNULL(ab1.isDeleted,0) = 0  \n" +
            "			join rfq_assy_bom ab2 on ab2.bomNumber = ab1.bomNumber and ab2.reqAssyID = pnewAssyID and ab2.bomNumber IS NOT NULL and IFNULL(ab2.isDeleted,0) = 0  \n" +
            "			join rfq_lineitems_alternatepart rla on rla.mfgPN = ab2.bomNumber and rla.rfqAssyID = pnewAssyID and IFNULL(rla.isDeleted,0) = 0  \n" +
            "			join rfq_lineitems rl on rl.id = rla.rfqLineItemsID and rl.rfqAssyID = pnewAssyID and IFNULL(rl.isDeleted,0) = 0  \n" +
            "			where abr.rfqAssyID = poldAssyID and IFNULL(abr.isDeleted,0) = 0;   \n" +
            "# copy rfq_consolidated_mfgpn_lineitem data from old assy to new assy  \n" +
            "		IF(pIsCopyPricing) THEN  \n" +
            "  \n" +
            "			INSERT INTO `rfq_consolidated_mfgpn_lineitem`  \n" +
            "			(`rfqAssyBomID`, `lineID`, `isInstall`, `isPurchase`, `rfqAssyID`, `partTypeID`, `partClassID`, `leadQty`, `attritionRate`, `isActive`, `rfqLineItemID`, `uomID`,  \n" +
            "			`isNoBidsPN`, `isDraft`, `leads`, `totalQty`, `requestQty`, `originalTotalQty`, `qpa`, `createdAt`, `createdBy`, `isMultiple`, `valueAddedCost`,   \n" +
            "			`numOfPosition`,`consolidatedLineItemIDs`)  \n" +
            "			select rl.`rfqAssyBomID`, rcl.`lineID`, rcl.`isInstall`, rcl.`isPurchase`, rl.`rfqAssyID`, rcl.`partTypeID`, rcl.`partClassID`, rcl.`leadQty`, rcl.`attritionRate`,  \n" +
            "            rcl.`isActive`, rl.id `rfqLineItemID`, rcl.`uomID`, rcl.`isNoBidsPN`, rcl.`isDraft`, rcl.`leads`, rcl.`totalQty`, rcl.`requestQty`, rcl.`originalTotalQty`,   \n" +
            "            rcl.`qpa`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, rcl.`isMultiple`, rcl.`valueAddedCost`, rcl.`numOfPosition`,  \n" +
            "            fun_getconsolidatedlineitems(rcl.id,poldAssyID,pnewAssyID) `consolidatedLineItemIDs`   \n" +
            "			from rfq_consolidated_mfgpn_lineitem rcl  \n" +
            "			join rfq_lineitems rl on rl.lineID = rcl.lineID and rl.rfqAssyID = pnewAssyID and IFNULL(rl.isDeleted,0) = 0  \n" +
            "			 where rcl.rfqAssyID = poldAssyID and IFNULL(rcl.isDeleted,0) = 0;  \n" +
            "# copy rfq_consolidated_mfgpn_lineitem_alternate data from old assy to new assy  \n" +
            "			INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`  \n" +
            "			(`mfgPN`, `consolidateID`, `mfgPNID`, `createdBy`, `createdAt`, `mfgCodeID`, `PIDCode`)  \n" +
            "			select rap.`mfgPN`,rcl.id `consolidateID`, rap.`mfgPNID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`, rap.`mfgCodeID`, com.PIDCode `PIDCode`   \n" +
            "            from rfq_lineitems_alternatepart rap  \n" +
            "			join rfq_consolidated_mfgpn_lineitem rcl on rcl.rfqAssyID = rap.rfqAssyID and rcl.rfqLineItemID = rap.rfqLineItemsID  \n" +
            "			join component com on com.id = rap.mfgPNID and IFNULL(com.isDeleted,0) = 0  \n" +
            "			where rap.rfqAssyID = pnewAssyID  \n" +
            "			group by rap.mfgPNID,rap.rfqLineItemsID;  \n" +
            "# copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy  \n" +
            "		# create temporary table for rfq_consolidate_mfgpn_lineitem_quantity of old assembly  \n" +
            "			drop temporary table if exists result;  \n" +
            "			create temporary table result   \n" +
            "			select rcl.lineID, raq.requestQty, rcl.qpa,rlq.* from rfq_consolidate_mfgpn_lineitem_quantity rlq   \n" +
            "			left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rlq.consolidateID and rcl.rfqAssyID = poldAssyID  \n" +
            "			left join rfq_assy_quantity raq on raq.id = rlq.qtyID  and raq.rfqAssyID = poldAssyID  \n" +
            "			where rlq.isDeleted = 0 and rcl.isDeleted = 0 and raq.isDeleted = 0 and raq.rfqAssyID = poldAssyID;  \n" +
            "  \n" +
            "		# create temporary table for mapping quantity between old assembly and new assembly  \n" +
            "  \n" +
            "			drop temporary table if exists mapping;  \n" +
            "			create temporary table mapping  \n" +
            "			select a.requestQty, ifNull((select Max(b.requestqty)  from rfq_assy_quantity b   \n" +
            "			where b.rfqAssyID = poldAssyID and b.requestqty <= a.requestQty and b.isDeleted = 0),  \n" +
            "			(select Min(b.requestqty)  from rfq_assy_quantity b   \n" +
            "			where b.rfqAssyID = poldAssyID and b.requestqty > a.requestQty and b.isDeleted = 0))mappingQty  \n" +
            "			from rfq_assy_quantity a   \n" +
            "			where a.rfqAssyID = pnewAssyID;  \n" +
            "		# copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy  \n" +
            "  \n" +
            "            INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`  \n" +
            "			(`qtyID`, `finalPrice`, `consolidateID`, `createdAt`, `createdBy`, `unitPrice`, `supplier`, `selectedMpn`, `selectionMode`,  \n" +
            "			`min`, `mult`, `currentStock`,`selectedPIDCode`,`leadTime`,`supplierStock`,`grossStock`)  \n" +
            "			select rq.id `qtyID`, cast(((R.finalPrice /(R.requestQty*R.qpa))*(cl.qpa*rq.requestQty)) as decimal(16,6)) `finalPrice`, cl.id `consolidateID`,   \n" +
            "			UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, cast((R.finalPrice /(R.requestQty*R.qpa)) as decimal(16,6))  `unitPrice`, R.`supplier`, R.`selectedMpn`,  \n" +
            "			R.`selectionMode`, R.`min`, R.`mult`, R.`currentStock`, R.`selectedPIDCode`,R.`leadTime`,R.`supplierStock`,R.`grossStock`         \n" +
            "			from rfq_consolidated_mfgpn_lineitem cl      \n" +
            "			join rfq_assy_quantity rq on rq.rfqAssyID = cl.rfqAssyID and rq.isDeleted = 0  \n" +
            "			left join rfq_consolidate_mfgpn_lineitem_quantity clq on clq.consolidateID = cl.id and clq.qtyID = rq.id   \n" +
            "			left join result R on R.lineID = cl.lineID   \n" +
            "            left join mapping m on  rq.requestQty = m.requestQty   \n" +
            "			where cl.rfqAssyID = pnewAssyID and cl.isDeleted = 0 and m.mappingQty = R.requestQty AND IFNULL(rq.isDeleted,0) = 0;  \n" +
            "  \n" +
            "             drop temporary table if exists mapping;  \n" +
            "             drop temporary table if exists result;  \n" +
            "	END IF;  \n" +
            "     COMMIT;    \n" +
            "	select * from rfq_lineitems where rfqAssyID = pnewAssyID and isDeleted = 0;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 17-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (103,'1.00','V1','copy Assy BOM quote sp - shirish '," + userid + ");"
            );
            break;
        case 103:
            allDbChangesArray.push(
            /* **************************** New Script -> 17-08-2018  *********************************** */
            "SET FOREIGN_KEY_CHECKS = 0;  \n" +
            "DELETE FROM workorder_operation_cluster WHERE `woOPID` IS NULL;  \n" +
            "ALTER TABLE workorder_operation_cluster MODIFY `woOPID` INT NOT NULL;  \n" +
            "DELETE FROM workorder_operation_dataelement WHERE `woOPID` IS NULL;  \n" +
            "ALTER TABLE workorder_operation_dataelement MODIFY `woOPID` INT NOT NULL;  \n" +
            "DELETE FROM workorder_operation_employee WHERE `woOPID` IS NULL;  \n" +
            "ALTER TABLE workorder_operation_employee MODIFY `woOPID` INT NOT NULL;  \n" +
            "DELETE FROM workorder_operation_equipment WHERE `woOPID` IS NULL;  \n" +
            "ALTER TABLE workorder_operation_equipment MODIFY `woOPID` INT NOT NULL;  \n" +
            "DELETE FROM workorder_operation_equipment_dataelement WHERE `woOPID` IS NULL;  \n" +
            "ALTER TABLE workorder_operation_equipment_dataelement MODIFY `woOPID` INT NOT NULL;  \n" +
            "DELETE FROM workorder_operation_part WHERE `woOPID` IS NULL;  \n" +
            "ALTER TABLE workorder_operation_part MODIFY `woOPID` INT NOT NULL;  \n" +
            "DELETE FROM workorder_operation_firstpiece WHERE `woOPID` IS NULL;  \n" +
            "ALTER TABLE workorder_operation_firstpiece MODIFY `woOPID` INT NOT NULL;  \n" +
            "SET FOREIGN_KEY_CHECKS = 1;  \n" +

            /* **************************** Add Script Version -> 17-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(            \n" +
            "	IN ppageIndex INT(11),            \n" +
            "	IN precordPerPage INT(11),            \n" +
            "	IN pOrderBy VARCHAR(255),            \n" +
            "	IN pWhereClause VARCHAR(21844),            \n" +
            "	IN rfqAssyID INT(11),            \n" +
            "	IN puserID INT (11)            \n" +
            "    )  \n" +
            "BEGIN            \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);            \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;            \n" +
            "	    SET @SQLString = NULL;            \n" +
            "	    SET SESSION group_concat_max_len = 150000;                \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN            \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
            "		ELSE            \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;             \n" +
            "		END IF;	            \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN            \n" +
            "			SET pWhereClause = '1=1' ;            \n" +
            "		END IF;	            \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
            "		ELSE	            \n" +
            "			SET rowNumWhere = '';            \n" +
            "		END IF;	            \n" +
            "		SELECT            \n" +
            "                     GROUP_CONCAT(DISTINCT            \n" +
            "				CONCAT(            \n" +
            "					'Max((IF(ra.requestQty = ''',            \n" +
            "						ra.requestQty,            \n" +
            "					''', rq.finalPrice, null))) AS ''',            \n" +
            "						ra.requestQty,''''            \n" +
            "					)            \n" +
            "					) INTO @SQLString            \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id            \n" +
            "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;            \n" +
            "  \n" +
            "			IF(@SQLString IS NOT NULL) THEN            \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS            \n" +
            "					SELECT             \n" +
            "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,              \n" +
            "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,        \n" +
            "					(SELECT         \n" +
            "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                  \n" +
            "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN         \n" +
            "                                     component c ON rla.mfgpnid=c.id         \n" +
            "                                     LEFT JOIN mfgcodemst mg ON          \n" +
            "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,            \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn             \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla             \n" +
            "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',             \n" +
            "					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl            \n" +
            "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID            \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id            \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');            \n" +
            "  \n" +
            "			ELSE            \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS            \n" +
            "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,         \n" +
            "					 GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                  \n" +
            "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN         \n" +
            "                                     component c ON rla.mfgpnid=c.id         \n" +
            "                                     LEFT JOIN mfgcodemst mg ON          \n" +
            "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,              \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn             \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla             \n" +
            "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl            \n" +
            "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	            \n" +
            "			END IF;            \n" +
            "			PREPARE stmt FROM @SQLStatement;            \n" +
            "			EXECUTE stmt;	            \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );            \n" +
            "			PREPARE query1 FROM @SQLStatement1;            \n" +
            "			EXECUTE query1;            \n" +
            "			DEALLOCATE PREPARE query1;            \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
            "			PREPARE query2 FROM @SQLStatement2;            \n" +
            "			EXECUTE query2;            \n" +
            "			DEALLOCATE PREPARE query2;            \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );            \n" +
            "			PREPARE query3 FROM @SQLStatement3;            \n" +
            "			EXECUTE query3;            \n" +
            "			DEALLOCATE PREPARE query3;            \n" +
            "  \n" +
            "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.turnType,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt            \n" +
            "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id            \n" +
            "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);            \n" +
            "			PREPARE query4 FROM @SQLStatement4;            \n" +
            "			EXECUTE query4;            \n" +
            "			DEALLOCATE PREPARE query4;        \n" +
            "  \n" +
            "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty, rq.finalPrice, unitPrice,supplier,rq.min,rq.mult, selectedMpn, selectionMode,qtyID,       \n" +
            "					currentStock,      \n" +
            "					leadTime,       \n" +
            "					supplierStock,      \n" +
            "					grossStock,          \n" +
            "					selectedPIDCode,ct.qpa, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                 \n" +
            "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID         \n" +
            "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id         \n" +
            "				WHERE ct.rfqAssyID=\",rfqAssyID);                \n" +
            "			PREPARE query5 FROM @SQLStatement5;                    \n" +
            "			EXECUTE query5;                    \n" +
            "			DEALLOCATE PREPARE query5;           \n" +
            "  \n" +
            "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,     \n" +
            "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,     \n" +
            "						(SUM(rq.unitPrice)) AS TotalUnitPrice,    \n" +
            "						(SUM(rq.finalPrice)/ IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice  \n" +
            "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq        \n" +
            "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id        \n" +
            "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                \n" +
            "  \n" +
            "			PREPARE query6 FROM @SQLStatement6;                    \n" +
            "			EXECUTE query6;                    \n" +
            "			DEALLOCATE PREPARE query6;                        \n" +
            "  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;              \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 17-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_StopPricingRequests` ;  \n" +
            "CREATE PROCEDURE `Sproc_StopPricingRequests`(    \n" +
            "	IN prfqAssyID INT(11),  \n" +
            "	IN puserID INT    \n" +
            ")  \n" +
            "BEGIN    \n" +
            "	# udpate lineitem pricing status    \n" +
            "		# 0 - SendRequest, 1 - NotPricing, 2 - Success    \n" +
            "		UPDATE `rfq_lineitem_autopricingstatus`    \n" +
            "			SET `status` = 2  \n" +
            "			WHERE rfqAssyID=prfqAssyID   \n" +
            "			AND `status`=0 AND userID=puserID;    \n" +
            "  \n" +
            "	# udpate assembly pricing status for all     \n" +
            "		UPDATE `rfq_assy_autopricingstatus`    \n" +
            "			SET `status` = 2     \n" +
            "			WHERE rfqAssyID=prfqAssyID  \n" +
            "			AND `status`=0 AND userID=puserID;    \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 17-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (104,'1.00','V1','Stop Pricing, Required woOPID - Vaibhav '," + userid + ");"
            );
            break;
        case 104:
            allDbChangesArray.push(
            /* **************************** New Script -> 17-08-2018  *********************************** */
            "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BI_TimeLineLog` ;  \n" +
            "CREATE TRIGGER `Trg_BI_TimeLineLog` BEFORE INSERT ON `timeline`   \n" +
            "    FOR EACH ROW BEGIN      \n" +
            "	DECLARE lvRefTransID INT(11);      \n" +
            "	DECLARE lvGencFileOwnerType VARCHAR(255);      \n" +
            "	DECLARE lvGencOriginalName VARCHAR(255);	      \n" +
            "	DECLARE lvWoID INT(11);	      \n" +
            "	DECLARE lvWoNumber VARCHAR(255);      \n" +
            "	DECLARE lvOpName VARCHAR(255);      \n" +
            "	DECLARE lvActionType VARCHAR(50);      \n" +
            "	DECLARE lvClusterName VARCHAR(255);      \n" +
            "	DECLARE lvPartNumber VARCHAR(255);      \n" +
            "	DECLARE lvAssetName VARCHAR(255);       \n" +
            "	DECLARE lvEmpName VARCHAR(255);       \n" +
            "	DECLARE lvEcoNumber VARCHAR(255);      \n" +
            "	DECLARE lvClusterID INT(11);      \n" +
            "	DECLARE lvWoOpIDs VARCHAR(5000);      \n" +
            "	DECLARE lvPartID INT(11);      \n" +
            "	DECLARE lvEqpID INT(11);      \n" +
            "	DECLARE lvEmpID INT(11);      \n" +
            "	DECLARE lvEntityID INT(11);      \n" +
            "	DECLARE lvRefParentId INT(11);      \n" +
            "	DECLARE lvGencFolderName VARCHAR(255);      \n" +
            "	DECLARE lvSalesOrderNumber VARCHAR(100);    \n" +
            "	DECLARE lvUid INT(11);    \n" +
            "  \n" +
            "       CASE  NEW.refTransTable      \n" +
            "  \n" +
            "	 WHEN \"genericfiles\" THEN       \n" +
            "  \n" +
            "		SELECT refTransID,gencFileOwnerType,gencOriginalName,refParentId       \n" +
            "				INTO lvRefTransID,lvGencFileOwnerType,lvGencOriginalName,lvRefParentId      \n" +
            "		FROM genericfiles WHERE gencFileID = NEW.refTransID ;      \n" +
            "  \n" +
            "  \n" +
            "	       IF (lvRefTransID IS NOT NULL AND lvGencFileOwnerType IS NOT NULL AND NEW.eventAction IS NOT NULL) THEN      \n" +
            "  \n" +
            "	       SELECT CASE NEW.eventAction WHEN 1 THEN \"uploaded\" WHEN 2 THEN \"updated\" WHEN 3 THEN \"deleted\"      \n" +
            "				WHEN 4 THEN \"downloaded\" WHEN 5 THEN \"moved to folder\" WHEN 6 THEN \"moved to other folder\"      \n" +
            "				WHEN 7 THEN \"viewed\" WHEN 8 THEN \"opened in edit mode\"      \n" +
            "				END AS actionType INTO lvActionType;      \n" +
            "  \n" +
            "		CASE  lvGencFileOwnerType      \n" +
            "		   WHEN 'workorder' THEN  	      \n" +
            "			SELECT woID, woNumber INTO lvWoID,lvWoNumber FROM workorder WHERE woID = lvRefTransID ;      \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType, \" for work order\") ;      \n" +
            "  \n" +
            "			IF(NEW.eventAction = 5) THEN      \n" +
            "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ' , lvActionType,' \"',      \n" +
            "			  (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for work order ',lvWoNumber,' by ',      \n" +
            "								(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			ELSE      \n" +
            " 			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ', lvActionType,' for work order ',lvWoNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			END IF;      \n" +
            "  \n" +
            "			SET NEW.eventType = 4.22;      \n" +
            "			IF(NEW.eventAction <> 3) THEN      \n" +
            "			  SET NEW.url = CONCAT(\"workorder/manage/documents/\",lvWoID) ;      \n" +
            "			END IF;      \n" +
            "  \n" +
            "		   WHEN 'workorder_operation' THEN  	      \n" +
            "			SELECT woop.opName,(SELECT woNumber FROM workorder WHERE woID = woop.woID LIMIT 1) AS woNumber INTO lvOpName,lvWoNumber       \n" +
            "			FROM workorder_operation woop WHERE woop.woOPID = lvRefTransID ;      \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType,\" for work order operation\") ;      \n" +
            "  \n" +
            "			IF(NEW.eventAction = 5) THEN      \n" +
            "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ' , lvActionType,' \"',      \n" +
            "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;	      \n" +
            "			ELSE      \n" +
            "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ', lvActionType,' for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			END IF;				      \n" +
            "  \n" +
            "			SET NEW.eventType = 4.23;				      \n" +
            "			IF(NEW.eventAction <> 3) THEN				      \n" +
            "			  SET NEW.url = CONCAT(\"workorder/operation/documents/\",lvRefTransID) ;      \n" +
            "			END IF;      \n" +
            "  \n" +
            "		   WHEN 'eco_request' THEN  	      \n" +
            "			SELECT er.ecoNumber ,er.woID,(SELECT woNumber FROM workorder WHERE woID = er.woID LIMIT 1) AS woNumber INTO lvEcoNumber,lvWoID,lvWoNumber       \n" +
            "			FROM eco_request er WHERE er.ecoReqID = lvRefTransID ;      \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType,\" for eco request in work order\") ;      \n" +
            "  \n" +
            "			IF(NEW.eventAction = 5) THEN			      \n" +
            "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ' , lvActionType,' \"',      \n" +
            "			   (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			ELSE      \n" +
            "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ',lvActionType,' for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			END IF;		      \n" +
            "  \n" +
            "			SET NEW.eventType = 4.24;				      \n" +
            "			IF(NEW.eventAction <> 3) THEN				      \n" +
            "			  SET NEW.url = CONCAT(\"workorder/workorders/ecorequest/\",lvWoID,\"/\",lvRefTransID) ;      \n" +
            "			END IF;      \n" +
            "  \n" +
            "		  WHEN 'salesorder' THEN      \n" +
            "  \n" +
            "		   	SELECT salesOrderNumber INTO lvSalesOrderNumber FROM salesordermst WHERE id = lvRefTransID ;      \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType, \" for sales order\") ;      \n" +
            "  \n" +
            "			IF(NEW.eventAction = 5) THEN      \n" +
            "			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ' , lvActionType,' \"',      \n" +
            "			  (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for sales order ',lvSalesOrderNumber,' by ',      \n" +
            "								(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			ELSE      \n" +
            " 			  SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ', lvActionType,' for sales order ',lvSalesOrderNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			END IF;      \n" +
            "  \n" +
            "			SET NEW.eventType = 6.01;      \n" +
            "			IF(NEW.eventAction <> 3) THEN      \n" +
            "			  SET NEW.url = CONCAT(\"transaction/manage/\",lvRefTransID) ;      \n" +
            "			END IF;     \n" +
            "  \n" +
            "  \n" +
            "		  WHEN 'component_sid_stock' THEN      \n" +
            "  \n" +
            "		   	SELECT uid INTO lvUid FROM component_sid_stock WHERE id = lvRefTransID ;      \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document \",lvActionType, \" for receiving material\") ;      \n" +
            "  \n" +
            " 			SET NEW.eventDescription = CONCAT('Document \"',lvGencOriginalName ,'\" ', lvActionType,' for receiving material of UID \"',lvUid,'\" by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "  \n" +
            "			SET NEW.eventType = 7.02;      \n" +
            "			IF(NEW.eventAction <> 3) THEN      \n" +
            "			  SET NEW.url = CONCAT(\"transaction/receivingmaterial/managereceivingmaterial/\",lvRefTransID) ;      \n" +
            "			END IF; 	 		    \n" +
            "  \n" +
            "  		   ELSE       \n" +
            "			BEGIN END;  	      \n" +
            " 		END CASE;	      \n" +
            "  \n" +
            "	       END IF;      \n" +
            "  \n" +
            "	WHEN \"generic_folder\" THEN       \n" +
            "  \n" +
            "		SELECT refTransID,gencFileOwnerType,gencFolderName,refParentId       \n" +
            "					INTO lvRefTransID,lvGencFileOwnerType,lvGencFolderName,lvRefParentId       \n" +
            "		FROM generic_folder WHERE gencFolderID = NEW.refTransID ;      \n" +
            "  \n" +
            "    	   IF (lvRefTransID IS NOT NULL AND lvGencFileOwnerType IS NOT NULL AND NEW.eventAction IS NOT NULL) THEN      \n" +
            "  \n" +
            "		SELECT CASE NEW.eventAction WHEN 1 THEN \"created\" WHEN 2 THEN \"renamed\" WHEN 3 THEN \"removed\"       \n" +
            "		WHEN 6 THEN \"moved to other folder\" END AS actionType INTO lvActionType;      \n" +
            "  \n" +
            "		CASE  lvGencFileOwnerType      \n" +
            "		   WHEN 'workorder' THEN  	      \n" +
            "  \n" +
            "			SELECT woID, woNumber INTO lvWoID,lvWoNumber FROM workorder WHERE woID = lvRefTransID ;      \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document folder \",lvActionType, \" for work order\") ;      \n" +
            "  \n" +
            "			IF(NEW.eventAction = 6) THEN      \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' \"',      \n" +
            "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for work order ',lvWoNumber,' by ',      \n" +
            "								(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			ELSE       \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' for work order ',lvWoNumber,' by ',      \n" +
            "								(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;					      \n" +
            "			END IF;      \n" +
            "  \n" +
            "			SET NEW.eventType = 4.25;      \n" +
            "			IF(NEW.eventAction <> 3) THEN      \n" +
            "			  SET NEW.url = CONCAT(\"workorder/manage/documents/\",lvWoID) ;      \n" +
            "			END IF;      \n" +
            "  \n" +
            "		  WHEN 'workorder_operation' THEN  	      \n" +
            "  \n" +
            "			SELECT woop.opName,(SELECT woNumber FROM workorder WHERE woID = woop.woID LIMIT 1) AS woNumber INTO lvOpName,lvWoNumber       \n" +
            "			FROM workorder_operation woop WHERE woop.woOPID = lvRefTransID ;      \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document folder \",lvActionType, \" for work order operation\") ;      \n" +
            "  \n" +
            "			IF(NEW.eventAction = 6) THEN      \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' \"',      \n" +
            "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			ELSE       \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,'       \n" +
            "			     for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			END IF;      \n" +
            "  \n" +
            "			SET NEW.eventType = 4.26;      \n" +
            "			IF(NEW.eventAction <> 3) THEN      \n" +
            "			   SET NEW.url = CONCAT(\"workorder/operation/documents/\",lvRefTransID) ;      \n" +
            "			END IF;      \n" +
            "  \n" +
            "		  WHEN 'eco_request' THEN  	      \n" +
            "  \n" +
            "			SELECT er.ecoNumber ,er.woID,(SELECT woNumber FROM workorder WHERE woID = er.woID LIMIT 1) AS woNumber INTO lvEcoNumber,lvWoID,lvWoNumber       \n" +
            "			FROM eco_request er WHERE er.ecoReqID = lvRefTransID ;			      \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document folder \",lvActionType,\" for eco request in work order\") ;      \n" +
            "  \n" +
            "			IF(NEW.eventAction = 6) THEN      \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' \"',      \n" +
            "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			ELSE      \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,'      \n" +
            "			    for eco request \"',lvEcoNumber,'\" in work order ',lvWoNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;				      \n" +
            "			END IF;      \n" +
            "  \n" +
            "			SET NEW.eventType = 4.27;      \n" +
            "			IF(NEW.eventAction <> 3) THEN      \n" +
            "			   SET NEW.url = CONCAT(\"workorder/workorders/ecorequest/\",lvWoID,\"/\",lvRefTransID) ;      \n" +
            "			END IF;	      \n" +
            "  \n" +
            "		  WHEN 'salesorder' THEN      \n" +
            "  \n" +
            "		   	SELECT salesOrderNumber INTO lvSalesOrderNumber FROM salesordermst WHERE id = lvRefTransID ;      \n" +
            "			SET NEW.eventTitle = CONCAT(\"Document folder \",lvActionType, \" for sales order\") ;      \n" +
            "  \n" +
            "			IF(NEW.eventAction = 6) THEN      \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,' \"',      \n" +
            "			    (SELECT gencFolderName FROM generic_folder WHERE gencFolderID = lvRefParentId),'\" for sales order \"',lvSalesOrderNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			ELSE      \n" +
            "			  SET NEW.eventDescription = CONCAT('Document folder \"',lvGencFolderName ,'\" ', lvActionType,'      \n" +
            "			    for sales order \"',lvSalesOrderNumber,'\" by ',(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;				      \n" +
            "			END IF;  			    \n" +
            "  \n" +
            "			SET NEW.eventType = 6.02;      \n" +
            "			IF(NEW.eventAction <> 3) THEN      \n" +
            "			  SET NEW.url = CONCAT(\"transaction/manage/\",lvRefTransID) ;      \n" +
            "			END IF;  	    \n" +
            "		   ELSE       \n" +
            "			BEGIN END;  		      \n" +
            "  \n" +
            "		   END CASE;	      \n" +
            "  \n" +
            "	   END IF;		      \n" +
            "  \n" +
            "  \n" +
            "	WHEN \"workorder_operation_cluster\" THEN       \n" +
            "		IF(NEW.eventAction = 1 OR NEW.eventAction = 2 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN      \n" +
            "  \n" +
            "			SELECT CASE NEW.eventAction WHEN 1 THEN \"moved\" WHEN 2 THEN \"moved\" END AS actionType INTO lvActionType;		      \n" +
            "  \n" +
            "			SELECT  clusterID,GROUP_CONCAT(woOPID) INTO lvClusterID,lvWoOpIDs      \n" +
            "			FROM  workorder_operation_cluster      \n" +
            "			WHERE FIND_IN_SET(woClusterID,NEW.refTransID);       \n" +
            "  \n" +
            "			SELECT clusterName,woID INTO lvClusterName,lvWoID FROM workorder_cluster WHERE clusterID = lvClusterID ;      \n" +
            "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;      \n" +
            "  \n" +
            "			SELECT GROUP_CONCAT(opName) INTO lvOpName      \n" +
            "			FROM workorder_operation      \n" +
            "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);      \n" +
            "  \n" +
            "			SET NEW.eventTitle = CONCAT(\"Operation(s) \",lvActionType,\" to cluster in work order\") ;      \n" +
            "			SET NEW.eventDescription = CONCAT('Operation(s) \"',lvOpName ,'\" ',lvActionType,' to cluster \"',lvClusterName,'\" in work order ',lvWoNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "		END IF;      \n" +
            "  \n" +
            "	WHEN \"workorder_operation_part\" THEN 	      \n" +
            "		IF(NEW.eventAction = 1 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN      \n" +
            "  \n" +
            "			SELECT CASE NEW.eventAction WHEN 1 THEN \"added\" END AS actionType INTO lvActionType;			      \n" +
            "  \n" +
            "			SELECT woID,partID,GROUP_CONCAT(woOPID) INTO lvWoID,lvPartID,lvWoOpIDs      \n" +
            "			FROM  workorder_operation_part      \n" +
            "			WHERE FIND_IN_SET(woOPPartID,NEW.refTransID);       \n" +
            "  \n" +
            "			SELECT partNumber INTO lvPartNumber FROM parts WHERE partID = lvPartID;      \n" +
            "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;      \n" +
            "  \n" +
            "			SELECT GROUP_CONCAT(opName) INTO lvOpName      \n" +
            "			FROM workorder_operation      \n" +
            "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);      \n" +
            "  \n" +
            "  \n" +
            "			SET NEW.eventTitle = CONCAT(\"Supply & Material \",lvActionType,\" to work order operation(s)\") ;      \n" +
            "			SET NEW.eventDescription = CONCAT('Supply & Material \"',lvPartNumber ,'\" ',lvActionType,' to Operation(s) \"',lvOpName,'\" in work order ',lvWoNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			SET NEW.url = CONCAT(\"workorder/manage/parts/\",lvWoID) ;      \n" +
            "  \n" +
            "		END IF;      \n" +
            "  \n" +
            "	WHEN \"workorder_operation_equipment\" THEN 	      \n" +
            "		IF(NEW.eventAction = 1 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN      \n" +
            "  \n" +
            "			SELECT CASE NEW.eventAction WHEN 1 THEN \"added\" END AS actionType INTO lvActionType;			      \n" +
            "  \n" +
            "			SELECT woID,eqpID,GROUP_CONCAT(woOPID) INTO lvWoID,lvEqpID,lvWoOpIDs      \n" +
            "			FROM  workorder_operation_equipment      \n" +
            "			WHERE FIND_IN_SET(woOpEqpID,NEW.refTransID);       \n" +
            "  \n" +
            "			SELECT assetName INTO lvAssetName FROM equipment WHERE eqpID = lvEqpID;      \n" +
            "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;      \n" +
            "  \n" +
            "			SELECT GROUP_CONCAT(opName) INTO lvOpName      \n" +
            "			FROM workorder_operation      \n" +
            "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);      \n" +
            "  \n" +
            "  \n" +
            "			SET NEW.eventTitle = CONCAT(\"Equipment & Tools \",lvActionType,\" to work order operation(s)\") ;      \n" +
            "			SET NEW.eventDescription = CONCAT('Equipment & Tools \"',lvAssetName ,'\" ',lvActionType,' to Operation(s) \"',lvOpName,'\" in work order ',lvWoNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			SET NEW.url = CONCAT(\"workorder/manage/equipments/\",lvWoID) ;      \n" +
            "  \n" +
            "		END IF;	      \n" +
            "	WHEN \"workorder_operation_employee\" THEN 	      \n" +
            "		IF(NEW.eventAction = 1 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN      \n" +
            "  \n" +
            "			SELECT CASE NEW.eventAction WHEN 1 THEN \"added\" END AS actionType INTO lvActionType;			      \n" +
            "  \n" +
            "			SELECT woID,employeeID,GROUP_CONCAT(woOPID) INTO lvWoID,lvEmpID,lvWoOpIDs      \n" +
            "			FROM  workorder_operation_employee      \n" +
            "			WHERE FIND_IN_SET(woOpEmployeeID,NEW.refTransID);       \n" +
            "  \n" +
            "			SELECT CONCAT(firstName,\" \",lastName) INTO lvEmpName FROM employees WHERE id=lvEmpID;      \n" +
            "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvWoID;      \n" +
            "  \n" +
            "			SELECT GROUP_CONCAT(opName) INTO lvOpName      \n" +
            "			FROM workorder_operation      \n" +
            "			WHERE FIND_IN_SET(woOPID,lvWoOpIDs);      \n" +
            "  \n" +
            "  \n" +
            "			SET NEW.eventTitle = CONCAT(\"Employee \",lvActionType,\" to work order operation(s)\") ;      \n" +
            "			SET NEW.eventDescription = CONCAT('Employee \"',lvEmpName ,'\" ',lvActionType,' to Operation(s) \"',lvOpName,'\" in work order ',lvWoNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			SET NEW.url = CONCAT(\"workorder/manage/employees/\",lvWoID) ;      \n" +
            "  \n" +
            "		END IF;	      \n" +
            "  \n" +
            "	WHEN \"dataelement_transactionvalues\" THEN 	      \n" +
            "  \n" +
            "	    IF(NEW.eventAction = 2 AND NEW.eventTitle IS NULL AND NEW.eventDescription IS NULL) THEN      \n" +
            "  \n" +
            "		SELECT entityID,RefTransID INTO lvEntityID,lvRefTransID      \n" +
            "		FROM dataelement_transactionvalues      \n" +
            "		WHERE dataElementTransID = NEW.refTransID       \n" +
            "		LIMIT 1;    \n" +
            "  \n" +
            "		SELECT CASE NEW.eventAction WHEN 2 THEN \"updated\" END AS actionType INTO lvActionType;      \n" +
            "  \n" +
            "		CASE  lvEntityID      \n" +
            "		   WHEN \"-7\" THEN  /* -7 --> work order */      \n" +
            "			SELECT woNumber INTO lvWoNumber FROM workorder WHERE woID = lvRefTransID;       \n" +
            "			SET NEW.eventTitle = CONCAT(\"Other details \",lvActionType,\" for work order\") ;      \n" +
            "			SET NEW.eventDescription = CONCAT(\"Other details \",lvActionType,\" for work order \",lvWoNumber,\" by \",      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),\".\") ;      \n" +
            "			SET NEW.url = CONCAT(\"workorder/manage/otherdetails/\",lvRefTransID) ;      \n" +
            "			SET NEW.eventType = 4.20;      \n" +
            "		   WHEN \"-1\" THEN  /* -1 --> work order operation */      \n" +
            "  \n" +
            "			SELECT (SELECT woNumber FROM workorder wo WHERE woID = woop.woID),woop.opName      \n" +
            "			INTO lvWoNumber,lvOpName       \n" +
            "			FROM workorder_operation woop WHERE woop.woOPID = lvRefTransID;       \n" +
            "  \n" +
            "			SET NEW.eventTitle = CONCAT(\"Other details \",lvActionType,\" for work order operation\") ;      \n" +
            "			SET NEW.eventDescription = CONCAT('Other details ',lvActionType,' for operation \"',lvOpName,'\" in work order ',lvWoNumber,' by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			SET NEW.url = CONCAT(\"workorder/operation/otherdetails/\",lvRefTransID) ;	      \n" +
            "			SET NEW.eventType = 4.21;      \n" +
            "  \n" +
            "		  WHEN \"-10\" THEN  /* -10 --> sales order */      \n" +
            "  \n" +
            "			SELECT salesOrderNumber INTO lvSalesOrderNumber FROM salesordermst WHERE id = lvRefTransID ;     \n" +
            "  \n" +
            "			SET NEW.eventTitle = CONCAT(\"Other details \",lvActionType,\" for sales order\") ;      \n" +
            "			SET NEW.eventDescription = CONCAT('Other details ',lvActionType,' for sales order \"',lvSalesOrderNumber,'\" by ',      \n" +
            "							(SELECT username FROM users WHERE id=NEW.userID AND deletedAt IS NULL),'.') ;      \n" +
            "			SET NEW.url = CONCAT(\"transaction/manage/\",lvRefTransID) ;	      \n" +
            "			SET NEW.eventType = 6.03;      \n" +
            "  \n" +
            "		   ELSE       \n" +
            "			BEGIN END;  	      \n" +
            "		END CASE;	      \n" +
            "	    END IF;	     \n" +
            "  \n" +
            "  \n" +
            "	ELSE       \n" +
            "		BEGIN END;       \n" +
            "  \n" +
            "	END CASE;      \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 17-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (105,'1.00','V1',' Trigger Trg_BI_TimeLineLog - KETAN '," + userid + ");"
          );
            break;
        case 105:
            allDbChangesArray.push(
          //  /* **************************** New Script -> 13-08-2018  *********************************** */
           "insert into `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,   \n" +
          "`parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`, `createdBy`,   \n" +
          "`updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`) values('Part Status','0','0','admin.genericcategory.partstatus',  \n" +
          "'app.partstatus','/partstatus/:categoryTypeID','Part Status',NULL,(select a.pageID from page_detail a where a.pageName='Generic Category'),'0','14','2','icon-format-paragraph','1',  \n" +
          "'2018-08-02 14:25:41','2018-08-02 14:25:41',NULL,'1',NULL,NULL,'0',NULL);  \n" +
          //  /* **************************** Add Script Version -> 13-08-2018 *********************************** */
           "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
           "VALUES (106,'1.00','V1',' PartStatus PageDetail entry-Mona '," + userid + ");"
           );
            break;
        case 106:
            allDbChangesArray.push(
          //  /* **************************** New Script -> 20-08-2018  *********************************** */
           "ALTER TABLE rfq_assy_autopricingstatus ADD COLUMN statusChangeDate DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL;  \n" +
          "ALTER TABLE rfq_lineitem_autopricingstatus ADD COLUMN statusChangeDate DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL;  \n" +
          //  /* **************************** Add Script Version -> 20-08-2018 *********************************** */
           "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
           "VALUES (107,'1.00','V1','Add Column for update status-Vaibhav '," + userid + ");"
           );
            break;
        case 107:
            allDbChangesArray.push(
            /* **************************** New Script -> 20-08-2018  *********************************** */
           "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(  \n" +
            "	IN prfqAssyID INT      \n" +
            ")  \n" +
            "BEGIN      \n" +
            "	DROP temporary table if exists tempRfq_lineitems;      \n" +
            "    DROP temporary table if exists tempRfq_lineitemsAlt;      \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE tempRfq_lineitems AS          \n" +
            "	SELECT a.id, a.lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,       \n" +
            "    CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,      \n" +
            "    a.description, a.level, a.numOfPosition, a.customerRev, a.customerDescription,                  \n" +
            "			CONCAT(part.partTypeName, ' | ', c.name) partclassID, a.isInstall, a.isPurchase, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID,       \n" +
            "            a.dnpQty, a.dnpDesig, a.qpaDesignatorStep      \n" +
            "            FROM rfq_lineitems a       \n" +
            "	LEFT JOIN uoms b ON a.uomID = b.id and IFNULL(b.isDeleted,0) = 0      \n" +
            "    LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id and IFNULL(part.isDeleted,0) = 0      \n" +
            "    LEFT JOIN rfq_mountingtypemst c ON part.partclassID = c.id and IFNULL(c.isDeleted,0) = 0          \n" +
            "    WHERE IFNULL(a.isDeleted,0) = 0 and a.rfqAssyID = prfqAssyID;      \n" +
            "  \n" +
            "	SELECT b.id, b.lineID, b.qpa, b.refDesig,   \n" +
            "			(CASE WHEN mfgCodeID IS NOT NULL AND IFNULL(customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,  \n" +
            "            a.mfgCodeID, a.mfgPN, a.mfgPNID,      \n" +
            "			(CASE WHEN distMfgCodeID IS NOT NULL AND IFNULL(customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	  \n" +
            "            a.distMfgCodeID, a.distPN, a.distMfgPNID,       \n" +
            "            b.custPN, b.custPNID, b.uomID, a.description descriptionAlternate, b.description, b.level, b.numOfPosition, b.customerRev, b.customerDescription,      \n" +
            "			b.partclassID, b.isInstall, b.isPurchase, b.leadQty, b.attritionRate, b.valueAddedCost, b.refRFQLineItemID,       \n" +
            "            b.dnpQty, b.dnpDesig, a.id as rfqAlternatePartID, b.qpaDesignatorStep,    \n" +
            "			a.mfgVerificationStep, a.mfgDistMappingStep, a.mfgCodeStep, a.customerApproval, a.org_mfgCode, a.org_mfgPN,    \n" +
            "            a.org_distributor, a.org_distPN,    \n" +
            "			a.distVerificationStep, a.distCodeStep, a.getMFGPNStep, a.obsoletePartStep, a.goodPartMappingStep, a.mfgPNStep, a.distPNStep,  \n" +
            "            a.badMfgPN,  \n" +
            "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isGoodPart              \n" +
            "            FROM rfq_lineitems_alternatepart a  \n" +
            "            LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0  \n" +
            "            LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0  \n" +
            "			JOIN tempRfq_lineitems b on a.rfqLineItemsID = b.id                \n" +
            "			WHERE IFNULL(a.isDeleted,0) = 0  AND b.id is not null order by CAST(b.lineID AS SIGNED), a.id;      \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 20-08-2018 *********************************** */
           "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
           "VALUES (108,'1.00','V1','Alter SP Sproc_GetRFQLineItemsByID - Ravi'," + userid + ");"
           );
            break;
        case 108:
            allDbChangesArray.push(
            /* **************************** New Script -> 20-08-2018  *********************************** */
            "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_WorkOrder_Certification` ;  \n" +
            "CREATE TRIGGER `Trg_AU_WorkOrder_Certification` AFTER UPDATE ON `workorder_certification`   \n" +
            "    FOR EACH ROW BEGIN  \n" +
            "  \n" +
            "	IF IFNULL(OLD.classIDs,0) != IFNULL(NEW.classIDs,0)  THEN   \n" +
            "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby )   \n" +
            "		VALUES (\"WORKORDER_CERTIFICATION\",CAST(NEW.woCertificationID AS CHAR),'CLASSIDS',  \n" +
            "			CAST(OLD.classIDs AS CHAR),CAST(NEW.classIDs AS CHAR),SYSDATE(),NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0)  THEN   \n" +
            "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby )   \n" +
            "		VALUES (\"WORKORDER_CERTIFICATION\",CAST(NEW.woCertificationID AS CHAR),'ISDELETED',  \n" +
            "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),SYSDATE(),NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "    END;  \n" +
                        /* **************************** New Script -> 20-08-2018  *********************************** */
                        "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_WorkOrder_Cluster` ;  \n" +
            "CREATE TRIGGER `Trg_AU_WorkOrder_Cluster` AFTER UPDATE ON `workorder_cluster`   \n" +
            "    FOR EACH ROW BEGIN  \n" +
            "	IF IFNULL(OLD.clusterName,0) != IFNULL(NEW.clusterName,0)  THEN   \n" +
            "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby )   \n" +
            "		VALUES (\"WORKORDER_CLUSTER\",CAST(NEW.clusterID AS CHAR),'CLUSTERNAME',  \n" +
            "			CAST(OLD.clusterName AS CHAR),CAST(NEW.clusterName AS CHAR),SYSDATE(),NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "	IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0)  THEN   \n" +
            "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby )   \n" +
            "		VALUES (\"WORKORDER_CLUSTER\",CAST(NEW.clusterID AS CHAR),'DISPLAYORDER',  \n" +
            "			CAST(OLD.displayOrder AS CHAR),CAST(NEW.displayOrder AS CHAR),SYSDATE(),NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0)  THEN   \n" +
            "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby )   \n" +
            "		VALUES (\"WORKORDER_CLUSTER\",CAST(NEW.clusterID AS CHAR),'ISDELETED',  \n" +
            "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),SYSDATE(),NEW.updatedBy);  \n" +
            "	END IF;  \n" +
            "    END;  \n" +
                        /* **************************** New Script -> 20-08-2018  *********************************** */
                        "DROP PROCEDURE IF EXISTS `Sproc_AddOperationInWorkOrder` ;  \n" +
            "CREATE PROCEDURE `Sproc_AddOperationInWorkOrder`(    \n" +
            "	IN pwoID INT(1),    \n" +
            "	IN popID VARCHAR(5000),    \n" +
            "	IN puserID VARCHAR(50)    \n" +
            ")  \n" +
            "BEGIN    \n" +
            "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
            "BEGIN    \n" +
            "	ROLLBACK;    \n" +
            "	RESIGNAL;    \n" +
            "END;    \n" +
            "DECLARE EXIT HANDLER FOR SQLWARNING    \n" +
            "  BEGIN    \n" +
            "	ROLLBACK;    \n" +
            "	RESIGNAL;    \n" +
            "END;    \n" +
            "IF (NOT EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woID = pwoID))    \n" +
            "	THEN SELECT 'Work Order does not exsist' errorCode;    \n" +
            "ELSE    \n" +
            "	/*Generate Dummy data from string to row */    \n" +
            "	DROP TEMPORARY TABLE IF EXISTS t;    \n" +
            "	CREATE TEMPORARY TABLE t( txt TEXT );    \n" +
            "	INSERT INTO t VALUES(popID);    \n" +
            "	DROP TEMPORARY TABLE IF EXISTS temp;    \n" +
            "	CREATE TEMPORARY TABLE temp( val CHAR(255) );    \n" +
            "	SET @SQL = CONCAT(\"insert into temp (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t), \",\", \"'),('\"),\"');\");    \n" +
            "	PREPARE stmt1 FROM @SQL;    \n" +
            "	EXECUTE stmt1;    \n" +
            "	SELECT DISTINCT(val) FROM temp;    \n" +
            "	/*Generate Dummy data from string to row */    \n" +
            "  \n" +
            "	START TRANSACTION;    \n" +
            "	/*Delete old operation from workorder */    \n" +
            "	UPDATE  workorder_operation_equipment_dataelement     \n" +
            "	SET isDeleted = 1,    \n" +
            "	    deletedAt = UTC_TIMESTAMP() ,    \n" +
            "	    deletedBy = puserID , updatedAt = UTC_TIMESTAMP() , updatedBy = puserID  \n" +
            "	WHERE woOPid IN (SELECT woopid FROM workorder_operation     \n" +
            "			WHERE woid = pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp))AND deletedAt IS NULL;    \n" +
            "	UPDATE  workorder_operation_equipment     \n" +
            "	SET isDeleted = 1,    \n" +
            "	    deletedAt = UTC_TIMESTAMP() ,    \n" +
            "	    deletedBy = puserID  , updatedAt = UTC_TIMESTAMP() , updatedBy = puserID  \n" +
            "	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;    \n" +
            "	UPDATE workorder_operation_employee     \n" +
            "	SET isDeleted = 1,    \n" +
            "	    deletedAt = UTC_TIMESTAMP(),    \n" +
            "	    deletedBy = puserID , updatedAt = UTC_TIMESTAMP() , updatedBy = puserID   \n" +
            "	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;    \n" +
            "	UPDATE workorder_operation_part     \n" +
            "	SET isDeleted = 1,    \n" +
            "	    deletedAt = UTC_TIMESTAMP(),    \n" +
            "	    deletedBy = puserID , updatedAt = UTC_TIMESTAMP() , updatedBy = puserID   \n" +
            "	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;    \n" +
            "	UPDATE workorder_operation_dataelement    \n" +
            "	SET isDeleted = 1,    \n" +
            "	    deletedAt = UTC_TIMESTAMP() ,    \n" +
            "	    deletedBy = puserID , updatedAt = UTC_TIMESTAMP() , updatedBy = puserID  \n" +
            "	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;    \n" +
            "	UPDATE workorder_operation     \n" +
            "	SET isDeleted = 1,    \n" +
            "	    deletedAt = UTC_TIMESTAMP() ,    \n" +
            "	    deletedBy = puserID , updatedAt = UTC_TIMESTAMP() , updatedBy = puserID   \n" +
            "	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp) AND deletedAt IS NULL;    \n" +
            "	/*Delete old operation from workorder*/    \n" +
            "  \n" +
            "	INSERT INTO workorder_operation    \n" +
            "	(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,    \n" +
            "	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,    \n" +
            "	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,    \n" +
            "	opVersion, isIssueQty, isRework,`colorCode`)    \n" +
            "	SELECT   pwoID WOID ,`opID`,UTC_TIMESTAMP() `createdAt`,puserID `createdBy`,`opName`,`opNumber`,    \n" +
            "	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,    \n" +
            "	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,'A' opVersion, `isIssueQty`, `isRework`,`colorCode`    \n" +
            "	 FROM operations wo     \n" +
            "	 WHERE opid IN(SELECT DISTINCT(val) FROM temp)  AND     \n" +
            "		opid NOT IN (SELECT opid FROM workorder_operation WHERE woid = pwoid AND  deletedAt IS NULL) AND     \n" +
            "		wo.deletedAt IS NULL ;    \n" +
            "	INSERT INTO workorder_operation_dataelement    \n" +
            "	(`woID`,`opID`,`dataElementID`, `displayOrder`,`createdAt`,`createdBy`,`woOPID`,`isDeleted`)    \n" +
            "	SELECT a.woID ,b.opID ,b.dataElementID, b.displayOrder ,a.createdAt, a.createdBy,a.woOPID, a.isDeleted     \n" +
            "	FROM workorder_operation a JOIN operation_dataelement b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL     \n" +
            "	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND     \n" +
            "		a.deletedAt IS NULL AND b.deletedAt IS NULL AND     \n" +
            "		NOT EXISTS (SELECT 'Y' FROM  workorder_operation_dataelement c     \n" +
            "				WHERE c.woid = a.woid AND     \n" +
            "				      c.opid = a.opid AND     \n" +
            "				      c.dataElementID = b.dataElementID AND     \n" +
            "				      c.deletedAt IS NULL);	    \n" +
            "  \n" +
            "	INSERT INTO workorder_operation_part    \n" +
            "	(`woID`,`opID`,`partID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)    \n" +
            "	SELECT a.woID,b.opID,b.partID,a.createdAt, a.createdBy,a.woOPID, a.isDeleted     \n" +
            "	FROM workorder_operation a JOIN operation_part b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL     \n" +
            "	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND     \n" +
            "		a.deletedAt IS NULL AND b.deletedAt IS NULL AND     \n" +
            "		NOT EXISTS (SELECT 'Y' FROM  workorder_operation_part c     \n" +
            "				WHERE c.woid = a.woid AND     \n" +
            "				      c.opid = a.opid AND     \n" +
            "				      c.partid = b.partid AND     \n" +
            "				      c.deletedAt IS NULL) ;    \n" +
            "  \n" +
            "	INSERT INTO workorder_operation_employee    \n" +
            "	(`woID`,`opID`,`employeeID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)    \n" +
            "	SELECT a.woID,a.opID,b.employeeID,UTC_TIMESTAMP() `createdAt`,a.createdBy,a.woOPID, a.isDeleted     \n" +
            "	FROM workorder_operation a JOIN  operation_employee   b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL     \n" +
            "	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND     \n" +
            "		NOT EXISTS (SELECT 'Y' FROM workorder_operation_employee c     \n" +
            "					WHERE c.woid = a.woid AND 	    \n" +
            "					      c.opid = a.opid AND     \n" +
            "					      c.employeeid = b.employeeid AND     \n" +
            "					      c.deletedAt IS NULL) AND     \n" +
            "	       a.deletedAt IS NULL AND b.deletedAt IS NULL ;    \n" +
            "  \n" +
            "	INSERT INTO workorder_operation_equipment    \n" +
            "	(`woID`,`opID`,`eqpID`,`createdAt`,`createdBy`,`woOPID`,  `isDeleted`)    \n" +
            "	SELECT a.woID,a.opID,b.eqpID,UTC_TIMESTAMP() `createdAt`,a.createdBy,a.woOPID, a.isDeleted     \n" +
            "	FROM workorder_operation a JOIN  operation_equipment  b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL     \n" +
            "	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND     \n" +
            "		NOT EXISTS (SELECT 'Y' FROM workorder_operation_equipment c     \n" +
            "				 WHERE c.woid = a.woid AND     \n" +
            "					c.opid = a.opid AND     \n" +
            "					c.eqpid = b.eqpid AND     \n" +
            "					c.deletedAt IS NULL) AND     \n" +
            "	       a.deletedAt IS NULL AND b.deletedAt IS NULL ;            \n" +
            "  \n" +
            "        INSERT INTO workorder_operation_equipment_dataelement    \n" +
            "        (woid,eqpid,opid,woopid,dataElementID,displayorder,createdAt,createdBy,isDeleted)    \n" +
            "	SELECT a.woID,a.eqpid,a.opid,a.woopid,b.dataElementID,b.displayOrder,UTC_TIMESTAMP() `createdAt`,a.createdBy, a.isDeleted     \n" +
            "	FROM workorder_operation_equipment a JOIN  equipment_dataelement  b    \n" +
            "	 ON a.eqpid = b.eqpid AND a.deletedAt IS NULL AND b.deletedAt IS NULL     \n" +
            "	 AND b.dataelementID IN (SELECT dataElementID FROM dataelement WHERE dataelement_use_at IN ('Both', 'Operation'))    \n" +
            "	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND     \n" +
            "		NOT EXISTS (SELECT 'Y' FROM workorder_operation_equipment_dataelement c    \n" +
            "				WHERE c.woid = a.woid AND     \n" +
            "				      c.opid = a.opid AND    \n" +
            "				      c.woopid = a.woopid AND     \n" +
            "				      c.eqpid = a.eqpid AND     \n" +
            "				      c.dataElementID = b.dataElementID  AND     \n" +
            "				      c.deletedAt IS NULL) AND    \n" +
            "	       a.deletedAt IS NULL AND b.deletedAt IS NULL ;    \n" +
            "	UPDATE workorder SET updatedby=puserID, isOperationsVerified=0,    \n" +
            "			updatedat=CONVERT_TZ(NOW(), @@session.time_zone, '+00:00') WHERE woid=pwoID;    \n" +
            "	COMMIT;    \n" +
            "END IF;    \n" +
            "END;  \n" +
                        /* **************************** New Script -> 20-08-2018  *********************************** */
                        "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
            "CREATE PROCEDURE `Sproc_checkDelete`(                  \n" +
            "	IN tableName VARCHAR(255),                  \n" +
            "	IN IDs LONGTEXT,                  \n" +
            "	IN deletedBy INT,                  \n" +
            "	IN entityID VARCHAR(255),                  \n" +
            "	IN refrenceIDs LONGTEXT                  \n" +
            "    )  \n" +
            "BEGIN                  \n" +
            "	DECLARE vWoID1 INT(11);                  \n" +
            "	DECLARE vOpID1 INT(11);                  \n" +
            "	DECLARE vSerialNo1 VARCHAR(50);                  \n" +
            "	DECLARE vProdStatus1 VARCHAR(5);                  \n" +
            "	DECLARE vWoTransID1 INT(11);                  \n" +
            "	DECLARE vQty1 INT(11);                  \n" +
            "	DECLARE vOpID2 INT(11);                  \n" +
            "	DECLARE vProdstatus2 VARCHAR(5);                  \n" +
            "  \n" +
            "IF tableName='employees' THEN                  \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)                  \n" +
            "	   UNION ALL                                        \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)                  \n" +
            "           UNION ALL                   \n" +
            "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND er.finalStatusInit IN(',IDs,') AND er.initiateBy IN(',IDs,') LIMIT 1)                  \n" +
            "	   UNION ALL                  \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)                  \n" +
            "	UNION ALL                  \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)                  \n" +
            "	  UNION ALL                  \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)                  \n" +
            "	  UNION ALL                  \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)                  \n" +
            "	  UNION ALL                  \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)                  \n" +
            "	  UNION ALL                  \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)                  \n" +
            "	 UNION ALL                  \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)                  \n" +
            "	  UNION ALL                  \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND wr.reqGenEmployeeID IN(',IDs,') and wr.woAuthorID IN(',IDs,') and wr.accRejBy IN(',IDs,') LIMIT 1)                  \n" +
            "	  UNION ALL                   \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND wr.commentemployeeID IN(',IDs,') AND wr.accRejBy IN(',IDs,') LIMIT 1)                  \n" +
            "	  UNION ALL                  \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND wr.employeeID IN(',IDs,') AND wr.requstedEmployeeID IN(',IDs,') LIMIT 1)                   \n" +
            "	  UNION ALL                      \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE wt.checkinEmployeeID IN(',IDs,') AND wt.checkoutEmployeeID IN(',IDs,') LIMIT 1)                  \n" +
            "	  UNION ALL                     \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)                  \n" +
            "	 UNION ALL                   \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)                  \n" +
            "	 UNION ALL                   \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)                  \n" +
            "	 UNION ALL                   \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND wthu.holdEmployeeId IN(',IDs,') and wthu.unHoldEmployeeId IN(',IDs,') LIMIT 1)                  \n" +
            "	UNION ALL                   \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)                  \n" +
            "	 UNION ALL                   \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)                  \n" +
            "	 UNION ALL                   \n" +
            "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)                  \n" +
            "	 UNION ALL                   \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND holdEmployeeId IN(',IDs,') AND unHoldEmployeeId IN(',IDs,')LIMIT 1)                  \n" +
            "  \n" +
            "        ) q');                  \n" +
            "    PREPARE stmt FROM @SQL;                  \n" +
            "    EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempEmp)=0 THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');                  \n" +
            "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');                  \n" +
            "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');                  \n" +
            "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                  \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			PREPARE stmt2 FROM @SQL2;                  \n" +
            "			PREPARE stmt3 FROM @SQL3;                  \n" +
            "			PREPARE stmt4 FROM @SQL4;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "			EXECUTE stmt2;                  \n" +
            "			EXECUTE stmt3;                  \n" +
            "			EXECUTE stmt4;                  \n" +
            "			SELECT                   \n" +
            "    *                  \n" +
            "FROM                  \n" +
            "    tempEmp;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempEmp;                  \n" +
            "		END IF;                  \n" +
            "  \n" +
            "    DROP TABLE tempEmp;                  \n" +
            "END IF;                  \n" +
            "IF tableName='eco_type_category' THEN                  \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                   \n" +
            "	  ) q');                  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT                   \n" +
            "    *                  \n" +
            "FROM                  \n" +
            "    tempEcoTypeCategory;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempEcoTypeCategory;                  \n" +
            "		END IF;                  \n" +
            "    DROP TABLE tempEcoTypeCategory;                    \n" +
            "END IF;                  \n" +
            "IF tableName='eco_type_values' THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)                  \n" +
            "	  ) q');                  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT                   \n" +
            "    *                  \n" +
            "FROM                  \n" +
            "    tempEcoTypeValues;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempEcoTypeValues;                  \n" +
            "		END IF;                  \n" +
            "    DROP TABLE tempEcoTypeValues;                    \n" +
            "END IF;                  \n" +
            "IF tableName='customers' THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                   \n" +
            "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                   \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                  \n" +
            "	  ) q');                  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                  \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			PREPARE stmt2 FROM @SQL2;                  \n" +
            "			PREPARE stmt3 FROM @SQL3;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "			EXECUTE stmt2;                  \n" +
            "			EXECUTE stmt3;                  \n" +
            "  \n" +
            "			SELECT                   \n" +
            "    *                  \n" +
            "FROM                  \n" +
            "    tempCustomers;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempCustomers;                  \n" +
            "		END IF;                  \n" +
            "    DROP TABLE tempCustomers;                    \n" +
            "END IF;                  \n" +
            "IF tableName='certificate_standards' THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                  \n" +
            "  \n" +
            "	  ) q');                  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		                  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                  \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			PREPARE stmt2 FROM @SQL2;                  \n" +
            "			PREPARE stmt3 FROM @SQL3;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "			EXECUTE stmt2;                  \n" +
            "			EXECUTE stmt3;                  \n" +
            "  \n" +
            "			SELECT * FROM tempCertificateStandards;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempCertificateStandards;                  \n" +
            "		END IF;                  \n" +
            "    DROP TABLE tempCertificateStandards;                    \n" +
            "END IF;                  \n" +
            "IF tableName='department' THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                  \n" +
            "  \n" +
            "	  ) q');                  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		                  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                  \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			PREPARE stmt2 FROM @SQL2;                  \n" +
            "			PREPARE stmt3 FROM @SQL3;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "			EXECUTE stmt2;                  \n" +
            "			EXECUTE stmt3;                  \n" +
            "  \n" +
            "			SELECT * FROM tempDepartment;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempDepartment;                  \n" +
            "		END IF;                  \n" +
            "    DROP TABLE tempDepartment;                    \n" +
            "END IF;                  \n" +
            "IF tableName='genericcategory' THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND eqpGroupID IN(',IDs,') AND eqpSubGroupID IN(',IDs,') AND eqpTypeID IN(',IDs,') AND eqpPossessionID IN(',IDs,') AND eqpOwnershipTypeID IN(',IDs,') AND locationTypeID IN(',IDs,')   LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)                  \n" +
            "	     UNION ALL                \n" +
            "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)                  \n" +
            "	  ) q');                  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT                   \n" +
            "    *                  \n" +
            "FROM                  \n" +
            "    tempGenericCategory;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempGenericCategory;                  \n" +
            "		END IF;                  \n" +
            "    DROP TABLE tempGenericCategory;                    \n" +
            "END IF;                  \n" +
            "IF tableName='equipment' THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND workstationID IN(',IDs,') AND equipmentID IN(',IDs,') LIMIT 1)                  \n" +
            "  \n" +
            "	  ) q');                  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN                  \n" +
            "			IF entityID IS NOT NULL THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		                  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                  \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			PREPARE stmt2 FROM @SQL2;                  \n" +
            "			PREPARE stmt3 FROM @SQL3;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "			EXECUTE stmt2;                  \n" +
            "			EXECUTE stmt3;                  \n" +
            "  \n" +
            "			ELSE                  \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "			END IF;                  \n" +
            "  \n" +
            "			SELECT * FROM tempEquipment;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempEquipment;                  \n" +
            "		END IF;                  \n" +
            "    DROP TABLE tempEquipment;                    \n" +
            "END IF;                  \n" +
            "IF tableName='parts' THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                  \n" +
            "	  ) q');                  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempParts)=0 THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempParts;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempParts;                  \n" +
            "		END IF;                  \n" +
            "    DROP TABLE tempParts;                    \n" +
            "END IF;                  \n" +
            "IF tableName='master_templates' THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)                  \n" +
            "	  ) q');                  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempMasterTemplate;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempMasterTemplate;                  \n" +
            "		END IF;                  \n" +
            "    DROP TABLE tempMasterTemplate;                    \n" +
            "END IF;                  \n" +
            "IF tableName='operations' THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                  \n" +
            "  \n" +
            "	  ) q');                  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempOperations)=0 THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		                  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                  \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			PREPARE stmt2 FROM @SQL2;                  \n" +
            "			PREPARE stmt3 FROM @SQL3;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "			EXECUTE stmt2;                  \n" +
            "			EXECUTE stmt3;                  \n" +
            "  \n" +
            "			SELECT * FROM tempOperations;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempOperations;                  \n" +
            "		END IF;                  \n" +
            "    DROP TABLE tempOperations;                    \n" +
            "END IF;                  \n" +
            "IF tableName='workorder' THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL		                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                  \n" +
            "  \n" +
            "	  ) q');                  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN                  \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete work order */                  \n" +
            "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;                   \n" +
            "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");                  \n" +
            "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			                  \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			                  \n" +
            "			/* [E] - Add Time line log for delete work order */			                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                  \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                  \n" +
            "			SET @SQl4 = CONCAT('update workorder_certification set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			PREPARE stmt2 FROM @SQL2;                  \n" +
            "			PREPARE stmt3 FROM @SQL3;                  \n" +
            "			PREPARE stmt4 FROM @SQL4;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "			EXECUTE stmt2;                  \n" +
            "			EXECUTE stmt3;                  \n" +
            "			EXECUTE stmt4;                  \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorder;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempWorkorder;                  \n" +
            "		END IF;                  \n" +
            "    DROP TABLE tempWorkorder;                    \n" +
            "END IF;                  \n" +
            "IF tableName='roles' THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                  \n" +
            "         UNION ALL                  \n" +
            "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                  \n" +
            "         UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');                  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempRoles)=0 THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempRoles;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempRoles;                  \n" +
            "		END IF;                  \n" +
            "    DROP TABLE tempRoles;                    \n" +
            "END IF;                  \n" +
            "IF tableName='standard_class' THEN                  \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND classIDs IN(',IDs,') LIMIT 1)                  \n" +
            "	  ) q');                  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempStandardClass;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempStandardClass;                  \n" +
            "		END IF;                  \n" +
            "    DROP TABLE tempStandardClass;                    \n" +
            "END IF;                  \n" +
            "IF tableName='dataelement' THEN                  \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		                  \n" +
            "		UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                  \n" +
            "	  ) q');                  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt2 FROM @SQL2;                  \n" +
            "			EXECUTE stmt2;                  \n" +
            "  \n" +
            "  \n" +
            "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)                  \n" +
            "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated                  \n" +
            "			FROM dataelement dl WHERE dl.dataElementID = IDs;                  \n" +
            "  \n" +
            "  \n" +
            "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */                  \n" +
            "  \n" +
            "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                   \n" +
            "							where type IN(''',IDs,''') and deletedAt IS NULL ');		                  \n" +
            "				PREPARE stmt3 FROM @SQL3;                  \n" +
            "				EXECUTE stmt3;                  \n" +
            "  \n" +
            "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */                  \n" +
            "  \n" +
            "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */                  \n" +
            "  \n" +
            "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs                   \n" +
            "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN                  \n" +
            "  \n" +
            "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                   \n" +
            "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'                   \n" +
            "								AND isAutoIncrement = 1 AND deletedAt IS NULL)                  \n" +
            "							 and deletedAt IS NULL ');		                  \n" +
            "					     PREPARE stmt4 FROM @SQL4;                  \n" +
            "				             EXECUTE stmt4;                  \n" +
            "					END IF;	                  \n" +
            "				END IF;                  \n" +
            "  \n" +
            "  \n" +
            "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN                  \n" +
            "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)                   \n" +
            "						    AND deletedAt IS NULL');		                  \n" +
            "				PREPARE stmt5 FROM @SQL5;                  \n" +
            "				EXECUTE stmt5;                  \n" +
            "  \n" +
            "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                   \n" +
            "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		                  \n" +
            "				PREPARE stmt6 FROM @SQL6;                  \n" +
            "				EXECUTE stmt6;                  \n" +
            "  \n" +
            "  \n" +
            "			END IF;                  \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM tempDataElement;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempDataElement;                  \n" +
            "		END IF;                  \n" +
            "    DROP TABLE tempDataElement;                    \n" +
            "  \n" +
            "END IF;                  \n" +
            "IF tableName='workorder_preprogcomp' THEN                  \n" +
            "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                  \n" +
            "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg                  \n" +
            "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND                  \n" +
            "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                  \n" +
            "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "    SELECT * FROM  tempComponent;                  \n" +
            "    SELECT TotalCount FROM  tempComponent;                  \n" +
            "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			                  \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete pre program component */            \n" +
            "			SELECT partNumber,(SELECT woNumber FROM workorder WHERE woID = woppc.woID),          \n" +
            "				(SELECT opName FROM workorder_operation WHERE woOPID = refStkWOOPID)          \n" +
            "			    INTO @lvPartNumber,@lvWoNumber,@lvOpName          \n" +
            "			FROM workorder_preprogcomp woppc            \n" +
            "			WHERE woPreProgCompID = IDs  AND deletedAt IS NULL;             \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Preprogram component deleted from work order\");            \n" +
            "			SET @lvEventDescription = CONCAT(\"Preprogram component \\\"\",@lvPartNumber,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	            \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.14,NULL,deletedBy,3);  /* 3 = DELETE */            \n" +
            "			/* [E] - Add Time line log for delete pre program component */           \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt2 FROM @SQL2;                  \n" +
            "			EXECUTE stmt2;                  \n" +
            "  \n" +
            "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where                   \n" +
            "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                  \n" +
            "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt3 FROM @SQL3;                  \n" +
            "			EXECUTE stmt3;                  \n" +
            "		SELECT                   \n" +
            "			*                  \n" +
            "		FROM                  \n" +
            "			tempComponent;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempComponent;                  \n" +
            "		END IF;                  \n" +
            "    DROP TABLE tempComponent;                    \n" +
            "END IF;                  \n" +
            "IF tableName='component' THEN                  \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                  \n" +
            "		 UNION ALL                  \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                  \n" +
            "  \n" +
            "	  ) q');                  \n" +
            "	  PREPARE stmt FROM @SQL;                  \n" +
            "	   EXECUTE stmt;                  \n" +
            "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN                  \n" +
            "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempComponent;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempComponent;                  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempComponent;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"workorder_cluster\" THEN                   \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)                  \n" +
            "		      ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN                  \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete cluster */                  \n" +
            "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster                  \n" +
            "		WHERE clusterID = IDs AND deletedAt IS NULL;                  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder                  \n" +
            "		WHERE woID = @lvWoID AND deletedAt IS NULL ;                  \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");                  \n" +
            "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                  \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		                  \n" +
            "		/* [E] - Add Time line log for delete cluster */                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderCluster;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempWorkorderCluster;                  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempWorkorderCluster;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"workorder_operation\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)                  \n" +
            "			 UNION ALL                  \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		                   \n" +
            "		      ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN                  \n" +
            "			 /* [S] - Add Time line log for delete work order operation */                  \n" +
            "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName                  \n" +
            "			FROM workorder_operation                   \n" +
            "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;                   \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                  \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");                  \n" +
            "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                  \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		                  \n" +
            "			/* [E] - Add Time line log for delete work order operation */                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                  \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                  \n" +
            "		SET @SQl3 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                  \n" +
            "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                  \n" +
            "		SET @SQl5 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                  \n" +
            "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                  \n" +
            "		SET @SQl7 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		                  \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                  \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;                  \n" +
            "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		                  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                  \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			PREPARE stmt2 FROM @SQL2;                  \n" +
            "			PREPARE stmt3 FROM @SQL3;                  \n" +
            "			PREPARE stmt4 FROM @SQL4;                  \n" +
            "			PREPARE stmt5 FROM @SQL5;                  \n" +
            "			PREPARE stmt6 FROM @SQL6;                  \n" +
            "			PREPARE stmt7 FROM @SQl7;                  \n" +
            "			PREPARE stmt8 FROM @SQl7;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "			EXECUTE stmt2;                  \n" +
            "			EXECUTE stmt3;                  \n" +
            "			EXECUTE stmt4;                  \n" +
            "			EXECUTE stmt5;                  \n" +
            "			EXECUTE stmt6;                  \n" +
            "			EXECUTE stmt7;                  \n" +
            "			EXECUTE stmt8;                  \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperation;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempWorkorderOperation;                  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempWorkorderOperation;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"workorder_operation_part\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                  \n" +
            "		      ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN                  \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete parts from work order */                  \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                  \n" +
            "		FROM workorder_operation                   \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                   \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                  \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts                  \n" +
            "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;                   \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");                  \n" +
            "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                  \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */                  \n" +
            "		/* [E] - Add Time line log for delete parts from work order */                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderPart;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempWorkorderPart;                  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempWorkorderPart;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"workorder_operation_equipment\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                  \n" +
            "		      ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN                  \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Equipment from work order */                  \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                  \n" +
            "		FROM workorder_operation                   \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                   \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	                  \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment                  \n" +
            "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;                   \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");                  \n" +
            "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                  \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                  \n" +
            "		/* [E] -  Add Time line log for delete Equipment from work order */                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');                  \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			PREPARE stmt2 FROM @SQL2;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "			EXECUTE stmt2;                  \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEquipment;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempWorkorderEquipment;                  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempWorkorderEquipment;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"workorder_operation_employee\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                  \n" +
            "		      ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN                  \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Employees from work order */                  \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                  \n" +
            "		FROM workorder_operation                   \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                   \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                  \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees                  \n" +
            "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;                   \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");                  \n" +
            "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                  \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                  \n" +
            "		/* [E] -  Add Time line log for delete Employee from work order */                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEmployee;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempWorkorderEmployee;                  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempWorkorderEmployee;                  \n" +
            "  \n" +
            "END IF;                  \n" +
            "IF tableName=\"workorder_operation_cluster\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)                  \n" +
            "		      ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN                  \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete operations from cluster */                  \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                  \n" +
            "		FROM workorder_operation                   \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                   \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                  \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster                  \n" +
            "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;                   \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");                  \n" +
            "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                  \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                  \n" +
            "		/* [E] -  Add Time line log for delete operations from cluster */		                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                  \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                  \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;                  \n" +
            "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		                  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                  \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			PREPARE stmt2 FROM @SQL2;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "			EXECUTE stmt2;                  \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempWorkorderOperationCluster;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"entity\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                  \n" +
            "		     UNION ALL                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                  \n" +
            "		     UNION ALL                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                  \n" +
            "		    UNION ALL                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                  \n" +
            "		      ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempEntity)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempEntity;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempEntity;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempEntity;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"salesordermst\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)                  \n" +
            "		      ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete sales order mst */ 	          \n" +
            "			SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber          \n" +
            "			FROM salesordermst          \n" +
            "			WHERE FIND_IN_SET(id,IDs);          \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");            \n" +
            "			SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	            \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */            \n" +
            "			/* [E] - Add Time line log for delete sales order mst */	          \n" +
            "  \n" +
            "			SELECT * FROM tempSalesOrderMst;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempSalesOrderMst;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempSalesOrderMst;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"mfgcodemst\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)                  \n" +
            "		      ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempMFGCodeMst;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempMFGCodeMst;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempMFGCodeMst;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"dataelement_transactionvalues_manual\" THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                   \n" +
            "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)                  \n" +
            "				and deletedAt IS NULL');		                  \n" +
            "			PREPARE stmt2 FROM @SQL2;                  \n" +
            "			EXECUTE stmt2;                  \n" +
            "  \n" +
            "  \n" +
            "END IF;                  \n" +
            "IF tableName=\"shippedassembly\" THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;          \n" +
            "			/* [S] - Add Time line log for delete shipped assembly */           \n" +
            "			SELECT GROUP_CONCAT(shippedqty) , workorderID  INTO @lvShippedqty,@lvWoID          \n" +
            "			FROM shippedassembly          \n" +
            "			WHERE FIND_IN_SET(id,IDs);          \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID ;          \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Shipped assembly deleted\");            \n" +
            "			SET @lvEventDescription = CONCAT(\"Shipped assembly for workorder \\\"\",@lvWoNumber,\"\\\" & quantity \\\"\",@lvShippedqty ,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	            \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,9,NULL,deletedBy,3);  /* 3 = DELETE */            \n" +
            "			/* [E] - Add Time line log for delete shipped assembly */ 		          \n" +
            "  \n" +
            "END IF;                  \n" +
            "IF tableName=\"assemblymst\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                  \n" +
            "		     UNION ALL                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                  \n" +
            "		     UNION ALL                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                  \n" +
            "		     UNION ALL                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                  \n" +
            "		    UNION ALL                  \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)                  \n" +
            "		      ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempassemblymst;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempassemblymst;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempassemblymst;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"assembly_revisionmst\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND fromRevisionID IN(',IDs,') AND toRevisionID IN(',IDs,')  LIMIT 1)                  \n" +
            "		     UNION ALL                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                  \n" +
            "		     UNION ALL                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                  \n" +
            "		     UNION ALL                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                  \n" +
            "		    UNION ALL                  \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)                  \n" +
            "		      ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempassembly_revisionmst;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempassembly_revisionmst;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempassembly_revisionmst;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"workorder_trans_serialno\" THEN                  \n" +
            "  \n" +
            "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1                   \n" +
            "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;                  \n" +
            "  \n" +
            "  \n" +
            "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)                  \n" +
            "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)                   \n" +
            "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1                   \n" +
            "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;                  \n" +
            "  \n" +
            "	/* condition to check total serials of type greater than actual production qty */                  \n" +
            "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1                  \n" +
            "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)                   \n" +
            "		> IFNULL(vQty1,0)) THEN                  \n" +
            "  \n" +
            "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */                  \n" +
            "		IF(vQty1 IS NULL OR vQty1 = 0) THEN                   \n" +
            "  \n" +
            "			/* condition to check curr opis and status match with given delete serial */                  \n" +
            "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1                  \n" +
            "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN                  \n" +
            "  \n" +
            "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                  \n" +
            "				WHERE woTransSerialID = IDs;	                  \n" +
            "  \n" +
            "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                   \n" +
            "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                  \n" +
            "				ORDER BY woTransSerialID DESC LIMIT 1;                  \n" +
            "  \n" +
            "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                  \n" +
            "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	            \n" +
            "				/* [S] - Add Time line log for delete production serial from work order operation */ 	          \n" +
            "				SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");            \n" +
            "				SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	            \n" +
            "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */            \n" +
            "				/* [E] - Add Time line log for delete production serial from work order operation */ 				          \n" +
            "  \n" +
            "			ELSE                   \n" +
            "				SELECT 'not allowed';                  \n" +
            "			END IF;                  \n" +
            "  \n" +
            "  \n" +
            "		ELSE                   \n" +
            "  \n" +
            "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                  \n" +
            "			WHERE woTransSerialID = IDs;	                  \n" +
            "  \n" +
            "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                   \n" +
            "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                  \n" +
            "			ORDER BY woTransSerialID DESC LIMIT 1;                  \n" +
            "  \n" +
            "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                  \n" +
            "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;          \n" +
            "			/* [S] - Add Time line log for delete production serial from work order operation */ 	          \n" +
            "			SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");            \n" +
            "			SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	            \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */            \n" +
            "			/* [E] - Add Time line log for delete production serial from work order operation */              \n" +
            "  \n" +
            "		END IF;	                  \n" +
            "  \n" +
            "  \n" +
            "	ELSE                   \n" +
            "		SELECT 'not allowed';		                  \n" +
            "	END IF;	                  \n" +
            "  \n" +
            "  \n" +
            "END IF;                  \n" +
            "IF tableName=\"br_label_template\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)                  \n" +
            "		      ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempbr_label_template;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempbr_label_template;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempbr_label_template;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"measurement_types\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)                  \n" +
            "		     UNION ALL                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempMeasurement_types;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempMeasurement_types;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempMeasurement_types;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"uoms\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg                   \n" +
            "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)                  \n" +
            "            UNION ALL                  \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg                   \n" +
            "            FROM unit_detail_formula WHERE deletedAt IS NULL AND unitID IN (',IDs,')  or toUnitID IN (',IDs,')  LIMIT 1)          \n" +
            "              UNION ALL                \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND uom IN(',IDs,') LIMIT 1)) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempUOMs;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempUOMs;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempUOMs;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"jobtypes\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                   \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempJobTypess;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempJobTypess;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempJobTypess;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"ordertype\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                   \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempOrderTypes;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempOrderTypes;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempOrderTypes;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"reasonmst\" THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "END IF;                  \n" +
            "IF tableName='component_sid_stock' THEN	                  \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)                  \n" +
            "			UNION ALL                  \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		                      \n" +
            "		    ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete component sid stock (receiving material) */ 	          \n" +
            "			SELECT GROUP_CONCAT(uid) INTO @lvUID  FROM component_sid_stock          \n" +
            "			WHERE FIND_IN_SET(id,IDs);	          \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Receiving material(s) deleted\");            \n" +
            "			SET @lvEventDescription = CONCAT(\"Receiving material(s) of UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	            \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7,NULL,deletedBy,3);  /* 3 = DELETE */            \n" +
            "			/* [E] - Add Time line log for delete component sid stock (receiving material) */ 	          \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentsidstock;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempcomponentsidstock;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempcomponentsidstock;                   \n" +
            "  \n" +
            "END IF;                  \n" +
            "IF tableName='component_sid_stock_dataelement_values' THEN	                  \n" +
            "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;              \n" +
            "			/* [S] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	          \n" +
            "			SELECT GROUP_CONCAT(dataelementid), GROUP_CONCAT(refsidid) INTO @lvCSDlIDs,@lvRefsidid             \n" +
            "			FROM component_sid_stock_dataelement_values          \n" +
            "			WHERE FIND_IN_SET(id,IDs);          \n" +
            "  \n" +
            "			SELECT uid INTO @lvUID FROM component_sid_stock WHERE id = @lvRefsidid   ;          \n" +
            "  \n" +
            "			SELECT GROUP_CONCAT(dataElementName) INTO @lvDlNames          \n" +
            "			FROM dataelement           \n" +
            "			WHERE FIND_IN_SET(dataElementID,@lvCSDlIDs);	          \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Data field(s) of receiving material deleted\");            \n" +
            "			SET @lvEventDescription = CONCAT(\"Data field(s) \\\"\",@lvDlNames,\"\\\" of receiving material with UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	            \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7.01,NULL,deletedBy,3);  /* 3 = DELETE */            \n" +
            "			/* [E] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	          \n" +
            "END IF;                  \n" +
            "IF tableName='chart_templatemst' THEN	                  \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)                  \n" +
            "		    ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempcharttemplatemst;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempcharttemplatemst;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempcharttemplatemst;                   \n" +
            "  \n" +
            "END IF;                  \n" +
            "IF tableName=\"shipping_request\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg                   \n" +
            "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)                  \n" +
            "            UNION ALL                  \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg                   \n" +
            "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;            \n" +
            "			/* [S] - Add Time line log for delete shipment request */           \n" +
            "			SELECT GROUP_CONCAT(note) INTO @lvNotes FROM Shipping_Request          \n" +
            "			WHERE FIND_IN_SET(id,IDs);	          \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Shipment request deleted\");            \n" +
            "			SET @lvEventDescription = CONCAT(\"Shipment request of \\\"\",@lvNotes,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	            \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,8,NULL,deletedBy,3);  /* 3 = DELETE */            \n" +
            "			/* [E] - Add Time line log for delete shipment request */           \n" +
            "  \n" +
            "			SELECT * FROM tempShippingRequest;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempShippingRequest;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempShippingRequest;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"chart_rawdata_category\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg                   \n" +
            "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)                  \n" +
            "            UNION ALL                  \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg                   \n" +
            "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempChartRawdataCategory;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempChartRawdataCategory;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempChartRawdataCategory;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"component_standard\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg                   \n" +
            "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandard;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempcomponentStandard;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempcomponentStandard;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"component_standard_class\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg                   \n" +
            "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');                  \n" +
            "           /*  UNION ALL                  \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg                   \n" +
            "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt2 FROM @SQL2;                  \n" +
            "			EXECUTE stmt2;                  \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandardClass;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempcomponentStandardClass;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempcomponentStandardClass;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"rfq_lineitems\" THEN                  \n" +
            "		SELECT 0 TotalCount, '' Message;                  \n" +
            "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "		PREPARE stmt1 FROM @SQL1;                  \n" +
            "		EXECUTE stmt1;                              \n" +
            "END IF;                  \n" +
            "IF tableName=\"requirement\" THEN                  \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg                   \n" +
            "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM temprequirements)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM temprequirements;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM temprequirements;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE temprequirements;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"workorder_trans_packagingdetail\" THEN             \n" +
            "		/* [S] - Add Time line log for delete work order transaction packing details */            \n" +
            "		SELECT  (SELECT woNumber FROM workorder WHERE woID = wtpd.woID),          \n" +
            "			(SELECT opName FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL),          \n" +
            "			(SELECT woOPID FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL)          \n" +
            "			INTO @lvWoNumber , @lvOpName ,@lvWoOPID           \n" +
            "		FROM workorder_trans_packagingdetail wtpd           \n" +
            "		WHERE wtpd.woTransPackagingDetailID = IDs AND wtpd.deletedAt IS NULL  /* here ids multiple but need one record only so */;          \n" +
            "		SET @lvEventTitle = CONCAT(\"Box serial details deleted from work order operation\");            \n" +
            "		SET @lvEventDescription = CONCAT(\"Box serial details deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	            \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.17,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */            \n" +
            "		/* [E] - Add Time line log for delete work order transaction packing details */           \n" +
            "  \n" +
            "		SELECT 0 TotalCount, '' Message;                  \n" +
            "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "		PREPARE stmt1 FROM @SQL1;                  \n" +
            "		EXECUTE stmt1;                              \n" +
            "END IF;                  \n" +
            "IF tableName=\"customer_addresses\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)                  \n" +
            "			UNION ALL                  \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                   \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempcustomer_addresses;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempcustomer_addresses;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempcustomer_addresses;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"rfqforms\" THEN                  \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg                   \n" +
            "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in                   \n" +
            "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');                  \n" +
            "  \n" +
            "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in                   \n" +
            "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		                  \n" +
            "  \n" +
            "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in                   \n" +
            "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		                  \n" +
            "  \n" +
            "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in                   \n" +
            "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		                  \n" +
            "  \n" +
            "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in                   \n" +
            "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');                  \n" +
            "  \n" +
            "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		                  \n" +
            "  \n" +
            "            PREPARE stmt1 FROM @SQL1;                  \n" +
            "			PREPARE stmt2 FROM @SQL2;                  \n" +
            "            PREPARE stmt3 FROM @SQL3;                  \n" +
            "			PREPARE stmt4 FROM @SQL4;                  \n" +
            "            PREPARE stmt5 FROM @SQL5;                  \n" +
            "			PREPARE stmt6 FROM @SQL6;                  \n" +
            "  \n" +
            "			EXECUTE stmt1;                  \n" +
            "			EXECUTE stmt2;                  \n" +
            "            EXECUTE stmt3;                  \n" +
            "			EXECUTE stmt4;                  \n" +
            "            EXECUTE stmt5;                  \n" +
            "			EXECUTE stmt6;                  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM temprfqformss;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM temprfqformss;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE temprfqformss;                   \n" +
            "END IF;                  \n" +
            "IF tableName=\"rfq_mountingtypemst\" THEN                  \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg                   \n" +
            "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1)          \n" +
            "             UNION ALL                \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mountingTypeID IN(',IDs,') LIMIT 1)) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM temprfqpartcategory;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM temprfqpartcategory;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE temprfqpartcategory;                   \n" +
            "  \n" +
            "END IF;                  \n" +
            "IF tableName=\"who_bought_who\" THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "END IF;                  \n" +
            "IF tableName=\"rfq_parttypemst\" THEN                  \n" +
            "			SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqparttypemst as                  \n" +
            "				 SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "			    FROM                   \n" +
            "			    (             \n" +
            "	            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM           \n" +
            "	            component WHERE deletedAt IS NULL AND partTypeID IN(',IDs,') LIMIT 1)) q');                  \n" +
            "	  	        PREPARE stmt FROM @SQL;                  \n" +
            "		        EXECUTE stmt;            \n" +
            "	          IF (SELECT TotalCount FROM temprfqparttypemst)=0 THEN              \n" +
            "  \n" +
            "				SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,',           \n" +
            "	            deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "	  				PREPARE stmt1 FROM @SQL1;                  \n" +
            "						EXECUTE stmt1;            \n" +
            "	            	SELECT * FROM temprfqparttypemst;                  \n" +
            "			ELSE                  \n" +
            "				SELECT * FROM temprfqparttypemst;                  \n" +
            "  \n" +
            "			END IF;                  \n" +
            "            DROP TABLE temprfqparttypemst;                             \n" +
            "  \n" +
            "END IF;                  \n" +
            "IF tableName=\"rfq_lineitems_errorcode\" THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "END IF;                  \n" +
            "IF tableName=\"rfq_lineitems_keywords\" THEN                  \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "END IF;            \n" +
            "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                  \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempQuotecharges_dynamic_fields_mst as                  \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                  \n" +
            "		    FROM                   \n" +
            "		    (                  \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                   \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');                  \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                  \n" +
            "	EXECUTE stmt;                  \n" +
            "		IF (SELECT TotalCount FROM tempQuotecharges_dynamic_fields_mst)=0 THEN                  \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update quotecharges_dynamic_fields_mst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                  \n" +
            "			PREPARE stmt1 FROM @SQL1;                  \n" +
            "			EXECUTE stmt1;                  \n" +
            "  \n" +
            "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                  \n" +
            "		ELSE                  \n" +
            "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                  \n" +
            "  \n" +
            "		END IF;                  \n" +
            "		DROP TABLE tempQuotecharges_dynamic_fields_mst;                   \n" +
            "END IF;                       \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 20-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (109,'1.00','V1',' Audit log Trigger , Delete sp , AddOpInWo Sp  - KETAN '," + userid + ");"
          );
            break;
        case 109:
            allDbChangesArray.push(
          //  /* **************************** New Script -> 20-08-2018  *********************************** */
           "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(              \n" +
            "	IN ppageIndex INT(11),              \n" +
            "	IN precordPerPage INT(11),              \n" +
            "	IN pOrderBy VARCHAR(255),              \n" +
            "	IN pWhereClause VARCHAR(21844),              \n" +
            "	IN rfqAssyID INT(11),              \n" +
            "	IN puserID INT (11)              \n" +
            "    )  \n" +
            "BEGIN              \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);              \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;              \n" +
            "	    SET @SQLString = NULL;              \n" +
            "	    SET SESSION group_concat_max_len = 150000;                  \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN              \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
            "		ELSE              \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;               \n" +
            "		END IF;	              \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN              \n" +
            "			SET pWhereClause = '1=1' ;              \n" +
            "		END IF;	              \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN               \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		              \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
            "		ELSE	              \n" +
            "			SET rowNumWhere = '';              \n" +
            "		END IF;	              \n" +
            "		SELECT              \n" +
            "                     GROUP_CONCAT(DISTINCT              \n" +
            "				CONCAT(              \n" +
            "					'Max((IF(ra.requestQty = ''',              \n" +
            "						ra.requestQty,              \n" +
            "					''', rq.finalPrice, null))) AS ''',              \n" +
            "						ra.requestQty,''''              \n" +
            "					)              \n" +
            "					) INTO @SQLString              \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq              \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID              \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id              \n" +
            "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;              \n" +
            "  \n" +
            "			IF(@SQLString IS NOT NULL) THEN              \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS              \n" +
            "					SELECT               \n" +
            "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                \n" +
            "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,          \n" +
            "					(SELECT           \n" +
            "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                    \n" +
            "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN           \n" +
            "                                     component c ON rla.mfgpnid=c.id           \n" +
            "                                     LEFT JOIN mfgcodemst mg ON            \n" +
            "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,              \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'', c.rohsComplient )AS mfgPn               \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN           \n" +
            "                                component c ON rla.mfgpnid=c.id                     \n" +
            "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',               \n" +
            "					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl              \n" +
            "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID              \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id              \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');              \n" +
            "  \n" +
            "			ELSE              \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS              \n" +
            "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,           \n" +
            "					 GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                    \n" +
            "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN           \n" +
            "                                     component c ON rla.mfgpnid=c.id           \n" +
            "                                     LEFT JOIN mfgcodemst mg ON            \n" +
            "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn               \n" +
            "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla               \n" +
            "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl              \n" +
            "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	              \n" +
            "			END IF;              \n" +
            "			PREPARE stmt FROM @SQLStatement;              \n" +
            "			EXECUTE stmt;	              \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );              \n" +
            "			PREPARE query1 FROM @SQLStatement1;              \n" +
            "			EXECUTE query1;              \n" +
            "			DEALLOCATE PREPARE query1;              \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
            "			PREPARE query2 FROM @SQLStatement2;              \n" +
            "			EXECUTE query2;              \n" +
            "			DEALLOCATE PREPARE query2;              \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );              \n" +
            "			PREPARE query3 FROM @SQLStatement3;              \n" +
            "			EXECUTE query3;              \n" +
            "			DEALLOCATE PREPARE query3;              \n" +
            "  \n" +
            "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.turnType,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt              \n" +
            "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id              \n" +
            "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);              \n" +
            "			PREPARE query4 FROM @SQLStatement4;              \n" +
            "			EXECUTE query4;              \n" +
            "			DEALLOCATE PREPARE query4;          \n" +
            "  \n" +
            "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty, rq.finalPrice, unitPrice,supplier,rq.min,rq.mult, selectedMpn, selectionMode,qtyID,         \n" +
            "					currentStock,        \n" +
            "					leadTime,         \n" +
            "					supplierStock,        \n" +
            "					grossStock,            \n" +
            "					selectedPIDCode,ct.qpa, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                   \n" +
            "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID           \n" +
            "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id           \n" +
            "				WHERE ct.rfqAssyID=\",rfqAssyID);                  \n" +
            "			PREPARE query5 FROM @SQLStatement5;                      \n" +
            "			EXECUTE query5;                      \n" +
            "			DEALLOCATE PREPARE query5;             \n" +
            "  \n" +
            "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,       \n" +
            "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,       \n" +
            "						(SUM(rq.unitPrice)) AS TotalUnitPrice,      \n" +
            "						(SUM(rq.finalPrice)/ IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice    \n" +
            "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq          \n" +
            "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id          \n" +
            "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                  \n" +
            "  \n" +
            "			PREPARE query6 FROM @SQLStatement6;                      \n" +
            "			EXECUTE query6;                      \n" +
            "			DEALLOCATE PREPARE query6;                          \n" +
            "  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;                \n" +
            "    END;  \n" +
          //  /* **************************** Add Script Version -> 20-08-2018 *********************************** */
           "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
           "VALUES (110,'1.00','V1','RFQ linItem added RoHS with Group Concate-Vaibhav '," + userid + ");"
           );
            break;
        case 110:
            allDbChangesArray.push(
          //  /* **************************** New Script -> 21-08-2018  *********************************** */
           "ALTER TABLE rfq_lineitems  \n" +
            "ADD COLUMN `customerPartDesc` varchar(500) NULL;  \n" +
            "ALTER TABLE rfq_lineitems  \n" +
            "ADD COLUMN `org_customerPartDesc` varchar(500) NULL;  \n" +
            "INSERT INTO rfq_lineitems_headers  \n" +
            "(name, field, displayOrder, createdBy, createdAt, isDeleted)  \n" +
            "VALUES  \n" +
            "('Customer Part Desc','customerPartDesc', 4, 1, utc_timestamp(), 0);  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(  \n" +
            "	IN prfqAssyID INT      \n" +
            ")  \n" +
            "BEGIN      \n" +
            "	DROP temporary table if exists tempRfq_lineitems;      \n" +
            "    DROP temporary table if exists tempRfq_lineitemsAlt;      \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE tempRfq_lineitems AS          \n" +
            "	SELECT a.id, a.lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,       \n" +
            "    CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,      \n" +
            "    a.description, a.level, a.numOfPosition, a.customerRev, a.customerDescription,                  \n" +
            "			CONCAT(part.partTypeName, ' | ', c.name) partclassID, a.isInstall, a.isPurchase, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID,       \n" +
            "            a.dnpQty, a.dnpDesig, a.qpaDesignatorStep, a.customerPartDesc      \n" +
            "            FROM rfq_lineitems a       \n" +
            "	LEFT JOIN uoms b ON a.uomID = b.id and IFNULL(b.isDeleted,0) = 0      \n" +
            "    LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id and IFNULL(part.isDeleted,0) = 0      \n" +
            "    LEFT JOIN rfq_mountingtypemst c ON part.partclassID = c.id and IFNULL(c.isDeleted,0) = 0          \n" +
            "    WHERE IFNULL(a.isDeleted,0) = 0 and a.rfqAssyID = prfqAssyID;      \n" +
            "  \n" +
            "	SELECT b.id, b.lineID, b.qpa, b.refDesig, b.customerPartDesc,  \n" +
            "			(CASE WHEN mfgCodeID IS NOT NULL AND IFNULL(customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,  \n" +
            "            a.mfgCodeID, a.mfgPN, a.mfgPNID,      \n" +
            "			(CASE WHEN distMfgCodeID IS NOT NULL AND IFNULL(customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	  \n" +
            "            a.distMfgCodeID, a.distPN, a.distMfgPNID,       \n" +
            "            b.custPN, b.custPNID, b.uomID, a.description descriptionAlternate, b.description, b.level, b.numOfPosition, b.customerRev, b.customerDescription,      \n" +
            "			b.partclassID, b.isInstall, b.isPurchase, b.leadQty, b.attritionRate, b.valueAddedCost, b.refRFQLineItemID,       \n" +
            "            b.dnpQty, b.dnpDesig, a.id as rfqAlternatePartID, b.qpaDesignatorStep,    \n" +
            "			a.mfgVerificationStep, a.mfgDistMappingStep, a.mfgCodeStep, a.customerApproval, a.org_mfgCode, a.org_mfgPN,    \n" +
            "            a.org_distributor, a.org_distPN,    \n" +
            "			a.distVerificationStep, a.distCodeStep, a.getMFGPNStep, a.obsoletePartStep, a.goodPartMappingStep, a.mfgPNStep, a.distPNStep,  \n" +
            "            a.badMfgPN,  \n" +
            "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isGoodPart              \n" +
            "            FROM rfq_lineitems_alternatepart a  \n" +
            "            LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0  \n" +
            "            LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0  \n" +
            "			JOIN tempRfq_lineitems b on a.rfqLineItemsID = b.id                \n" +
            "			WHERE IFNULL(a.isDeleted,0) = 0  AND b.id is not null order by CAST(b.lineID AS SIGNED), a.id;      \n" +
            "END;  \n" +
          //  /* **************************** Add Script Version -> 21-08-2018 *********************************** */
           "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
           "VALUES (111,'1.00','V1','RFQ Line Item new fields customerPartDesc, org_customerPartDesc; ALTER SP Sproc_GetRFQLineItemsByID;'," + userid + ");"
           );
            break;
        case 111:
            allDbChangesArray.push(
          //  /* **************************** New Script -> 21-08-2018  *********************************** */
           "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
            "CREATE PROCEDURE `Sproc_checkDelete`(                    \n" +
            "	IN tableName VARCHAR(255),                    \n" +
            "	IN IDs LONGTEXT,                    \n" +
            "	IN deletedBy INT,                    \n" +
            "	IN entityID VARCHAR(255),                    \n" +
            "	IN refrenceIDs LONGTEXT                    \n" +
            "    )  \n" +
            "BEGIN                    \n" +
            "	DECLARE vWoID1 INT(11);                    \n" +
            "	DECLARE vOpID1 INT(11);                    \n" +
            "	DECLARE vSerialNo1 VARCHAR(50);                    \n" +
            "	DECLARE vProdStatus1 VARCHAR(5);                    \n" +
            "	DECLARE vWoTransID1 INT(11);                    \n" +
            "	DECLARE vQty1 INT(11);                    \n" +
            "	DECLARE vOpID2 INT(11);                    \n" +
            "	DECLARE vProdstatus2 VARCHAR(5);                    \n" +
            "  \n" +
            "IF tableName='employees' THEN                    \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)                    \n" +
            "	   UNION ALL                                          \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)                    \n" +
            "           UNION ALL                     \n" +
            "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND (er.finalStatusInit IN(',IDs,') OR er.initiateBy IN(',IDs,')) LIMIT 1)                    \n" +
            "	   UNION ALL                    \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)                    \n" +
            "	UNION ALL                    \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)                    \n" +
            "	  UNION ALL                    \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)                    \n" +
            "	  UNION ALL                    \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)                    \n" +
            "	  UNION ALL                    \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)                    \n" +
            "	  UNION ALL                    \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)                    \n" +
            "	 UNION ALL                    \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)                    \n" +
            "	  UNION ALL                    \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND (wr.reqGenEmployeeID IN(',IDs,') OR wr.woAuthorID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                    \n" +
            "	  UNION ALL                     \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND (wr.commentemployeeID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                    \n" +
            "	  UNION ALL                    \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND (wr.employeeID IN(',IDs,') OR wr.requstedEmployeeID IN(',IDs,')) LIMIT 1)                     \n" +
            "	  UNION ALL                        \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE (wt.checkinEmployeeID IN(',IDs,') OR wt.checkoutEmployeeID IN(',IDs,')) LIMIT 1)                    \n" +
            "	  UNION ALL                       \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)                    \n" +
            "	 UNION ALL                     \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)                    \n" +
            "	 UNION ALL                     \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)                    \n" +
            "	 UNION ALL                     \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND (wthu.holdEmployeeId IN(',IDs,') OR wthu.unHoldEmployeeId IN(',IDs,')) LIMIT 1)                    \n" +
            "	UNION ALL                     \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)                    \n" +
            "	 UNION ALL                     \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)                    \n" +
            "	 UNION ALL                     \n" +
            "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)                    \n" +
            "	 UNION ALL                     \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND (holdEmployeeId IN(',IDs,') OR unHoldEmployeeId IN(',IDs,')) LIMIT 1)                    \n" +
            "  \n" +
            "        ) q');                    \n" +
            "    PREPARE stmt FROM @SQL;                    \n" +
            "    EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempEmp)=0 THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');                    \n" +
            "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');                    \n" +
            "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');                    \n" +
            "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                    \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			PREPARE stmt2 FROM @SQL2;                    \n" +
            "			PREPARE stmt3 FROM @SQL3;                    \n" +
            "			PREPARE stmt4 FROM @SQL4;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "			EXECUTE stmt2;                    \n" +
            "			EXECUTE stmt3;                    \n" +
            "			EXECUTE stmt4;                    \n" +
            "			SELECT                     \n" +
            "    *                    \n" +
            "FROM                    \n" +
            "    tempEmp;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempEmp;                    \n" +
            "		END IF;                    \n" +
            "  \n" +
            "    DROP TABLE tempEmp;                    \n" +
            "END IF;                    \n" +
            "IF tableName='eco_type_category' THEN                    \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                     \n" +
            "	  ) q');                    \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT                     \n" +
            "    *                    \n" +
            "FROM                    \n" +
            "    tempEcoTypeCategory;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempEcoTypeCategory;                    \n" +
            "		END IF;                    \n" +
            "    DROP TABLE tempEcoTypeCategory;                      \n" +
            "END IF;                    \n" +
            "IF tableName='eco_type_values' THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)                    \n" +
            "	  ) q');                    \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT                     \n" +
            "    *                    \n" +
            "FROM                    \n" +
            "    tempEcoTypeValues;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempEcoTypeValues;                    \n" +
            "		END IF;                    \n" +
            "    DROP TABLE tempEcoTypeValues;                      \n" +
            "END IF;                    \n" +
            "IF tableName='customers' THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                     \n" +
            "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                     \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                    \n" +
            "	  ) q');                    \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                    \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                    \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			PREPARE stmt2 FROM @SQL2;                    \n" +
            "			PREPARE stmt3 FROM @SQL3;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "			EXECUTE stmt2;                    \n" +
            "			EXECUTE stmt3;                    \n" +
            "  \n" +
            "			SELECT                     \n" +
            "    *                    \n" +
            "FROM                    \n" +
            "    tempCustomers;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempCustomers;                    \n" +
            "		END IF;                    \n" +
            "    DROP TABLE tempCustomers;                      \n" +
            "END IF;                    \n" +
            "IF tableName='certificate_standards' THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                    \n" +
            "  \n" +
            "	  ) q');                    \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		                    \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                    \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			PREPARE stmt2 FROM @SQL2;                    \n" +
            "			PREPARE stmt3 FROM @SQL3;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "			EXECUTE stmt2;                    \n" +
            "			EXECUTE stmt3;                    \n" +
            "  \n" +
            "			SELECT * FROM tempCertificateStandards;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempCertificateStandards;                    \n" +
            "		END IF;                    \n" +
            "    DROP TABLE tempCertificateStandards;                      \n" +
            "END IF;                    \n" +
            "IF tableName='department' THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                    \n" +
            "  \n" +
            "	  ) q');                    \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		                    \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                    \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			PREPARE stmt2 FROM @SQL2;                    \n" +
            "			PREPARE stmt3 FROM @SQL3;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "			EXECUTE stmt2;                    \n" +
            "			EXECUTE stmt3;                    \n" +
            "  \n" +
            "			SELECT * FROM tempDepartment;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempDepartment;                    \n" +
            "		END IF;                    \n" +
            "    DROP TABLE tempDepartment;                      \n" +
            "END IF;                    \n" +
            "IF tableName='genericcategory' THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND (eqpGroupID IN(',IDs,') OR eqpSubGroupID IN(',IDs,') OR eqpTypeID IN(',IDs,') OR eqpPossessionID IN(',IDs,') OR eqpOwnershipTypeID IN(',IDs,') OR locationTypeID IN(',IDs,'))   LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)                    \n" +
            "	     UNION ALL                  \n" +
            "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)                    \n" +
            "	  ) q');                    \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT                     \n" +
            "    *                    \n" +
            "FROM                    \n" +
            "    tempGenericCategory;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempGenericCategory;                    \n" +
            "		END IF;                    \n" +
            "    DROP TABLE tempGenericCategory;                      \n" +
            "END IF;                    \n" +
            "IF tableName='equipment' THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                    \n" +
            "  \n" +
            "	  ) q');                    \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN                    \n" +
            "			IF entityID IS NOT NULL THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		                    \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                    \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			PREPARE stmt2 FROM @SQL2;                    \n" +
            "			PREPARE stmt3 FROM @SQL3;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "			EXECUTE stmt2;                    \n" +
            "			EXECUTE stmt3;                    \n" +
            "  \n" +
            "			ELSE                    \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "			END IF;                    \n" +
            "  \n" +
            "			SELECT * FROM tempEquipment;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempEquipment;                    \n" +
            "		END IF;                    \n" +
            "    DROP TABLE tempEquipment;                      \n" +
            "END IF;                    \n" +
            "IF tableName='parts' THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                    \n" +
            "	  ) q');                    \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempParts)=0 THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempParts;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempParts;                    \n" +
            "		END IF;                    \n" +
            "    DROP TABLE tempParts;                      \n" +
            "END IF;                    \n" +
            "IF tableName='master_templates' THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)                    \n" +
            "	  ) q');                    \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempMasterTemplate;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempMasterTemplate;                    \n" +
            "		END IF;                    \n" +
            "    DROP TABLE tempMasterTemplate;                      \n" +
            "END IF;                    \n" +
            "IF tableName='operations' THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                    \n" +
            "  \n" +
            "	  ) q');                    \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempOperations)=0 THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		                    \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                    \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			PREPARE stmt2 FROM @SQL2;                    \n" +
            "			PREPARE stmt3 FROM @SQL3;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "			EXECUTE stmt2;                    \n" +
            "			EXECUTE stmt3;                    \n" +
            "  \n" +
            "			SELECT * FROM tempOperations;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempOperations;                    \n" +
            "		END IF;                    \n" +
            "    DROP TABLE tempOperations;                      \n" +
            "END IF;                    \n" +
            "IF tableName='workorder' THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL		                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                    \n" +
            "  \n" +
            "	  ) q');                    \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN                    \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete work order */                    \n" +
            "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;                     \n" +
            "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");                    \n" +
            "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			                    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			                    \n" +
            "			/* [E] - Add Time line log for delete work order */			                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                    \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                    \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                    \n" +
            "			SET @SQl4 = CONCAT('update workorder_certification set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			PREPARE stmt2 FROM @SQL2;                    \n" +
            "			PREPARE stmt3 FROM @SQL3;                    \n" +
            "			PREPARE stmt4 FROM @SQL4;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "			EXECUTE stmt2;                    \n" +
            "			EXECUTE stmt3;                    \n" +
            "			EXECUTE stmt4;                    \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorder;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempWorkorder;                    \n" +
            "		END IF;                    \n" +
            "    DROP TABLE tempWorkorder;                      \n" +
            "END IF;                    \n" +
            "IF tableName='roles' THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                    \n" +
            "         UNION ALL                    \n" +
            "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                    \n" +
            "         UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');                    \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempRoles)=0 THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempRoles;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempRoles;                    \n" +
            "		END IF;                    \n" +
            "    DROP TABLE tempRoles;                      \n" +
            "END IF;                    \n" +
            "IF tableName='standard_class' THEN                    \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND classIDs IN(',IDs,') LIMIT 1)                    \n" +
            "	  ) q');                    \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempStandardClass;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempStandardClass;                    \n" +
            "		END IF;                    \n" +
            "    DROP TABLE tempStandardClass;                      \n" +
            "END IF;                    \n" +
            "IF tableName='dataelement' THEN                    \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		                    \n" +
            "		UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                    \n" +
            "	  ) q');                    \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt2 FROM @SQL2;                    \n" +
            "			EXECUTE stmt2;                    \n" +
            "  \n" +
            "  \n" +
            "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)                    \n" +
            "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated                    \n" +
            "			FROM dataelement dl WHERE dl.dataElementID = IDs;                    \n" +
            "  \n" +
            "  \n" +
            "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */                    \n" +
            "  \n" +
            "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                     \n" +
            "							where type IN(''',IDs,''') and deletedAt IS NULL ');		                    \n" +
            "				PREPARE stmt3 FROM @SQL3;                    \n" +
            "				EXECUTE stmt3;                    \n" +
            "  \n" +
            "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */                    \n" +
            "  \n" +
            "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */                    \n" +
            "  \n" +
            "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs                     \n" +
            "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN                    \n" +
            "  \n" +
            "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                     \n" +
            "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'                     \n" +
            "								AND isAutoIncrement = 1 AND deletedAt IS NULL)                    \n" +
            "							 and deletedAt IS NULL ');		                    \n" +
            "					     PREPARE stmt4 FROM @SQL4;                    \n" +
            "				             EXECUTE stmt4;                    \n" +
            "					END IF;	                    \n" +
            "				END IF;                    \n" +
            "  \n" +
            "  \n" +
            "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN                    \n" +
            "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)                     \n" +
            "						    AND deletedAt IS NULL');		                    \n" +
            "				PREPARE stmt5 FROM @SQL5;                    \n" +
            "				EXECUTE stmt5;                    \n" +
            "  \n" +
            "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                     \n" +
            "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		                    \n" +
            "				PREPARE stmt6 FROM @SQL6;                    \n" +
            "				EXECUTE stmt6;                    \n" +
            "  \n" +
            "  \n" +
            "			END IF;                    \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM tempDataElement;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempDataElement;                    \n" +
            "		END IF;                    \n" +
            "    DROP TABLE tempDataElement;                      \n" +
            "  \n" +
            "END IF;                    \n" +
            "IF tableName='workorder_preprogcomp' THEN                    \n" +
            "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                    \n" +
            "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg                    \n" +
            "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND                    \n" +
            "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                    \n" +
            "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "    SELECT * FROM  tempComponent;                    \n" +
            "    SELECT TotalCount FROM  tempComponent;                    \n" +
            "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			                    \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete pre program component */              \n" +
            "			SELECT partNumber,(SELECT woNumber FROM workorder WHERE woID = woppc.woID),            \n" +
            "				(SELECT opName FROM workorder_operation WHERE woOPID = refStkWOOPID)            \n" +
            "			    INTO @lvPartNumber,@lvWoNumber,@lvOpName            \n" +
            "			FROM workorder_preprogcomp woppc              \n" +
            "			WHERE woPreProgCompID = IDs  AND deletedAt IS NULL;               \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Preprogram component deleted from work order\");              \n" +
            "			SET @lvEventDescription = CONCAT(\"Preprogram component \\\"\",@lvPartNumber,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	              \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.14,NULL,deletedBy,3);  /* 3 = DELETE */              \n" +
            "			/* [E] - Add Time line log for delete pre program component */             \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt2 FROM @SQL2;                    \n" +
            "			EXECUTE stmt2;                    \n" +
            "  \n" +
            "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where                     \n" +
            "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                    \n" +
            "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt3 FROM @SQL3;                    \n" +
            "			EXECUTE stmt3;                    \n" +
            "		SELECT                     \n" +
            "			*                    \n" +
            "		FROM                    \n" +
            "			tempComponent;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempComponent;                    \n" +
            "		END IF;                    \n" +
            "    DROP TABLE tempComponent;                      \n" +
            "END IF;                    \n" +
            "IF tableName='component' THEN                    \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                    \n" +
            "		 UNION ALL                    \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                    \n" +
            "  \n" +
            "	  ) q');                    \n" +
            "	  PREPARE stmt FROM @SQL;                    \n" +
            "	   EXECUTE stmt;                    \n" +
            "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN                    \n" +
            "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempComponent;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempComponent;                    \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempComponent;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"workorder_cluster\" THEN                     \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)                    \n" +
            "		      ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN                    \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete cluster */                    \n" +
            "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster                    \n" +
            "		WHERE clusterID = IDs AND deletedAt IS NULL;                    \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder                    \n" +
            "		WHERE woID = @lvWoID AND deletedAt IS NULL ;                    \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");                    \n" +
            "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		                    \n" +
            "		/* [E] - Add Time line log for delete cluster */                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderCluster;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempWorkorderCluster;                    \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempWorkorderCluster;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"workorder_operation\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)                    \n" +
            "			 UNION ALL                    \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		                     \n" +
            "		      ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN                    \n" +
            "			 /* [S] - Add Time line log for delete work order operation */                    \n" +
            "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName                    \n" +
            "			FROM workorder_operation                     \n" +
            "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;                     \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                    \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");                    \n" +
            "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		                    \n" +
            "			/* [E] - Add Time line log for delete work order operation */                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                    \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                    \n" +
            "		SET @SQl3 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                    \n" +
            "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                    \n" +
            "		SET @SQl5 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                    \n" +
            "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                    \n" +
            "		SET @SQl7 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		                    \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                    \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;                    \n" +
            "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		                    \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                    \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			PREPARE stmt2 FROM @SQL2;                    \n" +
            "			PREPARE stmt3 FROM @SQL3;                    \n" +
            "			PREPARE stmt4 FROM @SQL4;                    \n" +
            "			PREPARE stmt5 FROM @SQL5;                    \n" +
            "			PREPARE stmt6 FROM @SQL6;                    \n" +
            "			PREPARE stmt7 FROM @SQl7;                    \n" +
            "			PREPARE stmt8 FROM @SQl7;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "			EXECUTE stmt2;                    \n" +
            "			EXECUTE stmt3;                    \n" +
            "			EXECUTE stmt4;                    \n" +
            "			EXECUTE stmt5;                    \n" +
            "			EXECUTE stmt6;                    \n" +
            "			EXECUTE stmt7;                    \n" +
            "			EXECUTE stmt8;                    \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperation;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempWorkorderOperation;                    \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempWorkorderOperation;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"workorder_operation_part\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                    \n" +
            "		      ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN                    \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete parts from work order */                    \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                    \n" +
            "		FROM workorder_operation                     \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                     \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                    \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts                    \n" +
            "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;                     \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");                    \n" +
            "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */                    \n" +
            "		/* [E] - Add Time line log for delete parts from work order */                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderPart;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempWorkorderPart;                    \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempWorkorderPart;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"workorder_operation_equipment\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                    \n" +
            "		      ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN                    \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Equipment from work order */                    \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                    \n" +
            "		FROM workorder_operation                     \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                     \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	                    \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment                    \n" +
            "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;                     \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");                    \n" +
            "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                    \n" +
            "		/* [E] -  Add Time line log for delete Equipment from work order */                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');                    \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			PREPARE stmt2 FROM @SQL2;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "			EXECUTE stmt2;                    \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEquipment;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempWorkorderEquipment;                    \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempWorkorderEquipment;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"workorder_operation_employee\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                    \n" +
            "		      ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN                    \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Employees from work order */                    \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                    \n" +
            "		FROM workorder_operation                     \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                     \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                    \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees                    \n" +
            "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;                     \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");                    \n" +
            "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                    \n" +
            "		/* [E] -  Add Time line log for delete Employee from work order */                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEmployee;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempWorkorderEmployee;                    \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempWorkorderEmployee;                    \n" +
            "  \n" +
            "END IF;                    \n" +
            "IF tableName=\"workorder_operation_cluster\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)                    \n" +
            "		      ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN                    \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete operations from cluster */                    \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                    \n" +
            "		FROM workorder_operation                     \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                     \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                    \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster                    \n" +
            "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;                     \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");                    \n" +
            "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                    \n" +
            "		/* [E] -  Add Time line log for delete operations from cluster */		                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                    \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                    \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;                    \n" +
            "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		                    \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                    \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			PREPARE stmt2 FROM @SQL2;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "			EXECUTE stmt2;                    \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempWorkorderOperationCluster;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"entity\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                    \n" +
            "		     UNION ALL                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                    \n" +
            "		     UNION ALL                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                    \n" +
            "		    UNION ALL                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                    \n" +
            "		      ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempEntity)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempEntity;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempEntity;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempEntity;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"salesordermst\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)                    \n" +
            "		      ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete sales order mst */ 	            \n" +
            "			SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber            \n" +
            "			FROM salesordermst            \n" +
            "			WHERE FIND_IN_SET(id,IDs);            \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");              \n" +
            "			SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	              \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */              \n" +
            "			/* [E] - Add Time line log for delete sales order mst */	            \n" +
            "  \n" +
            "			SELECT * FROM tempSalesOrderMst;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempSalesOrderMst;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempSalesOrderMst;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"mfgcodemst\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)                    \n" +
            "		      ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempMFGCodeMst;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempMFGCodeMst;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempMFGCodeMst;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"dataelement_transactionvalues_manual\" THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                     \n" +
            "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)                    \n" +
            "				and deletedAt IS NULL');		                    \n" +
            "			PREPARE stmt2 FROM @SQL2;                    \n" +
            "			EXECUTE stmt2;                    \n" +
            "  \n" +
            "  \n" +
            "END IF;                    \n" +
            "IF tableName=\"shippedassembly\" THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;            \n" +
            "			/* [S] - Add Time line log for delete shipped assembly */             \n" +
            "			SELECT GROUP_CONCAT(shippedqty) , workorderID  INTO @lvShippedqty,@lvWoID            \n" +
            "			FROM shippedassembly            \n" +
            "			WHERE FIND_IN_SET(id,IDs);            \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID ;            \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Shipped assembly deleted\");              \n" +
            "			SET @lvEventDescription = CONCAT(\"Shipped assembly for workorder \\\"\",@lvWoNumber,\"\\\" & quantity \\\"\",@lvShippedqty ,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	              \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,9,NULL,deletedBy,3);  /* 3 = DELETE */              \n" +
            "			/* [E] - Add Time line log for delete shipped assembly */ 		            \n" +
            "  \n" +
            "END IF;                    \n" +
            "IF tableName=\"assemblymst\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                    \n" +
            "		     UNION ALL                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                    \n" +
            "		     UNION ALL                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                    \n" +
            "		     UNION ALL                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                    \n" +
            "		    UNION ALL                    \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)                    \n" +
            "		      ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempassemblymst;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempassemblymst;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempassemblymst;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"assembly_revisionmst\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND (fromRevisionID IN(',IDs,') OR toRevisionID IN(',IDs,'))  LIMIT 1)                    \n" +
            "		     UNION ALL                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                    \n" +
            "		     UNION ALL                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                    \n" +
            "		     UNION ALL                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                    \n" +
            "		    UNION ALL                    \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)                    \n" +
            "		      ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempassembly_revisionmst;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempassembly_revisionmst;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempassembly_revisionmst;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"workorder_trans_serialno\" THEN                    \n" +
            "  \n" +
            "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1                     \n" +
            "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;                    \n" +
            "  \n" +
            "  \n" +
            "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)                    \n" +
            "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)                     \n" +
            "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1                     \n" +
            "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;                    \n" +
            "  \n" +
            "	/* condition to check total serials of type greater than actual production qty */                    \n" +
            "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1                    \n" +
            "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)                     \n" +
            "		> IFNULL(vQty1,0)) THEN                    \n" +
            "  \n" +
            "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */                    \n" +
            "		IF(vQty1 IS NULL OR vQty1 = 0) THEN                     \n" +
            "  \n" +
            "			/* condition to check curr opis and status match with given delete serial */                    \n" +
            "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1                    \n" +
            "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN                    \n" +
            "  \n" +
            "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                    \n" +
            "				WHERE woTransSerialID = IDs;	                    \n" +
            "  \n" +
            "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                     \n" +
            "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                    \n" +
            "				ORDER BY woTransSerialID DESC LIMIT 1;                    \n" +
            "  \n" +
            "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                    \n" +
            "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	              \n" +
            "				/* [S] - Add Time line log for delete production serial from work order operation */ 	            \n" +
            "				SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");              \n" +
            "				SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	              \n" +
            "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */              \n" +
            "				/* [E] - Add Time line log for delete production serial from work order operation */ 				            \n" +
            "  \n" +
            "			ELSE                     \n" +
            "				SELECT 'not allowed';                    \n" +
            "			END IF;                    \n" +
            "  \n" +
            "  \n" +
            "		ELSE                     \n" +
            "  \n" +
            "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                    \n" +
            "			WHERE woTransSerialID = IDs;	                    \n" +
            "  \n" +
            "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                     \n" +
            "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                    \n" +
            "			ORDER BY woTransSerialID DESC LIMIT 1;                    \n" +
            "  \n" +
            "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                    \n" +
            "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;            \n" +
            "			/* [S] - Add Time line log for delete production serial from work order operation */ 	            \n" +
            "			SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");              \n" +
            "			SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	              \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */              \n" +
            "			/* [E] - Add Time line log for delete production serial from work order operation */                \n" +
            "  \n" +
            "		END IF;	                    \n" +
            "  \n" +
            "  \n" +
            "	ELSE                     \n" +
            "		SELECT 'not allowed';		                    \n" +
            "	END IF;	                    \n" +
            "  \n" +
            "  \n" +
            "END IF;                    \n" +
            "IF tableName=\"br_label_template\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)                    \n" +
            "		      ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempbr_label_template;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempbr_label_template;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempbr_label_template;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"measurement_types\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)                    \n" +
            "		     UNION ALL                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempMeasurement_types;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempMeasurement_types;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempMeasurement_types;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"uoms\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg                     \n" +
            "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)                    \n" +
            "            UNION ALL                    \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg                     \n" +
            "            FROM unit_detail_formula WHERE deletedAt IS NULL AND (unitID IN (',IDs,')  or toUnitID IN (',IDs,')) LIMIT 1)            \n" +
            "              UNION ALL                  \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND uom IN(',IDs,') LIMIT 1)) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempUOMs;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempUOMs;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempUOMs;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"jobtypes\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                     \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempJobTypess;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempJobTypess;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempJobTypess;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"ordertype\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                     \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempOrderTypes;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempOrderTypes;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempOrderTypes;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"reasonmst\" THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "END IF;                    \n" +
            "IF tableName='component_sid_stock' THEN	                    \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)                    \n" +
            "			UNION ALL                    \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		                        \n" +
            "		    ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete component sid stock (receiving material) */ 	            \n" +
            "			SELECT GROUP_CONCAT(uid) INTO @lvUID  FROM component_sid_stock            \n" +
            "			WHERE FIND_IN_SET(id,IDs);	            \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Receiving material(s) deleted\");              \n" +
            "			SET @lvEventDescription = CONCAT(\"Receiving material(s) of UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	              \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7,NULL,deletedBy,3);  /* 3 = DELETE */              \n" +
            "			/* [E] - Add Time line log for delete component sid stock (receiving material) */ 	            \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentsidstock;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempcomponentsidstock;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempcomponentsidstock;                     \n" +
            "  \n" +
            "END IF;                    \n" +
            "IF tableName='component_sid_stock_dataelement_values' THEN	                    \n" +
            "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                \n" +
            "			/* [S] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	            \n" +
            "			SELECT GROUP_CONCAT(dataelementid), GROUP_CONCAT(refsidid) INTO @lvCSDlIDs,@lvRefsidid               \n" +
            "			FROM component_sid_stock_dataelement_values            \n" +
            "			WHERE FIND_IN_SET(id,IDs);            \n" +
            "  \n" +
            "			SELECT uid INTO @lvUID FROM component_sid_stock WHERE id = @lvRefsidid   ;            \n" +
            "  \n" +
            "			SELECT GROUP_CONCAT(dataElementName) INTO @lvDlNames            \n" +
            "			FROM dataelement             \n" +
            "			WHERE FIND_IN_SET(dataElementID,@lvCSDlIDs);	            \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Data field(s) of receiving material deleted\");              \n" +
            "			SET @lvEventDescription = CONCAT(\"Data field(s) \\\"\",@lvDlNames,\"\\\" of receiving material with UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	              \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7.01,NULL,deletedBy,3);  /* 3 = DELETE */              \n" +
            "			/* [E] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	            \n" +
            "END IF;                    \n" +
            "IF tableName='chart_templatemst' THEN	                    \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)                    \n" +
            "		    ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempcharttemplatemst;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempcharttemplatemst;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempcharttemplatemst;                     \n" +
            "  \n" +
            "END IF;                    \n" +
            "IF tableName=\"shipping_request\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg                     \n" +
            "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)                    \n" +
            "            UNION ALL                    \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg                     \n" +
            "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;              \n" +
            "			/* [S] - Add Time line log for delete shipment request */             \n" +
            "			SELECT GROUP_CONCAT(note) INTO @lvNotes FROM Shipping_Request            \n" +
            "			WHERE FIND_IN_SET(id,IDs);	            \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Shipment request deleted\");              \n" +
            "			SET @lvEventDescription = CONCAT(\"Shipment request of \\\"\",@lvNotes,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	              \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,8,NULL,deletedBy,3);  /* 3 = DELETE */              \n" +
            "			/* [E] - Add Time line log for delete shipment request */             \n" +
            "  \n" +
            "			SELECT * FROM tempShippingRequest;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempShippingRequest;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempShippingRequest;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"chart_rawdata_category\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg                     \n" +
            "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)                    \n" +
            "            UNION ALL                    \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg                     \n" +
            "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempChartRawdataCategory;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempChartRawdataCategory;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempChartRawdataCategory;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"component_standard\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg                     \n" +
            "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandard;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempcomponentStandard;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempcomponentStandard;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"component_standard_class\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg                     \n" +
            "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');                    \n" +
            "           /*  UNION ALL                    \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg                     \n" +
            "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt2 FROM @SQL2;                    \n" +
            "			EXECUTE stmt2;                    \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandardClass;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempcomponentStandardClass;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempcomponentStandardClass;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"rfq_lineitems\" THEN                    \n" +
            "		SELECT 0 TotalCount, '' Message;                    \n" +
            "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "		PREPARE stmt1 FROM @SQL1;                    \n" +
            "		EXECUTE stmt1;                                \n" +
            "END IF;                    \n" +
            "IF tableName=\"requirement\" THEN                    \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg                     \n" +
            "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM temprequirements)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM temprequirements;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM temprequirements;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE temprequirements;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"workorder_trans_packagingdetail\" THEN               \n" +
            "		/* [S] - Add Time line log for delete work order transaction packing details */              \n" +
            "		SELECT  (SELECT woNumber FROM workorder WHERE woID = wtpd.woID),            \n" +
            "			(SELECT opName FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL),            \n" +
            "			(SELECT woOPID FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL)            \n" +
            "			INTO @lvWoNumber , @lvOpName ,@lvWoOPID             \n" +
            "		FROM workorder_trans_packagingdetail wtpd             \n" +
            "		WHERE wtpd.woTransPackagingDetailID = IDs AND wtpd.deletedAt IS NULL  /* here ids multiple but need one record only so */;            \n" +
            "		SET @lvEventTitle = CONCAT(\"Box serial details deleted from work order operation\");              \n" +
            "		SET @lvEventDescription = CONCAT(\"Box serial details deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	              \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.17,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */              \n" +
            "		/* [E] - Add Time line log for delete work order transaction packing details */             \n" +
            "  \n" +
            "		SELECT 0 TotalCount, '' Message;                    \n" +
            "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "		PREPARE stmt1 FROM @SQL1;                    \n" +
            "		EXECUTE stmt1;                                \n" +
            "END IF;                    \n" +
            "IF tableName=\"customer_addresses\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)                    \n" +
            "			UNION ALL                    \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                     \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempcustomer_addresses;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempcustomer_addresses;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempcustomer_addresses;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"rfqforms\" THEN                    \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg                     \n" +
            "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in                     \n" +
            "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');                    \n" +
            "  \n" +
            "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in                     \n" +
            "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		                    \n" +
            "  \n" +
            "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in                     \n" +
            "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		                    \n" +
            "  \n" +
            "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in                     \n" +
            "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		                    \n" +
            "  \n" +
            "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in                     \n" +
            "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');                    \n" +
            "  \n" +
            "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		                    \n" +
            "  \n" +
            "            PREPARE stmt1 FROM @SQL1;                    \n" +
            "			PREPARE stmt2 FROM @SQL2;                    \n" +
            "            PREPARE stmt3 FROM @SQL3;                    \n" +
            "			PREPARE stmt4 FROM @SQL4;                    \n" +
            "            PREPARE stmt5 FROM @SQL5;                    \n" +
            "			PREPARE stmt6 FROM @SQL6;                    \n" +
            "  \n" +
            "			EXECUTE stmt1;                    \n" +
            "			EXECUTE stmt2;                    \n" +
            "            EXECUTE stmt3;                    \n" +
            "			EXECUTE stmt4;                    \n" +
            "            EXECUTE stmt5;                    \n" +
            "			EXECUTE stmt6;                    \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM temprfqformss;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM temprfqformss;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE temprfqformss;                     \n" +
            "END IF;                    \n" +
            "IF tableName=\"rfq_mountingtypemst\" THEN                    \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg                     \n" +
            "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1)            \n" +
            "             UNION ALL                  \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mountingTypeID IN(',IDs,') LIMIT 1)) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM temprfqpartcategory;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM temprfqpartcategory;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE temprfqpartcategory;                     \n" +
            "  \n" +
            "END IF;                    \n" +
            "IF tableName=\"who_bought_who\" THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "END IF;                    \n" +
            "IF tableName=\"rfq_parttypemst\" THEN                    \n" +
            "			SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqparttypemst as                    \n" +
            "				 SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "			    FROM                     \n" +
            "			    (               \n" +
            "	            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM             \n" +
            "	            component WHERE deletedAt IS NULL AND partTypeID IN(',IDs,') LIMIT 1)) q');                    \n" +
            "	  	        PREPARE stmt FROM @SQL;                    \n" +
            "		        EXECUTE stmt;              \n" +
            "	          IF (SELECT TotalCount FROM temprfqparttypemst)=0 THEN                \n" +
            "  \n" +
            "				SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,',             \n" +
            "	            deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "	  				PREPARE stmt1 FROM @SQL1;                    \n" +
            "						EXECUTE stmt1;              \n" +
            "	            	SELECT * FROM temprfqparttypemst;                    \n" +
            "			ELSE                    \n" +
            "				SELECT * FROM temprfqparttypemst;                    \n" +
            "  \n" +
            "			END IF;                    \n" +
            "            DROP TABLE temprfqparttypemst;                               \n" +
            "  \n" +
            "END IF;                    \n" +
            "IF tableName=\"rfq_lineitems_errorcode\" THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "END IF;                    \n" +
            "IF tableName=\"rfq_lineitems_keywords\" THEN                    \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "END IF;              \n" +
            "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                    \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempQuotecharges_dynamic_fields_mst as                    \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                    \n" +
            "		    FROM                     \n" +
            "		    (                    \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                     \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');                    \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                    \n" +
            "	EXECUTE stmt;                    \n" +
            "		IF (SELECT TotalCount FROM tempQuotecharges_dynamic_fields_mst)=0 THEN                    \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update quotecharges_dynamic_fields_mst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                    \n" +
            "			PREPARE stmt1 FROM @SQL1;                    \n" +
            "			EXECUTE stmt1;                    \n" +
            "  \n" +
            "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                    \n" +
            "		ELSE                    \n" +
            "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                    \n" +
            "  \n" +
            "		END IF;                    \n" +
            "		DROP TABLE tempQuotecharges_dynamic_fields_mst;                     \n" +
            "END IF;                         \n" +
            "END;  \n" +
          //  /* **************************** Add Script Version -> 21-08-2018 *********************************** */
           "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
           "VALUES (112,'1.00','V1','DELETE SP Changes for OR condition instead of AND - Vaibhav'," + userid + ");"
           );
            break;
        case 112:
            allDbChangesArray.push(
            /* **************************** New Script -> 21-08-2018  *********************************** */
            "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_WorkOrder_Certification` ;  \n" +
            "CREATE TRIGGER `Trg_AU_WorkOrder_Certification` AFTER UPDATE ON `workorder_certification`   \n" +
            "    FOR EACH ROW BEGIN    \n" +
            "  \n" +
            "	IF IFNULL(OLD.classIDs,0) != IFNULL(NEW.classIDs,0)  THEN     \n" +
            "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby,createdAt, createdBy )     \n" +
            "		VALUES (\"WORKORDER_CERTIFICATION\",CAST(NEW.woCertificationID AS CHAR),'CLASSIDS',    \n" +
            "			CAST(OLD.classIDs AS CHAR),CAST(NEW.classIDs AS CHAR),SYSDATE(),NEW.updatedBy,SYSDATE(),NEW.createdBy);    \n" +
            "	END IF;    \n" +
            "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0)  THEN     \n" +
            "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby,createdAt, createdBy )     \n" +
            "		VALUES (\"WORKORDER_CERTIFICATION\",CAST(NEW.woCertificationID AS CHAR),'ISDELETED',    \n" +
            "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),SYSDATE(),NEW.updatedBy,SYSDATE(),NEW.createdBy);    \n" +
            "	END IF;    \n" +
            "    END;  \n" +
              /* **************************** New Script -> 21-08-2018  *********************************** */
              "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_WorkOrder_Cluster` ;  \n" +
            "CREATE TRIGGER `Trg_AU_WorkOrder_Cluster` AFTER UPDATE ON `workorder_cluster`   \n" +
            "    FOR EACH ROW BEGIN    \n" +
            "	IF IFNULL(OLD.clusterName,0) != IFNULL(NEW.clusterName,0)  THEN     \n" +
            "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby , createdAt, createdBy)     \n" +
            "		VALUES (\"WORKORDER_CLUSTER\",CAST(NEW.clusterID AS CHAR),'CLUSTERNAME',    \n" +
            "			CAST(OLD.clusterName AS CHAR),CAST(NEW.clusterName AS CHAR),SYSDATE(),NEW.updatedBy,SYSDATE(),NEW.updatedBy);    \n" +
            "	END IF;    \n" +
            "	IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0)  THEN     \n" +
            "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby , createdAt, createdBy)     \n" +
            "		VALUES (\"WORKORDER_CLUSTER\",CAST(NEW.clusterID AS CHAR),'DISPLAYORDER',    \n" +
            "			CAST(OLD.displayOrder AS CHAR),CAST(NEW.displayOrder AS CHAR),SYSDATE(),NEW.updatedBy,SYSDATE(),NEW.createdBy);    \n" +
            "	END IF;    \n" +
            "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0)  THEN     \n" +
            "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby , createdAt, createdBy)     \n" +
            "		VALUES (\"WORKORDER_CLUSTER\",CAST(NEW.clusterID AS CHAR),'ISDELETED',    \n" +
            "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),SYSDATE(),NEW.updatedBy,SYSDATE(),NEW.createdBy);    \n" +
            "	END IF;    \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 21-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (113,'1.00','V1',' Updated work order cluster and Certification Trigger - KETAN '," + userid + ");"
              );
            break;
        case 113:
            allDbChangesArray.push(
            /* **************************** New Script -> 21-08-2018  *********************************** */
            "ALTER TABLE rfq_lineitems_alternatepart  \n" +
            "CHANGE goodPartMappingStep mfgGoodPartMappingStep tinyint(1);  \n" +
            "ALTER TABLE rfq_lineitems_alternatepart  \n" +
            "ADD COLUMN distGoodPartMappingStep tinyint(1);  \n" +
            "INSERT INTO `rfq_lineitems_errorcode` (`logicID`, `errorCode`, `errorColor`, `description`, `systemVariable`, `createdBy`, `createdAt`)   \n" +
            "SELECT * FROM  \n" +
            "(SELECT '13' logicID,'DGPM' errorCode,'#ad5fa5' errorColor,'<% Distributor PN %> is bad part.' description,'<% Distributor PN %>' systemVariable,'1' createdBy, utc_timestamp() createdAt) a   \n" +
            "WHERE 13 NOT IN (SELECT logicID FROM rfq_lineitems_errorcode) LIMIT 1;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(    \n" +
            "	IN prfqAssyID INT        \n" +
            ")  \n" +
            "BEGIN        \n" +
            "	DROP temporary table if exists tempRfq_lineitems;        \n" +
            "    DROP temporary table if exists tempRfq_lineitemsAlt;        \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE tempRfq_lineitems AS            \n" +
            "	SELECT a.id, a.lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,         \n" +
            "    CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,        \n" +
            "    a.description, a.level, a.numOfPosition, a.customerRev, a.customerDescription,                    \n" +
            "			CONCAT(part.partTypeName, ' | ', c.name) partclassID, a.isInstall, a.isPurchase, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID,         \n" +
            "            a.dnpQty, a.dnpDesig, a.qpaDesignatorStep        \n" +
            "            FROM rfq_lineitems a         \n" +
            "	LEFT JOIN uoms b ON a.uomID = b.id and IFNULL(b.isDeleted,0) = 0        \n" +
            "    LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id and IFNULL(part.isDeleted,0) = 0        \n" +
            "    LEFT JOIN rfq_mountingtypemst c ON part.partclassID = c.id and IFNULL(c.isDeleted,0) = 0            \n" +
            "    WHERE IFNULL(a.isDeleted,0) = 0 and a.rfqAssyID = prfqAssyID;        \n" +
            "  \n" +
            "	SELECT b.id, b.lineID, b.qpa, b.refDesig,     \n" +
            "			(CASE WHEN mfgCodeID IS NOT NULL AND IFNULL(customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,    \n" +
            "            a.mfgCodeID, a.mfgPN, a.mfgPNID,        \n" +
            "			(CASE WHEN distMfgCodeID IS NOT NULL AND IFNULL(customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	    \n" +
            "            a.distMfgCodeID, a.distPN, a.distMfgPNID,         \n" +
            "            b.custPN, b.custPNID, b.uomID, a.description descriptionAlternate, b.description, b.level, b.numOfPosition, b.customerRev, b.customerDescription,        \n" +
            "			b.partclassID, b.isInstall, b.isPurchase, b.leadQty, b.attritionRate, b.valueAddedCost, b.refRFQLineItemID,         \n" +
            "            b.dnpQty, b.dnpDesig, a.id as rfqAlternatePartID, b.qpaDesignatorStep,      \n" +
            "			a.mfgVerificationStep, a.mfgDistMappingStep, a.mfgCodeStep, a.customerApproval, a.org_mfgCode, a.org_mfgPN,      \n" +
            "            a.org_distributor, a.org_distPN,      \n" +
            "			a.distVerificationStep, a.distCodeStep, a.getMFGPNStep, a.obsoletePartStep, a.mfgGoodPartMappingStep, a.mfgPNStep, a.distPNStep,    \n" +
            "            a.badMfgPN, a.distGoodPartMappingStep,  \n" +
            "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,  \n" +
            "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart  \n" +
            "            FROM rfq_lineitems_alternatepart a    \n" +
            "            LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0    \n" +
            "            LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0    \n" +
            "			JOIN tempRfq_lineitems b on a.rfqLineItemsID = b.id                  \n" +
            "			WHERE IFNULL(a.isDeleted,0) = 0  AND b.id is not null order by CAST(b.lineID AS SIGNED), a.id;        \n" +
            "END;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode`;  \n" +
            "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(    \n" +
            "	IN ppageIndex INT(11),    \n" +
            "	IN precordPerPage INT(11),    \n" +
            "	IN pOrderBy VARCHAR(255),    \n" +
            "	IN pWhereClause VARCHAR(21844)    \n" +
            ")  \n" +
            "BEGIN    \n" +
            "DECLARE pOffset INT(11);    \n" +
            "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
            "  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
            "			SELECT id,(case When(rfq_lineitems_errorcode.logicID=1) then 'QPA/Designator'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 2) then 'MFG Invalid'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 3) then 'MFG Verification'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 4) then 'Distributor Verification'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 5) then 'MFG-Distributor Mapping'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 6) then 'Get MFGPN'     \n" +
            "              when(rfq_lineitems_errorcode.logicID = 7) then 'MFG Bad Part'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 8) then 'Check Obsolete Parts'     \n" +
            "              when(rfq_lineitems_errorcode.logicID = 9) then 'MFG PN Invalid'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 10) then 'Distributor Invalid'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 11) then 'Distributor PN Invalid'                   \n" +
            "              when(rfq_lineitems_errorcode.logicID = 12) then 'Customer Approval'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 13) then 'Distributor Bad Part'  \n" +
            "              ELSE '' END) AS `logicName`,errorCode, errorColor,     \n" +
            "              description, systemVariable,logicID    \n" +
            "			FROM `rfq_lineitems_errorcode`    \n" +
            "			WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0;    \n" +
            "  \n" +
            "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"errorCode ASC\") ;    \n" +
            "		ELSE    \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
            "		END IF;	    \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
            "			SET pWhereClause = '1=1' ;    \n" +
            "		END IF;	    \n" +
            "  \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
            "		ELSE	    \n" +
            "			SET rowNumWhere = '';    \n" +
            "		END IF;	    \n" +
            "  \n" +
            "		/* to get total count of rows */    \n" +
            "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
            "		PREPARE query1 FROM @SQLStatement1;    \n" +
            "		EXECUTE query1;    \n" +
            "		DEALLOCATE PREPARE query1;    \n" +
            "  \n" +
            "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
            "		PREPARE query2 FROM @SQLStatement2;    \n" +
            "		EXECUTE query2;    \n" +
            "		DEALLOCATE PREPARE query2;    \n" +
            "  \n" +
            "		DROP TEMPORARY TABLE Results;    \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 21-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (114,'1.00','V1','ALTER SP Sproc_RetrieveRFQLineitemsErrorCode and Sproc_GetRFQLineItemsByID - Ravi'," + userid + ");"
              );
            break;
        case 114:
            allDbChangesArray.push(
            /* **************************** New Script -> 21-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
          "CREATE PROCEDURE `Sproc_checkDelete`(                      \n" +
          "	IN tableName VARCHAR(255),                      \n" +
          "	IN IDs LONGTEXT,                      \n" +
          "	IN deletedBy INT,                      \n" +
          "	IN entityID VARCHAR(255),                      \n" +
          "	IN refrenceIDs LONGTEXT                      \n" +
          "    )  \n" +
          "BEGIN                      \n" +
          "	DECLARE vWoID1 INT(11);                      \n" +
          "	DECLARE vOpID1 INT(11);                      \n" +
          "	DECLARE vSerialNo1 VARCHAR(50);                      \n" +
          "	DECLARE vProdStatus1 VARCHAR(5);                      \n" +
          "	DECLARE vWoTransID1 INT(11);                      \n" +
          "	DECLARE vQty1 INT(11);                      \n" +
          "	DECLARE vOpID2 INT(11);                      \n" +
          "	DECLARE vProdstatus2 VARCHAR(5);                      \n" +
          "  \n" +
          "IF tableName='employees' THEN                      \n" +
          " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)                      \n" +
          "	   UNION ALL                                            \n" +
          "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)                      \n" +
          "           UNION ALL                       \n" +
          "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND (er.finalStatusInit IN(',IDs,') OR er.initiateBy IN(',IDs,')) LIMIT 1)                      \n" +
          "	   UNION ALL                      \n" +
          "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)                      \n" +
          "	UNION ALL                      \n" +
          "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)                      \n" +
          "	  UNION ALL                      \n" +
          "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)                      \n" +
          "	  UNION ALL                      \n" +
          "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)                      \n" +
          "	  UNION ALL                      \n" +
          "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)                      \n" +
          "	  UNION ALL                      \n" +
          "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)                      \n" +
          "	 UNION ALL                      \n" +
          "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)                      \n" +
          "	  UNION ALL                      \n" +
          "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND (wr.reqGenEmployeeID IN(',IDs,') OR wr.woAuthorID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                      \n" +
          "	  UNION ALL                       \n" +
          "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND (wr.commentemployeeID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                      \n" +
          "	  UNION ALL                      \n" +
          "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND (wr.employeeID IN(',IDs,') OR wr.requstedEmployeeID IN(',IDs,')) LIMIT 1)                       \n" +
          "	  UNION ALL                          \n" +
          "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE (wt.checkinEmployeeID IN(',IDs,') OR wt.checkoutEmployeeID IN(',IDs,')) LIMIT 1)                      \n" +
          "	  UNION ALL                         \n" +
          "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)                      \n" +
          "	 UNION ALL                       \n" +
          "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)                      \n" +
          "	 UNION ALL                       \n" +
          "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)                      \n" +
          "	 UNION ALL                       \n" +
          "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND (wthu.holdEmployeeId IN(',IDs,') OR wthu.unHoldEmployeeId IN(',IDs,')) LIMIT 1)                      \n" +
          "	UNION ALL                       \n" +
          "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)                      \n" +
          "	 UNION ALL                       \n" +
          "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)                      \n" +
          "	 UNION ALL                       \n" +
          "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)                      \n" +
          "	 UNION ALL                       \n" +
          "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND (holdEmployeeId IN(',IDs,') OR unHoldEmployeeId IN(',IDs,')) LIMIT 1)                      \n" +
          "  \n" +
          "        ) q');                      \n" +
          "    PREPARE stmt FROM @SQL;                      \n" +
          "    EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempEmp)=0 THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');                      \n" +
          "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');                      \n" +
          "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');                      \n" +
          "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                      \n" +
          "  \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			PREPARE stmt2 FROM @SQL2;                      \n" +
          "			PREPARE stmt3 FROM @SQL3;                      \n" +
          "			PREPARE stmt4 FROM @SQL4;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "			EXECUTE stmt2;                      \n" +
          "			EXECUTE stmt3;                      \n" +
          "			EXECUTE stmt4;                      \n" +
          "			SELECT                       \n" +
          "    *                      \n" +
          "FROM                      \n" +
          "    tempEmp;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempEmp;                      \n" +
          "		END IF;                      \n" +
          "  \n" +
          "    DROP TABLE tempEmp;                      \n" +
          "END IF;                      \n" +
          "IF tableName='eco_type_category' THEN                      \n" +
          "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                       \n" +
          "	  ) q');                      \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT                       \n" +
          "    *                      \n" +
          "FROM                      \n" +
          "    tempEcoTypeCategory;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempEcoTypeCategory;                      \n" +
          "		END IF;                      \n" +
          "    DROP TABLE tempEcoTypeCategory;                        \n" +
          "END IF;                      \n" +
          "IF tableName='eco_type_values' THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)                      \n" +
          "	  ) q');                      \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT                       \n" +
          "    *                      \n" +
          "FROM                      \n" +
          "    tempEcoTypeValues;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempEcoTypeValues;                      \n" +
          "		END IF;                      \n" +
          "    DROP TABLE tempEcoTypeValues;                        \n" +
          "END IF;                      \n" +
          "IF tableName='customers' THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                       \n" +
          "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                       \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                      \n" +
          "	  ) q');                      \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                      \n" +
          "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                      \n" +
          "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			PREPARE stmt2 FROM @SQL2;                      \n" +
          "			PREPARE stmt3 FROM @SQL3;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "			EXECUTE stmt2;                      \n" +
          "			EXECUTE stmt3;                      \n" +
          "  \n" +
          "			SELECT                       \n" +
          "    *                      \n" +
          "FROM                      \n" +
          "    tempCustomers;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempCustomers;                      \n" +
          "		END IF;                      \n" +
          "    DROP TABLE tempCustomers;                        \n" +
          "END IF;                      \n" +
          "IF tableName='certificate_standards' THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                      \n" +
          "  \n" +
          "	  ) q');                      \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		                      \n" +
          "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                      \n" +
          "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			PREPARE stmt2 FROM @SQL2;                      \n" +
          "			PREPARE stmt3 FROM @SQL3;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "			EXECUTE stmt2;                      \n" +
          "			EXECUTE stmt3;                      \n" +
          "  \n" +
          "			SELECT * FROM tempCertificateStandards;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempCertificateStandards;                      \n" +
          "		END IF;                      \n" +
          "    DROP TABLE tempCertificateStandards;                        \n" +
          "END IF;                      \n" +
          "IF tableName='department' THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                      \n" +
          "  \n" +
          "	  ) q');                      \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		                      \n" +
          "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                      \n" +
          "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			PREPARE stmt2 FROM @SQL2;                      \n" +
          "			PREPARE stmt3 FROM @SQL3;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "			EXECUTE stmt2;                      \n" +
          "			EXECUTE stmt3;                      \n" +
          "  \n" +
          "			SELECT * FROM tempDepartment;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempDepartment;                      \n" +
          "		END IF;                      \n" +
          "    DROP TABLE tempDepartment;                        \n" +
          "END IF;                      \n" +
          "IF tableName='genericcategory' THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND (eqpGroupID IN(',IDs,') OR eqpSubGroupID IN(',IDs,') OR eqpTypeID IN(',IDs,') OR eqpPossessionID IN(',IDs,') OR eqpOwnershipTypeID IN(',IDs,') OR locationTypeID IN(',IDs,'))   LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)                      \n" +
          "	     UNION ALL                    \n" +
          "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)                      \n" +
          "	  ) q');                      \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT                       \n" +
          "    *                      \n" +
          "FROM                      \n" +
          "    tempGenericCategory;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempGenericCategory;                      \n" +
          "		END IF;                      \n" +
          "    DROP TABLE tempGenericCategory;                        \n" +
          "END IF;                      \n" +
          "IF tableName='equipment' THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                      \n" +
          "  \n" +
          "	  ) q');                      \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN                      \n" +
          "			IF entityID IS NOT NULL THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		                      \n" +
          "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                      \n" +
          "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			PREPARE stmt2 FROM @SQL2;                      \n" +
          "			PREPARE stmt3 FROM @SQL3;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "			EXECUTE stmt2;                      \n" +
          "			EXECUTE stmt3;                      \n" +
          "  \n" +
          "			ELSE                      \n" +
          "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "			END IF;                      \n" +
          "  \n" +
          "			SELECT * FROM tempEquipment;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempEquipment;                      \n" +
          "		END IF;                      \n" +
          "    DROP TABLE tempEquipment;                        \n" +
          "END IF;                      \n" +
          "IF tableName='parts' THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                      \n" +
          "	  ) q');                      \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempParts)=0 THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempParts;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempParts;                      \n" +
          "		END IF;                      \n" +
          "    DROP TABLE tempParts;                        \n" +
          "END IF;                      \n" +
          "IF tableName='master_templates' THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)                      \n" +
          "	  ) q');                      \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempMasterTemplate;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempMasterTemplate;                      \n" +
          "		END IF;                      \n" +
          "    DROP TABLE tempMasterTemplate;                        \n" +
          "END IF;                      \n" +
          "IF tableName='operations' THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                      \n" +
          "  \n" +
          "	  ) q');                      \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempOperations)=0 THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		                      \n" +
          "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                      \n" +
          "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			PREPARE stmt2 FROM @SQL2;                      \n" +
          "			PREPARE stmt3 FROM @SQL3;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "			EXECUTE stmt2;                      \n" +
          "			EXECUTE stmt3;                      \n" +
          "  \n" +
          "			SELECT * FROM tempOperations;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempOperations;                      \n" +
          "		END IF;                      \n" +
          "    DROP TABLE tempOperations;                        \n" +
          "END IF;                      \n" +
          "IF tableName='workorder' THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL		                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                      \n" +
          "  \n" +
          "	  ) q');                      \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN                      \n" +
          "  \n" +
          "			/* [S] - Add Time line log for delete work order */                      \n" +
          "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;                       \n" +
          "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");                      \n" +
          "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			                      \n" +
          "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			                      \n" +
          "			/* [E] - Add Time line log for delete work order */			                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update workorder set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                      \n" +
          "			SET @SQl2 = CONCAT('update subform_transaction set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                      \n" +
          "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                      \n" +
          "			SET @SQl4 = CONCAT('update workorder_certification set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			PREPARE stmt2 FROM @SQL2;                      \n" +
          "			PREPARE stmt3 FROM @SQL3;                      \n" +
          "			PREPARE stmt4 FROM @SQL4;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "			EXECUTE stmt2;                      \n" +
          "			EXECUTE stmt3;                      \n" +
          "			EXECUTE stmt4;                      \n" +
          "  \n" +
          "			SELECT * FROM tempWorkorder;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempWorkorder;                      \n" +
          "		END IF;                      \n" +
          "    DROP TABLE tempWorkorder;                        \n" +
          "END IF;                      \n" +
          "IF tableName='roles' THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                      \n" +
          "         UNION ALL                      \n" +
          "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                      \n" +
          "         UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');                      \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempRoles)=0 THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempRoles;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempRoles;                      \n" +
          "		END IF;                      \n" +
          "    DROP TABLE tempRoles;                        \n" +
          "END IF;                      \n" +
          "IF tableName='standard_class' THEN                      \n" +
          "  \n" +
          " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND FIND_IN_SET(',IDs,',classIDs) LIMIT 1)                      \n" +
          "	  ) q');                      \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                \n" +
          "  \n" +
          "  \n" +
          "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');  \n" +
          "  \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempStandardClass;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempStandardClass;                      \n" +
          "		END IF;                      \n" +
          "    DROP TABLE tempStandardClass;                        \n" +
          "END IF;                      \n" +
          "IF tableName='dataelement' THEN                      \n" +
          "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		                      \n" +
          "		UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                      \n" +
          "	  ) q');                      \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt2 FROM @SQL2;                      \n" +
          "			EXECUTE stmt2;                      \n" +
          "  \n" +
          "  \n" +
          "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)                      \n" +
          "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated                      \n" +
          "			FROM dataelement dl WHERE dl.dataElementID = IDs;                      \n" +
          "  \n" +
          "  \n" +
          "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */                      \n" +
          "  \n" +
          "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                       \n" +
          "							where type IN(''',IDs,''') and deletedAt IS NULL ');		                      \n" +
          "				PREPARE stmt3 FROM @SQL3;                      \n" +
          "				EXECUTE stmt3;                      \n" +
          "  \n" +
          "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */                      \n" +
          "  \n" +
          "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */                      \n" +
          "  \n" +
          "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs                       \n" +
          "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN                      \n" +
          "  \n" +
          "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                       \n" +
          "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'                       \n" +
          "								AND isAutoIncrement = 1 AND deletedAt IS NULL)                      \n" +
          "							 and deletedAt IS NULL ');		                      \n" +
          "					     PREPARE stmt4 FROM @SQL4;                      \n" +
          "				             EXECUTE stmt4;                      \n" +
          "					END IF;	                      \n" +
          "				END IF;                      \n" +
          "  \n" +
          "  \n" +
          "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN                      \n" +
          "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)                       \n" +
          "						    AND deletedAt IS NULL');		                      \n" +
          "				PREPARE stmt5 FROM @SQL5;                      \n" +
          "				EXECUTE stmt5;                      \n" +
          "  \n" +
          "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                       \n" +
          "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		                      \n" +
          "				PREPARE stmt6 FROM @SQL6;                      \n" +
          "				EXECUTE stmt6;                      \n" +
          "  \n" +
          "  \n" +
          "			END IF;                      \n" +
          "  \n" +
          "  \n" +
          "			SELECT * FROM tempDataElement;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempDataElement;                      \n" +
          "		END IF;                      \n" +
          "    DROP TABLE tempDataElement;                        \n" +
          "  \n" +
          "END IF;                      \n" +
          "IF tableName='workorder_preprogcomp' THEN                      \n" +
          "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                      \n" +
          "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg                      \n" +
          "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND                      \n" +
          "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                      \n" +
          "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "    SELECT * FROM  tempComponent;                      \n" +
          "    SELECT TotalCount FROM  tempComponent;                      \n" +
          "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			                      \n" +
          "  \n" +
          "			/* [S] - Add Time line log for delete pre program component */                \n" +
          "			SELECT partNumber,(SELECT woNumber FROM workorder WHERE woID = woppc.woID),              \n" +
          "				(SELECT opName FROM workorder_operation WHERE woOPID = refStkWOOPID)              \n" +
          "			    INTO @lvPartNumber,@lvWoNumber,@lvOpName              \n" +
          "			FROM workorder_preprogcomp woppc                \n" +
          "			WHERE woPreProgCompID = IDs  AND deletedAt IS NULL;                 \n" +
          "  \n" +
          "			SET @lvEventTitle = CONCAT(\"Preprogram component deleted from work order\");                \n" +
          "			SET @lvEventDescription = CONCAT(\"Preprogram component \\\"\",@lvPartNumber,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                \n" +
          "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.14,NULL,deletedBy,3);  /* 3 = DELETE */                \n" +
          "			/* [E] - Add Time line log for delete pre program component */               \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt2 FROM @SQL2;                      \n" +
          "			EXECUTE stmt2;                      \n" +
          "  \n" +
          "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where                       \n" +
          "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                      \n" +
          "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt3 FROM @SQL3;                      \n" +
          "			EXECUTE stmt3;                      \n" +
          "		SELECT                       \n" +
          "			*                      \n" +
          "		FROM                      \n" +
          "			tempComponent;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempComponent;                      \n" +
          "		END IF;                      \n" +
          "    DROP TABLE tempComponent;                        \n" +
          "END IF;                      \n" +
          "IF tableName='component' THEN                      \n" +
          "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                      \n" +
          "		 UNION ALL                      \n" +
          "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                      \n" +
          "  \n" +
          "	  ) q');                      \n" +
          "	  PREPARE stmt FROM @SQL;                      \n" +
          "	   EXECUTE stmt;                      \n" +
          "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN                      \n" +
          "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempComponent;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempComponent;                      \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempComponent;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"workorder_cluster\" THEN                       \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)                      \n" +
          "		      ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN                      \n" +
          "  \n" +
          "		/* [S] - Add Time line log for delete cluster */                      \n" +
          "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster                      \n" +
          "		WHERE clusterID = IDs AND deletedAt IS NULL;                      \n" +
          "		SELECT woNumber INTO @lvWoNumber FROM workorder                      \n" +
          "		WHERE woID = @lvWoID AND deletedAt IS NULL ;                      \n" +
          "  \n" +
          "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");                      \n" +
          "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                      \n" +
          "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		                      \n" +
          "		/* [E] - Add Time line log for delete cluster */                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update workorder_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempWorkorderCluster;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempWorkorderCluster;                      \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempWorkorderCluster;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"workorder_operation\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)                      \n" +
          "			 UNION ALL                      \n" +
          "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		                       \n" +
          "		      ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN                      \n" +
          "			 /* [S] - Add Time line log for delete work order operation */                      \n" +
          "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName                      \n" +
          "			FROM workorder_operation                       \n" +
          "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;                       \n" +
          "  \n" +
          "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                      \n" +
          "  \n" +
          "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");                      \n" +
          "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                      \n" +
          "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		                      \n" +
          "			/* [E] - Add Time line log for delete work order operation */                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update workorder_operation set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                      \n" +
          "		SET @SQl2 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                      \n" +
          "		SET @SQl3 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                      \n" +
          "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                      \n" +
          "		SET @SQl5 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                      \n" +
          "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                      \n" +
          "		SET @SQl7 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		                      \n" +
          "  \n" +
          "		-- Added for update verify workorder status again after changes in workorder operation                      \n" +
          "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;                      \n" +
          "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		                      \n" +
          "		-- Added for update verify workorder status again after changes in workorder operation                      \n" +
          "  \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			PREPARE stmt2 FROM @SQL2;                      \n" +
          "			PREPARE stmt3 FROM @SQL3;                      \n" +
          "			PREPARE stmt4 FROM @SQL4;                      \n" +
          "			PREPARE stmt5 FROM @SQL5;                      \n" +
          "			PREPARE stmt6 FROM @SQL6;                      \n" +
          "			PREPARE stmt7 FROM @SQl7;                      \n" +
          "			PREPARE stmt8 FROM @SQl7;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "			EXECUTE stmt2;                      \n" +
          "			EXECUTE stmt3;                      \n" +
          "			EXECUTE stmt4;                      \n" +
          "			EXECUTE stmt5;                      \n" +
          "			EXECUTE stmt6;                      \n" +
          "			EXECUTE stmt7;                      \n" +
          "			EXECUTE stmt8;                      \n" +
          "  \n" +
          "			SELECT * FROM tempWorkorderOperation;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempWorkorderOperation;                      \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempWorkorderOperation;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"workorder_operation_part\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                      \n" +
          "		      ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN                      \n" +
          "  \n" +
          "		/* [S] - Add Time line log for delete parts from work order */                      \n" +
          "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                      \n" +
          "		FROM workorder_operation                       \n" +
          "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                       \n" +
          "  \n" +
          "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                      \n" +
          "  \n" +
          "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts                      \n" +
          "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;                       \n" +
          "  \n" +
          "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");                      \n" +
          "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                      \n" +
          "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */                      \n" +
          "		/* [E] - Add Time line log for delete parts from work order */                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempWorkorderPart;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempWorkorderPart;                      \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempWorkorderPart;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"workorder_operation_equipment\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                      \n" +
          "		      ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN                      \n" +
          "  \n" +
          "		/* [S] - Add Time line log for delete Equipment from work order */                      \n" +
          "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                      \n" +
          "		FROM workorder_operation                       \n" +
          "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                       \n" +
          "  \n" +
          "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	                      \n" +
          "  \n" +
          "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment                      \n" +
          "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;                       \n" +
          "  \n" +
          "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");                      \n" +
          "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                      \n" +
          "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                      \n" +
          "		/* [E] -  Add Time line log for delete Equipment from work order */                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');                      \n" +
          "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			PREPARE stmt2 FROM @SQL2;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "			EXECUTE stmt2;                      \n" +
          "  \n" +
          "			SELECT * FROM tempWorkorderEquipment;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempWorkorderEquipment;                      \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempWorkorderEquipment;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"workorder_operation_employee\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                      \n" +
          "		      ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN                      \n" +
          "  \n" +
          "		/* [S] - Add Time line log for delete Employees from work order */                      \n" +
          "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                      \n" +
          "		FROM workorder_operation                       \n" +
          "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                       \n" +
          "  \n" +
          "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                      \n" +
          "  \n" +
          "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees                      \n" +
          "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;                       \n" +
          "  \n" +
          "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");                      \n" +
          "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                      \n" +
          "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                      \n" +
          "		/* [E] -  Add Time line log for delete Employee from work order */                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempWorkorderEmployee;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempWorkorderEmployee;                      \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempWorkorderEmployee;                      \n" +
          "  \n" +
          "END IF;                      \n" +
          "IF tableName=\"workorder_operation_cluster\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)                      \n" +
          "		      ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN                      \n" +
          "  \n" +
          "		/* [S] - Add Time line log for delete operations from cluster */                      \n" +
          "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                      \n" +
          "		FROM workorder_operation                       \n" +
          "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                       \n" +
          "  \n" +
          "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                      \n" +
          "  \n" +
          "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster                      \n" +
          "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;                       \n" +
          "  \n" +
          "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");                      \n" +
          "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                      \n" +
          "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                      \n" +
          "		/* [E] -  Add Time line log for delete operations from cluster */		                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                      \n" +
          "  \n" +
          "		-- Added for update verify workorder status again after changes in workorder operation                      \n" +
          "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;                      \n" +
          "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		                      \n" +
          "		-- Added for update verify workorder status again after changes in workorder operation                      \n" +
          "  \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			PREPARE stmt2 FROM @SQL2;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "			EXECUTE stmt2;                      \n" +
          "  \n" +
          "			SELECT * FROM tempWorkorderOperationCluster;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempWorkorderOperationCluster;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempWorkorderOperationCluster;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"entity\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                      \n" +
          "		     UNION ALL                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                      \n" +
          "		     UNION ALL                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                      \n" +
          "		    UNION ALL                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                      \n" +
          "		      ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempEntity)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempEntity;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempEntity;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempEntity;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"salesordermst\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)                      \n" +
          "		      ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			/* [S] - Add Time line log for delete sales order mst */ 	              \n" +
          "			SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber              \n" +
          "			FROM salesordermst              \n" +
          "			WHERE FIND_IN_SET(id,IDs);              \n" +
          "  \n" +
          "			SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");                \n" +
          "			SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                \n" +
          "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */                \n" +
          "			/* [E] - Add Time line log for delete sales order mst */	              \n" +
          "  \n" +
          "			SELECT * FROM tempSalesOrderMst;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempSalesOrderMst;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempSalesOrderMst;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"mfgcodemst\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)                      \n" +
          "		      ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempMFGCodeMst;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempMFGCodeMst;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempMFGCodeMst;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"dataelement_transactionvalues_manual\" THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                       \n" +
          "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)                      \n" +
          "				and deletedAt IS NULL');		                      \n" +
          "			PREPARE stmt2 FROM @SQL2;                      \n" +
          "			EXECUTE stmt2;                      \n" +
          "  \n" +
          "  \n" +
          "END IF;                      \n" +
          "IF tableName=\"shippedassembly\" THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;              \n" +
          "			/* [S] - Add Time line log for delete shipped assembly */               \n" +
          "			SELECT GROUP_CONCAT(shippedqty) , workorderID  INTO @lvShippedqty,@lvWoID              \n" +
          "			FROM shippedassembly              \n" +
          "			WHERE FIND_IN_SET(id,IDs);              \n" +
          "  \n" +
          "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID ;              \n" +
          "  \n" +
          "			SET @lvEventTitle = CONCAT(\"Shipped assembly deleted\");                \n" +
          "			SET @lvEventDescription = CONCAT(\"Shipped assembly for workorder \\\"\",@lvWoNumber,\"\\\" & quantity \\\"\",@lvShippedqty ,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                \n" +
          "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,9,NULL,deletedBy,3);  /* 3 = DELETE */                \n" +
          "			/* [E] - Add Time line log for delete shipped assembly */ 		              \n" +
          "  \n" +
          "END IF;                      \n" +
          "IF tableName=\"assemblymst\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                      \n" +
          "		     UNION ALL                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                      \n" +
          "		     UNION ALL                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                      \n" +
          "		     UNION ALL                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                      \n" +
          "		    UNION ALL                      \n" +
          "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)                      \n" +
          "		      ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempassemblymst;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempassemblymst;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempassemblymst;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"assembly_revisionmst\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND (fromRevisionID IN(',IDs,') OR toRevisionID IN(',IDs,'))  LIMIT 1)                      \n" +
          "		     UNION ALL                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                      \n" +
          "		     UNION ALL                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                      \n" +
          "		     UNION ALL                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                      \n" +
          "		    UNION ALL                      \n" +
          "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)                      \n" +
          "		      ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempassembly_revisionmst;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempassembly_revisionmst;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempassembly_revisionmst;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"workorder_trans_serialno\" THEN                      \n" +
          "  \n" +
          "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1                       \n" +
          "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;                      \n" +
          "  \n" +
          "  \n" +
          "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)                      \n" +
          "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)                       \n" +
          "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1                       \n" +
          "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;                      \n" +
          "  \n" +
          "	/* condition to check total serials of type greater than actual production qty */                      \n" +
          "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1                      \n" +
          "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)                       \n" +
          "		> IFNULL(vQty1,0)) THEN                      \n" +
          "  \n" +
          "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */                      \n" +
          "		IF(vQty1 IS NULL OR vQty1 = 0) THEN                       \n" +
          "  \n" +
          "			/* condition to check curr opis and status match with given delete serial */                      \n" +
          "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1                      \n" +
          "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN                      \n" +
          "  \n" +
          "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                      \n" +
          "				WHERE woTransSerialID = IDs;	                      \n" +
          "  \n" +
          "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                       \n" +
          "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                      \n" +
          "				ORDER BY woTransSerialID DESC LIMIT 1;                      \n" +
          "  \n" +
          "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                      \n" +
          "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	                \n" +
          "				/* [S] - Add Time line log for delete production serial from work order operation */ 	              \n" +
          "				SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");                \n" +
          "				SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                \n" +
          "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                \n" +
          "				/* [E] - Add Time line log for delete production serial from work order operation */ 				              \n" +
          "  \n" +
          "			ELSE                       \n" +
          "				SELECT 'not allowed';                      \n" +
          "			END IF;                      \n" +
          "  \n" +
          "  \n" +
          "		ELSE                       \n" +
          "  \n" +
          "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                      \n" +
          "			WHERE woTransSerialID = IDs;	                      \n" +
          "  \n" +
          "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                       \n" +
          "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                      \n" +
          "			ORDER BY woTransSerialID DESC LIMIT 1;                      \n" +
          "  \n" +
          "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                      \n" +
          "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;              \n" +
          "			/* [S] - Add Time line log for delete production serial from work order operation */ 	              \n" +
          "			SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");                \n" +
          "			SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                \n" +
          "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                \n" +
          "			/* [E] - Add Time line log for delete production serial from work order operation */                  \n" +
          "  \n" +
          "		END IF;	                      \n" +
          "  \n" +
          "  \n" +
          "	ELSE                       \n" +
          "		SELECT 'not allowed';		                      \n" +
          "	END IF;	                      \n" +
          "  \n" +
          "  \n" +
          "END IF;                      \n" +
          "IF tableName=\"br_label_template\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)                      \n" +
          "		      ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempbr_label_template;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempbr_label_template;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempbr_label_template;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"measurement_types\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)                      \n" +
          "		     UNION ALL                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempMeasurement_types;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempMeasurement_types;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempMeasurement_types;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"uoms\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg                       \n" +
          "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)                      \n" +
          "            UNION ALL                      \n" +
          "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg                       \n" +
          "            FROM unit_detail_formula WHERE deletedAt IS NULL AND (unitID IN (',IDs,')  or toUnitID IN (',IDs,')) LIMIT 1)              \n" +
          "              UNION ALL                    \n" +
          "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND uom IN(',IDs,') LIMIT 1)) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempUOMs;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempUOMs;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempUOMs;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"jobtypes\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                       \n" +
          "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempJobTypess;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempJobTypess;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempJobTypess;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"ordertype\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                       \n" +
          "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempOrderTypes;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempOrderTypes;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempOrderTypes;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"reasonmst\" THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "END IF;                      \n" +
          "IF tableName='component_sid_stock' THEN	                      \n" +
          "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)                      \n" +
          "			UNION ALL                      \n" +
          "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		                          \n" +
          "		    ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			/* [S] - Add Time line log for delete component sid stock (receiving material) */ 	              \n" +
          "			SELECT GROUP_CONCAT(uid) INTO @lvUID  FROM component_sid_stock              \n" +
          "			WHERE FIND_IN_SET(id,IDs);	              \n" +
          "  \n" +
          "			SET @lvEventTitle = CONCAT(\"Receiving material(s) deleted\");                \n" +
          "			SET @lvEventDescription = CONCAT(\"Receiving material(s) of UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                \n" +
          "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7,NULL,deletedBy,3);  /* 3 = DELETE */                \n" +
          "			/* [E] - Add Time line log for delete component sid stock (receiving material) */ 	              \n" +
          "  \n" +
          "			SELECT * FROM tempcomponentsidstock;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempcomponentsidstock;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempcomponentsidstock;                       \n" +
          "  \n" +
          "END IF;                      \n" +
          "IF tableName='component_sid_stock_dataelement_values' THEN	                      \n" +
          "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                  \n" +
          "			/* [S] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	              \n" +
          "			SELECT GROUP_CONCAT(dataelementid), GROUP_CONCAT(refsidid) INTO @lvCSDlIDs,@lvRefsidid                 \n" +
          "			FROM component_sid_stock_dataelement_values              \n" +
          "			WHERE FIND_IN_SET(id,IDs);              \n" +
          "  \n" +
          "			SELECT uid INTO @lvUID FROM component_sid_stock WHERE id = @lvRefsidid   ;              \n" +
          "  \n" +
          "			SELECT GROUP_CONCAT(dataElementName) INTO @lvDlNames              \n" +
          "			FROM dataelement               \n" +
          "			WHERE FIND_IN_SET(dataElementID,@lvCSDlIDs);	              \n" +
          "  \n" +
          "			SET @lvEventTitle = CONCAT(\"Data field(s) of receiving material deleted\");                \n" +
          "			SET @lvEventDescription = CONCAT(\"Data field(s) \\\"\",@lvDlNames,\"\\\" of receiving material with UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                \n" +
          "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7.01,NULL,deletedBy,3);  /* 3 = DELETE */                \n" +
          "			/* [E] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	              \n" +
          "END IF;                      \n" +
          "IF tableName='chart_templatemst' THEN	                      \n" +
          "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)                      \n" +
          "		    ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempcharttemplatemst;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempcharttemplatemst;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempcharttemplatemst;                       \n" +
          "  \n" +
          "END IF;                      \n" +
          "IF tableName=\"shipping_request\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg                       \n" +
          "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)                      \n" +
          "            UNION ALL                      \n" +
          "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg                       \n" +
          "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                \n" +
          "			/* [S] - Add Time line log for delete shipment request */               \n" +
          "			SELECT GROUP_CONCAT(note) INTO @lvNotes FROM Shipping_Request              \n" +
          "			WHERE FIND_IN_SET(id,IDs);	              \n" +
          "  \n" +
          "			SET @lvEventTitle = CONCAT(\"Shipment request deleted\");                \n" +
          "			SET @lvEventDescription = CONCAT(\"Shipment request of \\\"\",@lvNotes,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                \n" +
          "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,8,NULL,deletedBy,3);  /* 3 = DELETE */                \n" +
          "			/* [E] - Add Time line log for delete shipment request */               \n" +
          "  \n" +
          "			SELECT * FROM tempShippingRequest;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempShippingRequest;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempShippingRequest;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"chart_rawdata_category\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg                       \n" +
          "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)                      \n" +
          "            UNION ALL                      \n" +
          "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg                       \n" +
          "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempChartRawdataCategory;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempChartRawdataCategory;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempChartRawdataCategory;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"component_standard\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg                       \n" +
          "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempcomponentStandard;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempcomponentStandard;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempcomponentStandard;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"component_standard_class\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg                       \n" +
          "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');                      \n" +
          "           /*  UNION ALL                      \n" +
          "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg                       \n" +
          "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt2 FROM @SQL2;                      \n" +
          "			EXECUTE stmt2;                      \n" +
          "  \n" +
          "			SELECT * FROM tempcomponentStandardClass;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempcomponentStandardClass;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempcomponentStandardClass;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"rfq_lineitems\" THEN                      \n" +
          "		SELECT 0 TotalCount, '' Message;                      \n" +
          "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "		PREPARE stmt1 FROM @SQL1;                      \n" +
          "		EXECUTE stmt1;                                  \n" +
          "END IF;                      \n" +
          "IF tableName=\"requirement\" THEN                      \n" +
          "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg                       \n" +
          "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM temprequirements)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM temprequirements;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM temprequirements;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE temprequirements;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"workorder_trans_packagingdetail\" THEN                 \n" +
          "		/* [S] - Add Time line log for delete work order transaction packing details */                \n" +
          "		SELECT  (SELECT woNumber FROM workorder WHERE woID = wtpd.woID),              \n" +
          "			(SELECT opName FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL),              \n" +
          "			(SELECT woOPID FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL)              \n" +
          "			INTO @lvWoNumber , @lvOpName ,@lvWoOPID               \n" +
          "		FROM workorder_trans_packagingdetail wtpd               \n" +
          "		WHERE wtpd.woTransPackagingDetailID = IDs AND wtpd.deletedAt IS NULL  /* here ids multiple but need one record only so */;              \n" +
          "		SET @lvEventTitle = CONCAT(\"Box serial details deleted from work order operation\");                \n" +
          "		SET @lvEventDescription = CONCAT(\"Box serial details deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                \n" +
          "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.17,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                \n" +
          "		/* [E] - Add Time line log for delete work order transaction packing details */               \n" +
          "  \n" +
          "		SELECT 0 TotalCount, '' Message;                      \n" +
          "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "		PREPARE stmt1 FROM @SQL1;                      \n" +
          "		EXECUTE stmt1;                                  \n" +
          "END IF;                      \n" +
          "IF tableName=\"customer_addresses\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)                      \n" +
          "			UNION ALL                      \n" +
          "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                       \n" +
          "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempcustomer_addresses;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempcustomer_addresses;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempcustomer_addresses;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"rfqforms\" THEN                      \n" +
          "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg                       \n" +
          "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in                       \n" +
          "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');                      \n" +
          "  \n" +
          "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in                       \n" +
          "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		                      \n" +
          "  \n" +
          "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in                       \n" +
          "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		                      \n" +
          "  \n" +
          "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in                       \n" +
          "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		                      \n" +
          "  \n" +
          "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in                       \n" +
          "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');                      \n" +
          "  \n" +
          "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		                      \n" +
          "  \n" +
          "            PREPARE stmt1 FROM @SQL1;                      \n" +
          "			PREPARE stmt2 FROM @SQL2;                      \n" +
          "            PREPARE stmt3 FROM @SQL3;                      \n" +
          "			PREPARE stmt4 FROM @SQL4;                      \n" +
          "            PREPARE stmt5 FROM @SQL5;                      \n" +
          "			PREPARE stmt6 FROM @SQL6;                      \n" +
          "  \n" +
          "			EXECUTE stmt1;                      \n" +
          "			EXECUTE stmt2;                      \n" +
          "            EXECUTE stmt3;                      \n" +
          "			EXECUTE stmt4;                      \n" +
          "            EXECUTE stmt5;                      \n" +
          "			EXECUTE stmt6;                      \n" +
          "  \n" +
          "  \n" +
          "  \n" +
          "			SELECT * FROM temprfqformss;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM temprfqformss;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE temprfqformss;                       \n" +
          "END IF;                      \n" +
          "IF tableName=\"rfq_mountingtypemst\" THEN                      \n" +
          "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg                       \n" +
          "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1)              \n" +
          "             UNION ALL                    \n" +
          "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mountingTypeID IN(',IDs,') LIMIT 1)) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM temprfqpartcategory;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM temprfqpartcategory;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE temprfqpartcategory;                       \n" +
          "  \n" +
          "END IF;                      \n" +
          "IF tableName=\"who_bought_who\" THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "END IF;                      \n" +
          "IF tableName=\"rfq_parttypemst\" THEN                      \n" +
          "			SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqparttypemst as                      \n" +
          "				 SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "			    FROM                       \n" +
          "			    (                 \n" +
          "	            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM               \n" +
          "	            component WHERE deletedAt IS NULL AND partTypeID IN(',IDs,') LIMIT 1)) q');                      \n" +
          "	  	        PREPARE stmt FROM @SQL;                      \n" +
          "		        EXECUTE stmt;                \n" +
          "	          IF (SELECT TotalCount FROM temprfqparttypemst)=0 THEN                  \n" +
          "  \n" +
          "				SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,',               \n" +
          "	            deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "	  				PREPARE stmt1 FROM @SQL1;                      \n" +
          "						EXECUTE stmt1;                \n" +
          "	            	SELECT * FROM temprfqparttypemst;                      \n" +
          "			ELSE                      \n" +
          "				SELECT * FROM temprfqparttypemst;                      \n" +
          "  \n" +
          "			END IF;                      \n" +
          "            DROP TABLE temprfqparttypemst;                                 \n" +
          "  \n" +
          "END IF;                      \n" +
          "IF tableName=\"rfq_lineitems_errorcode\" THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "END IF;                      \n" +
          "IF tableName=\"rfq_lineitems_keywords\" THEN                      \n" +
          "  \n" +
          "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "END IF;                \n" +
          "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                      \n" +
          "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempQuotecharges_dynamic_fields_mst as                      \n" +
          "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                      \n" +
          "		    FROM                       \n" +
          "		    (                      \n" +
          "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                       \n" +
          "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');                      \n" +
          "  \n" +
          "	PREPARE stmt FROM @SQL;                      \n" +
          "	EXECUTE stmt;                      \n" +
          "		IF (SELECT TotalCount FROM tempQuotecharges_dynamic_fields_mst)=0 THEN                      \n" +
          "  \n" +
          "		SET @SQl1 = CONCAT('update quotecharges_dynamic_fields_mst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                      \n" +
          "			PREPARE stmt1 FROM @SQL1;                      \n" +
          "			EXECUTE stmt1;                      \n" +
          "  \n" +
          "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                      \n" +
          "		ELSE                      \n" +
          "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                      \n" +
          "  \n" +
          "		END IF;                      \n" +
          "		DROP TABLE tempQuotecharges_dynamic_fields_mst;                       \n" +
          "END IF;                           \n" +
          "END;  \n" +

            /* **************************** Add Script Version -> 21-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (115,'1.00','V1',' Delete sp Sproc_checkDelete - KETAN '," + userid + ");"
            );
            break;
        case 115:
            allDbChangesArray.push(
            /* **************************** New Script -> 22-08-2018  *********************************** */
              "DROP FUNCTION IF EXISTS `fun_getFinalPriceSumByQtyID` ;  \n" +
              "CREATE FUNCTION `fun_getFinalPriceSumByQtyID`(  \n" +
              "	pQtyID INT, prfqAssyID INT) RETURNS DECIMAL(16,6)  \n" +
              "BEGIN  \n" +
              "	DECLARE result DECIMAL (16,6);  \n" +
              "  \n" +
              "	SELECT SUM(finalPrice) INTO @result  \n" +
              "	FROM rfq_consolidate_mfgpn_lineitem_quantity a  \n" +
              "	LEFT JOIN rfq_assy_quantity b ON a.qtyID=b.id   \n" +
              "        WHERE b.id = pQtyID AND rfqAssyID = prfqAssyID;  \n" +
              "  \n" +
              "	SET result = @result;  \n" +
              "	RETURN result;  \n" +
              "    END;  \n" +
            /* **************************** Add Script Version -> 22-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQCustomRulesLineItems` ;  \n" +
              "CREATE PROCEDURE `Sproc_GetRFQCustomRulesLineItems`(              \n" +
              "	IN ppageIndex INT(11),              \n" +
              "	IN precordPerPage INT(11),              \n" +
              "	IN pOrderBy VARCHAR(255),      \n" +
              "	IN pWhereColumnName VARCHAR(255),        \n" +
              "	IN pWhereFilterValue VARCHAR(255),       \n" +
              "	IN pCustomWhere INT(11),        \n" +
              "	IN pWhereClause VARCHAR(21844),              \n" +
              "	IN rfqAssyID INT(11),              \n" +
              "	IN puserID INT (11)              \n" +
              "    )  \n" +
              "BEGIN              \n" +
              "	    DECLARE pOffset INT(11);              \n" +
              "	    DECLARE rowNumWhere VARCHAR(255) ;              \n" +
              "	    SET @SQLString = NULL;        \n" +
              "	    SET @PERString = NULL;              \n" +
              "	    SET SESSION group_concat_max_len = 150000;                  \n" +
              "	    IF (pOrderBy IS NOT NULL) THEN              \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
              "		ELSE              \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;               \n" +
              "		END IF;	              \n" +
              "  \n" +
              "  \n" +
              "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN              \n" +
              "			SET pWhereClause = '1=1' ;              \n" +
              "		END IF;	              \n" +
              "  \n" +
              "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN               \n" +
              "			SET pOffset = (ppageIndex -1) * precordPerPage; 		              \n" +
              "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
              "		ELSE	              \n" +
              "			SET rowNumWhere = '';              \n" +
              "		END IF;	              \n" +
              "		SELECT    \n" +
              "			GROUP_CONCAT(DISTINCT              \n" +
              "				CONCAT(              \n" +
              "					'100*Max((IF(ra.requestQty = ''',              \n" +
              "						ra.requestQty,              \n" +
              "					''', rq.finalPrice, null)))/Max((IF(ra.requestQty = ''',              \n" +
              "						ra.requestQty,              \n" +
              "					''', fun_getFinalPriceSumByQtyID (ra.id,rl.rfqAssyID), null))) AS ''',              \n" +
              "						ra.requestQty,''''              \n" +
              "					))  \n" +
              "					INTO @PERString  \n" +
              "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq              \n" +
              "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID              \n" +
              "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id              \n" +
              "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;              \n" +
              "  \n" +
              "			IF(@PERString IS NOT NULL) THEN       \n" +
              "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS              \n" +
              "					SELECT               \n" +
              "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                \n" +
              "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,          \n" +
              "					(SELECT           \n" +
              "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                    \n" +
              "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN           \n" +
              "                                     component c ON rla.mfgpnid=c.id           \n" +
              "                                     LEFT JOIN mfgcodemst mg ON            \n" +
              "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,              \n" +
              "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'', c.rohsComplient )AS mfgPn               \n" +
              "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN           \n" +
              "                                component c ON rla.mfgpnid=c.id                     \n" +
              "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',               \n" +
              "					@PERString, ' FROM rfq_consolidated_mfgpn_lineitem rl              \n" +
              "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID              \n" +
              "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id              \n" +
              "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');           \n" +
              "  \n" +
              "			ELSE              \n" +
              "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS              \n" +
              "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,           \n" +
              "					 GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                    \n" +
              "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN           \n" +
              "                                     component c ON rla.mfgpnid=c.id           \n" +
              "                                     LEFT JOIN mfgcodemst mg ON            \n" +
              "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                \n" +
              "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn               \n" +
              "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla               \n" +
              "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl              \n" +
              "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	              \n" +
              "			END IF;                    \n" +
              "			PREPARE stmt FROM @SQLStatement;              \n" +
              "			EXECUTE stmt;	              \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement_Temp = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp2 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\");              \n" +
              "			PREPARE query_Temp FROM @SQLStatement_Temp;              \n" +
              "			EXECUTE query_Temp;   \n" +
              "			DEALLOCATE PREPARE query_Temp;  \n" +
              "  \n" +
              "			SET @SQLStatement_Temp1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp3 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\");              \n" +
              "			PREPARE query_Temp1 FROM @SQLStatement_Temp1;              \n" +
              "			EXECUTE query_Temp1;     \n" +
              "			DEALLOCATE PREPARE query_Temp1;              \n" +
              "			IF pCustomWhere IS NOT NULL THEN  \n" +
              "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*) FROM consolidate_temp3 d where (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp2 c WHERE c.row_id<=d.row_id) <= \", pWhereFilterValue);              \n" +
              "				SET @SQLStatement2 = CONCAT(\"SELECT d.* FROM consolidate_temp3 d where (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp2 c WHERE c.row_id<=d.row_id) <= \", pWhereFilterValue, \" ORDER BY \", pWhereColumnName, \" DESC \" , rowNumWhere);  \n" +
              "			ELSE     \n" +
              "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );              \n" +
              "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
              "			END IF;  \n" +
              "  \n" +
              "			PREPARE query1 FROM @SQLStatement1;              \n" +
              "			EXECUTE query1;              \n" +
              "			DEALLOCATE PREPARE query1;              \n" +
              "  \n" +
              "			PREPARE query2 FROM @SQLStatement2;              \n" +
              "			EXECUTE query2;              \n" +
              "			DEALLOCATE PREPARE query2;              \n" +
              "  \n" +
              "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );              \n" +
              "			PREPARE query3 FROM @SQLStatement3;              \n" +
              "			EXECUTE query3;              \n" +
              "			DEALLOCATE PREPARE query3;              \n" +
              "  \n" +
              "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.turnType,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt              \n" +
              "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id              \n" +
              "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);              \n" +
              "			PREPARE query4 FROM @SQLStatement4;              \n" +
              "			EXECUTE query4;              \n" +
              "			DEALLOCATE PREPARE query4;          \n" +
              "  \n" +
              "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty, rq.finalPrice, unitPrice,supplier,rq.min,rq.mult, selectedMpn, selectionMode,qtyID,         \n" +
              "					currentStock,        \n" +
              "					leadTime,         \n" +
              "					supplierStock,        \n" +
              "					grossStock,            \n" +
              "					selectedPIDCode,ct.qpa, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                   \n" +
              "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID           \n" +
              "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id           \n" +
              "				WHERE ct.rfqAssyID=\",rfqAssyID);                  \n" +
              "			PREPARE query5 FROM @SQLStatement5;                      \n" +
              "			EXECUTE query5;                      \n" +
              "			DEALLOCATE PREPARE query5;             \n" +
              "  \n" +
              "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,       \n" +
              "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,       \n" +
              "						(SUM(rq.unitPrice)) AS TotalUnitPrice,      \n" +
              "						(SUM(rq.finalPrice)/IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice    \n" +
              "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq          \n" +
              "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id          \n" +
              "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                  \n" +
              "  \n" +
              "			PREPARE query6 FROM @SQLStatement6;                      \n" +
              "			EXECUTE query6;                      \n" +
              "			DEALLOCATE PREPARE query6;                          \n" +
              "  \n" +
              "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp2;   \n" +
              "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp3;	  \n" +
              "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;                \n" +
              "    END;  \n" +
            /* **************************** Add Script Version -> 22-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (116,'1.00','V1','80/20 Rules SP and Function for SUM - Vaibhav '," + userid + ");"
            );
            break;
        case 116:
            allDbChangesArray.push(
            /* **************************** New Script -> 22-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_CopyComponent`;  \n" +
           "CREATE PROCEDURE `Sproc_CopyComponent`(      \n" +
           "	IN BuyByID int(1),      \n" +
           "	IN BuyToID INT(1),    \n" +
           "    IN UserID int(1)    \n" +
           ")  \n" +
           "BEGIN      \n" +
           "DECLARE EXIT HANDLER FOR SQLEXCEPTION      \n" +
           "BEGIN      \n" +
           "	ROLLBACK;      \n" +
           "	RESIGNAL;      \n" +
           "END;      \n" +
           "DECLARE EXIT HANDLER FOR SQLWARNING      \n" +
           "  BEGIN      \n" +
           "	ROLLBACK;      \n" +
           "	RESIGNAL;      \n" +
           "END;      \n" +
           "    START TRANSACTION;      \n" +
           "  \n" +
           "# Copy Data of `component`    \n" +
           "				set @rank = (select id from component order by id desc limit 1);    \n" +
           "				INSERT INTO `component`    \n" +
           "				(`PID`, `imageURL`, `mfgPN`, `mfgcodeID`, `mfgPNDescription`,  `minQty`,  `maxQty`,  `packageQty`, `partStatus`, `ltbDate`, `rohsComplient`,    \n" +
           "				`aliasgroupID`, `packaginggroupID`, `altenetgroupID`,  `isDeleted`, `deletedAt`, `deletedBy`, `createdBy`,  `createdAt`, `priceCategoryID`,    \n" +
           "				 `isGoodPart`,  `rohsgroupID`,  `leadTime`,  `isLeadFree`,  `packaging`,  `noOfPosition`, `countryOfOrigin`, `uom`, `mountingTypeID`,     \n" +
           "				 `stdLeadTimeFrom`, `stdLeadTimeTo`, `nonStdLeadTimeFrom`, `nonStdLeadTimeTo`,  `partPackage`,  `partMarking`, `minimum`, `mult`,  `uomText`,    \n" +
           "				 `htsCode`, `category`,  `rohsText`,  `dataSheetLink`, `replacementPartID`,  `eolDate`,  `partValues`,   `tolerance`,  `minOperatingTemp`,     \n" +
           "				 `maxOperatingTemp`,  `partTypeID`, `weight`,  `volume`,  `length`, `width`,  `height`, `saftyStock`, `driveToolgroupID`, `description`,    \n" +
           "				 `requiredMatingPartgroupID`, `lengthText`, `widthText`,   `heightText`,  `PIDCode`)    \n" +
           "				select  @rank:=@rank+1 AS `PID`,    \n" +
           "				com.`imageURL`, com.`mfgPN`,BuyByID `mfgcodeID`, com.`mfgPNDescription`,     \n" +
           "				com.`minQty`, com.`maxQty`, com.`packageQty`, com.`partStatus`,  com.`ltbDate`, com.`rohsComplient`, com.`aliasgroupID`,     \n" +
           "				com. `packaginggroupID`, com.`altenetgroupID`, com.`isDeleted`, com.`deletedAt`, com.`deletedBy`, UserID `createdBy`,UTC_TIMESTAMP() `createdAt`,    \n" +
           "				com.`priceCategoryID`, com.`isGoodPart`, com.`rohsgroupID`, com.`leadTime`, com.`isLeadFree`, com.`packaging`, com.`noOfPosition`,     \n" +
           "				com.`countryOfOrigin`, com.`uom`, com.`mountingTypeID`, com.`stdLeadTimeFrom`, com.`stdLeadTimeTo`, com.`nonStdLeadTimeFrom`,     \n" +
           "				com.`nonStdLeadTimeTo`, com.`partPackage`, com.`partMarking`, com.`minimum`, com.`mult`, com.`uomText`, com.`htsCode`, com.`category`,     \n" +
           "				com.`rohsText`, com.`dataSheetLink`, com.`replacementPartID`, com.`eolDate`, com.`partValues`, com.`tolerance`, com.`minOperatingTemp`,     \n" +
           "				com.`maxOperatingTemp`, com.`partTypeID`, com.`weight`, com.`volume`, com.`length`, com.`width`, com.`height`, com.`saftyStock`,    \n" +
           "				com.`driveToolgroupID`, com.`description`, com.`requiredMatingPartgroupID`, com.`lengthText`, com.`widthText`, com.`heightText`,    \n" +
           "				(select LEFT(concat((select mfgCode from mfgcodemst where id = BuyByID),'+',c.mfgPN),30) `PIDCode`    \n" +
           "				 from component c join mfgcodemst m on m.id = c.mfgcodeID  where c.mfgcodeID = BuyToID and c.id = com.id and IFNULL(c.isDeleted,0) = 0) `PIDCode`    \n" +
           "				from component com     \n" +
           "				where com.mfgcodeID = BuyToID and IFNULL(com.isDeleted,0) = 0;    \n" +
           "# Copy Data of `component_alias`    \n" +
           "				INSERT INTO `component_alias`    \n" +
           "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)    \n" +
           "				select    \n" +
           "				ca.`aliasgroupID` ,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID` , ca.`isDeleted`,     \n" +
           "				UTC_TIMESTAMP() `createdAt`,UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`    \n" +
           "				from component_alias ca join component c on c.id = ca.componentID    \n" +
           "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;    \n" +
           "# Copy Data of `component_alternatepn`    \n" +
           "				INSERT INTO `component_alternatepn`    \n" +
           "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)    \n" +
           "				select    \n" +
           "				ca.`aliasgroupID` ,(select id from component where mfgcodeID = BuyByID and mfgPN = c.mfgPN and IFNULL(isDeleted,0) = 0) `componentID` , ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,     \n" +
           "				UserID `createdBy` , ca.`deletedAt` , ca.`deletedBy`    \n" +
           "				from component_alternatepn ca join component c on c.id = ca.componentID    \n" +
           "				where ca.componentID in (select id from component where mfgcodeID = BuyToID and IFNULL(ca.isDeleted,0) = 0);    \n" +
           "# Copy Data of `component_packagingalias`    \n" +
           "				INSERT INTO `component_packagingalias`    \n" +
           "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)    \n" +
           "				select    \n" +
           "				ca.`aliasgroupID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID`, ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,    \n" +
           "				UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`    \n" +
           "				from component_packagingalias ca join component c on c.id = ca.componentID    \n" +
           "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;    \n" +
           "# Copy Data of `component_rohsalternatepn`    \n" +
           "				INSERT INTO `component_rohsalternatepn`    \n" +
           "				(`aliasgroupID`, `componentID`, `isDeleted`, `createdAt`,  `createdBy`, `deletedAt`, `deletedBy`)    \n" +
           "				select    \n" +
           "				ca.`aliasgroupID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID`,ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`,ca.`deletedAt`,ca.`deletedBy`    \n" +
           "				from component_rohsalternatepn ca join component c on c.id = ca.componentID    \n" +
           "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;    \n" +
           "# Copy Data of `component_goodbadpartmapping`    \n" +
           "				INSERT INTO `component_goodbadpartmapping`    \n" +
           "				(`goodComponentID`, `badComponentID`, `customerID`, `reason`, `rfqAssyID`, `createdBy`, `createdAt`, `deletedBy`,  `deletedAt`, `isDeleted`)    \n" +
           "				select     \n" +
           "				 (IFNULL((select id from component where mfgPN = cG.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0), ca.goodComponentID)) `goodComponentID`,     \n" +
           "				 (IFNULL((select id from component where mfgPN = cB.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0), ca.badComponentID)) `badComponentID`,    \n" +
           "				 ca.`customerID`, ca.`reason`, ca.`rfqAssyID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`, ca.`deletedBy`, ca.`deletedAt`, ca.`isDeleted`    \n" +
           "				from component_goodbadpartmapping ca join component cB on cB.id = ca.badComponentID    \n" +
           "				join component cG on cG.id	= ca.goodComponentID    \n" +
           "				where ca.badComponentID in (select id from component where mfgcodeID = BuyToID) or ca.goodComponentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;    \n" +
           "# Copy Data of `component_standard_details`    \n" +
           "				INSERT INTO `component_standard_details`    \n" +
           "				(`standardClassID`, `componentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)    \n" +
           "				select    \n" +
           "				ca.`standardClassID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `componentID`, ca.`isDeleted`,    \n" +
           "				 UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`    \n" +
           "				from component_standard_details ca join component c on c.id = ca.componentID    \n" +
           "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;    \n" +
           "# Copy Data of `component_drivetools`    \n" +
           "				INSERT INTO `component_drivetools`    \n" +
           "				(`refComponentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`, `driveToolgroupID`)    \n" +
           "				select    \n" +
           "				(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `refComponentID`, ca.`isDeleted`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`, ca.`driveToolgroupID`    \n" +
           "				from component_drivetools ca join component c on c.id = ca.refComponentID    \n" +
           "				where ca.refComponentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;    \n" +
           "# Copy Data of `component_requiremapping_parts`    \n" +
           "				INSERT INTO `component_requiremapping_parts`    \n" +
           "				(`requiredMatingPartgroupID`, `refComponentID`, `isDeleted`, `createdAt`, `createdBy`, `deletedAt`, `deletedBy`)    \n" +
           "				select    \n" +
           "				ca.`requiredMatingPartgroupID`,(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(isDeleted,0) = 0) `refComponentID`, ca.`isDeleted`,    \n" +
           "				UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, ca.`deletedAt`, ca.`deletedBy`    \n" +
           "				from component_requiremapping_parts ca join component c on c.id = ca.refComponentID    \n" +
           "				where ca.refComponentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;    \n" +
           "# Copy data of `component_dataelement`    \n" +
           "				INSERT INTO `component_dataelement`    \n" +
           "				(`componentID`, `dataElementID`, `displayOrder`, `createdAt`, `deletedAt`, `createdBy`, `deletedBy`, `isDeleted`)    \n" +
           "				select    \n" +
           "				(select id from component where mfgPN = c.mfgPN and mfgcodeID = BuyByID and IFNULL(ca.isDeleted,0) = 0) `componentID`, ca.`dataElementID`, ca.`displayOrder`,    \n" +
           "				UTC_TIMESTAMP() `createdAt`, ca.`deletedAt`,UserID `createdBy`, ca.`deletedBy`, ca.`isDeleted`    \n" +
           "				from component_dataelement ca join component c on c.id = ca.componentID    \n" +
           "				where ca.componentID in (select id from component where mfgcodeID = BuyToID) and IFNULL(ca.isDeleted,0) = 0;    \n" +
           "  COMMIT;      \n" +
           "select * from component where mfgcodeID = BuyByID;    \n" +
           "    DROP TEMPORARY TABLE if exists Results;      \n" +
           "END;  \n" +
            /* **************************** Add Script Version -> 22-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (117,'1.00','V1','Copy Component - shirish '," + userid + ");"
            );
            break;
        case 117:
            allDbChangesArray.push(
            /* **************************** New Script -> 22-08-2018  *********************************** */
            "ALTER TABLE component ADD feature VARCHAR(100) NULL;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
"CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(                \n" +
"	IN ppageIndex INT(11),                \n" +
"	IN precordPerPage INT(11),                \n" +
"	IN pOrderBy VARCHAR(255),                \n" +
"	IN pWhereClause VARCHAR(21844),                \n" +
"	IN rfqAssyID INT(11),                \n" +
"	IN puserID INT (11)                \n" +
"    )  \n" +
"BEGIN                \n" +
"  \n" +
"	    DECLARE pOffset INT(11);                \n" +
"	    DECLARE rowNumWhere VARCHAR(255) ;                \n" +
"	    SET @SQLString = NULL;                \n" +
"	    SET SESSION group_concat_max_len = 150000;                    \n" +
"	    IF (pOrderBy IS NOT NULL) THEN                \n" +
"			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
"		ELSE                \n" +
"			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;                 \n" +
"		END IF;	                \n" +
"  \n" +
"  \n" +
"		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                \n" +
"			SET pWhereClause = '1=1' ;                \n" +
"		END IF;	                \n" +
"  \n" +
"		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
"			SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
"			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
"		ELSE	                \n" +
"			SET rowNumWhere = '';                \n" +
"		END IF;	                \n" +
"		SELECT                \n" +
"                     GROUP_CONCAT(DISTINCT                \n" +
"				CONCAT(                \n" +
"					'Max((IF(ra.requestQty = ''',                \n" +
"						ra.requestQty,                \n" +
"					''', rq.finalPrice, null))) AS ''',                \n" +
"						ra.requestQty,''''                \n" +
"					)                \n" +
"					) INTO @SQLString                \n" +
"		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                \n" +
"		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                \n" +
"		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                \n" +
"		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                \n" +
"  \n" +
"			IF(@SQLString IS NOT NULL) THEN                \n" +
"				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                \n" +
"					SELECT                 \n" +
"					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                  \n" +
"					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,            \n" +
"					(SELECT             \n" +
"                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                      \n" +
"                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN             \n" +
"                                     component c ON rla.mfgpnid=c.id             \n" +
"                                     LEFT JOIN mfgcodemst mg ON              \n" +
"                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                \n" +
"					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))AS mfgPn                 \n" +
"                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN             \n" +
"                                component c ON rla.mfgpnid=c.id                       \n" +
"                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                 \n" +
"					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl                \n" +
"					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                \n" +
"					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                \n" +
"					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                \n" +
"  \n" +
"			ELSE                \n" +
"				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                \n" +
"					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,             \n" +
"					 GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                      \n" +
"                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN             \n" +
"                                     component c ON rla.mfgpnid=c.id             \n" +
"                                     LEFT JOIN mfgcodemst mg ON              \n" +
"                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                  \n" +
"					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'', c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))AS mfgPn                 \n" +
"                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                 \n" +
"                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                \n" +
"					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                \n" +
"			END IF;                \n" +
"			PREPARE stmt FROM @SQLStatement;                \n" +
"			EXECUTE stmt;	                \n" +
"  \n" +
"  \n" +
"			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                \n" +
"			PREPARE query1 FROM @SQLStatement1;                \n" +
"			EXECUTE query1;                \n" +
"			DEALLOCATE PREPARE query1;                \n" +
"  \n" +
"  \n" +
"			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
"			PREPARE query2 FROM @SQLStatement2;                \n" +
"			EXECUTE query2;                \n" +
"			DEALLOCATE PREPARE query2;                \n" +
"  \n" +
"  \n" +
"  \n" +
"			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                \n" +
"			PREPARE query3 FROM @SQLStatement3;                \n" +
"			EXECUTE query3;                \n" +
"			DEALLOCATE PREPARE query3;                \n" +
"  \n" +
"			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.turnType,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                \n" +
"				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                \n" +
"				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                \n" +
"			PREPARE query4 FROM @SQLStatement4;                \n" +
"			EXECUTE query4;                \n" +
"			DEALLOCATE PREPARE query4;            \n" +
"  \n" +
"			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty, rq.finalPrice, unitPrice,supplier,rq.min,rq.mult, selectedMpn, selectionMode,qtyID,           \n" +
"					currentStock,          \n" +
"					leadTime,           \n" +
"					supplierStock,          \n" +
"					grossStock,              \n" +
"					selectedPIDCode,ct.qpa, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                     \n" +
"				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID             \n" +
"				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id             \n" +
"				WHERE ct.rfqAssyID=\",rfqAssyID);                    \n" +
"			PREPARE query5 FROM @SQLStatement5;                        \n" +
"			EXECUTE query5;                        \n" +
"			DEALLOCATE PREPARE query5;               \n" +
"  \n" +
"			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,         \n" +
"						(SUM(rq.finalPrice)) AS TotalExtendedPrice,         \n" +
"						(SUM(rq.unitPrice)) AS TotalUnitPrice,        \n" +
"						(SUM(rq.finalPrice)/ IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice      \n" +
"					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
"					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id            \n" +
"							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                    \n" +
"  \n" +
"			PREPARE query6 FROM @SQLStatement6;                        \n" +
"			EXECUTE query6;                        \n" +
"			DEALLOCATE PREPARE query6;                            \n" +
"  \n" +
"  \n" +
"			DROP TEMPORARY TABLE consolidatetemp;                  \n" +
"    END;  \n" +
"DROP TABLE IF EXISTS `rfq_assy_quotations_additionalcost`;  \n" +
"DROP TABLE IF EXISTS `rfq_assy_quotations`;  \n" +
"  \n" +
"  \n" +
"  \n" +
"CREATE TABLE `rfq_assy_quotations` (  \n" +
"  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
"  `rfqAssyID` int(11) NOT NULL,  \n" +
"  `rfqAssyQtyID` int(11) NOT NULL,  \n" +
"  `rfqAssyQtyTurnTimeID` int(11) NOT NULL,  \n" +
"  `requestedQty` int(11) DEFAULT NULL,  \n" +
"  `turnTime` int(11) DEFAULT NULL,  \n" +
"  `timeType` varchar(1) DEFAULT NULL,  \n" +
"  `unitPrice` decimal(16,6) DEFAULT NULL,  \n" +
"  `materialCost` decimal(16,6) DEFAULT NULL,  \n" +
"  `total` decimal(16,6) DEFAULT NULL,  \n" +
"  `isDeleted` tinyint(1) DEFAULT '0',  \n" +
"  `createdBy` varchar(255) NOT NULL,  \n" +
"  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
"  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
"  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
"  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
"  `deletedAt` datetime DEFAULT NULL,  \n" +
"  `excessQtyTotalPrice` decimal(16,6) DEFAULT NULL,  \n" +
"  PRIMARY KEY (`id`),  \n" +
"  KEY `FK_rfq_assy_quotations_rfqAssyID` (`rfqAssyID`),  \n" +
"  KEY `FK_rfq_assy_quotations_rfqAssyQtyID` (`rfqAssyQtyID`),  \n" +
"  KEY `FK_rfq_assy_quotations_rfqAssyQtyTurnTimeID` (`rfqAssyQtyTurnTimeID`),  \n" +
"  CONSTRAINT `FK_rfq_assy_quotations_rfqAssyID` FOREIGN KEY (`rfqAssyID`) REFERENCES `rfq_assemblies` (`id`),  \n" +
"  CONSTRAINT `FK_rfq_assy_quotations_rfqAssyQtyID` FOREIGN KEY (`rfqAssyQtyID`) REFERENCES `rfq_assy_quantity` (`id`),  \n" +
"  CONSTRAINT `FK_rfq_assy_quotations_rfqAssyQtyTurnTimeID` FOREIGN KEY (`rfqAssyQtyTurnTimeID`) REFERENCES `rfq_assy_quantity_turn_time` (`id`)  \n" +
") ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;  \n" +

"CREATE TABLE `rfq_assy_quotations_additionalcost` (  \n" +
"  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
"  `rfqAssyQuoteID` int(11) NOT NULL,  \n" +
"  `quoteChargeDynamicFieldID` int(11) NOT NULL,  \n" +
"  `amount` decimal(16,6) DEFAULT NULL,  \n" +
"  `percentage` decimal(16,6) DEFAULT NULL,  \n" +
"  `margin` decimal(16,6) DEFAULT NULL,  \n" +
"  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
"  `createdBy` varchar(255) NOT NULL,  \n" +
"  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
"  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
"  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
"  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
"  `deletedAt` datetime DEFAULT NULL,  \n" +
"  PRIMARY KEY (`id`),  \n" +
"  KEY `FK_rfq_assy_quotations_additionalcost_rfqAssyQuoteID` (`rfqAssyQuoteID`),  \n" +
"  KEY `FK_rfq_assy_quotations_additionalcost_quoteChargeDynamicFieldID` (`quoteChargeDynamicFieldID`),  \n" +
"  CONSTRAINT `FK_rfq_assy_quotations_additionalcost_quoteChargeDynamicFieldID` FOREIGN KEY (`quoteChargeDynamicFieldID`) REFERENCES `quotecharges_dynamic_fields_mst` (`id`),  \n" +
"  CONSTRAINT `FK_rfq_assy_quotations_additionalcost_rfqAssyQuoteID` FOREIGN KEY (`rfqAssyQuoteID`) REFERENCES `rfq_assy_quotations` (`id`)  \n" +
") ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;  \n" +

            /* **************************** Add Script Version -> 22-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (118,'1.00','V1',' Component feature,summary quote-Champak'," + userid + ");"
            );
            break;
        case 118:
            allDbChangesArray.push(
            /* **************************** New Script -> 22-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMList`;  \n" +
               "CREATE PROCEDURE `Sproc_GetAssyBOMList`(        \n" +
               "	IN prfqAssyID INT  \n" +
               ")  \n" +
               "BEGIN        \n" +
               "  \n" +
               "#			CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
               "			select bm.id,bm.bomNumber, sbm.rfqAssyBomID, sbm.parentRFQAssyBOMID, rl.level, ra.assemblyName from rfq_assy_bom bm  \n" +
               "			left outer join rfq_assy_bom_relationship sbm on sbm.rfqAssyBomID = bm.id and sbm.isDeleted = 0  \n" +
               "			left outer join rfq_lineitems rl on rl.id = sbm.parentLineitemsID and rl.isDeleted = 0  \n" +
               "            left outer join rfq_assemblies ra on ra.id = bm.reqAssyID  \n" +
               "			where bm.reqAssyID = prfqAssyID and bm.isDeleted = 0;  \n" +
               "  \n" +
               "	#DROP TEMPORARY TABLE Results;        \n" +
               "    END;  \n" +
            /* **************************** Add Script Version -> 22-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (119,'1.00','V1','get sub Bom list - shirish '," + userid + ");"
            );
            break;
        case 119:
            allDbChangesArray.push(
            /* **************************** New Script -> 22-08-2018  *********************************** */
           "DROP PROCEDURE IF EXISTS `Sproc_StopPricingRequests` ;  \n" +
            "CREATE PROCEDURE `Sproc_StopPricingRequests`(      \n" +
            "	IN prfqAssyID INT(11),    \n" +
            "	IN puserID INT,  \n" +
            "	IN pmessage VARCHAR(255)  \n" +
            ")  \n" +
            "BEGIN      \n" +
            "	# udpate lineitem pricing status      \n" +
            "		# 0 - SendRequest, 1 - NotPricing, 2 - Success      \n" +
            "		UPDATE `rfq_lineitem_autopricingstatus`      \n" +
            "			SET `status` = 1,  \n" +
            "				`msg`= pmessage  \n" +
            "			WHERE rfqAssyID=prfqAssyID     \n" +
            "			AND `status`=0 AND userID=puserID;      \n" +
            "  \n" +
            "	# udpate assembly pricing status for all       \n" +
            "		UPDATE `rfq_assy_autopricingstatus`      \n" +
            "			SET `status` = 1,  \n" +
            "				`msg`=pmessage       \n" +
            "			WHERE rfqAssyID=prfqAssyID    \n" +
            "			AND `status`=0 AND userID=puserID;      \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 22-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (120,'1.00','V1','Stop Pricing SP updated to Error Status - Vaibahv'," + userid + ");"
            );
            break;
        case 120:
            allDbChangesArray.push(
            /* **************************** New Script -> 22-08-2018  *********************************** */
           "DROP TABLE IF EXISTS `cost_category`;  \n" +
            "  \n" +
            "  \n" +
            "CREATE TABLE `cost_category` (  \n" +
            "  `id` INT(11) NOT NULL AUTO_INCREMENT,  \n" +
            "  `category` VARCHAR(100) NOT NULL,  \n" +
            "  `from` DECIMAL(18,4) NOT NULL,  \n" +
            "  `to` DECIMAL(18,4) NOT NULL,  \n" +
            "  `createdAt` DATETIME NOT NULL,  \n" +
            "  `updatedAt` DATETIME DEFAULT NULL,  \n" +
            "  `deletedAt` DATETIME DEFAULT NULL,  \n" +
            "  `createdBy` VARCHAR(255) NOT NULL,  \n" +
            "  `updatedBy` VARCHAR(255) DEFAULT NULL,  \n" +
            "  `deletedBy` VARCHAR(255) DEFAULT NULL,  \n" +
            "  `isDeleted` TINYINT(1) DEFAULT NULL,  \n" +
            "  PRIMARY KEY (`id`)  \n" +
            ") ENGINE=INNODB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;  \n" +
             /* **************************** New Script -> 22-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCostCategory` ;  \n" +
            "CREATE PROCEDURE `Sproc_RetrieveCostCategory`(      \n" +
            "	IN ppageIndex INT(11),      \n" +
            "	IN precordPerPage INT(11),      \n" +
            "	IN pOrderBy VARCHAR(255),      \n" +
            "	IN pWhereClause VARCHAR(21844)      \n" +
            "	)  \n" +
            "BEGIN      \n" +
            "  \n" +
            "		DECLARE pOffset INT(11);      \n" +
            "		DECLARE rowNumWhere VARCHAR(255) ;      \n" +
            "  \n" +
            "  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
            "		 SELECT cc.id, cc.category, cc.from, cc.to, cc.isDeleted, cc.createdBy, cc.updatedBy,cc.deletedBy, cc.createdAt, cc.updatedAt,cc.deletedAt  \n" +
            "		FROM `cost_category` AS cc       \n" +
            "		WHERE cc.`deletedAt` IS NULL      \n" +
            "		;      \n" +
            "  \n" +
            "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"category ASC\") ;      \n" +
            "		ELSE      \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
            "		END IF;	      \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
            "			SET pWhereClause = '1=1' ;      \n" +
            "		END IF;	      \n" +
            "  \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
            "		ELSE	      \n" +
            "			SET rowNumWhere = '';      \n" +
            "		END IF;	      \n" +
            "  \n" +
            "		/* to get total count of rows */      \n" +
            "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );      \n" +
            "		PREPARE query1 FROM @SQLStatement1;      \n" +
            "		EXECUTE query1;      \n" +
            "		DEALLOCATE PREPARE query1;      \n" +
            "  \n" +
            "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
            "		PREPARE query2 FROM @SQLStatement2;      \n" +
            "		EXECUTE query2;      \n" +
            "		DEALLOCATE PREPARE query2;      \n" +
            "  \n" +
            "		DROP TEMPORARY TABLE Results;      \n" +
            "  \n" +
            "    END;  \n" +
             /* **************************** New Script -> 22-08-2018  *********************************** */
             "INSERT INTO `page_detail`  \n" +
            "            (`pageName`,  \n" +
            "             `RO`,  \n" +
            "             `RW`,  \n" +
            "             `menuRoute`,  \n" +
            "             `pageRoute`,  \n" +
            "             `pageURL`,  \n" +
            "             `menuName`,  \n" +
            "             `parentPageRoute`,  \n" +
            "             `parentPageID`,  \n" +
            "             `hasChild`,  \n" +
            "             `orderBy`,  \n" +
            "             `tabLevel`,  \n" +
            "             `iconClass`,  \n" +
            "             `isActive`,  \n" +
            "             `createdAt`,  \n" +
            "             `updatedAt`,  \n" +
            "             `deletedAt`,  \n" +
            "             `createdBy`,  \n" +
            "             `updatedBy`,  \n" +
            "             `deletedBy`,  \n" +
            "             `isDeleted`,  \n" +
            "             `parentTabID`)  \n" +
            "VALUES ('Cost Category',  \n" +
            "        '0',  \n" +
            "        '0',  \n" +
            "        'admin.rfqsetting.costcategory',  \n" +
            "        'app.costcategory',  \n" +
            "        'rfqsetting/costcategory',  \n" +
            "        'Cost Category',  \n" +
            "        'NULL',  \n" +
            "        (SELECT a.pageID FROM page_detail a WHERE a.pagename = 'RFQ Setting'),  \n" +
            "        '0',  \n" +
            "        '9',  \n" +
            "        '2',  \n" +
            "        'mdi mdi-teach',  \n" +
            "        '1',  \n" +
            "        '2018-08-22 12:23:55',  \n" +
            "        NULL,  \n" +
            "        NULL,  \n" +
            "        '1',  \n" +
            "        NULL,  \n" +
            "        NULL,  \n" +
            "        '0',  \n" +
            "        NULL);  \n" +
             /* **************************** New Script -> 22-08-2018  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
            "CREATE PROCEDURE `Sproc_checkDelete`(                        \n" +
            "	IN tableName VARCHAR(255),                        \n" +
            "	IN IDs LONGTEXT,                        \n" +
            "	IN deletedBy INT,                        \n" +
            "	IN entityID VARCHAR(255),                        \n" +
            "	IN refrenceIDs LONGTEXT                        \n" +
            "    )  \n" +
            "BEGIN                        \n" +
            "	DECLARE vWoID1 INT(11);                        \n" +
            "	DECLARE vOpID1 INT(11);                        \n" +
            "	DECLARE vSerialNo1 VARCHAR(50);                        \n" +
            "	DECLARE vProdStatus1 VARCHAR(5);                        \n" +
            "	DECLARE vWoTransID1 INT(11);                        \n" +
            "	DECLARE vQty1 INT(11);                        \n" +
            "	DECLARE vOpID2 INT(11);                        \n" +
            "	DECLARE vProdstatus2 VARCHAR(5);                        \n" +
            "  \n" +
            "IF tableName='employees' THEN                        \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)                        \n" +
            "	   UNION ALL                                              \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)                        \n" +
            "           UNION ALL                         \n" +
            "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND (er.finalStatusInit IN(',IDs,') OR er.initiateBy IN(',IDs,')) LIMIT 1)                        \n" +
            "	   UNION ALL                        \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)                        \n" +
            "	UNION ALL                        \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)                        \n" +
            "	  UNION ALL                        \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)                        \n" +
            "	  UNION ALL                        \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)                        \n" +
            "	  UNION ALL                        \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)                        \n" +
            "	  UNION ALL                        \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)                        \n" +
            "	 UNION ALL                        \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)                        \n" +
            "	  UNION ALL                        \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND (wr.reqGenEmployeeID IN(',IDs,') OR wr.woAuthorID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                        \n" +
            "	  UNION ALL                         \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND (wr.commentemployeeID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                        \n" +
            "	  UNION ALL                        \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND (wr.employeeID IN(',IDs,') OR wr.requstedEmployeeID IN(',IDs,')) LIMIT 1)                         \n" +
            "	  UNION ALL                            \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE (wt.checkinEmployeeID IN(',IDs,') OR wt.checkoutEmployeeID IN(',IDs,')) LIMIT 1)                        \n" +
            "	  UNION ALL                           \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)                        \n" +
            "	 UNION ALL                         \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)                        \n" +
            "	 UNION ALL                         \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)                        \n" +
            "	 UNION ALL                         \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND (wthu.holdEmployeeId IN(',IDs,') OR wthu.unHoldEmployeeId IN(',IDs,')) LIMIT 1)                        \n" +
            "	UNION ALL                         \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)                        \n" +
            "	 UNION ALL                         \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)                        \n" +
            "	 UNION ALL                         \n" +
            "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)                        \n" +
            "	 UNION ALL                         \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND (holdEmployeeId IN(',IDs,') OR unHoldEmployeeId IN(',IDs,')) LIMIT 1)                        \n" +
            "  \n" +
            "        ) q');                        \n" +
            "    PREPARE stmt FROM @SQL;                        \n" +
            "    EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempEmp)=0 THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');                        \n" +
            "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');                        \n" +
            "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');                        \n" +
            "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                        \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			PREPARE stmt2 FROM @SQL2;                        \n" +
            "			PREPARE stmt3 FROM @SQL3;                        \n" +
            "			PREPARE stmt4 FROM @SQL4;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "			EXECUTE stmt2;                        \n" +
            "			EXECUTE stmt3;                        \n" +
            "			EXECUTE stmt4;                        \n" +
            "			SELECT                         \n" +
            "    *                        \n" +
            "FROM                        \n" +
            "    tempEmp;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempEmp;                        \n" +
            "		END IF;                        \n" +
            "  \n" +
            "    DROP TABLE tempEmp;                        \n" +
            "END IF;                        \n" +
            "IF tableName='eco_type_category' THEN                        \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                         \n" +
            "	  ) q');                        \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT                         \n" +
            "    *                        \n" +
            "FROM                        \n" +
            "    tempEcoTypeCategory;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempEcoTypeCategory;                        \n" +
            "		END IF;                        \n" +
            "    DROP TABLE tempEcoTypeCategory;                          \n" +
            "END IF;                        \n" +
            "IF tableName='eco_type_values' THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)                        \n" +
            "	  ) q');                        \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT                         \n" +
            "    *                        \n" +
            "FROM                        \n" +
            "    tempEcoTypeValues;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempEcoTypeValues;                        \n" +
            "		END IF;                        \n" +
            "    DROP TABLE tempEcoTypeValues;                          \n" +
            "END IF;                        \n" +
            "IF tableName='customers' THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                         \n" +
            "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                         \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                        \n" +
            "	  ) q');                        \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                        \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                        \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			PREPARE stmt2 FROM @SQL2;                        \n" +
            "			PREPARE stmt3 FROM @SQL3;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "			EXECUTE stmt2;                        \n" +
            "			EXECUTE stmt3;                        \n" +
            "  \n" +
            "			SELECT                         \n" +
            "    *                        \n" +
            "FROM                        \n" +
            "    tempCustomers;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempCustomers;                        \n" +
            "		END IF;                        \n" +
            "    DROP TABLE tempCustomers;                          \n" +
            "END IF;                        \n" +
            "IF tableName='certificate_standards' THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                        \n" +
            "  \n" +
            "	  ) q');                        \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		                        \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                        \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			PREPARE stmt2 FROM @SQL2;                        \n" +
            "			PREPARE stmt3 FROM @SQL3;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "			EXECUTE stmt2;                        \n" +
            "			EXECUTE stmt3;                        \n" +
            "  \n" +
            "			SELECT * FROM tempCertificateStandards;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempCertificateStandards;                        \n" +
            "		END IF;                        \n" +
            "    DROP TABLE tempCertificateStandards;                          \n" +
            "END IF;                        \n" +
            "IF tableName='department' THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                        \n" +
            "  \n" +
            "	  ) q');                        \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		                        \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                        \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			PREPARE stmt2 FROM @SQL2;                        \n" +
            "			PREPARE stmt3 FROM @SQL3;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "			EXECUTE stmt2;                        \n" +
            "			EXECUTE stmt3;                        \n" +
            "  \n" +
            "			SELECT * FROM tempDepartment;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempDepartment;                        \n" +
            "		END IF;                        \n" +
            "    DROP TABLE tempDepartment;                          \n" +
            "END IF;                        \n" +
            "IF tableName='genericcategory' THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND (eqpGroupID IN(',IDs,') OR eqpSubGroupID IN(',IDs,') OR eqpTypeID IN(',IDs,') OR eqpPossessionID IN(',IDs,') OR eqpOwnershipTypeID IN(',IDs,') OR locationTypeID IN(',IDs,'))   LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)                        \n" +
            "	     UNION ALL                      \n" +
            "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)                        \n" +
            "	  ) q');                        \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT                         \n" +
            "    *                        \n" +
            "FROM                        \n" +
            "    tempGenericCategory;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempGenericCategory;                        \n" +
            "		END IF;                        \n" +
            "    DROP TABLE tempGenericCategory;                          \n" +
            "END IF;                        \n" +
            "IF tableName='equipment' THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                        \n" +
            "  \n" +
            "	  ) q');                        \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN                        \n" +
            "			IF entityID IS NOT NULL THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		                        \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                        \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			PREPARE stmt2 FROM @SQL2;                        \n" +
            "			PREPARE stmt3 FROM @SQL3;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "			EXECUTE stmt2;                        \n" +
            "			EXECUTE stmt3;                        \n" +
            "  \n" +
            "			ELSE                        \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "			END IF;                        \n" +
            "  \n" +
            "			SELECT * FROM tempEquipment;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempEquipment;                        \n" +
            "		END IF;                        \n" +
            "    DROP TABLE tempEquipment;                          \n" +
            "END IF;                        \n" +
            "IF tableName='parts' THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                        \n" +
            "	  ) q');                        \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempParts)=0 THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempParts;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempParts;                        \n" +
            "		END IF;                        \n" +
            "    DROP TABLE tempParts;                          \n" +
            "END IF;                        \n" +
            "IF tableName='master_templates' THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)                        \n" +
            "	  ) q');                        \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempMasterTemplate;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempMasterTemplate;                        \n" +
            "		END IF;                        \n" +
            "    DROP TABLE tempMasterTemplate;                          \n" +
            "END IF;                        \n" +
            "IF tableName='operations' THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                        \n" +
            "  \n" +
            "	  ) q');                        \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempOperations)=0 THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		                        \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                        \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			PREPARE stmt2 FROM @SQL2;                        \n" +
            "			PREPARE stmt3 FROM @SQL3;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "			EXECUTE stmt2;                        \n" +
            "			EXECUTE stmt3;                        \n" +
            "  \n" +
            "			SELECT * FROM tempOperations;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempOperations;                        \n" +
            "		END IF;                        \n" +
            "    DROP TABLE tempOperations;                          \n" +
            "END IF;                        \n" +
            "IF tableName='workorder' THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL		                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                        \n" +
            "  \n" +
            "	  ) q');                        \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN                        \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete work order */                        \n" +
            "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;                         \n" +
            "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");                        \n" +
            "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			                        \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			                        \n" +
            "			/* [E] - Add Time line log for delete work order */			                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                        \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                        \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                        \n" +
            "			SET @SQl4 = CONCAT('update workorder_certification set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			PREPARE stmt2 FROM @SQL2;                        \n" +
            "			PREPARE stmt3 FROM @SQL3;                        \n" +
            "			PREPARE stmt4 FROM @SQL4;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "			EXECUTE stmt2;                        \n" +
            "			EXECUTE stmt3;                        \n" +
            "			EXECUTE stmt4;                        \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorder;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempWorkorder;                        \n" +
            "		END IF;                        \n" +
            "    DROP TABLE tempWorkorder;                          \n" +
            "END IF;                        \n" +
            "IF tableName='roles' THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                        \n" +
            "         UNION ALL                        \n" +
            "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                        \n" +
            "         UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');                        \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempRoles)=0 THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempRoles;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempRoles;                        \n" +
            "		END IF;                        \n" +
            "    DROP TABLE tempRoles;                          \n" +
            "END IF;                        \n" +
            "IF tableName='standard_class' THEN                        \n" +
            "  \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND FIND_IN_SET(',IDs,',classIDs) LIMIT 1)                        \n" +
            "	  ) q');                        \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                  \n" +
            "  \n" +
            "  \n" +
            "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');    \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempStandardClass;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempStandardClass;                        \n" +
            "		END IF;                        \n" +
            "    DROP TABLE tempStandardClass;                          \n" +
            "END IF;                        \n" +
            "IF tableName='dataelement' THEN                        \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		                        \n" +
            "		UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                        \n" +
            "	  ) q');                        \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt2 FROM @SQL2;                        \n" +
            "			EXECUTE stmt2;                        \n" +
            "  \n" +
            "  \n" +
            "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)                        \n" +
            "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated                        \n" +
            "			FROM dataelement dl WHERE dl.dataElementID = IDs;                        \n" +
            "  \n" +
            "  \n" +
            "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */                        \n" +
            "  \n" +
            "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                         \n" +
            "							where type IN(''',IDs,''') and deletedAt IS NULL ');		                        \n" +
            "				PREPARE stmt3 FROM @SQL3;                        \n" +
            "				EXECUTE stmt3;                        \n" +
            "  \n" +
            "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */                        \n" +
            "  \n" +
            "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */                        \n" +
            "  \n" +
            "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs                         \n" +
            "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN                        \n" +
            "  \n" +
            "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                         \n" +
            "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'                         \n" +
            "								AND isAutoIncrement = 1 AND deletedAt IS NULL)                        \n" +
            "							 and deletedAt IS NULL ');		                        \n" +
            "					     PREPARE stmt4 FROM @SQL4;                        \n" +
            "				             EXECUTE stmt4;                        \n" +
            "					END IF;	                        \n" +
            "				END IF;                        \n" +
            "  \n" +
            "  \n" +
            "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN                        \n" +
            "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)                         \n" +
            "						    AND deletedAt IS NULL');		                        \n" +
            "				PREPARE stmt5 FROM @SQL5;                        \n" +
            "				EXECUTE stmt5;                        \n" +
            "  \n" +
            "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                         \n" +
            "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		                        \n" +
            "				PREPARE stmt6 FROM @SQL6;                        \n" +
            "				EXECUTE stmt6;                        \n" +
            "  \n" +
            "  \n" +
            "			END IF;                        \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM tempDataElement;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempDataElement;                        \n" +
            "		END IF;                        \n" +
            "    DROP TABLE tempDataElement;                          \n" +
            "  \n" +
            "END IF;                        \n" +
            "IF tableName='workorder_preprogcomp' THEN                        \n" +
            "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                        \n" +
            "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg                        \n" +
            "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND                        \n" +
            "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                        \n" +
            "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "    SELECT * FROM  tempComponent;                        \n" +
            "    SELECT TotalCount FROM  tempComponent;                        \n" +
            "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			                        \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete pre program component */                  \n" +
            "			SELECT partNumber,(SELECT woNumber FROM workorder WHERE woID = woppc.woID),                \n" +
            "				(SELECT opName FROM workorder_operation WHERE woOPID = refStkWOOPID)                \n" +
            "			    INTO @lvPartNumber,@lvWoNumber,@lvOpName                \n" +
            "			FROM workorder_preprogcomp woppc                  \n" +
            "			WHERE woPreProgCompID = IDs  AND deletedAt IS NULL;                   \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Preprogram component deleted from work order\");                  \n" +
            "			SET @lvEventDescription = CONCAT(\"Preprogram component \\\"\",@lvPartNumber,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                  \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.14,NULL,deletedBy,3);  /* 3 = DELETE */                  \n" +
            "			/* [E] - Add Time line log for delete pre program component */                 \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt2 FROM @SQL2;                        \n" +
            "			EXECUTE stmt2;                        \n" +
            "  \n" +
            "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where                         \n" +
            "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                        \n" +
            "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt3 FROM @SQL3;                        \n" +
            "			EXECUTE stmt3;                        \n" +
            "		SELECT                         \n" +
            "			*                        \n" +
            "		FROM                        \n" +
            "			tempComponent;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempComponent;                        \n" +
            "		END IF;                        \n" +
            "    DROP TABLE tempComponent;                          \n" +
            "END IF;                        \n" +
            "IF tableName='component' THEN                        \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                        \n" +
            "		 UNION ALL                        \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                        \n" +
            "  \n" +
            "	  ) q');                        \n" +
            "	  PREPARE stmt FROM @SQL;                        \n" +
            "	   EXECUTE stmt;                        \n" +
            "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN                        \n" +
            "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempComponent;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempComponent;                        \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempComponent;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"workorder_cluster\" THEN                         \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)                        \n" +
            "		      ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN                        \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete cluster */                        \n" +
            "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster                        \n" +
            "		WHERE clusterID = IDs AND deletedAt IS NULL;                        \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder                        \n" +
            "		WHERE woID = @lvWoID AND deletedAt IS NULL ;                        \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");                        \n" +
            "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                        \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		                        \n" +
            "		/* [E] - Add Time line log for delete cluster */                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderCluster;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempWorkorderCluster;                        \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempWorkorderCluster;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"workorder_operation\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)                        \n" +
            "			 UNION ALL                        \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		                         \n" +
            "		      ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN                        \n" +
            "			 /* [S] - Add Time line log for delete work order operation */                        \n" +
            "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName                        \n" +
            "			FROM workorder_operation                         \n" +
            "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;                         \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                        \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");                        \n" +
            "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                        \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		                        \n" +
            "			/* [E] - Add Time line log for delete work order operation */                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                        \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                        \n" +
            "		SET @SQl3 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                        \n" +
            "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                        \n" +
            "		SET @SQl5 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                        \n" +
            "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                        \n" +
            "		SET @SQl7 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		                        \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                        \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;                        \n" +
            "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		                        \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                        \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			PREPARE stmt2 FROM @SQL2;                        \n" +
            "			PREPARE stmt3 FROM @SQL3;                        \n" +
            "			PREPARE stmt4 FROM @SQL4;                        \n" +
            "			PREPARE stmt5 FROM @SQL5;                        \n" +
            "			PREPARE stmt6 FROM @SQL6;                        \n" +
            "			PREPARE stmt7 FROM @SQl7;                        \n" +
            "			PREPARE stmt8 FROM @SQl7;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "			EXECUTE stmt2;                        \n" +
            "			EXECUTE stmt3;                        \n" +
            "			EXECUTE stmt4;                        \n" +
            "			EXECUTE stmt5;                        \n" +
            "			EXECUTE stmt6;                        \n" +
            "			EXECUTE stmt7;                        \n" +
            "			EXECUTE stmt8;                        \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperation;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempWorkorderOperation;                        \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempWorkorderOperation;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"workorder_operation_part\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                        \n" +
            "		      ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN                        \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete parts from work order */                        \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                        \n" +
            "		FROM workorder_operation                         \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                         \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                        \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts                        \n" +
            "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;                         \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");                        \n" +
            "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                        \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */                        \n" +
            "		/* [E] - Add Time line log for delete parts from work order */                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderPart;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempWorkorderPart;                        \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempWorkorderPart;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"workorder_operation_equipment\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                        \n" +
            "		      ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN                        \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Equipment from work order */                        \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                        \n" +
            "		FROM workorder_operation                         \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                         \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	                        \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment                        \n" +
            "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;                         \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");                        \n" +
            "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                        \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                        \n" +
            "		/* [E] -  Add Time line log for delete Equipment from work order */                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');                        \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			PREPARE stmt2 FROM @SQL2;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "			EXECUTE stmt2;                        \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEquipment;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempWorkorderEquipment;                        \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempWorkorderEquipment;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"workorder_operation_employee\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                        \n" +
            "		      ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN                        \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Employees from work order */                        \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                        \n" +
            "		FROM workorder_operation                         \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                         \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                        \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees                        \n" +
            "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;                         \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");                        \n" +
            "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                        \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                        \n" +
            "		/* [E] -  Add Time line log for delete Employee from work order */                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEmployee;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempWorkorderEmployee;                        \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempWorkorderEmployee;                        \n" +
            "  \n" +
            "END IF;                        \n" +
            "IF tableName=\"workorder_operation_cluster\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)                        \n" +
            "		      ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN                        \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete operations from cluster */                        \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                        \n" +
            "		FROM workorder_operation                         \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                         \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                        \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster                        \n" +
            "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;                         \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");                        \n" +
            "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                        \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                        \n" +
            "		/* [E] -  Add Time line log for delete operations from cluster */		                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                        \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                        \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;                        \n" +
            "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		                        \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                        \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			PREPARE stmt2 FROM @SQL2;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "			EXECUTE stmt2;                        \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempWorkorderOperationCluster;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"entity\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                        \n" +
            "		     UNION ALL                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                        \n" +
            "		     UNION ALL                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                        \n" +
            "		    UNION ALL                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                        \n" +
            "		      ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempEntity)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempEntity;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempEntity;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempEntity;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"salesordermst\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)                        \n" +
            "		      ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete sales order mst */ 	                \n" +
            "			SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber                \n" +
            "			FROM salesordermst                \n" +
            "			WHERE FIND_IN_SET(id,IDs);                \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");                  \n" +
            "			SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                  \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */                  \n" +
            "			/* [E] - Add Time line log for delete sales order mst */	                \n" +
            "  \n" +
            "			SELECT * FROM tempSalesOrderMst;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempSalesOrderMst;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempSalesOrderMst;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"mfgcodemst\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)                        \n" +
            "		      ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempMFGCodeMst;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempMFGCodeMst;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempMFGCodeMst;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"dataelement_transactionvalues_manual\" THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                         \n" +
            "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)                        \n" +
            "				and deletedAt IS NULL');		                        \n" +
            "			PREPARE stmt2 FROM @SQL2;                        \n" +
            "			EXECUTE stmt2;                        \n" +
            "  \n" +
            "  \n" +
            "END IF;                        \n" +
            "IF tableName=\"shippedassembly\" THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                \n" +
            "			/* [S] - Add Time line log for delete shipped assembly */                 \n" +
            "			SELECT GROUP_CONCAT(shippedqty) , workorderID  INTO @lvShippedqty,@lvWoID                \n" +
            "			FROM shippedassembly                \n" +
            "			WHERE FIND_IN_SET(id,IDs);                \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID ;                \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Shipped assembly deleted\");                  \n" +
            "			SET @lvEventDescription = CONCAT(\"Shipped assembly for workorder \\\"\",@lvWoNumber,\"\\\" & quantity \\\"\",@lvShippedqty ,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                  \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,9,NULL,deletedBy,3);  /* 3 = DELETE */                  \n" +
            "			/* [E] - Add Time line log for delete shipped assembly */ 		                \n" +
            "  \n" +
            "END IF;                        \n" +
            "IF tableName=\"assemblymst\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                        \n" +
            "		     UNION ALL                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                        \n" +
            "		     UNION ALL                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                        \n" +
            "		     UNION ALL                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                        \n" +
            "		    UNION ALL                        \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)                        \n" +
            "		      ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempassemblymst;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempassemblymst;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempassemblymst;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"assembly_revisionmst\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND (fromRevisionID IN(',IDs,') OR toRevisionID IN(',IDs,'))  LIMIT 1)                        \n" +
            "		     UNION ALL                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                        \n" +
            "		     UNION ALL                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                        \n" +
            "		     UNION ALL                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                        \n" +
            "		    UNION ALL                        \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)                        \n" +
            "		      ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempassembly_revisionmst;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempassembly_revisionmst;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempassembly_revisionmst;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"workorder_trans_serialno\" THEN                        \n" +
            "  \n" +
            "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1                         \n" +
            "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;                        \n" +
            "  \n" +
            "  \n" +
            "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)                        \n" +
            "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)                         \n" +
            "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1                         \n" +
            "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;                        \n" +
            "  \n" +
            "	/* condition to check total serials of type greater than actual production qty */                        \n" +
            "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1                        \n" +
            "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)                         \n" +
            "		> IFNULL(vQty1,0)) THEN                        \n" +
            "  \n" +
            "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */                        \n" +
            "		IF(vQty1 IS NULL OR vQty1 = 0) THEN                         \n" +
            "  \n" +
            "			/* condition to check curr opis and status match with given delete serial */                        \n" +
            "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1                        \n" +
            "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN                        \n" +
            "  \n" +
            "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                        \n" +
            "				WHERE woTransSerialID = IDs;	                        \n" +
            "  \n" +
            "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                         \n" +
            "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                        \n" +
            "				ORDER BY woTransSerialID DESC LIMIT 1;                        \n" +
            "  \n" +
            "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                        \n" +
            "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	                  \n" +
            "				/* [S] - Add Time line log for delete production serial from work order operation */ 	                \n" +
            "				SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");                  \n" +
            "				SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                  \n" +
            "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                  \n" +
            "				/* [E] - Add Time line log for delete production serial from work order operation */ 				                \n" +
            "  \n" +
            "			ELSE                         \n" +
            "				SELECT 'not allowed';                        \n" +
            "			END IF;                        \n" +
            "  \n" +
            "  \n" +
            "		ELSE                         \n" +
            "  \n" +
            "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                        \n" +
            "			WHERE woTransSerialID = IDs;	                        \n" +
            "  \n" +
            "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                         \n" +
            "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                        \n" +
            "			ORDER BY woTransSerialID DESC LIMIT 1;                        \n" +
            "  \n" +
            "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                        \n" +
            "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;                \n" +
            "			/* [S] - Add Time line log for delete production serial from work order operation */ 	                \n" +
            "			SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");                  \n" +
            "			SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                  \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                  \n" +
            "			/* [E] - Add Time line log for delete production serial from work order operation */                    \n" +
            "  \n" +
            "		END IF;	                        \n" +
            "  \n" +
            "  \n" +
            "	ELSE                         \n" +
            "		SELECT 'not allowed';		                        \n" +
            "	END IF;	                        \n" +
            "  \n" +
            "  \n" +
            "END IF;                        \n" +
            "IF tableName=\"br_label_template\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)                        \n" +
            "		      ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempbr_label_template;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempbr_label_template;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempbr_label_template;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"measurement_types\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)                        \n" +
            "		     UNION ALL                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempMeasurement_types;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempMeasurement_types;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempMeasurement_types;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"uoms\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg                         \n" +
            "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)                        \n" +
            "            UNION ALL                        \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg                         \n" +
            "            FROM unit_detail_formula WHERE deletedAt IS NULL AND (unitID IN (',IDs,')  or toUnitID IN (',IDs,')) LIMIT 1)                \n" +
            "              UNION ALL                      \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND uom IN(',IDs,') LIMIT 1)) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempUOMs;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempUOMs;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempUOMs;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"jobtypes\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                         \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempJobTypess;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempJobTypess;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempJobTypess;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"ordertype\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                         \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempOrderTypes;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempOrderTypes;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempOrderTypes;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"reasonmst\" THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "END IF;                        \n" +
            "IF tableName='component_sid_stock' THEN	                        \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)                        \n" +
            "			UNION ALL                        \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		                            \n" +
            "		    ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete component sid stock (receiving material) */ 	                \n" +
            "			SELECT GROUP_CONCAT(uid) INTO @lvUID  FROM component_sid_stock                \n" +
            "			WHERE FIND_IN_SET(id,IDs);	                \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Receiving material(s) deleted\");                  \n" +
            "			SET @lvEventDescription = CONCAT(\"Receiving material(s) of UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                  \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7,NULL,deletedBy,3);  /* 3 = DELETE */                  \n" +
            "			/* [E] - Add Time line log for delete component sid stock (receiving material) */ 	                \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentsidstock;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempcomponentsidstock;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempcomponentsidstock;                         \n" +
            "  \n" +
            "END IF;                        \n" +
            "IF tableName='component_sid_stock_dataelement_values' THEN	                        \n" +
            "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                    \n" +
            "			/* [S] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	                \n" +
            "			SELECT GROUP_CONCAT(dataelementid), GROUP_CONCAT(refsidid) INTO @lvCSDlIDs,@lvRefsidid                   \n" +
            "			FROM component_sid_stock_dataelement_values                \n" +
            "			WHERE FIND_IN_SET(id,IDs);                \n" +
            "  \n" +
            "			SELECT uid INTO @lvUID FROM component_sid_stock WHERE id = @lvRefsidid   ;                \n" +
            "  \n" +
            "			SELECT GROUP_CONCAT(dataElementName) INTO @lvDlNames                \n" +
            "			FROM dataelement                 \n" +
            "			WHERE FIND_IN_SET(dataElementID,@lvCSDlIDs);	                \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Data field(s) of receiving material deleted\");                  \n" +
            "			SET @lvEventDescription = CONCAT(\"Data field(s) \\\"\",@lvDlNames,\"\\\" of receiving material with UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                  \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7.01,NULL,deletedBy,3);  /* 3 = DELETE */                  \n" +
            "			/* [E] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	                \n" +
            "END IF;                        \n" +
            "IF tableName='chart_templatemst' THEN	                        \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)                        \n" +
            "		    ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempcharttemplatemst;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempcharttemplatemst;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempcharttemplatemst;                         \n" +
            "  \n" +
            "END IF;                        \n" +
            "IF tableName=\"shipping_request\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg                         \n" +
            "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)                        \n" +
            "            UNION ALL                        \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg                         \n" +
            "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                  \n" +
            "			/* [S] - Add Time line log for delete shipment request */                 \n" +
            "			SELECT GROUP_CONCAT(note) INTO @lvNotes FROM Shipping_Request                \n" +
            "			WHERE FIND_IN_SET(id,IDs);	                \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Shipment request deleted\");                  \n" +
            "			SET @lvEventDescription = CONCAT(\"Shipment request of \\\"\",@lvNotes,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                  \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,8,NULL,deletedBy,3);  /* 3 = DELETE */                  \n" +
            "			/* [E] - Add Time line log for delete shipment request */                 \n" +
            "  \n" +
            "			SELECT * FROM tempShippingRequest;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempShippingRequest;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempShippingRequest;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"chart_rawdata_category\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg                         \n" +
            "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)                        \n" +
            "            UNION ALL                        \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg                         \n" +
            "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempChartRawdataCategory;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempChartRawdataCategory;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempChartRawdataCategory;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"component_standard\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg                         \n" +
            "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandard;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempcomponentStandard;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempcomponentStandard;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"component_standard_class\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg                         \n" +
            "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');                        \n" +
            "           /*  UNION ALL                        \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg                         \n" +
            "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt2 FROM @SQL2;                        \n" +
            "			EXECUTE stmt2;                        \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandardClass;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempcomponentStandardClass;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempcomponentStandardClass;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"rfq_lineitems\" THEN                        \n" +
            "		SELECT 0 TotalCount, '' Message;                        \n" +
            "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "		PREPARE stmt1 FROM @SQL1;                        \n" +
            "		EXECUTE stmt1;                                    \n" +
            "END IF;                        \n" +
            "IF tableName=\"requirement\" THEN                        \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg                         \n" +
            "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM temprequirements)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM temprequirements;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM temprequirements;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE temprequirements;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"workorder_trans_packagingdetail\" THEN                   \n" +
            "		/* [S] - Add Time line log for delete work order transaction packing details */                  \n" +
            "		SELECT  (SELECT woNumber FROM workorder WHERE woID = wtpd.woID),                \n" +
            "			(SELECT opName FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL),                \n" +
            "			(SELECT woOPID FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL)                \n" +
            "			INTO @lvWoNumber , @lvOpName ,@lvWoOPID                 \n" +
            "		FROM workorder_trans_packagingdetail wtpd                 \n" +
            "		WHERE wtpd.woTransPackagingDetailID = IDs AND wtpd.deletedAt IS NULL  /* here ids multiple but need one record only so */;                \n" +
            "		SET @lvEventTitle = CONCAT(\"Box serial details deleted from work order operation\");                  \n" +
            "		SET @lvEventDescription = CONCAT(\"Box serial details deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                  \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.17,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                  \n" +
            "		/* [E] - Add Time line log for delete work order transaction packing details */                 \n" +
            "  \n" +
            "		SELECT 0 TotalCount, '' Message;                        \n" +
            "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "		PREPARE stmt1 FROM @SQL1;                        \n" +
            "		EXECUTE stmt1;                                    \n" +
            "END IF;                        \n" +
            "IF tableName=\"customer_addresses\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)                        \n" +
            "			UNION ALL                        \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                         \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempcustomer_addresses;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempcustomer_addresses;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempcustomer_addresses;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"rfqforms\" THEN                        \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg                         \n" +
            "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in                         \n" +
            "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');                        \n" +
            "  \n" +
            "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in                         \n" +
            "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		                        \n" +
            "  \n" +
            "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in                         \n" +
            "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		                        \n" +
            "  \n" +
            "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in                         \n" +
            "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		                        \n" +
            "  \n" +
            "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in                         \n" +
            "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');                        \n" +
            "  \n" +
            "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		                        \n" +
            "  \n" +
            "            PREPARE stmt1 FROM @SQL1;                        \n" +
            "			PREPARE stmt2 FROM @SQL2;                        \n" +
            "            PREPARE stmt3 FROM @SQL3;                        \n" +
            "			PREPARE stmt4 FROM @SQL4;                        \n" +
            "            PREPARE stmt5 FROM @SQL5;                        \n" +
            "			PREPARE stmt6 FROM @SQL6;                        \n" +
            "  \n" +
            "			EXECUTE stmt1;                        \n" +
            "			EXECUTE stmt2;                        \n" +
            "            EXECUTE stmt3;                        \n" +
            "			EXECUTE stmt4;                        \n" +
            "            EXECUTE stmt5;                        \n" +
            "			EXECUTE stmt6;                        \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM temprfqformss;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM temprfqformss;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE temprfqformss;                         \n" +
            "END IF;                        \n" +
            "IF tableName=\"rfq_mountingtypemst\" THEN                        \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg                         \n" +
            "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1)                \n" +
            "             UNION ALL                      \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mountingTypeID IN(',IDs,') LIMIT 1)) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM temprfqpartcategory;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM temprfqpartcategory;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE temprfqpartcategory;                         \n" +
            "  \n" +
            "END IF;                        \n" +
            "IF tableName=\"who_bought_who\" THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "END IF;                        \n" +
            "IF tableName=\"rfq_parttypemst\" THEN                        \n" +
            "			SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqparttypemst as                        \n" +
            "				 SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "			    FROM                         \n" +
            "			    (                   \n" +
            "	            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM                 \n" +
            "	            component WHERE deletedAt IS NULL AND partTypeID IN(',IDs,') LIMIT 1)) q');                        \n" +
            "	  	        PREPARE stmt FROM @SQL;                        \n" +
            "		        EXECUTE stmt;                  \n" +
            "	          IF (SELECT TotalCount FROM temprfqparttypemst)=0 THEN                    \n" +
            "  \n" +
            "				SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,',                 \n" +
            "	            deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "	  				PREPARE stmt1 FROM @SQL1;                        \n" +
            "						EXECUTE stmt1;                  \n" +
            "	            	SELECT * FROM temprfqparttypemst;                        \n" +
            "			ELSE                        \n" +
            "				SELECT * FROM temprfqparttypemst;                        \n" +
            "  \n" +
            "			END IF;                        \n" +
            "            DROP TABLE temprfqparttypemst;                                   \n" +
            "  \n" +
            "END IF;                        \n" +
            "IF tableName=\"rfq_lineitems_errorcode\" THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "END IF;                        \n" +
            "IF tableName=\"rfq_lineitems_keywords\" THEN                        \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "END IF;                  \n" +
            "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempQuotecharges_dynamic_fields_mst as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                         \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempQuotecharges_dynamic_fields_mst)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update quotecharges_dynamic_fields_mst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempQuotecharges_dynamic_fields_mst;                         \n" +
            "END IF;    \n" +
            "IF tableName=\"cost_category\" THEN                        \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCost_category as                        \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                        \n" +
            "		    FROM                         \n" +
            "		    (                        \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                         \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');                        \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                        \n" +
            "	EXECUTE stmt;                        \n" +
            "		IF (SELECT TotalCount FROM tempCost_category)=0 THEN                        \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update cost_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                        \n" +
            "			PREPARE stmt1 FROM @SQL1;                        \n" +
            "			EXECUTE stmt1;                        \n" +
            "  \n" +
            "			SELECT * FROM tempCost_category;                        \n" +
            "		ELSE                        \n" +
            "			SELECT * FROM tempCost_category;                        \n" +
            "  \n" +
            "		END IF;                        \n" +
            "		DROP TABLE tempCost_category;                         \n" +
            "END IF;                                \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 22-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (121,'1.00','V1','Cost Category master added - Kinjal'," + userid + ");"
            );
            break;
        case 121:
            allDbChangesArray.push(
            /* **************************** New Script -> 22-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
            "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(      \n" +
            "	IN rfqAssyID int(1),      \n" +
            "	IN userID INT(1)      \n" +
            ")  \n" +
            "BEGIN      \n" +
            "DECLARE EXIT HANDLER FOR SQLEXCEPTION      \n" +
            "BEGIN      \n" +
            "	ROLLBACK;      \n" +
            "	RESIGNAL;      \n" +
            "END;      \n" +
            "DECLARE EXIT HANDLER FOR SQLWARNING      \n" +
            "  BEGIN      \n" +
            "	ROLLBACK;      \n" +
            "	RESIGNAL;      \n" +
            "END;      \n" +
            " DROP TEMPORARY TABLE if exists Results;      \n" +
            "  \n" +
            "    START TRANSACTION;      \n" +
            "  \n" +
            "# Select Consolidated rfq_lineitems      \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
            "		select rfqLineItemsID as rfqLineItemsID,attritionRate,isInstall,       \n" +
            "		isPurchase,partclassID,partTypeID,leadQty,isActive,isNoBidsPN,isDraft,      \n" +
            "		lineID,numOfPosition,rfqAssyID,uomID,ab.rfqAssyBomID,      \n" +
            "		sum(qpa2) qpa, cast((sum(adcost1)/sum(qpa2)) as decimal(10,5)) as valueAddedCost,      \n" +
            "		mfg,count(*)as multiple,group_concat(rfqLineItemsID) as consolidatedLineItemIDs      \n" +
            "		from       \n" +
            "		(select *,(qpa1*valueAddedCost)as adcost1, qpa1 as qpa2, group_concat(distinct(part)) mfg      \n" +
            "		from      \n" +
            "		(select b.rfqLineItemsID, a.valueAddedCost, a.refRFQLineItemID,       \n" +
            "		fun_getQPAOfLineItems(a.lineID,rfqAssyID)as qpa1, (fun_getQPAOfLineItems(a.lineID,rfqAssyID)* a.valueAddedCost)as addCost,       \n" +
            "		concat(b.mfgCodeID,' | ', b.mfgPNID ) as part,a.attritionRate,a.isInstall,       \n" +
            "		a.isPurchase,a.partclassID,a.partTypeID,a.leadQty,a.isActive,a.isNoBidsPN,a.isDraft,      \n" +
            "		a.lineID,a.numOfPosition,a.rfqAssyID,a.uomID,a.rfqAssyBomID      \n" +
            "		from rfq_lineitems_alternatepart b       \n" +
            "        join rfq_lineitems a on b.rfqLineItemsID = a.id AND a.rfqAssyID = rfqAssyID AND IFNULL(a.isDeleted,0) = 0     \n" +
            "        where IFNULL(b.isDeleted,0) = 0 and (b.mfgPNID is not NULL or b.mfgPN is not NULL)    \n" +
            "		group by b.rfqLineItemsID, b.mfgPN, concat(b.mfgCode,' | ', b.mfgPN)) aa      \n" +
            "		group by aa.rfqLineItemsID) ab       \n" +
            "		group by mfg;     \n" +
            "  \n" +
            "# Delete consolidated lineItem if consolidatedLineItemIDs  change      \n" +
            "  \n" +
            "			update rfq_consolidated_mfgpn_lineitem cl      \n" +
            "			set       \n" +
            "			cl.isDeleted = true,      \n" +
            "			cl.deletedAt = UTC_TIMESTAMP(),      \n" +
            "			cl.deletedBy = userID      \n" +
            "			where cl.rfqAssyID = rfqAssyID and cl.id not in (      \n" +
            "            select * from(           \n" +
            "			select id from rfq_consolidated_mfgpn_lineitem rcl      \n" +
            "			join Results R on R.rfqAssyID = rcl.rfqAssyID       \n" +
            "			where rcl.rfqAssyID = rfqAssyID and rcl.id  is not NUll  and rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs      \n" +
            "            and IFNULL(rcl.isDeleted,0) = 0)a);      \n" +
            "  \n" +
            "  \n" +
            "# insert Consolidated lineItems       \n" +
            "  \n" +
            "        INSERT INTO `rfq_consolidated_mfgpn_lineitem`      \n" +
            "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,      \n" +
            "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,      \n" +
            "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`)      \n" +
            "		select R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,rfqAssyID `rfqAssyID`,R.`partTypeID`,      \n" +
            "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_TIMESTAMP() `createdAt`,      \n" +
            "		userID `createdBy`, R.`numOfPosition`,      \n" +
            "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`       \n" +
            "        from Results R      \n" +
            "		 left join rfq_consolidated_mfgpn_lineitem cl on cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs and cl.rfqAssyID = R.rfqAssyID and IFNULL(cl.isDeleted,0) = 0      \n" +
            "		 where cl.id is NUll;      \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "# insert Consolidated lineItems Quentity      \n" +
            "  \n" +
            "        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`      \n" +
            "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)      \n" +
            "		select rq.id `qtyID`, cl.id `consolidateID`,userID `createdBy`,UTC_TIMESTAMP() `createdAt`  from rfq_consolidated_mfgpn_lineitem cl      \n" +
            "		join rfq_assy_quantity rq on rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0      \n" +
            "        left join rfq_consolidate_mfgpn_lineitem_quantity clq on clq.consolidateID = cl.id and clq.qtyID = rq.id       \n" +
            "		where cl.rfqAssyID = rfqAssyID and cl.isDeleted = 0 and clq.id IS NULL;      \n" +
            "  \n" +
            "# Update Consilidated LineItems Quantity      \n" +
            "  \n" +
            "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (select * from Results) Rs, (select cl.id ,cl.qpa,cl.consolidatedLineItemIDs from rfq_consolidated_mfgpn_lineitem cl       \n" +
            "		where cl.rfqAssyID = rfqAssyID and cl.id  is NoT NUll       \n" +
            "            and IFNULL(cl.isDeleted,0) = 0) rcl       \n" +
            "		set       \n" +
            "		rq.updatedAt = UTC_TIMESTAMP(),      \n" +
            "        rq.updatedBy = userID,      \n" +
            "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN null WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)      \n" +
            "		where  IFNULL(rq.isDeleted,0) = 0 and rcl.qpa != Rs.qpa and rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs and rq.consolidateID in(rcl.id);      \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "# Update Consilidated LineItems      \n" +
            "  \n" +
            "        UPDATE rfq_consolidated_mfgpn_lineitem cl, (select * from Results) R       \n" +
            "		set       \n" +
            "		cl.isInstall = R.isInstall ,      \n" +
            "		cl.isPurchase = R.isPurchase,      \n" +
            "		cl.numOfPosition = R.numOfPosition,      \n" +
            "		cl.attritionRate = R.attritionRate,      \n" +
            "		cl.leadQty = R.leadQty,      \n" +
            "		cl.valueAddedCost = R.valueAddedCost,      \n" +
            "        cl.updatedAt = UTC_TIMESTAMP(),      \n" +
            "        cl.rfqLineItemID = R.rfqLineItemsID,      \n" +
            "        cl.qpa = R.qpa,      \n" +
            "        cl.uomID = R.uomID,      \n" +
            "        cl.lineID = R.lineID,      \n" +
            "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,      \n" +
            "        cl.updatedBy = userID      \n" +
            "		where cl.rfqAssyID = rfqAssyID and cl.id  is NoT NUll and cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs      \n" +
            "            and IFNULL(cl.isDeleted,0) = 0;      \n" +
            "  \n" +
            "  \n" +
            "# delete from consolidated Alternatepart if lineItem removed      \n" +
            "  \n" +
            "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap      \n" +
            "		set       \n" +
            "        cap.isDeleted = true,      \n" +
            "        cap.deletedAt = UTC_TIMESTAMP(),      \n" +
            "		cap.deletedBy = userID      \n" +
            "		where  cap.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null        \n" +
            "        and IFNULL(cl.isDeleted,0) = 1);           \n" +
            "  \n" +
            "  \n" +
            "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem      \n" +
            "  \n" +
            "  \n" +
            "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate       \n" +
            "		set       \n" +
            "        isDeleted = true,      \n" +
            "        deletedAt = UTC_TIMESTAMP(),      \n" +
            "		deletedBy = userID      \n" +
            "        where id in(       \n" +
            "        select capID from (      \n" +
            "		select distinct(cap.id)as capID      \n" +
            "		from rfq_lineitems_alternatepart ap       \n" +
            "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID      \n" +
            "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID      \n" +
            "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID       \n" +
            "		join rfq_parttypemst pt on pt.id = rl.partTypeID AND pt.category != 3      \n" +
            "		where rl.rfqAssyID = rfqAssyID and cap.consolidateID IS not NULL and IFNULL(cl.isDeleted,0) = 0 and IFNULL(ap.isDeleted,0) = 1) as rcap);      \n" +
            "  \n" +
            "# delete Consolidated lineItems Quentity       \n" +
            "  \n" +
            "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (select * from rfq_assy_quantity where rfqAssyID = rfqAssyID and isDeleted = 1) rq    \n" +
            "		set       \n" +
            "        cq.isDeleted = true,      \n" +
            "        cq.deletedAt = UTC_TIMESTAMP(),      \n" +
            "		cq.deletedBy = userID      \n" +
            "		where cq.qtyID = rq.id and cq.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null        \n" +
            "        and IFNULL(cl.isDeleted,0) = 1);           \n" +
            "  \n" +
            "# delete Consolidated lineitem Quantity if rfq Quantity remove    \n" +
            "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (select * from rfq_assy_quantity q where q.rfqAssyID = rfqAssyID and IFNULL(q.isDeleted,0) = 1 ) rq    \n" +
            "		set       \n" +
            "        cq.isDeleted = true,      \n" +
            "        cq.deletedAt = UTC_TIMESTAMP(),      \n" +
            "		cq.deletedBy = userID      \n" +
            "        where cq.consolidateID in(select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = rfqAssyID and IFNULL(isDeleted, 0) = 0)        \n" +
            "        and rq.id = cq.qtyID and IFNULL(cq.isDeleted,0)= 0;        \n" +
            "  \n" +
            "# delete Consolidate lineItems       \n" +
            "  \n" +
            "		UPDATE rfq_consolidated_mfgpn_lineitem cl      \n" +
            "		set       \n" +
            "        cl.isDeleted = true,      \n" +
            "        cl.deletedAt = UTC_TIMESTAMP(),      \n" +
            "		cl.deletedBy = userID      \n" +
            "		where  cl.rfqAssyID = rfqAssyID and cl.id is Not Null  and IFNULL(cl.isDeleted,0) = 0      \n" +
            "		and cl.rfqLineItemID not in(select rfqLineItemsID from Results);              \n" +
            "  \n" +
            "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part       \n" +
            "  \n" +
            "        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`      \n" +
            "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`)      \n" +
            "		select distinct(ap.`mfgPN`),(select rcl.id from rfq_consolidated_mfgpn_lineitem rcl where rcl.rfqAssyID = rfqAssyID and rcl.lineID = rl.lineID and IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,      \n" +
            "			ap.`mfgPNID`,ap.`mfgCodeID`, com.`PIDCode`, userID `createdBy`,UTC_TIMESTAMP() `createdAt`      \n" +
            "		from rfq_lineitems_alternatepart ap       \n" +
            "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID      \n" +
            "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID  \n" +
            "        join component com on com.id = ap.mfgPNID and IFNULL(com.isDeleted,0) = 0  \n" +
            "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID and cap.isDeleted = 0      \n" +
            "		where rl.rfqAssyID = rfqAssyID and ap.isDeleted = 0 and IFNULL(cl.isDeleted,0) = 0 and cap.consolidateID IS NULL;    \n" +
            "  \n" +
            "  \n" +
            "# Delete consolidated mfgPart if mfgPart Changed  \n" +
            "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (select a.id from rfq_consolidated_mfgpn_lineitem a where a.rfqAssyID = rfqAssyID and a.isDeleted = 0) rcl  \n" +
            "		set       \n" +
            "        cap.isDeleted = true,      \n" +
            "        cap.deletedAt = UTC_TIMESTAMP(),      \n" +
            "		cap.deletedBy = userID  \n" +
            "		where cap.consolidateID in (rcl.id) and cap.id not in (   \n" +
            "        select  distinct(cap.id)      \n" +
            "		from rfq_lineitems_alternatepart ap       \n" +
            "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID      \n" +
            "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID  \n" +
            "		where rl.rfqAssyID = rfqAssyID and cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID  and ap.isDeleted = 0 and IFNULL(cl.isDeleted,0) = 0);  \n" +
            "  \n" +
            "  \n" +
            " # delete Consolidated lineitem Quantity if selected alternate part remove    \n" +
            "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,   \n" +
            "        (select * from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and IFNULL(cl.isDeleted,0) = 0 ) rcl,  \n" +
            "        (select consolidateID, PIDCode from rfq_consolidated_mfgpn_lineitem_alternate where IFNULL(isDeleted, 0) = 1) cap        \n" +
            "		set       \n" +
            "        cq.finalPrice = null,  \n" +
            "        cq.selectedPIDCode = null,  \n" +
            "        cq.selectedMpn = null,  \n" +
            "        cq.selectionMode = null,  \n" +
            "        cq.supplier = null,  \n" +
            "        cq.supplierStock = null,  \n" +
            "        cq.currentStock = null,  \n" +
            "        cq.grossStock = null,  \n" +
            "        cq.leadTime = null,  \n" +
            "        cq.min = null,  \n" +
            "        cq.mult = null,  \n" +
            "        cq.unitPrice = null,  \n" +
            "        cq.updatedAt = UTC_TIMESTAMP(),      \n" +
            "		cq.updatedBy = userID      \n" +
            "        where cq.consolidateID in(select consolidateID from rfq_consolidated_mfgpn_lineitem_alternate where IFNULL(isDeleted, 0) = 1)        \n" +
            "        and cq.consolidateID = cap.consolidateID and cq.selectedPIDCode = cap.PIDCode and IFNULL(cq.isDeleted,0)= 0;     \n" +
            "  \n" +
            "  \n" +
            "    COMMIT;      \n" +
            "    DROP TEMPORARY TABLE if exists Results;      \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 22-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (122,'1.00','V1','create consolidate data sp - shirish '," + userid + ");"
            );
            break;
        case 122:
            allDbChangesArray.push(
            /* **************************** New Script -> 23-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_UpdateAssywiseAutoPricing` ;  \n" +
"CREATE PROCEDURE `Sproc_UpdateAssywiseAutoPricing`(  \n" +
"      IN pstatus INT,  \n" +
"      IN message TEXT,  \n" +
"      IN errormsg TEXT,  \n" +
"      IN assyID INT,  \n" +
"      IN pricingApi VARCHAR(50)  \n" +
")  \n" +
"BEGIN  \n" +
"         UPDATE rfq_assy_autopricingstatus rp SET rp.status=pstatus,rp.msg=message,rp.errorMsg=errormsg,statusChangeDate=UTC_TIMESTAMP()  \n" +
"         WHERE rp.assyID=assyID AND rp.apiName=pricingApi;  \n" +
"END;  \n" +
"DROP PROCEDURE IF EXISTS `Sproc_UpdateDigiKeyErrorStatus` ;  \n" +
"CREATE PROCEDURE `Sproc_UpdateDigiKeyErrorStatus`(  \n" +
"	IN prfqAssyID INT(11),  \n" +
"	IN ppricingApiName VARCHAR(100),  \n" +
"	IN pConsolidateID INT(11),  \n" +
"	IN pstatus LONGTEXT,  \n" +
"	IN pmsg TEXT,  \n" +
"	IN perrorMsg TEXT,  \n" +
"	IN puserID INT  \n" +
")  \n" +
"BEGIN  \n" +
"	# udpate lineitem pricing status  \n" +
"		# 0 - SendRequest, 1 - NotPricing, 2 - Success  \n" +
"		UPDATE `rfq_lineitem_autopricingstatus`  \n" +
"			SET `status` = pstatus,  \n" +
"			`msg` = pmsg,  \n" +
"			`errorMsg` = perrorMsg,  \n" +
"			statusChangeDate=UTC_TIMESTAMP()  \n" +
"			WHERE rfqAssyID=prfqAssyID AND pricingApiName=ppricingApiName AND consolidateID=pConsolidateID  \n" +
"			AND `status`!=2 AND userID=puserID;  \n" +
"  \n" +
"    # udpate assembly pricing status for all   \n" +
"		UPDATE `rfq_assy_autopricingstatus`  \n" +
"			SET `status` = pstatus,  \n" +
"			`msg` = pmsg,  \n" +
"			`errorMsg` = perrorMsg,  \n" +
"			statusChangeDate=UTC_TIMESTAMP()   \n" +
"			WHERE rfqAssyID=prfqAssyID AND pricingApiName=ppricingApiName  \n" +
"			AND userID=puserID;  \n" +
"  \n" +
"    #get updated status from both tables for lineItem and Assembly  \n" +
"        SELECT * FROM `rfq_lineitem_autopricingstatus`  \n" +
"		WHERE rfqAssyID=prfqAssyID AND consolidateID = pConsolidateID AND pricingApiName=ppricingApiName  \n" +
"		AND userID=puserID;  \n" +
"	SELECT * FROM `rfq_lineitem_autopricingstatus`   \n" +
"			WHERE rfqAssyID=prfqAssyID  AND `status`=0  \n" +
"			AND userID=puserID;  \n" +
"END;  \n" +
"DROP PROCEDURE IF EXISTS `Sproc_SetAutoPricingStatus` ;  \n" +
"CREATE PROCEDURE `Sproc_SetAutoPricingStatus`(  \n" +
"	IN prfqAssyID INT(11),  \n" +
"	IN ppricingApiName VARCHAR(100),  \n" +
"	IN pconsolidateID INT(11),  \n" +
"	IN pstatus LONGTEXT,  \n" +
"	IN pmsg TEXT,  \n" +
"	IN perrorMsg TEXT,  \n" +
"	IN puserID INT  \n" +
")  \n" +
"BEGIN  \n" +
"	 # udpate lineitem pricing status  \n" +
"		# 0 - SendRequest, 1 - NotPricing, 2 - Success  \n" +
"		UPDATE `rfq_lineitem_autopricingstatus`  \n" +
"        SET `status` = pstatus,  \n" +
"        `msg` = pmsg,  \n" +
"        statusChangeDate=UTC_TIMESTAMP(),  \n" +
"        `errorMsg` = perrorMsg  \n" +
"        WHERE rfqAssyID=prfqAssyID AND pricingApiName=ppricingApiName AND consolidateID=pconsolidateID AND userID=puserID  \n" +
"        AND (`status`!=2);  \n" +
"  \n" +
"    # udpate assembly princing status   \n" +
"		SELECT COUNT(*) INTO @pendingLineItem FROM `rfq_lineitem_autopricingstatus`   \n" +
"        WHERE rfqAssyID=prfqAssyID AND pricingApiName=ppricingApiName AND `status`=0 AND userID=puserID;  \n" +
"  \n" +
"        IF (IFNULL(@pendingLineItem,0) = 0) THEN  \n" +
"			# update only those record whose status in not success  \n" +
"			UPDATE `rfq_assy_autopricingstatus`  \n" +
"			SET `status` = pstatus,  \n" +
"			`msg` = pmsg,  \n" +
"			statusChangeDate=UTC_TIMESTAMP(),  \n" +
"			`errorMsg` = perrorMsg   \n" +
"			WHERE rfqAssyID=prfqAssyID AND pricingApiName=ppricingApiName AND `status`!=2 AND userID=puserID;  \n" +
"		END IF;  \n" +
"  \n" +
"    #get updated status from both tables for lineItem and Assembly   \n" +
"        SELECT * FROM `rfq_lineitem_autopricingstatus`  \n" +
"		WHERE rfqAssyID=prfqAssyID AND consolidateID = pconsolidateID AND pricingApiName=ppricingApiName AND userID=puserID;  \n" +
"	SELECT * FROM `rfq_assy_autopricingstatus`   \n" +
"		WHERE rfqAssyID=prfqAssyID AND `status`=0 AND userID=puserID;  \n" +
"END;  \n" +
"DROP PROCEDURE IF EXISTS `Sproc_StopPricingRequests` ;  \n" +
"CREATE PROCEDURE `Sproc_StopPricingRequests`(        \n" +
"	IN prfqAssyID INT(11),      \n" +
"	IN puserID INT,    \n" +
"	IN pmessage VARCHAR(255)    \n" +
")  \n" +
"BEGIN        \n" +
"	# udpate lineitem pricing status        \n" +
"		# 0 - SendRequest, 1 - NotPricing, 2 - Success        \n" +
"		UPDATE `rfq_lineitem_autopricingstatus`        \n" +
"			SET `status` = 1,    \n" +
"				`msg`= pmessage,  \n" +
"				statusChangeDate=UTC_TIMESTAMP()    \n" +
"			WHERE rfqAssyID=prfqAssyID       \n" +
"			AND `status`=0 AND userID=puserID;        \n" +
"  \n" +
"	# udpate assembly pricing status for all         \n" +
"		UPDATE `rfq_assy_autopricingstatus`        \n" +
"			SET `status` = 1,    \n" +
"				`msg`=pmessage,  \n" +
"				statusChangeDate=UTC_TIMESTAMP()         \n" +
"			WHERE rfqAssyID=prfqAssyID      \n" +
"			AND `status`=0 AND userID=puserID;        \n" +
"END;  \n" +

            /* **************************** Add Script Version -> 23-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (123,'1.00','V1','alter Sproc_StopPricingRequests- Champak '," + userid + ");"
            );
            break;
        case 123:
            allDbChangesArray.push(
            /* **************************** New Script -> 23-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLeadTimeRiskLineItems` ;  \n" +
              "CREATE PROCEDURE `Sproc_GetRFQLeadTimeRiskLineItems`(              \n" +
              "	IN ppageIndex INT(11),              \n" +
              "	IN precordPerPage INT(11),              \n" +
              "	IN pOrderBy VARCHAR(255),              \n" +
              "	IN pWhereClause VARCHAR(21844),              \n" +
              "	IN rfqAssyID INT(11),              \n" +
              "	IN puserID INT (11)        \n" +
              "    )  \n" +
              "BEGIN              \n" +
              "  \n" +
              "	    DECLARE pOffset INT(11);              \n" +
              "	    DECLARE rowNumWhere VARCHAR(255) ;      \n" +
              "	    SET SESSION group_concat_max_len = 150000;              \n" +
              "	    SET @SQLString = NULL;           \n" +
              "	    SET @HavingClause = NULL;               \n" +
              "	    IF (pOrderBy IS NOT NULL) THEN              \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
              "		ELSE              \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;               \n" +
              "		END IF;	              \n" +
              "  \n" +
              "  \n" +
              "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN              \n" +
              "			SET pWhereClause = '1=1' ;              \n" +
              "		END IF;	              \n" +
              "  \n" +
              "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN               \n" +
              "			SET pOffset = (ppageIndex -1) * precordPerPage; 		              \n" +
              "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
              "		ELSE	              \n" +
              "			SET rowNumWhere = '';              \n" +
              "		END IF;	              \n" +
              "		SELECT              \n" +
              "                      GROUP_CONCAT(DISTINCT              \n" +
              "				CONCAT(              \n" +
              "					'Max((IF(ra.requestQty = ''',              \n" +
              "						ra.requestQty,              \n" +
              "					''', (SELECT IFNULL(leadTime,0) from component where mfgPN = rq.selectedMpn AND deletedAt IS NULL AND IFNULL(isDeleted,0)=0), null))) AS ''',              \n" +
              "						ra.requestQty,''''              \n" +
              "					)              \n" +
              "					),    \n" +
              "		GROUP_CONCAT(DISTINCT              \n" +
              "				CONCAT(              \n" +
              "					'Max((IF(ra.requestQty = ''',              \n" +
              "						ra.requestQty,              \n" +
              "					''', (SELECT IFNULL(leadTime,0) from component where mfgPN = rq.selectedMpn AND deletedAt IS NULL AND IFNULL(isDeleted,0)=0), null))) < 16'    \n" +
              "					) SEPARATOR ' OR '                  \n" +
              "					)     \n" +
              "				INTO @SQLString,@HavingClause         \n" +
              "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq              \n" +
              "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID              \n" +
              "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id              \n" +
              "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;            \n" +
              "			IF(@SQLString IS NOT NULL) THEN              \n" +
              "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS              \n" +
              "					SELECT               \n" +
              "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,             \n" +
              "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))              \n" +
              "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla   \n" +
              "						LEFT JOIN component c ON rla.mfgpnid=c.id   \n" +
              "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',             \n" +
              "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl              \n" +
              "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID              \n" +
              "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id              \n" +
              "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'     \n" +
              "					GROUP BY rl.lineID');       \n" +
              "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	              \n" +
              "			END IF;               \n" +
              "			PREPARE stmt FROM @SQLStatement;              \n" +
              "			EXECUTE stmt;	              \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );              \n" +
              "			PREPARE query1 FROM @SQLStatement1;              \n" +
              "			EXECUTE query1;              \n" +
              "			DEALLOCATE PREPARE query1;              \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
              "			PREPARE query2 FROM @SQLStatement2;              \n" +
              "			EXECUTE query2;              \n" +
              "			DEALLOCATE PREPARE query2;              \n" +
              "  \n" +
              "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq              \n" +
              "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID              \n" +
              "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id              \n" +
              "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);              \n" +
              "			PREPARE query3 FROM @SQLStatement3;              \n" +
              "			EXECUTE query3;              \n" +
              "			DEALLOCATE PREPARE query3;              \n" +
              "  \n" +
              "  			SET @SQLStatement4 = CONCAT(\"      \n" +
              "				SELECT requestQty,       \n" +
              "					finalPrice,       \n" +
              "					unitPrice,      \n" +
              "					supplier,       \n" +
              "					selectedMpn,       \n" +
              "					selectionMode,     \n" +
              "					selectedPIDCode,     \n" +
              "					qtyID,       \n" +
              "					consolidateID    \n" +
              "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq           \n" +
              "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID       \n" +
              "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");              \n" +
              "			PREPARE query4 FROM @SQLStatement4;              \n" +
              "			EXECUTE query4;              \n" +
              "			DEALLOCATE PREPARE query4;              \n" +
              "  \n" +
              "			DROP TEMPORARY TABLE consolidatetemp;                \n" +
              "    END;  \n" +
            /* **************************** Add Script Version -> 23-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQNotQuotedLineItems` ;  \n" +
              "CREATE PROCEDURE `Sproc_GetRFQNotQuotedLineItems`(                  \n" +
              "	IN ppageIndex INT(11),                  \n" +
              "	IN precordPerPage INT(11),                  \n" +
              "	IN pOrderBy VARCHAR(255),                  \n" +
              "	IN pWhereClause VARCHAR(21844),                  \n" +
              "	IN rfqAssyID INT(11),                  \n" +
              "	IN puserID INT (11)            \n" +
              "    )  \n" +
              "BEGIN                  \n" +
              "  \n" +
              "	    DECLARE pOffset INT(11);                  \n" +
              "	    DECLARE rowNumWhere VARCHAR(255) ;              \n" +
              "	    SET @SQLString = NULL;                    \n" +
              "	    SET @HavingClause = NULL;        \n" +
              "	    SET SESSION group_concat_max_len = 150000;                        \n" +
              "	    IF (pOrderBy IS NOT NULL) THEN                  \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
              "		ELSE                  \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;                   \n" +
              "		END IF;	                  \n" +
              "  \n" +
              "  \n" +
              "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                  \n" +
              "			SET pWhereClause = '1=1' ;                  \n" +
              "		END IF;	                  \n" +
              "  \n" +
              "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
              "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
              "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
              "		ELSE	                  \n" +
              "			SET rowNumWhere = '';                  \n" +
              "		END IF;	                  \n" +
              "		SELECT                  \n" +
              "                      GROUP_CONCAT(DISTINCT                  \n" +
              "				CONCAT(                  \n" +
              "					'Max((IF(ra.requestQty = ''',                  \n" +
              "						ra.requestQty,                  \n" +
              "					''', rq.finalPrice, null))) AS ''',                  \n" +
              "						ra.requestQty,''''                  \n" +
              "					)                  \n" +
              "					),              \n" +
              "			GROUP_CONCAT(DISTINCT                  \n" +
              "				CONCAT(                  \n" +
              "					'Max((IF(ra.requestQty = ''',                  \n" +
              "						ra.requestQty,                  \n" +
              "					''', rq.finalPrice, null))) IS NULL'                  \n" +
              "					) SEPARATOR ' OR '                 \n" +
              "					)              \n" +
              "				INTO @SQLString, @HavingClause              \n" +
              "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                  \n" +
              "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                  \n" +
              "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                  \n" +
              "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                \n" +
              "			IF(@SQLString IS NOT NULL) THEN                  \n" +
              "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                  \n" +
              "					SELECT                   \n" +
              "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,     \n" +
              "					  (SELECT gc.gencCategoryName FROM genericcategory gc      \n" +
              "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus      \n" +
              "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn) AS PartStatus,      \n" +
              "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL) AS LTBDate,                     \n" +
              "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,      \n" +
              "					(SELECT       \n" +
              "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                \n" +
              "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN       \n" +
              "                                     component c ON rla.mfgpnid=c.id       \n" +
              "                                     LEFT JOIN mfgcodemst mg ON        \n" +
              "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                  \n" +
              "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))              \n" +
              "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla   \n" +
              "						LEFT JOIN component c ON rla.mfgpnid=c.id   \n" +
              "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',  \n" +
              "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                  \n" +
              "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                  \n" +
              "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                  \n" +
              "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                \n" +
              "  \n" +
              "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause, ' OR partstatus IN       \n" +
              "						(SELECT gencCategoryName FROM genericcategory       \n" +
              "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Obsolete\"))');                       \n" +
              "			END IF;               \n" +
              "			PREPARE stmt FROM @SQLStatement;                  \n" +
              "			EXECUTE stmt;	                  \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                  \n" +
              "			PREPARE query1 FROM @SQLStatement1;                  \n" +
              "			EXECUTE query1;                  \n" +
              "			DEALLOCATE PREPARE query1;                  \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
              "			PREPARE query2 FROM @SQLStatement2;                  \n" +
              "			EXECUTE query2;                  \n" +
              "			DEALLOCATE PREPARE query2;                  \n" +
              "  \n" +
              "			SET @SQLStatement3 = CONCAT(\" SELECT distinct ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                  \n" +
              "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID      \n" +
              "			   WHERE  ra.rfqAssyID=\",rfqAssyID);                  \n" +
              "			PREPARE query3 FROM @SQLStatement3;                  \n" +
              "			EXECUTE query3;                  \n" +
              "			DEALLOCATE PREPARE query3;                  \n" +
              "  \n" +
              "  			SET @SQLStatement4 = CONCAT(\"          \n" +
              "				SELECT requestQty,           \n" +
              "					finalPrice,           \n" +
              "					unitPrice,          \n" +
              "					supplier,     \n" +
              "					rq.min,rq.mult,         \n" +
              "					selectedMpn,           \n" +
              "					selectionMode,          \n" +
              "					selectedPIDCode,        \n" +
              "					qtyID,           \n" +
              "					consolidateID,     \n" +
              "					currentStock,    \n" +
              "					leadTime,     \n" +
              "					supplierStock,    \n" +
              "					grossStock,             \n" +
              "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus          \n" +
              "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq               \n" +
              "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID           \n" +
              "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                  \n" +
              "			PREPARE query4 FROM @SQLStatement4;                  \n" +
              "			EXECUTE query4;                  \n" +
              "			DEALLOCATE PREPARE query4;                  \n" +
              "  \n" +
              "			DROP TEMPORARY TABLE consolidatetemp;                    \n" +
              "    END;  \n" +
            /* **************************** Add Script Version -> 23-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQExcessMaterialLineItems` ;  \n" +
              "CREATE PROCEDURE `Sproc_GetRFQExcessMaterialLineItems`(                  \n" +
              "	IN ppageIndex INT(11),                  \n" +
              "	IN precordPerPage INT(11),                  \n" +
              "	IN pOrderBy VARCHAR(255),                  \n" +
              "	IN pWhereClause VARCHAR(21844),                  \n" +
              "	IN rfqAssyID INT(11),                  \n" +
              "	IN puserID INT (11)            \n" +
              "    )  \n" +
              "BEGIN                  \n" +
              "  \n" +
              "	    DECLARE pOffset INT(11);                  \n" +
              "	    DECLARE rowNumWhere VARCHAR(255) ;              \n" +
              "	    SET @SQLString = NULL;             \n" +
              "	    SET @HavingClause = NULL;             \n" +
              "	    SET SESSION group_concat_max_len = 150000;              \n" +
              "	    IF (pOrderBy IS NOT NULL) THEN                  \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
              "		ELSE                  \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` asc\") ;                   \n" +
              "		END IF;	                  \n" +
              "  \n" +
              "  \n" +
              "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                  \n" +
              "			SET pWhereClause = '1=1' ;                  \n" +
              "		END IF;	                  \n" +
              "  \n" +
              "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
              "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
              "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
              "		ELSE	                  \n" +
              "			SET rowNumWhere = '';                  \n" +
              "		END IF;	                  \n" +
              "		SELECT                  \n" +
              "                      GROUP_CONCAT(DISTINCT                  \n" +
              "				CONCAT(                  \n" +
              "					'Max((IF(ra.requestQty = ''',                  \n" +
              "						ra.requestQty,                  \n" +
              "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),             \n" +
              "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),             \n" +
              "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) AS ''',                  \n" +
              "						ra.requestQty,''''                  \n" +
              "					)                  \n" +
              "					),            \n" +
              "  \n" +
              "                      GROUP_CONCAT(DISTINCT                  \n" +
              "				CONCAT(                  \n" +
              "					'Max((IF(ra.requestQty = ''',                  \n" +
              "						ra.requestQty,                  \n" +
              "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),             \n" +
              "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),             \n" +
              "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) > 0'                     \n" +
              "					) SEPARATOR ' OR '                 \n" +
              "					)            \n" +
              "				INTO @SQLString, @HavingClause             \n" +
              "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                  \n" +
              "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                  \n" +
              "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                  \n" +
              "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                \n" +
              "			IF(@SQLString IS NOT NULL) THEN                  \n" +
              "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                  \n" +
              "					SELECT                   \n" +
              "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                    \n" +
              "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,                  \n" +
              "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))              \n" +
              "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla   \n" +
              "						LEFT JOIN component c ON rla.mfgpnid=c.id   \n" +
              "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',  \n" +
              "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                  \n" +
              "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                  \n" +
              "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                  \n" +
              "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                \n" +
              "  \n" +
              "				SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                  \n" +
              "			END IF;              \n" +
              "			PREPARE stmt FROM @SQLStatement;                  \n" +
              "			EXECUTE stmt;	                  \n" +
              "  \n" +
              "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                  \n" +
              "			PREPARE query1 FROM @SQLStatement1;                  \n" +
              "			EXECUTE query1;                  \n" +
              "			DEALLOCATE PREPARE query1;                  \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
              "			PREPARE query2 FROM @SQLStatement2;                  \n" +
              "			EXECUTE query2;                  \n" +
              "			DEALLOCATE PREPARE query2;                  \n" +
              "  \n" +
              "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                  \n" +
              "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                  \n" +
              "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                  \n" +
              "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                  \n" +
              "			PREPARE query3 FROM @SQLStatement3;                  \n" +
              "			EXECUTE query3;                  \n" +
              "			DEALLOCATE PREPARE query3;                  \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement4 = CONCAT(\"SELECT requestQty, finalPrice, unitPrice,supplier, selectedMpn, selectionMode,qtyID,      \n" +
              "					selectedPIDCode,        \n" +
              "					min, mult,      \n" +
              "					currentStock,      \n" +
              "					leadTime,       \n" +
              "					supplierStock,      \n" +
              "					grossStock,          \n" +
              "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus,      \n" +
              "					selectedPIDCode,     \n" +
              "					consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq               \n" +
              "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID WHERE consolidateID IN (select id from consolidatetemp)\");                  \n" +
              "			PREPARE query4 FROM @SQLStatement4;                  \n" +
              "			EXECUTE query4;                  \n" +
              "			DEALLOCATE PREPARE query4;                  \n" +
              "  \n" +
              "  \n" +
              "			DROP TEMPORARY TABLE consolidatetemp;                    \n" +
              "    END;  \n" +
            /* **************************** Add Script Version -> 23-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
              "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                \n" +
              "	IN ppageIndex INT(11),                \n" +
              "	IN precordPerPage INT(11),                \n" +
              "	IN pOrderBy VARCHAR(255),                \n" +
              "	IN pWhereClause VARCHAR(21844),                \n" +
              "	IN rfqAssyID INT(11),                \n" +
              "	IN puserID INT (11)          \n" +
              "    )  \n" +
              "BEGIN                \n" +
              "  \n" +
              "	    DECLARE pOffset INT(11);                \n" +
              "	    DECLARE rowNumWhere VARCHAR(255) ;            \n" +
              "	    SET @SQLString = NULL;             \n" +
              "	    IF (pOrderBy IS NOT NULL) THEN                \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
              "		ELSE                \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                 \n" +
              "		END IF;	                \n" +
              "  \n" +
              "  \n" +
              "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                \n" +
              "			SET pWhereClause = '1=1' ;                \n" +
              "		END IF;	                \n" +
              "  \n" +
              "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
              "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
              "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
              "		ELSE	                \n" +
              "			SET rowNumWhere = '';                \n" +
              "		END IF;	                \n" +
              "		SELECT        \n" +
              "                     GROUP_CONCAT(DISTINCT        \n" +
              "				CONCAT(        \n" +
              "					'Max((IF(ra.requestQty = ''',        \n" +
              "						ra.requestQty,        \n" +
              "					''', rq.finalPrice, null))) AS ''',        \n" +
              "						ra.requestQty,''''        \n" +
              "					)        \n" +
              "					) INTO @SQLString        \n" +
              "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                \n" +
              "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                \n" +
              "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                \n" +
              "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;              \n" +
              "			IF(@SQLString IS NOT NULL) THEN                \n" +
              "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                \n" +
              "					SELECT                 \n" +
              "						rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                  \n" +
              "						rp.partTypeName, rm.name,      \n" +
              "						(SELECT gc.gencCategoryName FROM genericcategory gc      \n" +
              "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus      \n" +
              "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn) AS PartStatus,      \n" +
              "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL) AS LTBDate,      \n" +
              "						(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))              \n" +
              "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla   \n" +
              "						LEFT JOIN component c ON rla.mfgpnid=c.id   \n" +
              "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                 \n" +
              "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                \n" +
              "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                \n" +
              "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                        \n" +
              "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                         \n" +
              "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id              \n" +
              "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'       \n" +
              "						AND rq.selectedMpn IN (SELECT mfgPN FROM component       \n" +
              "					WHERE deletedAt IS NULL AND partstatus IN       \n" +
              "						(SELECT gencCategoryID FROM genericcategory       \n" +
              "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Not For New Design\",\"Obsolete\")))      \n" +
              "					GROUP BY rl.lineID');                  \n" +
              "			END IF;       \n" +
              "			PREPARE stmt FROM @SQLStatement;                \n" +
              "			EXECUTE stmt;	                \n" +
              "  \n" +
              "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                \n" +
              "			PREPARE query1 FROM @SQLStatement1;                \n" +
              "			EXECUTE query1;                \n" +
              "			DEALLOCATE PREPARE query1;                \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
              "			PREPARE query2 FROM @SQLStatement2;                \n" +
              "			EXECUTE query2;                \n" +
              "			DEALLOCATE PREPARE query2;                \n" +
              "  \n" +
              "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                \n" +
              "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                \n" +
              "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                \n" +
              "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                \n" +
              "			PREPARE query3 FROM @SQLStatement3;                \n" +
              "			EXECUTE query3;                \n" +
              "			DEALLOCATE PREPARE query3;                \n" +
              "  \n" +
              "			SET @SQLStatement4 = CONCAT(\"        \n" +
              "				SELECT requestQty,         \n" +
              "					finalPrice,         \n" +
              "					unitPrice,        \n" +
              "					supplier,         \n" +
              "					selectedMpn,         \n" +
              "					selectionMode,        \n" +
              "					qtyID,         \n" +
              "					consolidateID,    \n" +
              "					selectedPIDCode,        \n" +
              "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus        \n" +
              "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq             \n" +
              "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID         \n" +
              "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                \n" +
              "			PREPARE query4 FROM @SQLStatement4;                \n" +
              "			EXECUTE query4;                \n" +
              "			DEALLOCATE PREPARE query4;                \n" +
              "  \n" +
              "			DROP TEMPORARY TABLE consolidatetemp;                  \n" +
              "    END;  \n" +
            /* **************************** Add Script Version -> 23-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQSuggestedAlternative` ;  \n" +
              "CREATE PROCEDURE `Sproc_GetRFQSuggestedAlternative`(                \n" +
              "	IN ppageIndex INT(11),                \n" +
              "	IN precordPerPage INT(11),                \n" +
              "	IN pOrderBy VARCHAR(255),                \n" +
              "	IN pWhereClause VARCHAR(21844),                \n" +
              "	IN rfqAssyID INT(11),                \n" +
              "	IN puserID INT (11)          \n" +
              "    )  \n" +
              "BEGIN                \n" +
              "  \n" +
              "	    DECLARE pOffset INT(11);                \n" +
              "	    DECLARE rowNumWhere VARCHAR(255) ;  \n" +
              "	    IF (pOrderBy IS NOT NULL) THEN                \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
              "		ELSE                \n" +
              "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                 \n" +
              "		END IF;	                \n" +
              "  \n" +
              "  \n" +
              "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                \n" +
              "			SET pWhereClause = '1=1' ;                \n" +
              "		END IF;	                \n" +
              "  \n" +
              "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
              "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
              "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
              "		ELSE	                \n" +
              "			SET rowNumWhere = '';                \n" +
              "		END IF;	                            \n" +
              "  \n" +
              "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                \n" +
              "					SELECT                 \n" +
              "						rl.id,  \n" +
              "						rl.isPurchase,   \n" +
              "						rl.lineID,  \n" +
              "						rl.rfqLineItemID,  \n" +
              "						rl.rfqAssyBomID,  \n" +
              "						rl.rfqAssyID,                  \n" +
              "						rp.partTypeName,  \n" +
              "						rm.name,      \n" +
              "						rq.selectedPIDCode,  \n" +
              "						(select rohsComplient from component where PIDCode=rq.selectedPIDCode LIMIT 1) AS selectedRoHSStatus,  \n" +
              "						(SELECT gc.gencCategoryName FROM genericcategory gc      \n" +
              "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus      \n" +
              "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn) AS PartStatus,      \n" +
              "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL) AS LTBDate,  \n" +
              "						(SELECT GROUP_CONCAT(DISTINCT(PIDCode),''@@@'', rohsComplient,''@@@'',IFNULL(feature,\"\"))  \n" +
              "						FROM component   \n" +
              "						WHERE PIDCode <> rq.selectedPIDCode  AND id IN   \n" +
              "							(SELECT componentID   \n" +
              "								FROM component_alternatepn   \n" +
              "								WHERE aliasgroupID IN   \n" +
              "								(SELECT altenetgroupID   \n" +
              "									FROM component   \n" +
              "									WHERE PIDCode = rq.selectedPIDCode   \n" +
              "									AND deletedAt IS NULL AND isDeleted=0  \n" +
              "								)  \n" +
              "							)  \n" +
              "						) AS AlternatePN  \n" +
              "						FROM rfq_consolidated_mfgpn_lineitem rl                \n" +
              "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                \n" +
              "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                        \n" +
              "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                         \n" +
              "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id              \n" +
              "						WHERE rl.isdeleted=0   \n" +
              "						AND rl.rfqAssyID=',rfqAssyID,'       \n" +
              "						AND rq.selectedMpn IN (SELECT mfgPN FROM component       \n" +
              "							WHERE deletedAt IS NULL   \n" +
              "							AND partstatus IN (  \n" +
              "									SELECT gencCategoryID FROM genericcategory   \n" +
              "									WHERE deletedAt IS NULL   \n" +
              "									AND gencCategoryName IN (\"Obsolete\")  \n" +
              "								)  \n" +
              "							)  \n" +
              "						GROUP BY rl.lineID');                  \n" +
              "			PREPARE stmt FROM @SQLStatement;                \n" +
              "			EXECUTE stmt;	                \n" +
              "  \n" +
              "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                \n" +
              "			PREPARE query1 FROM @SQLStatement1;                \n" +
              "			EXECUTE query1;                \n" +
              "			DEALLOCATE PREPARE query1;                \n" +
              "  \n" +
              "  \n" +
              "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
              "			PREPARE query2 FROM @SQLStatement2;                \n" +
              "			EXECUTE query2;                \n" +
              "			DEALLOCATE PREPARE query2;                \n" +
              "  \n" +
              "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                \n" +
              "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                \n" +
              "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                \n" +
              "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                \n" +
              "			PREPARE query3 FROM @SQLStatement3;                \n" +
              "			EXECUTE query3;                \n" +
              "			DEALLOCATE PREPARE query3;                \n" +
              "  \n" +
              "			SET @SQLStatement4 = CONCAT(\"        \n" +
              "				SELECT requestQty,         \n" +
              "					finalPrice,         \n" +
              "					unitPrice,        \n" +
              "					supplier,         \n" +
              "					selectedMpn,         \n" +
              "					selectionMode,        \n" +
              "					qtyID,         \n" +
              "					consolidateID,    \n" +
              "					selectedPIDCode,        \n" +
              "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus        \n" +
              "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq             \n" +
              "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID         \n" +
              "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                \n" +
              "			PREPARE query4 FROM @SQLStatement4;                \n" +
              "			EXECUTE query4;                \n" +
              "			DEALLOCATE PREPARE query4;                \n" +
              "  \n" +
              "			DROP TEMPORARY TABLE consolidatetemp;                  \n" +
              "    END;  \n" +
            /* **************************** Add Script Version -> 23-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetComponentList` ;  \n" +
          "CREATE PROCEDURE `Sproc_GetComponentList`(	  \n" +
          "	IN ppageIndex INT(11),  \n" +
          "	IN precordPerPage INT(11),  \n" +
          "	IN pOrderBy VARCHAR(255),	  \n" +
          "    IN pWhereClause VARCHAR(21844)      \n" +
          "    )  \n" +
          "BEGIN  \n" +
          "  \n" +
          "	DECLARE pOffset INT(11);  \n" +
          "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
          "	/* DECLARE SQLStatement varchar(255); */  \n" +
          "  \n" +
          "  \n" +
          "  \n" +
          "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS  \n" +
          "		SELECT co.*, mf.mfgCode,gc.gencCategoryName AS partStatusValue,  \n" +
          "		(CASE WHEN (`co`.`rohsComplient` = 0) THEN 'No'   \n" +
          "					WHEN (`co`.`rohsComplient` = 1) THEN 'Yes' ELSE '' END) AS `rohsComplientConvertedValue`  \n" +
          "		FROM component co  \n" +
          "		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id AND IFNULL(mf.isdeleted,0) = 0  \n" +
          "		LEFT JOIN genericcategory gc ON gc.gencCategoryID = co.partStatus   \n" +
          "		WHERE IFNULL(co.isdeleted,0) = 0 ;  \n" +
          "  \n" +
          "	IF (pOrderBy IS NOT NULL) THEN  \n" +
          "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
          "	ELSE  \n" +
          "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN DESC\") ;  \n" +
          "	END IF;	  \n" +
          "  \n" +
          "  \n" +
          "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
          "		SET pWhereClause = '1=1' ;  \n" +
          "	END IF;	  \n" +
          "  \n" +
          "  \n" +
          "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
          "		SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
          "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
          "	ELSE	  \n" +
          "		SET rowNumWhere = '';  \n" +
          "	END IF;	  \n" +
          "  \n" +
          "  \n" +
          "	/* to get total count of rows */  \n" +
          "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );  \n" +
          "	PREPARE query1 FROM @SQLStatement1;  \n" +
          "	EXECUTE query1;  \n" +
          "	DEALLOCATE PREPARE query1;  \n" +
          "  \n" +
          "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
          "	PREPARE query2 FROM @SQLStatement2;  \n" +
          "	EXECUTE query2;  \n" +
          "	DEALLOCATE PREPARE query2;  \n" +
          "  \n" +
          "	DROP TEMPORARY TABLE Results;  \n" +
          "  \n" +
          "  \n" +
          "    END;  \n" +
            /* **************************** Add Script Version -> 23-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (124,'1.00','V1','Review Pricing All SP Changes - Vaibhav '," + userid + ");"
            );
            break;
        case 124:
            allDbChangesArray.push(
            /* **************************** New Script -> 23-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
           "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(      \n" +
           "	IN rfqAssyID int(1),      \n" +
           "	IN userID INT(1)      \n" +
           ")  \n" +
           "BEGIN      \n" +
           "DECLARE EXIT HANDLER FOR SQLEXCEPTION      \n" +
           "BEGIN      \n" +
           "	ROLLBACK;      \n" +
           "	RESIGNAL;      \n" +
           "END;      \n" +
           "DECLARE EXIT HANDLER FOR SQLWARNING      \n" +
           "  BEGIN      \n" +
           "	ROLLBACK;      \n" +
           "	RESIGNAL;      \n" +
           "END;      \n" +
           " DROP TEMPORARY TABLE if exists Results;      \n" +
           "  \n" +
           "    START TRANSACTION;      \n" +
           "  \n" +
           "# Select Consolidated rfq_lineitems      \n" +
           "  \n" +
           "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
           "		select rfqLineItemsID as rfqLineItemsID,attritionRate,isInstall,       \n" +
           "		isPurchase,partclassID,partTypeID,leadQty,isActive,isNoBidsPN,isDraft,      \n" +
           "		lineID,numOfPosition,rfqAssyID,uomID,ab.rfqAssyBomID,      \n" +
           "		sum(qpa2) qpa, cast((sum(adcost1)/sum(qpa2)) as decimal(10,5)) as valueAddedCost,      \n" +
           "		mfg,count(*)as multiple,group_concat(rfqLineItemsID) as consolidatedLineItemIDs      \n" +
           "		from       \n" +
           "		(select *,(qpa1*valueAddedCost)as adcost1, qpa1 as qpa2, group_concat(distinct(part)) mfg      \n" +
           "		from      \n" +
           "		(select b.rfqLineItemsID, a.valueAddedCost, a.refRFQLineItemID,       \n" +
           "		fun_getQPAOfLineItems(a.lineID,rfqAssyID)as qpa1, (fun_getQPAOfLineItems(a.lineID,rfqAssyID)* a.valueAddedCost)as addCost,       \n" +
           "		concat(b.mfgCodeID,' | ', b.mfgPNID ) as part,a.attritionRate,a.isInstall,       \n" +
           "		a.isPurchase,a.partclassID,a.partTypeID,a.leadQty,a.isActive,a.isNoBidsPN,a.isDraft,      \n" +
           "		a.lineID,a.numOfPosition,a.rfqAssyID,a.uomID,a.rfqAssyBomID      \n" +
           "		from rfq_lineitems_alternatepart b       \n" +
           "        join rfq_lineitems a on b.rfqLineItemsID = a.id AND a.rfqAssyID = rfqAssyID AND IFNULL(a.isDeleted,0) = 0     \n" +
           "        where IFNULL(b.isDeleted,0) = 0 and (b.mfgPNID is not NULL or b.mfgPN is not NULL)    \n" +
           "		group by b.rfqLineItemsID, b.mfgPN, concat(b.mfgCode,' | ', b.mfgPN)) aa      \n" +
           "		group by aa.rfqLineItemsID) ab       \n" +
           "		group by numOfPosition,isPurchase,mfg;     \n" +
           "  \n" +
           "# Delete consolidated lineItem if consolidatedLineItemIDs  change      \n" +
           "  \n" +
           "			update rfq_consolidated_mfgpn_lineitem cl      \n" +
           "			set       \n" +
           "			cl.isDeleted = true,      \n" +
           "			cl.deletedAt = UTC_TIMESTAMP(),      \n" +
           "			cl.deletedBy = userID      \n" +
           "			where cl.rfqAssyID = rfqAssyID and cl.id not in (      \n" +
           "            select * from(           \n" +
           "			select id from rfq_consolidated_mfgpn_lineitem rcl      \n" +
           "			join Results R on R.rfqAssyID = rcl.rfqAssyID       \n" +
           "			where rcl.rfqAssyID = rfqAssyID and rcl.id  is not NUll  and rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs      \n" +
           "            and IFNULL(rcl.isDeleted,0) = 0)a);      \n" +
           "  \n" +
           "  \n" +
           "# insert Consolidated lineItems       \n" +
           "  \n" +
           "        INSERT INTO `rfq_consolidated_mfgpn_lineitem`      \n" +
           "		(`rfqAssyBomID`,`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`partTypeID`,`partClassID`,      \n" +
           "		`leadQty`,`attritionRate`,`isActive`,`rfqLineItemID`,`uomID`,`isNoBidsPN`,`isDraft`,`qpa`,`createdAt`,`createdBy`,      \n" +
           "		`numOfPosition`,`isMultiple`,`valueAddedCost`,`consolidatedLineItemIDs`)      \n" +
           "		select R.`rfqAssyBomID`,R.`lineID`,R.`isInstall`,R.`isPurchase`,rfqAssyID `rfqAssyID`,R.`partTypeID`,      \n" +
           "		R.`partClassID`,R.`leadQty`,R.`attritionRate`,R.`isActive`,R.`rfqLineItemsID`,R.`uomID`,R.`isNoBidsPN`,R.`isDraft`,R.`qpa`, UTC_TIMESTAMP() `createdAt`,      \n" +
           "		userID `createdBy`, R.`numOfPosition`,      \n" +
           "		(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`, R.`valueAddedCost`,R.`consolidatedLineItemIDs`       \n" +
           "        from Results R      \n" +
           "		 left join rfq_consolidated_mfgpn_lineitem cl on cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs and cl.rfqAssyID = R.rfqAssyID and IFNULL(cl.isDeleted,0) = 0      \n" +
           "		 where cl.id is NUll;      \n" +
           "  \n" +
           "  \n" +
           "  \n" +
           "# insert Consolidated lineItems Quentity      \n" +
           "  \n" +
           "        INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`      \n" +
           "		(`qtyID`,`consolidateID`,`createdBy`,`createdAt`)      \n" +
           "		select rq.id `qtyID`, cl.id `consolidateID`,userID `createdBy`,UTC_TIMESTAMP() `createdAt`  from rfq_consolidated_mfgpn_lineitem cl      \n" +
           "		join rfq_assy_quantity rq on rq.rfqAssyID = cl.rfqAssyID AND IFNULL(rq.isDeleted,0) = 0      \n" +
           "        left join rfq_consolidate_mfgpn_lineitem_quantity clq on clq.consolidateID = cl.id and clq.qtyID = rq.id       \n" +
           "		where cl.rfqAssyID = rfqAssyID and cl.isDeleted = 0 and clq.id IS NULL;      \n" +
           "  \n" +
           "# Update Consilidated LineItems Quantity      \n" +
           "  \n" +
           "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (select * from Results) Rs, (select cl.id ,cl.qpa,cl.consolidatedLineItemIDs from rfq_consolidated_mfgpn_lineitem cl       \n" +
           "		where cl.rfqAssyID = rfqAssyID and cl.id  is NoT NUll       \n" +
           "            and IFNULL(cl.isDeleted,0) = 0) rcl       \n" +
           "		set       \n" +
           "		rq.updatedAt = UTC_TIMESTAMP(),      \n" +
           "        rq.updatedBy = userID,      \n" +
           "        rq.finalPrice = (CASE WHEN (rcl.qpa != Rs.qpa) THEN null WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE '0' END)      \n" +
           "		where  IFNULL(rq.isDeleted,0) = 0 and rcl.qpa != Rs.qpa and rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs and rq.consolidateID in(rcl.id);      \n" +
           "  \n" +
           "  \n" +
           "  \n" +
           "  \n" +
           "# Update Consilidated LineItems      \n" +
           "  \n" +
           "        UPDATE rfq_consolidated_mfgpn_lineitem cl, (select * from Results) R       \n" +
           "		set       \n" +
           "		cl.isInstall = R.isInstall ,      \n" +
           "		cl.isPurchase = R.isPurchase,      \n" +
           "		cl.numOfPosition = R.numOfPosition,      \n" +
           "		cl.attritionRate = R.attritionRate,      \n" +
           "		cl.leadQty = R.leadQty,      \n" +
           "		cl.valueAddedCost = R.valueAddedCost,      \n" +
           "        cl.updatedAt = UTC_TIMESTAMP(),      \n" +
           "        cl.rfqLineItemID = R.rfqLineItemsID,      \n" +
           "        cl.qpa = R.qpa,      \n" +
           "        cl.uomID = R.uomID,      \n" +
           "        cl.lineID = R.lineID,      \n" +
           "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,      \n" +
           "        cl.updatedBy = userID      \n" +
           "		where cl.rfqAssyID = rfqAssyID and cl.id  is NoT NUll and cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs      \n" +
           "            and IFNULL(cl.isDeleted,0) = 0;      \n" +
           "  \n" +
           "  \n" +
           "# delete from consolidated Alternatepart if lineItem removed      \n" +
           "  \n" +
           "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap      \n" +
           "		set       \n" +
           "        cap.isDeleted = true,      \n" +
           "        cap.deletedAt = UTC_TIMESTAMP(),      \n" +
           "		cap.deletedBy = userID      \n" +
           "		where  cap.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null        \n" +
           "        and IFNULL(cl.isDeleted,0) = 1);           \n" +
           "  \n" +
           "  \n" +
           "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem      \n" +
           "  \n" +
           "  \n" +
           "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate       \n" +
           "		set       \n" +
           "        isDeleted = true,      \n" +
           "        deletedAt = UTC_TIMESTAMP(),      \n" +
           "		deletedBy = userID      \n" +
           "        where id in(       \n" +
           "        select capID from (      \n" +
           "		select distinct(cap.id)as capID      \n" +
           "		from rfq_lineitems_alternatepart ap       \n" +
           "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID      \n" +
           "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID      \n" +
           "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID       \n" +
           "		join rfq_parttypemst pt on pt.id = rl.partTypeID AND pt.category != 3      \n" +
           "		where rl.rfqAssyID = rfqAssyID and cap.consolidateID IS not NULL and IFNULL(cl.isDeleted,0) = 0 and IFNULL(ap.isDeleted,0) = 1) as rcap);      \n" +
           "  \n" +
           "# delete Consolidated lineItems Quentity       \n" +
           "  \n" +
           "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (select * from rfq_assy_quantity where rfqAssyID = rfqAssyID and isDeleted = 1) rq    \n" +
           "		set       \n" +
           "        cq.isDeleted = true,      \n" +
           "        cq.deletedAt = UTC_TIMESTAMP(),      \n" +
           "		cq.deletedBy = userID      \n" +
           "		where cq.qtyID = rq.id and cq.consolidateID in(select cl.id from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and cl.id is Not Null        \n" +
           "        and IFNULL(cl.isDeleted,0) = 1);           \n" +
           "  \n" +
           "# delete Consolidated lineitem Quantity if rfq Quantity remove    \n" +
           "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (select * from rfq_assy_quantity q where q.rfqAssyID = rfqAssyID and IFNULL(q.isDeleted,0) = 1 ) rq    \n" +
           "		set       \n" +
           "        cq.isDeleted = true,      \n" +
           "        cq.deletedAt = UTC_TIMESTAMP(),      \n" +
           "		cq.deletedBy = userID      \n" +
           "        where cq.consolidateID in(select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = rfqAssyID and IFNULL(isDeleted, 0) = 0)        \n" +
           "        and rq.id = cq.qtyID and IFNULL(cq.isDeleted,0)= 0;        \n" +
           "  \n" +
           "# delete Consolidate lineItems       \n" +
           "  \n" +
           "		UPDATE rfq_consolidated_mfgpn_lineitem cl      \n" +
           "		set       \n" +
           "        cl.isDeleted = true,      \n" +
           "        cl.deletedAt = UTC_TIMESTAMP(),      \n" +
           "		cl.deletedBy = userID      \n" +
           "		where  cl.rfqAssyID = rfqAssyID and cl.id is Not Null  and IFNULL(cl.isDeleted,0) = 0      \n" +
           "		and cl.rfqLineItemID not in(select rfqLineItemsID from Results);              \n" +
           "  \n" +
           "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part       \n" +
           "  \n" +
           "        INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`      \n" +
           "		(`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`)      \n" +
           "		select distinct(ap.`mfgPN`),(select rcl.id from rfq_consolidated_mfgpn_lineitem rcl where rcl.rfqAssyID = rfqAssyID and rcl.lineID = rl.lineID and IFNULL(rcl.isDeleted,0) = 0) `consolidateID`,      \n" +
           "			ap.`mfgPNID`,ap.`mfgCodeID`, com.`PIDCode`, userID `createdBy`,UTC_TIMESTAMP() `createdAt`      \n" +
           "		from rfq_lineitems_alternatepart ap       \n" +
           "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID      \n" +
           "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID  \n" +
           "        join component com on com.id = ap.mfgPNID and IFNULL(com.isDeleted,0) = 0  \n" +
           "		left join rfq_consolidated_mfgpn_lineitem_alternate cap on cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID and cap.isDeleted = 0      \n" +
           "		where rl.rfqAssyID = rfqAssyID and ap.isDeleted = 0 and IFNULL(cl.isDeleted,0) = 0 and cap.consolidateID IS NULL;    \n" +
           "  \n" +
           "  \n" +
           "# Delete consolidated mfgPart if mfgPart Changed  \n" +
           "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (select a.id from rfq_consolidated_mfgpn_lineitem a where a.rfqAssyID = rfqAssyID and a.isDeleted = 0) rcl  \n" +
           "		set       \n" +
           "        cap.isDeleted = true,      \n" +
           "        cap.deletedAt = UTC_TIMESTAMP(),      \n" +
           "		cap.deletedBy = userID  \n" +
           "		where cap.consolidateID in (rcl.id) and cap.id not in (   \n" +
           "        select  distinct(cap.id)      \n" +
           "		from rfq_lineitems_alternatepart ap       \n" +
           "		join rfq_lineitems rl on rl.id = ap.rfqLineItemsID and rl.isDeleted = 0 and rl.rfqAssyID = rfqAssyID      \n" +
           "		join rfq_consolidated_mfgpn_lineitem cl on cl.lineID = rl.lineID and cl.rfqAssyID = rfqAssyID  \n" +
           "		where rl.rfqAssyID = rfqAssyID and cap.mfgPNID = ap.mfgPNID and cl.id = cap.consolidateID  and ap.isDeleted = 0 and IFNULL(cl.isDeleted,0) = 0);  \n" +
           "  \n" +
           "  \n" +
           " # delete Consolidated lineitem Quantity if selected alternate part remove    \n" +
           "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,   \n" +
           "        (select * from rfq_consolidated_mfgpn_lineitem cl where cl.rfqAssyID = rfqAssyID and IFNULL(cl.isDeleted,0) = 0 ) rcl,  \n" +
           "        (select consolidateID, PIDCode from rfq_consolidated_mfgpn_lineitem_alternate where IFNULL(isDeleted, 0) = 1) cap        \n" +
           "		set       \n" +
           "        cq.finalPrice = null,  \n" +
           "        cq.selectedPIDCode = null,  \n" +
           "        cq.selectedMpn = null,  \n" +
           "        cq.selectionMode = null,  \n" +
           "        cq.supplier = null,  \n" +
           "        cq.supplierStock = null,  \n" +
           "        cq.currentStock = null,  \n" +
           "        cq.grossStock = null,  \n" +
           "        cq.leadTime = null,  \n" +
           "        cq.min = null,  \n" +
           "        cq.mult = null,  \n" +
           "        cq.unitPrice = null,  \n" +
           "        cq.updatedAt = UTC_TIMESTAMP(),      \n" +
           "		cq.updatedBy = userID      \n" +
           "        where cq.consolidateID in(select consolidateID from rfq_consolidated_mfgpn_lineitem_alternate where IFNULL(isDeleted, 0) = 1)        \n" +
           "        and cq.consolidateID = cap.consolidateID and cq.selectedPIDCode = cap.PIDCode and IFNULL(cq.isDeleted,0)= 0;     \n" +
           "  \n" +
           "  \n" +
           "    COMMIT;      \n" +
           "    DROP TEMPORARY TABLE if exists Results;      \n" +
           "END;  \n" +
            /* **************************** Add Script Version -> 23-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (125,'1.00','V1','Consolidated data sp - shirish'," + userid + ");"
            );
            break;
        case 125:
            allDbChangesArray.push(
            /* **************************** New Script -> 23-08-2018  *********************************** */
            "ALTER TABLE rfq_lineitems  \n" +
            "ADD COLUMN mergeLines varchar(50) NULL;  \n" +
            "ALTER TABLE rfq_lineitems  \n" +
            "ADD COLUMN lineMergeStep tinyint(1) NULL;  \n" +
            "ALTER TABLE rfq_lineitems_errorcode  \n" +
            "CHANGE errorColor errorColor varchar(7) NULL;  \n" +
            "INSERT INTO `rfq_lineitems_errorcode` (`logicID`, `errorCode`, `errorColor`, `description`, `systemVariable`, `createdBy`, `createdAt`)   \n" +
            "SELECT * FROM  \n" +
            "(SELECT '14' logicID,'LM' errorCode, '' errorColor,'Line(s) <% Merged Item %> merged with line <% Item %>.' description,'<% Merged Item %>,<% Item %>' systemVariable,'1' createdBy, utc_timestamp() createdAt) a   \n" +
            "WHERE 14 NOT IN (SELECT logicID FROM rfq_lineitems_errorcode) LIMIT 1;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(    \n" +
            "	IN prfqAssyID INT        \n" +
            ")  \n" +
            "BEGIN        \n" +
            "	DROP temporary table if exists tempRfq_lineitems;        \n" +
            "    DROP temporary table if exists tempRfq_lineitemsAlt;        \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE tempRfq_lineitems AS            \n" +
            "	SELECT a.id, a.lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,         \n" +
            "    CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,        \n" +
            "    a.description, a.level, a.numOfPosition, a.customerRev, a.customerDescription,                    \n" +
            "			CONCAT(part.partTypeName, ' | ', c.name) partclassID, a.isInstall, a.isPurchase, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID,         \n" +
            "            a.dnpQty, a.dnpDesig, a.qpaDesignatorStep, a.mergeLines, a.lineMergeStep  \n" +
            "            FROM rfq_lineitems a         \n" +
            "	LEFT JOIN uoms b ON a.uomID = b.id and IFNULL(b.isDeleted,0) = 0        \n" +
            "    LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id and IFNULL(part.isDeleted,0) = 0        \n" +
            "    LEFT JOIN rfq_mountingtypemst c ON part.partclassID = c.id and IFNULL(c.isDeleted,0) = 0            \n" +
            "    WHERE IFNULL(a.isDeleted,0) = 0 and a.rfqAssyID = prfqAssyID;        \n" +
            "  \n" +
            "	SELECT b.id, b.lineID, b.qpa, b.refDesig,     \n" +
            "			(CASE WHEN mfgCodeID IS NOT NULL AND IFNULL(customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,    \n" +
            "            a.mfgCodeID, a.mfgPN, a.mfgPNID,        \n" +
            "			(CASE WHEN distMfgCodeID IS NOT NULL AND IFNULL(customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	    \n" +
            "            a.distMfgCodeID, a.distPN, a.distMfgPNID,         \n" +
            "            b.custPN, b.custPNID, b.uomID, a.description descriptionAlternate, b.description, b.level, b.numOfPosition, b.customerRev, b.customerDescription,        \n" +
            "			b.partclassID, b.isInstall, b.isPurchase, b.leadQty, b.attritionRate, b.valueAddedCost, b.refRFQLineItemID,         \n" +
            "            b.dnpQty, b.dnpDesig, a.id as rfqAlternatePartID, b.qpaDesignatorStep,      \n" +
            "			a.mfgVerificationStep, a.mfgDistMappingStep, a.mfgCodeStep, a.customerApproval, a.org_mfgCode, a.org_mfgPN,      \n" +
            "            a.org_distributor, a.org_distPN,      \n" +
            "			a.distVerificationStep, a.distCodeStep, a.getMFGPNStep, a.obsoletePartStep, a.mfgGoodPartMappingStep, a.mfgPNStep, a.distPNStep,    \n" +
            "            a.badMfgPN, a.distGoodPartMappingStep,  \n" +
            "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,  \n" +
            "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart  \n" +
            "            FROM rfq_lineitems_alternatepart a    \n" +
            "            LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0    \n" +
            "            LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0    \n" +
            "			JOIN tempRfq_lineitems b on a.rfqLineItemsID = b.id                  \n" +
            "			WHERE IFNULL(a.isDeleted,0) = 0  AND b.id is not null order by CAST(b.lineID AS SIGNED), a.id;        \n" +
            "END;  \n" +
            "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode`;  \n" +
            "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(    \n" +
            "	IN ppageIndex INT(11),    \n" +
            "	IN precordPerPage INT(11),    \n" +
            "	IN pOrderBy VARCHAR(255),    \n" +
            "	IN pWhereClause VARCHAR(21844)    \n" +
            ")  \n" +
            "BEGIN    \n" +
            "DECLARE pOffset INT(11);    \n" +
            "		DECLARE rowNumWhere VARCHAR(255) ;    \n" +
            "  \n" +
            "		CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
            "			SELECT id,(case When(rfq_lineitems_errorcode.logicID=1) then 'QPA/Designator'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 2) then 'MFG Invalid'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 3) then 'MFG Verification'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 4) then 'Distributor Verification'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 5) then 'MFG-Distributor Mapping'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 6) then 'Get MFGPN'     \n" +
            "              when(rfq_lineitems_errorcode.logicID = 7) then 'MFG Bad Part'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 8) then 'Check Obsolete Parts'     \n" +
            "              when(rfq_lineitems_errorcode.logicID = 9) then 'MFG PN Invalid'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 10) then 'Distributor Invalid'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 11) then 'Distributor PN Invalid'                   \n" +
            "              when(rfq_lineitems_errorcode.logicID = 12) then 'Customer Approval'    \n" +
            "              when(rfq_lineitems_errorcode.logicID = 13) then 'Distributor Bad Part'  \n" +
            "              when(rfq_lineitems_errorcode.logicID = 14) then 'Line Merge'  \n" +
            "              ELSE '' END) AS `logicName`,errorCode, errorColor,     \n" +
            "              description, systemVariable,logicID    \n" +
            "			FROM `rfq_lineitems_errorcode`    \n" +
            "			WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0;    \n" +
            "  \n" +
            "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"errorCode ASC\") ;    \n" +
            "		ELSE    \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
            "		END IF;	    \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
            "			SET pWhereClause = '1=1' ;    \n" +
            "		END IF;	    \n" +
            "  \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
            "		ELSE	    \n" +
            "			SET rowNumWhere = '';    \n" +
            "		END IF;	    \n" +
            "  \n" +
            "		/* to get total count of rows */    \n" +
            "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );    \n" +
            "		PREPARE query1 FROM @SQLStatement1;    \n" +
            "		EXECUTE query1;    \n" +
            "		DEALLOCATE PREPARE query1;    \n" +
            "  \n" +
            "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
            "		PREPARE query2 FROM @SQLStatement2;    \n" +
            "		EXECUTE query2;    \n" +
            "		DEALLOCATE PREPARE query2;    \n" +
            "  \n" +
            "		DROP TEMPORARY TABLE Results;    \n" +
            "  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 23-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (126,'1.00','V1','ALTER SP Sproc_GetRFQLineItemsByID AND Sproc_RetrieveRFQLineitemsErrorCode - Ravi'," + userid + ");"
            );
            break;
        case 126:
            allDbChangesArray.push(
            /* **************************** New Script -> 24-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLeadTimeRiskLineItems` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQLeadTimeRiskLineItems`(                \n" +
            "	IN ppageIndex INT(11),                \n" +
            "	IN precordPerPage INT(11),                \n" +
            "	IN pOrderBy VARCHAR(255),                \n" +
            "	IN pWhereClause VARCHAR(21844),                \n" +
            "	IN rfqAssyID INT(11),                \n" +
            "	IN puserID INT (11)          \n" +
            "    )  \n" +
            "BEGIN                \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);                \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;        \n" +
            "	    SET SESSION group_concat_max_len = 150000;                \n" +
            "	    SET @SQLString = NULL;             \n" +
            "	    SET @HavingClause = NULL;                 \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN                \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
            "		ELSE                \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                 \n" +
            "		END IF;	                \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                \n" +
            "			SET pWhereClause = '1=1' ;                \n" +
            "		END IF;	                \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
            "		ELSE	                \n" +
            "			SET rowNumWhere = '';                \n" +
            "		END IF;	                \n" +
            "		SELECT                \n" +
            "                      GROUP_CONCAT(DISTINCT                \n" +
            "				CONCAT(                \n" +
            "					'Max((IF(ra.requestQty = ''',                \n" +
            "						ra.requestQty,                \n" +
            "					''', (IFNULL(rq.leadTime,0)), null))) AS ''',                \n" +
            "						ra.requestQty,''''                \n" +
            "					)                \n" +
            "					),      \n" +
            "		GROUP_CONCAT(DISTINCT                \n" +
            "				CONCAT(                \n" +
            "					'Max((IF(ra.requestQty = ''',                \n" +
            "						ra.requestQty,                \n" +
            "					''', (IFNULL(rq.leadTime,0)), null))) < 16'      \n" +
            "					) SEPARATOR ' OR '                    \n" +
            "					)       \n" +
            "				INTO @SQLString,@HavingClause           \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                \n" +
            "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;              \n" +
            "			IF(@SQLString IS NOT NULL) THEN                \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                \n" +
            "					SELECT                 \n" +
            "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,               \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))                \n" +
            "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla     \n" +
            "						LEFT JOIN component c ON rla.mfgpnid=c.id     \n" +
            "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',               \n" +
            "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                \n" +
            "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'       \n" +
            "					GROUP BY rl.lineID');         \n" +
            "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	                \n" +
            "			END IF;                 \n" +
            "			PREPARE stmt FROM @SQLStatement;                \n" +
            "			EXECUTE stmt;	                \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                \n" +
            "			PREPARE query1 FROM @SQLStatement1;                \n" +
            "			EXECUTE query1;                \n" +
            "			DEALLOCATE PREPARE query1;                \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
            "			PREPARE query2 FROM @SQLStatement2;                \n" +
            "			EXECUTE query2;                \n" +
            "			DEALLOCATE PREPARE query2;                \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                \n" +
            "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                \n" +
            "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                \n" +
            "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                \n" +
            "			PREPARE query3 FROM @SQLStatement3;                \n" +
            "			EXECUTE query3;                \n" +
            "			DEALLOCATE PREPARE query3;                \n" +
            "  \n" +
            "  			SET @SQLStatement4 = CONCAT(\"        \n" +
            "				SELECT requestQty,         \n" +
            "					finalPrice,         \n" +
            "					unitPrice,        \n" +
            "					supplier,         \n" +
            "					selectedMpn,         \n" +
            "					selectionMode,       \n" +
            "					selectedPIDCode,       \n" +
            "					qtyID,         \n" +
            "					consolidateID      \n" +
            "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq             \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID         \n" +
            "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                \n" +
            "			PREPARE query4 FROM @SQLStatement4;                \n" +
            "			EXECUTE query4;                \n" +
            "			DEALLOCATE PREPARE query4;                \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;                  \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 24-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (127,'1.00','V1','ALTER SP Sproc_GetRFQLeadTimeRiskLineItems - Vaibhav'," + userid + ");"
            );
            break;
        case 127:
            allDbChangesArray.push(
            /* **************************** New Script -> 24-08-2018  *********************************** */
            "ALTER TABLE component  \n" +
            "CHANGE minQty minQty INT NULL;  \n" +
            "  \n" +
            "ALTER TABLE component  \n" +
            "CHANGE maxQty maxQty INT NULL;  \n" +
            "  \n" +
            "ALTER TABLE component  \n" +
            "CHANGE packageQty packageQty INT NULL;  \n" +
            /* **************************** Add Script Version -> 24-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (128,'1.00','V1','Component minQty, maxQty and packageQty optional - Ravi'," + userid + ");"
            );
            break;

        case 128:
            allDbChangesArray.push(
            /* **************************** New Script -> 13-08-2018  *********************************** */
           "DROP PROCEDURE IF EXISTS `Sproc_GetmaxComponentGroupValue` ;  \n" +
"CREATE PROCEDURE `Sproc_GetmaxComponentGroupValue`(	  \n" +
"	IN maxType VARCHAR(255),  \n" +
"	IN componentID INT,  \n" +
"	IN ismfg TINYINT  \n" +
"    )  \n" +
"BEGIN  \n" +
"      DECLARE maxvalueid INT;  \n" +
"        IF(ismfg=1) THEN  \n" +
"  \n" +
"  \n" +
"			SELECT IFNULL(`maxValue`,1) INTO maxvalueid FROM `identity` WHERE `type`= maxType  AND isdeleted=0 LIMIT 1;  \n" +
"			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)  \n" +
"			VALUES (maxvalueid,componentID,0,'Auto');  \n" +
"			UPDATE component SET aliasgroupID=maxvalueid,pid=componentID,updatedBy='Auto' WHERE id=componentID;  \n" +
"			UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,1)+1 WHERE `type`=maxType AND isdeleted=0;  \n" +
"			SELECT maxvalueid;  \n" +
"  \n" +
"  \n" +
"      ELSE  \n" +
"  \n" +
"			UPDATE component SET pid=componentID,updatedBy='Auto' WHERE id=componentID;  \n" +
"			SELECT maxvalueid;  \n" +
"      END IF;  \n" +
"    END;  \n" +
"DROP PROCEDURE IF EXISTS `Sproc_setComponentAlias` ;  \n" +
"CREATE PROCEDURE `Sproc_setComponentAlias`(	  \n" +
"	IN mfgpartno VARCHAR(255),  \n" +
"	IN componentID INT  \n" +
"  \n" +
"    )  \n" +
"BEGIN  \n" +
"      DECLARE aliasgroup INT;  \n" +
"  \n" +
"  \n" +
"  \n" +
"			SELECT aliasgroupID INTO aliasgroup FROM `component` WHERE mfgPN= mfgpartno  AND isdeleted=0 LIMIT 1;  \n" +
"			IF(aliasgroup IS NOT NULL) THEN  \n" +
"			INSERT INTO component_alias (aliasgroupID,componentID,isDeleted,createdBy)  \n" +
"			VALUES (aliasgroup,componentID,0,'Auto');  \n" +
"			UPDATE component SET aliasgroupID=aliasgroup,updatedBy='Auto' WHERE id=componentID;  \n" +
"			SELECT aliasgroup;  \n" +
"			END IF;  \n" +
"  \n" +
"    END;  \n" +

            /* **************************** Add Script Version -> 13-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (129,'1.00','V1','Component Verification issue-Champak'," + userid + ");"
            );
            break;
        case 129:
            allDbChangesArray.push(
            /* **************************** New Script -> 25-08-2018  *********************************** */
            "DROP TABLE IF EXISTS `component_processmaterial`;  \n" +
            "CREATE TABLE `component_processmaterial` (  \n" +
            "  `id` INT(11) NOT NULL AUTO_INCREMENT,  \n" +
            "  `refComponentID` INT(11) DEFAULT NULL,  \n" +
            "  `isDeleted` TINYINT(1) NOT NULL DEFAULT '0',  \n" +
            "  `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
            "  `createdBy` VARCHAR(255) NOT NULL,  \n" +
            "  `updatedAt` DATETIME DEFAULT NULL,  \n" +
            "  `updatedBy` VARCHAR(255) DEFAULT NULL,  \n" +
            "  `deletedAt` DATETIME DEFAULT NULL,  \n" +
            "  `deletedBy` VARCHAR(255) DEFAULT NULL,  \n" +
            "  `processMaterialgroupID` INT(11) DEFAULT NULL,  \n" +
            "  PRIMARY KEY (`id`),  \n" +
            "  KEY `refComponentID` (`refComponentID`),  \n" +
            "  CONSTRAINT `FK_component_processmaterial_refComponentID` FOREIGN KEY (`refComponentID`) REFERENCES `component` (`id`)  \n" +
            ");  \n" +
            /* **************************** New Script -> 25-08-2018  *********************************** */
            "ALTER TABLE component ADD COLUMN processMaterialgroupID INT;  \n" +
            /* **************************** Add Script Version -> 25-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (130,'1.00','V1',' New table component_processmaterial - KETAN '," + userid + ");"
          );
            break;
        case 130:
            allDbChangesArray.push(
            /* **************************** New Script -> 25-08-2018  *********************************** */
            "UPDATE rfq_lineitems_errorcode SET errorCode = 'LM' WHERE logicID = 14;  \n" +
            /* **************************** Add Script Version -> 25-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (131,'1.00','V1',' Update rfq_lineitems_errorcode - Ravi'," + userid + ");"
          );
            break;
        case 131:
            allDbChangesArray.push(
            /* **************************** New Script -> 25-08-2018  *********************************** */
            "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            "  `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`, `createdBy`,  \n" +
            "  `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            "  VALUES('Manufacturer Component','0','0',NULL,'app.component.distributor','/:mfgType',NULL,NULL,  \n" +
            "        (SELECT a.pageID FROM page_detail a WHERE a.pageName='Component List'),'0','14','2','mdi mdi-video-input-component','1',NOW(),NOW(),  \n" +
            "        NULL,'1',NULL,NULL,'0',NULL);  \n" +
            /* **************************** Add Script Version -> 25-08-2018 *********************************** */
            "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,  \n" +
            "  `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`, `createdBy`,  \n" +
            "  `updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            "  VALUES('Distributor Component','0','0',NULL,'app.component.manufacturer','/:mfgType',NULL,NULL,  \n" +
            "        (SELECT a.pageID FROM page_detail a WHERE a.pageName='Component List'),'0','14','2','mdi mdi-video-input-component','1',NOW(),NOW(),  \n" +
            "        NULL,'1',NULL,NULL,'0',NULL);  \n" +
            /* **************************** Add Script Version -> 25-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetmaxComponentAliasGroupValue` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetmaxComponentAliasGroupValue`(    \n" +
            "	IN maxType VARCHAR(255)    \n" +
            "    )  \n" +
            "BEGIN    \n" +
            " 	SELECT `maxValue`,id FROM `identity` WHERE `type`= maxType AND isdeleted=0;    \n" +
            "	UPDATE `identity` SET `maxvalue`=IFNULL(`maxvalue`,0)+1 WHERE `type`=maxType AND isdeleted=0;    \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 25-08-2018 *********************************** */
            "DROP VIEW IF EXISTS `vu_component_dist_comp_details` ;  \n" +
            "CREATE VIEW `vu_component_dist_comp_details` AS (  \n" +
            "SELECT  \n" +
            "  `a`.`mfgPN`        AS `MFGPN`,  \n" +
            "  `a`.`mfgcodeID`    AS `mfgCodeId`,  \n" +
            "  (SELECT  \n" +
            "     `mfgcodemst`.`mfgCode`  \n" +
            "   FROM `mfgcodemst`  \n" +
            "   WHERE (`mfgcodemst`.`id` = `a`.`mfgcodeID`)) AS `mfgcode`,  \n" +
            "  `a`.`aliasgroupID` AS `aliasgroupid`  \n" +
            "FROM `component` `a`  \n" +
            "WHERE (`a`.`mfgcodeID` IN(SELECT  \n" +
            "                            `mfgcodemst`.`id`  \n" +
            "                          FROM `mfgcodemst`  \n" +
            "                          WHERE (`mfgcodemst`.`mfgType` = 'MFG'))  \n" +
            "       AND (`a`.`aliasgroupID` IS NOT NULL)));  \n" +
            /* **************************** Add Script Version -> 25-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetComponentList` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetComponentList`(	    \n" +
            "	IN ppageIndex INT(11),    \n" +
            "	IN precordPerPage INT(11),    \n" +
            "	IN pOrderBy VARCHAR(255),	    \n" +
            "	IN pWhereClause VARCHAR(21844),  \n" +
            "	IN pIsMFG TINYINT(1)  \n" +
            "    )  \n" +
            "BEGIN    \n" +
            "  \n" +
            "	DECLARE pOffset INT(11);    \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
            "	/* DECLARE SQLStatement varchar(255); */    \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS    \n" +
            "		SELECT co.*, mf.mfgCode,  \n" +
            "		gc.gencCategoryName AS partStatusValue,    \n" +
            "		mf.mfgType,  \n" +
            "		vu_co.MFGPN AS AliasMFGPN,  \n" +
            "		vu_co.mfgcode AS AliasMFGCode,  \n" +
            "		(CASE WHEN (`co`.`rohsComplient` = 0) THEN 'No'     \n" +
            "					WHEN (`co`.`rohsComplient` = 1) THEN 'Yes' ELSE '' END) AS `rohsComplientConvertedValue`    \n" +
            "		FROM component co      \n" +
            "		LEFT JOIN mfgcodemst mf ON co.mfgcodeID = mf.id AND IFNULL(mf.isdeleted,0) = 0   \n" +
            "		LEFT JOIN genericcategory gc ON gc.gencCategoryID = co.partStatus   \n" +
            "		LEFT JOIN vu_component_dist_comp_details vu_co ON co.aliasgroupID = vu_co.aliasgroupID   \n" +
            "		WHERE IFNULL(co.isdeleted,0) = 0;    \n" +
            "  \n" +
            "	IF (pOrderBy IS NOT NULL) THEN    \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
            "	ELSE    \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN DESC\") ;    \n" +
            "	END IF;	    \n" +
            "  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
            "		SET pWhereClause = '1=1' ;    \n" +
            "	END IF;	    \n" +
            "  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
            "	ELSE	    \n" +
            "		SET rowNumWhere = '';    \n" +
            "	END IF;	    \n" +
            "  \n" +
            "	IF pIsMFG THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''MFG''' );    \n" +
            "	ELSE  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''DIST''' );    \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* to get total count of rows */    \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );    \n" +
            "	PREPARE query1 FROM @SQLStatement1;    \n" +
            "	EXECUTE query1;    \n" +
            "	DEALLOCATE PREPARE query1;    \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
            "	PREPARE query2 FROM @SQLStatement2;    \n" +
            "	EXECUTE query2;    \n" +
            "	DEALLOCATE PREPARE query2;    \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE Results;    \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 25-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (132,'1.00','V1',' Create View and Alter SP for compoenent data and Alias  - Vaibhav'," + userid + ");"
          );
            break;
        case 132:
            allDbChangesArray.push(
            /* **************************** New Script -> 27-08-2018  *********************************** */
            "ALTER TABLE rfq_lineitems_alternatepart  \n" +
            "ADD CONSTRAINT FK_rfq_lineitems_alternatepart_distMfgCodeID FOREIGN KEY (distMfgCodeID) REFERENCES mfgcodemst(id);  \n" +
            "  \n" +
            "ALTER TABLE rfq_lineitems_alternatepart  \n" +
            "ADD CONSTRAINT FK_rfq_lineitems_alternatepart_distMfgPNID FOREIGN KEY (distMfgPNID) REFERENCES component(id);  \n" +
            "  \n" +
            "ALTER TABLE rfq_lineitems_alternatepart  \n" +
            "ADD CONSTRAINT FK_rfq_lineitems_alternatepart_mfgCodeID FOREIGN KEY (mfgCodeID) REFERENCES mfgcodemst(id);  \n" +
            "  \n" +
            "ALTER TABLE rfq_lineitems_alternatepart  \n" +
            "ADD CONSTRAINT FK_rfq_lineitems_alternatepart_mfgPNID FOREIGN KEY (mfgPNID) REFERENCES component(id);  \n" +
            "  \n" +
            "ALTER TABLE rfq_lineitems_alternatepart  \n" +
            "ADD CONSTRAINT FK_rfq_lineitems_alternatepart_rfqAssyBomID FOREIGN KEY (rfqAssyBomID) REFERENCES rfq_assy_bom(id);  \n" +
            "  \n" +
            "ALTER TABLE rfq_lineitems_alternatepart  \n" +
            "ADD CONSTRAINT FK_rfq_lineitems_alternatepart_rfqAssyID FOREIGN KEY (rfqAssyID) REFERENCES rfq_assemblies(id);  \n" +
            "  \n" +
            "ALTER TABLE rfq_lineitems  \n" +
            "ADD CONSTRAINT FK_rfq_lineitems_custPNID FOREIGN KEY (custPNID) REFERENCES component_cust_alias_rev(id);  \n" +
            "  \n" +
            "ALTER TABLE rfq_lineitems  \n" +
            "ADD CONSTRAINT FK_rfq_lineitems_uomID FOREIGN KEY (uomID) REFERENCES uoms(id);  \n" +
            "  \n" +
            "ALTER TABLE rfq_lineitems  \n" +
            "ADD CONSTRAINT FK_rfq_lineitems_partTypeID FOREIGN KEY (partTypeID) REFERENCES rfq_parttypemst(id);  \n" +
            "  \n" +
            "ALTER TABLE rfq_lineitems  \n" +
            "ADD CONSTRAINT FK_rfq_lineitems_partclassID FOREIGN KEY (partclassID) REFERENCES rfq_mountingtypemst(id);  \n" +
            /* **************************** Add Script Version -> 27-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (133,'1.00','V1','Add Foreign keys for RFQ_LineItems and RFQ_LineItems_AlternateParts - Ravi'," + userid + ");"
          );
            break;
        case 133:
            allDbChangesArray.push(
            /* **************************** New Script -> 27-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQSuggestedAlternative` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQSuggestedAlternative`(                  \n" +
            "	IN ppageIndex INT(11),                  \n" +
            "	IN precordPerPage INT(11),                  \n" +
            "	IN pOrderBy VARCHAR(255),                  \n" +
            "	IN pWhereClause VARCHAR(21844),                  \n" +
            "	IN rfqAssyID INT(11),                  \n" +
            "	IN puserID INT (11)            \n" +
            "    )  \n" +
            "BEGIN                  \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);                  \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;    \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN                  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
            "		ELSE                  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                   \n" +
            "		END IF;	                  \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                  \n" +
            "			SET pWhereClause = '1=1' ;                  \n" +
            "		END IF;	                  \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
            "		ELSE	                  \n" +
            "			SET rowNumWhere = '';                  \n" +
            "		END IF;	                              \n" +
            "  \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                  \n" +
            "					SELECT                   \n" +
            "						rl.id,    \n" +
            "						rl.isPurchase,     \n" +
            "						rl.lineID,    \n" +
            "						rl.rfqLineItemID,    \n" +
            "						rl.rfqAssyBomID,    \n" +
            "						rl.rfqAssyID,                    \n" +
            "						rp.partTypeName,    \n" +
            "						rm.name,        \n" +
            "						rq.selectedPIDCode,    \n" +
            "						(select rohsComplient from component where PIDCode=rq.selectedPIDCode LIMIT 1) AS selectedRoHSStatus,    \n" +
            "						(SELECT gc.gencCategoryName FROM genericcategory gc        \n" +
            "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus        \n" +
            "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn) AS PartStatus,        \n" +
            "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL) AS LTBDate,    \n" +
            "						(SELECT GROUP_CONCAT(DISTINCT(PIDCode),''@@@'', rohsComplient,''@@@'',IFNULL(feature,\"\"))    \n" +
            "						FROM component     \n" +
            "						WHERE PIDCode <> rq.selectedPIDCode  AND id IN     \n" +
            "							(SELECT componentID     \n" +
            "								FROM component_alternatepn     \n" +
            "								WHERE aliasgroupID IN     \n" +
            "								(SELECT altenetgroupID     \n" +
            "									FROM component     \n" +
            "									WHERE PIDCode = rq.selectedPIDCode     \n" +
            "									AND deletedAt IS NULL AND isDeleted=0    \n" +
            "								)    \n" +
            "							)    \n" +
            "						) AS AlternatePN    \n" +
            "						FROM rfq_consolidated_mfgpn_lineitem rl                  \n" +
            "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                  \n" +
            "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                          \n" +
            "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                           \n" +
            "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                \n" +
            "						WHERE rl.isdeleted=0     \n" +
            "						AND rl.rfqAssyID=',rfqAssyID,'         \n" +
            "						AND rq.selectedMpn IN (SELECT mfgPN FROM component         \n" +
            "							WHERE deletedAt IS NULL     \n" +
            "							AND partstatus IN (    \n" +
            "									SELECT gencCategoryID FROM genericcategory     \n" +
            "									WHERE deletedAt IS NULL     \n" +
            "									AND gencCategoryName IN (\"Not For New Design\",\"Obsolete\")    \n" +
            "								)    \n" +
            "							)    \n" +
            "						GROUP BY rl.lineID');                    \n" +
            "			PREPARE stmt FROM @SQLStatement;                  \n" +
            "			EXECUTE stmt;	                  \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                  \n" +
            "			PREPARE query1 FROM @SQLStatement1;                  \n" +
            "			EXECUTE query1;                  \n" +
            "			DEALLOCATE PREPARE query1;                  \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
            "			PREPARE query2 FROM @SQLStatement2;                  \n" +
            "			EXECUTE query2;                  \n" +
            "			DEALLOCATE PREPARE query2;                  \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                  \n" +
            "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                  \n" +
            "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                  \n" +
            "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                  \n" +
            "			PREPARE query3 FROM @SQLStatement3;                  \n" +
            "			EXECUTE query3;                  \n" +
            "			DEALLOCATE PREPARE query3;                  \n" +
            "  \n" +
            "			SET @SQLStatement4 = CONCAT(\"          \n" +
            "				SELECT requestQty,           \n" +
            "					finalPrice,           \n" +
            "					unitPrice,          \n" +
            "					supplier,           \n" +
            "					selectedMpn,           \n" +
            "					selectionMode,          \n" +
            "					qtyID,           \n" +
            "					consolidateID,      \n" +
            "					selectedPIDCode,          \n" +
            "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus          \n" +
            "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq               \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID           \n" +
            "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                  \n" +
            "			PREPARE query4 FROM @SQLStatement4;                  \n" +
            "			EXECUTE query4;                  \n" +
            "			DEALLOCATE PREPARE query4;                  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;                    \n" +
            "    END;  \n" +
            /* **************************** New Script -> 27-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLeadTimeRiskLineItems` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQLeadTimeRiskLineItems`(                  \n" +
            "	IN ppageIndex INT(11),                  \n" +
            "	IN precordPerPage INT(11),                  \n" +
            "	IN pOrderBy VARCHAR(255),                  \n" +
            "	IN pWhereClause VARCHAR(21844),                  \n" +
            "	IN rfqAssyID INT(11),                  \n" +
            "	IN puserID INT (11)            \n" +
            "    )  \n" +
            "BEGIN                  \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);                  \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;          \n" +
            "	    SET SESSION group_concat_max_len = 150000;                  \n" +
            "	    SET @SQLString = NULL;               \n" +
            "	    SET @HavingClause = NULL;                   \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN                  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
            "		ELSE                  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                   \n" +
            "		END IF;	                  \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                  \n" +
            "			SET pWhereClause = '1=1' ;                  \n" +
            "		END IF;	                  \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
            "		ELSE	                  \n" +
            "			SET rowNumWhere = '';                  \n" +
            "		END IF;	                  \n" +
            "		SELECT                  \n" +
            "                      GROUP_CONCAT(DISTINCT                  \n" +
            "				CONCAT(                  \n" +
            "					'Max((IF(ra.requestQty = ''',                  \n" +
            "						ra.requestQty,                  \n" +
            "					''', (IFNULL(rq.leadTime,0)), null))) AS ''',                  \n" +
            "						ra.requestQty,''''                  \n" +
            "					)                  \n" +
            "					),        \n" +
            "		GROUP_CONCAT(DISTINCT                  \n" +
            "				CONCAT(                  \n" +
            "					'Max((IF(ra.requestQty = ''',                  \n" +
            "						ra.requestQty,                  \n" +
            "					''', (IFNULL(rq.leadTime,0)), null))) < 16'        \n" +
            "					) SEPARATOR ' OR '                      \n" +
            "					)         \n" +
            "				INTO @SQLString,@HavingClause             \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                  \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                  \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                  \n" +
            "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                \n" +
            "			IF(@SQLString IS NOT NULL) THEN                  \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                  \n" +
            "					SELECT                   \n" +
            "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,       \n" +
            "					  rl.qpa,            \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))                  \n" +
            "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla       \n" +
            "						LEFT JOIN component c ON rla.mfgpnid=c.id       \n" +
            "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                 \n" +
            "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                  \n" +
            "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                  \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                  \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'         \n" +
            "					GROUP BY rl.lineID');           \n" +
            "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	                  \n" +
            "			END IF;                   \n" +
            "			PREPARE stmt FROM @SQLStatement;                  \n" +
            "			EXECUTE stmt;	                  \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                  \n" +
            "			PREPARE query1 FROM @SQLStatement1;                  \n" +
            "			EXECUTE query1;                  \n" +
            "			DEALLOCATE PREPARE query1;                  \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
            "			PREPARE query2 FROM @SQLStatement2;                  \n" +
            "			EXECUTE query2;                  \n" +
            "			DEALLOCATE PREPARE query2;                  \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                  \n" +
            "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                  \n" +
            "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                  \n" +
            "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                  \n" +
            "			PREPARE query3 FROM @SQLStatement3;                  \n" +
            "			EXECUTE query3;                  \n" +
            "			DEALLOCATE PREPARE query3;                  \n" +
            "  \n" +
            "  			SET @SQLStatement4 = CONCAT(\"          \n" +
            "				SELECT requestQty,           \n" +
            "					finalPrice,           \n" +
            "					unitPrice,          \n" +
            "					supplier,           \n" +
            "					selectedMpn,           \n" +
            "					selectionMode,         \n" +
            "					selectedPIDCode,        \n" +
            "					rq.min,rq.mult,          \n" +
            "					qtyID,             \n" +
            "					consolidateID,       \n" +
            "					currentStock,      \n" +
            "					leadTime,       \n" +
            "					supplierStock,      \n" +
            "					grossStock      \n" +
            "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq               \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID           \n" +
            "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                  \n" +
            "			PREPARE query4 FROM @SQLStatement4;                  \n" +
            "			EXECUTE query4;                  \n" +
            "			DEALLOCATE PREPARE query4;                  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;                    \n" +
            "    END;  \n" +
            /* **************************** New Script -> 27-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                  \n" +
            "	IN ppageIndex INT(11),                  \n" +
            "	IN precordPerPage INT(11),                  \n" +
            "	IN pOrderBy VARCHAR(255),                  \n" +
            "	IN pWhereClause VARCHAR(21844),                  \n" +
            "	IN rfqAssyID INT(11),                  \n" +
            "	IN puserID INT (11)            \n" +
            "    )  \n" +
            "BEGIN                  \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);                  \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;              \n" +
            "	    SET @SQLString = NULL;               \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN                  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
            "		ELSE                  \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                   \n" +
            "		END IF;	                  \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                  \n" +
            "			SET pWhereClause = '1=1' ;                  \n" +
            "		END IF;	                  \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
            "		ELSE	                  \n" +
            "			SET rowNumWhere = '';                  \n" +
            "		END IF;	                  \n" +
            "		SELECT          \n" +
            "                     GROUP_CONCAT(DISTINCT          \n" +
            "				CONCAT(          \n" +
            "					'Max((IF(ra.requestQty = ''',          \n" +
            "						ra.requestQty,          \n" +
            "					''', rq.finalPrice, null))) AS ''',          \n" +
            "						ra.requestQty,''''          \n" +
            "					)          \n" +
            "					) INTO @SQLString          \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                  \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                  \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                  \n" +
            "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                \n" +
            "			IF(@SQLString IS NOT NULL) THEN                  \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                  \n" +
            "					SELECT                   \n" +
            "						rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                    \n" +
            "						rp.partTypeName, rm.name,        \n" +
            "						(SELECT gc.gencCategoryName FROM genericcategory gc        \n" +
            "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus        \n" +
            "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn) AS PartStatus,        \n" +
            "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL) AS LTBDate,        \n" +
            "						(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))                \n" +
            "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla     \n" +
            "						LEFT JOIN component c ON rla.mfgpnid=c.id     \n" +
            "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                   \n" +
            "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                  \n" +
            "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                  \n" +
            "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                          \n" +
            "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                           \n" +
            "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'         \n" +
            "						AND rq.selectedMpn IN (SELECT mfgPN FROM component         \n" +
            "					WHERE deletedAt IS NULL AND partstatus IN         \n" +
            "						(SELECT gencCategoryID FROM genericcategory         \n" +
            "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Not For New Design\",\"Obsolete\")))        \n" +
            "					GROUP BY rl.lineID');                    \n" +
            "			END IF;         \n" +
            "			PREPARE stmt FROM @SQLStatement;                  \n" +
            "			EXECUTE stmt;	                  \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                  \n" +
            "			PREPARE query1 FROM @SQLStatement1;                  \n" +
            "			EXECUTE query1;                  \n" +
            "			DEALLOCATE PREPARE query1;                  \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
            "			PREPARE query2 FROM @SQLStatement2;                  \n" +
            "			EXECUTE query2;                  \n" +
            "			DEALLOCATE PREPARE query2;                  \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                  \n" +
            "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                  \n" +
            "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                  \n" +
            "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                  \n" +
            "			PREPARE query3 FROM @SQLStatement3;                  \n" +
            "			EXECUTE query3;                  \n" +
            "			DEALLOCATE PREPARE query3;                  \n" +
            "  \n" +
            "			SET @SQLStatement4 = CONCAT(\"          \n" +
            "				SELECT requestQty,           \n" +
            "					finalPrice,           \n" +
            "					unitPrice,          \n" +
            "					supplier,           \n" +
            "					selectedMpn,           \n" +
            "					selectionMode,          \n" +
            "					qtyID,           \n" +
            "					consolidateID,      \n" +
            "					selectedPIDCode,          \n" +
            "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus          \n" +
            "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq               \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID           \n" +
            "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                  \n" +
            "			PREPARE query4 FROM @SQLStatement4;                  \n" +
            "			EXECUTE query4;                  \n" +
            "			DEALLOCATE PREPARE query4;                  \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;                    \n" +
            "    END;  \n" +
            /* **************************** New Script -> 27-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQNotQuotedLineItems` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQNotQuotedLineItems`(                    \n" +
            "	IN ppageIndex INT(11),                    \n" +
            "	IN precordPerPage INT(11),                    \n" +
            "	IN pOrderBy VARCHAR(255),                    \n" +
            "	IN pWhereClause VARCHAR(21844),                    \n" +
            "	IN rfqAssyID INT(11),                    \n" +
            "	IN puserID INT (11)              \n" +
            "    )  \n" +
            "BEGIN                    \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);                    \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;                \n" +
            "	    SET @SQLString = NULL;                      \n" +
            "	    SET @HavingClause = NULL;          \n" +
            "	    SET SESSION group_concat_max_len = 150000;                          \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN                    \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                    \n" +
            "		ELSE                    \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;                     \n" +
            "		END IF;	                    \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                    \n" +
            "			SET pWhereClause = '1=1' ;                    \n" +
            "		END IF;	                    \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                     \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                    \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                    \n" +
            "		ELSE	                    \n" +
            "			SET rowNumWhere = '';                    \n" +
            "		END IF;	                    \n" +
            "		SELECT                    \n" +
            "                      GROUP_CONCAT(DISTINCT                    \n" +
            "				CONCAT(                    \n" +
            "					'Max((IF(ra.requestQty = ''',                    \n" +
            "						ra.requestQty,                    \n" +
            "					''', rq.finalPrice, null))) AS ''',                    \n" +
            "						ra.requestQty,''''                    \n" +
            "					)                    \n" +
            "					),                \n" +
            "			GROUP_CONCAT(DISTINCT                    \n" +
            "				CONCAT(                    \n" +
            "					'Max((IF(ra.requestQty = ''',                    \n" +
            "						ra.requestQty,                    \n" +
            "					''', rq.finalPrice, null))) IS NULL'                    \n" +
            "					) SEPARATOR ' OR '                   \n" +
            "					)                \n" +
            "				INTO @SQLString, @HavingClause                \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                    \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                    \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                    \n" +
            "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                  \n" +
            "			IF(@SQLString IS NOT NULL) THEN                    \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                    \n" +
            "					SELECT                     \n" +
            "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,       \n" +
            "					  (SELECT gc.gencCategoryName FROM genericcategory gc        \n" +
            "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus        \n" +
            "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn) AS PartStatus,        \n" +
            "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL) AS LTBDate,                       \n" +
            "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,        \n" +
            "					(SELECT         \n" +
            "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                  \n" +
            "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN         \n" +
            "                                     component c ON rla.mfgpnid=c.id         \n" +
            "                                     LEFT JOIN mfgcodemst mg ON          \n" +
            "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                    \n" +
            "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))                \n" +
            "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla     \n" +
            "						LEFT JOIN component c ON rla.mfgpnid=c.id     \n" +
            "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',    \n" +
            "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                    \n" +
            "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                    \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                    \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                  \n" +
            "  \n" +
            "					-- SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause, ' OR partstatus IN         \n" +
            "					-- 	(SELECT gencCategoryName FROM genericcategory         \n" +
            "					-- WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Obsolete\"))');              \n" +
            "  \n" +
            "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                         \n" +
            "			END IF;                 \n" +
            "			PREPARE stmt FROM @SQLStatement;                    \n" +
            "			EXECUTE stmt;	                    \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                    \n" +
            "			PREPARE query1 FROM @SQLStatement1;                    \n" +
            "			EXECUTE query1;                    \n" +
            "			DEALLOCATE PREPARE query1;                    \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                    \n" +
            "			PREPARE query2 FROM @SQLStatement2;                    \n" +
            "			EXECUTE query2;                    \n" +
            "			DEALLOCATE PREPARE query2;                    \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT distinct ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                    \n" +
            "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID        \n" +
            "			   WHERE  ra.rfqAssyID=\",rfqAssyID);                    \n" +
            "			PREPARE query3 FROM @SQLStatement3;                    \n" +
            "			EXECUTE query3;                    \n" +
            "			DEALLOCATE PREPARE query3;                    \n" +
            "  \n" +
            "  			SET @SQLStatement4 = CONCAT(\"            \n" +
            "				SELECT requestQty,             \n" +
            "					finalPrice,             \n" +
            "					unitPrice,            \n" +
            "					supplier,       \n" +
            "					rq.min,rq.mult,           \n" +
            "					selectedMpn,             \n" +
            "					selectionMode,            \n" +
            "					selectedPIDCode,          \n" +
            "					qtyID,             \n" +
            "					consolidateID,       \n" +
            "					currentStock,      \n" +
            "					leadTime,       \n" +
            "					supplierStock,      \n" +
            "					grossStock,               \n" +
            "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus            \n" +
            "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                 \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID             \n" +
            "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                    \n" +
            "			PREPARE query4 FROM @SQLStatement4;                    \n" +
            "			EXECUTE query4;                    \n" +
            "			DEALLOCATE PREPARE query4;                    \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;                      \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 27-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (134,'1.00','V1','Review Pricing SP Updated - Vaibhav'," + userid + ");"
          );
            break;
        case 134:
            allDbChangesArray.push(
            /* **************************** New Script -> 28-08-2018  *********************************** */
            "DROP VIEW IF EXISTS `vu_component_dist_comp_details`;  \n" +
            "CREATE VIEW `vu_component_dist_comp_details` AS   \n" +
            "(select `a`.`mfgPN` AS `MFGPN`, `a`.`id` as `compID`,`a`.`mfgcodeID` AS `mfgCodeId`,  \n" +
            "(select `mfgcodemst`.`mfgCode` from `mfgcodemst` where   \n" +
            "(`mfgcodemst`.`id` = `a`.`mfgcodeID`)) AS `mfgcode`,`a`.`aliasgroupID` AS `aliasgroupid`  \n" +
            " from `component` `a`   \n" +
            " where (`a`.`mfgcodeID` in   \n" +
            " (select `mfgcodemst`.`id` from `mfgcodemst`   \n" +
            " where (`mfgcodemst`.`mfgType` = 'MFG')) and (`a`.`aliasgroupID` is not null)));  \n" +
            /* **************************** Add Script Version -> 28-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (135,'1.00','V1','view component dist detail - shirish'," + userid + ");"
            );
            break;
        case 135:
            allDbChangesArray.push(
            /* **************************** New Script -> 28-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetComponentList`;  \n" +
            "CREATE PROCEDURE `Sproc_GetComponentList`(	      \n" +
            "	IN ppageIndex INT(11),      \n" +
            "	IN precordPerPage INT(11),      \n" +
            "	IN pOrderBy VARCHAR(255),	      \n" +
            "	IN pWhereClause VARCHAR(21844),    \n" +
            "	IN pIsMFG TINYINT(1)    \n" +
            "    )  \n" +
            "BEGIN      \n" +
            "  \n" +
            "	DECLARE pOffset INT(11);      \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
            "	/* DECLARE SQLStatement varchar(255); */      \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS      \n" +
            "		SELECT co.*, mf.mfgCode,    \n" +
            "		gc.gencCategoryName AS partStatusValue,      \n" +
            "		mf.mfgType,    \n" +
            "		vu_co.MFGPN AS AliasMFGPN,    \n" +
            "		vu_co.mfgcode AS AliasMFGCode,    \n" +
            "		(CASE WHEN (`co`.`rohsComplient` = 0) THEN 'No'       \n" +
            "					WHEN (`co`.`rohsComplient` = 1) THEN 'Yes' ELSE '' END) AS `rohsComplientConvertedValue`      \n" +
            "		FROM component co        \n" +
            "		LEFT JOIN mfgcodemst mf ON co.mfgcodeID = mf.id AND IFNULL(mf.isdeleted,0) = 0     \n" +
            "		LEFT JOIN genericcategory gc ON gc.gencCategoryID = co.partStatus     \n" +
            "		LEFT JOIN vu_component_dist_comp_details vu_co ON co.aliasgroupID = vu_co.aliasgroupID AND co.id = vu_co.compID     \n" +
            "		WHERE IFNULL(co.isdeleted,0) = 0;      \n" +
            "  \n" +
            "	IF (pOrderBy IS NOT NULL) THEN      \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;      \n" +
            "	ELSE      \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN DESC\") ;      \n" +
            "	END IF;	      \n" +
            "  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
            "		SET pWhereClause = '1=1' ;      \n" +
            "	END IF;	      \n" +
            "  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN       \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage; 		      \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
            "	ELSE	      \n" +
            "		SET rowNumWhere = '';      \n" +
            "	END IF;	      \n" +
            "  \n" +
            "	IF pIsMFG THEN    \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''MFG''' );      \n" +
            "	ELSE    \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''DIST''' );      \n" +
            "	END IF;    \n" +
            "  \n" +
            "	/* to get total count of rows */      \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );      \n" +
            "	PREPARE query1 FROM @SQLStatement1;      \n" +
            "	EXECUTE query1;      \n" +
            "	DEALLOCATE PREPARE query1;      \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
            "	PREPARE query2 FROM @SQLStatement2;      \n" +
            "	EXECUTE query2;      \n" +
            "	DEALLOCATE PREPARE query2;      \n" +
            "  \n" +
            "	DROP TEMPORARY TABLE Results;      \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 28-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (136,'1.00','V1','get component list - shirish '," + userid + ");"
            );
            break;
        case 136:
            allDbChangesArray.push(
            /* **************************** New Script -> 28-08-2018  *********************************** */
            "CREATE PROCEDURE Sproc_TempPageDetail()  \n" +
            "BEGIN  \n" +
            "IF NOT EXISTS (SELECT 1 FROM page_detail WHERE pageroute = 'app.component.distributor') THEN  \n" +
            "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,   \n" +
            "`parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`, `createdBy`,   \n" +
            "`updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)   \n" +
            "VALUES('Manufacturer Component','0','0',NULL,'app.component.distributor','/:mfgType',NULL,NULL,   \n" +
            "(SELECT a.pageID FROM page_detail a WHERE a.pageName='Component List'),'0','14','2','mdi mdi-video-input-component','1',NOW(),NOW(),   \n" +
            "NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "END IF;  \n" +
            "IF NOT EXISTS (SELECT 1 FROM page_detail WHERE pageroute = 'app.component.distributor') THEN  \n" +
            "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageRoute`,   \n" +
            "`parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`, `deletedAt`, `createdBy`,   \n" +
            "`updatedBy`, `deletedBy`, `isDeleted`, `parentTabID`)     \n" +
            "VALUES('Distributor Component','0','0',NULL,'app.component.manufacturer','/:mfgType',NULL,NULL,  \n" +
            "(SELECT a.pageID FROM page_detail a WHERE a.pageName='Component List'),'0','14','2','mdi mdi-video-input-component','1',NOW(),NOW(),   \n" +
            "NULL,'1',NULL,NULL,'0',NULL);  \n" +
            "END IF;  \n" +
            "END;  \n" +
            "CALL Sproc_TempPageDetail();  \n" +
            "DROP PROCEDURE IF EXISTS Sproc_TempPageDetail;  \n" +
            /* **************************** Add Script Version -> 28-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (137,'1.00','V1','Page Detail entry if not exists - Ravi'," + userid + ");"
            );
            break;
        case 137:
            allDbChangesArray.push(
            /* **************************** New Script -> 28-08-2018  *********************************** */
            "ALTER TABLE rfq_consolidated_mfgpn_lineitem  \n" +
            "ADD CONSTRAINT FK_rfq_consolidated_mfgpn_lineitem_partTypeID FOREIGN KEY (partTypeID) REFERENCES rfq_parttypemst (id);  \n" +
            "  \n" +
            "ALTER TABLE rfq_consolidated_mfgpn_lineitem  \n" +
            "ADD CONSTRAINT FK_rfq_consolidated_mfgpn_lineitem_partClassID FOREIGN KEY (partClassID) REFERENCES rfq_mountingtypemst (id);  \n" +
            "  \n" +
            "ALTER TABLE rfq_consolidated_mfgpn_lineitem  \n" +
            "ADD CONSTRAINT FK_rfq_consolidated_mfgpn_lineitem_rfqLineItemID FOREIGN KEY (rfqLineItemID) REFERENCES rfq_lineitems (id);  \n" +
            "  \n" +
            "ALTER TABLE rfq_consolidated_mfgpn_lineitem  \n" +
            "ADD CONSTRAINT FK_rfq_consolidated_mfgpn_lineitem_uomID FOREIGN KEY (uomID) REFERENCES uoms (id);  \n" +
            "  \n" +
            "ALTER TABLE rfq_consolidated_mfgpn_lineitem_alternate  \n" +
            "ADD CONSTRAINT FK_rfq_consolidated_mfgpn_lineitem_alternate_mfgPNID FOREIGN KEY (mfgPNID) REFERENCES component (id);  \n" +
            "  \n" +
            "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity  \n" +
            "ADD CONSTRAINT FK_rfq_consolidate_mfgpn_lineitem_quantity_qtyID FOREIGN KEY (qtyID) REFERENCES rfq_assy_quantity (id);  \n" +
            /* **************************** Add Script Version -> 28-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (138,'1.00','V1','Added foreign keys for consolidate tables - Ravi'," + userid + ");"
            );
            break;
        case 138:
            allDbChangesArray.push(
            /* **************************** New Script -> 28-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_VerifyCustPN`;  \n" +
            "CREATE PROCEDURE `Sproc_VerifyCustPN`(    \n" +
            "	IN prfqLineItemIds VARCHAR(5000),  -- comma seperated lineItemIDs    \n" +
            "	IN prfqAssyID VARCHAR(500)    \n" +
            ")  \n" +
            "BEGIN        \n" +
            "	DECLARE totalCount INT DEFAULT 0;    \n" +
            "	DECLARE currIndex INT DEFAULT 0;    \n" +
            "    DECLARE currLineItem VARCHAR(8);    \n" +
            "    DECLARE currCustRev VARCHAR(10);    \n" +
            "    DECLARE currCustPN VARCHAR(500);    \n" +
            "	-- This procedure will insert data into temporary table 'tmp_sproc_stringtotable'    \n" +
            "	call Sproc_StringToTable(prfqLineItemIds);    \n" +
            "    -- get data inserted by SP    \n" +
            "    select count(1) into totalCount FROM tmp_sproc_stringtotable;    \n" +
            "  \n" +
            "-- get customer id and rfq bom id from RFQ table and rfq bom table based on prfqAssyID  \n" +
            "SELECT rf.customerId INTO  @customerId FROM rfq_assemblies ra     \n" +
            "JOIN rfqforms rf ON ra.rfqrefID = rf.id AND rf.isDeleted = 0 AND rf.deletedAt IS NULL     \n" +
            "WHERE ra.id = prfqAssyID    \n" +
            "AND ra.isDeleted = 0 AND ra.deletedAt IS NULL LIMIT 1;    \n" +
            "  \n" +
            " WHILE currIndex < totalCount DO    \n" +
            "  \n" +
            "		SELECT a.item INTO currLineItem FROM tmp_sproc_stringtotable a LIMIT currIndex, 1;    \n" +
            "		SET currIndex = currIndex + 1;   \n" +
            "        SET currCustPN = null;  \n" +
            "        SET currCustRev = null;  \n" +
            "  \n" +
            "        SELECT rl.custPN, rl.customerRev INTO currCustPN, currCustRev FROM rfq_lineitems rl WHERE rl.id = currLineItem AND rl.custPN IS NOT NULL AND IFNULL(rl.isDeleted,0) = 0;    \n" +
            "  \n" +
            "        IF (currCustPN IS NOT NULL) THEN    \n" +
            "  \n" +
            "			SELECT rl.rfqAssyBomID INTO @rfqAssyBomID FROM rfq_lineitems rl WHERE rl.id = currLineItem AND rl.isDeleted = 0 AND rl.deletedAt IS NULL;    \n" +
            "  \n" +
            "			-- if found customer data in rfq table than check for rev. available in customer alias rev table for combination of (Customer PN#, Cust. Rev., CustomerID)    \n" +
            "			IF (@customerId IS NOT NULL) THEN    \n" +
            "  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;    \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev AS (    \n" +
            "				SELECT c.id,c.custpn,c.flextronRevision FROM component_cust_alias_rev c    \n" +
            "				WHERE IFNULL(c.isDeleted,0) = 0 AND c.customerID =@customerId AND c.revision = currCustRev AND c.custpn = currCustPN order by c.id desc limit 1);    \n" +
            "  \n" +
            "			END IF;    \n" +
            "  \n" +
            "				-- start - get all data from component_cust_alias_rev_pn to check existing MFG PN with lineItem alternate pn    \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev_pn;    \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_cust_alias_rev_pn AS (    \n" +
            "				SELECT crp.refComponentID     \n" +
            "				FROM component_cust_alias_rev_pn crp     \n" +
            "				LEFT JOIN component_cust_alias_rev cr ON cr.id=crp.refComponentCustAliasRevID AND IFNULL(cr.isDeleted,0) = 0     \n" +
            "				WHERE IFNULL(crp.isDeleted,0) = 0 AND crp.refComponentCustAliasRevID IN (SELECT id FROM temp_component_cust_alias_rev));    \n" +
            "  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_component;    \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_component AS(SELECT c.mfgPN FROM component c    \n" +
            "				WHERE IFNULL(c.isDeleted,0) = 0 AND c.id IN(SELECT refComponentID FROM temp_component_cust_alias_rev_pn));    \n" +
            "  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_rfq_lineitems_alternatepart;    \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_rfq_lineitems_alternatepart AS(SELECT r.mfgPN FROM rfq_lineitems_alternatepart r    \n" +
            "				WHERE IFNULL(r.isDeleted,0) = 0 AND r.rfqLineItemsID  = currLineItem);		    \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_result;    \n" +
            "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_result AS(    \n" +
            "				/* this return new added mfgPN*/    \n" +
            "				 SELECT mfgPN    \n" +
            "				FROM (    \n" +
            "				SELECT mfgPN FROM temp_component    \n" +
            "				UNION ALL    \n" +
            "				SELECT mfgPN FROM temp_rfq_lineitems_alternatepart    \n" +
            "				) tbl    \n" +
            "				GROUP BY mfgPN    \n" +
            "				HAVING COUNT(*) = 1    \n" +
            "				ORDER BY mfgPN    \n" +
            "				);    \n" +
            "  \n" +
            "				-- end - get all data from component_cust_alias_rev_pn to check existing MFG PN with lineItem alternate pn    \n" +
            "  \n" +
            "				-- start - get new data for insert    \n" +
            "				IF (SELECT COUNT(1) FROM temp_result) >0 THEN    \n" +
            "					DROP TEMPORARY TABLE IF EXISTS temp_newPN;    \n" +
            "					SET @SQL1 = CONCAT('CREATE TEMPORARY TABLE if not exists temp_newPN as    \n" +
            "						SELECT GROUP_CONCAT(c.mfgPN SEPARATOR \",\") mfgPN    \n" +
            "						FROM     \n" +
            "						(    \n" +
            "						(SELECT a.mfgPN as mfgPN    \n" +
            "						FROM temp_rfq_lineitems_alternatepart a    \n" +
            "						WHERE NOT EXISTS (SELECT b.mfgPN FROM temp_component b    \n" +
            "								 WHERE a.mfgPN=b.mfgPN)    \n" +
            "						) as c)');    \n" +
            "					PREPARE stmt FROM @SQL1;    \n" +
            "					EXECUTE stmt;    \n" +
            "  \n" +
            "					IF (SELECT COUNT(mfgPN) FROM temp_newPN) >0 THEN    \n" +
            "  \n" +
            "						-- check if data available for same combination    \n" +
            "						IF (SELECT COUNT(*) FROM temp_component_cust_alias_rev) >0 THEN    \n" +
            "							-- Update flextron revision as match with exisiting data with new data    \n" +
            "							SELECT flextronRevision INTO @nextflextronRevision FROM temp_component_cust_alias_rev;    \n" +
            "							SELECT CHAR(ASCII(@nextflextronRevision) + 1) INTO @nextflextronRevision;    \n" +
            "							-- Add all mfg part numbers in customer alias with new revision    \n" +
            "							INSERT INTO component_cust_alias_rev(customerID,custpn,revision,flextronRevision,rfqAssyBomID) VALUES(@customerId,currCustPN,currCustRev,@nextflextronRevision,@rfqAssyBomID);    \n" +
            "							SELECT LAST_INSERT_ID() INTO @maxRevId;    \n" +
            "							INSERT INTO component_cust_alias_rev_pn(refComponentCustAliasRevID,refComponentID) SELECT @maxRevId,sub.id FROM(SELECT id FROM component WHERE mfgPN IN(SELECT mfgPN FROM temp_rfq_lineitems_alternatepart)) sub;    \n" +
            "							-- Update flextron revision and custPNID in line item table    \n" +
            "							UPDATE rfq_lineitems    \n" +
            "							SET flextronRev=@nextflextronRevision,    \n" +
            "							custPNID = @maxRevId    \n" +
            "							WHERE custPN=currCustPN AND id = currLineItem;    \n" +
            "  \n" +
            "						ELSE    \n" +
            "  \n" +
            "							-- Add all mfg part numbers in customer alias with new revision    \n" +
            "							INSERT INTO component_cust_alias_rev(customerID,custpn,revision,flextronRevision,rfqAssyBomID) VALUES(@customerId,currCustPN,currCustRev,'A',@rfqAssyBomID);    \n" +
            "							SELECT LAST_INSERT_ID() INTO @maxRevId;    \n" +
            "							INSERT INTO component_cust_alias_rev_pn(refComponentCustAliasRevID,refComponentID) SELECT @maxRevId,sub.id FROM(SELECT id FROM component WHERE FIND_IN_SET(mfgPN,(SELECT mfgPN FROM temp_newPN)))sub;    \n" +
            "							UPDATE rfq_lineitems rfq SET rfq.custPNID = @maxRevId WHERE rfq.id = currLineItem;    \n" +
            "						END IF;    \n" +
            "  \n" +
            "						-- get customer partnumber if any changes    \n" +
            "					   IF (SELECT COUNT(*) FROM temp_component) >0 THEN    \n" +
            "							ALTER TABLE temp_newPN ADD COLUMN custPN VARCHAR(255);    \n" +
            "							UPDATE temp_newPN SET custPN=currCustPN;    \n" +
            "							SELECT * FROM temp_newPN;    \n" +
            "						END IF;    \n" +
            "  \n" +
            "					END IF;    \n" +
            "				-- ELSE    \n" +
            "				-- 	SELECT * FROM temp_result;    \n" +
            "				END IF;    \n" +
            "				-- end - get new data for insert    \n" +
            "  \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev;    \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_component_cust_alias_rev_pn;    \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_component;    \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_rfq_lineitems_alternatepart;    \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_result;    \n" +
            "				DROP TEMPORARY TABLE IF EXISTS temp_newPN;    \n" +
            "        END IF;    \n" +
            "	END WHILE;    \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 28-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (139,'1.00','V1','ALTER SP Sproc_VerifyCustPN - Ravi'," + userid + ");"
            );
            break;

        case 139:
            allDbChangesArray.push(
            /* **************************** New Script -> 28-08-2018  *********************************** */
          "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
"CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(                \n" +
"	IN ppageIndex INT(11),                \n" +
"	IN precordPerPage INT(11),                \n" +
"	IN pOrderBy VARCHAR(255),                \n" +
"	IN pWhereClause VARCHAR(21844),                \n" +
"	IN rfqAssyID INT(11),                \n" +
"	IN puserID INT (11)                \n" +
"    )  \n" +
"BEGIN                \n" +
"  \n" +
"	    DECLARE pOffset INT(11);                \n" +
"	    DECLARE rowNumWhere VARCHAR(255) ;                \n" +
"	    SET @SQLString = NULL;                \n" +
"	    SET SESSION group_concat_max_len = 150000;                    \n" +
"	    IF (pOrderBy IS NOT NULL) THEN                \n" +
"			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
"		ELSE                \n" +
"			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;                 \n" +
"		END IF;	                \n" +
"  \n" +
"  \n" +
"		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                \n" +
"			SET pWhereClause = '1=1' ;                \n" +
"		END IF;	                \n" +
"  \n" +
"		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
"			SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
"			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
"		ELSE	                \n" +
"			SET rowNumWhere = '';                \n" +
"		END IF;	                \n" +
"		SELECT                \n" +
"                     GROUP_CONCAT(DISTINCT                \n" +
"				CONCAT(                \n" +
"					'Max((IF(ra.requestQty = ''',                \n" +
"						ra.requestQty,                \n" +
"					''', rq.finalPrice, null))) AS ''',                \n" +
"						ra.requestQty,''''                \n" +
"					)                \n" +
"					) INTO @SQLString                \n" +
"		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                \n" +
"		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                \n" +
"		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                \n" +
"		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                \n" +
"  \n" +
"			IF(@SQLString IS NOT NULL) THEN                \n" +
"				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                \n" +
"					SELECT                 \n" +
"					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                  \n" +
"					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,            \n" +
"					(SELECT             \n" +
"                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                      \n" +
"                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN             \n" +
"                                     component c ON rla.mfgpnid=c.id             \n" +
"                                     LEFT JOIN mfgcodemst mg ON              \n" +
"                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                \n" +
"					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))AS mfgPn                 \n" +
"                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN             \n" +
"                                component c ON rla.mfgpnid=c.id                       \n" +
"                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                 \n" +
"					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl                \n" +
"					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                \n" +
"					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                \n" +
"					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                \n" +
"  \n" +
"			ELSE                \n" +
"				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                \n" +
"					SELECT  id,isPurchase,rl.numOfPosition, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,             \n" +
"					 GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                      \n" +
"                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN             \n" +
"                                     component c ON rla.mfgpnid=c.id             \n" +
"                                     LEFT JOIN mfgcodemst mg ON              \n" +
"                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                  \n" +
"					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'', c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))AS mfgPn                 \n" +
"                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                 \n" +
"                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                \n" +
"					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                \n" +
"			END IF;                \n" +
"			PREPARE stmt FROM @SQLStatement;                \n" +
"			EXECUTE stmt;	                \n" +
"  \n" +
"  \n" +
"			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                \n" +
"			PREPARE query1 FROM @SQLStatement1;                \n" +
"			EXECUTE query1;                \n" +
"			DEALLOCATE PREPARE query1;                \n" +
"  \n" +
"  \n" +
"			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
"			PREPARE query2 FROM @SQLStatement2;                \n" +
"			EXECUTE query2;                \n" +
"			DEALLOCATE PREPARE query2;                \n" +
"  \n" +
"  \n" +
"  \n" +
"			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                \n" +
"			PREPARE query3 FROM @SQLStatement3;                \n" +
"			EXECUTE query3;                \n" +
"			DEALLOCATE PREPARE query3;                \n" +
"  \n" +
"			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.turnType,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                \n" +
"				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                \n" +
"				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                \n" +
"			PREPARE query4 FROM @SQLStatement4;                \n" +
"			EXECUTE query4;                \n" +
"			DEALLOCATE PREPARE query4;            \n" +
"  \n" +
"			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty, rq.finalPrice, unitPrice,supplier,rq.min,rq.mult, selectedMpn, selectionMode,qtyID,           \n" +
"					currentStock,          \n" +
"					leadTime,           \n" +
"					supplierStock,          \n" +
"					grossStock,              \n" +
"					selectedPIDCode,ct.qpa, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                     \n" +
"				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID             \n" +
"				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id             \n" +
"				WHERE ct.rfqAssyID=\",rfqAssyID);                    \n" +
"			PREPARE query5 FROM @SQLStatement5;                        \n" +
"			EXECUTE query5;                        \n" +
"			DEALLOCATE PREPARE query5;               \n" +
"  \n" +
"			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,         \n" +
"						(SUM(rq.finalPrice)) AS TotalExtendedPrice,         \n" +
"						(SUM(rq.unitPrice)) AS TotalUnitPrice,        \n" +
"						(SUM(rq.finalPrice)/ IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice      \n" +
"					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
"					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id            \n" +
"							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                    \n" +
"  \n" +
"			PREPARE query6 FROM @SQLStatement6;                        \n" +
"			EXECUTE query6;                        \n" +
"			DEALLOCATE PREPARE query6;                            \n" +
"  \n" +
"  \n" +
"			DROP TEMPORARY TABLE consolidatetemp;                  \n" +
"    END;  \n" +
            /* **************************** Add Script Version -> 28-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (140,'1.00','V1','Alter procedure Sproc_GetRFQConsolidateRfqLineItem-Champak '," + userid + ");"
            );
            break;
        case 140:
            allDbChangesArray.push(
            /* **************************** New Script -> 28-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetComponentList` ;  \n" +
              "CREATE PROCEDURE `Sproc_GetComponentList`(	        \n" +
              "	IN ppageIndex INT(11),        \n" +
              "	IN precordPerPage INT(11),        \n" +
              "	IN pOrderBy VARCHAR(255),	        \n" +
              "	IN pWhereClause VARCHAR(21844),      \n" +
              "	IN pIsMFG TINYINT(1)      \n" +
              "    )  \n" +
              "BEGIN        \n" +
              "  \n" +
              "	DECLARE pOffset INT(11);        \n" +
              "	DECLARE rowNumWhere VARCHAR(255) ;        \n" +
              "	/* DECLARE SQLStatement varchar(255); */        \n" +
              "  \n" +
              "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS        \n" +
              "		SELECT co.*, mf.mfgCode,      \n" +
              "		gc.gencCategoryName AS partStatusValue,        \n" +
              "		mf.mfgType,      \n" +
              "		vu_co.MFGPN AS AliasMFGPN,      \n" +
              "		vu_co.mfgcode AS AliasMFGCode,      \n" +
              "		(CASE WHEN (`co`.`rohsComplient` = 0) THEN 'No'         \n" +
              "					WHEN (`co`.`rohsComplient` = 1) THEN 'Yes' ELSE '' END) AS `rohsComplientConvertedValue`        \n" +
              "		FROM component co          \n" +
              "		LEFT JOIN mfgcodemst mf ON co.mfgcodeID = mf.id AND IFNULL(mf.isdeleted,0) = 0       \n" +
              "		LEFT JOIN genericcategory gc ON gc.gencCategoryID = co.partStatus       \n" +
              "		LEFT JOIN vu_component_dist_comp_details vu_co ON co.aliasgroupID = vu_co.aliasgroupID    \n" +
              "		WHERE IFNULL(co.isdeleted,0) = 0;        \n" +
              "  \n" +
              "	IF (pOrderBy IS NOT NULL) THEN        \n" +
              "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
              "	ELSE        \n" +
              "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN DESC\") ;        \n" +
              "	END IF;	        \n" +
              "  \n" +
              "  \n" +
              "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
              "		SET pWhereClause = '1=1' ;        \n" +
              "	END IF;	        \n" +
              "  \n" +
              "  \n" +
              "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
              "		SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
              "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
              "	ELSE	        \n" +
              "		SET rowNumWhere = '';        \n" +
              "	END IF;	        \n" +
              "  \n" +
              "	IF pIsMFG THEN      \n" +
              "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''MFG''' );        \n" +
              "	ELSE      \n" +
              "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgType=''DIST''' );        \n" +
              "	END IF;      \n" +
              "  \n" +
              "	/* to get total count of rows */        \n" +
              "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM Results where \", pWhereClause );        \n" +
              "	PREPARE query1 FROM @SQLStatement1;        \n" +
              "	EXECUTE query1;        \n" +
              "	DEALLOCATE PREPARE query1;        \n" +
              "  \n" +
              "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
              "	PREPARE query2 FROM @SQLStatement2;        \n" +
              "	EXECUTE query2;        \n" +
              "	DEALLOCATE PREPARE query2;        \n" +
              "  \n" +
              "	DROP TEMPORARY TABLE Results;        \n" +
              "    END;  \n" +
            /* **************************** Add Script Version -> 28-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (141,'1.00','V1','Alter procedure Sproc_GetComponentList-Vaibhav '," + userid + ");"
            );
            break;
        case 141:
            allDbChangesArray.push(
            /* **************************** New Script -> 28-08-2018  *********************************** */
           "ALTER TABLE rfq_assy_quantity_price_selection_setting ADD `stockPercentage` DECIMAL(16,6) NULL;  \n" +
            /* **************************** Add Script Version -> 28-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (142,'1.00','V1','Add Column in table rfq_assy_quantity_price_selection_setting  - Champak '," + userid + ");"
            );
            break;
        case 142:
            allDbChangesArray.push(
            /* **************************** New Script -> 29-08-2018  *********************************** */
           "DROP PROCEDURE IF EXISTS `Sproc_SetLineItemAutoPricingStatus` ;  \n" +
              "CREATE PROCEDURE `Sproc_SetLineItemAutoPricingStatus`(          \n" +
              "	IN prfqAssyID INT(11),        \n" +
              "	IN pconsolidateID INT(11),  \n" +
              "	IN ppricingApiName VARCHAR(100),      \n" +
              "	IN pstatus INT(11),    \n" +
              "	IN puserID INT(11)  \n" +
              ")  \n" +
              "BEGIN       \n" +
              "	# 0 - SendRequest, 1 - NotPricing, 2 - Success          \n" +
              "	IF (NOT EXISTS (SELECT 1 FROM rfq_lineitem_autopricingstatus WHERE   \n" +
              "		rfqAssyID = prfqAssyID AND pricingApiName = ppricingApiName   \n" +
              "		AND consolidateID = pconsolidateID AND userID = puserID)  \n" +
              "	) THEN  \n" +
              "		INSERT INTO rfq_lineitem_autopricingstatus (rfqAssyID,pricingApiName,`status`,`consolidateID`,`userID`,`statusChangeDate`)  \n" +
              "		VALUES (prfqAssyID, ppricingApiName, 0, pconsolidateID, puserID, UTC_TIMESTAMP());  \n" +
              "	ELSE      \n" +
              "		UPDATE rfq_lineitem_autopricingstatus  \n" +
              "			SET `status` = 0,      \n" +
              "			statusChangeDate=UTC_TIMESTAMP()      \n" +
              "		WHERE rfqAssyID = prfqAssyID AND pricingApiName = ppricingApiName   \n" +
              "		AND consolidateID = pconsolidateID AND userID = puserID;      \n" +
              "	END IF;  \n" +
              "END;  \n" +
            /* **************************** Add Script Version -> 29-08-2018 *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_SetAssyAutoPricingStatus` ;  \n" +
              "CREATE PROCEDURE `Sproc_SetAssyAutoPricingStatus`(          \n" +
              "	IN prfqAssyID INT(11),      \n" +
              "	IN ppricingApiName VARCHAR(100),      \n" +
              "	IN pstatus INT(11),    \n" +
              "	IN puserID INT(11)  \n" +
              ")  \n" +
              "BEGIN       \n" +
              "	# 0 - SendRequest, 1 - NotPricing, 2 - Success          \n" +
              "	IF (NOT EXISTS (SELECT 1 FROM rfq_assy_autopricingstatus WHERE   \n" +
              "		rfqAssyID = prfqAssyID AND pricingApiName = ppricingApiName AND userID = puserID)  \n" +
              "	) THEN  \n" +
              "		INSERT INTO rfq_assy_autopricingstatus (rfqAssyID,pricingApiName,`status`,`userID`,`statusChangeDate`)  \n" +
              "		VALUES (prfqAssyID, ppricingApiName, 0, puserID, UTC_TIMESTAMP());  \n" +
              "	ELSE      \n" +
              "		UPDATE rfq_assy_autopricingstatus  \n" +
              "			SET `status` = 0,      \n" +
              "			statusChangeDate=UTC_TIMESTAMP()      \n" +
              "		WHERE rfqAssyID = prfqAssyID AND pricingApiName = ppricingApiName AND userID = puserID;      \n" +
              "	END IF;  \n" +
              "END;  \n" +
            /* **************************** Add Script Version -> 29-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (143,'1.00','V1','Create SP for Set Auto Pricing Status while send request  - Vaibhav '," + userid + ");"
            );
            break;
        case 143:
            allDbChangesArray.push(
            /* **************************** New Script -> 13-08-2018  *********************************** */
           "ALTER TABLE component ADD  categoryText VARCHAR(255) NULL;  \n" +
          "ALTER TABLE component ADD updatedAtApi DATETIME NULL;  \n" +
            /* **************************** Add Script Version -> 13-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (144,'1.00','V1','Added text field for category component table-Champak'," + userid + ");"
            );
            break;
        case 144:
            allDbChangesArray.push(
            /* **************************** New Script -> 29-08-2018  *********************************** */
           "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
            "CREATE PROCEDURE `Sproc_checkDelete`(                          \n" +
            "	IN tableName VARCHAR(255),                          \n" +
            "	IN IDs LONGTEXT,                          \n" +
            "	IN deletedBy INT,                          \n" +
            "	IN entityID VARCHAR(255),                          \n" +
            "	IN refrenceIDs LONGTEXT                          \n" +
            "    )  \n" +
            "BEGIN                          \n" +
            "	DECLARE vWoID1 INT(11);                          \n" +
            "	DECLARE vOpID1 INT(11);                          \n" +
            "	DECLARE vSerialNo1 VARCHAR(50);                          \n" +
            "	DECLARE vProdStatus1 VARCHAR(5);                          \n" +
            "	DECLARE vWoTransID1 INT(11);                          \n" +
            "	DECLARE vQty1 INT(11);                          \n" +
            "	DECLARE vOpID2 INT(11);                          \n" +
            "	DECLARE vProdstatus2 VARCHAR(5);                          \n" +
            "  \n" +
            "IF tableName='employees' THEN                          \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)                          \n" +
            "	   UNION ALL                                                \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)                          \n" +
            "           UNION ALL                           \n" +
            "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND (er.finalStatusInit IN(',IDs,') OR er.initiateBy IN(',IDs,')) LIMIT 1)                          \n" +
            "	   UNION ALL                          \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)                          \n" +
            "	UNION ALL                          \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)                          \n" +
            "	  UNION ALL                          \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)                          \n" +
            "	  UNION ALL                          \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)                          \n" +
            "	  UNION ALL                          \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)                          \n" +
            "	  UNION ALL                          \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)                          \n" +
            "	 UNION ALL                          \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)                          \n" +
            "	  UNION ALL                          \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND (wr.reqGenEmployeeID IN(',IDs,') OR wr.woAuthorID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                          \n" +
            "	  UNION ALL                           \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND (wr.commentemployeeID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                          \n" +
            "	  UNION ALL                          \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND (wr.employeeID IN(',IDs,') OR wr.requstedEmployeeID IN(',IDs,')) LIMIT 1)                           \n" +
            "	  UNION ALL                              \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE (wt.checkinEmployeeID IN(',IDs,') OR wt.checkoutEmployeeID IN(',IDs,')) LIMIT 1)                          \n" +
            "	  UNION ALL                             \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)                          \n" +
            "	 UNION ALL                           \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)                          \n" +
            "	 UNION ALL                           \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)                          \n" +
            "	 UNION ALL                           \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND (wthu.holdEmployeeId IN(',IDs,') OR wthu.unHoldEmployeeId IN(',IDs,')) LIMIT 1)                          \n" +
            "	UNION ALL                           \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)                          \n" +
            "	 UNION ALL                           \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)                          \n" +
            "	 UNION ALL                           \n" +
            "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)                          \n" +
            "	 UNION ALL                           \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND (holdEmployeeId IN(',IDs,') OR unHoldEmployeeId IN(',IDs,')) LIMIT 1)                          \n" +
            "  \n" +
            "        ) q');                          \n" +
            "    PREPARE stmt FROM @SQL;                          \n" +
            "    EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempEmp)=0 THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');                          \n" +
            "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');                          \n" +
            "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');                          \n" +
            "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                          \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			PREPARE stmt2 FROM @SQL2;                          \n" +
            "			PREPARE stmt3 FROM @SQL3;                          \n" +
            "			PREPARE stmt4 FROM @SQL4;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "			EXECUTE stmt2;                          \n" +
            "			EXECUTE stmt3;                          \n" +
            "			EXECUTE stmt4;                          \n" +
            "			SELECT                           \n" +
            "    *                          \n" +
            "FROM                          \n" +
            "    tempEmp;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempEmp;                          \n" +
            "		END IF;                          \n" +
            "  \n" +
            "    DROP TABLE tempEmp;                          \n" +
            "END IF;                          \n" +
            "IF tableName='eco_type_category' THEN                          \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                           \n" +
            "	  ) q');                          \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT                           \n" +
            "    *                          \n" +
            "FROM                          \n" +
            "    tempEcoTypeCategory;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempEcoTypeCategory;                          \n" +
            "		END IF;                          \n" +
            "    DROP TABLE tempEcoTypeCategory;                            \n" +
            "END IF;                          \n" +
            "IF tableName='eco_type_values' THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)                          \n" +
            "	  ) q');                          \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT                           \n" +
            "    *                          \n" +
            "FROM                          \n" +
            "    tempEcoTypeValues;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempEcoTypeValues;                          \n" +
            "		END IF;                          \n" +
            "    DROP TABLE tempEcoTypeValues;                            \n" +
            "END IF;                          \n" +
            "IF tableName='customers' THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                           \n" +
            "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                           \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                          \n" +
            "	  ) q');                          \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                          \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                          \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			PREPARE stmt2 FROM @SQL2;                          \n" +
            "			PREPARE stmt3 FROM @SQL3;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "			EXECUTE stmt2;                          \n" +
            "			EXECUTE stmt3;                          \n" +
            "  \n" +
            "			SELECT                           \n" +
            "    *                          \n" +
            "FROM                          \n" +
            "    tempCustomers;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempCustomers;                          \n" +
            "		END IF;                          \n" +
            "    DROP TABLE tempCustomers;                            \n" +
            "END IF;                          \n" +
            "IF tableName='certificate_standards' THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                          \n" +
            "  \n" +
            "	  ) q');                          \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		                          \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                          \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			PREPARE stmt2 FROM @SQL2;                          \n" +
            "			PREPARE stmt3 FROM @SQL3;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "			EXECUTE stmt2;                          \n" +
            "			EXECUTE stmt3;                          \n" +
            "  \n" +
            "			SELECT * FROM tempCertificateStandards;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempCertificateStandards;                          \n" +
            "		END IF;                          \n" +
            "    DROP TABLE tempCertificateStandards;                            \n" +
            "END IF;                          \n" +
            "IF tableName='department' THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                          \n" +
            "  \n" +
            "	  ) q');                          \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		                          \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                          \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			PREPARE stmt2 FROM @SQL2;                          \n" +
            "			PREPARE stmt3 FROM @SQL3;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "			EXECUTE stmt2;                          \n" +
            "			EXECUTE stmt3;                          \n" +
            "  \n" +
            "			SELECT * FROM tempDepartment;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempDepartment;                          \n" +
            "		END IF;                          \n" +
            "    DROP TABLE tempDepartment;                            \n" +
            "END IF;                          \n" +
            "IF tableName='genericcategory' THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND (eqpGroupID IN(',IDs,') OR eqpSubGroupID IN(',IDs,') OR eqpTypeID IN(',IDs,') OR eqpPossessionID IN(',IDs,') OR eqpOwnershipTypeID IN(',IDs,') OR locationTypeID IN(',IDs,'))   LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)                          \n" +
            "	     UNION ALL                        \n" +
            "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)                          \n" +
            "	  ) q');                          \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT                           \n" +
            "    *                          \n" +
            "FROM                          \n" +
            "    tempGenericCategory;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempGenericCategory;                          \n" +
            "		END IF;                          \n" +
            "    DROP TABLE tempGenericCategory;                            \n" +
            "END IF;                          \n" +
            "IF tableName='equipment' THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                          \n" +
            "  \n" +
            "	  ) q');                          \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN                          \n" +
            "			IF entityID IS NOT NULL THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		                          \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                          \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			PREPARE stmt2 FROM @SQL2;                          \n" +
            "			PREPARE stmt3 FROM @SQL3;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "			EXECUTE stmt2;                          \n" +
            "			EXECUTE stmt3;                          \n" +
            "  \n" +
            "			ELSE                          \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "			END IF;                          \n" +
            "  \n" +
            "			SELECT * FROM tempEquipment;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempEquipment;                          \n" +
            "		END IF;                          \n" +
            "    DROP TABLE tempEquipment;                            \n" +
            "END IF;                          \n" +
            "IF tableName='parts' THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                          \n" +
            "	  ) q');                          \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempParts)=0 THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempParts;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempParts;                          \n" +
            "		END IF;                          \n" +
            "    DROP TABLE tempParts;                            \n" +
            "END IF;                          \n" +
            "IF tableName='master_templates' THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)                          \n" +
            "	  ) q');                          \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempMasterTemplate;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempMasterTemplate;                          \n" +
            "		END IF;                          \n" +
            "    DROP TABLE tempMasterTemplate;                            \n" +
            "END IF;                          \n" +
            "IF tableName='operations' THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
            "  \n" +
            "	  ) q');                          \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempOperations)=0 THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		                          \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                          \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			PREPARE stmt2 FROM @SQL2;                          \n" +
            "			PREPARE stmt3 FROM @SQL3;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "			EXECUTE stmt2;                          \n" +
            "			EXECUTE stmt3;                          \n" +
            "  \n" +
            "			SELECT * FROM tempOperations;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempOperations;                          \n" +
            "		END IF;                          \n" +
            "    DROP TABLE tempOperations;                            \n" +
            "END IF;                          \n" +
            "IF tableName='workorder' THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL		                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
            "  \n" +
            "	  ) q');                          \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN                          \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete work order */                          \n" +
            "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;                           \n" +
            "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");                          \n" +
            "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			                          \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			                          \n" +
            "			/* [E] - Add Time line log for delete work order */			                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                          \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                          \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                          \n" +
            "			SET @SQl4 = CONCAT('update workorder_certification set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			PREPARE stmt2 FROM @SQL2;                          \n" +
            "			PREPARE stmt3 FROM @SQL3;                          \n" +
            "			PREPARE stmt4 FROM @SQL4;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "			EXECUTE stmt2;                          \n" +
            "			EXECUTE stmt3;                          \n" +
            "			EXECUTE stmt4;                          \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorder;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempWorkorder;                          \n" +
            "		END IF;                          \n" +
            "    DROP TABLE tempWorkorder;                            \n" +
            "END IF;                          \n" +
            "IF tableName='roles' THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                          \n" +
            "         UNION ALL                          \n" +
            "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                          \n" +
            "         UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');                          \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempRoles)=0 THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempRoles;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempRoles;                          \n" +
            "		END IF;                          \n" +
            "    DROP TABLE tempRoles;                            \n" +
            "END IF;                          \n" +
            "IF tableName='standard_class' THEN                          \n" +
            "  \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND FIND_IN_SET(',IDs,',classIDs) LIMIT 1)                          \n" +
            "	  ) q');                          \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                    \n" +
            "  \n" +
            "  \n" +
            "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');      \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempStandardClass;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempStandardClass;                          \n" +
            "		END IF;                          \n" +
            "    DROP TABLE tempStandardClass;                            \n" +
            "END IF;                          \n" +
            "IF tableName='dataelement' THEN                          \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		                          \n" +
            "		UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
            "	  ) q');                          \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt2 FROM @SQL2;                          \n" +
            "			EXECUTE stmt2;                          \n" +
            "  \n" +
            "  \n" +
            "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)                          \n" +
            "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated                          \n" +
            "			FROM dataelement dl WHERE dl.dataElementID = IDs;                          \n" +
            "  \n" +
            "  \n" +
            "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */                          \n" +
            "  \n" +
            "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                           \n" +
            "							where type IN(''',IDs,''') and deletedAt IS NULL ');		                          \n" +
            "				PREPARE stmt3 FROM @SQL3;                          \n" +
            "				EXECUTE stmt3;                          \n" +
            "  \n" +
            "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */                          \n" +
            "  \n" +
            "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */                          \n" +
            "  \n" +
            "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs                           \n" +
            "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN                          \n" +
            "  \n" +
            "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                           \n" +
            "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'                           \n" +
            "								AND isAutoIncrement = 1 AND deletedAt IS NULL)                          \n" +
            "							 and deletedAt IS NULL ');		                          \n" +
            "					     PREPARE stmt4 FROM @SQL4;                          \n" +
            "				             EXECUTE stmt4;                          \n" +
            "					END IF;	                          \n" +
            "				END IF;                          \n" +
            "  \n" +
            "  \n" +
            "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN                          \n" +
            "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)                           \n" +
            "						    AND deletedAt IS NULL');		                          \n" +
            "				PREPARE stmt5 FROM @SQL5;                          \n" +
            "				EXECUTE stmt5;                          \n" +
            "  \n" +
            "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                           \n" +
            "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		                          \n" +
            "				PREPARE stmt6 FROM @SQL6;                          \n" +
            "				EXECUTE stmt6;                          \n" +
            "  \n" +
            "  \n" +
            "			END IF;                          \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM tempDataElement;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempDataElement;                          \n" +
            "		END IF;                          \n" +
            "    DROP TABLE tempDataElement;                            \n" +
            "  \n" +
            "END IF;                          \n" +
            "IF tableName='workorder_preprogcomp' THEN                          \n" +
            "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                          \n" +
            "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg                          \n" +
            "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND                          \n" +
            "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                          \n" +
            "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "    SELECT * FROM  tempComponent;                          \n" +
            "    SELECT TotalCount FROM  tempComponent;                          \n" +
            "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			                          \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete pre program component */                    \n" +
            "			SELECT partNumber,(SELECT woNumber FROM workorder WHERE woID = woppc.woID),                  \n" +
            "				(SELECT opName FROM workorder_operation WHERE woOPID = refStkWOOPID)                  \n" +
            "			    INTO @lvPartNumber,@lvWoNumber,@lvOpName                  \n" +
            "			FROM workorder_preprogcomp woppc                    \n" +
            "			WHERE woPreProgCompID = IDs  AND deletedAt IS NULL;                     \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Preprogram component deleted from work order\");                    \n" +
            "			SET @lvEventDescription = CONCAT(\"Preprogram component \\\"\",@lvPartNumber,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.14,NULL,deletedBy,3);  /* 3 = DELETE */                    \n" +
            "			/* [E] - Add Time line log for delete pre program component */                   \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt2 FROM @SQL2;                          \n" +
            "			EXECUTE stmt2;                          \n" +
            "  \n" +
            "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where                           \n" +
            "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                          \n" +
            "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt3 FROM @SQL3;                          \n" +
            "			EXECUTE stmt3;                          \n" +
            "		SELECT                           \n" +
            "			*                          \n" +
            "		FROM                          \n" +
            "			tempComponent;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempComponent;                          \n" +
            "		END IF;                          \n" +
            "    DROP TABLE tempComponent;                            \n" +
            "END IF;                          \n" +
            "IF tableName='component' THEN                          \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                          \n" +
            "		 UNION ALL                          \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                          \n" +
            "  \n" +
            "	  ) q');                          \n" +
            "	  PREPARE stmt FROM @SQL;                          \n" +
            "	   EXECUTE stmt;                          \n" +
            "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN                          \n" +
            "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempComponent;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempComponent;                          \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempComponent;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"workorder_cluster\" THEN                           \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)                          \n" +
            "		      ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN                          \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete cluster */                          \n" +
            "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster                          \n" +
            "		WHERE clusterID = IDs AND deletedAt IS NULL;                          \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder                          \n" +
            "		WHERE woID = @lvWoID AND deletedAt IS NULL ;                          \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");                          \n" +
            "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                          \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		                          \n" +
            "		/* [E] - Add Time line log for delete cluster */                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderCluster;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempWorkorderCluster;                          \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempWorkorderCluster;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"workorder_operation\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)                          \n" +
            "			 UNION ALL                          \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		                           \n" +
            "		      ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN                          \n" +
            "			 /* [S] - Add Time line log for delete work order operation */                          \n" +
            "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName                          \n" +
            "			FROM workorder_operation                           \n" +
            "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;                           \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                          \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");                          \n" +
            "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                          \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		                          \n" +
            "			/* [E] - Add Time line log for delete work order operation */                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                          \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                          \n" +
            "		SET @SQl3 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                          \n" +
            "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                          \n" +
            "		SET @SQl5 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                          \n" +
            "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                          \n" +
            "		SET @SQl7 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		                          \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                          \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;                          \n" +
            "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		                          \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                          \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			PREPARE stmt2 FROM @SQL2;                          \n" +
            "			PREPARE stmt3 FROM @SQL3;                          \n" +
            "			PREPARE stmt4 FROM @SQL4;                          \n" +
            "			PREPARE stmt5 FROM @SQL5;                          \n" +
            "			PREPARE stmt6 FROM @SQL6;                          \n" +
            "			PREPARE stmt7 FROM @SQl7;                          \n" +
            "			PREPARE stmt8 FROM @SQl7;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "			EXECUTE stmt2;                          \n" +
            "			EXECUTE stmt3;                          \n" +
            "			EXECUTE stmt4;                          \n" +
            "			EXECUTE stmt5;                          \n" +
            "			EXECUTE stmt6;                          \n" +
            "			EXECUTE stmt7;                          \n" +
            "			EXECUTE stmt8;                          \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperation;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempWorkorderOperation;                          \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempWorkorderOperation;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"workorder_operation_part\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                          \n" +
            "		      ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN                          \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete parts from work order */                          \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                          \n" +
            "		FROM workorder_operation                           \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                           \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                          \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts                          \n" +
            "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;                           \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");                          \n" +
            "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                          \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */                          \n" +
            "		/* [E] - Add Time line log for delete parts from work order */                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderPart;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempWorkorderPart;                          \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempWorkorderPart;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"workorder_operation_equipment\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                          \n" +
            "		      ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN                          \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Equipment from work order */                          \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                          \n" +
            "		FROM workorder_operation                           \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                           \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	                          \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment                          \n" +
            "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;                           \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");                          \n" +
            "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                          \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                          \n" +
            "		/* [E] -  Add Time line log for delete Equipment from work order */                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');                          \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			PREPARE stmt2 FROM @SQL2;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "			EXECUTE stmt2;                          \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEquipment;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempWorkorderEquipment;                          \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempWorkorderEquipment;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"workorder_operation_employee\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                          \n" +
            "		      ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN                          \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Employees from work order */                          \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                          \n" +
            "		FROM workorder_operation                           \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                           \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                          \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees                          \n" +
            "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;                           \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");                          \n" +
            "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                          \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                          \n" +
            "		/* [E] -  Add Time line log for delete Employee from work order */                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEmployee;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempWorkorderEmployee;                          \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempWorkorderEmployee;                          \n" +
            "  \n" +
            "END IF;                          \n" +
            "IF tableName=\"workorder_operation_cluster\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)                          \n" +
            "		      ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN                          \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete operations from cluster */                          \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                          \n" +
            "		FROM workorder_operation                           \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                           \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                          \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster                          \n" +
            "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;                           \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");                          \n" +
            "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                          \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                          \n" +
            "		/* [E] -  Add Time line log for delete operations from cluster */		                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                          \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                          \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;                          \n" +
            "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		                          \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                          \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			PREPARE stmt2 FROM @SQL2;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "			EXECUTE stmt2;                          \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempWorkorderOperationCluster;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"entity\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                          \n" +
            "		     UNION ALL                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                          \n" +
            "		     UNION ALL                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                          \n" +
            "		    UNION ALL                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                          \n" +
            "		      ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempEntity)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempEntity;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempEntity;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempEntity;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"salesordermst\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)                          \n" +
            "		      ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete sales order mst */ 	                  \n" +
            "			SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber                  \n" +
            "			FROM salesordermst                  \n" +
            "			WHERE FIND_IN_SET(id,IDs);                  \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");                    \n" +
            "			SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */                    \n" +
            "			/* [E] - Add Time line log for delete sales order mst */	                  \n" +
            "  \n" +
            "			SELECT * FROM tempSalesOrderMst;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempSalesOrderMst;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempSalesOrderMst;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"mfgcodemst\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)                          \n" +
            "		      ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempMFGCodeMst;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempMFGCodeMst;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempMFGCodeMst;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"dataelement_transactionvalues_manual\" THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                           \n" +
            "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)                          \n" +
            "				and deletedAt IS NULL');		                          \n" +
            "			PREPARE stmt2 FROM @SQL2;                          \n" +
            "			EXECUTE stmt2;                          \n" +
            "  \n" +
            "  \n" +
            "END IF;                          \n" +
            "IF tableName=\"shippedassembly\" THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                  \n" +
            "			/* [S] - Add Time line log for delete shipped assembly */                   \n" +
            "			SELECT GROUP_CONCAT(shippedqty) , workorderID  INTO @lvShippedqty,@lvWoID                  \n" +
            "			FROM shippedassembly                  \n" +
            "			WHERE FIND_IN_SET(id,IDs);                  \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID ;                  \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Shipped assembly deleted\");                    \n" +
            "			SET @lvEventDescription = CONCAT(\"Shipped assembly for workorder \\\"\",@lvWoNumber,\"\\\" & quantity \\\"\",@lvShippedqty ,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,9,NULL,deletedBy,3);  /* 3 = DELETE */                    \n" +
            "			/* [E] - Add Time line log for delete shipped assembly */ 		                  \n" +
            "  \n" +
            "END IF;                          \n" +
            "IF tableName=\"assemblymst\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                          \n" +
            "		     UNION ALL                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                          \n" +
            "		     UNION ALL                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                          \n" +
            "		     UNION ALL                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                          \n" +
            "		    UNION ALL                          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)                          \n" +
            "		      ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempassemblymst;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempassemblymst;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempassemblymst;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"assembly_revisionmst\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND (fromRevisionID IN(',IDs,') OR toRevisionID IN(',IDs,'))  LIMIT 1)                          \n" +
            "		     UNION ALL                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                          \n" +
            "		     UNION ALL                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                          \n" +
            "		     UNION ALL                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                          \n" +
            "		    UNION ALL                          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)                          \n" +
            "		      ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempassembly_revisionmst;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempassembly_revisionmst;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempassembly_revisionmst;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"workorder_trans_serialno\" THEN                          \n" +
            "  \n" +
            "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1                           \n" +
            "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;                          \n" +
            "  \n" +
            "  \n" +
            "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)                          \n" +
            "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)                           \n" +
            "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1                           \n" +
            "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;                          \n" +
            "  \n" +
            "	/* condition to check total serials of type greater than actual production qty */                          \n" +
            "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1                          \n" +
            "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)                           \n" +
            "		> IFNULL(vQty1,0)) THEN                          \n" +
            "  \n" +
            "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */                          \n" +
            "		IF(vQty1 IS NULL OR vQty1 = 0) THEN                           \n" +
            "  \n" +
            "			/* condition to check curr opis and status match with given delete serial */                          \n" +
            "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1                          \n" +
            "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN                          \n" +
            "  \n" +
            "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                          \n" +
            "				WHERE woTransSerialID = IDs;	                          \n" +
            "  \n" +
            "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                           \n" +
            "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                          \n" +
            "				ORDER BY woTransSerialID DESC LIMIT 1;                          \n" +
            "  \n" +
            "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                          \n" +
            "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	                    \n" +
            "				/* [S] - Add Time line log for delete production serial from work order operation */ 	                  \n" +
            "				SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");                    \n" +
            "				SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
            "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                    \n" +
            "				/* [E] - Add Time line log for delete production serial from work order operation */ 				                  \n" +
            "  \n" +
            "			ELSE                           \n" +
            "				SELECT 'not allowed';                          \n" +
            "			END IF;                          \n" +
            "  \n" +
            "  \n" +
            "		ELSE                           \n" +
            "  \n" +
            "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                          \n" +
            "			WHERE woTransSerialID = IDs;	                          \n" +
            "  \n" +
            "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                           \n" +
            "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                          \n" +
            "			ORDER BY woTransSerialID DESC LIMIT 1;                          \n" +
            "  \n" +
            "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                          \n" +
            "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;                  \n" +
            "			/* [S] - Add Time line log for delete production serial from work order operation */ 	                  \n" +
            "			SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");                    \n" +
            "			SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                    \n" +
            "			/* [E] - Add Time line log for delete production serial from work order operation */                      \n" +
            "  \n" +
            "		END IF;	                          \n" +
            "  \n" +
            "  \n" +
            "	ELSE                           \n" +
            "		SELECT 'not allowed';		                          \n" +
            "	END IF;	                          \n" +
            "  \n" +
            "  \n" +
            "END IF;                          \n" +
            "IF tableName=\"br_label_template\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)                          \n" +
            "		      ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempbr_label_template;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempbr_label_template;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempbr_label_template;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"measurement_types\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)                          \n" +
            "		     UNION ALL                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempMeasurement_types;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempMeasurement_types;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempMeasurement_types;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"uoms\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg                           \n" +
            "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)                          \n" +
            "            UNION ALL                          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg                           \n" +
            "            FROM unit_detail_formula WHERE deletedAt IS NULL AND (unitID IN (',IDs,')  or toUnitID IN (',IDs,')) LIMIT 1)                  \n" +
            "              UNION ALL                        \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND uom IN(',IDs,') LIMIT 1)) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempUOMs;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempUOMs;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempUOMs;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"jobtypes\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                           \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempJobTypess;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempJobTypess;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempJobTypess;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"ordertype\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                           \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempOrderTypes;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempOrderTypes;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempOrderTypes;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"reasonmst\" THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "END IF;                          \n" +
            "IF tableName='component_sid_stock' THEN	                          \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)                          \n" +
            "			UNION ALL                          \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		                              \n" +
            "		    ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete component sid stock (receiving material) */ 	                  \n" +
            "			SELECT GROUP_CONCAT(uid) INTO @lvUID  FROM component_sid_stock                  \n" +
            "			WHERE FIND_IN_SET(id,IDs);	                  \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Receiving material(s) deleted\");                    \n" +
            "			SET @lvEventDescription = CONCAT(\"Receiving material(s) of UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7,NULL,deletedBy,3);  /* 3 = DELETE */                    \n" +
            "			/* [E] - Add Time line log for delete component sid stock (receiving material) */ 	                  \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentsidstock;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempcomponentsidstock;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempcomponentsidstock;                           \n" +
            "  \n" +
            "END IF;                          \n" +
            "IF tableName='component_sid_stock_dataelement_values' THEN	                          \n" +
            "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                      \n" +
            "			/* [S] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	                  \n" +
            "			SELECT GROUP_CONCAT(dataelementid), GROUP_CONCAT(refsidid) INTO @lvCSDlIDs,@lvRefsidid                     \n" +
            "			FROM component_sid_stock_dataelement_values                  \n" +
            "			WHERE FIND_IN_SET(id,IDs);                  \n" +
            "  \n" +
            "			SELECT uid INTO @lvUID FROM component_sid_stock WHERE id = @lvRefsidid   ;                  \n" +
            "  \n" +
            "			SELECT GROUP_CONCAT(dataElementName) INTO @lvDlNames                  \n" +
            "			FROM dataelement                   \n" +
            "			WHERE FIND_IN_SET(dataElementID,@lvCSDlIDs);	                  \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Data field(s) of receiving material deleted\");                    \n" +
            "			SET @lvEventDescription = CONCAT(\"Data field(s) \\\"\",@lvDlNames,\"\\\" of receiving material with UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7.01,NULL,deletedBy,3);  /* 3 = DELETE */                    \n" +
            "			/* [E] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	                  \n" +
            "END IF;                          \n" +
            "IF tableName='chart_templatemst' THEN	                          \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)                          \n" +
            "		    ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempcharttemplatemst;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempcharttemplatemst;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempcharttemplatemst;                           \n" +
            "  \n" +
            "END IF;                          \n" +
            "IF tableName=\"shipping_request\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg                           \n" +
            "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)                          \n" +
            "            UNION ALL                          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg                           \n" +
            "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                    \n" +
            "			/* [S] - Add Time line log for delete shipment request */                   \n" +
            "			SELECT GROUP_CONCAT(note) INTO @lvNotes FROM Shipping_Request                  \n" +
            "			WHERE FIND_IN_SET(id,IDs);	                  \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Shipment request deleted\");                    \n" +
            "			SET @lvEventDescription = CONCAT(\"Shipment request of \\\"\",@lvNotes,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,8,NULL,deletedBy,3);  /* 3 = DELETE */                    \n" +
            "			/* [E] - Add Time line log for delete shipment request */                   \n" +
            "  \n" +
            "			SELECT * FROM tempShippingRequest;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempShippingRequest;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempShippingRequest;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"chart_rawdata_category\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg                           \n" +
            "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)                          \n" +
            "            UNION ALL                          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg                           \n" +
            "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempChartRawdataCategory;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempChartRawdataCategory;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempChartRawdataCategory;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"component_standard\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg                           \n" +
            "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandard;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempcomponentStandard;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempcomponentStandard;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"component_standard_class\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg                           \n" +
            "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');                          \n" +
            "           /*  UNION ALL                          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg                           \n" +
            "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt2 FROM @SQL2;                          \n" +
            "			EXECUTE stmt2;                          \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandardClass;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempcomponentStandardClass;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempcomponentStandardClass;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"rfq_lineitems\" THEN                          \n" +
            "		SELECT 0 TotalCount, '' Message;                          \n" +
            "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "		PREPARE stmt1 FROM @SQL1;                          \n" +
            "		EXECUTE stmt1;                                      \n" +
            "END IF;                          \n" +
            "IF tableName=\"requirement\" THEN                          \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg                           \n" +
            "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM temprequirements)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM temprequirements;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM temprequirements;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE temprequirements;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"workorder_trans_packagingdetail\" THEN                     \n" +
            "		/* [S] - Add Time line log for delete work order transaction packing details */                    \n" +
            "		SELECT  (SELECT woNumber FROM workorder WHERE woID = wtpd.woID),                  \n" +
            "			(SELECT opName FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL),                  \n" +
            "			(SELECT woOPID FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL)                  \n" +
            "			INTO @lvWoNumber , @lvOpName ,@lvWoOPID                   \n" +
            "		FROM workorder_trans_packagingdetail wtpd                   \n" +
            "		WHERE wtpd.woTransPackagingDetailID = IDs AND wtpd.deletedAt IS NULL  /* here ids multiple but need one record only so */;                  \n" +
            "		SET @lvEventTitle = CONCAT(\"Box serial details deleted from work order operation\");                    \n" +
            "		SET @lvEventDescription = CONCAT(\"Box serial details deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.17,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                    \n" +
            "		/* [E] - Add Time line log for delete work order transaction packing details */                   \n" +
            "  \n" +
            "		SELECT 0 TotalCount, '' Message;                          \n" +
            "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "		PREPARE stmt1 FROM @SQL1;                          \n" +
            "		EXECUTE stmt1;                                      \n" +
            "END IF;                          \n" +
            "IF tableName=\"customer_addresses\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)                          \n" +
            "			UNION ALL                          \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                           \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempcustomer_addresses;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempcustomer_addresses;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempcustomer_addresses;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"rfqforms\" THEN                          \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg                           \n" +
            "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in                           \n" +
            "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');                          \n" +
            "  \n" +
            "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in                           \n" +
            "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		                          \n" +
            "  \n" +
            "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in                           \n" +
            "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		                          \n" +
            "  \n" +
            "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in                           \n" +
            "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		                          \n" +
            "  \n" +
            "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in                           \n" +
            "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');                          \n" +
            "  \n" +
            "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		                          \n" +
            "  \n" +
            "            PREPARE stmt1 FROM @SQL1;                          \n" +
            "			PREPARE stmt2 FROM @SQL2;                          \n" +
            "            PREPARE stmt3 FROM @SQL3;                          \n" +
            "			PREPARE stmt4 FROM @SQL4;                          \n" +
            "            PREPARE stmt5 FROM @SQL5;                          \n" +
            "			PREPARE stmt6 FROM @SQL6;                          \n" +
            "  \n" +
            "			EXECUTE stmt1;                          \n" +
            "			EXECUTE stmt2;                          \n" +
            "            EXECUTE stmt3;                          \n" +
            "			EXECUTE stmt4;                          \n" +
            "            EXECUTE stmt5;                          \n" +
            "			EXECUTE stmt6;                          \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM temprfqformss;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM temprfqformss;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE temprfqformss;                           \n" +
            "END IF;                          \n" +
            "IF tableName=\"rfq_mountingtypemst\" THEN                          \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg                           \n" +
            "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1)                  \n" +
            "             UNION ALL                        \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mountingTypeID IN(',IDs,') LIMIT 1)) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM temprfqpartcategory;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM temprfqpartcategory;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE temprfqpartcategory;                           \n" +
            "  \n" +
            "END IF;                          \n" +
            "IF tableName=\"who_bought_who\" THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "END IF;                          \n" +
            "IF tableName=\"rfq_parttypemst\" THEN                          \n" +
            "			SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqparttypemst as                          \n" +
            "				 SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "			    FROM                           \n" +
            "			    (                     \n" +
            "	            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM                   \n" +
            "	            component WHERE deletedAt IS NULL AND partTypeID IN(',IDs,') LIMIT 1)) q');                          \n" +
            "	  	        PREPARE stmt FROM @SQL;                          \n" +
            "		        EXECUTE stmt;                    \n" +
            "	          IF (SELECT TotalCount FROM temprfqparttypemst)=0 THEN                      \n" +
            "  \n" +
            "				SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,',                   \n" +
            "	            deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "	  				PREPARE stmt1 FROM @SQL1;                          \n" +
            "						EXECUTE stmt1;                    \n" +
            "	            	SELECT * FROM temprfqparttypemst;                          \n" +
            "			ELSE                          \n" +
            "				SELECT * FROM temprfqparttypemst;                          \n" +
            "  \n" +
            "			END IF;                          \n" +
            "            DROP TABLE temprfqparttypemst;                                     \n" +
            "  \n" +
            "END IF;                          \n" +
            "IF tableName=\"rfq_lineitems_errorcode\" THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "END IF;                          \n" +
            "IF tableName=\"rfq_lineitems_keywords\" THEN                          \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "END IF;                    \n" +
            "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                          \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempQuotecharges_dynamic_fields_mst as                          \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
            "		    FROM                           \n" +
            "		    (                          \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                           \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');                          \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                          \n" +
            "	EXECUTE stmt;                          \n" +
            "		IF (SELECT TotalCount FROM tempQuotecharges_dynamic_fields_mst)=0 THEN                          \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update quotecharges_dynamic_fields_mst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "			PREPARE stmt1 FROM @SQL1;                          \n" +
            "			EXECUTE stmt1;                          \n" +
            "  \n" +
            "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                          \n" +
            "		ELSE                          \n" +
            "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                          \n" +
            "  \n" +
            "		END IF;                          \n" +
            "		DROP TABLE tempQuotecharges_dynamic_fields_mst;                           \n" +
            "END IF;      \n" +
            "IF tableName=\"cost_category\" THEN                          \n" +
            "		SET @SQl1 = CONCAT('update cost_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
            "		PREPARE stmt1 FROM @SQL1;                          \n" +
            "		EXECUTE stmt1;             \n" +
            "END IF;                                  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 29-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (145,'1.00','V1','Delete Issue Resolved for cost category - Vaibhav'," + userid + ");"
            );
            break;
        case 145:
            allDbChangesArray.push(
            /* **************************** New Script -> 29-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
              "CREATE PROCEDURE `Sproc_checkDelete`(                          \n" +
              "	IN tableName VARCHAR(255),                          \n" +
              "	IN IDs LONGTEXT,                          \n" +
              "	IN deletedBy INT,                          \n" +
              "	IN entityID VARCHAR(255),                          \n" +
              "	IN refrenceIDs LONGTEXT                          \n" +
              "    )  \n" +
              "BEGIN                          \n" +
              "	DECLARE vWoID1 INT(11);                          \n" +
              "	DECLARE vOpID1 INT(11);                          \n" +
              "	DECLARE vSerialNo1 VARCHAR(50);                          \n" +
              "	DECLARE vProdStatus1 VARCHAR(5);                          \n" +
              "	DECLARE vWoTransID1 INT(11);                          \n" +
              "	DECLARE vQty1 INT(11);                          \n" +
              "	DECLARE vOpID2 INT(11);                          \n" +
              "	DECLARE vProdstatus2 VARCHAR(5);                          \n" +
              "  \n" +
              "IF tableName='employees' THEN                          \n" +
              " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)                          \n" +
              "	   UNION ALL                                                \n" +
              "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)                          \n" +
              "           UNION ALL                           \n" +
              "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND (er.finalStatusInit IN(',IDs,') OR er.initiateBy IN(',IDs,')) LIMIT 1)                          \n" +
              "	   UNION ALL                          \n" +
              "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)                          \n" +
              "	UNION ALL                          \n" +
              "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)                          \n" +
              "	  UNION ALL                          \n" +
              "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)                          \n" +
              "	  UNION ALL                          \n" +
              "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)                          \n" +
              "	  UNION ALL                          \n" +
              "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)                          \n" +
              "	  UNION ALL                          \n" +
              "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)                          \n" +
              "	 UNION ALL                          \n" +
              "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)                          \n" +
              "	  UNION ALL                          \n" +
              "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND (wr.reqGenEmployeeID IN(',IDs,') OR wr.woAuthorID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                          \n" +
              "	  UNION ALL                           \n" +
              "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND (wr.commentemployeeID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                          \n" +
              "	  UNION ALL                          \n" +
              "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND (wr.employeeID IN(',IDs,') OR wr.requstedEmployeeID IN(',IDs,')) LIMIT 1)                           \n" +
              "	  UNION ALL                              \n" +
              "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE (wt.checkinEmployeeID IN(',IDs,') OR wt.checkoutEmployeeID IN(',IDs,')) LIMIT 1)                          \n" +
              "	  UNION ALL                             \n" +
              "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)                          \n" +
              "	 UNION ALL                           \n" +
              "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)                          \n" +
              "	 UNION ALL                           \n" +
              "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)                          \n" +
              "	 UNION ALL                           \n" +
              "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND (wthu.holdEmployeeId IN(',IDs,') OR wthu.unHoldEmployeeId IN(',IDs,')) LIMIT 1)                          \n" +
              "	UNION ALL                           \n" +
              "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)                          \n" +
              "	 UNION ALL                           \n" +
              "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)                          \n" +
              "	 UNION ALL                           \n" +
              "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)                          \n" +
              "	 UNION ALL                           \n" +
              "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND (holdEmployeeId IN(',IDs,') OR unHoldEmployeeId IN(',IDs,')) LIMIT 1)                          \n" +
              "  \n" +
              "        ) q');                          \n" +
              "    PREPARE stmt FROM @SQL;                          \n" +
              "    EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempEmp)=0 THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');                          \n" +
              "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');                          \n" +
              "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');                          \n" +
              "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                          \n" +
              "  \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			PREPARE stmt2 FROM @SQL2;                          \n" +
              "			PREPARE stmt3 FROM @SQL3;                          \n" +
              "			PREPARE stmt4 FROM @SQL4;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "			EXECUTE stmt2;                          \n" +
              "			EXECUTE stmt3;                          \n" +
              "			EXECUTE stmt4;                          \n" +
              "			SELECT                           \n" +
              "    *                          \n" +
              "FROM                          \n" +
              "    tempEmp;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempEmp;                          \n" +
              "		END IF;                          \n" +
              "  \n" +
              "    DROP TABLE tempEmp;                          \n" +
              "END IF;                          \n" +
              "IF tableName='eco_type_category' THEN                          \n" +
              "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                           \n" +
              "	  ) q');                          \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT                           \n" +
              "    *                          \n" +
              "FROM                          \n" +
              "    tempEcoTypeCategory;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempEcoTypeCategory;                          \n" +
              "		END IF;                          \n" +
              "    DROP TABLE tempEcoTypeCategory;                            \n" +
              "END IF;                          \n" +
              "IF tableName='eco_type_values' THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)                          \n" +
              "	  ) q');                          \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT                           \n" +
              "    *                          \n" +
              "FROM                          \n" +
              "    tempEcoTypeValues;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempEcoTypeValues;                          \n" +
              "		END IF;                          \n" +
              "    DROP TABLE tempEcoTypeValues;                            \n" +
              "END IF;                          \n" +
              "IF tableName='customers' THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                           \n" +
              "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                           \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                          \n" +
              "	  ) q');                          \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                          \n" +
              "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                          \n" +
              "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			PREPARE stmt2 FROM @SQL2;                          \n" +
              "			PREPARE stmt3 FROM @SQL3;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "			EXECUTE stmt2;                          \n" +
              "			EXECUTE stmt3;                          \n" +
              "  \n" +
              "			SELECT                           \n" +
              "    *                          \n" +
              "FROM                          \n" +
              "    tempCustomers;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempCustomers;                          \n" +
              "		END IF;                          \n" +
              "    DROP TABLE tempCustomers;                            \n" +
              "END IF;                          \n" +
              "IF tableName='certificate_standards' THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                          \n" +
              "  \n" +
              "	  ) q');                          \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		                          \n" +
              "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                          \n" +
              "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			PREPARE stmt2 FROM @SQL2;                          \n" +
              "			PREPARE stmt3 FROM @SQL3;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "			EXECUTE stmt2;                          \n" +
              "			EXECUTE stmt3;                          \n" +
              "  \n" +
              "			SELECT * FROM tempCertificateStandards;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempCertificateStandards;                          \n" +
              "		END IF;                          \n" +
              "    DROP TABLE tempCertificateStandards;                            \n" +
              "END IF;                          \n" +
              "IF tableName='department' THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                          \n" +
              "  \n" +
              "	  ) q');                          \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		                          \n" +
              "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                          \n" +
              "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			PREPARE stmt2 FROM @SQL2;                          \n" +
              "			PREPARE stmt3 FROM @SQL3;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "			EXECUTE stmt2;                          \n" +
              "			EXECUTE stmt3;                          \n" +
              "  \n" +
              "			SELECT * FROM tempDepartment;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempDepartment;                          \n" +
              "		END IF;                          \n" +
              "    DROP TABLE tempDepartment;                            \n" +
              "END IF;                          \n" +
              "IF tableName='genericcategory' THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND (eqpGroupID IN(',IDs,') OR eqpSubGroupID IN(',IDs,') OR eqpTypeID IN(',IDs,') OR eqpPossessionID IN(',IDs,') OR eqpOwnershipTypeID IN(',IDs,') OR locationTypeID IN(',IDs,'))   LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)                          \n" +
              "	     UNION ALL                        \n" +
              "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)                          \n" +
              "	  ) q');                          \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT                           \n" +
              "    *                          \n" +
              "FROM                          \n" +
              "    tempGenericCategory;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempGenericCategory;                          \n" +
              "		END IF;                          \n" +
              "    DROP TABLE tempGenericCategory;                            \n" +
              "END IF;                          \n" +
              "IF tableName='equipment' THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                          \n" +
              "  \n" +
              "	  ) q');                          \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN                          \n" +
              "			IF entityID IS NOT NULL THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		                          \n" +
              "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                          \n" +
              "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			PREPARE stmt2 FROM @SQL2;                          \n" +
              "			PREPARE stmt3 FROM @SQL3;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "			EXECUTE stmt2;                          \n" +
              "			EXECUTE stmt3;                          \n" +
              "  \n" +
              "			ELSE                          \n" +
              "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "			END IF;                          \n" +
              "  \n" +
              "			SELECT * FROM tempEquipment;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempEquipment;                          \n" +
              "		END IF;                          \n" +
              "    DROP TABLE tempEquipment;                            \n" +
              "END IF;                          \n" +
              "IF tableName='parts' THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                          \n" +
              "	  ) q');                          \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempParts)=0 THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempParts;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempParts;                          \n" +
              "		END IF;                          \n" +
              "    DROP TABLE tempParts;                            \n" +
              "END IF;                          \n" +
              "IF tableName='master_templates' THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)                          \n" +
              "	  ) q');                          \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempMasterTemplate;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempMasterTemplate;                          \n" +
              "		END IF;                          \n" +
              "    DROP TABLE tempMasterTemplate;                            \n" +
              "END IF;                          \n" +
              "IF tableName='operations' THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                          \n" +
              "  \n" +
              "	  ) q');                          \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempOperations)=0 THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		                          \n" +
              "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                          \n" +
              "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			PREPARE stmt2 FROM @SQL2;                          \n" +
              "			PREPARE stmt3 FROM @SQL3;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "			EXECUTE stmt2;                          \n" +
              "			EXECUTE stmt3;                          \n" +
              "  \n" +
              "			SELECT * FROM tempOperations;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempOperations;                          \n" +
              "		END IF;                          \n" +
              "    DROP TABLE tempOperations;                            \n" +
              "END IF;                          \n" +
              "IF tableName='workorder' THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL		                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                          \n" +
              "  \n" +
              "	  ) q');                          \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN                          \n" +
              "  \n" +
              "			/* [S] - Add Time line log for delete work order */                          \n" +
              "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;                           \n" +
              "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");                          \n" +
              "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			                          \n" +
              "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			                          \n" +
              "			/* [E] - Add Time line log for delete work order */			                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update workorder set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                          \n" +
              "			SET @SQl2 = CONCAT('update subform_transaction set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                          \n" +
              "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                          \n" +
              "			SET @SQl4 = CONCAT('update workorder_certification set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			PREPARE stmt2 FROM @SQL2;                          \n" +
              "			PREPARE stmt3 FROM @SQL3;                          \n" +
              "			PREPARE stmt4 FROM @SQL4;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "			EXECUTE stmt2;                          \n" +
              "			EXECUTE stmt3;                          \n" +
              "			EXECUTE stmt4;                          \n" +
              "  \n" +
              "			SELECT * FROM tempWorkorder;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempWorkorder;                          \n" +
              "		END IF;                          \n" +
              "    DROP TABLE tempWorkorder;                            \n" +
              "END IF;                          \n" +
              "IF tableName='roles' THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                          \n" +
              "         UNION ALL                          \n" +
              "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                          \n" +
              "         UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');                          \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempRoles)=0 THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempRoles;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempRoles;                          \n" +
              "		END IF;                          \n" +
              "    DROP TABLE tempRoles;                            \n" +
              "END IF;                          \n" +
              "IF tableName='standard_class' THEN                          \n" +
              "  \n" +
              " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND FIND_IN_SET(',IDs,',classIDs) LIMIT 1)                          \n" +
              "	  ) q');                          \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                    \n" +
              "  \n" +
              "  \n" +
              "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');      \n" +
              "  \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempStandardClass;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempStandardClass;                          \n" +
              "		END IF;                          \n" +
              "    DROP TABLE tempStandardClass;                            \n" +
              "END IF;                          \n" +
              "IF tableName='dataelement' THEN                          \n" +
              "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		                          \n" +
              "		UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                          \n" +
              "	  ) q');                          \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt2 FROM @SQL2;                          \n" +
              "			EXECUTE stmt2;                          \n" +
              "  \n" +
              "  \n" +
              "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)                          \n" +
              "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated                          \n" +
              "			FROM dataelement dl WHERE dl.dataElementID = IDs;                          \n" +
              "  \n" +
              "  \n" +
              "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */                          \n" +
              "  \n" +
              "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                           \n" +
              "							where type IN(''',IDs,''') and deletedAt IS NULL ');		                          \n" +
              "				PREPARE stmt3 FROM @SQL3;                          \n" +
              "				EXECUTE stmt3;                          \n" +
              "  \n" +
              "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */                          \n" +
              "  \n" +
              "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */                          \n" +
              "  \n" +
              "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs                           \n" +
              "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN                          \n" +
              "  \n" +
              "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                           \n" +
              "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'                           \n" +
              "								AND isAutoIncrement = 1 AND deletedAt IS NULL)                          \n" +
              "							 and deletedAt IS NULL ');		                          \n" +
              "					     PREPARE stmt4 FROM @SQL4;                          \n" +
              "				             EXECUTE stmt4;                          \n" +
              "					END IF;	                          \n" +
              "				END IF;                          \n" +
              "  \n" +
              "  \n" +
              "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN                          \n" +
              "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)                           \n" +
              "						    AND deletedAt IS NULL');		                          \n" +
              "				PREPARE stmt5 FROM @SQL5;                          \n" +
              "				EXECUTE stmt5;                          \n" +
              "  \n" +
              "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                           \n" +
              "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		                          \n" +
              "				PREPARE stmt6 FROM @SQL6;                          \n" +
              "				EXECUTE stmt6;                          \n" +
              "  \n" +
              "  \n" +
              "			END IF;                          \n" +
              "  \n" +
              "  \n" +
              "			SELECT * FROM tempDataElement;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempDataElement;                          \n" +
              "		END IF;                          \n" +
              "    DROP TABLE tempDataElement;                            \n" +
              "  \n" +
              "END IF;                          \n" +
              "IF tableName='workorder_preprogcomp' THEN                          \n" +
              "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                          \n" +
              "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg                          \n" +
              "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND                          \n" +
              "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                          \n" +
              "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "    SELECT * FROM  tempComponent;                          \n" +
              "    SELECT TotalCount FROM  tempComponent;                          \n" +
              "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			                          \n" +
              "  \n" +
              "			/* [S] - Add Time line log for delete pre program component */                    \n" +
              "			SELECT partNumber,(SELECT woNumber FROM workorder WHERE woID = woppc.woID),                  \n" +
              "				(SELECT opName FROM workorder_operation WHERE woOPID = refStkWOOPID)                  \n" +
              "			    INTO @lvPartNumber,@lvWoNumber,@lvOpName                  \n" +
              "			FROM workorder_preprogcomp woppc                    \n" +
              "			WHERE woPreProgCompID = IDs  AND deletedAt IS NULL;                     \n" +
              "  \n" +
              "			SET @lvEventTitle = CONCAT(\"Preprogram component deleted from work order\");                    \n" +
              "			SET @lvEventDescription = CONCAT(\"Preprogram component \\\"\",@lvPartNumber,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
              "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.14,NULL,deletedBy,3);  /* 3 = DELETE */                    \n" +
              "			/* [E] - Add Time line log for delete pre program component */                   \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt2 FROM @SQL2;                          \n" +
              "			EXECUTE stmt2;                          \n" +
              "  \n" +
              "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where                           \n" +
              "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                          \n" +
              "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt3 FROM @SQL3;                          \n" +
              "			EXECUTE stmt3;                          \n" +
              "		SELECT                           \n" +
              "			*                          \n" +
              "		FROM                          \n" +
              "			tempComponent;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempComponent;                          \n" +
              "		END IF;                          \n" +
              "    DROP TABLE tempComponent;                            \n" +
              "END IF;                          \n" +
              "IF tableName='component' THEN                          \n" +
              "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                          \n" +
              "		 UNION ALL                          \n" +
              "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                          \n" +
              "  \n" +
              "	  ) q');                          \n" +
              "	  PREPARE stmt FROM @SQL;                          \n" +
              "	   EXECUTE stmt;                          \n" +
              "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN                          \n" +
              "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempComponent;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempComponent;                          \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempComponent;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"workorder_cluster\" THEN                           \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)                          \n" +
              "		      ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN                          \n" +
              "  \n" +
              "		/* [S] - Add Time line log for delete cluster */                          \n" +
              "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster                          \n" +
              "		WHERE clusterID = IDs AND deletedAt IS NULL;                          \n" +
              "		SELECT woNumber INTO @lvWoNumber FROM workorder                          \n" +
              "		WHERE woID = @lvWoID AND deletedAt IS NULL ;                          \n" +
              "  \n" +
              "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");                          \n" +
              "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                          \n" +
              "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		                          \n" +
              "		/* [E] - Add Time line log for delete cluster */                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update workorder_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempWorkorderCluster;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempWorkorderCluster;                          \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempWorkorderCluster;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"workorder_operation\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)                          \n" +
              "			 UNION ALL                          \n" +
              "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		                           \n" +
              "		      ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN                          \n" +
              "			 /* [S] - Add Time line log for delete work order operation */                          \n" +
              "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName                          \n" +
              "			FROM workorder_operation                           \n" +
              "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;                           \n" +
              "  \n" +
              "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                          \n" +
              "  \n" +
              "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");                          \n" +
              "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                          \n" +
              "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		                          \n" +
              "			/* [E] - Add Time line log for delete work order operation */                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update workorder_operation set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                          \n" +
              "		SET @SQl2 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                          \n" +
              "		SET @SQl3 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                          \n" +
              "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                          \n" +
              "		SET @SQl5 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                          \n" +
              "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                          \n" +
              "		SET @SQl7 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		                          \n" +
              "  \n" +
              "		-- Added for update verify workorder status again after changes in workorder operation                          \n" +
              "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;                          \n" +
              "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		                          \n" +
              "		-- Added for update verify workorder status again after changes in workorder operation                          \n" +
              "  \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			PREPARE stmt2 FROM @SQL2;                          \n" +
              "			PREPARE stmt3 FROM @SQL3;                          \n" +
              "			PREPARE stmt4 FROM @SQL4;                          \n" +
              "			PREPARE stmt5 FROM @SQL5;                          \n" +
              "			PREPARE stmt6 FROM @SQL6;                          \n" +
              "			PREPARE stmt7 FROM @SQl7;                          \n" +
              "			PREPARE stmt8 FROM @SQl7;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "			EXECUTE stmt2;                          \n" +
              "			EXECUTE stmt3;                          \n" +
              "			EXECUTE stmt4;                          \n" +
              "			EXECUTE stmt5;                          \n" +
              "			EXECUTE stmt6;                          \n" +
              "			EXECUTE stmt7;                          \n" +
              "			EXECUTE stmt8;                          \n" +
              "  \n" +
              "			SELECT * FROM tempWorkorderOperation;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempWorkorderOperation;                          \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempWorkorderOperation;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"workorder_operation_part\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                          \n" +
              "		      ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN                          \n" +
              "  \n" +
              "		/* [S] - Add Time line log for delete parts from work order */                          \n" +
              "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                          \n" +
              "		FROM workorder_operation                           \n" +
              "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                           \n" +
              "  \n" +
              "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                          \n" +
              "  \n" +
              "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts                          \n" +
              "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;                           \n" +
              "  \n" +
              "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");                          \n" +
              "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                          \n" +
              "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */                          \n" +
              "		/* [E] - Add Time line log for delete parts from work order */                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempWorkorderPart;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempWorkorderPart;                          \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempWorkorderPart;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"workorder_operation_equipment\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                          \n" +
              "		      ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN                          \n" +
              "  \n" +
              "		/* [S] - Add Time line log for delete Equipment from work order */                          \n" +
              "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                          \n" +
              "		FROM workorder_operation                           \n" +
              "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                           \n" +
              "  \n" +
              "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	                          \n" +
              "  \n" +
              "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment                          \n" +
              "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;                           \n" +
              "  \n" +
              "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");                          \n" +
              "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                          \n" +
              "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                          \n" +
              "		/* [E] -  Add Time line log for delete Equipment from work order */                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');                          \n" +
              "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			PREPARE stmt2 FROM @SQL2;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "			EXECUTE stmt2;                          \n" +
              "  \n" +
              "			SELECT * FROM tempWorkorderEquipment;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempWorkorderEquipment;                          \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempWorkorderEquipment;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"workorder_operation_employee\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                          \n" +
              "		      ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN                          \n" +
              "  \n" +
              "		/* [S] - Add Time line log for delete Employees from work order */                          \n" +
              "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                          \n" +
              "		FROM workorder_operation                           \n" +
              "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                           \n" +
              "  \n" +
              "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                          \n" +
              "  \n" +
              "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees                          \n" +
              "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;                           \n" +
              "  \n" +
              "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");                          \n" +
              "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                          \n" +
              "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                          \n" +
              "		/* [E] -  Add Time line log for delete Employee from work order */                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempWorkorderEmployee;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempWorkorderEmployee;                          \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempWorkorderEmployee;                          \n" +
              "  \n" +
              "END IF;                          \n" +
              "IF tableName=\"workorder_operation_cluster\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)                          \n" +
              "		      ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN                          \n" +
              "  \n" +
              "		/* [S] - Add Time line log for delete operations from cluster */                          \n" +
              "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                          \n" +
              "		FROM workorder_operation                           \n" +
              "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                           \n" +
              "  \n" +
              "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                          \n" +
              "  \n" +
              "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster                          \n" +
              "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;                           \n" +
              "  \n" +
              "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");                          \n" +
              "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                          \n" +
              "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                          \n" +
              "		/* [E] -  Add Time line log for delete operations from cluster */		                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                          \n" +
              "  \n" +
              "		-- Added for update verify workorder status again after changes in workorder operation                          \n" +
              "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;                          \n" +
              "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		                          \n" +
              "		-- Added for update verify workorder status again after changes in workorder operation                          \n" +
              "  \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			PREPARE stmt2 FROM @SQL2;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "			EXECUTE stmt2;                          \n" +
              "  \n" +
              "			SELECT * FROM tempWorkorderOperationCluster;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempWorkorderOperationCluster;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempWorkorderOperationCluster;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"entity\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                          \n" +
              "		     UNION ALL                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                          \n" +
              "		     UNION ALL                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                          \n" +
              "		    UNION ALL                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                          \n" +
              "		      ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempEntity)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempEntity;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempEntity;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempEntity;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"salesordermst\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)                          \n" +
              "		      ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			/* [S] - Add Time line log for delete sales order mst */ 	                  \n" +
              "			SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber                  \n" +
              "			FROM salesordermst                  \n" +
              "			WHERE FIND_IN_SET(id,IDs);                  \n" +
              "  \n" +
              "			SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");                    \n" +
              "			SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
              "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */                    \n" +
              "			/* [E] - Add Time line log for delete sales order mst */	                  \n" +
              "  \n" +
              "			SELECT * FROM tempSalesOrderMst;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempSalesOrderMst;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempSalesOrderMst;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"mfgcodemst\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)                          \n" +
              "		      ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempMFGCodeMst;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempMFGCodeMst;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempMFGCodeMst;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"dataelement_transactionvalues_manual\" THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                           \n" +
              "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)                          \n" +
              "				and deletedAt IS NULL');		                          \n" +
              "			PREPARE stmt2 FROM @SQL2;                          \n" +
              "			EXECUTE stmt2;                          \n" +
              "  \n" +
              "  \n" +
              "END IF;                          \n" +
              "IF tableName=\"shippedassembly\" THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                  \n" +
              "			/* [S] - Add Time line log for delete shipped assembly */                   \n" +
              "			SELECT GROUP_CONCAT(shippedqty) , workorderID  INTO @lvShippedqty,@lvWoID                  \n" +
              "			FROM shippedassembly                  \n" +
              "			WHERE FIND_IN_SET(id,IDs);                  \n" +
              "  \n" +
              "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID ;                  \n" +
              "  \n" +
              "			SET @lvEventTitle = CONCAT(\"Shipped assembly deleted\");                    \n" +
              "			SET @lvEventDescription = CONCAT(\"Shipped assembly for workorder \\\"\",@lvWoNumber,\"\\\" & quantity \\\"\",@lvShippedqty ,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
              "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,9,NULL,deletedBy,3);  /* 3 = DELETE */                    \n" +
              "			/* [E] - Add Time line log for delete shipped assembly */ 		                  \n" +
              "  \n" +
              "END IF;                          \n" +
              "IF tableName=\"assemblymst\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                          \n" +
              "		     UNION ALL                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                          \n" +
              "		     UNION ALL                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                          \n" +
              "		     UNION ALL                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                          \n" +
              "		    UNION ALL                          \n" +
              "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)                          \n" +
              "		      ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempassemblymst;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempassemblymst;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempassemblymst;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"assembly_revisionmst\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND (fromRevisionID IN(',IDs,') OR toRevisionID IN(',IDs,'))  LIMIT 1)                          \n" +
              "		     UNION ALL                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                          \n" +
              "		     UNION ALL                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                          \n" +
              "		     UNION ALL                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                          \n" +
              "		    UNION ALL                          \n" +
              "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)                          \n" +
              "		      ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempassembly_revisionmst;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempassembly_revisionmst;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempassembly_revisionmst;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"workorder_trans_serialno\" THEN                          \n" +
              "  \n" +
              "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1                           \n" +
              "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;                          \n" +
              "  \n" +
              "  \n" +
              "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)                          \n" +
              "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)                           \n" +
              "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1                           \n" +
              "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;                          \n" +
              "  \n" +
              "	/* condition to check total serials of type greater than actual production qty */                          \n" +
              "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1                          \n" +
              "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)                           \n" +
              "		> IFNULL(vQty1,0)) THEN                          \n" +
              "  \n" +
              "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */                          \n" +
              "		IF(vQty1 IS NULL OR vQty1 = 0) THEN                           \n" +
              "  \n" +
              "			/* condition to check curr opis and status match with given delete serial */                          \n" +
              "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1                          \n" +
              "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN                          \n" +
              "  \n" +
              "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                          \n" +
              "				WHERE woTransSerialID = IDs;	                          \n" +
              "  \n" +
              "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                           \n" +
              "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                          \n" +
              "				ORDER BY woTransSerialID DESC LIMIT 1;                          \n" +
              "  \n" +
              "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                          \n" +
              "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	                    \n" +
              "				/* [S] - Add Time line log for delete production serial from work order operation */ 	                  \n" +
              "				SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");                    \n" +
              "				SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
              "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                    \n" +
              "				/* [E] - Add Time line log for delete production serial from work order operation */ 				                  \n" +
              "  \n" +
              "			ELSE                           \n" +
              "				SELECT 'not allowed';                          \n" +
              "			END IF;                          \n" +
              "  \n" +
              "  \n" +
              "		ELSE                           \n" +
              "  \n" +
              "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                          \n" +
              "			WHERE woTransSerialID = IDs;	                          \n" +
              "  \n" +
              "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                           \n" +
              "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                          \n" +
              "			ORDER BY woTransSerialID DESC LIMIT 1;                          \n" +
              "  \n" +
              "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                          \n" +
              "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;                  \n" +
              "			/* [S] - Add Time line log for delete production serial from work order operation */ 	                  \n" +
              "			SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");                    \n" +
              "			SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
              "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                    \n" +
              "			/* [E] - Add Time line log for delete production serial from work order operation */                      \n" +
              "  \n" +
              "		END IF;	                          \n" +
              "  \n" +
              "  \n" +
              "	ELSE                           \n" +
              "		SELECT 'not allowed';		                          \n" +
              "	END IF;	                          \n" +
              "  \n" +
              "  \n" +
              "END IF;                          \n" +
              "IF tableName=\"br_label_template\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)                          \n" +
              "		      ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempbr_label_template;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempbr_label_template;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempbr_label_template;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"measurement_types\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)                          \n" +
              "		     UNION ALL                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempMeasurement_types;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempMeasurement_types;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempMeasurement_types;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"uoms\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg                           \n" +
              "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)                          \n" +
              "            UNION ALL                          \n" +
              "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg                           \n" +
              "            FROM unit_detail_formula WHERE deletedAt IS NULL AND (unitID IN (',IDs,')  or toUnitID IN (',IDs,')) LIMIT 1)                  \n" +
              "              UNION ALL                        \n" +
              "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND uom IN(',IDs,') LIMIT 1)) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempUOMs;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempUOMs;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempUOMs;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"jobtypes\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                           \n" +
              "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempJobTypess;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempJobTypess;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempJobTypess;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"ordertype\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                           \n" +
              "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempOrderTypes;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempOrderTypes;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempOrderTypes;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"reasonmst\" THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "END IF;                          \n" +
              "IF tableName='component_sid_stock' THEN	                          \n" +
              "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)                          \n" +
              "			UNION ALL                          \n" +
              "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		                              \n" +
              "		    ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			/* [S] - Add Time line log for delete component sid stock (receiving material) */ 	                  \n" +
              "			SELECT GROUP_CONCAT(uid) INTO @lvUID  FROM component_sid_stock                  \n" +
              "			WHERE FIND_IN_SET(id,IDs);	                  \n" +
              "  \n" +
              "			SET @lvEventTitle = CONCAT(\"Receiving material(s) deleted\");                    \n" +
              "			SET @lvEventDescription = CONCAT(\"Receiving material(s) of UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
              "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7,NULL,deletedBy,3);  /* 3 = DELETE */                    \n" +
              "			/* [E] - Add Time line log for delete component sid stock (receiving material) */ 	                  \n" +
              "  \n" +
              "			SELECT * FROM tempcomponentsidstock;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempcomponentsidstock;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempcomponentsidstock;                           \n" +
              "  \n" +
              "END IF;                          \n" +
              "IF tableName='component_sid_stock_dataelement_values' THEN	                          \n" +
              "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                      \n" +
              "			/* [S] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	                  \n" +
              "			SELECT GROUP_CONCAT(dataelementid), GROUP_CONCAT(refsidid) INTO @lvCSDlIDs,@lvRefsidid                     \n" +
              "			FROM component_sid_stock_dataelement_values                  \n" +
              "			WHERE FIND_IN_SET(id,IDs);                  \n" +
              "  \n" +
              "			SELECT uid INTO @lvUID FROM component_sid_stock WHERE id = @lvRefsidid   ;                  \n" +
              "  \n" +
              "			SELECT GROUP_CONCAT(dataElementName) INTO @lvDlNames                  \n" +
              "			FROM dataelement                   \n" +
              "			WHERE FIND_IN_SET(dataElementID,@lvCSDlIDs);	                  \n" +
              "  \n" +
              "			SET @lvEventTitle = CONCAT(\"Data field(s) of receiving material deleted\");                    \n" +
              "			SET @lvEventDescription = CONCAT(\"Data field(s) \\\"\",@lvDlNames,\"\\\" of receiving material with UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
              "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7.01,NULL,deletedBy,3);  /* 3 = DELETE */                    \n" +
              "			/* [E] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	                  \n" +
              "END IF;                          \n" +
              "IF tableName='chart_templatemst' THEN	                          \n" +
              "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)                          \n" +
              "		    ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempcharttemplatemst;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempcharttemplatemst;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempcharttemplatemst;                           \n" +
              "  \n" +
              "END IF;                          \n" +
              "IF tableName=\"shipping_request\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg                           \n" +
              "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)                          \n" +
              "            UNION ALL                          \n" +
              "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg                           \n" +
              "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                    \n" +
              "			/* [S] - Add Time line log for delete shipment request */                   \n" +
              "			SELECT GROUP_CONCAT(note) INTO @lvNotes FROM Shipping_Request                  \n" +
              "			WHERE FIND_IN_SET(id,IDs);	                  \n" +
              "  \n" +
              "			SET @lvEventTitle = CONCAT(\"Shipment request deleted\");                    \n" +
              "			SET @lvEventDescription = CONCAT(\"Shipment request of \\\"\",@lvNotes,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
              "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,8,NULL,deletedBy,3);  /* 3 = DELETE */                    \n" +
              "			/* [E] - Add Time line log for delete shipment request */                   \n" +
              "  \n" +
              "			SELECT * FROM tempShippingRequest;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempShippingRequest;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempShippingRequest;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"chart_rawdata_category\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg                           \n" +
              "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)                          \n" +
              "            UNION ALL                          \n" +
              "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg                           \n" +
              "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempChartRawdataCategory;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempChartRawdataCategory;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempChartRawdataCategory;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"component_standard\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg                           \n" +
              "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempcomponentStandard;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempcomponentStandard;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempcomponentStandard;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"component_standard_class\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg                           \n" +
              "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');                          \n" +
              "           /*  UNION ALL                          \n" +
              "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg                           \n" +
              "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt2 FROM @SQL2;                          \n" +
              "			EXECUTE stmt2;                          \n" +
              "  \n" +
              "			SELECT * FROM tempcomponentStandardClass;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempcomponentStandardClass;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempcomponentStandardClass;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"rfq_lineitems\" THEN                          \n" +
              "		SELECT 0 TotalCount, '' Message;                          \n" +
              "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "		PREPARE stmt1 FROM @SQL1;                          \n" +
              "		EXECUTE stmt1;                                      \n" +
              "END IF;                          \n" +
              "IF tableName=\"requirement\" THEN                          \n" +
              "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg                           \n" +
              "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM temprequirements)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM temprequirements;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM temprequirements;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE temprequirements;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"workorder_trans_packagingdetail\" THEN                     \n" +
              "		/* [S] - Add Time line log for delete work order transaction packing details */                    \n" +
              "		SELECT  (SELECT woNumber FROM workorder WHERE woID = wtpd.woID),                  \n" +
              "			(SELECT opName FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL),                  \n" +
              "			(SELECT woOPID FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL)                  \n" +
              "			INTO @lvWoNumber , @lvOpName ,@lvWoOPID                   \n" +
              "		FROM workorder_trans_packagingdetail wtpd                   \n" +
              "		WHERE wtpd.woTransPackagingDetailID = IDs AND wtpd.deletedAt IS NULL  /* here ids multiple but need one record only so */;                  \n" +
              "		SET @lvEventTitle = CONCAT(\"Box serial details deleted from work order operation\");                    \n" +
              "		SET @lvEventDescription = CONCAT(\"Box serial details deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                    \n" +
              "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.17,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                    \n" +
              "		/* [E] - Add Time line log for delete work order transaction packing details */                   \n" +
              "  \n" +
              "		SELECT 0 TotalCount, '' Message;                          \n" +
              "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "		PREPARE stmt1 FROM @SQL1;                          \n" +
              "		EXECUTE stmt1;                                      \n" +
              "END IF;                          \n" +
              "IF tableName=\"customer_addresses\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)                          \n" +
              "			UNION ALL                          \n" +
              "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                           \n" +
              "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempcustomer_addresses;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempcustomer_addresses;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempcustomer_addresses;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"rfqforms\" THEN                          \n" +
              "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg                           \n" +
              "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in                           \n" +
              "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');                          \n" +
              "  \n" +
              "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in                           \n" +
              "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		                          \n" +
              "  \n" +
              "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in                           \n" +
              "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		                          \n" +
              "  \n" +
              "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in                           \n" +
              "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		                          \n" +
              "  \n" +
              "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in                           \n" +
              "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');                          \n" +
              "  \n" +
              "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		                          \n" +
              "  \n" +
              "            PREPARE stmt1 FROM @SQL1;                          \n" +
              "			PREPARE stmt2 FROM @SQL2;                          \n" +
              "            PREPARE stmt3 FROM @SQL3;                          \n" +
              "			PREPARE stmt4 FROM @SQL4;                          \n" +
              "            PREPARE stmt5 FROM @SQL5;                          \n" +
              "			PREPARE stmt6 FROM @SQL6;                          \n" +
              "  \n" +
              "			EXECUTE stmt1;                          \n" +
              "			EXECUTE stmt2;                          \n" +
              "            EXECUTE stmt3;                          \n" +
              "			EXECUTE stmt4;                          \n" +
              "            EXECUTE stmt5;                          \n" +
              "			EXECUTE stmt6;                          \n" +
              "  \n" +
              "  \n" +
              "  \n" +
              "			SELECT * FROM temprfqformss;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM temprfqformss;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE temprfqformss;                           \n" +
              "END IF;                          \n" +
              "IF tableName=\"rfq_mountingtypemst\" THEN                          \n" +
              "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg                           \n" +
              "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1)                  \n" +
              "             UNION ALL                        \n" +
              "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mountingTypeID IN(',IDs,') LIMIT 1)) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM temprfqpartcategory;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM temprfqpartcategory;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE temprfqpartcategory;                           \n" +
              "  \n" +
              "END IF;                          \n" +
              "IF tableName=\"who_bought_who\" THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "END IF;                          \n" +
              "IF tableName=\"rfq_parttypemst\" THEN                          \n" +
              "			SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqparttypemst as                          \n" +
              "				 SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "			    FROM                           \n" +
              "			    (                     \n" +
              "	            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM                   \n" +
              "	            component WHERE deletedAt IS NULL AND partTypeID IN(',IDs,') LIMIT 1)) q');                          \n" +
              "	  	        PREPARE stmt FROM @SQL;                          \n" +
              "		        EXECUTE stmt;                    \n" +
              "	          IF (SELECT TotalCount FROM temprfqparttypemst)=0 THEN                      \n" +
              "  \n" +
              "				SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,',                   \n" +
              "	            deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "	  				PREPARE stmt1 FROM @SQL1;                          \n" +
              "						EXECUTE stmt1;                    \n" +
              "	            	SELECT * FROM temprfqparttypemst;                          \n" +
              "			ELSE                          \n" +
              "				SELECT * FROM temprfqparttypemst;                          \n" +
              "  \n" +
              "			END IF;                          \n" +
              "            DROP TABLE temprfqparttypemst;                                     \n" +
              "  \n" +
              "END IF;                          \n" +
              "IF tableName=\"rfq_lineitems_errorcode\" THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "END IF;                          \n" +
              "IF tableName=\"rfq_lineitems_keywords\" THEN                          \n" +
              "  \n" +
              "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "END IF;                    \n" +
              "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                          \n" +
              "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempQuotecharges_dynamic_fields_mst as                          \n" +
              "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                          \n" +
              "		    FROM                           \n" +
              "		    (                          \n" +
              "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assy_quotations_additionalcost\" else \"\" end as msg                           \n" +
              "            FROM rfq_assy_quotations_additionalcost WHERE deletedAt IS NULL AND quoteChargeDynamicFieldID IN (',IDs,') LIMIT 1) ) q');                          \n" +
              "  \n" +
              "	PREPARE stmt FROM @SQL;                          \n" +
              "	EXECUTE stmt;                          \n" +
              "		IF (SELECT TotalCount FROM tempQuotecharges_dynamic_fields_mst)=0 THEN                          \n" +
              "  \n" +
              "		SET @SQl1 = CONCAT('update quotecharges_dynamic_fields_mst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "			PREPARE stmt1 FROM @SQL1;                          \n" +
              "			EXECUTE stmt1;                          \n" +
              "  \n" +
              "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                          \n" +
              "		ELSE                          \n" +
              "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                          \n" +
              "  \n" +
              "		END IF;                          \n" +
              "		DROP TABLE tempQuotecharges_dynamic_fields_mst;                           \n" +
              "END IF;      \n" +
              "IF tableName=\"cost_category\" THEN                          \n" +
              "		SET @SQl1 = CONCAT('update cost_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                          \n" +
              "		PREPARE stmt1 FROM @SQL1;                          \n" +
              "		EXECUTE stmt1;             \n" +
              "END IF;                                  \n" +
              "END;  \n" +
            /* **************************** Add Script Version -> 29-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (146,'1.00','V1',' Delete SP Changes for dynamic quotation field - Vaibhav '," + userid + ");"
            );
            break;
        case 146:
            allDbChangesArray.push(
            /* **************************** New Script -> 29-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(    \n" +
            "	IN prfqAssyID INT        \n" +
            ")  \n" +
            "BEGIN        \n" +
            "	DROP temporary table if exists tempRfq_lineitems;        \n" +
            "    DROP temporary table if exists tempRfq_lineitemsAlt;        \n" +
            "  \n" +
            "	CREATE TEMPORARY TABLE tempRfq_lineitems AS            \n" +
            "	SELECT a.id, a.lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,         \n" +
            "    CASE WHEN b.unitName IS NULL AND a.updatedBy IS NULL THEN a.org_uomName ELSE b.unitName END AS  uomID,        \n" +
            "    a.description, a.level, a.numOfPosition, a.customerRev, a.customerDescription, a.customerPartDesc,         \n" +
            "			CONCAT(part.partTypeName, ' | ', c.name) partclassID, a.isInstall, a.isPurchase, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID,         \n" +
            "            a.dnpQty, a.dnpDesig, a.qpaDesignatorStep, a.mergeLines, a.lineMergeStep  \n" +
            "            FROM rfq_lineitems a         \n" +
            "	LEFT JOIN uoms b ON a.uomID = b.id and IFNULL(b.isDeleted,0) = 0        \n" +
            "    LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id and IFNULL(part.isDeleted,0) = 0        \n" +
            "    LEFT JOIN rfq_mountingtypemst c ON part.partclassID = c.id and IFNULL(c.isDeleted,0) = 0            \n" +
            "    WHERE IFNULL(a.isDeleted,0) = 0 and a.rfqAssyID = prfqAssyID;        \n" +
            "  \n" +
            "	SELECT b.id, b.lineID, b.qpa, b.refDesig,     \n" +
            "			(CASE WHEN mfgCodeID IS NOT NULL AND IFNULL(customerApproval, 'N') != 'P' THEN mcm.mfgCode ELSE a.mfgCode END) AS mfgCode,    \n" +
            "            a.mfgCodeID, a.mfgPN, a.mfgPNID,        \n" +
            "			(CASE WHEN distMfgCodeID IS NOT NULL AND IFNULL(customerApproval, 'N') != 'P' THEN mcmDist.mfgCode ELSE a.distributor END) AS distributor,	    \n" +
            "            a.distMfgCodeID, a.distPN, a.distMfgPNID,         \n" +
            "            b.custPN, b.custPNID, b.uomID, a.description descriptionAlternate, b.description, b.level, b.numOfPosition, b.customerRev, b.customerDescription, b.customerPartDesc,  \n" +
            "			b.partclassID, b.isInstall, b.isPurchase, b.leadQty, b.attritionRate, b.valueAddedCost, b.refRFQLineItemID,         \n" +
            "            b.dnpQty, b.dnpDesig, a.id as rfqAlternatePartID, b.qpaDesignatorStep,      \n" +
            "			a.mfgVerificationStep, a.mfgDistMappingStep, a.mfgCodeStep, a.customerApproval, a.org_mfgCode, a.org_mfgPN,      \n" +
            "            a.org_distributor, a.org_distPN,      \n" +
            "			a.distVerificationStep, a.distCodeStep, a.getMFGPNStep, a.obsoletePartStep, a.mfgGoodPartMappingStep, a.mfgPNStep, a.distPNStep,    \n" +
            "            a.badMfgPN, a.distGoodPartMappingStep,  \n" +
            "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,  \n" +
            "            (SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart  \n" +
            "            FROM rfq_lineitems_alternatepart a    \n" +
            "            LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0    \n" +
            "            LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0    \n" +
            "			JOIN tempRfq_lineitems b on a.rfqLineItemsID = b.id                  \n" +
            "			WHERE IFNULL(a.isDeleted,0) = 0  AND b.id is not null order by CAST(b.lineID AS SIGNED), a.id;        \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 29-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (147,'1.00','V1','ALTER SP Sproc_GetRFQLineItemsByID - Ravi'," + userid + ");"
            );
            break;
        case 147:
            allDbChangesArray.push(
            /* **************************** New Script -> 13-08-2018  *********************************** */
            "update rfq_lineitems_headers set name = 'Is Buy' where field = 'isPurchase';  \n" +
            "update rfq_lineitems_headers set name = 'Lead' where field = 'numOfPosition';  \n" +
            /* **************************** Add Script Version -> 13-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (148,'1.00','V1','Rename BOM headers - Ravi'," + userid + ");"
            );
            break;

        case 148:
            allDbChangesArray.push(
            /* **************************** New Script -> 30-08-2018  *********************************** */
            "ALTER TABLE component ADD  supplier VARCHAR (50) NULL;  \n" +
            /* **************************** Add Script Version -> 30-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (149,'1.00','V1','Added supplier column in  component-Champak'," + userid + ");"
            );
            break;
        case 149:
            allDbChangesArray.push(
            /* **************************** New Script -> 30-08-2018  *********************************** */
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.transaction.requestforship.manage'  \n" +
            "WHERE pageName = 'Manage Request For Shipment' ;  \n" +
            /* **************************** New Script -> 30-08-2018  *********************************** */
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.transaction.shipped.manage'  \n" +
            "WHERE pageName = 'Manage Shipped' ;  \n" +
            /* **************************** Add Script Version -> 30-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (150,'1.00','V1',' page route changes for shipment - KETAN '," + userid + ");"
          );
            break;
        case 150:
            allDbChangesArray.push(
            /* **************************** New Script -> 30-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQCustomRulesLineItems` ;  \n" +
          "CREATE PROCEDURE `Sproc_GetRFQCustomRulesLineItems`(                \n" +
          "	IN ppageIndex INT(11),                \n" +
          "	IN precordPerPage INT(11),                \n" +
          "	IN pOrderBy VARCHAR(255),        \n" +
          "	IN pWhereColumnName VARCHAR(255),          \n" +
          "	IN pWhereFilterValue VARCHAR(255),         \n" +
          "	IN pCustomWhere INT(11),          \n" +
          "	IN pWhereClause VARCHAR(21844),                \n" +
          "	IN rfqAssyID INT(11),                \n" +
          "	IN puserID INT (11)                \n" +
          "    )  \n" +
          "BEGIN                \n" +
          "	    DECLARE pOffset INT(11);                \n" +
          "	    DECLARE rowNumWhere VARCHAR(255) ;                \n" +
          "	    SET @SQLString = NULL;          \n" +
          "	    SET @PERString = NULL;                \n" +
          "	    SET SESSION group_concat_max_len = 150000;                    \n" +
          "	    IF (pOrderBy IS NOT NULL) THEN                \n" +
          "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
          "		ELSE                \n" +
          "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;                 \n" +
          "		END IF;	                \n" +
          "  \n" +
          "  \n" +
          "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                \n" +
          "			SET pWhereClause = '1=1' ;                \n" +
          "		END IF;	                \n" +
          "  \n" +
          "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
          "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
          "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
          "		ELSE	                \n" +
          "			SET rowNumWhere = '';                \n" +
          "		END IF;	                \n" +
          "		SELECT      \n" +
          "			GROUP_CONCAT(DISTINCT                \n" +
          "				CONCAT(                \n" +
          "					'100*Max((IF(ra.requestQty = ''',                \n" +
          "						ra.requestQty,                \n" +
          "					''', rq.finalPrice, null)))/Max((IF(ra.requestQty = ''',                \n" +
          "						ra.requestQty,                \n" +
          "					''', fun_getFinalPriceSumByQtyID (ra.id,rl.rfqAssyID), null))) AS ''',                \n" +
          "						ra.requestQty,''''                \n" +
          "					))    \n" +
          "					INTO @PERString    \n" +
          "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                \n" +
          "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                \n" +
          "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                \n" +
          "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                \n" +
          "  \n" +
          "			IF(@PERString IS NOT NULL) THEN         \n" +
          "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                \n" +
          "					SELECT                 \n" +
          "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                  \n" +
          "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,            \n" +
          "					(SELECT             \n" +
          "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                      \n" +
          "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN             \n" +
          "                                     component c ON rla.mfgpnid=c.id             \n" +
          "                                     LEFT JOIN mfgcodemst mg ON              \n" +
          "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                \n" +
          "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))AS mfgPn  \n" +
          "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN             \n" +
          "                                component c ON rla.mfgpnid=c.id                       \n" +
          "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                 \n" +
          "					@PERString, ' FROM rfq_consolidated_mfgpn_lineitem rl                \n" +
          "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                \n" +
          "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                \n" +
          "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');             \n" +
          "  \n" +
          "			ELSE                \n" +
          "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                \n" +
          "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,             \n" +
          "					 GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                      \n" +
          "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN             \n" +
          "                                     component c ON rla.mfgpnid=c.id             \n" +
          "                                     LEFT JOIN mfgcodemst mg ON              \n" +
          "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                  \n" +
          "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn                 \n" +
          "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                 \n" +
          "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                \n" +
          "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                \n" +
          "			END IF;                      \n" +
          "			PREPARE stmt FROM @SQLStatement;                \n" +
          "			EXECUTE stmt;	                \n" +
          "  \n" +
          "  \n" +
          "			SET @SQLStatement_Temp = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp2 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\");                \n" +
          "			PREPARE query_Temp FROM @SQLStatement_Temp;                \n" +
          "			EXECUTE query_Temp;     \n" +
          "			DEALLOCATE PREPARE query_Temp;    \n" +
          "  \n" +
          "			SET @SQLStatement_Temp1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp3 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\");                \n" +
          "			PREPARE query_Temp1 FROM @SQLStatement_Temp1;                \n" +
          "			EXECUTE query_Temp1;       \n" +
          "			DEALLOCATE PREPARE query_Temp1;                \n" +
          "			IF pCustomWhere IS NOT NULL THEN    \n" +
          "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*) FROM consolidate_temp3 d where (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp2 c WHERE c.row_id<=d.row_id) <= \", pWhereFilterValue);                \n" +
          "				SET @SQLStatement2 = CONCAT(\"SELECT d.* FROM consolidate_temp3 d where (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp2 c WHERE c.row_id<=d.row_id) <= \", pWhereFilterValue, \" ORDER BY \", pWhereColumnName, \" DESC \" , rowNumWhere);    \n" +
          "			ELSE       \n" +
          "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                \n" +
          "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
          "			END IF;    \n" +
          "  \n" +
          "			PREPARE query1 FROM @SQLStatement1;                \n" +
          "			EXECUTE query1;                \n" +
          "			DEALLOCATE PREPARE query1;                \n" +
          "  \n" +
          "			PREPARE query2 FROM @SQLStatement2;                \n" +
          "			EXECUTE query2;                \n" +
          "			DEALLOCATE PREPARE query2;                \n" +
          "  \n" +
          "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                \n" +
          "			PREPARE query3 FROM @SQLStatement3;                \n" +
          "			EXECUTE query3;                \n" +
          "			DEALLOCATE PREPARE query3;                \n" +
          "  \n" +
          "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.turnType,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                \n" +
          "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                \n" +
          "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                \n" +
          "			PREPARE query4 FROM @SQLStatement4;                \n" +
          "			EXECUTE query4;                \n" +
          "			DEALLOCATE PREPARE query4;            \n" +
          "  \n" +
          "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty, rq.finalPrice, unitPrice,supplier,rq.min,rq.mult, selectedMpn, selectionMode,qtyID,           \n" +
          "					currentStock,          \n" +
          "					leadTime,           \n" +
          "					supplierStock,          \n" +
          "					grossStock,              \n" +
          "					selectedPIDCode,ct.qpa, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                     \n" +
          "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID             \n" +
          "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id             \n" +
          "				WHERE ct.rfqAssyID=\",rfqAssyID);                    \n" +
          "			PREPARE query5 FROM @SQLStatement5;                        \n" +
          "			EXECUTE query5;                        \n" +
          "			DEALLOCATE PREPARE query5;               \n" +
          "  \n" +
          "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,         \n" +
          "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,         \n" +
          "						(SUM(rq.unitPrice)) AS TotalUnitPrice,        \n" +
          "						(SUM(rq.finalPrice)/IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice      \n" +
          "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq            \n" +
          "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id            \n" +
          "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                    \n" +
          "  \n" +
          "			PREPARE query6 FROM @SQLStatement6;                        \n" +
          "			EXECUTE query6;                        \n" +
          "			DEALLOCATE PREPARE query6;                            \n" +
          "  \n" +
          "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp2;     \n" +
          "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp3;	    \n" +
          "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;                  \n" +
          "    END;  \n" +
          /* **************************** New Script -> 30-08-2018  *********************************** */
          "DROP PROCEDURE IF EXISTS `Sproc_GetRFQExcessMaterialLineItems` ;  \n" +
          "CREATE PROCEDURE `Sproc_GetRFQExcessMaterialLineItems`(                    \n" +
          "	IN ppageIndex INT(11),                    \n" +
          "	IN precordPerPage INT(11),                    \n" +
          "	IN pOrderBy VARCHAR(255),                    \n" +
          "	IN pWhereClause VARCHAR(21844),                    \n" +
          "	IN rfqAssyID INT(11),                    \n" +
          "	IN puserID INT (11)              \n" +
          "    )  \n" +
          "BEGIN                    \n" +
          "  \n" +
          "	    DECLARE pOffset INT(11);                    \n" +
          "	    DECLARE rowNumWhere VARCHAR(255) ;                \n" +
          "	    SET @SQLString = NULL;               \n" +
          "	    SET @HavingClause = NULL;               \n" +
          "	    SET SESSION group_concat_max_len = 150000;                \n" +
          "	    IF (pOrderBy IS NOT NULL) THEN                    \n" +
          "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                    \n" +
          "		ELSE                    \n" +
          "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` asc\") ;                     \n" +
          "		END IF;	                    \n" +
          "  \n" +
          "  \n" +
          "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                    \n" +
          "			SET pWhereClause = '1=1' ;                    \n" +
          "		END IF;	                    \n" +
          "  \n" +
          "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                     \n" +
          "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                    \n" +
          "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                    \n" +
          "		ELSE	                    \n" +
          "			SET rowNumWhere = '';                    \n" +
          "		END IF;	                    \n" +
          "		SELECT                    \n" +
          "                      GROUP_CONCAT(DISTINCT                    \n" +
          "				CONCAT(                    \n" +
          "					'Max((IF(ra.requestQty = ''',                    \n" +
          "						ra.requestQty,                    \n" +
          "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),               \n" +
          "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),               \n" +
          "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) AS ''',                    \n" +
          "						ra.requestQty,''''                    \n" +
          "					)                    \n" +
          "					),              \n" +
          "  \n" +
          "                      GROUP_CONCAT(DISTINCT                    \n" +
          "				CONCAT(                    \n" +
          "					'Max((IF(ra.requestQty = ''',                    \n" +
          "						ra.requestQty,                    \n" +
          "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),               \n" +
          "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),               \n" +
          "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) > 0'                       \n" +
          "					) SEPARATOR ' OR '                   \n" +
          "					)              \n" +
          "				INTO @SQLString, @HavingClause               \n" +
          "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                    \n" +
          "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                    \n" +
          "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                    \n" +
          "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                  \n" +
          "			IF(@SQLString IS NOT NULL) THEN                    \n" +
          "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                    \n" +
          "					SELECT                     \n" +
          "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                      \n" +
          "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,                    \n" +
          "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))                \n" +
          "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla     \n" +
          "						LEFT JOIN component c ON rla.mfgpnid=c.id     \n" +
          "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',    \n" +
          "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                    \n" +
          "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                    \n" +
          "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                    \n" +
          "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                  \n" +
          "  \n" +
          "				SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                    \n" +
          "			END IF;                \n" +
          "			PREPARE stmt FROM @SQLStatement;                    \n" +
          "			EXECUTE stmt;	                    \n" +
          "  \n" +
          "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                    \n" +
          "			PREPARE query1 FROM @SQLStatement1;                    \n" +
          "			EXECUTE query1;                    \n" +
          "			DEALLOCATE PREPARE query1;                    \n" +
          "  \n" +
          "  \n" +
          "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                    \n" +
          "			PREPARE query2 FROM @SQLStatement2;                    \n" +
          "			EXECUTE query2;                    \n" +
          "			DEALLOCATE PREPARE query2;                    \n" +
          "  \n" +
          "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                    \n" +
          "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                    \n" +
          "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                    \n" +
          "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                    \n" +
          "			PREPARE query3 FROM @SQLStatement3;                    \n" +
          "			EXECUTE query3;                    \n" +
          "			DEALLOCATE PREPARE query3;                    \n" +
          "  \n" +
          "  \n" +
          "			SET @SQLStatement4 = CONCAT(\"SELECT requestQty, finalPrice, unitPrice,supplier, selectedMpn, selectionMode,qtyID,        \n" +
          "					selectedPIDCode,          \n" +
          "					min, mult,        \n" +
          "					currentStock,        \n" +
          "					leadTime,         \n" +
          "					supplierStock,        \n" +
          "					grossStock,            \n" +
          "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus,        \n" +
          "					selectedPIDCode,       \n" +
          "					consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                 \n" +
          "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID WHERE consolidateID IN (select id from consolidatetemp)\");                    \n" +
          "			PREPARE query4 FROM @SQLStatement4;                    \n" +
          "			EXECUTE query4;                    \n" +
          "			DEALLOCATE PREPARE query4;                    \n" +
          "  \n" +
          "  \n" +
          "			DROP TEMPORARY TABLE consolidatetemp;                      \n" +
          "    END;  \n" +
          /* **************************** New Script -> 30-08-2018  *********************************** */
          "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLeadTimeRiskLineItems` ;  \n" +
          "CREATE PROCEDURE `Sproc_GetRFQLeadTimeRiskLineItems`(                    \n" +
          "	IN ppageIndex INT(11),                    \n" +
          "	IN precordPerPage INT(11),                    \n" +
          "	IN pOrderBy VARCHAR(255),                    \n" +
          "	IN pWhereClause VARCHAR(21844),                    \n" +
          "	IN rfqAssyID INT(11),                    \n" +
          "	IN puserID INT (11)              \n" +
          "    )  \n" +
          "BEGIN                    \n" +
          "  \n" +
          "	    DECLARE pOffset INT(11);                    \n" +
          "	    DECLARE rowNumWhere VARCHAR(255) ;            \n" +
          "	    SET SESSION group_concat_max_len = 150000;                    \n" +
          "	    SET @SQLString = NULL;                 \n" +
          "	    SET @HavingClause = NULL;                     \n" +
          "	    IF (pOrderBy IS NOT NULL) THEN                    \n" +
          "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                    \n" +
          "		ELSE                    \n" +
          "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                     \n" +
          "		END IF;	                    \n" +
          "  \n" +
          "  \n" +
          "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                    \n" +
          "			SET pWhereClause = '1=1' ;                    \n" +
          "		END IF;	                    \n" +
          "  \n" +
          "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                     \n" +
          "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                    \n" +
          "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                    \n" +
          "		ELSE	                    \n" +
          "			SET rowNumWhere = '';                    \n" +
          "		END IF;	                    \n" +
          "		SELECT                    \n" +
          "                      GROUP_CONCAT(DISTINCT                    \n" +
          "				CONCAT(                    \n" +
          "					'Max((IF(ra.requestQty = ''',                    \n" +
          "						ra.requestQty,                    \n" +
          "					''', (IFNULL(rq.leadTime,0)), null))) AS ''',                    \n" +
          "						ra.requestQty,''''                    \n" +
          "					)                    \n" +
          "					),          \n" +
          "		GROUP_CONCAT(DISTINCT                    \n" +
          "				CONCAT(                    \n" +
          "					'((Max((IF(ra.requestQty = ''',                    \n" +
          "						ra.requestQty,                    \n" +
          "					''', (IFNULL(rq.leadTime,0)), null))) < 16) AND ((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)) > (IFNULL(rq.currentStock,0))))'          \n" +
          "					) SEPARATOR ' OR '                        \n" +
          "					)           \n" +
          "				INTO @SQLString,@HavingClause               \n" +
          "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                    \n" +
          "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                    \n" +
          "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                    \n" +
          "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                  \n" +
          "			IF(@SQLString IS NOT NULL) THEN                    \n" +
          "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                    \n" +
          "					SELECT                     \n" +
          "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,         \n" +
          "					  rl.qpa, ra.requestQty, rq.currentStock,             \n" +
          "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))                    \n" +
          "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla         \n" +
          "						LEFT JOIN component c ON rla.mfgpnid=c.id         \n" +
          "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                   \n" +
          "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                    \n" +
          "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                    \n" +
          "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                    \n" +
          "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'           \n" +
          "					GROUP BY rl.lineID');             \n" +
          "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	                    \n" +
          "			END IF;                     \n" +
          "			PREPARE stmt FROM @SQLStatement;                    \n" +
          "			EXECUTE stmt;	                    \n" +
          "  \n" +
          "  \n" +
          "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                    \n" +
          "			PREPARE query1 FROM @SQLStatement1;                    \n" +
          "			EXECUTE query1;                    \n" +
          "			DEALLOCATE PREPARE query1;                    \n" +
          "  \n" +
          "  \n" +
          "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                    \n" +
          "			PREPARE query2 FROM @SQLStatement2;                    \n" +
          "			EXECUTE query2;                    \n" +
          "			DEALLOCATE PREPARE query2;                    \n" +
          "  \n" +
          "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                    \n" +
          "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                    \n" +
          "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                    \n" +
          "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                    \n" +
          "			PREPARE query3 FROM @SQLStatement3;                    \n" +
          "			EXECUTE query3;                    \n" +
          "			DEALLOCATE PREPARE query3;                    \n" +
          "  \n" +
          "  			SET @SQLStatement4 = CONCAT(\"            \n" +
          "				SELECT requestQty,             \n" +
          "					finalPrice,             \n" +
          "					unitPrice,            \n" +
          "					supplier,             \n" +
          "					selectedMpn,             \n" +
          "					selectionMode,           \n" +
          "					selectedPIDCode,          \n" +
          "					rq.min,rq.mult,            \n" +
          "					qtyID,               \n" +
          "					consolidateID,         \n" +
          "					currentStock,        \n" +
          "					leadTime,         \n" +
          "					supplierStock,        \n" +
          "					grossStock        \n" +
          "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                 \n" +
          "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID             \n" +
          "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                    \n" +
          "			PREPARE query4 FROM @SQLStatement4;                    \n" +
          "			EXECUTE query4;                    \n" +
          "			DEALLOCATE PREPARE query4;                    \n" +
          "  \n" +
          "			DROP TEMPORARY TABLE consolidatetemp;                      \n" +
          "    END;  \n" +
          /* **************************** New Script -> 30-08-2018  *********************************** */
          "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
          "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                    \n" +
          "	IN ppageIndex INT(11),                    \n" +
          "	IN precordPerPage INT(11),                    \n" +
          "	IN pOrderBy VARCHAR(255),                    \n" +
          "	IN pWhereClause VARCHAR(21844),                    \n" +
          "	IN rfqAssyID INT(11),                    \n" +
          "	IN puserID INT (11)              \n" +
          "    )  \n" +
          "BEGIN                    \n" +
          "  \n" +
          "	    DECLARE pOffset INT(11);                    \n" +
          "	    DECLARE rowNumWhere VARCHAR(255) ;                \n" +
          "	    SET @SQLString = NULL;                 \n" +
          "	    IF (pOrderBy IS NOT NULL) THEN                    \n" +
          "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                    \n" +
          "		ELSE                    \n" +
          "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                     \n" +
          "		END IF;	                    \n" +
          "  \n" +
          "  \n" +
          "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                    \n" +
          "			SET pWhereClause = '1=1' ;                    \n" +
          "		END IF;	                    \n" +
          "  \n" +
          "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                     \n" +
          "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                    \n" +
          "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                    \n" +
          "		ELSE	                    \n" +
          "			SET rowNumWhere = '';                    \n" +
          "		END IF;	                    \n" +
          "		SELECT            \n" +
          "                     GROUP_CONCAT(DISTINCT            \n" +
          "				CONCAT(            \n" +
          "					'Max((IF(ra.requestQty = ''',            \n" +
          "						ra.requestQty,            \n" +
          "					''', rq.finalPrice, null))) AS ''',            \n" +
          "						ra.requestQty,''''            \n" +
          "					)            \n" +
          "					) INTO @SQLString            \n" +
          "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                    \n" +
          "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                    \n" +
          "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                    \n" +
          "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                  \n" +
          "			IF(@SQLString IS NOT NULL) THEN                    \n" +
          "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                    \n" +
          "					SELECT                     \n" +
          "						rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                      \n" +
          "						rp.partTypeName, rm.name,     \n" +
          "						rl.qpa,        \n" +
          "						(SELECT gc.gencCategoryName FROM genericcategory gc          \n" +
          "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus          \n" +
          "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn) AS PartStatus,          \n" +
          "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL) AS LTBDate,          \n" +
          "						(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))                  \n" +
          "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla       \n" +
          "						LEFT JOIN component c ON rla.mfgpnid=c.id       \n" +
          "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                     \n" +
          "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                    \n" +
          "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                    \n" +
          "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                            \n" +
          "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                             \n" +
          "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                  \n" +
          "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'           \n" +
          "						AND rq.selectedMpn IN (SELECT mfgPN FROM component           \n" +
          "					WHERE deletedAt IS NULL AND partstatus IN           \n" +
          "						(SELECT gencCategoryID FROM genericcategory           \n" +
          "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Not For New Design\",\"Obsolete\")))          \n" +
          "					GROUP BY rl.lineID');                      \n" +
          "			END IF;           \n" +
          "			PREPARE stmt FROM @SQLStatement;                    \n" +
          "			EXECUTE stmt;	                    \n" +
          "  \n" +
          "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                    \n" +
          "			PREPARE query1 FROM @SQLStatement1;                    \n" +
          "			EXECUTE query1;                    \n" +
          "			DEALLOCATE PREPARE query1;                    \n" +
          "  \n" +
          "  \n" +
          "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                    \n" +
          "			PREPARE query2 FROM @SQLStatement2;                    \n" +
          "			EXECUTE query2;                    \n" +
          "			DEALLOCATE PREPARE query2;                    \n" +
          "  \n" +
          "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                    \n" +
          "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                    \n" +
          "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                    \n" +
          "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                    \n" +
          "			PREPARE query3 FROM @SQLStatement3;                    \n" +
          "			EXECUTE query3;                    \n" +
          "			DEALLOCATE PREPARE query3;                    \n" +
          "  \n" +
          "			SET @SQLStatement4 = CONCAT(\"            \n" +
          "				SELECT requestQty,             \n" +
          "					finalPrice,             \n" +
          "					unitPrice,            \n" +
          "					supplier,             \n" +
          "					selectedMpn,             \n" +
          "					selectionMode,            \n" +
          "					qtyID,             \n" +
          "					consolidateID,        \n" +
          "					selectedPIDCode,          \n" +
          "					rq.min,rq.mult,            \n" +
          "					qtyID,               \n" +
          "					consolidateID,         \n" +
          "					currentStock,        \n" +
          "					leadTime,         \n" +
          "					supplierStock,        \n" +
          "					grossStock,    \n" +
          "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus            \n" +
          "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                 \n" +
          "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID             \n" +
          "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                    \n" +
          "			PREPARE query4 FROM @SQLStatement4;                    \n" +
          "			EXECUTE query4;                    \n" +
          "			DEALLOCATE PREPARE query4;                    \n" +
          "  \n" +
          "			DROP TEMPORARY TABLE consolidatetemp;                      \n" +
          "    END;  \n" +
          /* **************************** New Script -> 30-08-2018  *********************************** */
          "DROP PROCEDURE IF EXISTS `Sproc_GetRFQNotQuotedLineItems` ;  \n" +
          "CREATE PROCEDURE `Sproc_GetRFQNotQuotedLineItems`(                      \n" +
          "	IN ppageIndex INT(11),                      \n" +
          "	IN precordPerPage INT(11),                      \n" +
          "	IN pOrderBy VARCHAR(255),                      \n" +
          "	IN pWhereClause VARCHAR(21844),                      \n" +
          "	IN rfqAssyID INT(11),                      \n" +
          "	IN puserID INT (11)                \n" +
          "    )  \n" +
          "BEGIN                      \n" +
          "  \n" +
          "	    DECLARE pOffset INT(11);                      \n" +
          "	    DECLARE rowNumWhere VARCHAR(255) ;                  \n" +
          "	    SET @SQLString = NULL;                        \n" +
          "	    SET @HavingClause = NULL;            \n" +
          "	    SET SESSION group_concat_max_len = 150000;                            \n" +
          "	    IF (pOrderBy IS NOT NULL) THEN                      \n" +
          "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                      \n" +
          "		ELSE                      \n" +
          "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;                       \n" +
          "		END IF;	                      \n" +
          "  \n" +
          "  \n" +
          "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                      \n" +
          "			SET pWhereClause = '1=1' ;                      \n" +
          "		END IF;	                      \n" +
          "  \n" +
          "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                       \n" +
          "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                      \n" +
          "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                      \n" +
          "		ELSE	                      \n" +
          "			SET rowNumWhere = '';                      \n" +
          "		END IF;	                      \n" +
          "		SELECT                      \n" +
          "                      GROUP_CONCAT(DISTINCT                      \n" +
          "				CONCAT(                      \n" +
          "					'Max((IF(ra.requestQty = ''',                      \n" +
          "						ra.requestQty,                      \n" +
          "					''', rq.finalPrice, null))) AS ''',                      \n" +
          "						ra.requestQty,''''                      \n" +
          "					)                      \n" +
          "					),                  \n" +
          "			GROUP_CONCAT(DISTINCT                      \n" +
          "				CONCAT(                      \n" +
          "					'Max((IF(ra.requestQty = ''',                      \n" +
          "						ra.requestQty,                      \n" +
          "					''', rq.finalPrice, null))) IS NULL'                      \n" +
          "					) SEPARATOR ' OR '                     \n" +
          "					)                  \n" +
          "				INTO @SQLString, @HavingClause                  \n" +
          "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                      \n" +
          "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                      \n" +
          "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                      \n" +
          "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                    \n" +
          "			IF(@SQLString IS NOT NULL) THEN                      \n" +
          "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                      \n" +
          "					SELECT                       \n" +
          "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,         \n" +
          "					  (SELECT gc.gencCategoryName FROM genericcategory gc          \n" +
          "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus          \n" +
          "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn) AS PartStatus,          \n" +
          "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL) AS LTBDate,                         \n" +
          "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,          \n" +
          "					(SELECT           \n" +
          "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                    \n" +
          "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN           \n" +
          "                                     component c ON rla.mfgpnid=c.id           \n" +
          "                                     LEFT JOIN mfgcodemst mg ON            \n" +
          "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                      \n" +
          "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))                  \n" +
          "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla       \n" +
          "						LEFT JOIN component c ON rla.mfgpnid=c.id       \n" +
          "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',      \n" +
          "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                      \n" +
          "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                      \n" +
          "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                      \n" +
          "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                    \n" +
          "  \n" +
          "					-- SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause, ' OR partstatus IN           \n" +
          "					-- 	(SELECT gencCategoryName FROM genericcategory           \n" +
          "					-- WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Obsolete\"))');                \n" +
          "  \n" +
          "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                           \n" +
          "			END IF;                   \n" +
          "			PREPARE stmt FROM @SQLStatement;                      \n" +
          "			EXECUTE stmt;	                      \n" +
          "  \n" +
          "  \n" +
          "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                      \n" +
          "			PREPARE query1 FROM @SQLStatement1;                      \n" +
          "			EXECUTE query1;                      \n" +
          "			DEALLOCATE PREPARE query1;                      \n" +
          "  \n" +
          "  \n" +
          "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                      \n" +
          "			PREPARE query2 FROM @SQLStatement2;                      \n" +
          "			EXECUTE query2;                      \n" +
          "			DEALLOCATE PREPARE query2;                      \n" +
          "  \n" +
          "			SET @SQLStatement3 = CONCAT(\" SELECT distinct ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                      \n" +
          "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID          \n" +
          "			   WHERE  ra.rfqAssyID=\",rfqAssyID);                      \n" +
          "			PREPARE query3 FROM @SQLStatement3;                      \n" +
          "			EXECUTE query3;                      \n" +
          "			DEALLOCATE PREPARE query3;                      \n" +
          "  \n" +
          "  			SET @SQLStatement4 = CONCAT(\"              \n" +
          "				SELECT requestQty,               \n" +
          "					finalPrice,               \n" +
          "					unitPrice,              \n" +
          "					supplier,         \n" +
          "					rq.min,rq.mult,             \n" +
          "					selectedMpn,               \n" +
          "					selectionMode,              \n" +
          "					selectedPIDCode,            \n" +
          "					qtyID,               \n" +
          "					consolidateID,         \n" +
          "					currentStock,        \n" +
          "					leadTime,         \n" +
          "					supplierStock,        \n" +
          "					grossStock,                 \n" +
          "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus              \n" +
          "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                   \n" +
          "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID               \n" +
          "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                      \n" +
          "			PREPARE query4 FROM @SQLStatement4;                      \n" +
          "			EXECUTE query4;                      \n" +
          "			DEALLOCATE PREPARE query4;                      \n" +
          "  \n" +
          "			DROP TEMPORARY TABLE consolidatetemp;                        \n" +
          "    END;  \n" +
          /* **************************** New Script -> 30-08-2018  *********************************** */
          "DROP PROCEDURE IF EXISTS `Sproc_GetRFQSuggestedAlternative` ;  \n" +
          "CREATE PROCEDURE `Sproc_GetRFQSuggestedAlternative`(                    \n" +
          "	IN ppageIndex INT(11),                    \n" +
          "	IN precordPerPage INT(11),                    \n" +
          "	IN pOrderBy VARCHAR(255),                    \n" +
          "	IN pWhereClause VARCHAR(21844),                    \n" +
          "	IN rfqAssyID INT(11),                    \n" +
          "	IN puserID INT (11)              \n" +
          "    )  \n" +
          "BEGIN                    \n" +
          "  \n" +
          "	    DECLARE pOffset INT(11);                    \n" +
          "	    DECLARE rowNumWhere VARCHAR(255) ;      \n" +
          "	    IF (pOrderBy IS NOT NULL) THEN                    \n" +
          "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                    \n" +
          "		ELSE                    \n" +
          "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                     \n" +
          "		END IF;	                    \n" +
          "  \n" +
          "  \n" +
          "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                    \n" +
          "			SET pWhereClause = '1=1' ;                    \n" +
          "		END IF;	                    \n" +
          "  \n" +
          "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                     \n" +
          "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                    \n" +
          "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                    \n" +
          "		ELSE	                    \n" +
          "			SET rowNumWhere = '';                    \n" +
          "		END IF;	                                \n" +
          "  \n" +
          "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                    \n" +
          "					SELECT                     \n" +
          "						rl.id,      \n" +
          "						rl.isPurchase,       \n" +
          "						rl.lineID,      \n" +
          "						rl.rfqLineItemID,      \n" +
          "						rl.rfqAssyBomID,      \n" +
          "						rl.rfqAssyID,                      \n" +
          "						rp.partTypeName,      \n" +
          "						rm.name,          \n" +
          "						rq.selectedPIDCode,      \n" +
          "						(select rohsComplient from component where PIDCode=rq.selectedPIDCode LIMIT 1) AS selectedRoHSStatus,      \n" +
          "						(SELECT gc.gencCategoryName FROM genericcategory gc          \n" +
          "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus          \n" +
          "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn) AS PartStatus,          \n" +
          "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL) AS LTBDate,      \n" +
          "						(SELECT GROUP_CONCAT(DISTINCT(PIDCode),''@@@'', rohsComplient,''@@@'',IFNULL(feature,\"\"))      \n" +
          "						FROM component       \n" +
          "						WHERE PIDCode <> rq.selectedPIDCode  AND id IN       \n" +
          "							(SELECT componentID       \n" +
          "								FROM component_alternatepn       \n" +
          "								WHERE aliasgroupID IN       \n" +
          "								(SELECT altenetgroupID       \n" +
          "									FROM component       \n" +
          "									WHERE PIDCode = rq.selectedPIDCode       \n" +
          "									AND deletedAt IS NULL AND isDeleted=0      \n" +
          "								)      \n" +
          "							)      \n" +
          "						) AS AlternatePN      \n" +
          "						FROM rfq_consolidated_mfgpn_lineitem rl                    \n" +
          "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                    \n" +
          "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                            \n" +
          "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                             \n" +
          "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id                  \n" +
          "						WHERE rl.isdeleted=0       \n" +
          "						AND rl.rfqAssyID=',rfqAssyID,' AND    \n" +
          "						(((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)) > (IFNULL(rq.currentStock,0)))        \n" +
          "						OR rq.selectedMpn IN (SELECT mfgPN FROM component           \n" +
          "							WHERE deletedAt IS NULL       \n" +
          "							AND partstatus IN (      \n" +
          "									SELECT gencCategoryID FROM genericcategory       \n" +
          "									WHERE deletedAt IS NULL       \n" +
          "									AND gencCategoryName IN (\"Not For New Design\",\"Obsolete\")      \n" +
          "								)      \n" +
          "							))      \n" +
          "						GROUP BY rl.lineID');                      \n" +
          "			PREPARE stmt FROM @SQLStatement;           \n" +
          "			EXECUTE stmt;	                    \n" +
          "  \n" +
          "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                    \n" +
          "			PREPARE query1 FROM @SQLStatement1;                    \n" +
          "			EXECUTE query1;                    \n" +
          "			DEALLOCATE PREPARE query1;                    \n" +
          "  \n" +
          "  \n" +
          "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                    \n" +
          "			PREPARE query2 FROM @SQLStatement2;                    \n" +
          "			EXECUTE query2;                    \n" +
          "			DEALLOCATE PREPARE query2;                    \n" +
          "  \n" +
          "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                    \n" +
          "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                    \n" +
          "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                    \n" +
          "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                    \n" +
          "			PREPARE query3 FROM @SQLStatement3;                    \n" +
          "			EXECUTE query3;                    \n" +
          "			DEALLOCATE PREPARE query3;                    \n" +
          "  \n" +
          "			SET @SQLStatement4 = CONCAT(\"            \n" +
          "				SELECT requestQty,             \n" +
          "					finalPrice,             \n" +
          "					unitPrice,            \n" +
          "					supplier,             \n" +
          "					selectedMpn,             \n" +
          "					selectionMode,            \n" +
          "					qtyID,             \n" +
          "					consolidateID,        \n" +
          "					selectedPIDCode,            \n" +
          "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus            \n" +
          "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                 \n" +
          "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID             \n" +
          "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                    \n" +
          "			PREPARE query4 FROM @SQLStatement4;                    \n" +
          "			EXECUTE query4;                    \n" +
          "			DEALLOCATE PREPARE query4;                    \n" +
          "  \n" +
          "			DROP TEMPORARY TABLE consolidatetemp;                      \n" +
          "    END;  \n" +
            /* **************************** Add Script Version -> 30-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (151,'1.00','V1','SP Added for Material Risk, Lead Time Risk, Custom Rules, Excess Material - Vaibhav'," + userid + ");"
            );
            break;
        case 151:
            allDbChangesArray.push(
            /* **************************** New Script -> 30-08-2018  *********************************** */
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.rfq.bom'  \n" +
            "WHERE pageName = 'BOM' ;  \n" +
            "  \n" +
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.rfq.bom.importbom'  \n" +
            "WHERE pageName = 'Import BOM' ;  \n" +
            "  \n" +
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.rfq.bom.plannedbom'  \n" +
            "WHERE pageName = 'Planned BOM' ;  \n" +
            "  \n" +
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.rfq.bom.quote'  \n" +
            "WHERE pageName = 'BOM Quote' ;  \n" +
            "  \n" +
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.rfq.bom.summary'  \n" +
            "WHERE pageName = 'BOM Summary' ;  \n" +
            "  \n" +
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.rfq.bom.partcosting'  \n" +
            "WHERE pageName = 'Part Costing' ;  \n" +
            "  \n" +
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.rfq.bom.partcosting.reviewpricing'  \n" +
            "WHERE pageName = 'Review Pricing' ;  \n" +
            "  \n" +
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.rfq.bom.partcosting.reviewpricing.notquoted'  \n" +
            "WHERE pageName = 'Not Quoted Line Items' ;  \n" +
            "  \n" +
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.rfq.bom.partcosting.reviewpricing.rules'  \n" +
            "WHERE pageName = '80/20 Rules' ;  \n" +
            "  \n" +
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.rfq.bom.partcosting.reviewpricing.excess'  \n" +
            "WHERE pageName = 'Excess Material Exposure' ;  \n" +
            "  \n" +
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.rfq.bom.partcosting.reviewpricing.atrisk'  \n" +
            "WHERE pageName = 'Materials At Risk' ;  \n" +
            "  \n" +
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.rfq.bom.partcosting.reviewpricing.leadtimerisk'  \n" +
            "WHERE pageName = 'Lead Time Risk' ;  \n" +
            "  \n" +
            "UPDATE page_detail  \n" +
            "SET pageRoute = 'app.rfq.bom.partcosting.reviewpricing.alternative'  \n" +
            "WHERE pageName = 'Suggested Alternatives' ;  \n" +
            /* **************************** Add Script Version -> 30-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (152,'1.00','V1',' Route changes for BOM - KETAN '," + userid + ");"
            );
            break;
        case 152:
            allDbChangesArray.push(
            /* **************************** New Script -> 30-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
            "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                    \n" +
            "	IN ppageIndex INT(11),                    \n" +
            "	IN precordPerPage INT(11),                    \n" +
            "	IN pOrderBy VARCHAR(255),                    \n" +
            "	IN pWhereClause VARCHAR(21844),                    \n" +
            "	IN rfqAssyID INT(11),                    \n" +
            "	IN puserID INT (11)              \n" +
            "    )  \n" +
            "BEGIN                    \n" +
            "  \n" +
            "	    DECLARE pOffset INT(11);                    \n" +
            "	    DECLARE rowNumWhere VARCHAR(255) ;                \n" +
            "	    SET @SQLString = NULL;                 \n" +
            "	    IF (pOrderBy IS NOT NULL) THEN                    \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                    \n" +
            "		ELSE                    \n" +
            "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                     \n" +
            "		END IF;	                    \n" +
            "  \n" +
            "  \n" +
            "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                    \n" +
            "			SET pWhereClause = '1=1' ;                    \n" +
            "		END IF;	                    \n" +
            "  \n" +
            "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                     \n" +
            "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                    \n" +
            "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                    \n" +
            "		ELSE	                    \n" +
            "			SET rowNumWhere = '';                    \n" +
            "		END IF;	                    \n" +
            "		SELECT            \n" +
            "                     GROUP_CONCAT(DISTINCT            \n" +
            "				CONCAT(            \n" +
            "					'Max((IF(ra.requestQty = ''',            \n" +
            "						ra.requestQty,            \n" +
            "					''', rq.finalPrice, null))) AS ''',            \n" +
            "						ra.requestQty,''''            \n" +
            "					)            \n" +
            "					) INTO @SQLString            \n" +
            "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                    \n" +
            "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                    \n" +
            "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                    \n" +
            "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                  \n" +
            "			IF(@SQLString IS NOT NULL) THEN                    \n" +
            "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                    \n" +
            "					SELECT                     \n" +
            "						rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                      \n" +
            "						rp.partTypeName, rm.name,     \n" +
            "						rl.qpa,        \n" +
            "						(SELECT gc.gencCategoryName FROM genericcategory gc          \n" +
            "						WHERE gc.gencCategoryID = co.PartStatus AND gc.deletedAt IS NULL AND co.deletedAt IS NULL) AS PartStatus,          \n" +
            "						co.ltbDate AS LTBDate,  \n" +
            "						co.eolDate AS EOLDate,           \n" +
            "						(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))                  \n" +
            "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla       \n" +
            "						LEFT JOIN component c ON rla.mfgpnid=c.id       \n" +
            "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                     \n" +
            "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                    \n" +
            "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                    \n" +
            "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                            \n" +
            "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                             \n" +
            "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id    \n" +
            "						LEFT JOIN component co ON mfgPN=rq.selectedMpn                    \n" +
            "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'           \n" +
            "						AND rq.selectedMpn IN (SELECT mfgPN FROM component           \n" +
            "					WHERE deletedAt IS NULL AND partstatus IN           \n" +
            "						(SELECT gencCategoryID FROM genericcategory           \n" +
            "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Not For New Design\",\"Obsolete\")))          \n" +
            "					GROUP BY rl.lineID');                      \n" +
            "			END IF;           \n" +
            "			PREPARE stmt FROM @SQLStatement;                  \n" +
            "			EXECUTE stmt;	                    \n" +
            "  \n" +
            "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                    \n" +
            "			PREPARE query1 FROM @SQLStatement1;                    \n" +
            "			EXECUTE query1;                    \n" +
            "			DEALLOCATE PREPARE query1;                    \n" +
            "  \n" +
            "  \n" +
            "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                    \n" +
            "			PREPARE query2 FROM @SQLStatement2;                    \n" +
            "			EXECUTE query2;                    \n" +
            "			DEALLOCATE PREPARE query2;                    \n" +
            "  \n" +
            "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                    \n" +
            "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                    \n" +
            "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                    \n" +
            "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                    \n" +
            "			PREPARE query3 FROM @SQLStatement3;                    \n" +
            "			EXECUTE query3;                    \n" +
            "			DEALLOCATE PREPARE query3;                    \n" +
            "  \n" +
            "			SET @SQLStatement4 = CONCAT(\"            \n" +
            "				SELECT requestQty,             \n" +
            "					finalPrice,             \n" +
            "					unitPrice,            \n" +
            "					supplier,             \n" +
            "					selectedMpn,             \n" +
            "					selectionMode,            \n" +
            "					qtyID,             \n" +
            "					consolidateID,        \n" +
            "					selectedPIDCode,          \n" +
            "					rq.min,rq.mult,            \n" +
            "					qtyID,               \n" +
            "					consolidateID,         \n" +
            "					currentStock,        \n" +
            "					leadTime,         \n" +
            "					supplierStock,        \n" +
            "					grossStock,    \n" +
            "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus            \n" +
            "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                 \n" +
            "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID             \n" +
            "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                    \n" +
            "			PREPARE query4 FROM @SQLStatement4;                    \n" +
            "			EXECUTE query4;                    \n" +
            "			DEALLOCATE PREPARE query4;                    \n" +
            "  \n" +
            "			DROP TEMPORARY TABLE consolidatetemp;                      \n" +
            "    END;  \n" +
            /* **************************** Add Script Version -> 30-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (153,'1.00','V1',' Changes in SP for material at risk - KETAN '," + userid + ");"
            );
            break;
        case 153:
            allDbChangesArray.push(
            /* **************************** New Script -> 31-08-2018  *********************************** */
             "ALTER TABLE component ADD mountingTypeText VARCHAR(100) NULL;  \n" +
            /* **************************** Add Script Version -> 31-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (154,'1.00','V1','Add mountingTypeText field in component-Champak'," + userid + ");"
            );
            break;
            case 154:
            allDbChangesArray.push(
            /* **************************** New Script -> 31-08-2018  *********************************** */
            "ALTER TABLE `rfq_assemblies` ADD COLUMN `isRoHS` tinyint(1);  \n" +
            /* **************************** Add Script Version -> 31-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (155,'1.00','V1','Add Rohs field in rfqAssembly - shirish'," + userid + ");"
            );
            break;
            case 155:
            allDbChangesArray.push(
            /* **************************** New Script -> 31-08-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_CopyAssyBOMQuote`;  \n" +
            "CREATE PROCEDURE `Sproc_CopyAssyBOMQuote`(    \n" +
            "	IN poldAssyID int(1),    \n" +
            "	IN pnewAssyID INT(1),  \n" +
            "    IN UserID int(1),  \n" +
            "    IN pIsCopyPricing tinyint  \n" +
            ")  \n" +
            "BEGIN    \n" +
            "DECLARE pCount int(11);  \n" +
            "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
            "BEGIN    \n" +
            "	ROLLBACK;    \n" +
            "	RESIGNAL;    \n" +
            "END;    \n" +
            "DECLARE EXIT HANDLER FOR SQLWARNING    \n" +
            "  BEGIN    \n" +
            "	ROLLBACK;    \n" +
            "	RESIGNAL;    \n" +
            "END;    \n" +
            "  \n" +
            "    START TRANSACTION;    \n" +
            "  \n" +
            "		select Count(*) INTO pCount from rfq_lineItems where rfqAssyID = pnewAssyID;  \n" +
            "# Remove existing BOM data from newAssembly  \n" +
            "		IF(pCount>0) THEN  \n" +
            "  \n" +
            "			update rfq_assy_bom set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where reqAssyID = pnewAssyID and bomNumber IS NOT NULL;  \n" +
            "			update rfq_assy_bom_relationship set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_lineitems set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_lineitems_alternatepart set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_consolidated_mfgpn_lineitem set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_consolidated_mfgpn_lineitem_alternate set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where consolidateID in (select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = pnewAssyID);  \n" +
            "			update rfq_consolidate_mfgpn_lineitem_quantity set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where consolidateID in (select id from rfq_consolidated_mfgpn_lineitem where rfqAssyID = pnewAssyID);  \n" +
            "			update rfq_assy_quotations set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where rfqAssyID = pnewAssyID;  \n" +
            "			update rfq_assy_quantity_price_selection_setting set isDeleted = true, deletedAt = UTC_TIMESTAMP(),deletedBy = UserID where qtyID in (select id from rfq_assy_quantity where rfqAssyID = pnewAssyID);  \n" +
            "        END IF;  \n" +
            "# update isverifiedBOM and isReadyforPricing flag in rfq_assemblies table  \n" +
            "	IF(pIsCopyPricing) THEN  \n" +
            "			update rfq_assemblies set   \n" +
            "			isBOMVerified = true,   \n" +
            "			isReadyForPricing = true,  \n" +
            "			updatedAt = UTC_TIMESTAMP(),  \n" +
            "			updatedBy = UserID  \n" +
            "			where id = pnewAssyID;  \n" +
            "  \n" +
            "	ELSE   \n" +
            "			update rfq_assemblies set   \n" +
            "			isBOMVerified = true,   \n" +
            "			isReadyForPricing = false,  \n" +
            "			updatedAt = UTC_TIMESTAMP(),  \n" +
            "			updatedBy = UserID  \n" +
            "			where id = pnewAssyID;  \n" +
            "  \n" +
            "	END IF;  \n" +
            "  \n" +
            "# Copy rfq lineItems data of old assy to new Assy  \n" +
            "			INSERT INTO `rfq_lineitems`  \n" +
            "			(`rfqAssyBomID`, `rfqAssyID`, `lineID`, `qpa`, `refDesig`, `custPN`, `custPNID`, `uomID`, `description`, `level`, `isInstall`,  \n" +
            "			`isPurchase`, `isNoBidsPN`,  `isDraft`, `isActive`, `partTypeID`, `partclassID`,  `leadQty`, `attritionRate`, `totalQty`,   \n" +
            "			`manualAdj`, `createdBy`, `createdAt`, `customerRev`, `flextronRev`, `customerDescription`, `numOfPosition`, `valueAddedCost`,   \n" +
            "			`refRFQLineItemID`, `dnpQty`, `dnpDesig`, `org_lineID`, `org_qpa`, `org_refDesig`, `org_custPN`, `org_uomName`, `org_level`,   \n" +
            "			`org_isInstall`, `org_isPurchase`, `org_customerRev`, `org_customerDescription`, `org_numOfPosition`, `org_refLineID`,   \n" +
            "			`qpaDesignatorStep`)  \n" +
            "			select (select id from rfq_assy_bom where reqAssyID = pnewAssyID and bomNumber IS NULL) `rfqAssyBomID`,pnewAssyID `rfqAssyID`, `lineID`, `qpa`,  \n" +
            "			 `refDesig`, `custPN`, `custPNID`, `uomID`, `description`, `level`, `isInstall`,  \n" +
            "			`isPurchase`, `isNoBidsPN`,  `isDraft`, `isActive`, `partTypeID`, `partclassID`,  `leadQty`, `attritionRate`, `totalQty`,   \n" +
            "			`manualAdj`, UserID `createdBy`, UTC_TIMESTAMP() `createdAt`, `customerRev`, `flextronRev`, `customerDescription`, `numOfPosition`,   \n" +
            "			`valueAddedCost`, `refRFQLineItemID`, `dnpQty`, `dnpDesig`, `org_lineID`, `org_qpa`, `org_refDesig`, `org_custPN`,  \n" +
            "			`org_uomName`, `org_level`, `org_isInstall`, `org_isPurchase`, `org_customerRev`, `org_customerDescription`,   \n" +
            "			`org_numOfPosition`, `org_refLineID`, `qpaDesignatorStep`  \n" +
            "			 from rfq_lineitems where rfqAssyID = poldAssyID and IFNULL(isDeleted,0) = 0;  \n" +
            "# Copy rfq lineitems alternatepart data of old assy to new Assy  \n" +
            "			INSERT INTO `rfq_lineitems_alternatepart`  \n" +
            "			( `rfqLineItemsID`, `distributor`, `distMfgCodeID`, `distPN`, `distMfgPNID`, `mfgCode`, `mfgCodeID`, `mfgPN`, `mfgPNID`,  \n" +
            "			`description`, `isActive`, `isApproved`, `isNoBidsPN`, `isDraft`, `isROHS`, `copyAlternetPartID`, `createdBy`, `createdAt`,  \n" +
            "			`mfgVerificationStep`, `mfgDistMappingStep`, `mfgCodeStep`, `distVerificationStep`, `distCodeStep`,  \n" +
            "			`getMFGPNStep`, `obsoletePartStep`, `mfgGoodPartMappingStep`, `rfqAssyID`, `mfgPNStep`, `distPNStep`,`distGoodPartMappingStep`)  \n" +
            "			select rl.id `rfqLineItemsID`, ra.`distributor`, ra.`distMfgCodeID`, ra.`distPN`, ra.`distMfgPNID`, ra.`mfgCode`, ra.`mfgCodeID`, ra.`mfgPN`, ra.`mfgPNID`,  \n" +
            "			ra.`description`, ra.`isActive`, ra.`isApproved`, ra.`isNoBidsPN`, ra.`isDraft`, ra.`isROHS`, ra.`copyAlternetPartID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`,  \n" +
            "			ra.`mfgVerificationStep`, ra.`mfgDistMappingStep`, ra.`mfgCodeStep`, ra.`distVerificationStep`, ra.`distCodeStep`,  \n" +
            "			ra.`getMFGPNStep`, ra.`obsoletePartStep`, ra.`mfgGoodPartMappingStep`,pnewAssyID `rfqAssyID`, ra.`mfgPNStep`, ra.`distPNStep`,ra.`distGoodPartMappingStep`  \n" +
            "			 from rfq_lineitems_alternatepart ra  \n" +
            "			 join rfq_lineitems ral on ral.id = ra.rfqLineItemsID and ral.rfqAssyID = poldAssyID and ifnull(ral.isDeleted,0) = 0  \n" +
            "			 join rfq_lineitems rl on rl.lineID = ral.lineID and rl.rfqAssyID = pnewAssyID and ifnull(rl.isDeleted,0) = 0  \n" +
            "			 where ra.rfqAssyID = poldAssyID and IFNULL(ra.isDeleted, 0) = 0;  \n" +
            "# Copy Assy BOM data of old assy to new Assy  \n" +
            "			INSERT INTO `rfq_assy_bom`  \n" +
            "			(`reqAssyID`, `isActive`, `description`, `createdBy`, `createdAt`, `bomNumber`,`rfqLineItemsID`)  \n" +
            "			select pnewAssyID `reqAssyID`, `isActive`, `description`,UserID `createdBy`, UTC_TIMESTAMP() `createdAt`, `bomNumber`,  \n" +
            "			(select id from rfq_lineitems where rfqAssyID = pnewAssyID and isDeleted = 0 and lineID = (select lineID from rfq_lineitems where id = rfqLineItemsID)) `rfqLineItemsID` from rfq_assy_bom   \n" +
            "			where reqAssyID = poldAssyID and isDeleted = 0 and bomNumber is not null;  \n" +
            "# update sub assy id in rfq lineItems data of old assy to new Assy  \n" +
            "  \n" +
            "			update rfq_lineitems rl, (select id,rfqLineItemsID,(select lineID from rfq_lineitems where id = rfqLineItemsID) as lineID  \n" +
            "										from rfq_assy_bom where reqAssyID = pnewAssyID and isDeleted = 0 and bomNumber is not null) rbl  \n" +
            "			set  \n" +
            "			rl.rfqAssyBomID = rbl.id  \n" +
            "			where rl.refRFQLineItemID = rbl.lineID and rl.isDeleted = 0 and rfqAssyID = pnewAssyID;   \n" +
            "# update sub assy id in rfq lineItems data of old assy to new Assy  \n" +
            "			update rfq_lineitems_alternatepart rap, (select rl.id, rl.rfqAssyBomID, ra.rfqLineItemsID, rl.lineID from rfq_lineitems rl   \n" +
            "														join  rfq_lineitems_alternatepart ra on ra.rfqLineItemsID = rl.id   \n" +
            "														where ra.rfqAssyID = pnewAssyID and rl.isDeleted = 0) rab   \n" +
            "			set rap.rfqAssyBomID = rab.rfqAssyBomID  \n" +
            "			where   \n" +
            "			rab.rfqLineItemsID = rap.rfqLineItemsID and rap.rfqAssyID = pnewAssyID;  \n" +
            "  \n" +
            "# Copy Assy BOM relationship data of old assy to new Assy              \n" +
            "			INSERT INTO `rfq_assy_bom_relationship`  \n" +
            "			(`rfqAssyBomID`, `parentRFQAssyBOMID`, `parentLineitemsID`, `rfqAssyID`, `createdBy`, `createdAt`)  \n" +
            "			select (select id from rfq_assy_bom where reqAssyID = pnewAssyID and isDeleted = 0 and rfqLineItemsID = (select id from rfq_lineitems where rfqAssyID = pnewAssyID and lineID in (select lineID from rfq_lineitems where id = ab1.rfqLineItemsID))) `rfqAssyBomID`,   \n" +
            "			(select rfqAssyBomID from rfq_lineitems where rfqAssyID = pnewAssyID and lineID in (select lineID from rfq_lineitems where id = ab1.rfqLineItemsID)) `parentRFQAssyBOMID`,   \n" +
            "			(select id from rfq_lineitems where rfqAssyID = pnewAssyID and lineID in (select lineID from rfq_lineitems where id = ab1.rfqLineItemsID)) `parentLineitemsID`,  \n" +
            "			pnewAssyID `rfqAssyID`, UserID `createdBy`, UTC_TIMESTAMP() `createdAt`  \n" +
            "			from rfq_assy_bom ab1  \n" +
            "			where reqAssyID = poldAssyID and bomNumber is not null;  \n" +
            "# copy rfq_consolidated_mfgpn_lineitem data from old assy to new assy  \n" +
            "		IF(pIsCopyPricing) THEN  \n" +
            "  \n" +
            "			INSERT INTO `rfq_consolidated_mfgpn_lineitem`  \n" +
            "			(`rfqAssyBomID`, `lineID`, `isInstall`, `isPurchase`, `rfqAssyID`, `partTypeID`, `partClassID`, `leadQty`, `attritionRate`, `isActive`, `rfqLineItemID`, `uomID`,  \n" +
            "			`isNoBidsPN`, `isDraft`, `leads`, `totalQty`, `requestQty`, `originalTotalQty`, `qpa`, `createdAt`, `createdBy`, `isMultiple`, `valueAddedCost`,   \n" +
            "			`numOfPosition`,`consolidatedLineItemIDs`)  \n" +
            "			select rl.`rfqAssyBomID`, rcl.`lineID`, rcl.`isInstall`, rcl.`isPurchase`, rl.`rfqAssyID`, rcl.`partTypeID`, rcl.`partClassID`, rcl.`leadQty`, rcl.`attritionRate`,  \n" +
            "            rcl.`isActive`, rl.id `rfqLineItemID`, rcl.`uomID`, rcl.`isNoBidsPN`, rcl.`isDraft`, rcl.`leads`, rcl.`totalQty`, rcl.`requestQty`, rcl.`originalTotalQty`,   \n" +
            "            rcl.`qpa`,UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, rcl.`isMultiple`, rcl.`valueAddedCost`, rcl.`numOfPosition`,  \n" +
            "            fun_getconsolidatedlineitems(rcl.id,poldAssyID,pnewAssyID) `consolidatedLineItemIDs`   \n" +
            "			from rfq_consolidated_mfgpn_lineitem rcl  \n" +
            "			join rfq_lineitems rl on rl.lineID = rcl.lineID and rl.rfqAssyID = pnewAssyID and IFNULL(rl.isDeleted,0) = 0  \n" +
            "			 where rcl.rfqAssyID = poldAssyID and IFNULL(rcl.isDeleted,0) = 0;  \n" +
            "# copy rfq_consolidated_mfgpn_lineitem_alternate data from old assy to new assy  \n" +
            "			INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`  \n" +
            "			(`mfgPN`, `consolidateID`, `mfgPNID`, `createdBy`, `createdAt`, `mfgCodeID`, `PIDCode`)  \n" +
            "			select rap.`mfgPN`,rcl.id `consolidateID`, rap.`mfgPNID`,UserID `createdBy`,UTC_TIMESTAMP() `createdAt`, rap.`mfgCodeID`, com.PIDCode `PIDCode`   \n" +
            "            from rfq_lineitems_alternatepart rap  \n" +
            "			join rfq_consolidated_mfgpn_lineitem rcl on rcl.rfqAssyID = rap.rfqAssyID and rcl.rfqLineItemID = rap.rfqLineItemsID  \n" +
            "			join component com on com.id = rap.mfgPNID and IFNULL(com.isDeleted,0) = 0  \n" +
            "			where rap.rfqAssyID = pnewAssyID  \n" +
            "			group by rap.mfgPNID,rap.rfqLineItemsID;  \n" +
            "# copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy  \n" +
            "		# create temporary table for rfq_consolidate_mfgpn_lineitem_quantity of old assembly  \n" +
            "			drop temporary table if exists result;  \n" +
            "			create temporary table result   \n" +
            "			select rcl.lineID, raq.requestQty, rcl.qpa,rlq.* from rfq_consolidate_mfgpn_lineitem_quantity rlq   \n" +
            "			left join rfq_consolidated_mfgpn_lineitem rcl on rcl.id = rlq.consolidateID and rcl.rfqAssyID = poldAssyID  \n" +
            "			left join rfq_assy_quantity raq on raq.id = rlq.qtyID  and raq.rfqAssyID = poldAssyID  \n" +
            "			where rlq.isDeleted = 0 and rcl.isDeleted = 0 and raq.isDeleted = 0 and raq.rfqAssyID = poldAssyID;  \n" +
            "  \n" +
            "		# create temporary table for mapping quantity between old assembly and new assembly  \n" +
            "  \n" +
            "			drop temporary table if exists mapping;  \n" +
            "			create temporary table mapping  \n" +
            "			select a.requestQty, ifNull((select Max(b.requestqty)  from rfq_assy_quantity b   \n" +
            "			where b.rfqAssyID = poldAssyID and b.requestqty <= a.requestQty and b.isDeleted = 0),  \n" +
            "			(select Min(b.requestqty)  from rfq_assy_quantity b   \n" +
            "			where b.rfqAssyID = poldAssyID and b.requestqty > a.requestQty and b.isDeleted = 0))mappingQty  \n" +
            "			from rfq_assy_quantity a   \n" +
            "			where a.rfqAssyID = pnewAssyID;  \n" +
            "		# copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy  \n" +
            "  \n" +
            "            INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`  \n" +
            "			(`qtyID`, `finalPrice`, `consolidateID`, `createdAt`, `createdBy`, `unitPrice`, `supplier`, `selectedMpn`, `selectionMode`,  \n" +
            "			`min`, `mult`, `currentStock`,`selectedPIDCode`,`leadTime`,`supplierStock`,`grossStock`)  \n" +
            "			select rq.id `qtyID`, cast(((R.finalPrice /(R.requestQty*R.qpa))*(cl.qpa*rq.requestQty)) as decimal(16,6)) `finalPrice`, cl.id `consolidateID`,   \n" +
            "			UTC_TIMESTAMP() `createdAt`,UserID `createdBy`, cast((R.finalPrice /(R.requestQty*R.qpa)) as decimal(16,6))  `unitPrice`, R.`supplier`, R.`selectedMpn`,  \n" +
            "			R.`selectionMode`, R.`min`, R.`mult`, R.`currentStock`, R.`selectedPIDCode`,R.`leadTime`,R.`supplierStock`,R.`grossStock`         \n" +
            "			from rfq_consolidated_mfgpn_lineitem cl      \n" +
            "			join rfq_assy_quantity rq on rq.rfqAssyID = cl.rfqAssyID and rq.isDeleted = 0  \n" +
            "			left join rfq_consolidate_mfgpn_lineitem_quantity clq on clq.consolidateID = cl.id and clq.qtyID = rq.id   \n" +
            "			left join result R on R.lineID = cl.lineID   \n" +
            "            left join mapping m on  rq.requestQty = m.requestQty   \n" +
            "			where cl.rfqAssyID = pnewAssyID and cl.isDeleted = 0 and m.mappingQty = R.requestQty AND IFNULL(rq.isDeleted,0) = 0;  \n" +
            "  \n" +
            "             drop temporary table if exists mapping;  \n" +
            "             drop temporary table if exists result;  \n" +
            "	END IF;  \n" +
            "     COMMIT;    \n" +
            "	select * from rfq_lineitems where rfqAssyID = pnewAssyID and isDeleted = 0;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 31-08-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (156,'1.00','V1','copy assy BOM quote - shirish'," + userid + ");"
            );
            break;
            case 156:
            allDbChangesArray.push(
            /* **************************** New Script -> 01-09-2018  *********************************** */
            "DROP PROCEDURE IF EXISTS `Sproc_checkDelete`;  \n" +
            "CREATE PROCEDURE `Sproc_checkDelete`(                            \n" +
            "	IN tableName VARCHAR(255),                            \n" +
            "	IN IDs LONGTEXT,                            \n" +
            "	IN deletedBy INT,                            \n" +
            "	IN entityID VARCHAR(255),                            \n" +
            "	IN refrenceIDs LONGTEXT                            \n" +
            "    )  \n" +
            "BEGIN                            \n" +
            "	DECLARE vWoID1 INT(11);                            \n" +
            "	DECLARE vOpID1 INT(11);                            \n" +
            "	DECLARE vSerialNo1 VARCHAR(50);                            \n" +
            "	DECLARE vProdStatus1 VARCHAR(5);                            \n" +
            "	DECLARE vWoTransID1 INT(11);                            \n" +
            "	DECLARE vQty1 INT(11);                            \n" +
            "	DECLARE vOpID2 INT(11);                            \n" +
            "	DECLARE vProdstatus2 VARCHAR(5);                            \n" +
            "  \n" +
            "IF tableName='employees' THEN                            \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)                            \n" +
            "	   UNION ALL                                                  \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_department\" ELSE \"\" END AS msg  FROM  employee_department ed WHERE ed.deletedAt IS NULL AND ed.employeeID IN(',IDs,') LIMIT 1)                            \n" +
            "           UNION ALL                             \n" +
            "        (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND (er.finalStatusInit IN(',IDs,') OR er.initiateBy IN(',IDs,')) LIMIT 1)                            \n" +
            "	   UNION ALL                            \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request_department_approval\" ELSE \"\" END as msg FROM  eco_request_department_approval erda WHERE erda.deletedAt IS NULL AND erda.employeeID IN(',IDs,') LIMIT 1)                            \n" +
            "	UNION ALL                            \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"employee_equipment\" ELSE \"\" END AS msg FROM employee_equipment ee WHERE ee.deletedAt IS NULL AND ee.employeeID IN(',IDs,') LIMIT 1)                            \n" +
            "	  UNION ALL                            \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"employees\" ELSE \"\" END AS msg FROM employees e WHERE e.deletedAt IS NULL AND e.managerID IN(',IDs,') LIMIT 1)                            \n" +
            "	  UNION ALL                            \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationdet\" ELSE \"\" END AS msg FROM notificationdet n WHERE n.deletedAt IS NULL AND n.receiverID IN(',IDs,') LIMIT 1)                            \n" +
            "	  UNION ALL                            \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"notificationmst\" ELSE \"\" END AS msg FROM notificationmst n WHERE n.deletedAt IS NULL AND n.senderID IN(',IDs,') LIMIT 1)                            \n" +
            "	  UNION ALL                            \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operation_employee\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)                            \n" +
            "	 UNION ALL                            \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_operation_employee\" ELSE \"\" END AS msg FROM workorder_operation_employee woe WHERE woe.deletedAt IS NULL and woe.employeeID IN(',IDs,') LIMIT 1)                            \n" +
            "	  UNION ALL                            \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqforreview\" ELSE \"\" END AS msg FROM workorder_reqforreview wr WHERE wr.deletedAt IS NULL AND (wr.reqGenEmployeeID IN(',IDs,') OR wr.woAuthorID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                            \n" +
            "	  UNION ALL                             \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevcomments\" ELSE \"\" END AS msg FROM workorder_reqrevcomments wr WHERE wr.deletedAt IS NULL AND (wr.commentemployeeID IN(',IDs,') OR wr.accRejBy IN(',IDs,')) LIMIT 1)                            \n" +
            "	  UNION ALL                            \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_reqrevinvitedemp\" ELSE \"\" END AS msg FROM workorder_reqrevinvitedemp wr WHERE wr.deletedAt IS NULL AND (wr.employeeID IN(',IDs,') OR wr.requstedEmployeeID IN(',IDs,')) LIMIT 1)                             \n" +
            "	  UNION ALL                                \n" +
            "	(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE (wt.checkinEmployeeID IN(',IDs,') OR wt.checkoutEmployeeID IN(',IDs,')) LIMIT 1)                            \n" +
            "	  UNION ALL                               \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_assy_defectdet\" ELSE \"\" END AS msg FROM  workorder_trans_assy_defectdet wtad WHERE wtad.deletedAt IS NULL AND wtad.employeeID IN(',IDs,') LIMIT 1)                            \n" +
            "	 UNION ALL                             \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_empinout\" ELSE \"\" END AS msg FROM  workorder_trans_empinout wte WHERE wte.deletedAt IS NULL AND wte.employeeID IN(',IDs,') LIMIT 1)                            \n" +
            "	 UNION ALL                             \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_firstpcsdet\" ELSE \"\" END AS msg FROM  workorder_trans_firstpcsdet wtf WHERE wtf.deletedAt IS NULL AND wtf.employeeID IN(',IDs,') LIMIT 1)                            \n" +
            "	 UNION ALL                             \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_hold_unhold wthu WHERE wthu.deletedAt IS NULL AND (wthu.holdEmployeeId IN(',IDs,') OR wthu.unHoldEmployeeId IN(',IDs,')) LIMIT 1)                            \n" +
            "	UNION ALL                             \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_production\" ELSE \"\" END AS msg FROM  workorder_trans_production wtp WHERE wtp.deletedAt IS NULL AND wtp.employeeID IN(',IDs,') LIMIT 1)                            \n" +
            "	 UNION ALL                             \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_serialno\" ELSE \"\" END AS msg FROM  workorder_trans_serialno wts WHERE wts.deletedAt IS NULL AND wts.employeeid IN(',IDs,') LIMIT 1)                            \n" +
            "	 UNION ALL                             \n" +
            "     (SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)                            \n" +
            "	 UNION ALL                             \n" +
            "	(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans_operation_hold_unhold\" ELSE \"\" END AS msg FROM  workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND (holdEmployeeId IN(',IDs,') OR unHoldEmployeeId IN(',IDs,')) LIMIT 1)                            \n" +
            "  \n" +
            "        ) q');                            \n" +
            "    PREPARE stmt FROM @SQL;                            \n" +
            "    EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempEmp)=0 THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');                            \n" +
            "			SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID in(',IDs,') and deletedAt is NULL');                            \n" +
            "			SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');                            \n" +
            "			SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                            \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			PREPARE stmt2 FROM @SQL2;                            \n" +
            "			PREPARE stmt3 FROM @SQL3;                            \n" +
            "			PREPARE stmt4 FROM @SQL4;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "			EXECUTE stmt2;                            \n" +
            "			EXECUTE stmt3;                            \n" +
            "			EXECUTE stmt4;                            \n" +
            "			SELECT                             \n" +
            "    *                            \n" +
            "FROM                            \n" +
            "    tempEmp;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempEmp;                            \n" +
            "		END IF;                            \n" +
            "  \n" +
            "    DROP TABLE tempEmp;                            \n" +
            "END IF;                            \n" +
            "IF tableName='eco_type_category' THEN                            \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeCategory as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_type_values\" else \"\" end as msg FROM eco_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeCatID IN(',IDs,') LIMIT 1)                             \n" +
            "	  ) q');                            \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeCategory)=0 THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeCatID in(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT                             \n" +
            "    *                            \n" +
            "FROM                            \n" +
            "    tempEcoTypeCategory;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempEcoTypeCategory;                            \n" +
            "		END IF;                            \n" +
            "    DROP TABLE tempEcoTypeCategory;                              \n" +
            "END IF;                            \n" +
            "IF tableName='eco_type_values' THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEcoTypeValues as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_type_values\" else \"\" end as msg FROM eco_request_type_values WHERE deletedAt IS NULL AND ecoTypeValID IN(',IDs,') LIMIT 1)                            \n" +
            "	  ) q');                            \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempEcoTypeValues)=0 THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update eco_type_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where ecoTypeValID in(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT                             \n" +
            "    *                            \n" +
            "FROM                            \n" +
            "    tempEcoTypeValues;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempEcoTypeValues;                            \n" +
            "		END IF;                            \n" +
            "    DROP TABLE tempEcoTypeValues;                              \n" +
            "END IF;                            \n" +
            "IF tableName='customers' THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                             \n" +
            "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                             \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                            \n" +
            "	  ) q');                            \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                            \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                            \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			PREPARE stmt2 FROM @SQL2;                            \n" +
            "			PREPARE stmt3 FROM @SQL3;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "			EXECUTE stmt2;                            \n" +
            "			EXECUTE stmt3;                            \n" +
            "  \n" +
            "			SELECT                             \n" +
            "    *                            \n" +
            "FROM                            \n" +
            "    tempCustomers;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempCustomers;                            \n" +
            "		END IF;                            \n" +
            "    DROP TABLE tempCustomers;                              \n" +
            "END IF;                            \n" +
            "IF tableName='certificate_standards' THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempCertificateStandards as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_class\" else \"\" end as msg FROM standard_class WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND certificateStandardID IN(',IDs,') LIMIT 1)                            \n" +
            "  \n" +
            "	  ) q');                            \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempCertificateStandards)=0 THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update certificate_standards set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where certificateStandardID in(',IDs,') and deletedAt is NULL');		                            \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                            \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			PREPARE stmt2 FROM @SQL2;                            \n" +
            "			PREPARE stmt3 FROM @SQL3;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "			EXECUTE stmt2;                            \n" +
            "			EXECUTE stmt3;                            \n" +
            "  \n" +
            "			SELECT * FROM tempCertificateStandards;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempCertificateStandards;                            \n" +
            "		END IF;                            \n" +
            "    DROP TABLE tempCertificateStandards;                              \n" +
            "END IF;                            \n" +
            "IF tableName='department' THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDepartment as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department WHERE deletedAt IS NULL AND parentDeptID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request_department_approval\" else \"\" end as msg FROM eco_request_department_approval WHERE deletedAt IS NULL AND deptID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)                            \n" +
            "  \n" +
            "	  ) q');                            \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempDepartment)=0 THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update department set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deptID in(',IDs,') and deletedAt is NULL');		                            \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                            \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			PREPARE stmt2 FROM @SQL2;                            \n" +
            "			PREPARE stmt3 FROM @SQL3;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "			EXECUTE stmt2;                            \n" +
            "			EXECUTE stmt3;                            \n" +
            "  \n" +
            "			SELECT * FROM tempDepartment;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempDepartment;                            \n" +
            "		END IF;                            \n" +
            "    DROP TABLE tempDepartment;                              \n" +
            "END IF;                            \n" +
            "IF tableName='genericcategory' THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND (eqpGroupID IN(',IDs,') OR eqpSubGroupID IN(',IDs,') OR eqpTypeID IN(',IDs,') OR eqpPossessionID IN(',IDs,') OR eqpOwnershipTypeID IN(',IDs,') OR locationTypeID IN(',IDs,'))   LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"parts\" else \"\" end as msg FROM parts WHERE deletedAt IS NULL AND partSubcategoryID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)                            \n" +
            "	     UNION ALL                          \n" +
            "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)                            \n" +
            "	  ) q');                            \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempGenericCategory)=0 THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT                             \n" +
            "    *                            \n" +
            "FROM                            \n" +
            "    tempGenericCategory;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempGenericCategory;                            \n" +
            "		END IF;                            \n" +
            "    DROP TABLE tempGenericCategory;                              \n" +
            "END IF;                            \n" +
            "IF tableName='equipment' THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEquipment as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employee_equipment\" else \"\" end as msg FROM employee_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_task\" else \"\" end as msg FROM equipment_task WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND eqpID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND (workstationID IN(',IDs,') OR equipmentID IN(',IDs,')) LIMIT 1)                            \n" +
            "  \n" +
            "	  ) q');                            \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempEquipment)=0 THEN                            \n" +
            "			IF entityID IS NOT NULL THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');		                            \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                            \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			PREPARE stmt2 FROM @SQL2;                            \n" +
            "			PREPARE stmt3 FROM @SQL3;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "			EXECUTE stmt2;                            \n" +
            "			EXECUTE stmt3;                            \n" +
            "  \n" +
            "			ELSE                            \n" +
            "			SET @SQl1 = CONCAT('update equipment set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID in(',IDs,') and deletedAt is NULL');                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "			END IF;                            \n" +
            "  \n" +
            "			SELECT * FROM tempEquipment;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempEquipment;                            \n" +
            "		END IF;                            \n" +
            "    DROP TABLE tempEquipment;                              \n" +
            "END IF;                            \n" +
            "IF tableName='parts' THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempParts as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                            \n" +
            "	  ) q');                            \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempParts)=0 THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update parts set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID in(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempParts;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempParts;                            \n" +
            "		END IF;                            \n" +
            "    DROP TABLE tempParts;                              \n" +
            "END IF;                            \n" +
            "IF tableName='master_templates' THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMasterTemplate as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateId IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND masterTemplateID IN(',IDs,') LIMIT 1)                            \n" +
            "	  ) q');                            \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempMasterTemplate)=0 THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update master_templates set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempMasterTemplate;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempMasterTemplate;                            \n" +
            "		END IF;                            \n" +
            "    DROP TABLE tempMasterTemplate;                              \n" +
            "END IF;                            \n" +
            "IF tableName='operations' THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOperations as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_employee\" else \"\" end as msg FROM operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_equipment\" else \"\" end as msg FROM operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_master_templates\" else \"\" end as msg FROM operation_master_templates WHERE deletedAt IS NULL AND operationId IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND opID IN(',IDs,') LIMIT 1)                            \n" +
            "  \n" +
            "	  ) q');                            \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempOperations)=0 THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update operations set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where opID in(',IDs,') and deletedAt is NULL');		                            \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                            \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			PREPARE stmt2 FROM @SQL2;                            \n" +
            "			PREPARE stmt3 FROM @SQL3;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "			EXECUTE stmt2;                            \n" +
            "			EXECUTE stmt3;                            \n" +
            "  \n" +
            "			SELECT * FROM tempOperations;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempOperations;                            \n" +
            "		END IF;                            \n" +
            "    DROP TABLE tempOperations;                              \n" +
            "END IF;                            \n" +
            "IF tableName='workorder' THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorder as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_cluster\" else \"\" end as msg FROM workorder_cluster WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_employee\" else \"\" end as msg FROM workorder_operation_employee WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment\" else \"\" end as msg FROM workorder_operation_equipment WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_firstpiece\" else \"\" end as msg FROM workorder_operation_firstpiece WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqforreview\" else \"\" end as msg FROM workorder_reqforreview WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevcomments\" else \"\" end as msg FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_reqrevinvitedemp\" else \"\" end as msg FROM workorder_reqrevinvitedemp WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL		                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assy_designators\" else \"\" end as msg FROM workorder_assy_designators WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_empinout\" else \"\" end as msg FROM workorder_trans_empinout WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_hold_unhold\" else \"\" end as msg FROM workorder_trans_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_operation_hold_unhold\" else \"\" end as msg FROM workorder_trans_operation_hold_unhold WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_serialno\" else \"\" end as msg FROM workorder_trans_serialno WHERE deletedAt IS NULL AND woID IN(',IDs,') LIMIT 1)                            \n" +
            "  \n" +
            "	  ) q');                            \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempWorkorder)=0 THEN                            \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete work order */                            \n" +
            "			SELECT GROUP_CONCAT(woNumber) INTO @woNumbers FROM workorder WHERE FIND_IN_SET(woID,IDs) AND deletedAt IS NULL;                             \n" +
            "			SET @pEventTitle = CONCAT(\"Work order(s) deleted\");                            \n" +
            "			SET @pEventDescription = CONCAT(\"Work order(s) \",@woNumbers,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");			                            \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@pEventTitle,@pEventDescription,tableName,IDs,4,NULL,deletedBy,3);  /* DE = DELETE */			                            \n" +
            "			/* [E] - Add Time line log for delete work order */			                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                            \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');                            \n" +
            "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');                            \n" +
            "			SET @SQl4 = CONCAT('update workorder_certification set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woID in(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			PREPARE stmt2 FROM @SQL2;                            \n" +
            "			PREPARE stmt3 FROM @SQL3;                            \n" +
            "			PREPARE stmt4 FROM @SQL4;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "			EXECUTE stmt2;                            \n" +
            "			EXECUTE stmt3;                            \n" +
            "			EXECUTE stmt4;                            \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorder;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempWorkorder;                            \n" +
            "		END IF;                            \n" +
            "    DROP TABLE tempWorkorder;                              \n" +
            "END IF;                            \n" +
            "IF tableName='roles' THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempRoles as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"users_roles\" else \"\" end as msg FROM users_roles WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                            \n" +
            "         UNION ALL                            \n" +
            "         (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"generic_folder\" else \"\" end as msg FROM generic_folder WHERE deletedAt IS NULL AND roleId IN(',IDs,') LIMIT 1)                            \n" +
            "         UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"genericfiles\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND refParentId IN (select gencFolderID from generic_folder where roleId IN (',IDs,')) LIMIT 1)) q');                            \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempRoles)=0 THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update roles set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id in(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempRoles;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempRoles;                            \n" +
            "		END IF;                            \n" +
            "    DROP TABLE tempRoles;                              \n" +
            "END IF;                            \n" +
            "IF tableName='standard_class' THEN                            \n" +
            "  \n" +
            " SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempStandardClass as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_certification\" else \"\" end as msg FROM workorder_certification WHERE deletedAt IS NULL AND FIND_IN_SET(',IDs,',classIDs) LIMIT 1)                            \n" +
            "	  ) q');                            \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                      \n" +
            "  \n" +
            "  \n" +
            "		IF (SELECT TotalCount FROM tempStandardClass)=0 THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where classID IN(',IDs,') and deletedAt is NULL');        \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempStandardClass;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempStandardClass;                            \n" +
            "		END IF;                            \n" +
            "    DROP TABLE tempStandardClass;                              \n" +
            "END IF;                            \n" +
            "IF tableName='dataelement' THEN                            \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempDataElement as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg FROM operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_dataelement\" else \"\" end as msg FROM equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_dataelement\" else \"\" end as msg FROM workorder_operation_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_equipment_dataelement\" else \"\" end as msg FROM workorder_operation_equipment_dataelement WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND isDeleted=false AND dataElementID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"subform_transaction\" else \"\" end as msg FROM subform_transaction WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_subform_data\" else \"\" end as msg FROM workorder_trans_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_subform_data\" else \"\" end as msg FROM workorder_trans_equipment_subform_data WHERE deletedAt IS NULL AND parentDataElementID IN(',IDs,') LIMIT 1)		                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND dataElementID IN(',IDs,') LIMIT 1)                            \n" +
            "	  ) q');                            \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempDataElement)=0 THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt2 FROM @SQL2;                            \n" +
            "			EXECUTE stmt2;                            \n" +
            "  \n" +
            "  \n" +
            "			SELECT dl.isAutoIncrement,dl.controlTypeID,(SELECT systemGenerated FROM entity en WHERE en.entityID = dl.entityID AND en.deletedAt IS NULL)                            \n" +
            "									INTO @lpIsAutoIncrement,@lpControlTypeID,@lpSystemGenerated                            \n" +
            "			FROM dataelement dl WHERE dl.dataElementID = IDs;                            \n" +
            "  \n" +
            "  \n" +
            "			IF (@lpControlTypeID <> 18 AND @lpIsAutoIncrement = 1) THEN  /* control type - 18 --> subform */                            \n" +
            "  \n" +
            "				SET @SQl3 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                             \n" +
            "							where type IN(''',IDs,''') and deletedAt IS NULL ');		                            \n" +
            "				PREPARE stmt3 FROM @SQL3;                            \n" +
            "				EXECUTE stmt3;                            \n" +
            "  \n" +
            "			ELSEIF (@lpControlTypeID = 18) THEN /* control type - 18 --> subform then delete all elements containing in it */                            \n" +
            "  \n" +
            "				IF(@lpSystemGenerated = 0) THEN /* 0 --> manual entity then check for any auto increment type element then delete from identity */                            \n" +
            "  \n" +
            "					IF  ((SELECT COUNT(*) FROM dataelement WHERE parentDataElementID = IDs                             \n" +
            "						AND isAutoIncrement = 1 AND deletedAt IS NULL) > 0) THEN                            \n" +
            "  \n" +
            "					     SET @SQl4 = CONCAT('update identity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                             \n" +
            "							where type IN(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,'                             \n" +
            "								AND isAutoIncrement = 1 AND deletedAt IS NULL)                            \n" +
            "							 and deletedAt IS NULL ');		                            \n" +
            "					     PREPARE stmt4 FROM @SQL4;                            \n" +
            "				             EXECUTE stmt4;                            \n" +
            "					END IF;	                            \n" +
            "				END IF;                            \n" +
            "  \n" +
            "  \n" +
            "				SET @SQl5 = CONCAT('update dataelement_keyvalues set isDeleted=',1,', deletedAt=\"',NOW(),'\" where dataElementID IN                            \n" +
            "							(SELECT dataElementID FROM dataelement WHERE parentDataElementID = ',IDs,' AND deletedAt IS NULL)                             \n" +
            "						    AND deletedAt IS NULL');		                            \n" +
            "				PREPARE stmt5 FROM @SQL5;                            \n" +
            "				EXECUTE stmt5;                            \n" +
            "  \n" +
            "				SET @SQl6 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                             \n" +
            "						where parentDataElementID IN(',IDs,') and deletedAt IS NULL ');		                            \n" +
            "				PREPARE stmt6 FROM @SQL6;                            \n" +
            "				EXECUTE stmt6;                            \n" +
            "  \n" +
            "  \n" +
            "			END IF;                            \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM tempDataElement;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempDataElement;                            \n" +
            "		END IF;                            \n" +
            "    DROP TABLE tempDataElement;                              \n" +
            "  \n" +
            "END IF;                            \n" +
            "IF tableName='workorder_preprogcomp' THEN                            \n" +
            "SET @SQL =CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                            \n" +
            "		    (select COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_dataelement\" else \"\" end as msg                            \n" +
            "            FROM workorder_trans_preprogramcomp where deletedAt IS NULL AND                            \n" +
            "		woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                            \n" +
            "			where woPreProgCompID in (',IDs,')) and compCnt > 0)  q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "    SELECT * FROM  tempComponent;                            \n" +
            "    SELECT TotalCount FROM  tempComponent;                            \n" +
            "		IF (SELECT TotalCount FROM  tempComponent)=0 THEN			                            \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete pre program component */                      \n" +
            "			SELECT partNumber,(SELECT woNumber FROM workorder WHERE woID = woppc.woID),                    \n" +
            "				(SELECT opName FROM workorder_operation WHERE woOPID = refStkWOOPID)                    \n" +
            "			    INTO @lvPartNumber,@lvWoNumber,@lvOpName                    \n" +
            "			FROM workorder_preprogcomp woppc                      \n" +
            "			WHERE woPreProgCompID = IDs  AND deletedAt IS NULL;                       \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Preprogram component deleted from work order\");                      \n" +
            "			SET @lvEventDescription = CONCAT(\"Preprogram component \\\"\",@lvPartNumber,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.14,NULL,deletedBy,3);  /* 3 = DELETE */                      \n" +
            "			/* [E] - Add Time line log for delete pre program component */                     \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update workorder_preprogcomp set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woPreProgCompID in(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update workorder_preprogcomp_designator set isDeleted=',1,', deletedAt=\"',NOW(),'\" where woPreProgCompID IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt2 FROM @SQL2;                            \n" +
            "			EXECUTE stmt2;                            \n" +
            "  \n" +
            "            SET @SQl3 = CONCAT('update workorder_trans_preprogramcomp set isDeleted=',1,', deletedAt=\"',NOW(),'\" where                             \n" +
            "								woCompDesignatorID in (select woCompDesignatorID from workorder_preprogcomp_designator                            \n" +
            "								where woPreProgCompID in (',IDs,') and deletedAt is NULL) and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt3 FROM @SQL3;                            \n" +
            "			EXECUTE stmt3;                            \n" +
            "		SELECT                             \n" +
            "			*                            \n" +
            "		FROM                            \n" +
            "			tempComponent;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempComponent;                            \n" +
            "		END IF;                            \n" +
            "    DROP TABLE tempComponent;                              \n" +
            "END IF;                            \n" +
            "IF tableName='component' THEN                            \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alias\" else \"\" end as msg FROM component_alias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                            \n" +
            "		 UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_dataelement\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_alternatepn\" else \"\" end as msg FROM component_alternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_cust_alias_rev_pn\" else \"\" end as msg FROM component_cust_alias_rev_pn WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_goodbadpartmapping\" else \"\" end as msg FROM component_goodbadpartmapping WHERE deletedAt IS NULL AND (goodComponentID IN(',IDs,') OR badComponentID IN(',IDs,')) LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_packagingalias\" else \"\" end as msg FROM component_packagingalias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_processmaterial\" else \"\" end as msg FROM component_processmaterial WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_requiremapping_parts\" else \"\" end as msg FROM component_requiremapping_parts WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_rohsalternatepn\" else \"\" end as msg FROM component_rohsalternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg FROM component_sid_stock WHERE deletedAt IS NULL AND refcompid IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg FROM component_standard_details WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_consolidated_mfgpn_lineitem_alternate\" else \"\" end as msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                            \n" +
            "		UNION ALL                            \n" +
            "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_drivetools\" else \"\" end as msg FROM component_drivetools WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                            \n" +
            "  \n" +
            "	  ) q');                            \n" +
            "	  PREPARE stmt FROM @SQL;                            \n" +
            "	   EXECUTE stmt;                            \n" +
            "	   IF (SELECT TotalCount FROM tempComponent)=0 THEN                            \n" +
            "		SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempComponent;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempComponent;                            \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempComponent;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"workorder_cluster\" THEN                             \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)                            \n" +
            "		      ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN                            \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete cluster */                            \n" +
            "		SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster                            \n" +
            "		WHERE clusterID = IDs AND deletedAt IS NULL;                            \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder                            \n" +
            "		WHERE woID = @lvWoID AND deletedAt IS NULL ;                            \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");                            \n" +
            "		SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                            \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		                            \n" +
            "		/* [E] - Add Time line log for delete cluster */                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderCluster;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempWorkorderCluster;                            \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempWorkorderCluster;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"workorder_operation\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperation as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)                            \n" +
            "			 UNION ALL                            \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND woOPID IN(',IDs,') LIMIT 1)		                             \n" +
            "		      ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperation)=0 THEN                            \n" +
            "			 /* [S] - Add Time line log for delete work order operation */                            \n" +
            "			SELECT DISTINCT woID,GROUP_CONCAT(opName) AS opName INTO @lvWoID,@lvOpName                            \n" +
            "			FROM workorder_operation                             \n" +
            "			WHERE FIND_IN_SET(woOPID,IDs) AND deletedAt IS NULL;                             \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                            \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Operation(s) deleted from work order\");                            \n" +
            "			SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                            \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.09,NULL,deletedBy,3);  /* DE = DELETE */		                            \n" +
            "			/* [E] - Add Time line log for delete work order operation */                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                            \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                            \n" +
            "		SET @SQl3 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                            \n" +
            "		SET @SQl4 = CONCAT('update workorder_operation_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                            \n" +
            "		SET @SQl5 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                            \n" +
            "		SET @SQl6 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');                            \n" +
            "		SET @SQl7 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where deletedAt IS NULL AND woOPID IN(',IDs,')');		                            \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                            \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_operation WHERE woOPID IN (IDs) LIMIT 1;                            \n" +
            "		SET @SQl8 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,')');		                            \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                            \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			PREPARE stmt2 FROM @SQL2;                            \n" +
            "			PREPARE stmt3 FROM @SQL3;                            \n" +
            "			PREPARE stmt4 FROM @SQL4;                            \n" +
            "			PREPARE stmt5 FROM @SQL5;                            \n" +
            "			PREPARE stmt6 FROM @SQL6;                            \n" +
            "			PREPARE stmt7 FROM @SQl7;                            \n" +
            "			PREPARE stmt8 FROM @SQl7;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "			EXECUTE stmt2;                            \n" +
            "			EXECUTE stmt3;                            \n" +
            "			EXECUTE stmt4;                            \n" +
            "			EXECUTE stmt5;                            \n" +
            "			EXECUTE stmt6;                            \n" +
            "			EXECUTE stmt7;                            \n" +
            "			EXECUTE stmt8;                            \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperation;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempWorkorderOperation;                            \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempWorkorderOperation;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"workorder_operation_part\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderPart as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                            \n" +
            "		      ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderPart)=0 THEN                            \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete parts from work order */                            \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                            \n" +
            "		FROM workorder_operation                             \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                             \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                            \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(partNumber) INTO @lvPartNums FROM parts                            \n" +
            "		WHERE FIND_IN_SET(partID,IDs) AND deletedAt IS NULL;                             \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Supply & Material(s) deleted from work order\");                            \n" +
            "		SET @lvEventDescription = CONCAT(\"Supply & Material(s) \\\"\",@lvPartNums,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                            \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.15,CONCAT('workorder/manage/parts/',@lvWoID),deletedBy,3);  /* DE = DELETE */                            \n" +
            "		/* [E] - Add Time line log for delete parts from work order */                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_part set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where partID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderPart;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempWorkorderPart;                            \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempWorkorderPart;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"workorder_operation_equipment\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEquipment as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                            \n" +
            "		      ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEquipment)=0 THEN                            \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Equipment from work order */                            \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                            \n" +
            "		FROM workorder_operation                             \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                             \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;	                            \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(assetName) INTO @lvAssetNames FROM equipment                            \n" +
            "		WHERE FIND_IN_SET(eqpID,IDs) AND deletedAt IS NULL;                             \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Equipment & Tools deleted from work order\");                            \n" +
            "		SET @lvEventDescription = CONCAT(\"Equipment & Tools \\\"\",@lvAssetNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                            \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.13,CONCAT('workorder/manage/equipments/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                            \n" +
            "		/* [E] -  Add Time line log for delete Equipment from work order */                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_equipment set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');                            \n" +
            "		SET @SQl2 = CONCAT('update workorder_operation_equipment_dataelement set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where eqpID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			PREPARE stmt2 FROM @SQL2;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "			EXECUTE stmt2;                            \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEquipment;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempWorkorderEquipment;                            \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempWorkorderEquipment;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"workorder_operation_employee\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderEmployee as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,')  AND checkinEmployeeID IN(',IDs,') and checkinTime IS NOT NULL and checkoutTime IS NULL LIMIT 1)                            \n" +
            "		      ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderEmployee)=0 THEN                            \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete Employees from work order */                            \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                            \n" +
            "		FROM workorder_operation                             \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                             \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                            \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(firstName,\" \",lastName) INTO @lvEmpNames FROM employees                            \n" +
            "		WHERE FIND_IN_SET(id,IDs) AND deletedAt IS NULL;                             \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Employee(s) deleted from work order\");                            \n" +
            "		SET @lvEventDescription = CONCAT(\"Employee(s) \\\"\",@lvEmpNames,\"\\\" deleted from operation(s) \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                            \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.12,CONCAT('workorder/manage/employees/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                            \n" +
            "		/* [E] -  Add Time line log for delete Employee from work order */                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_employee set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where employeeID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderEmployee;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempWorkorderEmployee;                            \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempWorkorderEmployee;                            \n" +
            "  \n" +
            "END IF;                            \n" +
            "IF tableName=\"workorder_operation_cluster\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderOperationCluster as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans\" else \"\" end as msg FROM workorder_trans WHERE deletedAt IS NULL AND woOPID IN(',refrenceIDs,') LIMIT 1)                            \n" +
            "		      ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempWorkorderOperationCluster)=0 THEN                            \n" +
            "  \n" +
            "		/* [S] - Add Time line log for delete operations from cluster */                            \n" +
            "		SELECT  DISTINCT woID ,GROUP_CONCAT(opName) AS opName INTO @lvWoID, @lvOpName                            \n" +
            "		FROM workorder_operation                             \n" +
            "		WHERE FIND_IN_SET(woOPID,refrenceIDs) AND deletedAt IS NULL;                             \n" +
            "  \n" +
            "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID;                            \n" +
            "  \n" +
            "		SELECT GROUP_CONCAT(clusterName) INTO @lvClusterNames FROM workorder_cluster                            \n" +
            "		WHERE FIND_IN_SET(clusterID,IDs) AND deletedAt IS NULL;                             \n" +
            "  \n" +
            "		SET @lvEventTitle = CONCAT(\"Operation(s) removed from work order cluster\");                            \n" +
            "		SET @lvEventDescription = CONCAT(\"Operation(s) \\\"\",@lvOpName,\"\\\" removed from cluster \\\"\",@lvClusterNames,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                            \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,NULL,4.19,CONCAT('workorder/manage/operations/',@lvWoID),deletedBy,3);  /* DE = DELETE */		                            \n" +
            "		/* [E] -  Add Time line log for delete operations from cluster */		                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update workorder_operation_cluster set updatedBy=',deletedBy,', updatedAt=\"',NOW(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where clusterID IN(',IDs,') and woOPID IN(',refrenceIDs,') and deletedAt IS NULL');		                            \n" +
            "  \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                            \n" +
            "		SELECT DISTINCT woID INTO @pwoID FROM workorder_cluster WHERE clusterID IN (IDs) LIMIT 1;                            \n" +
            "		SET @SQl2 = CONCAT('update workorder set isOperationsVerified=',0,',updatedby=',deletedBy,', updatedat=\"',NOW(),'\" where woID IN(',@pwoID,') and deletedAt is NULL');		                            \n" +
            "		-- Added for update verify workorder status again after changes in workorder operation                            \n" +
            "  \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			PREPARE stmt2 FROM @SQL2;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "			EXECUTE stmt2;                            \n" +
            "  \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempWorkorderOperationCluster;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempWorkorderOperationCluster;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"entity\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement\" else \"\" end as msg FROM dataelement WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                            \n" +
            "		     UNION ALL                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                            \n" +
            "		     UNION ALL                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                            \n" +
            "		    UNION ALL                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                            \n" +
            "		      ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempEntity)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempEntity;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempEntity;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempEntity;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"salesordermst\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND refSalesOrderID IN(',IDs,') LIMIT 1)                            \n" +
            "		      ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempSalesOrderMst)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete sales order mst */ 	                    \n" +
            "			SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber                    \n" +
            "			FROM salesordermst                    \n" +
            "			WHERE FIND_IN_SET(id,IDs);                    \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");                      \n" +
            "			SET @lvEventDescription = CONCAT(\"Sales order(s) \\\"\",@lvSalesOrderNumber,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */                      \n" +
            "			/* [E] - Add Time line log for delete sales order mst */	                    \n" +
            "  \n" +
            "			SELECT * FROM tempSalesOrderMst;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempSalesOrderMst;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempSalesOrderMst;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"mfgcodemst\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"mfgcodealias\" else \"\" end as msg FROM mfgcodealias WHERE deletedAt IS NULL AND mfgcodeId IN(',IDs,') LIMIT 1)                            \n" +
            "             UNION ALL                            \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_consolidated_mfgpn_lineitem_alternate\" else \"\" end as msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)                            \n" +
            "			 UNION ALL                            \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)                            \n" +
            "			 UNION ALL                            \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mfgcodeID IN(',IDs,') LIMIT 1)                            \n" +
            "			UNION ALL                            \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyBy IN(',IDs,') OR buyTo IN(',IDs,')) LIMIT 1)                            \n" +
            "			UNION ALL                            \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND mfgcodeid IN(',IDs,') LIMIT 1)                            \n" +
            "  \n" +
            "		      ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempMFGCodeMst)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempMFGCodeMst;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempMFGCodeMst;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempMFGCodeMst;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"dataelement_transactionvalues_manual\" THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update dataelement_transactionvalues_manual set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where dataElementTransManualID IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\"                             \n" +
            "				where subFormTransID IN(SELECT refSubFormTransID FROM dataelement_transactionvalues_manual WHERE dataElementTransManualID IN (',IDs,') and deletedAt is NULL)                            \n" +
            "				and deletedAt IS NULL');		                            \n" +
            "			PREPARE stmt2 FROM @SQL2;                            \n" +
            "			EXECUTE stmt2;                            \n" +
            "  \n" +
            "  \n" +
            "END IF;                            \n" +
            "IF tableName=\"shippedassembly\" THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                    \n" +
            "			/* [S] - Add Time line log for delete shipped assembly */                     \n" +
            "			SELECT GROUP_CONCAT(shippedqty) , workorderID  INTO @lvShippedqty,@lvWoID                    \n" +
            "			FROM shippedassembly                    \n" +
            "			WHERE FIND_IN_SET(id,IDs);                    \n" +
            "  \n" +
            "			SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID ;                    \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Shipped assembly deleted\");                      \n" +
            "			SET @lvEventDescription = CONCAT(\"Shipped assembly for workorder \\\"\",@lvWoNumber,\"\\\" & quantity \\\"\",@lvShippedqty ,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,9,NULL,deletedBy,3);  /* 3 = DELETE */                      \n" +
            "			/* [E] - Add Time line log for delete shipped assembly */ 		                    \n" +
            "  \n" +
            "END IF;                            \n" +
            "IF tableName=\"assemblymst\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassemblymst as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assembly_revisionmst\" else \"\" end as msg FROM assembly_revisionmst WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                            \n" +
            "		     UNION ALL                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                            \n" +
            "		     UNION ALL                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                            \n" +
            "		     UNION ALL                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyID IN(',IDs,') LIMIT 1)                            \n" +
            "		    UNION ALL                            \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)                            \n" +
            "		      ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempassemblymst)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assemblymst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempassemblymst;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempassemblymst;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempassemblymst;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"assembly_revisionmst\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempassembly_revisionmst as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND (fromRevisionID IN(',IDs,') OR toRevisionID IN(',IDs,'))  LIMIT 1)                            \n" +
            "		     UNION ALL                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                            \n" +
            "		     UNION ALL                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                            \n" +
            "		     UNION ALL                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND assemblyRevisionID IN(',IDs,') LIMIT 1)                            \n" +
            "		    UNION ALL                            \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND assyRevID IN(',IDs,') LIMIT 1)                            \n" +
            "		      ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempassembly_revisionmst)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update assembly_revisionmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempassembly_revisionmst;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempassembly_revisionmst;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempassembly_revisionmst;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"workorder_trans_serialno\" THEN                            \n" +
            "  \n" +
            "	SELECT  woID,opID,serialNo,prodstatus ,woTransID INTO vWoID1,vOpID1,vSerialNo1,vProdStatus1 ,vWoTransID1                             \n" +
            "	FROM workorder_trans_serialno WHERE woTransSerialID = IDs AND deletedAt IS NULL;                            \n" +
            "  \n" +
            "  \n" +
            "	SELECT (SELECT CASE WHEN vProdStatus1 = 1 THEN SUM(`passQty`)                            \n" +
            "		   WHEN vProdStatus1 = 2 THEN SUM(`reprocessQty`) WHEN vProdStatus1 = 3 THEN SUM(`observedQty`)                             \n" +
            "		   WHEN vProdStatus1 = 4 THEN SUM(`scrapQty`) WHEN vProdStatus1 = 5 THEN SUM(`reworkQty`) ELSE 0 END) INTO vQty1                             \n" +
            "        FROM workorder_trans_production WHERE woTransID = vWoTransID1 AND deletedAt IS NULL;                            \n" +
            "  \n" +
            "	/* condition to check total serials of type greater than actual production qty */                            \n" +
            "	IF ((SELECT COUNT(*) FROM workorder_trans_serialno WHERE woID = vWoID1 AND opID = vOpID1                            \n" +
            "				AND woTransID = vWoTransID1 AND prodstatus = vProdStatus1 AND deletedAt IS NULL)                             \n" +
            "		> IFNULL(vQty1,0)) THEN                            \n" +
            "  \n" +
            "		 /* check workorder_trans_production table contain any entry for qty of type (case: for qty entry directly to production) */                            \n" +
            "		IF(vQty1 IS NULL OR vQty1 = 0) THEN                             \n" +
            "  \n" +
            "			/* condition to check curr opis and status match with given delete serial */                            \n" +
            "			IF ((SELECT COUNT(*) FROM workorder_serialmst WHERE woID = vWoID1 AND curropID = vOpID1 AND SerialNo = vSerialNo1                            \n" +
            "					 AND currStatus = vProdStatus1 AND deletedAt IS NULL) > 0) THEN                            \n" +
            "  \n" +
            "				UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                            \n" +
            "				WHERE woTransSerialID = IDs;	                            \n" +
            "  \n" +
            "				SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                             \n" +
            "				WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                            \n" +
            "				ORDER BY woTransSerialID DESC LIMIT 1;                            \n" +
            "  \n" +
            "				UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                            \n" +
            "				WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;	                      \n" +
            "				/* [S] - Add Time line log for delete production serial from work order operation */ 	                    \n" +
            "				SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");                      \n" +
            "				SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                      \n" +
            "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                      \n" +
            "				/* [E] - Add Time line log for delete production serial from work order operation */ 				                    \n" +
            "  \n" +
            "			ELSE                             \n" +
            "				SELECT 'not allowed';                            \n" +
            "			END IF;                            \n" +
            "  \n" +
            "  \n" +
            "		ELSE                             \n" +
            "  \n" +
            "			UPDATE workorder_trans_serialno SET isDeleted=1,deletedBy=deletedBy, deletedAt=NOW()                            \n" +
            "			WHERE woTransSerialID = IDs;	                            \n" +
            "  \n" +
            "			SELECT opID,prodstatus INTO vOpID2 , vProdstatus2 FROM workorder_trans_serialno                             \n" +
            "			WHERE woID = vWoID1 AND serialNo = vSerialNo1 AND woTransSerialID <> IDs AND deletedAt IS NULL                            \n" +
            "			ORDER BY woTransSerialID DESC LIMIT 1;                            \n" +
            "  \n" +
            "			UPDATE workorder_serialmst SET curropID = vOpID2 , currStatus = vProdstatus2                            \n" +
            "			WHERE woID = vWoID1 AND SerialNo = vSerialNo1 AND deletedAt IS NULL;                    \n" +
            "			/* [S] - Add Time line log for delete production serial from work order operation */ 	                    \n" +
            "			SET @lvEventTitle = CONCAT(\"Production serial deleted from work order operation\");                      \n" +
            "			SET @lvEventDescription = CONCAT(\"Production serial \\\"\",vSerialNo1,\"\\\" deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.06,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                      \n" +
            "			/* [E] - Add Time line log for delete production serial from work order operation */                        \n" +
            "  \n" +
            "		END IF;	                            \n" +
            "  \n" +
            "  \n" +
            "	ELSE                             \n" +
            "		SELECT 'not allowed';		                            \n" +
            "	END IF;	                            \n" +
            "  \n" +
            "  \n" +
            "END IF;                            \n" +
            "IF tableName=\"br_label_template\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempbr_label_template as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template_delimiter\" else \"\" end as msg FROM br_label_template_delimiter WHERE deletedAt IS NULL AND refbrID IN(',IDs,') LIMIT 1)                            \n" +
            "		      ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempbr_label_template)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update br_label_template set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempbr_label_template;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempbr_label_template;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempbr_label_template;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"measurement_types\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMeasurement_types as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"measurement_types\" else \"\" end as msg FROM measurement_types WHERE deletedAt IS NULL AND refTypeID IN(',IDs,') LIMIT 1)                            \n" +
            "		     UNION ALL                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg FROM uoms WHERE deletedAt IS NULL AND measurementTypeID IN(',IDs,') LIMIT 1)) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempMeasurement_types)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update measurement_types set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempMeasurement_types;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempMeasurement_types;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempMeasurement_types;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"uoms\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempUOMs as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"uoms\" else \"\" end as msg                             \n" +
            "            FROM uoms WHERE deletedAt IS NULL AND baseUnitID IN (',IDs,') LIMIT 1)                            \n" +
            "            UNION ALL                            \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"unit_detail_formula\" else \"\" end as msg                             \n" +
            "            FROM unit_detail_formula WHERE deletedAt IS NULL AND (unitID IN (',IDs,')  or toUnitID IN (',IDs,')) LIMIT 1)                    \n" +
            "              UNION ALL                          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND uom IN(',IDs,') LIMIT 1)) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempUOMs)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update uoms set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempUOMs;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempUOMs;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempUOMs;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"jobtypes\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempJobTypess as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                             \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND jobtypeID IN (',IDs,') LIMIT 1) ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempJobTypess)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update jobtype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempJobTypess;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempJobTypess;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempJobTypess;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"ordertype\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempOrderTypes as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                             \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND ordertypeID IN (',IDs,') LIMIT 1) ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempOrderTypes)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update ordertype set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempOrderTypes;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempOrderTypes;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempOrderTypes;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"reasonmst\" THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update reasonmst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "END IF;                            \n" +
            "IF tableName='component_sid_stock' THEN	                            \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentsidstock as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_dataelement_values\" else \"\" end as msg FROM component_sid_stock_dataelement_values WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)                            \n" +
            "			UNION ALL                            \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock_labelimage\" else \"\" end as msg FROM component_sid_stock_labelimage WHERE deletedAt IS NULL AND refsidid IN(',IDs,') LIMIT 1)		                                \n" +
            "		    ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempcomponentsidstock)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_sid_stock set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			/* [S] - Add Time line log for delete component sid stock (receiving material) */ 	                    \n" +
            "			SELECT GROUP_CONCAT(uid) INTO @lvUID  FROM component_sid_stock                    \n" +
            "			WHERE FIND_IN_SET(id,IDs);	                    \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Receiving material(s) deleted\");                      \n" +
            "			SET @lvEventDescription = CONCAT(\"Receiving material(s) of UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7,NULL,deletedBy,3);  /* 3 = DELETE */                      \n" +
            "			/* [E] - Add Time line log for delete component sid stock (receiving material) */ 	                    \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentsidstock;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempcomponentsidstock;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempcomponentsidstock;                             \n" +
            "  \n" +
            "END IF;                            \n" +
            "IF tableName='component_sid_stock_dataelement_values' THEN	                            \n" +
            "	SET @SQl1 = CONCAT('update component_sid_stock_dataelement_values set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                        \n" +
            "			/* [S] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	                    \n" +
            "			SELECT GROUP_CONCAT(dataelementid), GROUP_CONCAT(refsidid) INTO @lvCSDlIDs,@lvRefsidid                       \n" +
            "			FROM component_sid_stock_dataelement_values                    \n" +
            "			WHERE FIND_IN_SET(id,IDs);                    \n" +
            "  \n" +
            "			SELECT uid INTO @lvUID FROM component_sid_stock WHERE id = @lvRefsidid   ;                    \n" +
            "  \n" +
            "			SELECT GROUP_CONCAT(dataElementName) INTO @lvDlNames                    \n" +
            "			FROM dataelement                     \n" +
            "			WHERE FIND_IN_SET(dataElementID,@lvCSDlIDs);	                    \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Data field(s) of receiving material deleted\");                      \n" +
            "			SET @lvEventDescription = CONCAT(\"Data field(s) \\\"\",@lvDlNames,\"\\\" of receiving material with UID \\\"\",@lvUID,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,7.01,NULL,deletedBy,3);  /* 3 = DELETE */                      \n" +
            "			/* [E] - Add Time line log for delete component sid stock data element (receiving material data element) */ 	                    \n" +
            "END IF;                            \n" +
            "IF tableName='chart_templatemst' THEN	                            \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcharttemplatemst as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_template_operations\" else \"\" end as msg FROM chart_template_operations WHERE deletedAt IS NULL AND chartTemplateID IN(',IDs,') LIMIT 1)                            \n" +
            "		    ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempcharttemplatemst)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_templatemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartTemplateID IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempcharttemplatemst;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempcharttemplatemst;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempcharttemplatemst;                             \n" +
            "  \n" +
            "END IF;                            \n" +
            "IF tableName=\"shipping_request\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempShippingRequest as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_requestdet\" else \"\" end as msg                             \n" +
            "            FROM shipping_requestdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)                            \n" +
            "            UNION ALL                            \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_request_empdet\" else \"\" end as msg                             \n" +
            "            FROM shipping_request_empdet WHERE deletedAt IS NULL AND shippingRequestID IN (',IDs,') LIMIT 1)) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempShippingRequest)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update shipping_request set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                      \n" +
            "			/* [S] - Add Time line log for delete shipment request */                     \n" +
            "			SELECT GROUP_CONCAT(note) INTO @lvNotes FROM Shipping_Request                    \n" +
            "			WHERE FIND_IN_SET(id,IDs);	                    \n" +
            "  \n" +
            "			SET @lvEventTitle = CONCAT(\"Shipment request deleted\");                      \n" +
            "			SET @lvEventDescription = CONCAT(\"Shipment request of \\\"\",@lvNotes,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                      \n" +
            "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,8,NULL,deletedBy,3);  /* 3 = DELETE */                      \n" +
            "			/* [E] - Add Time line log for delete shipment request */                     \n" +
            "  \n" +
            "			SELECT * FROM tempShippingRequest;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempShippingRequest;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempShippingRequest;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"chart_rawdata_category\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempChartRawdataCategory as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_templatemst\" else \"\" end as msg                             \n" +
            "            FROM chart_templatemst WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)                            \n" +
            "            UNION ALL                            \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"chart_rawdata_category_fields\" else \"\" end as msg                             \n" +
            "            FROM chart_rawdata_category_fields WHERE deletedAt IS NULL AND chartRawDataCatID IN (',IDs,') LIMIT 1)) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempChartRawdataCategory)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update chart_rawdata_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where chartRawDataCatID IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempChartRawdataCategory;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempChartRawdataCategory;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempChartRawdataCategory;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"component_standard\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandard as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_class\" else \"\" end as msg                             \n" +
            "            FROM component_standard_class WHERE deletedAt IS NULL AND standardID IN (',IDs,') LIMIT 1)) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandard)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandard;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempcomponentStandard;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempcomponentStandard;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"component_standard_class\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcomponentStandardClass as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_details\" else \"\" end as msg                             \n" +
            "            FROM component_standard_details WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');                            \n" +
            "           /*  UNION ALL                            \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_standard_role\" else \"\" end as msg                             \n" +
            "            FROM component_standard_role WHERE deletedAt IS NULL AND standardClassID IN (',IDs,') LIMIT 1)) q');*/                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempcomponentStandardClass)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update component_standard_class set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "		SET @SQl2 = CONCAT('update component_standard_role set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where standardClassID IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt2 FROM @SQL2;                            \n" +
            "			EXECUTE stmt2;                            \n" +
            "  \n" +
            "			SELECT * FROM tempcomponentStandardClass;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempcomponentStandardClass;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempcomponentStandardClass;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"rfq_lineitems\" THEN                            \n" +
            "		SELECT 0 TotalCount, '' Message;                            \n" +
            "		SET @SQl1 = CONCAT('update rfq_lineitems set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "		PREPARE stmt1 FROM @SQL1;                            \n" +
            "		EXECUTE stmt1;                                        \n" +
            "END IF;                            \n" +
            "IF tableName=\"requirement\" THEN                            \n" +
            "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirements as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_requirement\" else \"\" end as msg                             \n" +
            "            FROM rfq_assemblies_requirement WHERE deletedAt IS NULL AND requirementID IN (',IDs,') LIMIT 1) ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM temprequirements)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update requirement set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM temprequirements;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM temprequirements;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE temprequirements;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"workorder_trans_packagingdetail\" THEN                       \n" +
            "		/* [S] - Add Time line log for delete work order transaction packing details */                      \n" +
            "		SELECT  (SELECT woNumber FROM workorder WHERE woID = wtpd.woID),                    \n" +
            "			(SELECT opName FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL),                    \n" +
            "			(SELECT woOPID FROM workorder_operation WHERE woID = wtpd.woID AND opID = wtpd.opID AND deletedAt IS NULL)                    \n" +
            "			INTO @lvWoNumber , @lvOpName ,@lvWoOPID                     \n" +
            "		FROM workorder_trans_packagingdetail wtpd                     \n" +
            "		WHERE wtpd.woTransPackagingDetailID = IDs AND wtpd.deletedAt IS NULL  /* here ids multiple but need one record only so */;                    \n" +
            "		SET @lvEventTitle = CONCAT(\"Box serial details deleted from work order operation\");                      \n" +
            "		SET @lvEventDescription = CONCAT(\"Box serial details deleted from operation \\\"\",@lvOpName,\"\\\" of work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                      \n" +
            "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,5.17,CONCAT('task/tasklist/travel/',@lvWoOPID,'/',(SELECT employeeID FROM users WHERE id = deletedBy)),deletedBy,3);  /* 3 = DELETE */                      \n" +
            "		/* [E] - Add Time line log for delete work order transaction packing details */                     \n" +
            "  \n" +
            "		SELECT 0 TotalCount, '' Message;                            \n" +
            "		SET @SQl1 = CONCAT('update workorder_trans_packagingdetail set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where woTransPackagingDetailID IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "		PREPARE stmt1 FROM @SQL1;                            \n" +
            "		EXECUTE stmt1;                                        \n" +
            "END IF;                            \n" +
            "IF tableName=\"customer_addresses\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)                            \n" +
            "			UNION ALL                            \n" +
            "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg                             \n" +
            "            FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1) ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempcustomer_addresses;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempcustomer_addresses;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempcustomer_addresses;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"rfqforms\" THEN                            \n" +
            "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqformss as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (select  COUNT(id) cnt ,CASE WHEN COUNT(id) > 0 then \"rfq_lineitems\" else \"\" end as msg                             \n" +
            "            from rfq_lineitems rl where rl.rfqAssyID in (select ra.id from rfq_assemblies ra where ra.rfqrefID IN (',IDs,') and deletedAt IS NULL) ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM temprfqformss)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update rfq_assy_bom rb set rb.deletedBy = ',deletedBy,', rb.isDeleted=',1,',rb.deletedAt= \"',NOW(),'\"  where rb.id in                             \n" +
            "							(select rab.id from(select b.id from rfq_assy_bom b where b.reqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL)as rab)');                            \n" +
            "  \n" +
            "        SET @SQl2 = CONCAT('update rfq_assemblies_requirement rr set rr.deletedBy = ',deletedBy,', rr.isDeleted=',1,',rr.deletedAt= \"',NOW(),'\" where rr.id in                             \n" +
            "							(select rar.id from (select b.id from rfq_assemblies_requirement b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rar)');		                            \n" +
            "  \n" +
            "        SET @SQl3 = CONCAT('update rfq_assy_quantity_turn_time rt set rt.deletedBy = ',deletedBy,', rt.isDeleted=',1,',rt.deletedAt= \"',NOW(),'\" where rt.rfqAssyQtyID in                             \n" +
            "							(select rat.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select id from rfq_assemblies  a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as rat)');		                            \n" +
            "  \n" +
            "        SET @SQl4 = CONCAT('update rfq_assy_quantity rq set rq.deletedBy = ',deletedBy,', rq.isDeleted=',1,',rq.deletedAt=\"',NOW(),'\" where rq.id in                             \n" +
            "							(select raq.id from (select * from rfq_assy_quantity b where b.rfqAssyID in (select a.id from rfq_assemblies  a where a.rfqrefID in (select k.id from rfqforms k where k.id IN (',IDs,')  and k.deletedAt IS NULL)and a.deletedAt IS NULL)and b.deletedAt IS NULL) as raq)');		                            \n" +
            "  \n" +
            "        SET @SQl5 = CONCAT('update rfq_assemblies ra set ra.deletedBy = ',deletedBy,', ra.isDeleted= ',1,',ra.deletedAt=\"',NOW(),'\" where ra.id in                             \n" +
            "							(select raa.id from (select id from rfq_assemblies a where a.rfqrefID in (select id from rfqforms where id IN (',IDs,')  and deletedAt IS NULL)and a.deletedAt IS NULL)as raa)');                            \n" +
            "  \n" +
            "        SET @SQl6 = CONCAT('update rfqforms set isDeleted=',deletedBy,',deletedBy=1, deletedAt=\"',NOW(),'\" where id IN (',IDs,')  and deletedAt IS NULL');		                            \n" +
            "  \n" +
            "            PREPARE stmt1 FROM @SQL1;                            \n" +
            "			PREPARE stmt2 FROM @SQL2;                            \n" +
            "            PREPARE stmt3 FROM @SQL3;                            \n" +
            "			PREPARE stmt4 FROM @SQL4;                            \n" +
            "            PREPARE stmt5 FROM @SQL5;                            \n" +
            "			PREPARE stmt6 FROM @SQL6;                            \n" +
            "  \n" +
            "			EXECUTE stmt1;                            \n" +
            "			EXECUTE stmt2;                            \n" +
            "            EXECUTE stmt3;                            \n" +
            "			EXECUTE stmt4;                            \n" +
            "            EXECUTE stmt5;                            \n" +
            "			EXECUTE stmt6;                            \n" +
            "  \n" +
            "  \n" +
            "  \n" +
            "			SELECT * FROM temprfqformss;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM temprfqformss;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE temprfqformss;                             \n" +
            "END IF;                            \n" +
            "IF tableName=\"rfq_mountingtypemst\" THEN                            \n" +
            "	 SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqpartcategory as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_parttypemst\" else \"\" end as msg                             \n" +
            "            FROM rfq_parttypemst WHERE deletedAt IS NULL AND partClassID IN (',IDs,') LIMIT 1)                    \n" +
            "             UNION ALL                          \n" +
            "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mountingTypeID IN(',IDs,') LIMIT 1)) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM temprfqpartcategory)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update   rfq_mountingtypemst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM temprfqpartcategory;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM temprfqpartcategory;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE temprfqpartcategory;                             \n" +
            "  \n" +
            "END IF;                            \n" +
            "IF tableName=\"who_bought_who\" THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update who_bought_who set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "END IF;                            \n" +
            "IF tableName=\"rfq_parttypemst\" THEN                            \n" +
            "			SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprfqparttypemst as                            \n" +
            "				 SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "			    FROM                             \n" +
            "			    (                       \n" +
            "	            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM                     \n" +
            "	            component WHERE deletedAt IS NULL AND partTypeID IN(',IDs,') LIMIT 1)) q');                            \n" +
            "	  	        PREPARE stmt FROM @SQL;                            \n" +
            "		        EXECUTE stmt;                      \n" +
            "	          IF (SELECT TotalCount FROM temprfqparttypemst)=0 THEN                        \n" +
            "  \n" +
            "				SET @SQl1 = CONCAT('update rfq_parttypemst set isDeleted=',1,',deletedBy=',deletedBy,',                     \n" +
            "	            deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "	  				PREPARE stmt1 FROM @SQL1;                            \n" +
            "						EXECUTE stmt1;                      \n" +
            "	            	SELECT * FROM temprfqparttypemst;                            \n" +
            "			ELSE                            \n" +
            "				SELECT * FROM temprfqparttypemst;                            \n" +
            "  \n" +
            "			END IF;                            \n" +
            "            DROP TABLE temprfqparttypemst;                                       \n" +
            "  \n" +
            "END IF;                            \n" +
            "IF tableName=\"rfq_lineitems_errorcode\" THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_errorcode set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "END IF;                            \n" +
            "IF tableName=\"rfq_lineitems_keywords\" THEN                            \n" +
            "  \n" +
            "			SET @SQl1 = CONCAT('update rfq_lineitems_keywords set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "END IF;                      \n" +
            "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                            \n" +
            "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempQuotecharges_dynamic_fields_mst as                            \n" +
            "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                            \n" +
            "		    FROM                             \n" +
            "		    (                            \n" +
            "		    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assy_quotations_additionalcost\" else \"\" end as msg                             \n" +
            "            FROM rfq_assy_quotations_additionalcost WHERE deletedAt IS NULL AND quoteChargeDynamicFieldID IN (',IDs,') LIMIT 1) ) q');                            \n" +
            "  \n" +
            "	PREPARE stmt FROM @SQL;                            \n" +
            "	EXECUTE stmt;                            \n" +
            "		IF (SELECT TotalCount FROM tempQuotecharges_dynamic_fields_mst)=0 THEN                            \n" +
            "  \n" +
            "		SET @SQl1 = CONCAT('update quotecharges_dynamic_fields_mst set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "			PREPARE stmt1 FROM @SQL1;                            \n" +
            "			EXECUTE stmt1;                            \n" +
            "  \n" +
            "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                            \n" +
            "		ELSE                            \n" +
            "			SELECT * FROM tempQuotecharges_dynamic_fields_mst;                            \n" +
            "  \n" +
            "		END IF;                            \n" +
            "		DROP TABLE tempQuotecharges_dynamic_fields_mst;                             \n" +
            "END IF;        \n" +
            "IF tableName=\"cost_category\" THEN                            \n" +
            "		SET @SQl1 = CONCAT('update cost_category set isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',NOW(),'\" where id IN(',IDs,') and deletedAt is NULL');		                            \n" +
            "		PREPARE stmt1 FROM @SQL1;                            \n" +
            "		EXECUTE stmt1;               \n" +
            "END IF;                                    \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 01-09-2018 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
            "VALUES (157,'1.00','V1','check delete sp - shirish '," + userid + ");"
            );
            break;
        case 157:
            allDbChangesArray.push(
             /* **************************** New Script -> 01-09-2018  *********************************** */
             "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity ADD COLUMN pricingSuppliers VARCHAR(500);  \n" +
             /* **************************** New Script -> 01-09-2018  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetRFQCustomRulesLineItems` ;  \n" +
               "CREATE PROCEDURE `Sproc_GetRFQCustomRulesLineItems`(                  \n" +
               "	IN ppageIndex INT(11),                  \n" +
               "	IN precordPerPage INT(11),                  \n" +
               "	IN pOrderBy VARCHAR(255),          \n" +
               "	IN pWhereColumnName VARCHAR(255),            \n" +
               "	IN pWhereFilterValue VARCHAR(255),           \n" +
               "	IN pCustomWhere INT(11),            \n" +
               "	IN pWhereClause VARCHAR(21844),                  \n" +
               "	IN rfqAssyID INT(11),                  \n" +
               "	IN puserID INT (11)                  \n" +
               "    )  \n" +
               "BEGIN                  \n" +
               "	    DECLARE pOffset INT(11);                  \n" +
               "	    DECLARE rowNumWhere VARCHAR(255) ;                  \n" +
               "	    SET @SQLString = NULL;            \n" +
               "	    SET @PERString = NULL;                  \n" +
               "	    SET SESSION group_concat_max_len = 150000;                      \n" +
               "	    IF (pOrderBy IS NOT NULL) THEN                  \n" +
               "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
               "		ELSE                  \n" +
               "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;                   \n" +
               "		END IF;	                  \n" +
               "  \n" +
               "  \n" +
               "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                  \n" +
               "			SET pWhereClause = '1=1' ;                  \n" +
               "		END IF;	                  \n" +
               "  \n" +
               "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
               "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
               "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
               "		ELSE	                  \n" +
               "			SET rowNumWhere = '';                  \n" +
               "		END IF;	                  \n" +
               "		SELECT        \n" +
               "			GROUP_CONCAT(DISTINCT                  \n" +
               "				CONCAT(                  \n" +
               "					'100*Max((IF(ra.requestQty = ''',                  \n" +
               "						ra.requestQty,                  \n" +
               "					''', rq.finalPrice, null)))/Max((IF(ra.requestQty = ''',                  \n" +
               "						ra.requestQty,                  \n" +
               "					''', fun_getFinalPriceSumByQtyID (ra.id,rl.rfqAssyID), null))) AS ''',                  \n" +
               "						ra.requestQty,''''                  \n" +
               "					))      \n" +
               "					INTO @PERString      \n" +
               "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                  \n" +
               "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                  \n" +
               "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                  \n" +
               "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                  \n" +
               "  \n" +
               "			IF(@PERString IS NOT NULL) THEN           \n" +
               "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                  \n" +
               "					SELECT                   \n" +
               "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                    \n" +
               "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,              \n" +
               "					(SELECT               \n" +
               "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                        \n" +
               "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN               \n" +
               "                                     component c ON rla.mfgpnid=c.id               \n" +
               "                                     LEFT JOIN mfgcodemst mg ON                \n" +
               "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                  \n" +
               "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))AS mfgPn    \n" +
               "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN               \n" +
               "                                component c ON rla.mfgpnid=c.id                         \n" +
               "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                   \n" +
               "					@PERString, ' FROM rfq_consolidated_mfgpn_lineitem rl                  \n" +
               "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                  \n" +
               "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                  \n" +
               "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');               \n" +
               "  \n" +
               "			ELSE                  \n" +
               "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                  \n" +
               "					SELECT  id,isPurchase, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,               \n" +
               "					 GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                        \n" +
               "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN               \n" +
               "                                     component c ON rla.mfgpnid=c.id               \n" +
               "                                     LEFT JOIN mfgcodemst mg ON                \n" +
               "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                    \n" +
               "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"))AS mfgPn                   \n" +
               "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                   \n" +
               "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                  \n" +
               "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                  \n" +
               "			END IF;                        \n" +
               "			PREPARE stmt FROM @SQLStatement;                  \n" +
               "			EXECUTE stmt;	                  \n" +
               "  \n" +
               "  \n" +
               "			SET @SQLStatement_Temp = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp2 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\");                  \n" +
               "			PREPARE query_Temp FROM @SQLStatement_Temp;                  \n" +
               "			EXECUTE query_Temp;       \n" +
               "			DEALLOCATE PREPARE query_Temp;      \n" +
               "  \n" +
               "			SET @SQLStatement_Temp1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp3 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\");                  \n" +
               "			PREPARE query_Temp1 FROM @SQLStatement_Temp1;                  \n" +
               "			EXECUTE query_Temp1;         \n" +
               "			DEALLOCATE PREPARE query_Temp1;                  \n" +
               "			IF pCustomWhere IS NOT NULL THEN      \n" +
               "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*) FROM consolidate_temp3 d where (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp2 c WHERE c.row_id<=d.row_id) <= \", pWhereFilterValue);                  \n" +
               "				SET @SQLStatement2 = CONCAT(\"SELECT d.* FROM consolidate_temp3 d where (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp2 c WHERE c.row_id<=d.row_id) <= \", pWhereFilterValue, \" ORDER BY \", pWhereColumnName, \" DESC \" , rowNumWhere);      \n" +
               "			ELSE         \n" +
               "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                  \n" +
               "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
               "			END IF;      \n" +
               "  \n" +
               "			PREPARE query1 FROM @SQLStatement1;                  \n" +
               "			EXECUTE query1;                  \n" +
               "			DEALLOCATE PREPARE query1;                  \n" +
               "  \n" +
               "			PREPARE query2 FROM @SQLStatement2;                  \n" +
               "			EXECUTE query2;                  \n" +
               "			DEALLOCATE PREPARE query2;                  \n" +
               "  \n" +
               "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                  \n" +
               "			PREPARE query3 FROM @SQLStatement3;                  \n" +
               "			EXECUTE query3;                  \n" +
               "			DEALLOCATE PREPARE query3;                  \n" +
               "  \n" +
               "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.turnType,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                  \n" +
               "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                  \n" +
               "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                  \n" +
               "			PREPARE query4 FROM @SQLStatement4;                  \n" +
               "			EXECUTE query4;                  \n" +
               "			DEALLOCATE PREPARE query4;              \n" +
               "  \n" +
               "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty, rq.finalPrice, unitPrice,supplier,rq.min,rq.mult, selectedMpn, selectionMode,qtyID,             \n" +
               "					currentStock,            \n" +
               "					leadTime,             \n" +
               "					supplierStock,            \n" +
               "					grossStock,                \n" +
               "					selectedPIDCode,  \n" +
               "					pricingSuppliers,ct.qpa, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                       \n" +
               "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID               \n" +
               "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id               \n" +
               "				WHERE ct.rfqAssyID=\",rfqAssyID);                      \n" +
               "			PREPARE query5 FROM @SQLStatement5;                          \n" +
               "			EXECUTE query5;                          \n" +
               "			DEALLOCATE PREPARE query5;                 \n" +
               "  \n" +
               "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,           \n" +
               "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,           \n" +
               "						(SUM(rq.unitPrice)) AS TotalUnitPrice,          \n" +
               "						(SUM(rq.finalPrice)/IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice        \n" +
               "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq              \n" +
               "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id              \n" +
               "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                      \n" +
               "  \n" +
               "			PREPARE query6 FROM @SQLStatement6;                          \n" +
               "			EXECUTE query6;                          \n" +
               "			DEALLOCATE PREPARE query6;                              \n" +
               "  \n" +
               "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp2;       \n" +
               "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp3;	      \n" +
               "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;                    \n" +
               "    END;  \n" +
             /* **************************** New Script -> 01-09-2018  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLeadTimeRiskLineItems` ;  \n" +
           "CREATE PROCEDURE `Sproc_GetRFQLeadTimeRiskLineItems`(                      \n" +
           "	IN ppageIndex INT(11),                      \n" +
           "	IN precordPerPage INT(11),                      \n" +
           "	IN pOrderBy VARCHAR(255),                      \n" +
           "	IN pWhereClause VARCHAR(21844),                      \n" +
           "	IN rfqAssyID INT(11),                      \n" +
           "	IN puserID INT (11)                \n" +
           "    )  \n" +
           "BEGIN                      \n" +
           "  \n" +
           "	    DECLARE pOffset INT(11);                      \n" +
           "	    DECLARE rowNumWhere VARCHAR(255) ;              \n" +
           "	    SET SESSION group_concat_max_len = 150000;                      \n" +
           "	    SET @SQLString = NULL;                   \n" +
           "	    SET @HavingClause = NULL;                       \n" +
           "	    IF (pOrderBy IS NOT NULL) THEN                      \n" +
           "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                      \n" +
           "		ELSE                      \n" +
           "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                       \n" +
           "		END IF;	                      \n" +
           "  \n" +
           "  \n" +
           "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                      \n" +
           "			SET pWhereClause = '1=1' ;                      \n" +
           "		END IF;	                      \n" +
           "  \n" +
           "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                       \n" +
           "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                      \n" +
           "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                      \n" +
           "		ELSE	                      \n" +
           "			SET rowNumWhere = '';                      \n" +
           "		END IF;	                      \n" +
           "		SELECT                      \n" +
           "                      GROUP_CONCAT(DISTINCT                      \n" +
           "				CONCAT(                      \n" +
           "					'Max((IF(ra.requestQty = ''',                      \n" +
           "						ra.requestQty,                      \n" +
           "					''', (IFNULL(rq.leadTime,0)), null))) AS ''',                      \n" +
           "						ra.requestQty,''''                      \n" +
           "					)                      \n" +
           "					),            \n" +
           "		GROUP_CONCAT(DISTINCT                      \n" +
           "				CONCAT(                      \n" +
           "					'((Max((IF(ra.requestQty = ''',                      \n" +
           "						ra.requestQty,                      \n" +
           "					''', (IFNULL(rq.leadTime,0)), null))) < 16) AND ((IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0)) > (IFNULL(rq.currentStock,0))))'            \n" +
           "					) SEPARATOR ' OR '                          \n" +
           "					)             \n" +
           "				INTO @SQLString,@HavingClause                 \n" +
           "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                      \n" +
           "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                      \n" +
           "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                      \n" +
           "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                    \n" +
           "			IF(@SQLString IS NOT NULL) THEN                      \n" +
           "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                      \n" +
           "					SELECT                       \n" +
           "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,           \n" +
           "					  rl.qpa, ra.requestQty, rq.currentStock,               \n" +
           "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))                      \n" +
           "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla           \n" +
           "						LEFT JOIN component c ON rla.mfgpnid=c.id           \n" +
           "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                     \n" +
           "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                      \n" +
           "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                      \n" +
           "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                      \n" +
           "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'             \n" +
           "					GROUP BY rl.lineID');               \n" +
           "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	                      \n" +
           "			END IF;                       \n" +
           "			PREPARE stmt FROM @SQLStatement;                      \n" +
           "			EXECUTE stmt;	                      \n" +
           "  \n" +
           "  \n" +
           "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                      \n" +
           "			PREPARE query1 FROM @SQLStatement1;                      \n" +
           "			EXECUTE query1;                      \n" +
           "			DEALLOCATE PREPARE query1;                      \n" +
           "  \n" +
           "  \n" +
           "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                      \n" +
           "			PREPARE query2 FROM @SQLStatement2;                      \n" +
           "			EXECUTE query2;                      \n" +
           "			DEALLOCATE PREPARE query2;                      \n" +
           "  \n" +
           "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                      \n" +
           "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                      \n" +
           "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                      \n" +
           "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                      \n" +
           "			PREPARE query3 FROM @SQLStatement3;                      \n" +
           "			EXECUTE query3;                      \n" +
           "			DEALLOCATE PREPARE query3;                      \n" +
           "  \n" +
           "  			SET @SQLStatement4 = CONCAT(\"              \n" +
           "				SELECT requestQty,               \n" +
           "					finalPrice,               \n" +
           "					unitPrice,              \n" +
           "					supplier,               \n" +
           "					selectedMpn,               \n" +
           "					selectionMode,             \n" +
           "					selectedPIDCode,            \n" +
           "					rq.min,rq.mult,              \n" +
           "					qtyID,                 \n" +
           "					consolidateID,           \n" +
           "					currentStock,          \n" +
           "					leadTime,           \n" +
           "					supplierStock,          \n" +
           "					grossStock ,         \n" +
           "					pricingSuppliers         \n" +
           "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                   \n" +
           "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID               \n" +
           "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                      \n" +
           "			PREPARE query4 FROM @SQLStatement4;                      \n" +
           "			EXECUTE query4;                      \n" +
           "			DEALLOCATE PREPARE query4;                      \n" +
           "  \n" +
           "			DROP TEMPORARY TABLE consolidatetemp;                        \n" +
           "    END;  \n" +
             /* **************************** New Script -> 01-09-2018  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
               "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                      \n" +
               "	IN ppageIndex INT(11),                      \n" +
               "	IN precordPerPage INT(11),                      \n" +
               "	IN pOrderBy VARCHAR(255),                      \n" +
               "	IN pWhereClause VARCHAR(21844),                      \n" +
               "	IN rfqAssyID INT(11),                      \n" +
               "	IN puserID INT (11)                \n" +
               "    )  \n" +
               "BEGIN                      \n" +
               "  \n" +
               "	    DECLARE pOffset INT(11);                      \n" +
               "	    DECLARE rowNumWhere VARCHAR(255) ;                  \n" +
               "	    SET @SQLString = NULL;                   \n" +
               "	    IF (pOrderBy IS NOT NULL) THEN                      \n" +
               "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                      \n" +
               "		ELSE                      \n" +
               "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                       \n" +
               "		END IF;	                      \n" +
               "  \n" +
               "  \n" +
               "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                      \n" +
               "			SET pWhereClause = '1=1' ;                      \n" +
               "		END IF;	                      \n" +
               "  \n" +
               "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                       \n" +
               "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                      \n" +
               "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                      \n" +
               "		ELSE	                      \n" +
               "			SET rowNumWhere = '';                      \n" +
               "		END IF;	                      \n" +
               "		SELECT              \n" +
               "                     GROUP_CONCAT(DISTINCT              \n" +
               "				CONCAT(              \n" +
               "					'Max((IF(ra.requestQty = ''',              \n" +
               "						ra.requestQty,              \n" +
               "					''', rq.finalPrice, null))) AS ''',              \n" +
               "						ra.requestQty,''''              \n" +
               "					)              \n" +
               "					) INTO @SQLString              \n" +
               "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                      \n" +
               "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                      \n" +
               "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                      \n" +
               "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                    \n" +
               "			IF(@SQLString IS NOT NULL) THEN                      \n" +
               "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                      \n" +
               "					SELECT                       \n" +
               "						rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                        \n" +
               "						rp.partTypeName, rm.name,       \n" +
               "						rl.qpa,          \n" +
               "						(SELECT gc.gencCategoryName FROM genericcategory gc            \n" +
               "						WHERE gc.gencCategoryID = co.PartStatus AND gc.deletedAt IS NULL AND co.deletedAt IS NULL) AS PartStatus,            \n" +
               "						co.ltbDate AS LTBDate,    \n" +
               "						co.eolDate AS EOLDate,             \n" +
               "						(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))                    \n" +
               "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla         \n" +
               "						LEFT JOIN component c ON rla.mfgpnid=c.id         \n" +
               "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                       \n" +
               "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                      \n" +
               "						LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                      \n" +
               "						LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                              \n" +
               "						LEFT JOIN rfq_parttypemst rp ON rl.partTypeID=rp.id                               \n" +
               "						LEFT JOIN rfq_mountingtypemst rm ON rl.partClassID=rm.id      \n" +
               "						LEFT JOIN component co ON mfgPN=rq.selectedMpn                      \n" +
               "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'             \n" +
               "						AND rq.selectedMpn IN (SELECT mfgPN FROM component             \n" +
               "					WHERE deletedAt IS NULL AND partstatus IN             \n" +
               "						(SELECT gencCategoryID FROM genericcategory             \n" +
               "					WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Not For New Design\",\"Obsolete\")))            \n" +
               "					GROUP BY rl.lineID');                        \n" +
               "			END IF;             \n" +
               "			PREPARE stmt FROM @SQLStatement;                    \n" +
               "			EXECUTE stmt;	                      \n" +
               "  \n" +
               "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                      \n" +
               "			PREPARE query1 FROM @SQLStatement1;                      \n" +
               "			EXECUTE query1;                      \n" +
               "			DEALLOCATE PREPARE query1;                      \n" +
               "  \n" +
               "  \n" +
               "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                      \n" +
               "			PREPARE query2 FROM @SQLStatement2;                      \n" +
               "			EXECUTE query2;                      \n" +
               "			DEALLOCATE PREPARE query2;                      \n" +
               "  \n" +
               "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                      \n" +
               "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                      \n" +
               "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                      \n" +
               "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                      \n" +
               "			PREPARE query3 FROM @SQLStatement3;                      \n" +
               "			EXECUTE query3;                      \n" +
               "			DEALLOCATE PREPARE query3;                      \n" +
               "  \n" +
               "			SET @SQLStatement4 = CONCAT(\"              \n" +
               "				SELECT requestQty,               \n" +
               "					finalPrice,               \n" +
               "					unitPrice,              \n" +
               "					supplier,               \n" +
               "					selectedMpn,               \n" +
               "					selectionMode,              \n" +
               "					qtyID,               \n" +
               "					consolidateID,          \n" +
               "					selectedPIDCode,            \n" +
               "					rq.min,rq.mult,              \n" +
               "					qtyID,                 \n" +
               "					consolidateID,           \n" +
               "					currentStock,          \n" +
               "					leadTime,           \n" +
               "					supplierStock,          \n" +
               "					grossStock,            \n" +
               "					pricingSuppliers,   \n" +
               "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus              \n" +
               "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                   \n" +
               "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID               \n" +
               "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                      \n" +
               "			PREPARE query4 FROM @SQLStatement4;                      \n" +
               "			EXECUTE query4;                      \n" +
               "			DEALLOCATE PREPARE query4;                      \n" +
               "  \n" +
               "			DROP TEMPORARY TABLE consolidatetemp;                        \n" +
               "    END;  \n" +
             /* **************************** New Script -> 01-09-2018  *********************************** */
           "DROP PROCEDURE IF EXISTS `Sproc_GetRFQNotQuotedLineItems` ;  \n" +
           "CREATE PROCEDURE `Sproc_GetRFQNotQuotedLineItems`(                        \n" +
           "	IN ppageIndex INT(11),                        \n" +
           "	IN precordPerPage INT(11),                        \n" +
           "	IN pOrderBy VARCHAR(255),                        \n" +
           "	IN pWhereClause VARCHAR(21844),                        \n" +
           "	IN rfqAssyID INT(11),                        \n" +
           "	IN puserID INT (11)                  \n" +
           "    )  \n" +
           "BEGIN                        \n" +
           "  \n" +
           "	    DECLARE pOffset INT(11);                        \n" +
           "	    DECLARE rowNumWhere VARCHAR(255) ;                    \n" +
           "	    SET @SQLString = NULL;                          \n" +
           "	    SET @HavingClause = NULL;              \n" +
           "	    SET SESSION group_concat_max_len = 150000;                              \n" +
           "	    IF (pOrderBy IS NOT NULL) THEN                        \n" +
           "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                        \n" +
           "		ELSE                        \n" +
           "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;                         \n" +
           "		END IF;	                        \n" +
           "  \n" +
           "  \n" +
           "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                        \n" +
           "			SET pWhereClause = '1=1' ;                        \n" +
           "		END IF;	                        \n" +
           "  \n" +
           "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                         \n" +
           "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                        \n" +
           "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                        \n" +
           "		ELSE	                        \n" +
           "			SET rowNumWhere = '';                        \n" +
           "		END IF;	                        \n" +
           "		SELECT                        \n" +
           "                      GROUP_CONCAT(DISTINCT                        \n" +
           "				CONCAT(                        \n" +
           "					'Max((IF(ra.requestQty = ''',                        \n" +
           "						ra.requestQty,                        \n" +
           "					''', rq.finalPrice, null))) AS ''',                        \n" +
           "						ra.requestQty,''''                        \n" +
           "					)                        \n" +
           "					),                    \n" +
           "			GROUP_CONCAT(DISTINCT                        \n" +
           "				CONCAT(                        \n" +
           "					'Max((IF(ra.requestQty = ''',                        \n" +
           "						ra.requestQty,                        \n" +
           "					''', rq.finalPrice, null))) IS NULL'                        \n" +
           "					) SEPARATOR ' OR '                       \n" +
           "					)                    \n" +
           "				INTO @SQLString, @HavingClause                    \n" +
           "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                        \n" +
           "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                        \n" +
           "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                        \n" +
           "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                      \n" +
           "			IF(@SQLString IS NOT NULL) THEN                        \n" +
           "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                        \n" +
           "					SELECT                         \n" +
           "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,           \n" +
           "					  (SELECT gc.gencCategoryName FROM genericcategory gc            \n" +
           "						LEFT JOIN component c ON gc.gencCategoryID = c.PartStatus            \n" +
           "						WHERE gc.deletedAt IS NULL AND c.deletedAt IS NULL AND c.mfgPN=rq.selectedMpn) AS PartStatus,            \n" +
           "						(SELECT ltbDate FROM component WHERE mfgPN=rq.selectedMpn and deletedAt IS NULL) AS LTBDate,                           \n" +
           "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,            \n" +
           "					(SELECT             \n" +
           "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                      \n" +
           "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN             \n" +
           "                                     component c ON rla.mfgpnid=c.id             \n" +
           "                                     LEFT JOIN mfgcodemst mg ON              \n" +
           "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                        \n" +
           "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))                    \n" +
           "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla         \n" +
           "						LEFT JOIN component c ON rla.mfgpnid=c.id         \n" +
           "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',        \n" +
           "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                        \n" +
           "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                        \n" +
           "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                        \n" +
           "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                      \n" +
           "  \n" +
           "					-- SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause, ' OR partstatus IN             \n" +
           "					-- 	(SELECT gencCategoryName FROM genericcategory             \n" +
           "					-- WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Obsolete\"))');                  \n" +
           "  \n" +
           "					SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                             \n" +
           "			END IF;                     \n" +
           "			PREPARE stmt FROM @SQLStatement;                        \n" +
           "			EXECUTE stmt;	                        \n" +
           "  \n" +
           "  \n" +
           "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                        \n" +
           "			PREPARE query1 FROM @SQLStatement1;                        \n" +
           "			EXECUTE query1;                        \n" +
           "			DEALLOCATE PREPARE query1;                        \n" +
           "  \n" +
           "  \n" +
           "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                        \n" +
           "			PREPARE query2 FROM @SQLStatement2;                        \n" +
           "			EXECUTE query2;                        \n" +
           "			DEALLOCATE PREPARE query2;                        \n" +
           "  \n" +
           "			SET @SQLStatement3 = CONCAT(\" SELECT distinct ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                        \n" +
           "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID            \n" +
           "			   WHERE  ra.rfqAssyID=\",rfqAssyID);                        \n" +
           "			PREPARE query3 FROM @SQLStatement3;                        \n" +
           "			EXECUTE query3;                        \n" +
           "			DEALLOCATE PREPARE query3;                        \n" +
           "  \n" +
           "  			SET @SQLStatement4 = CONCAT(\"                \n" +
           "				SELECT requestQty,                 \n" +
           "					finalPrice,                 \n" +
           "					unitPrice,                \n" +
           "					supplier,           \n" +
           "					rq.min,rq.mult,               \n" +
           "					selectedMpn,                 \n" +
           "					selectionMode,                \n" +
           "					selectedPIDCode,              \n" +
           "					qtyID,                 \n" +
           "					consolidateID,           \n" +
           "					currentStock,          \n" +
           "					leadTime,           \n" +
           "					supplierStock,          \n" +
           "					grossStock,            \n" +
           "					pricingSuppliers,                 \n" +
           "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus                \n" +
           "					FROM rfq_consolidate_mfgpn_lineitem_quantity rq                     \n" +
           "					LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                 \n" +
           "					WHERE consolidateID IN (SELECT id FROM consolidatetemp)\");                        \n" +
           "			PREPARE query4 FROM @SQLStatement4;                        \n" +
           "			EXECUTE query4;                        \n" +
           "			DEALLOCATE PREPARE query4;                        \n" +
           "  \n" +
           "			DROP TEMPORARY TABLE consolidatetemp;                          \n" +
           "    END;  \n" +
             /* **************************** New Script -> 01-09-2018  *********************************** */
           "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
           "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(                  \n" +
           "	IN ppageIndex INT(11),                  \n" +
           "	IN precordPerPage INT(11),                  \n" +
           "	IN pOrderBy VARCHAR(255),                  \n" +
           "	IN pWhereClause VARCHAR(21844),                  \n" +
           "	IN rfqAssyID INT(11),                  \n" +
           "	IN puserID INT (11)                  \n" +
           "    )  \n" +
           "BEGIN                  \n" +
           "  \n" +
           "	    DECLARE pOffset INT(11);                  \n" +
           "	    DECLARE rowNumWhere VARCHAR(255) ;                  \n" +
           "	    SET @SQLString = NULL;                  \n" +
           "	    SET SESSION group_concat_max_len = 150000;                      \n" +
           "	    IF (pOrderBy IS NOT NULL) THEN                  \n" +
           "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
           "		ELSE                  \n" +
           "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;                   \n" +
           "		END IF;	                  \n" +
           "  \n" +
           "  \n" +
           "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                  \n" +
           "			SET pWhereClause = '1=1' ;                  \n" +
           "		END IF;	                  \n" +
           "  \n" +
           "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
           "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
           "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
           "		ELSE	                  \n" +
           "			SET rowNumWhere = '';                  \n" +
           "		END IF;	                  \n" +
           "		SELECT                  \n" +
           "                     GROUP_CONCAT(DISTINCT                  \n" +
           "				CONCAT(                  \n" +
           "					'Max((IF(ra.requestQty = ''',                  \n" +
           "						ra.requestQty,                  \n" +
           "					''', rq.finalPrice, null))) AS ''',                  \n" +
           "						ra.requestQty,''''                  \n" +
           "					)                  \n" +
           "					) INTO @SQLString                  \n" +
           "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                  \n" +
           "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                  \n" +
           "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                  \n" +
           "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                  \n" +
           "  \n" +
           "			IF(@SQLString IS NOT NULL) THEN                  \n" +
           "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                  \n" +
           "					SELECT                   \n" +
           "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                    \n" +
           "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,              \n" +
           "					(SELECT               \n" +
           "                                      GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                        \n" +
           "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN               \n" +
           "                                     component c ON rla.mfgpnid=c.id               \n" +
           "                                     LEFT JOIN mfgcodemst mg ON                \n" +
           "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                  \n" +
           "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))AS mfgPn                   \n" +
           "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN               \n" +
           "                                component c ON rla.mfgpnid=c.id                         \n" +
           "                                WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',                   \n" +
           "					@SQLString, ' FROM rfq_consolidated_mfgpn_lineitem rl                  \n" +
           "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                  \n" +
           "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                  \n" +
           "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                  \n" +
           "  \n" +
           "			ELSE                  \n" +
           "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                  \n" +
           "					SELECT  id,isPurchase,rl.numOfPosition, lineID,rfqLineItemID,rfqAssyBomID, rfqAssyID,  IFNULL(leadQty,0) leadQty,IFNULL(attritionRate,0) attritionRate,qpa,               \n" +
           "					 GROUP_CONCAT(rla.mfgPN,''###'',mg.mfgCode)                        \n" +
           "                                     FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN               \n" +
           "                                     component c ON rla.mfgpnid=c.id               \n" +
           "                                     LEFT JOIN mfgcodemst mg ON                \n" +
           "                                      c.mfgCodeID=mg.id WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS component,                    \n" +
           "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'', c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))AS mfgPn                   \n" +
           "                                FROM rfq_consolidated_mfgpn_lineitem_alternate rla                   \n" +
           "                                  WHERE rla.consolidateID=rmcl.id AND rla.isdeleted=0) as mfgPN FROM rfq_consolidated_mfgpn_lineitem rmcl                  \n" +
           "					where isdeleted=0 and  rfqAssyID=',rfqAssyID,' group by lineID ');	                  \n" +
           "			END IF;                  \n" +
           "			PREPARE stmt FROM @SQLStatement;                  \n" +
           "			EXECUTE stmt;	                  \n" +
           "  \n" +
           "  \n" +
           "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                  \n" +
           "			PREPARE query1 FROM @SQLStatement1;                  \n" +
           "			EXECUTE query1;                  \n" +
           "			DEALLOCATE PREPARE query1;                  \n" +
           "  \n" +
           "  \n" +
           "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
           "			PREPARE query2 FROM @SQLStatement2;                  \n" +
           "			EXECUTE query2;                  \n" +
           "			DEALLOCATE PREPARE query2;                  \n" +
           "  \n" +
           "  \n" +
           "  \n" +
           "			SET @SQLStatement3 = CONCAT(\" SELECT * FROM rfq_lineitem_autopricingstatus where rfqAssyID=\", rfqAssyID,\" and userid=\", puserID );                  \n" +
           "			PREPARE query3 FROM @SQLStatement3;                  \n" +
           "			EXECUTE query3;                  \n" +
           "			DEALLOCATE PREPARE query3;                  \n" +
           "  \n" +
           "			SET @SQLStatement4 = CONCAT(\" SELECT rt.id qtyTimeID,rt.turnTime,rt.turnType,rt.rfqAssyQtyID,rq.requestQty FROM rfq_assy_quantity_turn_time rt                  \n" +
           "				  LEFT JOIN rfq_assy_quantity rq ON rt.rfqAssyQtyID=rq.id                  \n" +
           "				  WHERE rt.isDeleted=0 AND rq.rfqAssyID=\",rfqAssyID);                  \n" +
           "			PREPARE query4 FROM @SQLStatement4;                  \n" +
           "			EXECUTE query4;                  \n" +
           "			DEALLOCATE PREPARE query4;              \n" +
           "  \n" +
           "			SET @SQLStatement5= CONCAT(\"SELECT ra.requestQty, rq.finalPrice, unitPrice,supplier,rq.min,rq.mult, selectedMpn, selectionMode,qtyID,             \n" +
           "					currentStock,            \n" +
           "					leadTime,             \n" +
           "					supplierStock,            \n" +
           "					grossStock,                \n" +
           "					selectedPIDCode,              \n" +
           "					pricingSuppliers,  \n" +
           "					ct.qpa, consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                       \n" +
           "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID               \n" +
           "				left join rfq_consolidated_mfgpn_lineitem ct on  rq.consolidateID=ct.id               \n" +
           "				WHERE ct.rfqAssyID=\",rfqAssyID);                      \n" +
           "			PREPARE query5 FROM @SQLStatement5;                          \n" +
           "			EXECUTE query5;                          \n" +
           "			DEALLOCATE PREPARE query5;                 \n" +
           "  \n" +
           "			SET @SQLStatement6= CONCAT(\"SELECT rq.qtyID,rl.requestQty,           \n" +
           "						(SUM(rq.finalPrice)) AS TotalExtendedPrice,           \n" +
           "						(SUM(rq.unitPrice)) AS TotalUnitPrice,          \n" +
           "						(SUM(rq.finalPrice)/ IFNULL(rl.requestQty,0)) AS TotalAssemblyPrice        \n" +
           "					           FROM rfq_consolidate_mfgpn_lineitem_quantity rq              \n" +
           "					           LEFT JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id              \n" +
           "							WHERE rl.isDeleted=0 AND rq.isDeleted=0 AND rl.rfqAssyid=\",rfqAssyID,\"  GROUP BY rq.qtyID\");                      \n" +
           "  \n" +
           "			PREPARE query6 FROM @SQLStatement6;                          \n" +
           "			EXECUTE query6;                          \n" +
           "			DEALLOCATE PREPARE query6;                              \n" +
           "  \n" +
           "  \n" +
           "			DROP TEMPORARY TABLE consolidatetemp;                    \n" +
           "    END;  \n" +
             /* **************************** New Script -> 01-09-2018  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_GetRFQExcessMaterialLineItems` ;  \n" +
           "CREATE PROCEDURE `Sproc_GetRFQExcessMaterialLineItems`(                      \n" +
           "	IN ppageIndex INT(11),                      \n" +
           "	IN precordPerPage INT(11),                      \n" +
           "	IN pOrderBy VARCHAR(255),                      \n" +
           "	IN pWhereClause VARCHAR(21844),                      \n" +
           "	IN rfqAssyID INT(11),                      \n" +
           "	IN puserID INT (11)                \n" +
           "    )  \n" +
           "BEGIN                      \n" +
           "  \n" +
           "	    DECLARE pOffset INT(11);                      \n" +
           "	    DECLARE rowNumWhere VARCHAR(255) ;                  \n" +
           "	    SET @SQLString = NULL;                 \n" +
           "	    SET @HavingClause = NULL;                 \n" +
           "	    SET SESSION group_concat_max_len = 150000;                  \n" +
           "	    IF (pOrderBy IS NOT NULL) THEN                      \n" +
           "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                      \n" +
           "		ELSE                      \n" +
           "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` asc\") ;                       \n" +
           "		END IF;	                      \n" +
           "  \n" +
           "  \n" +
           "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                      \n" +
           "			SET pWhereClause = '1=1' ;                      \n" +
           "		END IF;	                      \n" +
           "  \n" +
           "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                       \n" +
           "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                      \n" +
           "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                      \n" +
           "		ELSE	                      \n" +
           "			SET rowNumWhere = '';                      \n" +
           "		END IF;	                      \n" +
           "		SELECT                      \n" +
           "                      GROUP_CONCAT(DISTINCT                      \n" +
           "				CONCAT(                      \n" +
           "					'Max((IF(ra.requestQty = ''',                      \n" +
           "						ra.requestQty,                      \n" +
           "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),                 \n" +
           "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),                 \n" +
           "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) AS ''',                      \n" +
           "						ra.requestQty,''''                      \n" +
           "					)                      \n" +
           "					),                \n" +
           "  \n" +
           "                      GROUP_CONCAT(DISTINCT                      \n" +
           "				CONCAT(                      \n" +
           "					'Max((IF(ra.requestQty = ''',                      \n" +
           "						ra.requestQty,                      \n" +
           "					''', ((IF((CEIL((ra.requestQty*IFNULL(rl.qpa,1)) / IFNULL(rq.mult,1)) * IFNULL(rq.mult,1))>IFNULL(rq.min,0),                 \n" +
           "									(CEIL((ra.requestQty*IFNULL(rl.qpa,1))/IFNULL(rq.mult,1))*IFNULL(rq.mult,1)),                 \n" +
           "								IFNULL(rq.min,0)))-(ra.requestQty*IFNULL(rl.qpa,1)))*(IFNULL(rq.unitPrice,0)), null))) > 0'                         \n" +
           "					) SEPARATOR ' OR '                     \n" +
           "					)                \n" +
           "				INTO @SQLString, @HavingClause                 \n" +
           "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                      \n" +
           "		  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                      \n" +
           "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                      \n" +
           "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;                    \n" +
           "			IF(@SQLString IS NOT NULL) THEN                      \n" +
           "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                      \n" +
           "					SELECT                       \n" +
           "					  rl.id,rl.isPurchase, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,                        \n" +
           "					IFNULL(rl.leadQty,0) leadQty,IFNULL(rl.attritionRate,0) attritionRate,rl.qpa,                      \n" +
           "					(SELECT GROUP_CONCAT(IFNULL(rla.PIDCode,\"N/A\"),''@@@'',c.rohsComplient,''@@@'',IFNULL(c.feature,\"\"))                  \n" +
           "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla       \n" +
           "						LEFT JOIN component c ON rla.mfgpnid=c.id       \n" +
           "						WHERE rla.consolidateID=rl.id AND rla.isdeleted=0) AS mfgPN, ',      \n" +
           "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                      \n" +
           "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID                      \n" +
           "					LEFT JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id                      \n" +
           "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,' GROUP BY rl.lineID');                    \n" +
           "  \n" +
           "				SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);                      \n" +
           "			END IF;                  \n" +
           "			PREPARE stmt FROM @SQLStatement;                      \n" +
           "			EXECUTE stmt;	                      \n" +
           "  \n" +
           "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM consolidatetemp where \", pWhereClause );                      \n" +
           "			PREPARE query1 FROM @SQLStatement1;                      \n" +
           "			EXECUTE query1;                      \n" +
           "			DEALLOCATE PREPARE query1;                      \n" +
           "  \n" +
           "  \n" +
           "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                      \n" +
           "			PREPARE query2 FROM @SQLStatement2;                      \n" +
           "			EXECUTE query2;                      \n" +
           "			DEALLOCATE PREPARE query2;                      \n" +
           "  \n" +
           "			SET @SQLStatement3 = CONCAT(\" SELECT ra.id,ra.requestQty,ra.rfqAssyID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                      \n" +
           "			  LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                      \n" +
           "			  LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                      \n" +
           "			   WHERE ra.rfqAssyID=rl.rfqAssyID AND rq.isDeleted=0 AND rl.rfqAssyID=\",rfqAssyID);                      \n" +
           "			PREPARE query3 FROM @SQLStatement3;                      \n" +
           "			EXECUTE query3;                      \n" +
           "			DEALLOCATE PREPARE query3;                      \n" +
           "  \n" +
           "  \n" +
           "			SET @SQLStatement4 = CONCAT(\"SELECT requestQty, finalPrice, unitPrice,supplier, selectedMpn, selectionMode,qtyID,          \n" +
           "					selectedPIDCode,            \n" +
           "					min, mult,          \n" +
           "					currentStock,          \n" +
           "					leadTime,           \n" +
           "					supplierStock,          \n" +
           "					grossStock,         \n" +
           "					pricingSuppliers,    \n" +
           "					(SELECT partStatus FROM component WHERE mfgPN=rq.selectedMpn AND IFNULL(isDeleted,0)=0 AND deletedAt IS NULL) AS partStatus,          \n" +
           "					selectedPIDCode,         \n" +
           "					consolidateID FROM rfq_consolidate_mfgpn_lineitem_quantity rq                   \n" +
           "				LEFT JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID WHERE consolidateID IN (select id from consolidatetemp)\");                      \n" +
           "			PREPARE query4 FROM @SQLStatement4;                      \n" +
           "			EXECUTE query4;                      \n" +
           "			DEALLOCATE PREPARE query4;                      \n" +
           "  \n" +
           "  \n" +
           "			DROP TEMPORARY TABLE consolidatetemp;                        \n" +
           "    END;  \n" +
             /* **************************** New Script -> 01-09-2018  *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
             "VALUES (158,'1.00','V1','DB Changes for pricing suppliers - Vaibhav '," + userid + ");"
             );
            break;
    }
    return allDbChangesArray;

});

// sample
//case 1:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 13-08-2018  *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version -> 13-08-2018 *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`) " +
//  "VALUES (2,'1.00','V1',' Sample entry - KETAN '," + userid + ");"
//  );
//break;